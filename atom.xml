<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星的猫(&gt;^ω^&lt;)喵</title>
  
  
  <link href="https://blog.shawncoding.top/atom.xml" rel="self"/>
  
  <link href="https://blog.shawncoding.top/"/>
  <updated>2024-01-24T12:10:49.978Z</updated>
  <id>https://blog.shawncoding.top/</id>
  
  <author>
    <name>Shawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>集群监控Zabbix和Prometheus</title>
    <link href="https://blog.shawncoding.top/posts/12bf1070.html"/>
    <id>https://blog.shawncoding.top/posts/12bf1070.html</id>
    <published>2023-12-13T08:39:26.000Z</published>
    <updated>2024-01-24T12:10:49.978Z</updated>
    
    <content type="html"><![CDATA[<h1>集群监控Zabbix和Prometheus</h1><h1>一、Zabbix入门概述</h1><h2 id="1、Zabbix概述">1、Zabbix概述</h2><p>Zabbix是一款能够监控各种网络参数以及服务器健康性和完整性的软件。Zabbix使用灵活的通知机制，允许用户为几乎任何事件配置基于邮件的告警。这样可以快速反馈服务器的问题。基于已存储的数据，Zabbix提供了出色的报告和数据可视化功能</p><a id="more"></a><h2 id="2、Zabbix-基础架构">2、Zabbix 基础架构</h2><p><img src="http://qnypic.shawncoding.top/course/202312131435398.png" alt></p><h2 id="3、Zabbix部署">3、Zabbix部署</h2><blockquote><p>官网：<a href="https://www.zabbix.com/cn/download" target="_blank" rel="noopener" title="https://www.zabbix.com/cn/download">https://www.zabbix.com/cn/download</a></p></blockquote><h3 id="3-1-前提环境准备">3.1 前提环境准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果集群开启，先关闭集群。因为安装Zabbix前，需要重启虚拟机。如果之前弄过了就不需要了</span></span><br><span class="line">cluster.sh stop</span><br><span class="line"><span class="comment"># 关闭防火墙（3台节点，已关闭）</span></span><br><span class="line">sudo service iptables stop</span><br><span class="line">sudo chkconfig iptables off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭SELinux（hadoop102）</span></span><br><span class="line"><span class="comment"># 修改配置文件/etc/selinux/config</span></span><br><span class="line">sudo vim /etc/selinux/config</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment"># 重启服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================配置Zabbix yum源（3台节点）==========</span></span><br><span class="line"><span class="comment"># 安装yum仓库，安装zabbix的yum仓库，三台机器都要运行</span></span><br><span class="line">sudo rpm -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class="line"><span class="comment"># 安装Software Collections仓库</span></span><br><span class="line">sudo yum install -y centos-release-scl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =============修改zabbix仓库配置文件(三台节点)===========</span></span><br><span class="line"><span class="comment"># 修改为阿里云镜像</span></span><br><span class="line"><span class="comment"># 查看原始zabbix.repo文件</span></span><br><span class="line">sudo cat /etc/yum.repos.d/zabbix.repo</span><br><span class="line"><span class="comment"># 执行以下命令完成全局替换</span></span><br><span class="line">sudo sed -i <span class="string">'s/http:\/\/repo.zabbix.com/https:\/\/mirrors.aliyun.com\/zabbix/g'</span> /etc/yum.repos.d/zabbix.repo</span><br><span class="line"><span class="comment"># 查看修改之后的zabbix.repo文件</span></span><br><span class="line">sudo cat /etc/yum.repos.d/zabbix.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用zabbix-web仓库,仅在102机器进行修改</span></span><br><span class="line"><span class="comment"># 打开/etc/yum.repos.d/zabbix.repo文件，做如下修改</span></span><br><span class="line">[zabbix-frontend]</span><br><span class="line">...</span><br><span class="line">enabled=1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-安装Zabbix">3.2 安装Zabbix</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在hadoop102、hadoop103、hadoop104三台节点分别执行以下安装命令</span></span><br><span class="line">sudo yum install -y zabbix-server-mysql zabbix-agent zabbix-web-mysql-scl zabbix-apache-conf-scl</span><br><span class="line"><span class="comment"># hadoop103</span></span><br><span class="line">sudo yum install -y zabbix-agent</span><br><span class="line"><span class="comment"># hadoop104</span></span><br><span class="line">sudo yum install -y zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="3-3-配置Zabbix">3.3 配置Zabbix</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建zabbix数据库</span></span><br><span class="line">mysql -uroot -p123456 -e<span class="string">"create database zabbix character set utf8 collate utf8_bin"</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uroot -p123456 zabbix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Zabbix_Server（hadoop102）</span></span><br><span class="line"><span class="comment"># 修改zabbix-server配置文件</span></span><br><span class="line">sudo vim /etc/zabbix/zabbix_server.conf</span><br><span class="line">DBHost=hadoop102</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=root</span><br><span class="line">DBPassword=123456</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Zabbix_Agent（三台节点），server都写hadoop102</span></span><br><span class="line"><span class="comment"># 修改zabbix-agent配置文件</span></span><br><span class="line">sudo vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line"><span class="comment"># 修改如下内容：使用被动模式，等待proxy查询，而不是主动发送</span></span><br><span class="line">Server=hadoop102</span><br><span class="line"><span class="comment">#ServerActive=127.0.0.1</span></span><br><span class="line"><span class="comment">#Hostname=Zabbix server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Zabbix_Web时区,102</span></span><br><span class="line"><span class="comment"># 修改/etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf文件</span></span><br><span class="line">sudo vim /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</span><br><span class="line"><span class="comment"># 最后一行改</span></span><br><span class="line">php_value[date.timezone] = Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="3-4-启动停止Zabbix">3.4 启动停止Zabbix</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 102启动与停止</span></span><br><span class="line">sudo systemctl start zabbix-server zabbix-agent httpd rh-php72-php-fpm</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> zabbix-server zabbix-agent httpd rh-php72-php-fpm</span><br><span class="line">sudo systemctl stop zabbix-server zabbix-agent httpd rh-php72-php-fpm</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> zabbix-server zabbix-agent httpd rh-php72-php-fpm</span><br><span class="line"><span class="comment"># 103，104启动与停止</span></span><br><span class="line">sudo systemctl start zabbix-agent</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> zabbix-agent</span><br><span class="line">sudo systemctl stop zabbix-agent</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> zabbix-agent</span><br></pre></td></tr></table></figure><p>然后连接Zabbix_Web数据库，浏览器访问<code>http://hadoop102/zabbix/</code>，然后按照步骤填写</p><p><img src="http://qnypic.shawncoding.top/course/202312131435399.png" alt></p><p>最后登陆，用户名：Admin 密码：zabbix</p><h1>二、Zabbix的使用与集成</h1><h2 id="1、Zabbix常用术语">1、Zabbix常用术语</h2><ul><li><p>主机（Host）</p><p>一台你想监控的网络设备，用IP或域名表示</p></li><li><p>监控项（Item）</p><p>你想要接收的主机的特定数据，一个度量数据</p></li><li><p>触发器（Trigger）</p><p>一个被用于定义问题阈值和“评估”监控项接收到的数据的逻辑表达式</p></li><li><p>动作（Action）</p><p>一个对事件做出反应的预定义的操作，比如邮件通知</p></li></ul><h2 id="2、Zabbix实战">2、Zabbix实战</h2><h3 id="2-1-创建Host">2.1 创建Host</h3><ul><li>进入UI界面<strong>点击配置/主机/创建主机</strong></li><li><strong>配置主机（Host）</strong>，主机名称填写hadoop102，群组填写hadoop(自动新增)，填写agent所在ip，保存，<strong>重复以上步骤，再创建hadoop103、hadoop104主机</strong></li></ul><h3 id="2-2-创建监控项（Items）">2.2 创建监控项（Items）</h3><blockquote><p>文档资料：<a href="https://www.zabbix.com/documentation/5.0/zh/manual/config/items/itemtypes/zabbix_agent" target="_blank" rel="noopener" title="https://www.zabbix.com/documentation/5.0/zh/manual/config/items/itemtypes/zabbix_agent">https://www.zabbix.com/documentation/5.0/zh/manual/config/items/itemtypes/zabbix_agent</a></p></blockquote><p>在一台主机(例如hadoop102)<strong>点击监控项（Items）</strong>,<strong>点击创建监控项（Create Item）</strong>，<strong>配置监控项（Item）<strong>这里我以查询datanode的进程数为例，配置完成后即可</strong>查看监控项最新数据</strong></p><p><img src="http://qnypic.shawncoding.top/course/202312131435400.png" alt></p><h3 id="2-3-创建触发器（Trigger）">2.3 创建触发器（Trigger）</h3><ul><li><strong>点击配置/主机/触发器</strong></li><li><strong>点击创建触发器，编辑触发器</strong></li></ul><p><img src="http://qnypic.shawncoding.top/course/202312131435401.png" alt></p><h3 id="2-4-创建报警媒介类型（Media-type）">2.4 创建报警媒介类型（Media type）</h3><p><strong>点击管理/报警媒介类型/Email</strong>，编辑Email</p><p><img src="http://qnypic.shawncoding.top/course/202312131435402.png" alt></p><p>然后在用户设置里<strong>Email绑定收件人</strong></p><h3 id="2-5-创建动作（Action）">2.5 创建动作（Action）</h3><p><strong>点击配置/动作/创建动作，编辑动作（Action）</strong></p><p><img src="http://qnypic.shawncoding.top/course/202312131435403.png" alt></p><p><img src="http://qnypic.shawncoding.top/course/202312131435404.png" alt></p><h3 id="2-6-测试">2.6 测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭集群中的HDFS，会有如下效果</span></span><br><span class="line">sbin/stop-dfs.sh</span><br><span class="line"><span class="comment"># 查看仪表盘与邮件</span></span><br></pre></td></tr></table></figure><h3 id="2-7-Zabbix模板创建">2.7 Zabbix模板创建</h3><p>里面可以发现有很多已经内置好的模板，可以直接拿来使用。如果要自己创建，点击配置/模板/创建模板，配置模板名称/群组，配置监控项，配置触发器；然后配置动作，将这几个触发器连接到动作。最后去主机为hadoop103应用模板</p><h2 id="3、集成Grafana入门">3、集成Grafana入门</h2><h3 id="3-1-部署Grafana">3.1 部署Grafana</h3><p>官方仓库：<a href="https://dl.grafana.com/oss/release/grafana-7.4.3-1.x86_64.rpm" target="_blank" rel="noopener" title="https://dl.grafana.com/oss/release/grafana-7.4.3-1.x86_64.rpm">https://dl.grafana.com/oss/release/grafana-7.4.3-1.x86_64.rpm</a></p><p>国内镜像：<a href="https://repo.huaweicloud.com/grafana/7.4.3/grafana-7.4.3-1.x86_64.rpm" target="_blank" rel="noopener" title="https://repo.huaweicloud.com/grafana/7.4.3/grafana-7.4.3-1.x86_64.rpm">https://repo.huaweicloud.com/grafana/7.4.3/grafana-7.4.3-1.x86_64.rpm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.huaweicloud.com/grafana/7.4.3/grafana-7.4.3-1.x86_64.rpm</span><br><span class="line"><span class="comment"># 使用rpm安装Grafana</span></span><br><span class="line">sudo rpm -ivh grafana-7.4.3-1.x86_64.rpm</span><br><span class="line"><span class="comment"># 启动Grafana</span></span><br><span class="line">sudo systemctl start grafana-server</span><br><span class="line"><span class="comment"># 访问地址为：http://hadoop102:3000/</span></span><br><span class="line"><span class="comment"># 首次登录用户名和密码均为 admin</span></span><br></pre></td></tr></table></figure><h3 id="3-2-集成Zabbix">3.2 集成Zabbix</h3><p>使用Grafana与其他系统集成时，需要配置对应的DataSource</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索无法找到，需要先自行下载zabbix插件</span></span><br><span class="line"><span class="comment"># 拉到最下面或者访问：https://grafana.com/grafana/plugins/?utm_source=grafana_add_ds</span></span><br><span class="line"><span class="comment"># 按照所需插件的说明进行部署</span></span><br><span class="line">sudo grafana-cli plugins install alexanderzobnin-zabbix-app</span><br><span class="line">sudo systemctl restart grafana-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后点击plungin选择启动zabbix插件，之后数据源就可以找到该zabbix了</span></span><br></pre></td></tr></table></figure><p><img src="http://qnypic.shawncoding.top/course/202312131435405.png" alt></p><p>下面举例一个集成案例，在Zabbix中为hadoop102主机应用一个Zabbix内置的Linux系统监控模板，选择主机hadoop102，点击模板，搜索linux，并选择Template OS Linux by Zabbix agent；下一步集成Grafana，展示模板中的系统监控项，选择要展示的监控项</p><p><img src="http://qnypic.shawncoding.top/course/202312131435406.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;集群监控Zabbix和Prometheus&lt;/h1&gt;
&lt;h1&gt;一、Zabbix入门概述&lt;/h1&gt;
&lt;h2 id=&quot;1、Zabbix概述&quot;&gt;1、Zabbix概述&lt;/h2&gt;
&lt;p&gt;Zabbix是一款能够监控各种网络参数以及服务器健康性和完整性的软件。Zabbix使用灵活的通知机制，允许用户为几乎任何事件配置基于邮件的告警。这样可以快速反馈服务器的问题。基于已存储的数据，Zabbix提供了出色的报告和数据可视化功能&lt;/p&gt;</summary>
    
    
    
    <category term="云原生" scheme="https://blog.shawncoding.top/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="运维相关" scheme="https://blog.shawncoding.top/tags/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>缓存一致性几种解决方案</title>
    <link href="https://blog.shawncoding.top/posts/b38099cf.html"/>
    <id>https://blog.shawncoding.top/posts/b38099cf.html</id>
    <published>2023-12-13T08:39:14.000Z</published>
    <updated>2024-01-24T12:10:40.113Z</updated>
    
    <content type="html"><![CDATA[<h1>缓存一致性几种解决方案</h1><h1>一、理论知识</h1><h2 id="1、概述">1、概述</h2><p><img src="http://qnypic.shawncoding.top/course/202312131431661.png" alt></p><a id="more"></a><h2 id="2、坏的方案">2、坏的方案</h2><h3 id="2-1-先写-MySQL，再写-Redis">2.1 先写 MySQL，再写 Redis</h3><p><img src="http://qnypic.shawncoding.top/course/202312131431662.png" alt></p><p>图解说明：</p><ul><li>这是一副时序图，描述请求的先后调用顺序；</li><li>橘黄色的线是请求 A，黑色的线是请求 B；</li><li>橘黄色的文字，是 MySQL 和 Redis 最终不一致的数据；</li><li>数据是从 10 更新为 11；</li></ul><p>请求 A、B 都是先写 MySQL，然后再写 Redis，在高并发情况下，如果请求 A 在写 Redis 时卡了一会，请求 B 已经依次完成数据的更新，就会出现图中的问题。<strong>不过这里有个前提，就是对于读请求，先去读 Redis，如果没有，再去读 DB，但是读请求不会再回写 Redis。</strong> 大白话说一下，就是读请求不会更新 Redis</p><h3 id="2-2-先写-Redis，再写-MySQL">2.2 先写 Redis，再写 MySQL</h3><p><img src="http://qnypic.shawncoding.top/course/202312131431663.png" alt></p><p>同“先写 MySQL，再写 Redis”</p><h3 id="2-3-先删除-Redis，再写-MySQL">2.3 先删除 Redis，再写 MySQL</h3><p>这幅图和上面有些不一样，前面的请求 A 和 B 都是更新请求，这里的请求 A 是更新请求，<strong>但是请求 B 是读请求，且请求 B 的读请求会回写 Redis</strong></p><p><img src="http://qnypic.shawncoding.top/course/202312131431664.png" alt></p><p>请求 A 先删除缓存，可能因为卡顿，数据一直没有更新到 MySQL，导致两者数据不一致。<strong>这种情况出现的概率比较大，因为请求 A 更新 MySQL 可能耗时会比较长，而请求 B 的前两步都是查询，会非常快。</strong></p><h2 id="3、好的方案">3、好的方案</h2><h3 id="3-1-先删除-Redis，再写-MySQL，再删除-Redis">3.1 先删除 Redis，再写 MySQL，再删除 Redis</h3><p>对于“先删除 Redis，再写 MySQL”，如果要解决最后的不一致问题，其实再对 Redis 重新删除即可，<strong>这个也是大家常说的“缓存双删”</strong></p><p><img src="http://qnypic.shawncoding.top/course/202312131431665.png" alt></p><p>为了便于大家看图，对于蓝色的文字，“删除缓存 10”必须在“回写缓存10”后面，那如何才能保证一定是在后面呢？**网上给出的第一个方案是，让请求 A 的最后一次删除，等待 500ms。**对于这种方案，看看就行，反正我是不会用，太 Low 了，风险也不可控。<strong>那有没有更好的方案呢，我建议异步串行化删除，即删除请求入队列</strong></p><p><img src="http://qnypic.shawncoding.top/course/202312131431666.png" alt></p><p>异步删除对线上业务无影响，串行化处理保障并发情况下正确删除。如果双删失败怎么办，网上有给 Redis 加一个缓存过期时间的方案，这个不敢苟同。<strong>个人建议整个重试机制，可以借助消息队列的重试机制，也可以自己整个表，记录重试次数</strong>，方法很多</p><p>小结：</p><ul><li>“缓存双删”不要用无脑的 sleep 500 ms</li><li>通过消息队列的异步&amp;串行，实现最后一次缓存删除</li><li>缓存删除失败，增加重试机制</li></ul><h3 id="3-2-先写-MySQL，再删除-Redis">3.2 先写 MySQL，再删除 Redis</h3><p><img src="http://qnypic.shawncoding.top/course/202312131431667.png" alt></p><p>对于上面这种情况，对于第一次查询，请求 B 查询的数据是 10，但是 MySQL 的数据是 11，<strong>只存在这一次不一致的情况，对于不是强一致性要求的业务，可以容忍。</strong>（那什么情况下不能容忍呢，比如秒杀业务、库存服务等。）当请求 B 进行第二次查询时，因为没有命中 Redis，会重新查一次 DB，然后再回写到 Reids</p><p><img src="http://qnypic.shawncoding.top/course/202312131431668.png" alt></p><p>这里需要满足 2 个条件：</p><ul><li>缓存刚好自动失效；</li><li>请求 B 从数据库查出 10，回写缓存的耗时，比请求 A 写数据库，并且删除缓存的还长。</li></ul><p>对于第二个条件，我们都知道更新 DB 肯定比查询耗时要长，所以出现这个情况的概率很小，同时满足上述条件的情况更小。</p><h3 id="3-3-先写-MySQL，通过-Binlog，异步更新-Redis">3.3 先写 MySQL，通过 Binlog，异步更新 Redis</h3><p>这种方案，主要是监听 MySQL 的 Binlog，然后通过异步的方式，将数据更新到 Redis，这种方案有个前提，查询的请求，不会回写 Redis。</p><p><img src="http://qnypic.shawncoding.top/course/202312131431669.png" alt></p><p>这个方案，会保证 MySQL 和 Redis 的最终一致性，但是如果中途请求 B 需要查询数据，如果缓存无数据，就直接查 DB；如果缓存有数据，查询的数据也会存在不一致的情况。<strong>所以这个方案，是实现最终一致性的终极解决方案，但是不能保证实时性。</strong></p><h2 id="4、几种方案比较">4、几种方案比较</h2><p>我们对比上面讨论的 6 种方案：</p><ul><li><p>先写 Redis，再写 MySQL</p><p><strong>这种方案，我肯定不会用</strong>，万一 DB 挂了，你把数据写到缓存，DB 无数据，这个是灾难性的；我之前也见同学这么用过，如果写 DB 失败，对 Redis 进行逆操作，那如果逆操作失败呢，是不是还要搞个重试？</p></li><li><p>先写 MySQL，再写 Redis</p><p><strong>对于并发量、一致性要求不高的项目，很多就是这么用的</strong>，我之前也经常这么搞，但是不建议这么做；当 Redis 瞬间不可用的情况，需要报警出来，然后线下处理。</p></li><li><p>先删除 Redis，再写 MySQL</p><p>这种方式，我还真没用过，<strong>直接忽略吧。</strong></p></li><li><p>先删除 Redis，再写 MySQL，再删除 Redis</p><p>这种方式虽然可行，但是<strong>感觉好复杂</strong>，还要搞个消息队列去异步删除 Redis。</p></li><li><p>先写 MySQL，再删除 Redis</p><p><strong>比较推荐这种方式</strong>，删除 Redis 如果失败，可以再多重试几次，否则报警出来；这个方案，是实时性中最好的方案，在一些高并发场景中，推荐这种。</p></li><li><p>先写 MySQL，通过 Binlog，异步更新 Redis</p><p><strong>对于异地容灾、数据汇总等，建议会用这种方式</strong>，比如 binlog + kafka，数据的一致性也可以达到秒级；纯粹的高并发场景，不建议用这种方案，比如抢购、秒杀等。</p></li></ul><p><strong>个人结论：</strong></p><ul><li><strong>实时一致性方案</strong>：采用“先写 MySQL，再删除 Redis”的策略，这种情况虽然也会存在两者不一致，但是需要满足的条件有点苛刻，<strong>所以是满足实时性条件下，能尽量满足一致性的最优解。</strong></li><li><strong>最终一致性方案</strong>：采用“先写 MySQL，通过 Binlog，异步更新 Redis”，可以通过 Binlog，结合消息队列异步更新 Redis，<strong>是最终一致性的最优解。</strong></li></ul><h1>二、项目实战</h1><h2 id="1、数据更新">1、数据更新</h2><p>因为项目对实时性要求高，所以采用方案 5，先写 MySQL，再删除 Redis 的方式。下面只是一个示例，我们将文章的标签放入 MySQL 之后，再删除 Redis，所有涉及到 DB 更新的操作都需要按照这种方式处理。这里加了一个事务，如果 Redis 删除失败，MySQL 的更新操作也需要回滚，避免查询时读取到脏数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">saveTag</span>(<span class="title">TagReq</span> <span class="title">tagReq</span>) </span>&#123;</span><br><span class="line">    TagDO tagDO = ArticleConverter.toDO(tagReq);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先写 MySQL</span></span><br><span class="line">    <span class="keyword">if</span> (NumUtil.nullOrZero(tagReq.getTagId())) &#123;</span><br><span class="line">        tagDao.save(tagDO);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tagDO.setId(tagReq.getTagId());</span><br><span class="line">        tagDao.updateById(tagDO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再删除 Redis</span></span><br><span class="line">    String redisKey = CACHE_TAG_PRE + tagDO.getId();</span><br><span class="line">    RedisClient.del(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">deleteTag</span>(<span class="title">Integer</span> <span class="title">tagId</span>) </span>&#123;</span><br><span class="line">    TagDO tagDO = tagDao.getById(tagId);</span><br><span class="line">    <span class="keyword">if</span> (tagDO != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 先写 MySQL</span></span><br><span class="line">        tagDao.removeById(tagId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再删除 Redis</span></span><br><span class="line">        String redisKey = CACHE_TAG_PRE + tagDO.getId();</span><br><span class="line">        RedisClient.del(redisKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateTag</span><span class="params">(Integer tagId, Integer pushStatus)</span> </span>&#123;</span><br><span class="line">    TagDO tagDO = tagDao.getById(tagId);</span><br><span class="line">    <span class="keyword">if</span> (tagDO != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先写 MySQL</span></span><br><span class="line">        tagDO.setStatus(pushStatus);</span><br><span class="line">        tagDao.updateById(tagDO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再删除 Redis</span></span><br><span class="line">        String redisKey = CACHE_TAG_PRE + tagDO.getId();</span><br><span class="line">        RedisClient.del(redisKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、数据获取">2、数据获取</h2><p>这个也很简单，先查询缓存，如果有就直接返回；如果未查询到，需要先查询 DB ，再写入缓存。我们放入缓存时，加了一个过期时间，用于兜底，万一两者不一致，缓存过期后，数据会重新更新到缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TagDTO <span class="title">getTagById</span><span class="params">(Long tagId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String redisKey = CACHE_TAG_PRE + tagId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询缓存，如果有就直接返回</span></span><br><span class="line">    String tagInfoStr = RedisClient.getStr(redisKey);</span><br><span class="line">    <span class="keyword">if</span> (tagInfoStr != <span class="keyword">null</span> &amp;&amp; !tagInfoStr.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonUtil.toObj(tagInfoStr, TagDTO<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果未查询到，需要先查询 DB ，再写入缓存</span></span><br><span class="line">    TagDTO tagDTO = tagDao.selectById(tagId);</span><br><span class="line">    tagInfoStr = JsonUtil.toStr(tagDTO);</span><br><span class="line">    RedisClient.setStrWithExpire(redisKey, tagInfoStr, CACHE_TAG_EXPRIE_TIME);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tagDTO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、测试用例">3、测试用例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Louzai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/5/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlRedisService</span> <span class="keyword">extends</span> <span class="title">BasicTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagSettingService tagSettingService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TagReq tagReq = <span class="keyword">new</span> TagReq();</span><br><span class="line">        tagReq.setTag(<span class="string">"Java"</span>);</span><br><span class="line">        tagReq.setTagId(<span class="number">1L</span>);</span><br><span class="line">        tagSettingService.saveTag(tagReq);</span><br><span class="line">        log.info(<span class="string">"save success:&#123;&#125;"</span>, tagReq);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TagDTO tagDTO = tagSettingService.getTagById(<span class="number">1L</span>);</span><br><span class="line">        log.info(<span class="string">"query tagInfo:&#123;&#125;"</span>, tagDTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get pai_cache_tag_pre_1</span><br><span class="line"><span class="string">"&#123;\"tagId\":1,\"tag\":\"Java\",\"status\":1,\"selected\":null&#125;"</span></span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://paicoding.com/article/detail/319" target="_blank" rel="noopener" title="技术派中的缓存一致性解决方案">技术派中的缓存一致性解决方案</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;缓存一致性几种解决方案&lt;/h1&gt;
&lt;h1&gt;一、理论知识&lt;/h1&gt;
&lt;h2 id=&quot;1、概述&quot;&gt;1、概述&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://qnypic.shawncoding.top/course/202312131431661.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://blog.shawncoding.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB5.x学习笔记</title>
    <link href="https://blog.shawncoding.top/posts/5022d515.html"/>
    <id>https://blog.shawncoding.top/posts/5022d515.html</id>
    <published>2023-12-13T08:39:04.000Z</published>
    <updated>2024-01-24T12:10:25.071Z</updated>
    
    <content type="html"><![CDATA[<h1>MongoDB5.x学习笔记</h1><h1>一、概述</h1><blockquote><p>官方文档：<a href="https://www.mongodb.com/docs/manual/" target="_blank" rel="noopener" title="https://www.mongodb.com/docs/manual/">https://www.mongodb.com/docs/manual/</a><br>菜鸟教程：<a href="https://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener" title="https://www.runoob.com/mongodb/mongodb-tutorial.html">https://www.runoob.com/mongodb/mongodb-tutorial.html</a></p></blockquote><h2 id="1、MongoDB简介">1、MongoDB简介</h2><h3 id="1-1-简介">1.1 简介</h3><p>MongoDB是一个基于分布式文件存储的数据库（支持集群、分片处理）。由C++语言编写。旨在为WEB应用提供可扩展高性能的数据存储解决方案。</p><a id="more"></a><p>MongoDB是一个介于关系数据库和非关系数据库之间的产品（偏向于非关系型数据库NoSQL），是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson格式（对json进行扩展），因此可以存储比较复杂的数据类型。MongoDB最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p><strong>总结: mongoDB是一个非关系型文档数据库</strong></p><h3 id="1-2-发展历史">1.2 发展历史</h3><ul><li>2009年2月，MongoDB数据库首次在数据库领域亮相，打破了关系型数据库一统天下的局面；</li><li>2010年8月, MongoDB 1.6发布。这个版本最大的一个功能就是Sharding—自动分片；</li><li>2014年12月, MongoDB 3.0发布。由于收购了WiredTiger 存储引擎，大幅提升了MongoDB的写入性能；</li><li>2015年12月，3.2版本发布，开始支持了关系型数据库的核心功能：关联。你可以一次同时查询多个MongoDB的集合。</li><li>2016年, MongoDB推出Atlas，在AWS、 Azure 和GCP上的MongoDB托管服务；</li><li>2017年10月，MongoDB成功在纳斯达克敲钟，成为26年来第一家以数据库产品为主要业务的上市公司。</li><li>2018年6月, MongoDB4.0 发布推出ACID事务支持，成为第一个支持强事务的NoSQL数据库；</li><li>2018年–至今，MongoDB已经从一个在数据库领域籍籍无名的“小透明”，变成了话题度和热度都很高的“流量”数据库。</li></ul><h3 id="1-3-特点">1.3 特点</h3><ul><li>面向集合存储，易存储对象类型的数据</li><li>支持查询以及动态查询</li><li>支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言</li><li>文件存储格式为BSON（一种JSON的扩展）</li><li>支持复制和故障恢复和分片</li><li>支持事务支持（要求性不高，不能完全取代关系型数据库）</li><li>索引、聚合、关联</li></ul><h3 id="1-4-应用场景">1.4 应用场景</h3><ul><li><strong>游戏应用</strong>：使用云数据库MongoDB作为游戏服务器的数据库存储用户信息。用户的游戏装备、积分等直接以内嵌文档的形式存储，方便进行查询与更新</li><li><strong>物流应用</strong>：使用云数据库MongoDB存储订单信息，订单状态在运送过程中会不断更新，以云数据库MongoDB内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来，方便快捷且一目了然</li><li><strong>社交应用</strong>：使用云数据库MongoDB存储用户信息以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。并且，云数据库MongoDB非常适合用来存储聊天记录，因为它提供了非常丰富的查询，并在写入和读取方面都相对较快</li><li><strong>视频直播</strong>：使用云数据库MongoDB存储用户信息、礼物信息等。</li><li><strong>大数据应用</strong>：使用云数据库MongoDB作为大数据的云存储系统，随时进行数据提取分析，掌握行业动态</li></ul><h2 id="2、MongoDB安装">2、MongoDB安装</h2><h3 id="2-1-原生安装">2.1 原生安装</h3><blockquote><p><a href="https://www.mongodb.com/try/download/community" target="_blank" rel="noopener" title="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-5.0.19.tgz</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -zxf mongodb-linux-x86_64-ubuntu2004-5.0.19.tgz</span><br><span class="line">mv mongodb-linux-x86_64-ubuntu2004-5.0.19 mongodb</span><br><span class="line"><span class="built_in">cd</span> mongodb/bin</span><br><span class="line"><span class="comment"># bin目录用来存放启动mongoDB的服务以及客户端链接的脚本文件等</span></span><br><span class="line"><span class="comment"># 启动 MongoDB 服务</span></span><br><span class="line"><span class="comment"># --port 指定服务监听端口号 默认为 27017</span></span><br><span class="line"><span class="comment"># --dbpath 指定 mongodb 数据存放目录 启动要求目录必须存在</span></span><br><span class="line"><span class="comment"># --logpath 指定 mongodb 日志文件存放位置</span></span><br><span class="line">./mongod --port=27017 --dbpath=../data --bind_ip=0.0.0.0 --logpath=../logs/mongo.log</span><br><span class="line"><span class="comment"># 5.x后需要确保cpu支持向量指令集，grep avx /proc/cpuinfo</span></span><br><span class="line"><span class="comment"># 客户端连接</span></span><br><span class="line">./mongo --port=27017</span><br></pre></td></tr></table></figure><p>下面是5.0.5版本和4.4.10版本配置文件启动，可以进行参考，机器环境为centos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======================5.05===========================</span></span><br><span class="line"><span class="comment">## 下载</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-5.0.5.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-rhel80-5.0.5.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重命名</span></span><br><span class="line">mv mongodb-linux-x86_64-rhel80-5.0.5 mongodb5.0.5</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入mongodb</span></span><br><span class="line"><span class="built_in">cd</span> mongodb5.0.5</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改数据日志文件路径</span></span><br><span class="line">mkdir -p /opt/home/mongodb5.0.5/data</span><br><span class="line">mkdir -p /opt/home/mongodb5.0.5/<span class="built_in">log</span></span><br><span class="line">touch /opt/home/mongodb5.0.5/<span class="built_in">log</span>/mongod.log</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置权限</span></span><br><span class="line">chmod -R 777 /opt/home/mongodb5.0.5/data</span><br><span class="line">chmod -R 777 /opt/home/mongodb5.0.5/<span class="built_in">log</span></span><br><span class="line">chmod -R 777 /opt/home/mongodb5.0.5/<span class="built_in">log</span>/mongod.log</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入mongodb安装的bin目录下</span></span><br><span class="line"><span class="built_in">cd</span> /opt/home/mongodb5.0.5/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建mongodb.conf文件</span></span><br><span class="line">vim mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加下面的文件</span></span><br><span class="line"><span class="comment">#数据文件存放目录</span></span><br><span class="line">dbpath = /opt/home/mongodb5.0.5/data</span><br><span class="line"><span class="comment">#日志文件存放地址</span></span><br><span class="line">logpath =/opt/home/mongodb5.0.5/<span class="built_in">log</span>/mongod.log</span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line">port = 27017 </span><br><span class="line"><span class="comment">#以守护程序的方式启用，即在后台运行</span></span><br><span class="line">fork = <span class="literal">true</span> </span><br><span class="line"><span class="comment">#需要认证。如果放开注释，就必须创建MongoDB的账号，使用账号与密码才可&gt;远程访问，第一次安装建议注释</span></span><br><span class="line"><span class="comment">#auth=true </span></span><br><span class="line"><span class="comment">#允许远程访问，或者直接注释，127.0.0.1是只允许本地访问</span></span><br><span class="line">bind_ip=0.0.0.0 </span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">## mongodb</span></span><br><span class="line"><span class="built_in">export</span> PATH=/opt/home/mongodb5.0.5/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 使配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line">./mongod --config ./mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试</span></span><br><span class="line">./mongo</span><br><span class="line">&gt; 1+2</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================4.4.10版本=============================</span></span><br><span class="line"><span class="comment">## 下载</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-4.4.10.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-rhel80-4.4.10.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重命名</span></span><br><span class="line">mv mongodb-linux-x86_64-rhel80-4.4.10 mongodb4.4.10</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># mongodb</span></span><br><span class="line"><span class="built_in">export</span> PATH=/opt/home/mongodb4.4.10/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 使配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改数据日志文件路径</span></span><br><span class="line">mkdir -p /opt/home/mongodb4.4.10/data</span><br><span class="line">mkdir -p /opt/home/mongodb4.4.10/<span class="built_in">log</span></span><br><span class="line">touch /opt/home/mongodb4.4.10/<span class="built_in">log</span>/mongod.log</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置权限</span></span><br><span class="line">chmod -R 777 /opt/home/mongodb4.4.10/data</span><br><span class="line">chmod -R 777 /opt/home/mongodb4.4.10/<span class="built_in">log</span></span><br><span class="line">chmod -R 777 /opt/home/mongodb4.4.10/<span class="built_in">log</span>/mongod.log</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入mongodb安装的bin目录下</span></span><br><span class="line"><span class="built_in">cd</span> /opt/home/mongodb4.4.10/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建mongodb.conf文件</span></span><br><span class="line">vim mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据文件存放目录</span></span><br><span class="line">dbpath = /opt/home/mongodb4.4.10/data</span><br><span class="line"><span class="comment">#日志文件存放地址</span></span><br><span class="line">logpath =/opt/home/mongodb4.4.10/<span class="built_in">log</span>/mongod.log</span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line">port = 27017 </span><br><span class="line"><span class="comment">#以守护程序的方式启用，即在后台运行</span></span><br><span class="line">fork = <span class="literal">true</span> </span><br><span class="line"><span class="comment">#需要认证。如果放开注释，就必须创建MongoDB的账号，使用账号与密码才可&gt;远程访问，第一次安装建议注释</span></span><br><span class="line"><span class="comment">#auth=true </span></span><br><span class="line"><span class="comment">#允许远程访问，或者直接注释，127.0.0.1是只允许本地访问</span></span><br><span class="line">bind_ip=0.0.0.0 </span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line">./mongod --config ./mongodb.conf</span><br></pre></td></tr></table></figure><h3 id="2-2-docker安装">2.2 docker安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:5.0.18</span><br><span class="line"><span class="comment"># 运行 mongo 镜像</span></span><br><span class="line">docker run -d --name mongo -p 27017:27017 mongo:5.0.18</span><br><span class="line">docker <span class="built_in">exec</span> -it mongo bash</span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">mongo --port=27017</span><br></pre></td></tr></table></figure><h3 id="2-3-快捷安装">2.3 快捷安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 MongoDB</span></span><br><span class="line">sudo apt-get install mongodb</span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">mongod -version</span><br><span class="line"><span class="comment"># 启动和关闭 MongoDB 服务</span></span><br><span class="line">service mongodb start</span><br><span class="line">service mongodb stop</span><br><span class="line"><span class="comment"># 查看 MongoDB 服务是否启动成功</span></span><br><span class="line">service mongodb status</span><br><span class="line">pgrep mongo -l</span><br><span class="line"><span class="comment"># 卸载 MongoDB</span></span><br><span class="line">sudo apt-get --purge remove mongodb mongodb-clients mongodb-server</span><br></pre></td></tr></table></figure><h1>二、核心概念</h1><h2 id="1、概述">1、概述</h2><p><strong>库&lt;DataBase&gt;</strong></p><p>mongodb中的库就类似于传统关系型数据库中库的概念，用来通过不同库隔离不同应用数据。   mongodb中可以建立多个数据库。每一个库都有自己的集合和权限，不同的数据库也放置在不同的文件中。默认的数据库为&quot;test&quot;，数据库存储在启动指定的data目录中。</p><p>**集合&lt;Collection&gt;**集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表的概念。集合存在于数据库中，一个库中可以创建多个集合。每个集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性</p><p><strong>文档&lt;Document&gt;</strong></p><p>文档集合中一条条记录，是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><table><thead><tr><th><strong>RDBMS</strong></th><th><strong>MongoDB</strong></th></tr></thead><tbody><tr><td>数据库&lt;database&gt;</td><td>数据库&lt;database&gt;</td></tr><tr><td>表&lt;table&gt;</td><td>集合&lt;collection&gt;</td></tr><tr><td>行&lt;row&gt;</td><td>文档&lt;document&gt;</td></tr><tr><td>列&lt;colume&gt;</td><td>字段&lt;field&gt;</td></tr></tbody></table><h2 id="2、数据库常用操作">2、数据库常用操作</h2><h3 id="2-1-库和集合操作">2.1 库和集合操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先进入客户端</span></span><br><span class="line"><span class="comment"># 查看所有库，默认时test</span></span><br><span class="line">show databases; | show dbs;</span><br><span class="line"><span class="comment"># admin： 从权限的角度来看，这是"root"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</span></span><br><span class="line"><span class="comment"># local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合。</span></span><br><span class="line"><span class="comment"># config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line"><span class="comment"># 注意: use 代表创建并使用,当库中没有数据时默认不显示这个库</span></span><br><span class="line">use 库名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库</span></span><br><span class="line"><span class="comment"># 默认删除当前选中的库</span></span><br><span class="line">db.dropDatabase() <span class="comment">#注意此处有括号</span></span><br><span class="line"><span class="comment"># 查看当前所在库</span></span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================集合===============</span></span><br><span class="line"><span class="comment"># 查看库中所有集合</span></span><br><span class="line">show collections; | show tables;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">db.createCollection(<span class="string">'集合名称'</span>, [options])</span><br><span class="line"><span class="comment"># options可以是如下参数</span></span><br><span class="line"><span class="comment"># capped  布尔  （可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。 当该值为 true 时，必须指定 size 参数</span></span><br><span class="line"><span class="comment"># size  数值  （可选）为固定集合指定一个最大值，即字节数。 如果 capped 为 true，也需要指定该字段</span></span><br><span class="line"><span class="comment"># max  数值  （可选）指定固定集合中包含文档的最大数量</span></span><br><span class="line"><span class="comment"># 注意:当集合不存在时,向集合中插入文档也会自动创建该集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除集合，如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false</span></span><br><span class="line">db.集合名称.drop();</span><br></pre></td></tr></table></figure><h3 id="2-2-文档操作">2.2 文档操作</h3><blockquote><p><a href="https://www.mongodb.com/docs/manual/reference/method/" target="_blank" rel="noopener">https://www.mongodb.com/docs/manual/reference/method/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ========================插入文档==================</span></span><br><span class="line"><span class="comment"># 单条文档</span></span><br><span class="line">db.集合名称.insert(document)</span><br><span class="line">db.users.insert(&#123;<span class="string">"name"</span>:<span class="string">"shawn"</span>,<span class="string">"age"</span>:23,<span class="string">"bir"</span>:<span class="string">"2012-12-12"</span>&#125;);</span><br><span class="line">db.users.insertOne(&#123;<span class="string">"name"</span>:<span class="string">"shawn"</span>,<span class="string">"age"</span>:23,<span class="string">"bir"</span>:<span class="string">"2012-12-12"</span>&#125;);</span><br><span class="line"><span class="comment"># 多条文档</span></span><br><span class="line">db.collection.insertMany()  <span class="comment"># 向指定集合中插入多条文档数据【推荐使用】</span></span><br><span class="line">db.集合名称.insertMany(</span><br><span class="line">    [ &lt;document 1&gt; , &lt;document 2&gt;, ... ],</span><br><span class="line">    &#123;</span><br><span class="line">       writeConcern: 1,//写入策略，默认为1，即要求确认写操作，0是不要求。</span><br><span class="line">       ordered: <span class="literal">true</span> //指定是否按顺序写入，默认<span class="literal">true</span>，按顺序写入。</span><br><span class="line">    &#125;</span><br><span class="line"> )</span><br><span class="line">db.users.insert([</span><br><span class="line">     &#123;<span class="string">"name"</span>:<span class="string">"shawn"</span>,<span class="string">"age"</span>:23,<span class="string">"bir"</span>:<span class="string">"2012-12-12"</span>&#125;,</span><br><span class="line">     &#123;<span class="string">"name"</span>:<span class="string">"小黑"</span>,<span class="string">"age"</span>:25,<span class="string">"bir"</span>:<span class="string">"2012-12-12"</span>&#125;</span><br><span class="line"> ]);</span><br><span class="line"><span class="comment"># 脚本方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=0;i&lt;100;i++)&#123;</span><br><span class="line">     db.users.insert(&#123;<span class="string">"_id"</span>:i,<span class="string">"name"</span>:<span class="string">"编程不良人_"</span>+i,<span class="string">"age"</span>:23&#125;);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment"># 注意:在mongodb中每个文档都会有一个_id作为唯一标识，_id默认会自动生成，如果手动指定将使用手动指定的值作为_id 的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========================查询====================</span></span><br><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line">db.集合名称.find();</span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================删除文档===================</span></span><br><span class="line">db.集合名称.remove(</span><br><span class="line">  &lt;query&gt;,</span><br><span class="line">  &#123;</span><br><span class="line">    justOne: &lt;boolean&gt;,</span><br><span class="line">    writeConcern: &lt;document&gt;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.集合名称.deleteMany(&#123;query&#125;) <span class="comment">#不指定条件时删除集合下全部文档</span></span><br><span class="line"><span class="comment"># query :可选删除的文档的条件</span></span><br><span class="line"><span class="comment"># justOne : 可选如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</span></span><br><span class="line"><span class="comment"># writeConcern :可选抛出异常的级别。默认为writeConcern.NONE</span></span><br><span class="line">db.users.deleteMany(&#123;&#125;);</span><br><span class="line">db.users.deleteMany(&#123;age:23&#125;);</span><br><span class="line"><span class="comment"># 文档内容全部删除后，文档仍存在，即删除内容，不删除结构。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================更新文档=======================</span></span><br><span class="line">db.集合名称.update(</span><br><span class="line">    &lt;query&gt;,</span><br><span class="line">    &lt;update&gt;,</span><br><span class="line">    &#123;</span><br><span class="line">      upsert: &lt;boolean&gt;,</span><br><span class="line">      multi: &lt;boolean&gt;,</span><br><span class="line">      writeConcern: &lt;document&gt;</span><br><span class="line">    &#125;</span><br><span class="line"> );</span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># query : update的查询条件，类似sql update查询内where后面的。</span></span><br><span class="line"><span class="comment"># update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的</span></span><br><span class="line"><span class="comment"># upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</span></span><br><span class="line"><span class="comment"># multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</span></span><br><span class="line"><span class="comment"># writeConcern :可选，抛出异常的级别。</span></span><br><span class="line">  <span class="comment"># WriteConcern.NONE:没有异常抛出</span></span><br><span class="line">  <span class="comment"># WriteConcern.NORMAL:仅抛出网络错误异常，没有服务器错误异常</span></span><br><span class="line">  <span class="comment"># WriteConcern.SAFE:抛出网络错误异常、服务器错误异常；并等待服务器完成写操作。</span></span><br><span class="line">  <span class="comment"># WriteConcern.MAJORITY: 抛出网络错误异常、服务器错误异常；并等待一个主服务器完成写操作。</span></span><br><span class="line">  <span class="comment"># WriteConcern.FSYNC_SAFE: 抛出网络错误异常、服务器错误异常；写操作等待服务器将数据刷新到磁盘。</span></span><br><span class="line">  <span class="comment"># WriteConcern.JOURNAL_SAFE:抛出网络错误异常、服务器错误异常；写操作等待服务器提交到磁盘的日志文件。</span></span><br><span class="line">  <span class="comment"># WriteConcern.REPLICAS_SAFE:抛出网络错误异常、服务器错误异常；等待至少2台服务器完成写操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个更新是将符合条件的全部更新成后面的文档,相当于先删除在更新</span></span><br><span class="line">db.集合名称.update(&#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>&#125;,&#123;name:<span class="string">"11"</span>,bir:new date()&#125;) </span><br><span class="line"><span class="comment"># 保留原来数据更新,但是只更新符合条件的第一条数据</span></span><br><span class="line">db.集合名称.update(&#123;<span class="string">"name"</span>:<span class="string">"xiaohei"</span>&#125;,&#123;<span class="variable">$set</span>:&#123;name:<span class="string">"mingming"</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 保留原来数据更新,更新符合条件的所有数据</span></span><br><span class="line">db.集合名称.update(&#123;name:”小黑”&#125;,&#123;<span class="variable">$set</span>:&#123;name:”小明”&#125;&#125;,&#123;multi:<span class="literal">true</span>&#125;)       </span><br><span class="line"><span class="comment"># 保留原来数据更新,更新符合条件的所有数据，没有条件符合时插入数据</span></span><br><span class="line">db.集合名称.update(&#123;name:”小黑”&#125;,&#123;<span class="variable">$set</span>:&#123;name:”小明”&#125;&#125;,&#123;multi:<span class="literal">true</span>,upsert:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-3-文档查询">2.3 文档查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MongoDB 查询文档使用 find() 方法。find() 方法以非结构化的方式来显示所有文档。</span></span><br><span class="line">db.集合名称.find(query, projection)</span><br><span class="line"><span class="comment"># query ：可选，使用查询操作符指定查询条件</span></span><br><span class="line"><span class="comment"># projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</span></span><br><span class="line"><span class="comment"># 如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下</span></span><br><span class="line">db.集合名称.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件运算符</span></span><br><span class="line">db.集合名.find(&#123;age:30&#125;); <span class="comment"># 查找 age=30 的数据</span></span><br><span class="line">db.集合名.find(&#123;age:&#123;<span class="variable">$lt</span>:30&#125;&#125;); <span class="comment"># 查找 age&lt;30 的数据</span></span><br><span class="line">db.集合名.find(&#123;age:&#123;<span class="variable">$lte</span>:30&#125;&#125;); <span class="comment"># 查找 age&lt;=30 的数据</span></span><br><span class="line">db.集合名.find(&#123;age:&#123;<span class="variable">$gt</span>:30&#125;&#125;); <span class="comment"># 查找 age&gt;30 的数据</span></span><br><span class="line">db.集合名.find(&#123;age:&#123;<span class="variable">$gte</span>:30&#125;&#125;); <span class="comment"># 查找 age&gt;=30 的数据</span></span><br><span class="line">db.集合名.find(&#123;age:&#123;<span class="variable">$ne</span>:30&#125;&#125;); <span class="comment"># 查找 age!=30 的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AND</span></span><br><span class="line">db.集合名称.find(&#123;key1:value1, key2:value2,...&#125;).pretty()</span><br><span class="line"><span class="comment"># 类似于 WHERE 语句：WHERE key1=value1 AND key2=value2</span></span><br><span class="line">db.users.find(&#123;<span class="string">"age"</span>:27,<span class="string">"name"</span>:<span class="string">"欧力给"</span>,_id:8&#125;);</span><br><span class="line">db.users.find(&#123;<span class="string">"age"</span>:3,<span class="string">"age"</span>:27&#125;); <span class="comment"># 同一字段多次出现查询条件时，只有最后的查询条件才生效，即后面会覆盖前面的查询条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line"><span class="comment"># MongoDB OR 条件语句使用了关键字 $or,语法格式如下：</span></span><br><span class="line">db.集合名称.find(&#123;<span class="variable">$or</span>: [&#123;key1: value1&#125;, &#123;key2:value2&#125;]&#125;).pretty()</span><br><span class="line">db.users.find(&#123;<span class="variable">$or</span>:[&#123;_id:3&#125;,&#123;age:15&#125;]&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># AND 和 OR 联合</span></span><br><span class="line">db.users.find(&#123;age:&#123;<span class="variable">$gt</span>:15&#125;,<span class="variable">$or</span>:[&#123;_id:3&#125;,&#123;age:15&#125;]&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组中查询</span></span><br><span class="line">db.集合名称.insert(&#123; <span class="string">"_id"</span> : 11, <span class="string">"age"</span> : 29, <span class="string">"likes"</span> : [ <span class="string">"看电视"</span>, <span class="string">"读书xx"</span>, <span class="string">"美女"</span> ], <span class="string">"name"</span> : <span class="string">"shawn_xx_11"</span> &#125;)</span><br><span class="line"><span class="comment"># 执行数组查询</span></span><br><span class="line">db.users.find(&#123;likes:<span class="string">"看电视"</span>&#125;)</span><br><span class="line"><span class="comment"># $size 按照数组长度查询</span></span><br><span class="line">db.users.find(&#123;likes:&#123;<span class="variable">$size</span>:3&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模糊查询</span></span><br><span class="line"><span class="comment"># 注意:在 mongoDB 中使用正则表达式可以是实现近似模糊查询功能</span></span><br><span class="line">db.users.find(&#123;likes:/shawn/&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序，1 升序  -1 降序</span></span><br><span class="line">db.集合名称.find().sort(&#123;name:1,age:1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页</span></span><br><span class="line">db.集合名称.find().sort(&#123;条件&#125;).skip(start).<span class="built_in">limit</span>(rows);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总条数</span></span><br><span class="line">db.集合名称.count()</span><br><span class="line">db.集合名称.find(&#123;<span class="string">"name"</span>:<span class="string">"shawn"</span>&#125;).count();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line">db.集合名称.distinct(<span class="string">'字段'</span>)</span><br><span class="line">db.users.distinct(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定返回字段</span></span><br><span class="line"><span class="comment"># 参数2: 1 返回  0 不返回  </span></span><br><span class="line">db.集合名称.find(&#123;条件&#125;,&#123;name:1,age:1&#125;) </span><br><span class="line"><span class="comment"># db.users.find(&#123;&#125;,&#123;"name":1&#125;)；查询所有，返回指定字段</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;age:&#123;$lt:17&#125;&#125;,&#123;name:1&#125;)；按照指定条件查询，返回指定字段</span></span><br><span class="line"><span class="comment"># db.users.find(&#123;age:&#123;$lt:17&#125;&#125;,&#123;_id:0,name:1&#125;)；按照指定条件查询，返回指定字段，不返回id，注意id是唯一索引</span></span><br></pre></td></tr></table></figure><h3 id="2-4-type">2.4 $type</h3><p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果想获取 "col" 集合中 title 为 String 的数据，你可以使用以下命令</span></span><br><span class="line">db.col.find(&#123;<span class="string">"title"</span> : &#123;<span class="variable">$type</span> : 2&#125;&#125;).pretty();</span><br><span class="line">db.col.find(&#123;<span class="string">"title"</span> : &#123;<span class="variable">$type</span> : <span class="string">'string'</span>&#125;&#125;).pretty();</span><br><span class="line"><span class="comment"># 如果想获取 "col" 集合中 tags 为 Array 的数据，你可以使用以下命令：</span></span><br><span class="line">db.col.find(&#123;<span class="string">"tags"</span>:&#123;<span class="variable">$type</span> : 4&#125;&#125;).pretty();</span><br><span class="line">db.col.find(&#123;<span class="string">"tags"</span> : &#123;<span class="variable">$type</span> : <span class="string">'array'</span>&#125;&#125;).pretty();</span><br></pre></td></tr></table></figure><h2 id="3、索引-index">3、索引&lt;index&gt;</h2><h3 id="3-1-原理">3.1 原理</h3><p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构。 <strong>默认_id已经创建了索引</strong></p><p><img src="http://qnypic.shawncoding.top/course/202312131426148.png" alt></p><h3 id="3-2-索引操作">3.2 索引操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引创建</span></span><br><span class="line"><span class="comment"># 说明: 语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可</span></span><br><span class="line">db.集合名称.createIndex(keys, options)</span><br><span class="line">db.集合名称.createIndex(&#123;<span class="string">"title"</span>:1,<span class="string">"description"</span>:-1&#125;)</span><br><span class="line"><span class="comment"># 查看集合索引</span></span><br><span class="line">db.集合名称.getIndexes()</span><br><span class="line"><span class="comment"># 普通索引,key 为要创建索引的字段,1 为指定升序创建索引,降序可以指定为 -1</span></span><br><span class="line">db.集合名.ensureIndex(&#123;key:1&#125;);</span><br><span class="line"><span class="comment"># 唯一索引</span></span><br><span class="line">db.集合名.ensureIndex(&#123;key:1&#125;,&#123;unique:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="comment"># 查看集合索引大小</span></span><br><span class="line">db.集合名称.totalIndexSize()</span><br><span class="line"><span class="comment"># 删除集合所有索引（不包含_id索引）</span></span><br><span class="line">db.集合名称.dropIndexes() </span><br><span class="line"><span class="comment"># 删除集合指定索引</span></span><br><span class="line">db.集合名称.dropIndex(<span class="string">"索引名称"</span>)</span><br><span class="line"><span class="comment"># 查看 explain 执行计划---查看函数执行信息 </span></span><br><span class="line">db.集合名.find(&#123;age:6&#125;).explain();</span><br></pre></td></tr></table></figure><p>createIndex() 接收可选参数，可选参数列表如下：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>background</td><td>Boolean</td><td>建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为<strong>false</strong></td></tr><tr><td>unique</td><td>Boolean</td><td>建立的索引是否唯一。指定为true创建唯一索引。默认值为false.</td></tr><tr><td>name</td><td>string</td><td>索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td></tr><tr><td>sparse</td><td>Boolean</td><td>对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.</td></tr><tr><td>expireAfterSeconds</td><td>integer</td><td>指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td></tr><tr><td>v</td><td>index version</td><td>索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td></tr><tr><td>weights</td><td>document</td><td>索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td></tr><tr><td>default_language</td><td>string</td><td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td></tr><tr><td>language_override</td><td>string</td><td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td></tr></tbody></table><h3 id="3-3-复合索引">3.3 复合索引</h3><p>一个索引的值是由多个 key 进行维护的索引的称之为复合索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.createIndex(&#123;<span class="string">"title"</span>:1,<span class="string">"description"</span>:-1&#125;)</span><br><span class="line"><span class="comment"># 注意: mongoDB 中复合索引和传统关系型数据库一致都是左前缀匹配原则</span></span><br></pre></td></tr></table></figure><h2 id="4、聚合-aggregate">4、聚合&lt;aggregate&gt;</h2><p>MongoDB 中聚合(aggregate)主要用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。有点类似 <strong>SQL</strong> 语句中的 <strong>count(*)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试用例</span></span><br><span class="line">db.test.insertMany([</span><br><span class="line">     &#123;</span><br><span class="line">        title: <span class="string">'MongoDB Overview'</span>, </span><br><span class="line">        description: <span class="string">'MongoDB is no sql database'</span>,</span><br><span class="line">        by_user: <span class="string">'runoob.com'</span>,</span><br><span class="line">        url: <span class="string">'http://www.runoob.com'</span>,</span><br><span class="line">        tags: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">        likes: 100</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        title: <span class="string">'NoSQL Overview'</span>, </span><br><span class="line">        description: <span class="string">'No sql database is very fast'</span>,</span><br><span class="line">        by_user: <span class="string">'runoob.com'</span>,</span><br><span class="line">        url: <span class="string">'http://www.runoob.com'</span>,</span><br><span class="line">        tags: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">        likes: 10</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        title: <span class="string">'Neo4j Overview'</span>, </span><br><span class="line">        description: <span class="string">'Neo4j is no sql database'</span>,</span><br><span class="line">        by_user: <span class="string">'Neo4j'</span>,</span><br><span class="line">        url: <span class="string">'http://www.neo4j.com'</span>,</span><br><span class="line">        tags: [<span class="string">'neo4j'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">        likes: 750</span><br><span class="line">     &#125;</span><br><span class="line"> ]);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 现在我们通过以上集合计算每个作者所写的文章数，使用aggregate()计算结果如下</span></span><br><span class="line"><span class="comment"># 注意：此处的_id是分组表示，不是文档的 _id</span></span><br><span class="line">db.test.aggregate([&#123;<span class="variable">$group</span> : &#123;</span><br><span class="line">                      _id : <span class="string">"<span class="variable">$by_user</span>"</span>, </span><br><span class="line">                      num_tutorial : &#123;<span class="variable">$sum</span> : 1&#125;</span><br><span class="line"> &#125;&#125;])</span><br></pre></td></tr></table></figure><p>常见聚合表达式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $sum,计算总和</span></span><br><span class="line">db.mycol.aggregate([&#123;<span class="variable">$group</span> : &#123;_id : <span class="string">"<span class="variable">$by_user</span>"</span>, num_tutorial : &#123;<span class="variable">$sum</span> : <span class="string">"<span class="variable">$likes</span>"</span>&#125;&#125;&#125;])</span><br><span class="line"><span class="comment"># $avg,计算平均值</span></span><br><span class="line">db.mycol.aggregate([&#123;<span class="variable">$group</span> : &#123;_id : <span class="string">"<span class="variable">$by_user</span>"</span>, num_tutorial : &#123;<span class="variable">$avg</span> : <span class="string">"<span class="variable">$likes</span>"</span>&#125;&#125;&#125;])</span><br><span class="line"><span class="comment"># $min,获取集合中所有文档对应值得最小值</span></span><br><span class="line">db.mycol.aggregate([&#123;<span class="variable">$group</span> : &#123;_id : <span class="string">"<span class="variable">$by_user</span>"</span>, num_tutorial : &#123;<span class="variable">$min</span> : <span class="string">"<span class="variable">$likes</span>"</span>&#125;&#125;&#125;])</span><br><span class="line"><span class="comment"># $max,获取集合中所有文档对应值得最大值</span></span><br><span class="line">db.mycol.aggregate([&#123;<span class="variable">$group</span> : &#123;_id : <span class="string">"<span class="variable">$by_user</span>"</span>, num_tutorial : &#123;<span class="variable">$max</span> : <span class="string">"<span class="variable">$likes</span>"</span>&#125;&#125;&#125;])</span><br><span class="line"><span class="comment"># $push,将值加入一个数组中，不会判断是否有重复的值</span></span><br><span class="line">db.mycol.aggregate([&#123;<span class="variable">$group</span> : &#123;_id : <span class="string">"<span class="variable">$by_user</span>"</span>, url : &#123;<span class="variable">$push</span>: <span class="string">"<span class="variable">$url</span>"</span>&#125;&#125;&#125;])</span><br><span class="line"><span class="comment"># $addToSet,将值加入一个数组中，会判断是否有重复的值，若相同的值在数组中已经存在了，则不加入</span></span><br><span class="line">db.mycol.aggregate([&#123;<span class="variable">$group</span> : &#123;_id : <span class="string">"<span class="variable">$by_user</span>"</span>, url : &#123;<span class="variable">$addToSet</span> : <span class="string">"<span class="variable">$url</span>"</span>&#125;&#125;&#125;])</span><br><span class="line"><span class="comment"># $first,根据资源文档的排序获取第一个文档数据</span></span><br><span class="line">db.mycol.aggregate([&#123;<span class="variable">$group</span> : &#123;_id : <span class="string">"<span class="variable">$by_user</span>"</span>, first_url : &#123;<span class="variable">$first</span> : <span class="string">"<span class="variable">$url</span>"</span>&#125;&#125;&#125;])</span><br><span class="line"><span class="comment"># $last,根据资源文档的排序获取最后一个文档数据</span></span><br><span class="line">db.mycol.aggregate([&#123;<span class="variable">$group</span> : &#123;_id : <span class="string">"<span class="variable">$by_user</span>"</span>, last_url : &#123;<span class="variable">$last</span> : <span class="string">"<span class="variable">$url</span>"</span>&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure><h1>三、应用整合</h1><h2 id="1、SpringBoot整合">1、SpringBoot整合</h2><h3 id="1-1-环境配置">1.1 环境配置</h3><p>创建springboot工程羡慕，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># mongodb 没有开启任何安全协议</span><br><span class="line"># mongodb(协议):&#x2F;&#x2F;121.5.167.13(主机):27017(端口)&#x2F;baizhi(库名)</span><br><span class="line">spring.data.mongodb.uri&#x3D;mongodb:&#x2F;&#x2F;192.168.31.167:27017&#x2F;baizhi</span><br><span class="line">​</span><br><span class="line"># mongodb 存在密码</span><br><span class="line">#spring.data.mongodb.host&#x3D;shawn</span><br><span class="line">#spring.data.mongodb.port&#x3D;27017</span><br><span class="line">#spring.data.mongodb.database&#x3D;baizhi</span><br><span class="line">#spring.data.mongodb.username&#x3D;root</span><br><span class="line">#spring.data.mongodb.password&#x3D;root</span><br></pre></td></tr></table></figure><h3 id="1-2-集合操作">1.2 集合操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateCollection</span><span class="params">()</span></span>&#123;</span><br><span class="line">  mongoTemplate.createCollection(<span class="string">"users"</span>);<span class="comment">//参数: 创建集合名称</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: 创建的集合已经存在时，再次创建会报错，因此创建前需要判断集合时候已经存在</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateCollection</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 判断集合是否存在</span></span><br><span class="line">   <span class="keyword">boolean</span> isExist = mongoTemplate.collectionExists(<span class="string">"products"</span>);</span><br><span class="line">   <span class="comment">// 不存在时创建集合</span></span><br><span class="line">   <span class="keyword">if</span> (!isExist) &#123;</span><br><span class="line">       mongoTemplate.createCollection(<span class="string">"products"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDropCollection</span><span class="params">()</span></span>&#123;</span><br><span class="line">   mongoTemplate.dropCollection(<span class="string">"products"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-相关注解">1.3 相关注解</h3><p>Java–&gt;对象–&gt;JSON–&gt;MongoDB</p><p><strong>@Document 对应 类</strong></p><ul><li>修饰范围: 用在类上</li><li>作用: 用来映射这个类的一个对象为 mongo 中一条文档数据</li><li>属性：(value 、collection )用来指定操作的集合名称</li></ul><p><strong>@Id 对应 要指定为_id的变量名</strong></p><ul><li>修饰范围: 用在成员变量、方法上，只能出现一次</li><li>作用： 用来将成员变量的值映射为文档的_id 的值</li></ul><p><strong>@Field 对应 剩余变量名</strong>（变量名都按照类中属性名定义时，可以不指定，即同名时可不指定）</p><ul><li>修饰范围: 用在成员变量、方法上</li><li>作用: 用来将成员变量以及值映射为文档中一个key、value对</li><li>属性: ( name,value)用来指定在文档中 key 的名称,默认为成员变量名</li></ul><p><strong>@Transient 不参与文档转换</strong></p><ul><li>修饰范围: 用在成员变量、方法上</li><li>作用 : 用来指定改成员变量，不参与文档的序列化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mongoTemplate.insert(<span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">"小wangb"</span>, <span class="number">22</span>, <span class="keyword">new</span> Date()), <span class="string">"db1"</span>);</span><br><span class="line">mongoTemplate.save(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"小米"</span>,<span class="number">22</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">mongoTemplate.insert(Arrays.asList(<span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"小号"</span>, <span class="number">11</span>, <span class="keyword">new</span> Date()),<span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"chiwan"</span>, <span class="number">99</span>, <span class="keyword">new</span> Date())), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert 可以批量插入数据，重复id会报错</span></span><br><span class="line"><span class="comment">// save不可以批量插入数据，重复id不会报错</span></span><br></pre></td></tr></table></figure><h3 id="1-4-文档查询">1.4 文档查询</h3><p><img src="http://qnypic.shawncoding.top/course/202312131426149.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询</span></span><br><span class="line">mongoTemplate.findById(<span class="number">1</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line">mongoTemplate.findAll(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//等值查询</span></span><br><span class="line">mongoTemplate.find(Query.query(Criteria.where(<span class="string">"name"</span>).is(<span class="string">"小红"</span>)), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//&lt;,&gt;,&gt;=,&lt;=</span></span><br><span class="line">mongoTemplate.find(Query.query(Criteria.where(<span class="string">"age"</span>).lt(<span class="number">33</span>)), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//and查询</span></span><br><span class="line">mongoTemplate.find(Query.query(Criteria.where(<span class="string">"name"</span>).is(<span class="string">"小号"</span>).and(<span class="string">"age"</span>).is(<span class="number">11</span>)), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//or查询</span></span><br><span class="line">Criteria criteria = <span class="keyword">new</span> Criteria();</span><br><span class="line">criteria.orOperator(Criteria.where(<span class="string">"name"</span>).is(<span class="string">"小号"</span>), Criteria.where(<span class="string">"name"</span>).is(<span class="string">"小红"</span>));</span><br><span class="line">mongoTemplate.find(Query.query(criteria), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//and or 查询</span></span><br><span class="line">mongoTemplate.find(Query.query(Criteria.where(<span class="string">"age"</span>).is(<span class="number">22</span>).orOperator(Criteria.where(<span class="string">"name"</span>).is(<span class="string">"小红"</span>), criteria.where(<span class="string">"name"</span>).is(<span class="string">"小wangb"</span>))), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">mongoTemplate.find(<span class="keyword">new</span> Query().with(Sort.by(Sort.Order.desc(<span class="string">"age"</span>))), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//分页</span></span><br><span class="line">mongoTemplate.find(<span class="keyword">new</span> Query().with(Sort.by(Sort.Order.desc(<span class="string">"age"</span>))).skip(<span class="number">3</span>).limit(<span class="number">2</span>), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//总条数</span></span><br><span class="line">mongoTemplate.count(<span class="keyword">new</span> Query(), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//去重</span></span><br><span class="line">mongoTemplate.findDistinct(<span class="keyword">new</span> Query(), <span class="string">"age"</span>, User<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//传统采用Json格式查询</span></span><br><span class="line">mongoTemplate.find(<span class="keyword">new</span> BasicQuery(<span class="string">"&#123;$or:[&#123;age:22&#125;,&#123;age:99&#125;]&#125;"</span>, <span class="string">"&#123;name:0&#125;"</span>), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="1-5-文档更新-删除">1.5 文档更新&amp;删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ====== 更新 ====</span></span><br><span class="line"><span class="comment">//更新第一条</span></span><br><span class="line">Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">"age"</span>).is(<span class="number">44</span>));</span><br><span class="line">mongoTemplate.updateFirst(query, <span class="keyword">new</span> Update().set(<span class="string">"age"</span>, <span class="number">33</span>).set(<span class="string">"name"</span>, <span class="string">"小王八"</span>), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//更新批量</span></span><br><span class="line">mongoTemplate.updateMulti(query, <span class="keyword">new</span> Update().set(<span class="string">"age"</span>, <span class="number">11</span>), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//更新插入</span></span><br><span class="line">UpdateResult age = mongoTemplate.upsert(query, <span class="keyword">new</span> Update().set(<span class="string">"age"</span>, <span class="number">44</span>), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(age.getModifiedCount());<span class="comment">//修改条数</span></span><br><span class="line">System.out.println(age.getMatchedCount());<span class="comment">//匹配条数</span></span><br><span class="line">System.out.println(age.getUpsertedId());<span class="comment">//插入id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ====== 删除 ====</span></span><br><span class="line"><span class="comment">//条件删除</span></span><br><span class="line">mongoTemplate.remove(<span class="keyword">new</span> Query(Criteria.where(<span class="string">"age"</span>).is(<span class="number">44</span>)), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//删除所有</span></span><br><span class="line">mongoTemplate.remove(<span class="keyword">new</span> Query(), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h1>四、权限配置与可视化</h1><h2 id="1、概述-v2">1、概述</h2><p>刚安装完毕的mongodb默认不使用权限认证方式启动，与MySQL不同，mongodb在安装的时候并没有设置权限，然而公网运行系统需要设置权限以保证数据安全。MongoDB是没有默认管理员账号，所以要先添加管理员账号，并且mongodb服务器需要在运行的时候开启验证模式</p><ul><li>用户只能在用户所在数据库登录(创建用户的数据库)，包括管理员账号。</li><li>管理员可以管理所有数据库，但是不能直接管理其他数据库，要先认证后才可以。</li></ul><h2 id="2、权限管理">2、权限管理</h2><h3 id="2-1-创建账户">2.1 创建账户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入mongodb的shell</span></span><br><span class="line">mongo</span><br><span class="line"><span class="comment"># 使用admin数据库(超级管理员账号必须创建在该数据库上)</span></span><br><span class="line">use admin</span><br><span class="line"><span class="comment"># 创建一个不受访问限制的超级用户</span></span><br><span class="line">db.createUser(&#123;<span class="string">"user"</span>:<span class="string">"user"</span>,<span class="string">"pwd"</span>:<span class="string">"password"</span>,<span class="string">"roles"</span>:[<span class="string">"root"</span>]&#125;)</span><br><span class="line"><span class="comment"># 创建admin超级管理员用户</span></span><br><span class="line"><span class="comment"># 指定用户的角色和数据库：(注意此时添加的用户都只用于admin数据库，而非你存储业务数据的数据库)</span></span><br><span class="line"><span class="comment"># (在cmd中敲多行代码时，直接敲回车换行，最后以分号首尾)</span></span><br><span class="line">db.createUser(  </span><br><span class="line">  &#123; user: <span class="string">"admin"</span>,  </span><br><span class="line">    customData：&#123;description:<span class="string">"superuser"</span>&#125;,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">"admin"</span>,  </span><br><span class="line">    roles: [ &#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125; ]  </span><br><span class="line">  &#125;  </span><br><span class="line">)</span><br><span class="line"><span class="comment"># user字段，为新用户的名字；</span></span><br><span class="line"><span class="comment"># pwd字段，用户的密码；</span></span><br><span class="line"><span class="comment"># cusomData字段，为任意内容，例如可以为用户全名介绍；</span></span><br><span class="line"><span class="comment"># roles字段，指定用户的角色，可以用一个空数组给新用户设定空角色。在roles字段,可以指定内置角色和用户定义的角色。</span></span><br><span class="line"><span class="comment"># 超级用户的role有两种，userAdmin或者userAdminAnyDatabase(比前一种多加了对所有数据库的访问,仅仅是访问而已)。</span></span><br><span class="line"><span class="comment"># db是指定数据库的名字，admin是管理数据库。</span></span><br><span class="line"><span class="comment"># 不能用admin数据库中的用户登录其他数据库。注：只能查看当前数据库中的用户，哪怕当前数据库admin数据库，也只能查看admin数据库中创建的用户。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================下面创建普通账户=========================</span></span><br><span class="line"><span class="comment"># 创建一个业务数据库管理员用户，只负责某一个或几个数据库的増查改删</span></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user:<span class="string">"user001"</span>,</span><br><span class="line">    <span class="built_in">pwd</span>:<span class="string">"123456"</span>,</span><br><span class="line">    customData:&#123;</span><br><span class="line">        name:<span class="string">'shawn'</span>,</span><br><span class="line">        email:<span class="string">'shawn@qq.com'</span>,</span><br><span class="line">        age:18,</span><br><span class="line">    &#125;,</span><br><span class="line">    roles:[</span><br><span class="line">        &#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"db001"</span>&#125;,</span><br><span class="line">        &#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"db002"</span>&#125;,</span><br><span class="line">        <span class="string">'read'</span>// 对其他数据库有只读权限，对db001、db002是读写权限</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================相关介绍=========================</span></span><br><span class="line"><span class="comment"># Built-In Roles（内置角色）：</span></span><br><span class="line"><span class="comment"># 1. 数据库用户角色：read、readWrite;</span></span><br><span class="line"><span class="comment"># 2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；</span></span><br><span class="line"><span class="comment"># 3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</span></span><br><span class="line"><span class="comment"># 4. 备份恢复角色：backup、restore；</span></span><br><span class="line"><span class="comment"># 5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</span></span><br><span class="line"><span class="comment"># 6. 超级用户角色：root，这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</span></span><br><span class="line"><span class="comment"># 7. 内部角色：__system</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体角色的功能： </span></span><br><span class="line"><span class="comment"># 1. Read：允许用户读取指定数据库</span></span><br><span class="line"><span class="comment"># 2. readWrite：允许用户读写指定数据库</span></span><br><span class="line"><span class="comment"># 3. dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</span></span><br><span class="line"><span class="comment"># 4. userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</span></span><br><span class="line"><span class="comment"># 5. clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</span></span><br><span class="line"><span class="comment"># 6. readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</span></span><br><span class="line"><span class="comment"># 7. readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</span></span><br><span class="line"><span class="comment"># 8. userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</span></span><br><span class="line"><span class="comment"># 9. dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</span></span><br><span class="line"><span class="comment"># 10. root：只在admin数据库中可用。超级账号，超级权限</span></span><br></pre></td></tr></table></figure><h3 id="2-2-账户常用操作">2.2 账户常用操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看创建的用户</span></span><br><span class="line">show users</span><br><span class="line">db.system.users.find()</span><br><span class="line">db.runCommand(&#123;usersInfo:<span class="string">"userName"</span>&#125;)</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">use admin</span><br><span class="line">db.changeUserPassword(<span class="string">"username"</span>, <span class="string">"xxx"</span>)</span><br><span class="line"><span class="comment"># 修改密码和用户信息</span></span><br><span class="line">db.runCommand(</span><br><span class="line">    &#123;</span><br><span class="line">        updateUser:<span class="string">"username"</span>,</span><br><span class="line">        <span class="built_in">pwd</span>:<span class="string">"xxx"</span>,</span><br><span class="line">        customData:&#123;title:<span class="string">"xxx"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 删除数据库用户</span></span><br><span class="line">use admin</span><br><span class="line">db.dropUser(<span class="string">'user001'</span>)</span><br><span class="line">db.dropAllUser() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建其他数据管理员</span></span><br><span class="line"><span class="comment"># 登录管理员用户</span></span><br><span class="line">use admin</span><br><span class="line">db.auth(<span class="string">'admin'</span>,<span class="string">'admin'</span>)</span><br><span class="line"><span class="comment"># 切换至db001数据库</span></span><br><span class="line">use db001</span><br><span class="line"><span class="comment"># 増查改删该数据库专有用户</span></span><br></pre></td></tr></table></figure><h3 id="2-3-权限启动认证">2.3 权限启动认证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用权限验证</span></span><br><span class="line">mongo --auth</span><br><span class="line"><span class="comment"># 或者修改mongo.conf，最后一行添加</span></span><br><span class="line">auth=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 重新启动mongodb</span></span><br></pre></td></tr></table></figure><h2 id="3、Docker启动认证">3、Docker启动认证</h2><h3 id="3-1-创建管理员">3.1 创建管理员</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件夹用于存放数据，具体路径根据你自己想法来。这里这是举例。</span></span><br><span class="line">mkdir /mongo/data/</span><br><span class="line"><span class="comment"># 创建无校验的容器</span></span><br><span class="line">docker run --name linux-mongo -p 27017:27017 -v /mongo/data:/data/db -d mongo</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it linux-mongo mongo admin</span><br><span class="line"><span class="comment"># 创建管理员</span></span><br><span class="line">db.createUser(&#123; user:<span class="string">'rootuser'</span>,<span class="built_in">pwd</span>:<span class="string">'rootpassword'</span>, roles: [ &#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125; ] &#125;);</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 停止 linux-mongo 容器</span></span><br><span class="line">docker stop linux-mongo</span><br><span class="line"><span class="comment"># 删除。其实不删除也可以，没有其他影响，不删除记得下面步骤的命名不要重复。这里我建议你删除，因为容易混乱，如果需要重新配置再按上面步骤操作就可以。</span></span><br><span class="line">docker rm linux-mongo</span><br><span class="line"><span class="comment"># 至此创建管理员任务完成</span></span><br></pre></td></tr></table></figure><h3 id="3-2-创建-MongoDB-镜像-带验证">3.2 创建 MongoDB 镜像 - 带验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建容器 - 有校验</span></span><br><span class="line">docker run --name linux-mongo -p 27017:27017 -v /mongo/data:/data/db -d mongo --auth</span><br><span class="line"><span class="comment"># 启动容器之后，使用admin进入</span></span><br><span class="line">docker <span class="built_in">exec</span> -it linux-mongo mongo admin</span><br><span class="line"><span class="comment"># 权限认证</span></span><br><span class="line">db.auth(<span class="string">"rootuser"</span>,<span class="string">"rootpassword"</span>); <span class="comment"># 返回 1 证明成功， 返回 0 证明失败</span></span><br><span class="line"><span class="comment"># 创建可用用户。或者直接使用 rootuser ( 权限要要 root 才能在外部操作)</span></span><br><span class="line">db.createUser(&#123; user: <span class="string">'testadmin'</span>, <span class="built_in">pwd</span>: <span class="string">'testadmin123'</span>, roles: [ &#123; role: <span class="string">"root"</span>, db: <span class="string">"admin"</span> &#125; ] &#125;);</span><br><span class="line"><span class="comment"># 校验</span></span><br><span class="line">db.auth(<span class="string">"testadmin"</span>,<span class="string">"testadmin123"</span>); <span class="comment"># 返回 1 证明成功， 返回 0 证明失败</span></span><br><span class="line"><span class="comment"># 权限说明</span></span><br><span class="line"><span class="comment"># 1.数据库用户角色：read、readWrite;</span></span><br><span class="line"><span class="comment"># 2.数据库管理角色：dbAdmin、dbOwner、userAdmin；</span></span><br><span class="line"><span class="comment"># 3.集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</span></span><br><span class="line"><span class="comment"># 4.备份恢复角色：backup、restore</span></span><br><span class="line"><span class="comment"># 5.所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</span></span><br><span class="line"><span class="comment"># 6.超级用户角色：root</span></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># MongoDB 数据库操作</span></span><br><span class="line">show dbs; <span class="comment"># 查看现有数据库</span></span><br><span class="line">show users; <span class="comment"># 查看用户</span></span><br><span class="line">db.dropUser(<span class="string">"testadmin"</span>) <span class="comment"># 删除用户，外部想连接 testadmin 的话，此处不要删除</span></span><br><span class="line"><span class="comment"># 至此，有一个用户可以直接使用。</span></span><br></pre></td></tr></table></figure><h2 id="4、MongoDB可视化">4、MongoDB可视化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name mongo \</span><br><span class="line">-v /home/docker/mongo/db:/data/db \</span><br><span class="line">-p 27017:27017 \</span><br><span class="line">-e MONGO_INITDB_ROOT_USERNAME=admin \</span><br><span class="line">-e MONGO_INITDB_ROOT_PASSWORD=123456 \</span><br><span class="line">--restart=always \</span><br><span class="line">mongo:5.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是 mongo-express 可视化</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name mongo-express \</span><br><span class="line">-p 8081:8081 \</span><br><span class="line">--link mongo \</span><br><span class="line">-e ME_CONFIG_MONGODB_SERVER=<span class="string">'172.21.9.203'</span> \</span><br><span class="line">-e ME_CONFIG_MONGODB_ADMINUSERNAME=<span class="string">'admin'</span> \</span><br><span class="line">-e ME_CONFIG_MONGODB_ADMINPASSWORD=<span class="string">'123456'</span> \</span><br><span class="line">-e ME_CONFIG_BASICAUTH_USERNAME=<span class="string">'admin'</span> \</span><br><span class="line">-e ME_CONFIG_BASICAUTH_PASSWORD=<span class="string">'admin123'</span> \</span><br><span class="line">--restart=always \</span><br><span class="line">mongo-express:0.54</span><br></pre></td></tr></table></figure><h1>五、副本与集群</h1><h2 id="1、副本集">1、副本集</h2><blockquote><p><a href="https://www.mongodb.com/docs/manual/replication/" target="_blank" rel="noopener" title="https://www.mongodb.com/docs/manual/replication/">https://www.mongodb.com/docs/manual/replication/</a></p></blockquote><h3 id="1-1-概述">1.1 概述</h3><p>MongoDB 副本集（Replica Set）是有自动故障恢复功能的主从集群，有一个Primary节点和一个或多个Secondary节点组成。副本集没有固定的主节点，当主节点发生故障时整个集群会选举一个主节点为系统提供服务以保证系统的高可用。注意：这种方式并不能解决主节点的单点访问压力问题。</p><p>**注意：**当MongoDB副本集架构只剩一个节点时，整个节点是不可用的。单主不可写</p><p><img src="http://qnypic.shawncoding.top/course/202312131426150.png" alt></p><h3 id="1-2-自动故障转移">1.2 自动故障转移</h3><p>当主节点未与集合的其他成员通信超过配置的选举超时时间（默认为 10 秒）时，合格的辅助节点将调用选举以将自己提名为新的主节点。集群尝试完成新主节点的选举并恢复正常操作。</p><p><img src="http://qnypic.shawncoding.top/course/202312131426151.png" alt></p><h3 id="1-3-副本集搭建">1.3 副本集搭建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里我是用了一台机器，可以分作不同机器，注意ip即可</span></span><br><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line">mkdir -p rep1/data1</span><br><span class="line">mkdir -p rep1/data2</span><br><span class="line">mkdir -p rep1/data3</span><br><span class="line"><span class="comment"># 搭建副本集</span></span><br><span class="line">./mongod --port 27017 --dbpath ../rep1/data1 --bind_ip 0.0.0.0 --replSet myreplace/[1.14.17.152:27018,1.14.17.152:27019]</span><br><span class="line">./mongod --port 27018 --dbpath ../rep1/data2 --bind_ip 0.0.0.0 --replSet myreplace/[1.14.17.152:27017,1.14.17.152:27019]</span><br><span class="line">./mongod --port 27019 --dbpath ../rep1/data3 --bind_ip 0.0.0.0 --replSet myreplace/[1.14.17.152:27018,1.14.17.152:27017]</span><br><span class="line"><span class="comment"># ./ mongo --port 27018</span></span><br><span class="line"><span class="comment"># 配置副本集，连接任意节点</span></span><br><span class="line">use admin</span><br><span class="line"><span class="comment"># 初始化副本集</span></span><br><span class="line">var config = &#123; </span><br><span class="line">         _id:<span class="string">"myreplace"</span>, </span><br><span class="line">         members:[</span><br><span class="line">         &#123;_id:0,host:<span class="string">"121.5.167.13:27017"</span>&#125;,</span><br><span class="line">         &#123;_id:1,host:<span class="string">"121.5.167.13:27018"</span>&#125;,</span><br><span class="line">         &#123;_id:2,host:<span class="string">"121.5.167.13:27019"</span>&#125;]</span><br><span class="line"> &#125;</span><br><span class="line">rs.initiate(config);//初始化配置</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入从节点，让其可以读，每个从节点都要设置</span></span><br><span class="line"><span class="comment"># 设置客户端临时可以访问，然后navicat就可以集群连接了</span></span><br><span class="line">rs.slaveOk();  //旧的</span><br><span class="line">rs.secondaryOk();  //新的</span><br><span class="line"></span><br><span class="line"><span class="comment"># springboot ：spring.data.mongodb.uri=mongodb://1.14.17.152:27017,1.14.17.152:27018,1.14.17.152:27019/chihiro</span></span><br></pre></td></tr></table></figure><p>还有一种方式是配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 检查端口运行情况 如果正在运行 关闭服务</span></span><br><span class="line">netstat -lnp | grep 27017</span><br><span class="line"></span><br><span class="line"><span class="comment">## 切换到 /opt/home目录下</span></span><br><span class="line"><span class="built_in">cd</span> /opt/home/</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 将mongodb5.0.5复制三份</span></span><br><span class="line">cp -r mongodb5.0.5/ mongodb1</span><br><span class="line">cp -r mongodb5.0.5/ mongodb2</span><br><span class="line">cp -r mongodb5.0.5/ mongodb3</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建数据目录</span></span><br><span class="line">mkdir -p /data/mongodb/data1</span><br><span class="line">mkdir -p /data/mongodb/data2</span><br><span class="line">mkdir -p /data/mongodb/data3</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入mongodb1的bin目录</span></span><br><span class="line"><span class="built_in">cd</span> mongodb1/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改mongodb.conf配置文件</span></span><br><span class="line">vim mongodb.conf </span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改内容如下 修改datapath、logpath目录和port端口号</span></span><br><span class="line"><span class="comment">#数据文件存放目录</span></span><br><span class="line">dbpath = /data/mongodb/data1</span><br><span class="line"><span class="comment">#日志文件存放地址</span></span><br><span class="line">logpath =/data/mongodb/log1.log</span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line">port = 27018</span><br><span class="line"><span class="comment">#以守护程序的方式启用，即在后台运行</span></span><br><span class="line">fork = <span class="literal">true</span></span><br><span class="line"><span class="comment">#需要认证。如果放开注释，就必须创建MongoDB的账号，使用账号与密码才可&gt;远程访问，第一次安装建议注释</span></span><br><span class="line"><span class="comment">#auth=true </span></span><br><span class="line"><span class="comment">#允许远程访问，或者直接注释，127.0.0.1是只允许本地访问</span></span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line">replSet=myreplace/[192.168.200.128:27019,192.168.200.128:27020]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 其余两个同上 端口分别为 27018 27019 27020</span></span><br><span class="line"><span class="comment"># 分别连接三台MongoDB</span></span><br><span class="line">./mongo --port 27018</span><br><span class="line">./mongo --port 27019</span><br><span class="line">./mongo --port 27020</span><br><span class="line"><span class="comment"># 配置副本集，连接任意节点</span></span><br><span class="line">var config = &#123; </span><br><span class="line">    _id:<span class="string">"myreplace"</span>, </span><br><span class="line">    members:[</span><br><span class="line">    &#123;_id:0,host:<span class="string">"192.168.200.128:27018"</span>&#125;,</span><br><span class="line">    &#123;_id:1,host:<span class="string">"192.168.200.128:27019"</span>&#125;,</span><br><span class="line">    &#123;_id:2,host:<span class="string">"192.168.200.128:27020"</span>&#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 初始化配置 </span></span><br><span class="line">rs.initiate(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在主节点添加一条数据</span></span><br><span class="line">use <span class="built_in">test</span>;</span><br><span class="line">db.test.insert(&#123;_id:1, name:<span class="string">'java'</span>&#125;);</span><br><span class="line">db.test.find();</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置客户端临时可以访问 分别在从节点执行查询命令db.test.find();</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">rs.slaveOk();</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">rs.secondaryOk();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">db.test.find();</span><br><span class="line"></span><br><span class="line"><span class="comment">## 手动摸拟异常 关闭主节点 查看从节点是否从新选举</span></span><br><span class="line"><span class="comment"># 结果 从节点会从新选举主节点 主节点再次启动后会自动变更为从节点</span></span><br></pre></td></tr></table></figure><h2 id="2、分片集群-sharing-cluster">2、分片集群(sharing cluster)</h2><blockquote><p><a href="https://www.mongodb.com/docs/manual/sharding/" target="_blank" rel="noopener" title="https://www.mongodb.com/docs/manual/sharding/">https://www.mongodb.com/docs/manual/sharding/</a></p></blockquote><h3 id="2-1-概述">2.1 概述</h3><p><strong>分片(sharding)是指将数据拆分，将其分散存在不同机器的过程</strong>，有时也用分区(partitioning)来表示这个概念,将数据分散在不同的机器上，不需要功能强大的大型计算机就能存储更多的数据，处理更大的负载。</p><p>分片目的是通过分片能够增加更多机器来应对不断的增加负载和数据，还不影响应用运行。MongoDB支持自动分片,可以摆脱手动分片的管理困扰，集群自动切分数据做负载均衡。 </p><p>MongoDB分片的基本思想就是将集合拆分成多个块，这些快分散在若干个片里，每个片只负责总数据的一部分，应用程序不必知道哪些片对应哪些数据，甚至不需要知道数据拆分了，所以在分片之前会运行一个路由进程，mongos进程，这个路由器知道所有的数据存放位置，应用只需要直接与mongos交互即可。mongos自动将请求转到相应的片上获取数据，从应用角度看分不分片没有什么区别。</p><h3 id="2-2-架构">2.2 架构</h3><p><img src="http://qnypic.shawncoding.top/course/202312131426152.png" alt></p><ul><li>Shard: 用于存储实际的数据块，实际生产环境中一个shard server角色可由几台机器组个一个replica set承担，防止主机单点故障</li><li>Config Server:mongod实例，存储了整个 ClusterMetadata</li><li>Query Routers: 前端路由，客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用</li><li>Shard Key: 片键，设置分片时需要在集合中选一个键,用该键的值作为拆分数据的依据,这个片键称之为(shard key)，片键的选取很重要,片键的选取决定了数据散列是否均匀</li></ul><h3 id="2-3-分片集群搭建">2.3 分片集群搭建</h3><p>下面是原生安装集群，docker安装可以参考：<a href="https://blog.csdn.net/qq_38008295/article/details/110952401" target="_blank" rel="noopener" title="Docker部署MongoDB分片+副本集集群（实战）">Docker部署MongoDB分片+副本集集群（实战）</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.集群规划</span></span><br><span class="line">- Shard Server 1：27017</span><br><span class="line">- Shard Repl   1：27018</span><br><span class="line"></span><br><span class="line">- Shard Server 2：27019</span><br><span class="line">- Shard Repl   2：27020</span><br><span class="line"></span><br><span class="line">- Shard Server 3：27021</span><br><span class="line">- Shard Repl   3：27022</span><br><span class="line"></span><br><span class="line">- Config Server ：27023</span><br><span class="line">- Config Server ：27024</span><br><span class="line">- Config Server ：27025</span><br><span class="line"></span><br><span class="line">- Route Process ：27026</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.进入安装的bin目录创建数据目录</span></span><br><span class="line"><span class="comment">## s0</span></span><br><span class="line">mkdir -p /data/mongodb/shard/s0</span><br><span class="line">mkdir -p /data/mongodb/shard/s0-repl</span><br><span class="line"></span><br><span class="line"><span class="comment">## s1</span></span><br><span class="line">mkdir -p /data/mongodb/shard/s1</span><br><span class="line">mkdir -p /data/mongodb/shard/s1-repl</span><br><span class="line"></span><br><span class="line"><span class="comment">## s2</span></span><br><span class="line">mkdir -p /data/mongodb/shard/s2</span><br><span class="line">mkdir -p /data/mongodb/shard/s2-repl</span><br><span class="line"></span><br><span class="line"><span class="comment">## config</span></span><br><span class="line">mkdir -p /data/mongodb/shard/config1</span><br><span class="line">mkdir -p /data/mongodb/shard/config2</span><br><span class="line">mkdir -p /data/mongodb/shard/config3</span><br><span class="line"></span><br><span class="line">mkdir -p /data/mongodb/shard/config</span><br></pre></td></tr></table></figure><p>启动6个 shard服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 启动 s0、r0</span></span><br><span class="line">./mongod --port 27017 --dbpath /data/mongodb/shard/s0 --bind_ip 0.0.0.0 --shardsvr --replSet r0/123.57.80.91:27018 --fork --logpath /data/mongodb/shard/s0/s0.log</span><br><span class="line"></span><br><span class="line">./mongod --port 27018 --dbpath /data/mongodb/shard/s0-repl --bind_ip 0.0.0.0 --shardsvr --replSet r0/123.57.80.91:27017 --fork --logpath /data/mongodb/shard/s0-repl/s0-repl.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录任意节点</span></span><br><span class="line">./mongo --port 27017</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择admin库</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在admin中执行</span></span><br><span class="line">config = &#123; </span><br><span class="line">  _id:<span class="string">"r0"</span>, members:[</span><br><span class="line">      &#123;_id:0,host:<span class="string">"123.57.80.91:27017"</span>&#125;,</span><br><span class="line">      &#123;_id:1,host:<span class="string">"123.57.80.91:27018"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">rs.initiate(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动 s1、r1</span></span><br><span class="line">./mongod --port 27019 --dbpath /data/mongodb/shard/s1 --bind_ip 0.0.0.0 --shardsvr --replSet r1/123.57.80.91:27020 --fork --logpath /data/mongodb/shard/s1/s1.log</span><br><span class="line"></span><br><span class="line">./mongod --port 27020 --dbpath /data/mongodb/shard/s1-repl --bind_ip 0.0.0.0 --shardsvr --replSet r1/123.57.80.91:27019 --fork --logpath /data/mongodb/shard/s1-repl/s1-repl.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录任意节点</span></span><br><span class="line">./mongo --port 27019</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在admin中执行</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">config = &#123; </span><br><span class="line">  _id:<span class="string">"r1"</span>, members:[</span><br><span class="line">      &#123;_id:0,host:<span class="string">"123.57.80.91:27019"</span>&#125;,</span><br><span class="line">      &#123;_id:1,host:<span class="string">"123.57.80.91:27020"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">rs.initiate(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动 s2、r2</span></span><br><span class="line">./mongod --port 27021 --dbpath /data/mongodb/shard/s2 --bind_ip 0.0.0.0 --shardsvr --replSet r2/123.57.80.91:27022 --fork --logpath /data/mongodb/shard/s2/s2.log</span><br><span class="line"></span><br><span class="line">./mongod --port 27022 --dbpath /data/mongodb/shard/s2-repl --bind_ip 0.0.0.0 --shardsvr --replSet r2/123.57.80.91:27021 --fork --logpath /data/mongodb/shard/s2-repl/s2-repl.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录任意节点</span></span><br><span class="line">./mongo --port 27017</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择admin库</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在admin中执行</span></span><br><span class="line">config = &#123; </span><br><span class="line">  _id:<span class="string">"r2"</span>, members:[</span><br><span class="line">      &#123;_id:0,host:<span class="string">"123.57.80.91:27021"</span>&#125;,</span><br><span class="line">      &#123;_id:1,host:<span class="string">"123.57.80.91:27022"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">rs.initiate(config);</span><br></pre></td></tr></table></figure><p>启动3个config服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./mongod --port 27023 --dbpath /data/mongodb/shard/config1 --bind_ip 0.0.0.0 --replSet  config/[123.57.80.91:27024,123.57.80.91:27025] --configsvr --fork --logpath /data/mongodb/shard/config1/config.log</span><br><span class="line"></span><br><span class="line">./mongod --port 27024 --dbpath /data/mongodb/shard/config2 --bind_ip 0.0.0.0 --replSet  config/[123.57.80.91:27023,123.57.80.91:27025] --configsvr --fork --logpath /data/mongodb/shard/config2/config.log</span><br><span class="line"></span><br><span class="line">./mongod --port 27025 --dbpath /data/mongodb/shard/config3 --bind_ip 0.0.0.0 --replSet  config/[123.57.80.91:27023,123.57.80.91:27024] --configsvr --fork --logpath /data/mongodb/shard/config3/config.log</span><br></pre></td></tr></table></figure><p>初始化 config server 副本集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录任意节点 congfig server</span></span><br><span class="line">./mongo --port 27023</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择数据库</span></span><br><span class="line">use admin </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在admin中执行</span></span><br><span class="line">config = &#123; </span><br><span class="line">    _id:<span class="string">"config"</span>, </span><br><span class="line">    configsvr: <span class="literal">true</span>,</span><br><span class="line">    members:[</span><br><span class="line">      &#123;_id:0,host:<span class="string">"123.57.80.91:27023"</span>&#125;,</span><br><span class="line">      &#123;_id:1,host:<span class="string">"123.57.80.91:27024"</span>&#125;,</span><br><span class="line">      &#123;_id:2,host:<span class="string">"123.57.80.91:27025"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 初始化副本集配置 </span></span><br><span class="line">rs.initiate(config);</span><br></pre></td></tr></table></figure><p>启动 mongos 路由服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongos --port 27026 --configdb config/123.57.80.91:27023,123.57.80.91:27024,123.57.80.91:27025 --bind_ip 0.0.0.0 --fork --logpath /data/mongodb/shard/config/config.log</span><br></pre></td></tr></table></figure><p>登录 mongos 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.登录 </span></span><br><span class="line">./mongo --port 27026</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.选择数据库</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.添加分片信息</span></span><br><span class="line">db.runCommand(&#123; addshard:<span class="string">"r0/123.57.80.91:27017,123.57.80.91:27018"</span>,<span class="string">"allowLocal"</span>:<span class="literal">true</span> &#125;);</span><br><span class="line">db.runCommand(&#123; addshard:<span class="string">"r1/123.57.80.91:27019,123.57.80.91:27020"</span>,<span class="string">"allowLocal"</span>:<span class="literal">true</span> &#125;);</span><br><span class="line">db.runCommand(&#123; addshard:<span class="string">"r2/123.57.80.91:27021,123.57.80.91:27022"</span>,<span class="string">"allowLocal"</span>:<span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.指定分片的数据库</span></span><br><span class="line">db.runCommand(&#123; enablesharding:<span class="string">"users"</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.设置库的片键信息</span></span><br><span class="line">db.runCommand(&#123; shardcollection: <span class="string">"users.user"</span>, key: &#123; _id:1&#125;&#125;);</span><br><span class="line">db.runCommand(&#123; shardcollection: <span class="string">"users.emp"</span>, key: &#123; _id: <span class="string">"hashed"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.登陆27026节点</span></span><br><span class="line">./mongo --port 27026</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.选择数据库</span></span><br><span class="line">use users;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.插入数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=0;i&lt;1000;i++)&#123;</span><br><span class="line">   db.user.insert(&#123;_id:i, name:<span class="string">"java_"</span>+i, age: i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.验证27017</span></span><br><span class="line">./mongo --port 27017</span><br><span class="line">use users;</span><br><span class="line">db.user.count();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.验证27019</span></span><br><span class="line">./mongo --port 27019</span><br><span class="line">use users;</span><br><span class="line">db.user.count();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.验证27021</span></span><br><span class="line">./mongo --port 27021</span><br><span class="line">use users;</span><br><span class="line">db.user.count();</span><br></pre></td></tr></table></figure><h1>六、数据备份与恢复</h1><blockquote><p><a href="https://www.mongodb.com/docs/database-tools/mongodump/" target="_blank" rel="noopener" title="https://www.mongodb.com/docs/database-tools/mongodump/">https://www.mongodb.com/docs/database-tools/mongodump/</a></p></blockquote><h2 id="1、常规数据备份与恢复">1、常规数据备份与恢复</h2><h3 id="1-1-备份-MongoDB-数据库（包括身份验证）">1.1 备份 MongoDB 数据库（包括身份验证）</h3><p>假设我们要备份一个名为 <code>mydatabase</code> 的 MongoDB 数据库，并将备份文件保存在 <code>/backup</code> 目录下。数据库的用户名是 <code>myuser</code>，密码是 <code>mypassword</code>，身份验证数据库是 <code>admin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodump --host localhost --port 27017 --db mydatabase --username myuser --password mypassword --authenticationDatabase admin --out /backup</span><br><span class="line"><span class="comment"># 写法</span></span><br><span class="line">mongodump --host &lt;hostname&gt; --port &lt;port&gt; --db &lt;database_name&gt; --username &lt;username&gt; --password &lt;password&gt; --authenticationDatabase &lt;auth_db&gt; --out /backup</span><br></pre></td></tr></table></figure><ul><li><code>&lt;hostname&gt;</code>: MongoDB 主机名或 IP 地址</li><li><code>&lt;port&gt;</code>: MongoDB 端口，默认为 27017</li><li><code>&lt;database_name&gt;</code>: 要备份的数据库名称</li><li><code>&lt;username&gt;</code>: 用户名</li><li><code>&lt;password&gt;</code>: 用户密码</li><li><code>&lt;auth_db&gt;</code>: 用户的身份验证数据库</li><li><code>/backup</code>: 备份文件输出目录</li></ul><h3 id="1-2-恢复-MongoDB-数据库（包括身份验证）">1.2 恢复 MongoDB 数据库（包括身份验证）</h3><p>假设我们要从之前的备份文件恢复 <code>mydatabase</code> 数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongorestore --host localhost --port 27017 --db mydatabase --username myuser --password mypassword --authenticationDatabase admin /backup/mydatabase</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法</span></span><br><span class="line">mongorestore --host &lt;hostname&gt; --port &lt;port&gt; --db &lt;database_name&gt; --username &lt;username&gt; --password &lt;password&gt; --authenticationDatabase &lt;auth_db&gt; /backup/&lt;database_name&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;hostname&gt;</code>: MongoDB 主机名或 IP 地址</li><li><code>&lt;port&gt;</code>: MongoDB 端口，默认为 27017</li><li><code>&lt;database_name&gt;</code>: 要恢复的数据库名称</li><li><code>&lt;username&gt;</code>: 用户名</li><li><code>&lt;password&gt;</code>: 用户密码</li><li><code>&lt;auth_db&gt;</code>: 用户的身份验证数据库</li><li><code>/backup/&lt;database_name&gt;</code>: 备份文件所在的目录</li></ul><p>最后，基于docker的可以参考：<a href="https://blog.csdn.net/u010533742/article/details/109312648" target="_blank" rel="noopener" title="基于docker的mongodump / mongorestore 备份恢复">基于docker的mongodump / mongorestore 备份恢复</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;MongoDB5.x学习笔记&lt;/h1&gt;
&lt;h1&gt;一、概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://www.mongodb.com/docs/manual/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://www.mongodb.com/docs/manual/&quot;&gt;https://www.mongodb.com/docs/manual/&lt;/a&gt;&lt;br&gt;
菜鸟教程：&lt;a href=&quot;https://www.runoob.com/mongodb/mongodb-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://www.runoob.com/mongodb/mongodb-tutorial.html&quot;&gt;https://www.runoob.com/mongodb/mongodb-tutorial.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、MongoDB简介&quot;&gt;1、MongoDB简介&lt;/h2&gt;
&lt;h3 id=&quot;1-1-简介&quot;&gt;1.1 简介&lt;/h3&gt;
&lt;p&gt;MongoDB是一个基于分布式文件存储的数据库（支持集群、分片处理）。由C++语言编写。旨在为WEB应用提供可扩展高性能的数据存储解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://blog.shawncoding.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java之SPI机制详解</title>
    <link href="https://blog.shawncoding.top/posts/edba3f0f.html"/>
    <id>https://blog.shawncoding.top/posts/edba3f0f.html</id>
    <published>2023-12-13T08:38:53.000Z</published>
    <updated>2024-01-24T12:10:11.996Z</updated>
    
    <content type="html"><![CDATA[<h1>Java之SPI机制详解</h1><h1>一、SPI概述</h1><h2 id="1、概述">1、概述</h2><p>SPI 即 <code>Service Provider Interface</code> ，字面意思就是：“服务提供者的接口”，专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口。SPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。例如SpringBoot 的自动装配就是基于spring 的 SPI 扩展机制和EnableAutoConfiguration实现的</p><a id="more"></a><h2 id="2、SPI-和-API-的区别">2、SPI 和 API 的区别</h2><p>API 中的接口是服务提供者给服务调用者的一个功能列表，而 SPI 中更多强调的是，服务调用者对服务实现的一种约束，服务提供者根据这种约束实现的服务，可以被服务调用者发现</p><p><img src="http://qnypic.shawncoding.top/course/202312131426805.png" alt></p><p>一般模块之间都是通过通过接口进行通讯，那我们在服务调用方和服务实现方（也称服务提供者）之间引入一个“接口”。当实现方提供了接口和实现，我们可以通过调用实现方的接口从而拥有实现方给我们提供的能力，这就是 API ，这种接口和实现都是放在实现方的。</p><p><img src="http://qnypic.shawncoding.top/course/202312131426806.png" alt></p><p>**当接口存在于调用方这边时，就是 SPI **，由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务。</p><p>举个例子：公司 H 是一家科技公司，新设计了一款芯片，然后现在需要量产了，而市面上有好几家芯片制造业公司，这个时候，只要 H 公司指定好了这芯片生产的标准（定义好了接口标准），那么这些合作的芯片公司（服务提供者）就按照标准交付自家特色的芯片（提供不同方案的实现，但是给出来的结果是一样的）</p><h1>二、Demo演示</h1><h2 id="1、调用方创建-Service-Provider-Interface">1、调用方创建(Service Provider Interface)</h2><p>新建一个java项目，新建 <code>Logger</code> 接口，这个就是 SPI ， 服务提供者接口，后面的服务提供者就要针对这个接口进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shawn.up.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">(String msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是 <code>LoggerService</code> 类，这个主要是为服务使用者（调用方）提供特定功能的。这个类也是实现 Java SPI 机制的关键所在，如果存在疑惑的话可以先往后面继续看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shawn.up.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LoggerService SERVICE = <span class="keyword">new</span> LoggerService();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Logger&gt; loggerList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LoggerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceLoader&lt;Logger&gt; loader = ServiceLoader.load(Logger<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Logger&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Logger log : loader) &#123;</span><br><span class="line">            list.add(log);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// LoggerList 是所有 ServiceProvider</span></span><br><span class="line">        loggerList = list;</span><br><span class="line">        <span class="keyword">if</span> (!list.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// Logger 只取一个</span></span><br><span class="line">            logger = list.get(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoggerService <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SERVICE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (logger == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"info 中没有发现 Logger 服务提供者"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (loggerList.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"debug 中没有发现 Logger 服务提供者"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        loggerList.forEach(log -&gt; log.debug(msg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建 <code>Main</code> 类（服务使用者，调用方），启动程序查看结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shawn.up.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LoggerService service = LoggerService.getService();</span><br><span class="line"></span><br><span class="line">        service.info(<span class="string">"Hello SPI"</span>);</span><br><span class="line">        service.debug(<span class="string">"Hello SPI"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// info 中没有发现 Logger 服务提供者 </span></span><br><span class="line"><span class="comment">// debug 中没有发现 Logger 服务提供者</span></span><br></pre></td></tr></table></figure><p>此时我们只是空有接口，并没有为 <code>Logger</code> 接口提供任何的实现，所以输出结果中没有按照预期打印相应的结果。可以使用命令或者直接使用 IDEA 将整个程序直接打包成 jar 包</p><h2 id="2、服务方-Service-Provider">2、服务方(Service Provider)</h2><p>接下来新建一个项目用来实现 <code>Logger</code> 接口，新建 <code>Logback</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shawn.up.spi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shawn.up.spi.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logback</span> <span class="keyword">implements</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logback info 打印日志："</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logback debug 打印日志："</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <code>service-provider-interface</code> 的 jar 导入项目中。新建 lib 目录，然后将 jar 包拷贝过来，再添加到项目中，然后右键<code>Add as Library</code>，完成后就可以在项目中导入 jar 包里面的一些类和方法了，就像 JDK 工具类导包一样的（打完jar包后也可以直接maven引入，这个更方便）</p><p>实现 <code>Logger</code> 接口，在 <code>src</code> 目录下新建 <code>META-INF/services</code> 文件夹，然后新建文件<code>com.shawn.up.spi.Logger</code> （SPI 的全类名），文件里面的内容是：<code>com.shawn.up.spi.service.Logback </code>（Logback 的全类名，即 SPI 的实现类的包名 + 类名），<strong>这是 JDK SPI 机制 ServiceLoader 约定好的标准</strong></p><blockquote><p>Java 中的 SPI 机制就是在每次类加载的时候会先去找到 class 相对目录下的 <code>META-INF</code> 文件夹下的 services 文件夹下的文件，将这个文件夹下面的所有文件先加载到内存中，然后根据这些文件的文件名和里面的文件内容找到相应接口的具体实现类，找到实现类后就可以通过反射去生成对应的对象，保存在一个 list 列表里面，所以可以通过迭代或者遍历的方式拿到对应的实例对象，生成不同的实现。</p></blockquote><p>所以会提出一些规范要求：文件名一定要是接口的全类名，然后里面的内容一定要是实现类的全类名，实现类可以有多个，直接换行就好了，多个实现类的时候，会一个一个的迭代加载。接下来同样将 <code>service-provider</code> 项目打包成 jar 包，这个 jar 包就是服务提供方的实现。</p><h2 id="3、服务发现">3、服务发现</h2><p>新建 Main 方法测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJavaSPI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LoggerService loggerService = LoggerService.getService();</span><br><span class="line">        loggerService.info(<span class="string">"你好"</span>);</span><br><span class="line">        loggerService.debug(<span class="string">"测试Java SPI 机制"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logback info 打印日志：你好 Logback </span></span><br><span class="line"><span class="comment">// debug 打印日志：测试 Java SPI 机制</span></span><br></pre></td></tr></table></figure><p>通过使用 SPI 机制，可以看出服务（<code>LoggerService</code>）和 服务提供者两者之间的耦合度非常低，如果说我们想要换一种实现，那么其实只需要修改 <code>service-provider</code> 项目中针对 <code>Logger</code> 接口的具体实现就可以了，只需要换一个 jar 包即可，也可以有在一个项目里面有多个实现，这不就是 SLF4J 原理吗？</p><p>如果某一天需求变更了，此时需要将日志输出到消息队列，或者做一些别的操作，这个时候完全不需要更改 Logback 的实现，只需要新增一个服务实现（service-provider）可以通过在本项目里面新增实现也可以从外部引入新的服务实现 jar 包。我们可以在服务(LoggerService)中选择一个具体的 服务实现(service-provider) 来完成我们需要的操作。</p><h2 id="4、SPI应用">4、SPI应用</h2><p>要说 spi 的实际应用，大家最常见的应该就是日志框架<code>slf4j</code>了，它利用 spi 实现了插槽式接入其他具体的日志框架。说白了，<code>slf4j</code>本身就是个日志门面，并不提供具体的实现，需要绑定其他具体实现才能真正的引入日志功能。例如我们可使用<code>log4j2</code>作为具体的绑定器，只需要在 pom 中引入<code>slf4j-log4j12</code>，就可以使用具体功能。</p><p><img src="http://qnypic.shawncoding.top/course/202312131426807.png" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入项目后，点开它的 jar 包看一下具体结构：</p><p><img src="http://qnypic.shawncoding.top/course/202312131426808.png" alt></p><p>回头看一下 jar 包的<code>META-INF.services</code>里面，通过 spi 注入了<code>Reload4jServiceProvider</code>这个实现类，它实现了<code>SLF4JServiceProvider</code>这一接口，在它的初始化方法<code>initialize()</code>中，会完成初始化等工作，后续可以继续获取到<code>LoggerFactory</code>和<code>Logger</code>等具体日志对象</p><h1>三、SPI原理</h1><h2 id="1、ServiceLoader介绍">1、ServiceLoader介绍</h2><p><code>ServiceLoader</code> 是 JDK 提供的一个工具类， 位于<code>package java.util;</code>包下。JDK 官方注释：**一种加载服务实现的工具。**再往下看，我们发现这个类是一个 <code>final</code> 类型的，所以是不可被继承修改，同时它实现了 <code>Iterable</code> 接口。之所以实现了迭代器，是为了方便后续我们能够通过迭代的方式得到对应的服务实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLoader</span>&lt;<span class="title">S</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">S</span>&gt;</span>&#123; xxx...&#125;</span><br></pre></td></tr></table></figure><p>可以看到一个熟悉的常量定义：<code>private static final String PREFIX = &quot;META-INF/services/&quot;;</code>下面是 <code>load</code> 方法：可以发现 <code>load</code> 方法支持两种重载后的入参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">    ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        ClassLoader loader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServiceLoader&lt;&gt;(service, loader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ServiceLoader</span><span class="params">(Class&lt;S&gt; svc, ClassLoader cl)</span> </span>&#123;</span><br><span class="line">    service = Objects.requireNonNull(svc, <span class="string">"Service interface cannot be null"</span>);</span><br><span class="line">    loader = (cl == <span class="keyword">null</span>) ? ClassLoader.getSystemClassLoader() : cl;</span><br><span class="line">    acc = (System.getSecurityManager() != <span class="keyword">null</span>) ? AccessController.getContext() : <span class="keyword">null</span>;</span><br><span class="line">    reload();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    providers.clear();</span><br><span class="line">    lookupIterator = <span class="keyword">new</span> LazyIterator(service, loader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码的调用顺序，在 <code>reload()</code> 方法中是通过一个内部类 <code>LazyIterator</code> 实现的。<code>ServiceLoader</code> 实现了 <code>Iterable</code> 接口的方法后，具有了迭代的能力，在这个 <code>iterator</code> 方法被调用时，首先会在 <code>ServiceLoader</code> 的 <code>Provider</code> 缓存中进行查找，如果缓存中没有命中那么则在 <code>LazyIterator</code> 中进行查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;S&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;S&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, S&gt;&gt; knownProviders</span><br><span class="line">                = providers.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> lookupIterator.hasNext(); <span class="comment">// 调用 LazyIterator</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> S <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">                <span class="keyword">return</span> knownProviders.next().getValue();</span><br><span class="line">            <span class="keyword">return</span> lookupIterator.next(); <span class="comment">// 调用 LazyIterator</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>providers</code>就是一个缓存，在迭代器中如果先从这里面进行查找，如果里面有就继续往下找，没有了的话就用这个懒加载的<code>lookupIterator</code>查找。在调用 <code>LazyIterator</code> 时，看看它里面的<code>hasNext()</code>和<code>next()</code>两个方法是怎么实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (acc == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> hasNextService();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PrivilegedAction&lt;Boolean&gt; action = <span class="keyword">new</span> PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hasNextService();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasNextService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nextName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (configs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过PREFIX（META-INF/services/）和类名 获取对应的配置文件，得到具体的实现类</span></span><br><span class="line">            String fullName = PREFIX + service.getName();</span><br><span class="line">            <span class="keyword">if</span> (loader == <span class="keyword">null</span>)</span><br><span class="line">                configs = ClassLoader.getSystemResources(fullName);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                configs = loader.getResources(fullName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">            fail(service, <span class="string">"Error locating configuration files"</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((pending == <span class="keyword">null</span>) || !pending.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pending = parse(service, configs.nextElement());</span><br><span class="line">    &#125;</span><br><span class="line">    nextName = pending.next();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> S <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (acc == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nextService();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PrivilegedAction&lt;S&gt; action = <span class="keyword">new</span> PrivilegedAction&lt;S&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> S <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> nextService();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> S <span class="title">nextService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasNextService())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    String cn = nextName;</span><br><span class="line">    nextName = <span class="keyword">null</span>;</span><br><span class="line">    Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        c = Class.forName(cn, <span class="keyword">false</span>, loader);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException x) &#123;</span><br><span class="line">        fail(service,</span><br><span class="line">                <span class="string">"Provider "</span> + cn + <span class="string">" not found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!service.isAssignableFrom(c)) &#123;</span><br><span class="line">        fail(service,</span><br><span class="line">                <span class="string">"Provider "</span> + cn + <span class="string">" not a subtype"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        S p = service.cast(c.newInstance());</span><br><span class="line">        providers.put(cn, p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">        fail(service,</span><br><span class="line">                <span class="string">"Provider "</span> + cn + <span class="string">" could not be instantiated"</span>,</span><br><span class="line">                x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Error();          <span class="comment">// This cannot happen</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>acc</code>是一个安全管理器，在前面通过<code>System.getSecurityManager()</code>判断并赋值，debug 看一下这里都是<code>null</code>，所以直接看<code>hasNextService()</code>和<code>nextService()</code>方法就可以了。</p><p>在<code>hasNextService()</code>方法中，会取出接口取出实现类的类名放到<code>nextName</code>中：</p><p><img src="http://qnypic.shawncoding.top/course/202312131426809.png" alt></p><p>接下来，在<code>nextService()</code>方法中，则会先加载这个实现类，然后实例化对象，最终放入缓存中去。</p><p><img src="http://qnypic.shawncoding.top/course/202312131426810.png" alt></p><p>在迭代器的迭代过程中，会完成所有实现类的实例化，其实归根结底，还是基于 java 反射去实现的。</p><h2 id="2、自己实现一个-ServiceLoader">2、自己实现一个 ServiceLoader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceLoader</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应的接口 Class 模板</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应实现类的 可以有多个，用 List 进行封装</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;S&gt; providers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类加载器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露给外部使用的方法，通过调用这个方法可以开始加载自己定制的实现流程。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">MyServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyServiceLoader&lt;&gt;(service);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyServiceLoader</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">        <span class="keyword">this</span>.classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        doLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键方法，加载具体实现类的逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取所有 jar 包里面 META-INF/services 包下面的文件，这个文件名就是接口名，然后文件里面的内容就是具体的实现类的路径加全类名</span></span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader.getResources(<span class="string">"META-INF/services/"</span> + service.getName());</span><br><span class="line">            <span class="comment">// 挨个遍历取到的文件</span></span><br><span class="line">            <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                <span class="comment">// 取出当前的文件</span></span><br><span class="line">                URL url = urls.nextElement();</span><br><span class="line">                System.out.println(<span class="string">"File = "</span> + url.getPath());</span><br><span class="line">                <span class="comment">// 建立链接</span></span><br><span class="line">                URLConnection urlConnection = url.openConnection();</span><br><span class="line">                urlConnection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">                <span class="comment">// 获取文件输入流</span></span><br><span class="line">                InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line">                <span class="comment">// 从文件输入流获取缓存</span></span><br><span class="line">                BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">                <span class="comment">// 从文件内容里面得到实现类的全类名</span></span><br><span class="line">                String className = bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (className != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 通过反射拿到实现类的实例</span></span><br><span class="line">                    Class&lt;?&gt; clazz = Class.forName(className, <span class="keyword">false</span>, classLoader);</span><br><span class="line">                    <span class="comment">// 如果声明的接口跟这个具体的实现类是属于同一类型，（可以理解为Java的一种多态，接口跟实现类、父类和子类等等这种关系。）则构造实例</span></span><br><span class="line">                    <span class="keyword">if</span> (service.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        Constructor&lt;? extends S&gt; constructor = (Constructor&lt;? extends S&gt;) clazz.getConstructor();</span><br><span class="line">                        S instance = constructor.newInstance();</span><br><span class="line">                        <span class="comment">// 把当前构造的实例对象添加到 Provider的列表里面</span></span><br><span class="line">                        providers.add(instance);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 继续读取下一行的实现类，可以有多个实现类，只需要换行就可以了。</span></span><br><span class="line">                    className = bufferedReader.readLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"读取文件异常。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回spi接口对应的具体实现类列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;S&gt; <span class="title">getProviders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> providers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的流程就是：</p><ul><li>通过 URL 工具类从 jar 包的 <code>/META-INF/services</code> 目录下面找到对应的文件</li><li>读取这个文件的名称找到对应的 spi 接口</li><li>通过 <code>InputStream</code> 流将文件里面的具体实现类的全类名读取出来</li><li>根据获取到的全类名，先判断跟 spi 接口是否为同一类型，如果是的，那么就通过反射的机制构造对应的实例对象</li><li>将构造出来的实例对象添加到 <code>Providers</code> 的列表中</li></ul><h1>四、总结</h1><p>其实不难发现，SPI 机制的具体实现本质上还是通过反射完成的。即：<strong>我们按照规定将要暴露对外使用的具体实现类在 <strong><strong><code>META-INF/services/</code></strong></strong> 文件下声明。</strong></p><p>另外，SPI 机制在很多框架中都有应用：Spring 框架的基本原理也是类似的方式。还有 Dubbo 框架提供同样的 SPI 扩展机制，只不过 Dubbo 和 spring 框架中的 SPI 机制具体实现方式跟咱们今天学得这个有些细微的区别，不过整体的原理都是一致的</p><p>通过 SPI 机制能够大大地提高接口设计的灵活性，但是 SPI 机制也存在一些缺点，比如：</p><ul><li>遍历加载所有的实现类，这样效率还是相对较低的；</li><li>当多个 <code>ServiceLoader</code> 同时 <code>load</code> 时，会有并发问题。</li></ul><hr><p>参考文章</p><p><a href="https://mp.weixin.qq.com/s/eaRHMXCu7ku-SrOLMOdfeg" target="_blank" rel="noopener" title="https://mp.weixin.qq.com/s/eaRHMXCu7ku-SrOLMOdfeg">https://mp.weixin.qq.com/s/eaRHMXCu7ku-SrOLMOdfeg</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;Java之SPI机制详解&lt;/h1&gt;
&lt;h1&gt;一、SPI概述&lt;/h1&gt;
&lt;h2 id=&quot;1、概述&quot;&gt;1、概述&lt;/h2&gt;
&lt;p&gt;SPI 即 &lt;code&gt;Service Provider Interface&lt;/code&gt; ，字面意思就是：“服务提供者的接口”，专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口。SPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。例如SpringBoot 的自动装配就是基于spring 的 SPI 扩展机制和EnableAutoConfiguration实现的&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://blog.shawncoding.top/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用应用部署</title>
    <link href="https://blog.shawncoding.top/posts/545cd0ce.html"/>
    <id>https://blog.shawncoding.top/posts/545cd0ce.html</id>
    <published>2023-12-13T08:38:01.000Z</published>
    <updated>2024-01-24T12:09:58.527Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker常用应用部署</h1><h1>一、Ubuntu系统Docker快速安装</h1><blockquote><p>Docker官网安装文档：<a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener" title="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文本处理的流编辑器 -i直接修改读取的文件内容，而不是输出到终端</span></span><br><span class="line"><span class="comment"># sed -i 's/原字符串/新字符串/' /home/1.txt</span></span><br><span class="line"><span class="comment"># 下面这个是修改ubuntu的源</span></span><br><span class="line">sudo sed -i <span class="string">'s/cn.archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install curl</span><br><span class="line"><span class="comment"># 抓取docker安装脚本到一个文件中</span></span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="comment"># 执行脚本，通过脚本下载 推荐设置阿里云镜像下载加速 默认管理员登陆不加sudo；有警告就忽略</span></span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"></span><br><span class="line"><span class="comment">#==========解决每次输入sudo问题===========</span></span><br><span class="line"><span class="comment"># 将当前用户加入到docker组，这样每次使用就不需要sudo了</span></span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line"><span class="comment"># 更新用户组,这样才能生效</span></span><br><span class="line">newgrp - docker</span><br><span class="line">sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#============加速器================</span></span><br><span class="line"><span class="comment"># 加速器网址：https://www.daocloud.io/mirror#accelerator-doc，可能有时会失效</span></span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line"><span class="comment"># 查看配置文件，自己添加加速器</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># &#123;"registry-mirrors": ["http://hub-mirror.c.163.com"]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面地址任选一种就好</span></span><br><span class="line"><span class="comment">#腾讯云的镜像地址</span></span><br><span class="line">https://mirror.ccs.tencentyun.com</span><br><span class="line"><span class="comment">#网易的镜像地址</span></span><br><span class="line">http://hub-mirror.c.163.com</span><br><span class="line"><span class="comment">#下面的地址是假的，需要自己去阿里云 的容器镜像服务-》镜像加速器去复制自己的镜像地址</span></span><br><span class="line">https://xxxx.mirror.aliyuncs.com</span><br><span class="line"><span class="comment">#daocloud发布的镜像地址</span></span><br><span class="line">http://f1361db2.m.daocloud.io</span><br><span class="line"><span class="comment"># 最后要重启</span></span><br><span class="line">sudo systemctl restart docker.service</span><br><span class="line"><span class="comment"># 安装ssh</span></span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#===========docker-compose=============</span></span><br><span class="line"><span class="comment"># 在官网下载符合条件的：https://github.com/docker/compose/releases</span></span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># wget也可以使用来下载</span></span><br><span class="line">mv /usr/<span class="built_in">local</span>/bin/docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 记得添加权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放在bin目录下，在其他位置可以直接使用</span></span><br><span class="line">sudo mv /usr/<span class="built_in">local</span>/bin/docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">sudo install docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">docker-compose ps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================</span></span><br><span class="line"><span class="comment"># 2023/6/20可用源</span></span><br><span class="line"><span class="comment"># 编辑 Docker 配置文件</span></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://dockerproxy.com"</span>,</span><br><span class="line">        <span class="string">"https://hub-mirror.c.163.com"</span>,</span><br><span class="line">        <span class="string">"https://mirror.baidubce.com"</span>,</span><br><span class="line">        <span class="string">"https://ccr.ccs.tencentyun.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 方法一，采用 systemctl 来重启，推荐</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="comment"># 方法二，采用 service 来重启</span></span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文本处理的流编辑器 -i直接修改读取的文件内容，而不是输出到终端</span></span><br><span class="line"><span class="comment"># sed -i 's/原字符串/新字符串/' /home/1.txt</span></span><br><span class="line"><span class="comment"># 下面这个是修改ubuntu的源</span></span><br><span class="line">sudo sed -i <span class="string">'s/cn.archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install curl</span><br><span class="line"><span class="comment"># 抓取docker安装脚本到一个文件中</span></span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="comment"># 执行脚本，通过脚本下载 推荐设置阿里云镜像下载加速 默认管理员登陆不加sudo；有警告就忽略</span></span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"></span><br><span class="line"><span class="comment">#==========解决每次输入sudo问题===========</span></span><br><span class="line"><span class="comment"># 将当前用户加入到docker组，这样每次使用就不需要sudo了</span></span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line"><span class="comment"># 更新用户组,这样才能生效</span></span><br><span class="line">newgrp - docker</span><br><span class="line">sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#============加速器================</span></span><br><span class="line"><span class="comment"># 加速器网址：https://www.daocloud.io/mirror#accelerator-doc，可能有时会失效</span></span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line"><span class="comment"># 查看配置文件，自己添加加速器</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># &#123;"registry-mirrors": ["http://hub-mirror.c.163.com"]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面地址任选一种就好</span></span><br><span class="line"><span class="comment">#腾讯云的镜像地址</span></span><br><span class="line">https://mirror.ccs.tencentyun.com</span><br><span class="line"><span class="comment">#网易的镜像地址</span></span><br><span class="line">http://hub-mirror.c.163.com</span><br><span class="line"><span class="comment">#下面的地址是假的，需要自己去阿里云 的容器镜像服务-》镜像加速器去复制自己的镜像地址</span></span><br><span class="line">https://xxxx.mirror.aliyuncs.com</span><br><span class="line"><span class="comment">#daocloud发布的镜像地址</span></span><br><span class="line">http://f1361db2.m.daocloud.io</span><br><span class="line"><span class="comment"># 最后要重启</span></span><br><span class="line">sudo systemctl restart docker.service</span><br><span class="line"><span class="comment"># 安装ssh</span></span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#===========docker-compose=============</span></span><br><span class="line"><span class="comment"># 在官网下载符合条件的：https://github.com/docker/compose/releases</span></span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># wget也可以使用来下载</span></span><br><span class="line">mv /usr/<span class="built_in">local</span>/bin/docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 记得添加权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放在bin目录下，在其他位置可以直接使用</span></span><br><span class="line">sudo mv /usr/<span class="built_in">local</span>/bin/docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">sudo install docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">docker-compose ps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================</span></span><br><span class="line"><span class="comment"># 2023/6/20可用源</span></span><br><span class="line"><span class="comment"># 编辑 Docker 配置文件</span></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://dockerproxy.com"</span>,</span><br><span class="line">        <span class="string">"https://hub-mirror.c.163.com"</span>,</span><br><span class="line">        <span class="string">"https://mirror.baidubce.com"</span>,</span><br><span class="line">        <span class="string">"https://ccr.ccs.tencentyun.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 方法一，采用 systemctl 来重启，推荐</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="comment"># 方法二，采用 service 来重启</span></span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><h1>二、Docker安装基本应用</h1><h2 id="1、Tomcat安装">1、Tomcat安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定时区和中文乱码</span></span><br><span class="line">docker run -d -p 8080:8080 \</span><br><span class="line">--name tomcat \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /home/docker/tomcat/logs/:/usr/<span class="built_in">local</span>/tomcat/logs/ \</span><br><span class="line"><span class="comment"># 这里需要自行创建好webapps内容，或者进入容器将webapps.list改成webapps</span></span><br><span class="line">-v /home/docker/tomcat/webapps/:/usr/<span class="built_in">local</span>/tomcat/webapps/ \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-e TZ=<span class="string">"Asia/Shanghai"</span> \</span><br><span class="line">-e LANG=<span class="string">"C.UTF-8"</span> \</span><br><span class="line">tomcat:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==========================</span></span><br><span class="line">docker run --name tomcat -p 8080:8080 \</span><br><span class="line">-v tomcatconf:/usr/<span class="built_in">local</span>/tomcat/conf \</span><br><span class="line">-v tomcatwebapp:/usr/<span class="built_in">local</span>/tomcat/webapps \</span><br><span class="line">-d tomcat:jdk8-openjdk-slim-buster</span><br></pre></td></tr></table></figure><p>docker-compose部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">"Asia/Shanghai"</span></span><br><span class="line">      <span class="attr">LANG:</span> <span class="string">"C.UTF-8"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/tomcat/conf/server.xml:/usr/local/tomcat/server.xml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/tomcat/webapps:/usr/local/tomcat/webapps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/tomcat/logs:/usr/local/tomcat/logs</span></span><br></pre></td></tr></table></figure><h2 id="2、Nginx安装">2、Nginx安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://www.digitalocean.com/community/tools/nginx</span></span><br><span class="line"><span class="comment"># 注意 外部的/nginx/conf下面的内容必须存在，否则挂载会覆盖</span></span><br><span class="line">docker run -p 80:80 -p 443:443 --name nginx \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/nginx/logs:/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/nginx/conf/:/etc/nginx \</span><br><span class="line">-d nginx:1.20.1</span><br></pre></td></tr></table></figure><p>docker-compose部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/nginx/log/:/var/log/nginx</span></span><br><span class="line">      <span class="comment"># 注意：如下挂载都是覆盖</span></span><br><span class="line">      <span class="comment">#- ./conf/nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="comment">#- ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">      <span class="comment">#- ./conf/nginx/html:/usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><h2 id="3、Mysql安装">3、Mysql安装</h2><h3 id="3-1-单机版安装">3.1 单机版安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.7版本</span></span><br><span class="line">docker run -p 3306:3306 --name mysql57 \</span><br><span class="line">-v /app/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /app/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /app/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:5.7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#8.x版本,引入了 secure-file-priv 机制，磁盘挂载将没有权限读写data数据，所以需要将权限透传，或者</span></span><br><span class="line">chmod -R 777 /app/mysql/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># --privileged 特权容器，容器内使用真正的root用户</span></span><br><span class="line">docker run -p 3306:3306 --name mysql8 \</span><br><span class="line">-v /app/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /app/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /app/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--privileged \ </span><br><span class="line">-d mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对配置文件，新建 my.cnf (/usr/local/mysql/conf)，否则中文乱码</span></span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8 </span><br><span class="line">[mysqld] </span><br><span class="line">collation_server = utf8_general_ci </span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure><p>docker-compose部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version :</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="comment"># 容器名</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql5</span></span><br><span class="line">    <span class="comment"># 重启策略</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3306:3306"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">       <span class="comment"># 挂载配置文件</span></span><br><span class="line">       <span class="comment">#  - ./mysql/db/:/docker-entrypoint-initdb.d</span></span><br><span class="line">      <span class="comment"># 挂载配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/conf:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="comment"># 挂载日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/logs:/logs</span></span><br><span class="line">      <span class="comment"># 挂载数据</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">[</span></span><br><span class="line">          <span class="string">'mysqld'</span><span class="string">,</span></span><br><span class="line">          <span class="string">'--innodb-buffer-pool-size=80M'</span><span class="string">,</span></span><br><span class="line">          <span class="string">'--character-set-server=utf8mb4'</span><span class="string">,</span></span><br><span class="line">          <span class="string">'--collation-server=utf8mb4_unicode_ci'</span><span class="string">,</span></span><br><span class="line">          <span class="string">'--default-time-zone=+8:00'</span><span class="string">,</span></span><br><span class="line">          <span class="string">'--lower-case-table-names=1'</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># root 密码</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="comment">#======================mysql8.0=================</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql8</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># 注意8.0以后的问题</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 挂载配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/conf:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="comment"># 挂载日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/logs:/logs</span></span><br><span class="line">      <span class="comment"># 挂载数据</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">      <span class="string">--explicit_defaults_for_timestamp=true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">LANG=C.UTF-8</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">33106</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"bridge"</span></span><br></pre></td></tr></table></figure><h3 id="3-2-主从复制">3.2 主从复制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、新建主服务器容器实例3307</span></span><br><span class="line">docker run -p 3307:3306 --name mysql-master \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/mysql-master/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/mysql-master/data:/var/lib/mysql \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/mysql-master/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、进入/usr/local/docker/mysql-master/conf目录下新建 my.cnf</span></span><br><span class="line"><span class="comment">#==================================</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">## 设置server_id，同一局域网中需要唯一 </span></span><br><span class="line">server_id=101</span><br><span class="line"><span class="comment">## 指定不需要同步的数据库名称 </span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="comment">## 开启二进制日志功能 </span></span><br><span class="line"><span class="built_in">log</span>-bin=mall-mysql-bin </span><br><span class="line"><span class="comment">## 设置二进制日志使用内存大小（事务） </span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="comment">## 设置使用的二进制日志格式（mixed,statement,row） </span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"><span class="comment">## 二进制日志过期清理时间。默认值为0，表示不自动清理。 </span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。 </span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致 </span></span><br><span class="line">slave_skip_errors=1062</span><br><span class="line"><span class="comment">#====================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、修改完配置后重启master实例</span></span><br><span class="line">docker restart mysql-master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、进入mysql-master容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql-master /bin/bash</span><br><span class="line">mysql -uroot -proot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、master容器实例内创建数据同步用户</span></span><br><span class="line">CREATE USER <span class="string">'slave'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">'slave'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、新建从服务器容器实例3308</span></span><br><span class="line">docker run -p 3308:3306 --name mysql-slave \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/mysql-slave/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/mysql-slave/data:/var/lib/mysql \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/mysql-slave/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、进入/usr/local/docker/mysql-slave/conf目录下新建my.cnf</span></span><br><span class="line"><span class="comment"># ====================================================</span></span><br><span class="line">[mysqld] </span><br><span class="line"><span class="comment">## 设置server_id，同一局域网中需要唯一 </span></span><br><span class="line">server_id=102</span><br><span class="line"><span class="comment">## 指定不需要同步的数据库名称 </span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="comment">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用 </span></span><br><span class="line"><span class="built_in">log</span>-bin=mall-mysql-slave1-bin</span><br><span class="line"><span class="comment">## 设置二进制日志使用内存大小（事务） </span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="comment">## 设置使用的二进制日志格式（mixed,statement,row） </span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"><span class="comment">## 二进制日志过期清理时间。默认值为0，表示不自动清理。 </span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。 </span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致 </span></span><br><span class="line">slave_skip_errors=1062</span><br><span class="line"><span class="comment">## relay_log配置中继日志 </span></span><br><span class="line">relay_log=mall-mysql-relay-bin</span><br><span class="line"><span class="comment">## log_slave_updates表示slave将复制事件写进自己的二进制日志 </span></span><br><span class="line">log_slave_updates=1</span><br><span class="line"><span class="comment">## slave设置为只读（具有super权限的用户除外） </span></span><br><span class="line">read_only=1</span><br><span class="line"><span class="comment"># ====================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、修改完配置后重启slave实例</span></span><br><span class="line">docker restart mysql-slave</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9、在主数据库中查看主从同步状态</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql-master /bin/bash</span><br><span class="line">mysql -uroot -proot</span><br><span class="line">show master status;</span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File                  | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mall-mysql-bin.000001 |      617 |              | mysql            |                   |</span><br><span class="line">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10、在从数据库中配置主从复制</span></span><br><span class="line">change master to master_host=<span class="string">'宿主机ip'</span>, master_user=<span class="string">'slave'</span>, master_password=<span class="string">'123456'</span>, master_port=3307, master_log_file=<span class="string">'mall-mysql-bin.000001'</span>, master_log_pos=617, master_connect_retry=30; </span><br><span class="line">mysql&gt; change master to master_host=<span class="string">'106.14.76.55'</span>, master_user=<span class="string">'slave'</span>, master_password=<span class="string">'123456'</span>, master_port=3307, master_log_file=<span class="string">'mall-mysql-bin.000001'</span>, master_log_pos=617, master_connect_retry=30;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.03 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># master_host：主数据库的IP地址； </span></span><br><span class="line"><span class="comment"># master_port：主数据库的运行端口； </span></span><br><span class="line"><span class="comment"># master_user：在主数据库创建的用于同步数据的用户账号； </span></span><br><span class="line"><span class="comment"># master_password：在主数据库创建的用于同步数据的用户密码； </span></span><br><span class="line"><span class="comment"># master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数； </span></span><br><span class="line"><span class="comment"># master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数； </span></span><br><span class="line"><span class="comment"># master_connect_retry：连接失败重试的时间间隔，单位为秒。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11、在从数据库中查看主从同步状态</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql-slave /bin/bash</span><br><span class="line">mysql -uroot -proot</span><br><span class="line">show slave status \G;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12、在从数据库中开启主从同步看到Slave_IO_Running和Slave_SQL_Running启动就行</span></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><h2 id="4、Redis安装">4、Redis安装</h2><h3 id="4-1-单机版安装">4.1 单机版安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提前准备好redis.conf文件，创建好相应的文件夹。如：</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># 开启redis数据持久化,可选</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="comment"># 开启redis验证,可选 </span></span><br><span class="line">requirepass 123</span><br><span class="line"><span class="comment">#注释掉,允许redis外地连接 </span></span><br><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br><span class="line"><span class="comment">#将daemonize yes注释起来或者 daemonize no设置，因为该配置和docker run中-d参数冲突，会导致容器一直启动失败 </span></span><br><span class="line">daemonize no </span><br><span class="line"></span><br><span class="line"><span class="comment">#更多配置参照 https://raw.githubusercontent.com/redis/redis/6.0/redis.conf</span></span><br><span class="line">docker run  -p 6379:6379 --name redis \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/redis/data:/data -d redis:6.0.8 \</span><br><span class="line">redis-server /etc/redis/redis.conf  --appendonly yes</span><br></pre></td></tr></table></figure><p>docker-compose部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../redis/data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../redis/conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../redis/logs:/logs</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">["redis-server","/usr/local/etc/redis/redis.conf"]</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ="Asia/Shanghai"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h3 id="4-2-集群安装">4.2 集群安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># port：节点端口；</span></span><br><span class="line"><span class="comment"># requirepass：设置密码，访问时需要验证</span></span><br><span class="line"><span class="comment"># protected-mode：保护模式，默认值 yes，即开启。开启保护模式以后，需配置 bind ip 或者设置访问密码；关闭保护模式，外部网络可以直接访问；</span></span><br><span class="line"><span class="comment"># daemonize：是否以守护线程的方式启动（后台启动），默认 no；</span></span><br><span class="line"><span class="comment"># appendonly：是否开启 AOF 持久化模式，默认 no；</span></span><br><span class="line"><span class="comment"># cluster-enabled：是否开启集群模式，默认 no；</span></span><br><span class="line"><span class="comment"># cluster-config-file：集群节点信息文件；</span></span><br><span class="line"><span class="comment"># cluster-node-timeout：集群节点连接超时时间；</span></span><br><span class="line"><span class="comment"># cluster-announce-ip：集群节点 IP</span></span><br><span class="line"><span class="comment"># 注意： 如果你想要你的redis集群可以供外网访问，这里直接填 服务器的IP 地址即可;如若为了安全，只是在服务器内部进行访问，这里还需要做一些修改。</span></span><br><span class="line"><span class="comment"># cluster-announce-port：集群节点映射端口；</span></span><br><span class="line"><span class="comment"># cluster-announce-bus-port：集群节点总线端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#shell脚本循环生成配置文件</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6);\</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">mkdir -p /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf</span><br><span class="line">touch /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1<span class="variable">$&#123;port&#125;</span></span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先创建自定义网络</span></span><br><span class="line">docker network create --driver bridge --subnet 172.38.0.0/24 --gateway 172.38.0.1 redis</span><br><span class="line"><span class="comment">#分别启动docker容器，shell脚本，注意配置文件的生成</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 6);\</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">docker run -p 637<span class="variable">$&#123;i&#125;</span>:6379 -p 1637<span class="variable">$&#123;i&#125;</span>:16379 \</span><br><span class="line">--name redis-<span class="variable">$&#123;i&#125;</span> --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /mydata/redis/node-<span class="variable">$&#123;i&#125;</span>/data:/data \</span><br><span class="line">-v /mydata/redis/node-<span class="variable">$&#123;i&#125;</span>/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1<span class="variable">$&#123;i&#125;</span> redis \</span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机进入一个容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis-1 /bin/bash</span><br><span class="line"><span class="comment"># 生成集群，--cluster-replicas 1 表示为每个master创建一个slave节点 </span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1   </span><br><span class="line"><span class="comment"># 进入客户端</span></span><br><span class="line">redis-cli -p 6379</span><br><span class="line"><span class="comment"># 查看集群结点状况</span></span><br><span class="line">cluster nodes</span><br><span class="line"><span class="comment"># 查看集群信息</span></span><br><span class="line">cluster info</span><br><span class="line"><span class="comment"># 需要进入集群模式，否则会报错</span></span><br><span class="line">redis-cli -p 6379 -c</span><br><span class="line"><span class="comment"># 集群会自动计算哈希槽存储位置，若主节点宕机，从节点会成为主节点</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a b</span><br><span class="line">-&gt; Redirected to slot [15495] located at 172.38.0.13:6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="4-3-主从扩容">4.3 主从扩容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、新建6377、6378两个节点+新建后启动+查看是否8节点,注意配置文件的创建</span></span><br><span class="line">docker run -p 6377:6379 -p 16377:16379 --name redis-7 --privileged=<span class="literal">true</span> -v /mydata/redis/node-7/data:/data -v /mydata/redis/node-7/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.17 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6378:6379 -p 16378:16379 --name redis-8 --privileged=<span class="literal">true</span> -v /mydata/redis/node-8/data:/data -v /mydata/redis/node-8/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.18 redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、进入6377容器实例内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis-7 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、将新增的6377节点(空槽号)作为master节点加入原集群</span></span><br><span class="line"><span class="comment"># redis-cli --cluster  add-node  自己实际IP地址:6377  自己实际IP地址:6371 </span></span><br><span class="line"><span class="comment"># 6377 就是将要作为master新增节点 </span></span><br><span class="line"><span class="comment"># 6371 就是原来集群节点里面的领路人，相当于6377找到组织加入集群</span></span><br><span class="line"><span class="comment"># 这里我直接使用了内部网络</span></span><br><span class="line">redis-cli --cluster add-node 172.38.0.17:6379 172.38.0.11:6379 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、检查集群情况第1次</span></span><br><span class="line">redis-cli --cluster check  172.38.0.11:6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、重新分派槽号</span></span><br><span class="line">redis-cli --cluster reshard 172.38.0.11:6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为4台，16384/4=4096，每台分4分之一</span></span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4096</span><br><span class="line"><span class="comment"># 172.38.0.17:6379 的id</span></span><br><span class="line">What is the receiving node ID? 3a732104b11d3cf81d1128def9f0158fb5708ca7</span><br><span class="line"><span class="comment"># 输入 all</span></span><br><span class="line">Source node <span class="comment">#1: all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、检查集群情况第2次</span></span><br><span class="line">redis-cli --cluster check  172.38.0.11:6379</span><br><span class="line">172.38.0.11:6379 (9c109831...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class="line">172.38.0.12:6379 (0100361c...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class="line">172.38.0.13:6379 (348dc3b1...) -&gt; 0 keys | 4096 slots | 1 slaves.</span><br><span class="line">172.38.0.17:6379 (5d34f842...) -&gt; 0 keys | 4096 slots | 0 slaves.</span><br><span class="line">[OK] 0 keys <span class="keyword">in</span> 4 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span><br><span class="line">M: 9c109831a0afd33f7c13500caf39d3191a13e0b3 172.38.0.11:6379</span><br><span class="line">   slots:[1365-5460] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 0100361c6056686b671f84877af18ffd22b4c428 172.38.0.12:6379</span><br><span class="line">   slots:[6827-10922] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 348dc3b13714d0b07236c2ba6c5147f270b08800 172.38.0.13:6379</span><br><span class="line">   slots:[12288-16383] (4096 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 6fc86fc554f1f939564e6acc346da222a886ab6a 172.38.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 348dc3b13714d0b07236c2ba6c5147f270b08800</span><br><span class="line">S: 2a2fe251d41085ec7eb53e9bf4e4c749e5d9dbb9 172.38.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 9c109831a0afd33f7c13500caf39d3191a13e0b3</span><br><span class="line">M: 5d34f8422f8b68ea87bd2f8388c686fdbcfdc9a1 172.38.0.17:6379</span><br><span class="line">   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master</span><br><span class="line">S: 9068998c9b5cd5e4cca939738cc42a2954770b47 172.38.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 0100361c6056686b671f84877af18ffd22b4c428</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"></span><br><span class="line"><span class="comment">## 为什么172.38.0.17是3个新的区间，以前的还是连续？</span></span><br><span class="line"><span class="comment">## 重新分配成本太高，所以前3家各自匀出来一部分，从三个旧节点分别匀出1364个坑位给新节点172.38.0.17 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、为主节点172.38.0.17分配从节点172.38.0.18</span></span><br><span class="line"><span class="comment"># redis-cli  --cluster add-node  ip:新slave端口 ip:新master端口 --cluster-slave --cluster-master-id 新主机节点ID</span></span><br><span class="line">redis-cli --cluster add-node 172.38.0.18:6379 172.38.0.17:6379 --cluster-slave --cluster-master-id 3a732104b11d3cf81d1128def9f0158fb5708ca7 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、检查集群情况第3次</span></span><br><span class="line">redis-cli --cluster check 172.38.0.18:6379</span><br></pre></td></tr></table></figure><h3 id="4-4-主从缩容">4.4 主从缩容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、将172.38.0.17和172.38.0.18下线</span></span><br><span class="line"><span class="comment"># 2、检查集群情况 获得172.38.0.18的从节点ID</span></span><br><span class="line">redis-cli --cluster check 172.38.0.11:6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、将172.38.0.18从节点删除 从集群中将4号从节点172.38.0.18删除</span></span><br><span class="line"><span class="comment"># redis-cli --cluster  del-node  ip:从机端口 从机6388节点ID</span></span><br><span class="line">redis-cli --cluster del-node 172.38.0.18:6379 bdf8a5114bbad6d400aa8b1a5e3f29b174d6676e</span><br><span class="line"><span class="comment">## 检查一下发现只剩下7台机器了</span></span><br><span class="line">redis-cli --cluster check 172.38.0.11:6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、将172.38.0.17的槽号清空，重新分配，本例将清出来的槽号都给172.38.0.11</span></span><br><span class="line">redis-cli --cluster reshard 172.38.0.11:6379</span><br><span class="line"></span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)?4096</span><br><span class="line"><span class="comment"># 172.38.0.11的id</span></span><br><span class="line">What is the receiving node ID? edf165b5d01f1a1f276237517d391c86c32d9f93</span><br><span class="line"><span class="comment"># 172.38.0.17的id</span></span><br><span class="line">Source node <span class="comment">#1: 3a732104b11d3cf81d1128def9f0158fb5708ca7</span></span><br><span class="line">Source node <span class="comment">#2: done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、检查集群情况第二次</span></span><br><span class="line">redis-cli --cluster check 172.38.0.11:6379</span><br><span class="line"><span class="comment"># 4096个槽位都指给172.38.0.11，它变成了8192个槽位，相当于全部都给172.38.0.11了，不然要输入3次，一锅端 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、将172.38.0.17删除</span></span><br><span class="line"><span class="comment"># redis-cli --cluster del-node ip:端口 172.38.0.17节点ID</span></span><br><span class="line">redis-cli --cluster del-node 172.38.0.17:6379 3a732104b11d3cf81d1128def9f0158fb5708ca7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、检查集群情况第三次</span></span><br><span class="line">redis-cli --cluster check 172.38.0.11:6379</span><br></pre></td></tr></table></figure><h2 id="5、MongoDB安装">5、MongoDB安装</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:5.0.9</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span> <span class="comment">#时区</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../mongodb/data/db:/data/db</span>  <span class="comment">#数据</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../mongodb/log:/var/log/mongodb</span>  <span class="comment"># 挂载日志目录</span></span><br><span class="line">    <span class="comment">#  - ./config:/etc/mongo #配置目录</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mongo-express:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo-express:0.54</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo-express</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8079</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ME_CONFIG_MONGODB_ADMINUSERNAME:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">ME_CONFIG_MONGODB_ADMINPASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">ME_CONFIG_MONGODB_URL:</span> <span class="string">mongodb://root:root@mongo:27017/</span></span><br></pre></td></tr></table></figure><p>添加管理员</p><ul><li>数据库用户角色：read、readWrite;</li><li>数据库管理角色：dbAdmin、dbOwner、userAdmin；</li><li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</li><li>备份恢复角色：backup、restore；</li><li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li><li>超级用户角色：root</li><li>系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录并切换db到admin</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it mongo mongo admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录root用户,如果前面没有创建root用户可跳过此步</span></span><br><span class="line">&gt; db.auth(<span class="string">'root'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建所有数据库管理用户 admin/123456</span></span><br><span class="line">&gt; db.createUser(&#123;user:<span class="string">'admin'</span>,<span class="built_in">pwd</span>: <span class="string">'123456'</span>,roles:[&#123;role:<span class="string">"userAdminAnyDatabase"</span>, db:<span class="string">"admin"</span>&#125;, <span class="string">"readWriteAnyDatabase"</span>]&#125;);</span><br><span class="line"><span class="comment"># Successfully added user: &#123; ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用新用户登录，返回 0=失败 1=成功</span></span><br><span class="line">&gt; db.auth(<span class="string">'admin'</span>, <span class="string">'123456'</span>)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试库</span></span><br><span class="line">&gt; use testdb</span><br><span class="line"><span class="comment"># 插入测试数据</span></span><br><span class="line">&gt; db.testdb.insert(&#123;<span class="string">"name"</span>:<span class="string">"testdb"</span>&#125;)</span><br><span class="line"><span class="comment"># 创建用户并授权，dbOwner代表数据库所有者角色，拥有最高该数据库最高权限。</span></span><br><span class="line">&gt; db.createUser(&#123; user:<span class="string">"user_testdb"</span>, <span class="built_in">pwd</span>:<span class="string">"123456"</span>, roles: [&#123; role:<span class="string">"readWrite"</span>, db:<span class="string">"testdb"</span> &#125;] &#125;)</span><br><span class="line">&gt; </span><br><span class="line"><span class="comment"># 退出数据库</span></span><br><span class="line">&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="6、MiniO安装">6、MiniO安装</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio:RELEASE.2022-03-26T06-49-28Z</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">"minio"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9000:9000"</span> <span class="comment"># api 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9001:9001"</span> <span class="comment"># 控制台端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ACCESS_KEY:</span> <span class="string">root</span>    <span class="comment">#管理后台用户名</span></span><br><span class="line">      <span class="attr">MINIO_SECRET_KEY:</span> <span class="string">rootroot</span> <span class="comment">#管理后台密码，最小8个字符</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../minio/data:/data</span>               <span class="comment">#映射当前目录下的data目录至容器内/data目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../minio/config:/root/.minio/</span>     <span class="comment">#映射配置目录</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">--console-address</span> <span class="string">':9001'</span> <span class="string">/data</span>  <span class="comment">#指定容器中的目录 /data</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">"50M"</span> <span class="comment"># 最大文件上传限制</span></span><br><span class="line">        <span class="attr">max-file:</span> <span class="string">"10"</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">json-file</span></span><br></pre></td></tr></table></figure><h2 id="7、Nacos安装">7、Nacos安装</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外置数据库</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:$&#123;NACOS_VERSION&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos-standalone-mysql</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../nacos/nacos-standlone-mysql.env</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../nacos/standalone-logs/:/home/nacos/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8848:8848"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9848:9848"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9555:9555"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>设置配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同级目录下的.env</span></span><br><span class="line">NACOS_VERSION=v2.0.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># ../nacos/nacos-standlone-mysql.env</span></span><br><span class="line">PREFER_HOST_MODE=hostname</span><br><span class="line">MODE=standalone</span><br><span class="line">SPRING_DATASOURCE_PLATFORM=mysql</span><br><span class="line">MYSQL_SERVICE_HOST=192.168.31.28</span><br><span class="line">MYSQL_SERVICE_DB_NAME=nacos</span><br><span class="line">MYSQL_SERVICE_PORT=3306</span><br><span class="line">MYSQL_SERVICE_USER=root</span><br><span class="line">MYSQL_SERVICE_PASSWORD=root</span><br><span class="line">MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="8、其他常用软件">8、其他常用软件</h2><p><a href="https://blog.xueqimiao.com/docker/cf2853/#_1%E3%80%81%E5%AE%89%E8%A3%85nginx" target="_blank" rel="noopener" title="Docker安装基本应用">Docker安装基本应用</a></p><p><a href="https://juejin.cn/post/7096276025180422157#heading-12" target="_blank" rel="noopener" title="最全的Docker-compose应用部署">最全的Docker-compose应用部署</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;Docker常用应用部署&lt;/h1&gt;
&lt;h1&gt;一、Ubuntu系统Docker快速安装&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker官网安装文档：&lt;a href=&quot;https://docs.docker.com/engine/install/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://docs.docker.com/engine/install/ubuntu/&quot;&gt;https://docs.docker.com/engine/install/ubuntu/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="云原生" scheme="https://blog.shawncoding.top/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="docker" scheme="https://blog.shawncoding.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>局域网内网穿透技术</title>
    <link href="https://blog.shawncoding.top/posts/17947ff7.html"/>
    <id>https://blog.shawncoding.top/posts/17947ff7.html</id>
    <published>2023-06-28T14:20:36.000Z</published>
    <updated>2023-06-28T14:27:09.216Z</updated>
    
    <content type="html"><![CDATA[<h1>一、内网穿透概述</h1><h2 id="1、传统内网穿透介绍">1、传统内网穿透介绍</h2><p>传统内网穿透的方式为：内网设备&lt;——&gt;中转服务器&lt;———&gt;网络设备（手机、电脑），例如frp，nps，可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124675640" target="_blank" rel="noopener" title="内网穿透工具">内网穿透工具</a>；但是这种方法弊端也很明显</p><ul><li>中转服务器需要一定的费用进行支撑(带公网的云服务器)，如果是外网的服务器还可能存在被墙的风险</li><li>中转服务器直接决定了中转的&quot;速度&quot;，而这个&quot;速度&quot;越快其对应的服务器带宽就越大，通常来说价格就越高</li><li>需要一定的知识储备来搭建内网穿透的服务端，而且只能转发某个特定的端口</li></ul><a id="more"></a><h2 id="2、ZeroTier和Tailscale">2、ZeroTier和Tailscale</h2><blockquote><p>关于打洞的知识可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/128846476" target="_blank" rel="noopener" title="NAT网络与内网穿透详解">NAT网络与内网穿透详解</a></p></blockquote><p><img src="http://qnypic.shawncoding.top/blog/202305301831275.png" alt></p><p>一般来说会优先进行打洞，打洞的时候连接：内网设备&lt;——&gt;移动、PC设备（手机、电脑），通常情况下是端到端的传输，如果网络环境差或者无法打洞也会借助中转服务器进行传输数据(自带的中间服务器在国外，最好自己部署一个自己的)。</p><p>加入到一个局域网后，能够穿透转发所有端口，正常情况下不依赖服务器进行中转传输文件，端到端连接，理论可以达到满带宽，同时也可以进行流量转发，实现一台机器加入网络，实现整个局域网的设备访问</p><h1>二、ZeroTier</h1><blockquote><p>官网地址：<a href="https://www.zerotier.com/" target="_blank" rel="noopener" title="https://www.zerotier.com/">https://www.zerotier.com/</a></p></blockquote><h2 id="1、概述">1、概述</h2><h3 id="1-1-介绍">1.1 介绍</h3><p>zerotier采用VLAN(虚拟局域网)技术将不同设备连接到一个“虚拟的局域网”中，从而让这些设备随时随地都可以互相访问，相比于<a href="https://blog.csdn.net/lemon_TT/article/details/124675640" target="_blank" rel="noopener" title="frp等其他内网穿透">frp等其他内网穿透</a>来说，组建虚拟局域网更安全更便捷，每台服务器上只需要安装对应的客户端，连接到同一个网络，就可以实现 IP 互相访问。在此之上，还有自定义 DNS 服务器的功能，将通过 IP 这个步骤转换为通过域名进行访问，相当实用，甚至可以在局域网的一台主机搭建，实现整个局域网的访问</p><p>ZeroTier所有的设备都是客户端，连接方式是点对点。在路由器下面的话是用 uPnP 的方式进行转发实现客户端到客户端的直接连接。如果 uPnP 没有开启，会通过传统的服务器转发的方式进行连接。</p><h3 id="1-2-相关概念">1.2 相关概念</h3><ul><li><strong>Earth</strong>。根据其介绍，将地球上的所有设备连起来。那这里的 Earth 指的就是整体的一个服务</li><li><strong>Network</strong>。每一个 Network 包含的所有设备都在同一个网络里。每个网络有一个 Network ID。各客户端通过这个 ID 连接到此网络。当然，一个账号是可以创建多个网络的。网络氛围 Public 和Private。一般我们自己组网是要用 Private，需要在页面授权设备才可以进行访问。<ul><li><strong>Planet</strong>。官方提供的服务器节点。各客户端都是通过这些服务来互相寻址的。相当于 zookeeper 的不同节点</li><li><strong>Moon</strong>。自定义的 Planet。由于 Zerotier 没有国内节点，在两个设备刚开始互连的时候有可能需要通过国外的节点寻址（不过我没发现有什么慢的）导致创建连接的速度偏慢。在自己的网络里搭建 Moon 可以使连接提速。</li><li><strong>Leaf</strong>。客户端。就是连接到网络上的每一个设备。其实经过测试，Moon 也是客户端的一种。这里特指没有额外功能，单纯用于连接的客户端</li></ul></li></ul><h2 id="2、ZeroTier简单使用">2、ZeroTier简单使用</h2><p>首先登陆官网进行账号注册：<a href="https://www.zerotier.com/" target="_blank" rel="noopener" title="https://www.zerotier.com/">https://www.zerotier.com/</a>，完成后点击创建好的网络，进入设置界面进行设置，创建网络，<strong>记住NETWORK ID，<strong>进入后</strong>选择PRIVATE网络</strong>(public加入不需要授权，不安全)，之后选择自己想要的网段，其他保持默认即可</p><p><img src="http://qnypic.shawncoding.top/blog/202305301831276.png" alt></p><p>然后根据不同平台下载客户端：<a href="http://zerotier.com/download/" target="_blank" rel="noopener" title="zerotier.com/download/">zerotier.com/download/</a>，举例linux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://install.zerotier.com | sudo bash</span><br><span class="line"><span class="comment"># 安装完成后可以使用 systemctl 命令来控制服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> zerotier-one.service</span><br><span class="line">sudo systemctl start zerotier-one.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点列表</span></span><br><span class="line">sudo zerotier-cli listpeers</span><br><span class="line"><span class="comment"># 查看安装的zerotier版本</span></span><br><span class="line">sudo zerotier-cli status</span><br><span class="line"><span class="comment"># 加入一个network</span></span><br><span class="line">sudo zerotier-cli join 17d7094***********（填写自己的 networkid）</span><br><span class="line"><span class="comment"># 退出一个network</span></span><br><span class="line">sudo zerotier-cli leave 17d709************（填写自己的 networkid）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看监听的列表</span></span><br><span class="line">sudo zerotier-cli peers</span><br><span class="line">sudo zerotier-cli listpeers</span><br><span class="line"><span class="comment"># 列出加入的网络信息</span></span><br><span class="line">sudo zerotier-cli listnetworks</span><br><span class="line"><span class="comment"># 卸载已安装版本</span></span><br><span class="line"><span class="comment"># Debian/Ubuntu 发行版卸载方法</span></span><br><span class="line">sudo dpkg -P zerotier-one</span><br><span class="line">sudo rm -rf /var/lib/zerotier-one/</span><br><span class="line"><span class="comment"># Redhat/CentOS 发行版卸载方法</span></span><br><span class="line">sudo rpm -e zerotier-one</span><br><span class="line">sudo rm -rf /var/lib/zerotier-one/</span><br></pre></td></tr></table></figure><p>开始授权，可以选择设置按钮自行设置设备的ip，默认就是系统随机分配</p><p><img src="http://qnypic.shawncoding.top/blog/202305301831278.png" alt></p><p>windows类似，加入网络授权后，即可访问加入这个局域网中的所有设备了</p><h2 id="3、Moon搭建">3、Moon搭建</h2><h3 id="3-1-介绍">3.1 介绍</h3><blockquote><p>官方手册部署 <a href="https://www.zerotier.com/manual.shtml#4_4" target="_blank" rel="noopener" title="Moon">Moon</a></p></blockquote><p>Moon 节点可以是具有固定 IP 的公网设备，也可以是具有物理 IP 的内网设备. 如果使用内网设备，依然需要借助官方根服务器作为中间链路. 因此，这里我们在云服务器上搭建 Moon 服务，在机器 C 上部署 ZeroTier Moon 首先需要安装 ZeroTier One 将其部署为为 ZeroTier Node(参考前一节)；当然如果打洞不成功也需要走moon流量</p><h3 id="3-2-部署Moon服务">3.2 部署Moon服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 root 账户</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="comment"># 进入 ZeroTier HOME 目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/zerotier-one/</span><br><span class="line"><span class="comment"># 获取 moon.json 文件</span></span><br><span class="line">zerotier-idtool initmoon identity.public &gt;&gt;moon.json</span><br><span class="line"><span class="comment"># 在 moon.json 文件中添加公网 IP(s)</span></span><br><span class="line"><span class="comment"># moon.json 文件中的 "id": "deadbeef00" 就是公网机器 的 ZeroTier Node ID</span></span><br><span class="line"><span class="comment"># 修改 “stableEndpoints” 为机器 的公网的 ip,然后注意端口的开放，这里多个ip也可以填写，包括ipv6</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"id"</span>: <span class="string">"7818fa6036"</span>,</span><br><span class="line"> <span class="string">"objtype"</span>: <span class="string">"world"</span>,</span><br><span class="line"> <span class="string">"roots"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">"identity"</span>: <span class="string">"7818fa6036:0:90a5291289a5b9f469230c138e6d34811a40df7aa2398099ad9a3e3d453c6f7f7cb1ea7cce745dd2f3005348364f7622e240ab400832cc724dc42549e4309106"</span>,</span><br><span class="line">   <span class="string">"stableEndpoints"</span>: [<span class="string">"1.2.3.4/9993"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="string">"signingKey"</span>: <span class="string">"9d081af8144cf01201f491484f8c3cbcd9669fe4d549c790a13eb14924417167a6d94f5b32516e78c47b1a3c0362454d297c17e5f0b5bb42b903600838349b6a"</span>,</span><br><span class="line"> <span class="string">"signingKey_SECRET"</span>: <span class="string">"ab9634fe2146564bf7a049b9eee41e1b9e092a19a5f743e39360f4130840c83a87aecca1f9f5dd39df08ac8a2af1b68fef7cb7f56f002f66f00bf4d02eecbbd4"</span>,</span><br><span class="line"> <span class="string">"updatesMustBeSignedBy"</span>: <span class="string">"9d081af8144cf01201f491484f8c3cbcd9669fe4d549c790a13eb14924417167a6d94f5b32516e78c47b1a3c0362454d297c17e5f0b5bb42b903600838349b6a"</span>,</span><br><span class="line"> <span class="string">"worldType"</span>: <span class="string">"moon"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 7818fa6036就是机器的 ZeroTier Node ID</span></span><br><span class="line"><span class="comment"># 然后设置 0000007818fa6036.moon 签名文件</span></span><br><span class="line"><span class="comment"># 修改完 moon.json 文件后，获取 000000deadbeef00.moon 签名文件</span></span><br><span class="line">zerotier-idtool genmoon moon.json</span><br><span class="line"><span class="comment"># 此时，在 /var/lib/zerotier-one/ 下产生 0000007818fa6036.moon 文件就是机器的 ZeroTier Node ID.</span></span><br><span class="line"><span class="comment"># 新建 moons.d 目录，并将 000000deadbeef00.moon 文件移动到其下：</span></span><br><span class="line">mkdir moons.d</span><br><span class="line">mv 0000007818fa6036.moon moons.d</span><br><span class="line"><span class="comment"># 重启 ZeroTier One 服务，激活设置</span></span><br><span class="line">service zerotier-one restart</span><br><span class="line"><span class="comment"># 查看moon</span></span><br><span class="line">sudo zerotier-cli listmoons</span><br></pre></td></tr></table></figure><h3 id="3-3-使用-Moon-服务">3.3 使用 Moon 服务</h3><p>要想使用 Moon 服务，还需要在机器上添加签名文件，有两种方式：手动添加；命令行通过 ZeroTier Root Server 添加，添加后会发现延迟显著降低</p><p><strong>手动添加签名文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 ZeroTier One 的 HOME 目录新建 moons.d 目录， 将 1.3 小节中产生的 0000007818fa6036.moon 拷贝出来并放入 &#123;ZeroTier_One_HOME&#125;\moons.d 目录中</span></span><br><span class="line"><span class="comment"># 以下是各种操作系统中 ZeroTier One 默认的 HOME 目录：</span></span><br><span class="line">Linux: /var/lib/zerotier-one</span><br><span class="line">FreeBSD / OpenBSD: /var/db/zerotier-one</span><br><span class="line">Mac: /Library/Application Support/ZeroTier/One</span><br><span class="line">Windows: C:\Program Files (x86)\ZeroTier\One</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------windows</span></span><br><span class="line"><span class="comment"># 在 \ProgramData\ZeroTier\One 下建立 moons.d 目录，并将 0000007818fa6036.moon 拷贝放入</span></span><br><span class="line"><span class="comment"># 然后重启 ZeroTier One 服务.win + R 打开运行，输入 services.msc 打开服务，选择 ZeroTier One 服务并重新启动</span></span><br><span class="line"><span class="comment"># 测试，在 \Program Files (x86)\ZeroTier\One 下打开 cmd，测试 MOON 节点是否添加成功</span></span><br><span class="line"><span class="comment"># 如果出现你的公网ip就代表成功</span></span><br><span class="line">zerotier-cli.bat listpeers</span><br><span class="line"><span class="comment">#----------------------------------linux</span></span><br><span class="line"><span class="comment"># Ubuntu 操作系统中 ZeroTier One HOME 目录为 /var/lib/zerotier-one，建立 moons.d 目录，并将 000000deadbeef00.moon 拷贝放入</span></span><br><span class="line"><span class="comment"># 重新启动 ZeroTier One 服务</span></span><br><span class="line">sudo service zerotier-one restart</span><br><span class="line"><span class="comment"># 测试，出现 MOON 标识的节点标识添加成功</span></span><br><span class="line">sudo zerotier-cli listpeers</span><br></pre></td></tr></table></figure><p><strong>命令添加</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows下，填写自己的node id,然后重启</span></span><br><span class="line">C:\Program Files (x86)\ZeroTier\One&gt;zerotier-cli.bat orbit 7818fa6036 7818fa6036   <span class="comment"># deadbeef00 twice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 下</span></span><br><span class="line">sudo zerotier-cli orbit 7818fa6036 7818fa6036 <span class="comment"># deadbeef00 twice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行实际上是通过 ZeroTier 根服务器将 0000007818fa6036.moon 拷贝放入 &#123;ZeroTier_One_HOME&#125;/moons.d 目录中. 由于网络原因，可能会有延迟或无效的情况，重复、等待或使用手动方式.</span></span><br><span class="line"><span class="comment"># 重启 ZeroTier One 服务是非常重要的步骤，不重启 ZeroTier One 服务将无法激活设置.</span></span><br></pre></td></tr></table></figure><h2 id="4、流量转发与局域网访问">4、流量转发与局域网访问</h2><h3 id="4-1-概述">4.1 概述</h3><blockquote><p>可以参考：<a href="https://github.com/aturl/awesome-anti-gfw/blob/master/ZeroTier/ZeroTier' target=" _blank" rel="noopener" s_vpn.md" title="zerotier转发客户端流量">zerotier转发客户端流量</a></p></blockquote><p>那么如何让一台局域网外的电脑访问局域网内所有设备呢，但是又不想让所有设备都安装zerotier，这时，仅使用** Ubuntu 上的 linux 内核的数据转发和 iptables 控制路由**就能实现所需功能(相当于science上网的功能)</p><h3 id="4-2-转发服务器配置">4.2 转发服务器配置</h3><p>首先需要配置内网中一台 Linux 的数据转发和路由控制，Linux 系统内核可以通过 <code>sysctl</code> 和 <code>iptables</code> 两个命令控制网络数据转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看内核 IP 转发设置，0 表示处于关闭状态</span></span><br><span class="line">sudo sysctl net.ipv4.ip_forward</span><br><span class="line"><span class="comment"># 编辑配置文件开启 Linxu 内核的 IP 数据转发</span></span><br><span class="line">sudo vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># 将第 28 行的注释去掉，设置 net.ipv4.ip_forward=1</span></span><br><span class="line">net.ipv4.ip_forward=1    <span class="comment"># lin 28</span></span><br><span class="line"><span class="comment"># 激活配置文件设置</span></span><br><span class="line">sudo sysctl -p</span><br><span class="line"><span class="comment"># 查看内核 IP 转发设置，1 表示开启状态</span></span><br><span class="line">sudo sysctl net.ipv4.ip_forward</span><br><span class="line"><span class="comment"># 查看网口信息，下面两个都可以，可以发现有两个网卡，一个真实的一个zerotier提供的</span></span><br><span class="line">ifconfig</span><br><span class="line">ip link show</span><br><span class="line"><span class="comment"># ----------------------使用iptables开启流量转发--------------</span></span><br><span class="line"><span class="comment"># 注意下列网卡都需要换成自己的网卡信息</span></span><br><span class="line"><span class="comment"># 使用 iptables 启用 enp123s0f0 的网络地址转换和 IP 伪装</span></span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o enp123s0f0 -j MASQUERADE</span><br><span class="line"><span class="comment"># 允许流量转发和跟踪活动连接</span></span><br><span class="line">sudo iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment"># 接下来设置从zt7u3fcxwr 到 enp123s0f0 流量转发； 反向规则不是必需的，原理同理</span></span><br><span class="line">sudo iptables -A FORWARD -i zt7u3fcxwr -o enp123s0f0 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------保存路由规则--------------------------------</span></span><br><span class="line"><span class="comment"># iptables 规则在重新启动后就无效了. 将上面设置保存为配置文件中，这里我是用的是ubuntu20，centos原理类似</span></span><br><span class="line"><span class="comment"># 安装 iptables 配置存储工具</span></span><br><span class="line">sudo apt-get install iptables-persistent</span><br><span class="line"><span class="comment"># 保存 iptables 配置到文件</span></span><br><span class="line">sudo netfilter-persistent save</span><br><span class="line"><span class="comment"># 查看 iptables 配置文件内容,配置文件保存路径在 /etc/iptables/ 目录下</span></span><br><span class="line">sudo iptables-save</span><br></pre></td></tr></table></figure><p>然后需要配置 ZeroTier 网络路由管理，打开控制台：<a href="https://my.zerotier.com/" target="_blank" rel="noopener" title="https://my.zerotier.com/">https://my.zerotier.com/</a>，增加 1 条路由，Destination 填入 <code>0.0.0.0/0</code> 表示全网，(via) 填入 <code>zt7u3fcxwr</code> 的 IP 地址，点击 <code>Submit</code> 提交。意思就是将流量通过via转发，相当于把Via当作网关，也可以自定义特定的网关</p><p><img src="http://qnypic.shawncoding.top/blog/202305301831279.png" alt></p><p>这里再举个例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设zerotier虚拟局域网的网段是192.168.88.0 局域网A 192.168.1.0 局域网B 192.168.2.0</span></span><br><span class="line"><span class="comment"># (如果需要互联)在局域网A和B中需要各有一台主机安装zerotier并作为两个内网互联的网关</span></span><br><span class="line"><span class="comment"># 分别是192.168.1.10（192.168.88.10） 192.168.2.10（192.168.88.20）#括号里面为虚拟局域网的IP地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在zerotier网站的networks里面的Managed Routes下配置路由表</span></span><br><span class="line"><span class="comment">#如果单向连接,仅需填写下方一个即可.</span></span><br><span class="line">192.168.1.0/24 via 192.168.88.10 </span><br><span class="line">192.168.2.0/24 via 192.168.88.20 </span><br><span class="line"><span class="comment"># 开启内核转发</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.ip_forward = 1"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line"><span class="comment"># 防火墙设置</span></span><br><span class="line">iptables -I FORWARD -i ztyqbub6jp -j ACCEPT</span><br><span class="line">iptables -I FORWARD -o ztyqbub6jp -j ACCEPT</span><br><span class="line">iptables -t nat -I POSTROUTING -o ztyqbub6jp -j MASQUERADE</span><br><span class="line"><span class="comment">#其中的 ztyqbub6jp 在不同的机器中不一样，你可以在路由器ssh环境中用 zerotier-cli listnetworks 或者 ifconfig 查询zt开头的网卡名</span></span><br><span class="line">iptables-save <span class="comment">#保存配置到文件,否则重启规则会丢失.</span></span><br></pre></td></tr></table></figure><h3 id="4-3-客户端配置">4.3 客户端配置</h3><p>Windows 可以使用客户端，需要勾选 <code>Allow Global IP</code>.</p><ul><li>开启转发代理：<strong>勾选</strong> <code>Allow Default Route</code></li><li>关闭转发代理：<strong>取消</strong> <code>Allow Default Route</code></li></ul><p>对于Linux来说，启用 ZeroTIer转发代理需要设置内核，使内核允许发送数据的地址和接受数据的地址不同. 默认情况下，当发送地址与接受地址不一致的时候，内核会丢弃接收的数据.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 /etc/sysctl.conf 文件</span></span><br><span class="line">sudo vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># 去掉第 20 行注释，并设置如下</span></span><br><span class="line">net.ipv4.conf.all.rp_filter=2    <span class="comment"># line 20</span></span><br><span class="line"><span class="comment"># 0：不开启源地址校验。</span></span><br><span class="line"><span class="comment"># 1：开启严格的反向路径校验。对每个进来的数据包，校验其反向路径是否是最佳路径。如果反向路径不是最佳路径，则直接丢弃该数据包。</span></span><br><span class="line"><span class="comment"># 2：开启松散的反向路径校验。对每个进来的数据包，校验其源地址是否可达，即反向路径是否能通（通过任意网口），如果反向路径不同，则直接丢弃该数据包</span></span><br><span class="line"><span class="comment"># 激活配置文件设置</span></span><br><span class="line">sudo sysctl -p</span><br><span class="line"><span class="comment"># 注意下面的NetworkID 换成自己的局域网id</span></span><br><span class="line"><span class="comment"># 允许 ZeroTier One 转发全局流量</span></span><br><span class="line">sudo zerotier-cli <span class="built_in">set</span> NetworkID allowGlobal=1</span><br><span class="line"><span class="comment"># 开启转发代理</span></span><br><span class="line">sudo zerotier-cli <span class="built_in">set</span> NetworkID allowDefault=1</span><br><span class="line"><span class="comment"># 关闭转发代理</span></span><br><span class="line">sudo zerotier-cli <span class="built_in">set</span> NetworkID allowDefault=0</span><br><span class="line"><span class="comment"># 如果开启转代理后没有正常工作，可以尝试重启 ZeroTier One 服务或重启计算机.</span></span><br><span class="line">sudo systemctl restart zerotier-one.service</span><br></pre></td></tr></table></figure><p>最后进行测试，能ping通局域网表示成功，打开转发代理，访问<code>curl http://myip.ipip.net/</code>，如果显示的isp和局域网的一样，说明成功</p><h1>三、Tailscale</h1><h2 id="1、概述-v2">1、概述</h2><blockquote><p>官网：<a href="https://tailscale.com/" target="_blank" rel="noopener" title="https://tailscale.com/">https://tailscale.com/</a></p></blockquote><h3 id="1-1-Tailscale简介">1.1 Tailscale简介</h3><p>Tailscale 是一种基于 WireGuard 的虚拟组网工具，和 Netmaker 类似，<strong>最大的区别在于 Tailscale 是在用户态实现了 WireGuard 协议，而 Netmaker 直接使用了内核态的 WireGuard</strong>。所以 Tailscale 相比于内核态 WireGuard 性能会有所损失，</p><p>Tailscale 就是一种利用 NAT 穿透(P2P 穿透)技术的 内网穿透工具.。Tailscale 客户端等是开源的, 不过遗憾的是中央控制服务器目前并不开源; Tailscale 目前也提供免费的额度给用户使用, 在 NAT 穿透成功的情况下也能保证满速运行。不过一旦无法 NAT 穿透需要做中转时, Tailscale 官方的服务器由于众所周知的原因，在国内访问速度很拉胯; 不过有一个开源版本的中央控制服务器(Headscale), 也就是说: <strong>我们可以自己搭建中央服务器, 完全 &quot;自主可控&quot;</strong></p><h3 id="1-2-优势">1.2 优势</h3><ul><li>开箱即用：无需配置防火墙；没有额外的配置</li><li>高安全性/私密性：自动密钥轮换；点对点连接；支持用户审查端到端的访问记录</li><li>在原有的 ICE、STUN 等 UDP 协议外，实现了 DERP TCP 协议来实现 NAT 穿透</li><li>基于公网的控制服务器下发 ACL 和配置，实现节点动态更新</li><li>通过第三方（如 Google） SSO 服务生成用户和私钥，实现身份认证</li></ul><p>当然Tailscale 是一款商业产品，个人用户在接入设备不超过 20 台的情况下是可以免费使用的（虽然有一些限制，比如子网网段无法自定义，且无法设置多个子网）。除 Windows 和 macOS 的图形应用程序外，其他 Tailscale 客户端的组件（包含 Android 客户端）是在 BSD 许可下以开源项目的形式开发的，你可以在他们的 <a href="https://github.com/tailscale/" target="_blank" rel="noopener" title="GitHub 仓库">GitHub 仓库</a>找到各个操作系统的客户端源码</p><h3 id="1-3-Headscale-是什么">1.3 Headscale 是什么</h3><p>Tailscale 的控制服务器是不开源的，而且对免费用户有诸多限制。目前有一款开源的实现叫 <a href="https://github.com/juanfont/headscale" target="_blank" rel="noopener" title="Headscale">Headscale</a>，Headscale 由欧洲航天局的 Juan Font 使用 Go 语言开发，在 BSD 许可下发布，实现了 Tailscale 控制服务器的所有主要功能，可以部署在企业内部，没有任何设备数量的限制，且所有的网络流量都由自己控制。</p><h2 id="2、基本使用">2、基本使用</h2><h3 id="2-1-节点互相访问">2.1 节点互相访问</h3><blockquote><p>对应软件安装教程：<a href="https://tailscale.com/download/linux" target="_blank" rel="noopener" title="https://tailscale.com/download/linux">https://tailscale.com/download/linux</a></p></blockquote><ul><li>首先需要有个账号，使用自己已有的谷歌、Git或者微软账户登入系统</li><li>根据设备类型的不同，按照官方教程安装服务，注意，iOS需要有美区账户才能下载客户端</li><li>安装后，Linux执行<code>tailscale up</code>，会提示登录鉴权的url，其他客户端的Login或者Auth会拉起登录链接到浏览器，登入你的账户即可将节点加入局域网</li><li>最后，在 <a href="https://login.tailscale.com/admin/machines" target="_blank" rel="noopener" title="Tailscale 后台管理">Tailscale 后台管理</a> 即可查看节点的IP，并通过IP访问你的节点</li></ul><h3 id="2-2-访问局域网设备">2.2 访问局域网设备</h3><blockquote><p>只要局域网一台设备安装了Tailscale即可访问所有设备，这里以ubuntu20作为转发机器，一般来说也都是linux作为转发，参考:<a href="https://tailscale.com/kb/1019/subnets/" target="_blank" rel="noopener" title="https://tailscale.com/kb/1019/subnets/">https://tailscale.com/kb/1019/subnets/</a></p></blockquote><p><img src="http://qnypic.shawncoding.top/blog/202305301831280.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用操作可以参考：https://tailscale.com/kb/1080/cli/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先进行服务端的配置</span></span><br><span class="line"><span class="comment"># 首先进行登陆，登录到局域网中</span></span><br><span class="line">sudo tailscale up</span><br><span class="line"><span class="comment"># 查看分配到的IP地址</span></span><br><span class="line">tailscale ip</span><br><span class="line"><span class="comment"># 要使Tailscale 网络内的装置可以互通，首先需要启用 Linux 上的 IP 转发(IP Forwarding)</span></span><br><span class="line"><span class="comment"># 因为「Subnet Route」的设定需要用到 IP 转发(IP Forwarding)特性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 /etc/sysctl.conf中添加开启路由转发</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv6.conf.all.forwarding=1</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'net.ipv4.ip_forward = 1'</span> | sudo tee -a /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'net.ipv6.conf.all.forwarding = 1'</span> | sudo tee -a /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#  不需要防火墙配置，会自动管理规则，以允许转发。设定过程也没涉及到iptable，一条指令可以完成</span></span><br><span class="line"><span class="comment"># 最后需要刷新一下</span></span><br><span class="line">sudo sysctl -p /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用IP转发功能时，请确保防火墙默认设置为禁止流量转发。这是ufw和firewall等常见防火墙的默认设置，可确保您的设备不会路由您不想路由的流量。</span></span><br><span class="line"><span class="comment"># 例如需要允许伪装</span></span><br><span class="line"><span class="comment"># firewall-cmd --permanent --add-masquerade</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --accept-routes=true接受其他节点发布的子网路由，Linux设备默认不接受路由</span></span><br><span class="line"><span class="comment"># --accept-dns=false表示从控制面板获取默认dns</span></span><br><span class="line"><span class="comment"># --advertise-routes表示暴露物理子网路由到您的整个Tailscale网络，替换为自己的网段，可以是IPV4或者IPV6，也可以多个网段</span></span><br><span class="line">tailscale up --advertise-routes=192.168.31.0/24 --accept-routes=<span class="literal">true</span> --accept-dns=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>设置完后打开<a href="https://login.tailscale.com/admin/machines" target="_blank" rel="noopener" title="控制台">控制台</a>，首先关闭key过期，不然六个月就需要重新校验了，然后可以看到子网是灰色的，这需要控制台进行同意才行，点击<code>Edit route settings</code>,打开对应的<code>Subnet routes</code>子网即可</p><p><img src="http://qnypic.shawncoding.top/blog/202305301831281.png" alt></p><p>然后进行客户端的配置，下载对应的客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先加入对应局域网，授权登陆</span></span><br><span class="line"><span class="comment"># 对于windows来说，右键在Preferences配置，默认是打开Use Tailscale DNS seetings和Use Tailscale subnets</span></span><br><span class="line"><span class="comment"># 这样就能通过服务端的转发访问服务端内网设备，如果不需要，只需点对点，关闭访问内网即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于linux来说</span></span><br><span class="line"><span class="comment"># --accept-routes=true接受其他节点发布的子网路由，Linux设备默认不接受路由</span></span><br><span class="line"><span class="comment"># --accept-dns=false表示从控制面板获取默认dns</span></span><br><span class="line"><span class="comment"># 下面是能访问其他局域网的命令</span></span><br><span class="line">tailscale up --accept-routes=<span class="literal">true</span> --accept-dns=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置</span></span><br><span class="line">tailscale up --reset</span><br><span class="line"><span class="comment"># 下线</span></span><br><span class="line">tailscale down</span><br><span class="line"><span class="comment"># 帮助文档</span></span><br><span class="line">tailscale -h</span><br><span class="line"><span class="comment"># 设置对应的功能</span></span><br><span class="line">tailscale <span class="built_in">set</span> xxxx</span><br></pre></td></tr></table></figure><h3 id="2-3-出口流量转发">2.3 出口流量转发</h3><blockquote><p>出口节点功能可以通过网络上的特定设备路由所有非tailscale访问互联网。运行出口路由的设备称为出口节点，局域网中的设备可以通过改节点访问互联网，流量都经过该台设备，参考：<a href="https://tailscale.com/kb/1103/exit-nodes" target="_blank" rel="noopener" title="https://tailscale.com/kb/1103/exit-nodes">https://tailscale.com/kb/1103/exit-nodes</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和访问局域网设备一样，首先需要开启ip流量转发</span></span><br><span class="line"><span class="comment"># 任意一台设备如果想成为出口节点，首先需要显示表示该台设备为出口节点</span></span><br><span class="line">sudo tailscale up --advertise-exit-node</span><br><span class="line"><span class="comment"># 当然也可以加上子网设备，用来访问局域网</span></span><br><span class="line">tailscale up --advertise-routes=192.168.31.0/24 --accept-routes=<span class="literal">true</span> --accept-dns=<span class="literal">false</span> --advertise-exit-node</span><br><span class="line"><span class="comment"># 然后打开控制台，点击Edit route settings中的Use as exit node按钮，开启后该节点就成为出口节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------客户端开启----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows客户端右键，点击Exit nodes，这里就可以选择需要代理的节点了</span></span><br><span class="line"><span class="comment"># exit-node-allow-lan-access设置为true，表示当流量通过出口节点路由时，允许直接访问本地网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于linux</span></span><br><span class="line"><span class="comment"># 查看连接的节点</span></span><br><span class="line">tailscale status</span><br><span class="line"><span class="comment"># 选择对应的出口节点</span></span><br><span class="line">sudo tailscale up --<span class="built_in">exit</span>-node=&lt;<span class="built_in">exit</span>-node-ip&gt;</span><br><span class="line"><span class="comment"># 选择是否可以访问局域网</span></span><br><span class="line">sudo tailscale up --<span class="built_in">exit</span>-node=&lt;<span class="built_in">exit</span>-node-ip&gt; --<span class="built_in">exit</span>-node-allow-lan-access=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以访问一下，如果显示和真实isp不一致代表成功</span></span><br><span class="line">curl http://myip.ipip.net/</span><br></pre></td></tr></table></figure><h2 id="3、Headscale-部署">3、Headscale 部署</h2><h3 id="3-1-服务端部署">3.1 服务端部署</h3><p>Headscale 部署很简单，推荐直接在 Linux 主机上安装，理论上来说只要你的 Headscale 服务可以暴露到公网出口就行，但最好不要有 NAT，所以推荐将 Headscale 部署在有公网 IP 的云主机上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">wget --output-document=/usr/<span class="built_in">local</span>/bin/headscale \</span><br><span class="line">   https://github.com/juanfont/headscale/releases/download/v&lt;HEADSCALE VERSION&gt;/headscale_&lt;HEADSCALE VERSION&gt;_linux_&lt;ARCH&gt;</span><br><span class="line"><span class="comment"># 自行选择版本，例如我的</span></span><br><span class="line">wget --output-document=/usr/<span class="built_in">local</span>/bin/headscale \</span><br><span class="line">   https://github.com/juanfont/headscale/releases/download/v0.20.0/headscale_0.20.0_linux_amd64</span><br><span class="line"><span class="comment"># # 增加可执行权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/headscale</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置目录</span></span><br><span class="line">mkdir -p /etc/headscale</span><br><span class="line"><span class="comment"># 创建目录用来存储数据与证书</span></span><br><span class="line">mkdir -p /var/lib/headscale</span><br><span class="line"><span class="comment"># 创建空的 SQLite 数据库文件</span></span><br><span class="line">touch /var/lib/headscale/db.sqlite</span><br><span class="line"><span class="comment"># 创建 Headscale 配置文件</span></span><br><span class="line">wget https://github.com/juanfont/headscale/raw/main/config-example.yaml -O /etc/headscale/config.yaml</span><br></pre></td></tr></table></figure><p>然后修改配置文件，主要是修改几个监听端口、文件位置(都放在/var/lib/headscale，注意权限)、子网段以及unix_socket</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Headscale 服务器的访问地址</span></span><br><span class="line"><span class="comment"># 负载均衡器之后这个地址也必须写成负载均衡器的访问地址</span></span><br><span class="line"><span class="comment"># 修改配置文件，将 server_url 改为公网 IP 或域名(使用域名的话要备案)</span></span><br><span class="line"><span class="comment"># 如果暂时用不到 DNS 功能，可以先将 magic_dns 设为 false</span></span><br><span class="line"><span class="comment"># server_url 设置为 http://&lt;PUBLIC_IP&gt;:8080，将 &lt;PUBLIC_IP&gt; 替换为公网 IP 或者域名</span></span><br><span class="line"><span class="comment"># server_url: http://&lt;ip&gt;:8080</span></span><br><span class="line"><span class="attr">server_url:</span> <span class="string">https://your.domain.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Headscale 实际监听的地址,不要127.0.0.1，否则外网访问不了</span></span><br><span class="line"><span class="attr">listen_addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控地址</span></span><br><span class="line"><span class="attr">metrics_listen_addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9090</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grpc 监听地址，也需要改成0.0.0.0</span></span><br><span class="line"><span class="attr">grpc_listen_addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:50443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许不安全的 grpc 连接(非 TLS)</span></span><br><span class="line"><span class="attr">grpc_allow_insecure:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改路径</span></span><br><span class="line"><span class="attr">private_key_path:</span> <span class="string">/var/lib/headscale/private.key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端分配的内网网段</span></span><br><span class="line"><span class="attr">ip_prefixes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">fd7a:115c:a1e0::/48</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">100.64</span><span class="number">.0</span><span class="number">.0</span><span class="string">/10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">noise:</span></span><br><span class="line">  <span class="comment"># 修改路径</span></span><br><span class="line">  <span class="attr">private_key_path:</span> <span class="string">/var/lib/headscale/noise_private.key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中继服务器相关配置</span></span><br><span class="line"><span class="attr">derp:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 关闭内嵌的 derper 中继服务(可能不安全, 还没去看代码)</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 下发给客户端的中继服务器列表(默认走官方的中继节点)</span></span><br><span class="line">  <span class="attr">urls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://controlplane.tailscale.com/derpmap/default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 可以在本地通过 yaml 配置定义自己的中继接待</span></span><br><span class="line">  <span class="attr">paths:</span> <span class="string">[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可自定义私有网段，也可同时开启 IPv4 和 IPv6</span></span><br><span class="line"><span class="attr">ip_prefixes:</span></span><br><span class="line"><span class="comment"># - fd7a:115c:a1e0::/48</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10.1</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SQLite config，修改位置</span></span><br><span class="line"><span class="attr">db_type:</span> <span class="string">sqlite3</span></span><br><span class="line"><span class="attr">db_path:</span> <span class="string">/var/lib/headscale/db.sqlite</span></span><br><span class="line"><span class="attr">tls_letsencrypt_cache_dir:</span> <span class="string">/var/lib/headscale/cache</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改位置</span></span><br><span class="line"><span class="attr">unix_socket:</span> <span class="string">/var/run/headscale/headscale.sock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自动签发证书是的域名</span></span><br><span class="line"><span class="attr">tls_letsencrypt_hostname:</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义证书时的证书路径</span></span><br><span class="line"><span class="attr">tls_cert_path:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">tls_key_path:</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否让客户端使用随机端口, 默认使用 41641/UDP</span></span><br><span class="line"><span class="attr">randomize_client_port:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns_config:</span></span><br><span class="line">  <span class="comment"># 如果暂时用不到 DNS 功能，可以先将 magic_dns 设为 false</span></span><br><span class="line">  <span class="attr">magic_dns:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>配置文件有几点需要说明，可能很多人希望使用 ACME 自动证书, 又不想占用 80/443 端口, 又想通过负载均衡器负载, ;这里详细说明一下 Headscale 证书相关配置和工作逻辑:</p><ul><li>Headscale 的 ACME 只支持 HTTP/TLS , 所以使用后必定占用 80/443</li><li>当配置了 <code>tls_letsencrypt_hostname</code> 时一定会进行 ACME 申请</li><li>在不配置 <code>tls_letsencrypt_hostname</code> 时如果配置了 <code>tls_cert_path</code> 则使用自定义证书</li><li>两者都不配置则不使用任何证书, 服务端监听 HTTP 请求</li><li>三种情况下(ACME 证书、自定义证书、无证书)主服务都只监听 <code>listen_addr</code> 地址, 与 <code>server_url</code> 没关系</li><li>只有在有证书(ACME 证书或自定义证书)的情况下或者手动开启了 <code>grpc_allow_insecure</code> 才会监听 grpc 远程调用服务</li></ul><p>综上所述, 如果你想通过 Nginx、Caddy 反向代理 Headscale, 则你需要满足以下配置:</p><ul><li>删除掉 <code>tls_letsencrypt_hostname</code> 或留空, 防止 ACME 启动</li><li>删除掉 <code>tls_cert_path</code> 或留空, 防止加载自定义证书</li><li><code>server_url</code> 填写 Nginx 或 Caddy 被访问的 HTTPS 地址</li><li>在你的 Nginx 或 Caddy 中反向代理填写 <code>listen_addr</code> 的 HTTP 地址</li></ul><p>Nginx 配置参考 <a href="https://github.com/juanfont/headscale/wiki/nginx-configuration" target="_blank" rel="noopener" title="官方 Wiki">官方 Wiki</a>, Caddy 只需要一行 <code>reverse_proxy headscale:8080</code> 即可(地址自行替换)。至于 ACME 证书你可以通过使用 <code>acme.sh</code> 自动配置 Nginx 或者使用 Caddy 自动申请等方式。</p><p>下一步创建 SystemD service 配置文件，让其能够自己开机自启，<code>vim /etc/systemd/system/headscale.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/systemd/system/headscale.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=headscale controller</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=headscale</span><br><span class="line">Group=headscale</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/headscale serve</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional security enhancements</span></span><br><span class="line">NoNewPrivileges=yes</span><br><span class="line">PrivateTmp=yes</span><br><span class="line">ProtectSystem=strict</span><br><span class="line">ProtectHome=yes</span><br><span class="line">ReadWritePaths=/var/lib/headscale /var/run/headscale</span><br><span class="line">AmbientCapabilities=CAP_NET_BIND_SERVICE</span><br><span class="line">RuntimeDirectory=headscale</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>最后环节</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 headscale 用户</span></span><br><span class="line">useradd headscale -d /home/headscale -m</span><br><span class="line"><span class="comment"># 修改 /var/lib/headscale 目录的 owner</span></span><br><span class="line">chown -R headscale:headscale /var/lib/headscale</span><br><span class="line"><span class="comment"># Reload SystemD 以加载新的配置文件</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 启动 Headscale 服务并设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now headscale</span><br><span class="line"><span class="comment"># systemctl stop headscale</span></span><br><span class="line"><span class="comment"># systemctl disable headscale</span></span><br><span class="line"><span class="comment"># 查看运行状态</span></span><br><span class="line">systemctl status headscale</span><br><span class="line"><span class="comment"># 查看占用端口</span></span><br><span class="line">ss -tulnp|grep headscale</span><br><span class="line"><span class="comment"># 如果出现问题，可以检查一下</span></span><br><span class="line">journalctl -u headscale.service</span><br><span class="line"><span class="comment"># 最后Tailscale 中有一个概念叫 tailnet，可以理解成租户，租户与租户之间是相互隔离的，具体看参考 Tailscale 的官方文档： https://tailscale.com/kb/1136/tailnet/</span></span><br><span class="line"><span class="comment"># Headscale 也有类似的实现叫 namespace，即命名空间。我们需要先创建一个 namespace，以便后续客户端接入，例如</span></span><br><span class="line">headscale namespaces create default</span><br><span class="line"><span class="comment"># 查看命名空间</span></span><br><span class="line">headscale namespaces list</span><br></pre></td></tr></table></figure><h3 id="3-2-Tailscale客户端接入">3.2 Tailscale客户端接入</h3><blockquote><p><a href="https://github.com/juanfont/headscale" target="_blank" rel="noopener" title="https://github.com/juanfont/headscale">https://github.com/juanfont/headscale</a></p></blockquote><ul><li><code>--login-server</code>: 指定使用的中央服务器地址 (必填)</li><li><code>--advertise-routes</code>: 向中央服务器报告当前客户端处于哪个内网网段下, 便于中央服务器让同内网设备直接内网直连 (可选的) 或者将其他设备指定流量路由到当前内网(可选)</li><li><code>--accept-routes</code>: 是否接受中央服务器下发的用于路由到其他客户端内网的路由规则 (可选)</li><li><code>--accept-dns</code>: 是否使用中央服务器下发的 DNS 相关配置 (可选, 推荐关闭)</li><li><code>--advertise-exit-node</code>：是否声明为出口节点，即流量都从这个节点转发(可选,根据自己需求来)</li><li><code>--exit-node=&lt;exit-node-ip&gt; </code>：选择出口节点id(设置了才有)</li><li><code>--exit-node-allow-lan-access=true</code>:是否还可以访问本地地址(设置了出口才可以有)</li></ul><p><strong>Linux</strong></p><p>Tailscale 官方提供了各种 Linux 发行版的软件包，官方还提供了 <a href="https://tailscale.com/download/linux/static" target="_blank" rel="noopener" title="静态编译的二进制文件">静态编译的二进制文件</a>，我们可以直接下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以直接sh下载，不行就下面</span></span><br><span class="line">wget https://pkgs.tailscale.com/stable/tailscale_1.38.1_amd64.tgz</span><br><span class="line">tar zxvf tailscale_1.38.1_amd64.tgz</span><br><span class="line"><span class="comment"># 将二进制文件复制到官方软件包默认的路径下</span></span><br><span class="line">cp tailscale_1.38.1_amd64/tailscaled /usr/sbin/tailscaled</span><br><span class="line">cp tailscale_1.38.1_amd64/tailscale /usr/bin/tailscale</span><br><span class="line"><span class="comment"># systemD service 配置文件复制到系统路径下</span></span><br><span class="line">cp tailscale_1.38.1_amd64/systemd/tailscaled.service /lib/systemd/system/tailscaled.service</span><br><span class="line"><span class="comment"># 将环境变量配置文件复制到系统路径下</span></span><br><span class="line">cp tailscale_1.38.1_amd64/systemd/tailscaled.defaults /etc/default/tailscaled</span><br><span class="line"><span class="comment"># 启动 tailscaled.service 并设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now tailscaled</span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status tailscaled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tailscale 接入 Headscale</span></span><br><span class="line"><span class="comment"># 这里推荐将 DNS 功能关闭，因为它会覆盖系统的默认 DNS。如果你对 DNS 有需求，可自己研究官方文档，这里不再赘述</span></span><br><span class="line"><span class="comment"># 将 &lt;HEADSCALE_PUB_IP&gt; 换成你的 Headscale 公网 IP 或域名</span></span><br><span class="line">tailscale up --login-server=http://&lt;HEADSCALE_PUB_IP&gt;:8080 --accept-routes=<span class="literal">true</span> --accept-dns=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 执行完上面的命令后，会出现授权信息，在浏览器中打开该链接，获得一条链接</span></span><br><span class="line"><span class="comment"># 将其中的命令复制粘贴到 headscale 所在机器的终端中，并将 NAMESPACE 替换为前面所创建的 namespace</span></span><br><span class="line">headscale nodes register --user default--key nodekey:746f2e464177e2cabe1d018940a11041f7d368a022dbd9caad7e9a641ad09803</span><br><span class="line"><span class="comment"># 注册成功，查看注册的节点</span></span><br><span class="line">headscale nodes list</span><br><span class="line"><span class="comment"># 回到 Tailscale 客户端所在的 Linux 主机，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则</span></span><br><span class="line">ip route show table 52</span><br><span class="line"><span class="comment"># 查看 iptables 规则</span></span><br><span class="line">iptables -S</span><br><span class="line">iptables -S -t nat</span><br></pre></td></tr></table></figure><p><strong>Windows</strong></p><p>Windows Tailscale 客户端想要使用 Headscale 作为控制服务器，只需在浏览器中打开 URL：<code>http://&lt;HEADSCALE_PUB_IP&gt;:8080/windows</code>，按照其中的步骤操作即可</p><p><strong>Android</strong></p><p>Android 客户端从 1.30.0 版本开始支持自定义控制服务器（即 coordination server），你可以通过 <a href="https://play.google.com/store/apps/details?id=com.tailscale.ipn" target="_blank" rel="noopener" title="Google Play">Google Play</a> 或者 <a href="https://f-droid.org/packages/com.tailscale.ipn/" target="_blank" rel="noopener" title="F-Droid">F-Droid</a> 下载最新版本的客户端。安装完成后打开 Tailscale App，开右上角的&quot;三个点&quot;，你会看到只有一个 <code>About</code> 选项，你需要反复不停地<strong>点开再关闭</strong>右上角的&quot;三个点&quot;，重复三四次之后，便会出现一个 <code>Change server</code> 选项，点击 <code>Change server</code>，将 headscale 控制服务器的地址填进去，然后点击 <code>Save and restart</code> 重启，点击 <code>Sign in with other</code>，将其中的命令粘贴到 Headscale 所在主机的终端，将 <strong>NAMESPACE</strong> 替换为之前创建的 namespace，然后执行命令即可。注册成功后可将该页面关闭</p><p><strong>MacOS</strong></p><p>可以参考：<a href="https://github.com/tailscale/tailscale/wiki/Tailscaled-on-macOS" target="_blank" rel="noopener" title="https://github.com/tailscale/tailscale/wiki/Tailscaled-on-macOS">https://github.com/tailscale/tailscale/wiki/Tailscaled-on-macOS</a></p><h3 id="3-3-通过-Pre-Authkeys-接入">3.3 通过 Pre-Authkeys 接入</h3><p>前面的接入方法都需要服务端同意，步骤比较烦琐，其实还有更简单的方法，可以直接接入，不需要服务端同意。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先在服务端生成 pre-authkey 的 token，有效期可以设置为 24 小时</span></span><br><span class="line"><span class="comment"># headscale preauthkeys create -e 24h -n default</span></span><br><span class="line">headscale preauthkeys create -e 24h --user default</span><br><span class="line"><span class="comment"># 查看已经生成的 key,一个是老版命令</span></span><br><span class="line"><span class="comment"># headscale -n default preauthkeys list</span></span><br><span class="line">headscale --user default preauthkeys list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在新节点就可以无需服务端同意直接接入了</span></span><br><span class="line">tailscale up --login-server=http://&lt;HEADSCALE_PUB_IP&gt;:8080 --accept-routes=<span class="literal">true</span> --accept-dns=<span class="literal">false</span> --authkey <span class="variable">$KEY</span></span><br></pre></td></tr></table></figure><h3 id="3-4-局域网互通">3.4 局域网互通</h3><p>和之前一样，通过一台设备转发达到局域网互通</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先需要设置 IPv4 与 IPv6 路由转发</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'net.ipv4.ip_forward = 1'</span> | tee /etc/sysctl.d/ipforwarding.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'net.ipv6.conf.all.forwarding = 1'</span> | tee -a /etc/sysctl.d/ipforwarding.conf</span><br><span class="line">sysctl -p /etc/sysctl.d/ipforwarding.conf</span><br><span class="line"><span class="comment"># 客户端修改注册节点的命令，在原来命令的基础上加上参数 --advertise-routes=192.168.31.0/24，告诉 Headscale 服务器"我这个节点可以转发这些地址的路由"</span></span><br><span class="line">tailscale up --login-server=http://&lt;HEADSCALE_PUB_IP&gt;:8080 --accept-routes=<span class="literal">true</span> --accept-dns=<span class="literal">false</span> --advertise-routes=192.168.31.0/24 --reset</span><br><span class="line"><span class="comment"># 在 Headscale 端查看路由，可以看到相关路由是关闭的</span></span><br><span class="line">headscale nodes list</span><br><span class="line"><span class="comment"># 查看具体某台设备路由信息</span></span><br><span class="line">headscale routes list -i 1</span><br><span class="line"><span class="comment"># 开启第一条路由规则，以此类推</span></span><br><span class="line">headscale routes <span class="built_in">enable</span> -r 1</span><br><span class="line"><span class="comment"># 之前版本好像是如下命令，但在1.38这里报错</span></span><br><span class="line"><span class="comment"># 这是开启所有</span></span><br><span class="line"><span class="comment"># headscale routes enable -i 6 -a</span></span><br><span class="line"><span class="comment"># 开启特定路由</span></span><br><span class="line"><span class="comment"># headscale routes enable -i 6 -r "192.168.100.0/24,xxxx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他节点查看路由结</span></span><br><span class="line">ip route show table 52|grep <span class="string">"192.168.31.0/24"</span></span><br><span class="line"><span class="comment"># 其他节点启动时需要增加 --accept-routes=true 选项来声明 “我接受外部其他节点发布的路由”</span></span><br></pre></td></tr></table></figure><p>最后是设置出口节点，如果要设置，登陆时加上<code>--advertise-exit-node</code>即可，然后在headscale可以看到<code>0.0.0.0/0</code>的路由，将其放行，最后在客户端选择<code>--exit-node=&lt;exit-node-ip&gt; </code>以及<code>--exit-node-allow-lan-access=true</code>自定义选项</p><h3 id="3-5-常用命令总结">3.5 常用命令总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">headscale namespace list <span class="comment"># 查看所有的namespace</span></span><br><span class="line">headscale namespace create default <span class="comment"># 创建namespace</span></span><br><span class="line">headscale namespace destroy default <span class="comment"># 删除namespace</span></span><br><span class="line">headscale namespace rename default  myspace <span class="comment"># 重命名namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 老版本--namespace/-n 替换成--user</span></span><br><span class="line">headscale node list <span class="comment"># 列出所有的节点</span></span><br><span class="line">headscale node ls -t <span class="comment"># 列出所有的节点,同时显示出tag信息</span></span><br><span class="line">headscale -user default node ls <span class="comment"># 只查看namespace为default下的节点</span></span><br><span class="line">headscale node delete -i&lt;ID&gt; <span class="comment"># 根据id删除指定的节点，这里面的id是node list查询出来的id</span></span><br><span class="line">                             <span class="comment"># 参考headscale nodes delete -i=6</span></span><br><span class="line">headscale node tag -i=2 -t=tag:<span class="built_in">test</span> <span class="comment"># 给id为2的node设置tag为tag:test</span></span><br><span class="line"></span><br><span class="line">headscale routes list -i=9    <span class="comment"># 列出节点9的所有路由信息</span></span><br><span class="line">headscale routes <span class="built_in">enable</span> -i=9 -r=192.168.10.0/24  <span class="comment">#将节点9的路由中信息为192.168.10.0/24的设置为true,</span></span><br><span class="line">                              <span class="comment"># 这样除了虚拟内网ip,原先的内网ip网段为192.168.10的也能访问了</span></span><br><span class="line">                              <span class="comment"># 后面的/24表示子网掩码是24个1,就是255.255.255.0</span></span><br><span class="line"><span class="comment"># 新版本命令开启第一条路由规则，以此类推</span></span><br><span class="line">headscale routes <span class="built_in">enable</span> -r 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 老版本--namespace/-n 替换成--user</span></span><br><span class="line"><span class="comment"># preauthkeys主要是方便客户端快速接入，创建了preauthkeys后客户端直接使用该key就可以直接加入namespace</span></span><br><span class="line"><span class="comment"># headscale -n default preauthkeys list # 查看名称为default的namespace中已经生成的preauthkeys </span></span><br><span class="line"><span class="comment"># headscale preauthkeys create -e 24h -n default # 给名称为default的namespace创建preauthkeys</span></span><br><span class="line">headscale --user default preauthkeys list </span><br><span class="line">headscale preauthkeys create -e 24h --user default</span><br></pre></td></tr></table></figure><h2 id="4、中继服务器概述-可选">4、中继服务器概述(可选)</h2><h3 id="4-1-STUN-是什么">4.1 STUN 是什么</h3><p>Tailscale 的终极目标是让两台<strong>处于网络上的任何位置</strong>的机器建立<strong>点对点连接</strong>（直连），但大部分情况下机器都位于 NAT 和防火墙后面，这时候就需要通过打洞来实现直连，也就是 NAT 穿透。NAT 按照 <strong>NAT 映射行为</strong>和<strong>有状态防火墙行为</strong>可以分为多种类型，但对于 NAT 穿透来说根本不需要关心这么多类型，只需要看 <strong>NAT 或者有状态防火墙是否会严格检查目标 Endpoint</strong>，根据这个因素，可以将 NAT 分为 <strong>Easy NAT</strong> 和 <strong>Hard NAT</strong>。</p><ul><li><p><strong>Easy NAT</strong> 及其变种称为 “Endpoint-Independent Mapping” (<strong>EIM，终点无关的映射</strong>)  </p><p>这里的 Endpoint 指的是目标 Endpoint，也就是说，有状态防火墙只要看到有客户端自己发起的出向包，就会允许相应的入向包进入，<strong>不管这个入向包是谁发进来的都可以</strong>。</p></li><li><p><strong>hard NAT</strong> 以及变种称为 “Endpoint-Dependent Mapping”（<strong>EDM，终点相关的映射</strong>）  </p><p>这种 NAT 会针对每个目标 Endpoint 来生成一条相应的映射关系。 在这样的设备上，如果客户端向某个目标 Endpoint 发起了出向包，假设客户端的公网 IP 是 2.2.2.2，那么有状态防火墙就会打开一个端口，假设是 4242。那么只有来自该目标 Endpoint 的入向包才允许通过 <code>2.2.2.2:4242</code>，其他客户端一律不允许。这种 NAT 更加严格，所以叫 Hard NAT。</p></li></ul><p>对于 Easy NAT，我们只需要提供一个第三方的服务，它能够告诉客户端“它看到的客户端的公网 ip:port 是什么”，然后将这个信息以某种方式告诉通信对端（peer），后者就知道该和哪个地址建连了！这种服务就叫 <strong>STUN</strong> (Session Traversal Utilities for NAT，NAT会话穿越应用程序)。</p><p>对于 <strong>Hard NAT</strong> 来说，STUN 就不好使了，即使 STUN 拿到了客户端的公网 <code>ip:port</code> 告诉通信对端也于事无补，因为防火墙是和 STUN 通信才打开的缺口，这个缺口只允许 STUN 的入向包进入，其他通信对端知道了这个缺口也进不来。通常企业级 NAT 都属于 Hard NAT。这种情况下可以选择一种折衷的方式：创建一个中继服务器（relay server），客户端与中继服务器进行通信，中继服务器再将包中继（relay）给通信对端。至于中继的性能，那要看具体情况了：</p><ul><li>如果能直连，那显然没必要用中继方式；</li><li>但如果无法直连，而中继路径又非常接近双方直连的真实路径，并且带宽足够大，那中继方式并不会明显降低通信质量。延迟肯定会增加一点，带宽会占用一些，但<strong>相比完全连接不上，还是可以接受的</strong>。</li></ul><h3 id="4-2-中继服务之TURN">4.2 中继服务之TURN</h3><p>TURN 即 Traversal Using Relays around NAT，这是一种经典的中继实现方式，核心理念是：</p><ul><li><strong>用户</strong>（人）先去公网上的 TURN 服务器认证，成功后后者会告诉你：“我已经为你分配了 ip:port，接下来将为你中继流量”，</li><li>然后将这个 ip:port 地址告诉对方，让它去连接这个地址，接下去就是非常简单的客户端/服务器通信模型了。</li></ul><p>与 STUN 不同，这种协议没有真正的交互性，不是很好用，因此 Tailscale 并没有采用 TURN 作为中继协议。</p><h3 id="4-3-DERP">4.3 DERP</h3><p>DERP 即 Detoured Encrypted Routing Protocol，这是 Tailscale 自研的一个协议：</p><ul><li>它是一个<strong>通用目的包中继协议，运行在 HTTP 之上</strong>，而大部分网络都是允许 HTTP 通信的。</li><li>它根据目的公钥（destination’s public key）来中继加密的流量（encrypted payloads）</li></ul><p>Tailscale 使用的算法很有趣，<strong>所有客户端之间的连接都是先选择 DERP 模式（中继模式），这意味着连接立即就能建立（优先级最低但 100% 能成功的模式），用户不用任何等待</strong>。然后开始并行地进行路径发现，通常几秒钟之后，我们就能发现一条更优路径，然后将现有连接透明升级（upgrade）过去，变成点对点连接（直连）。因此，DERP 既是 Tailscale 在 NAT 穿透失败时的保底通信方式（此时的角色与 TURN 类似），也是在其他一些场景下帮助我们完成 NAT 穿透的旁路信道。 换句话说，它既是我们的保底方式，也是有更好的穿透链路时，帮助我们进行连接升级（upgrade to a peer-to-peer connection）的基础设施。</p><h2 id="5、自建私有-DERP-server-可选">5、自建私有 DERP server(可选)</h2><h3 id="5-1-概述">5.1 概述</h3><p>Tailscale 的私钥只会保存在当前节点，因此 DERP server 无法解密流量，它只能和互联网上的其他路由器一样，呆呆地将加密的流量从一个节点转发到另一个节点，只不过 DERP 使用了一个稍微高级一点的协议来防止滥用。Tailscale 开源了 DERP 服务器的代码，如果你感兴趣，可以阅读 <a href="https://github.com/tailscale/tailscale/tree/main/derp" target="_blank" rel="noopener" title="DERP 的源代码">DERP 的源代码</a>。</p><p>Tailscale 官方内置了很多 DERP 服务器，分步在全球各地，<strong>惟独不包含中国大陆</strong>。这就导致了一旦流量通过 DERP 服务器进行中继，延时就会非常高。而且官方提供的 DERP 服务器是万人骑，存在安全隐患。为了实现低延迟、高安全性，我们可以参考 <a href="https://tailscale.com/kb/1118/custom-derp-servers/" target="_blank" rel="noopener" title="Tailscale 官方文档">Tailscale 官方文档</a>自建私有的 DERP 服务器。有两种部署模式，一种是基于域名，另外一种不需要域名，可以直接使用 IP，可以直接参考：<a href="https://icloudnative.io/posts/custom-derp-servers" target="_blank" rel="noopener" title="部署私有 DERP 中继服务器">部署私有 DERP 中继服务器</a></p><h3 id="5-2-中继服务器搭建">5.2 中继服务器搭建</h3><p>这里搭建的是官方推荐的，属于http搭建，docker搭建可以参考其他。首先需要注意的是, 在需要搭建 DERP Server 的服务器上, 请先安装一个 Tailscale 客户端并注册到 Headscale; <strong>这样做的目的是让搭建的 DERP Server 开启客户端认证, 否则你的 DERP Server 可以被任何人白嫖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目前 Tailscale 官方并未提供 DERP Server 的安装包, 所以需要我们自行编译安装; 在编译之前请确保安装了最新版本的 Go 语言及其编译环境.</span></span><br><span class="line"><span class="comment"># 这里我用的go编译环境是1.21</span></span><br><span class="line"><span class="comment"># install的时候可能会无法访问，需要先设置代理服务</span></span><br><span class="line">go env -w GOPROXY=https://goproxy.io,direct</span><br><span class="line"><span class="comment"># 设置不走 proxy 的私有仓库，多个用逗号相隔</span></span><br><span class="line">go env -w GOPRIVATE=*.corp.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 DERP Server</span></span><br><span class="line">go install tailscale.com/cmd/derper@main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制到系统可执行目录</span></span><br><span class="line">mv <span class="variable">$&#123;GOPATH&#125;</span>/bin/derper /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户和运行目录</span></span><br><span class="line">useradd \</span><br><span class="line">        --create-home \</span><br><span class="line">        --home-dir /var/lib/derper/ \</span><br><span class="line">        --system \</span><br><span class="line">        --user-group \</span><br><span class="line">        --shell /usr/sbin/nologin \</span><br><span class="line">        derper</span><br></pre></td></tr></table></figure><p>接下来创建一个 SystemD 配置，保证开机自启，这里有几个点。<strong>默认情况下 Derper Server 会监听在 <strong><strong><code>:443</code></strong></strong> 上, 同时会触发自动 ACME 申请证书. 关于证书逻辑如下:</strong></p><ul><li>如果不指定 <code>-a</code> 参数, 则默认监听 <code>:443</code></li><li>如果监听 <code>:443</code> 并且未指定 <code>--certmode=manual</code> 则会强制使用 <code>--hostname</code> 指定的域名进行 ACME 申请证书</li><li>如果指定了 <code>--certmode=manual</code> 则会使用 <code>--certmode</code> 指定目录下的证书开启 HTTPS</li><li>如果指定了 <code>-a</code> 为非 <code>:443</code> 端口, 且没有指定 <code>--certmode=manual</code> 则只监听 HTTP</li></ul><p><strong>如果期望使用 ACME 自动申请只需要不增加 <strong><strong><code>-a</code></strong></strong> 选项即可(占用 443 端口), 如果期望通过负载均衡器负载, 则需要将 <strong><strong><code>-a</code></strong></strong> 选项指定到非 443 端口, 然后配置 Nginx、Caddy 等 LB 软件即可. 最后一点 <strong><strong><code>stun</code></strong></strong> 监听的是 UDP 端口, 请确保防火墙打开此端口.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /lib/systemd/system/derper.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=tailscale derper server</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=derper</span><br><span class="line">Group=derper</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/derper -c=/var/lib/derper/private.key -a=:12345 -stun-port=3456 -verify-clients</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional security enhancements</span></span><br><span class="line">NoNewPrivileges=yes</span><br><span class="line">PrivateTmp=yes</span><br><span class="line">ProtectSystem=strict</span><br><span class="line">ProtectHome=yes</span><br><span class="line">ReadWritePaths=/var/lib/derper /var/run/derper</span><br><span class="line">AmbientCapabilities=CAP_NET_BIND_SERVICE</span><br><span class="line">RuntimeDirectory=derper</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后启动derp服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> derper --now</span><br><span class="line"><span class="comment"># 重启的话，stop</span></span><br><span class="line">systemctl restart derper.service</span><br></pre></td></tr></table></figure><h3 id="5-3-配置-Headscale">5.3 配置 Headscale</h3><p>在创建完 Derper 中继服务器后, 我们还需要配置 Headscale 来告诉所有客户端在必要时可以使用此中继节点进行通信; 为了达到这个目的, 我们需要在 Headscale 服务器上创建以下配置，<code>vim /etc/headscale/derper.yaml</code>，配置说明：</p><ul><li><code>regions</code> 是 YAML 中的<strong>对象</strong>，下面的每一个对象表示一个<strong>可用区</strong>，每个<strong>可用区</strong>里面可设置多个 DERP 节点，即 <code>nodes</code>。</li><li>每个可用区的 <code>regionid</code> 不能重复。</li><li>每个 <code>node</code> 的 <code>name</code> 不能重复。</li><li><code>regionname</code> 一般用来描述可用区，<code>regioncode</code> 一般设置成可用区的缩写。</li><li><code>ipv4</code> 字段不是必须的，如果你的域名可以通过公网解析到你的 DERP 服务器地址，这里可以不填。如果你使用了一个二级域名，而这个域名你并没有在公共 DNS server 中添加相关的解析记录，那么这里就需要指定 IP（前提是你的证书包含了这个二级域名，这个很好支持，搞个泛域名证书就行了）。</li><li><code>stunonly: false</code> 表示除了使用 STUN 服务，还可以使用 DERP 服务。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/headscale/derper.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">regions:</span></span><br><span class="line">  <span class="attr">901:</span></span><br><span class="line">    <span class="attr">regionid:</span> <span class="number">901</span></span><br><span class="line">    <span class="attr">regioncode:</span> <span class="string">private-derper</span></span><br><span class="line">    <span class="attr">regionname:</span> <span class="string">"My Private Derper Server"</span></span><br><span class="line">    <span class="attr">nodes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">private-derper</span></span><br><span class="line">        <span class="attr">regionid:</span> <span class="number">901</span></span><br><span class="line">        <span class="comment"># 自行更改为自己的域名，也可以直接用ip</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">derper.xxxxx.com</span></span><br><span class="line">        <span class="comment"># Derper 节点的 IP</span></span><br><span class="line">        <span class="attr">ipv4:</span> <span class="number">121.199</span><span class="number">.167</span><span class="string">.xxx</span></span><br><span class="line">        <span class="comment"># Derper 设置的 STUN 端口</span></span><br><span class="line">        <span class="attr">stunport:</span> <span class="number">3456</span></span><br><span class="line">        <span class="comment">#derpport: 12345</span></span><br><span class="line">        <span class="comment">#stunonly: false</span></span><br></pre></td></tr></table></figure><p>在创建好基本的 Derper Server 节点信息配置后, 我们需要调整主配置来让 Headscale 加载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">derp:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 这里关闭 Headscale 默认的 Derper Server</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># urls 留空, 保证不加载官方的默认 Derper，也可以加其他的，或者json可以在线修改</span></span><br><span class="line">  <span class="attr">urls:</span></span><br><span class="line">   <span class="comment"># - https://lamppic.oss-cn-hangzhou.aliyuncs.com/test/perf.json</span></span><br><span class="line">   <span class="comment"># - https://controlplane.tailscale.com/derpmap/default</span></span><br><span class="line">  <span class="comment"># 这里填写 Derper 节点信息配置的绝对路径</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/etc/headscale/derper.yaml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If enabled, a worker will be set up to periodically</span></span><br><span class="line">  <span class="comment"># refresh the given sources and update the derpmap</span></span><br><span class="line">  <span class="comment"># will be set up.</span></span><br><span class="line">  <span class="attr">auto_update_enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># How often should we check for DERP updates?</span></span><br><span class="line">  <span class="attr">update_frequency:</span> <span class="string">24h</span></span><br></pre></td></tr></table></figure><h3 id="5-4-客户端网络调试">5.4 客户端网络调试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看derp也没有成功,注意防火墙开放</span></span><br><span class="line">http://121.199.167.xxx:12345/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ping 命令</span></span><br><span class="line"><span class="comment"># tailscale ping 命令可以用于测试 IP 连通性, 同时可以看到时如何连接目标节点的. 默认情况下 Ping 命令首先会使用 Derper 中继节点通信, 然后尝试 P2P 连接; 一旦 P2P 连接成功则自动停止 Ping</span></span><br><span class="line"><span class="comment"># 由于其先走 Derper 的特性也可以用来测试 Derper 连通性</span></span><br><span class="line">tailscale ping 10.1.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Status 命令</span></span><br><span class="line"><span class="comment"># 通过 tailscale status 命令可以查看当前节点与其他对等节点的连接方式, 通过此命令可以查看到当前节点可连接的节点以及是否走了 Derper 中继</span></span><br><span class="line">tailscale status</span><br><span class="line"></span><br><span class="line"><span class="comment"># NetCheck 命令</span></span><br><span class="line"><span class="comment"># 有些情况下我们可以确认是当前主机的网络问题导致没法走 P2P 连接, 但是我们又想了解一下当前的网络环境; 此时可以使用 tailscale netcheck 命令来检测当前的网络环境, 此命令将会打印出详细的网络环境报告</span></span><br><span class="line">tailscale netcheck</span><br></pre></td></tr></table></figure><h3 id="5-5-Docker-Compose-安装-可选">5.5 Docker Compose 安装(可选)</h3><p>该镜像默认开启了客户端验证, 所以请确保 <code>/var/run/tailscale</code> 内存在已加入 Headscale 成功的 tailscaled 实例的 sock 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.9'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">derper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mritd/derper</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">derper</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080/tcp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3456:3456/udp"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/timezone:/etc/timezone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/tailscale:/var/run/tailscale</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/var/lib/derper</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://www.jianshu.com/p/3a19483f2879" target="_blank" rel="noopener" title="https://www.jianshu.com/p/3a19483f2879">https://www.jianshu.com/p/3a19483f2879</a></p><p><a href="https://www.cnblogs.com/jonnyan/p/14175136.html" target="_blank" rel="noopener" title="https://www.cnblogs.com/jonnyan/p/14175136.html">https://www.cnblogs.com/jonnyan/p/14175136.html</a></p><p><a href="https://imnks.com/5534.html" target="_blank" rel="noopener" title="https://imnks.com/5534.html">https://imnks.com/5534.html</a></p><p><a href="https://tailscale.com/kb/" target="_blank" rel="noopener" title="https://tailscale.com/kb/">https://tailscale.com/kb/</a></p><p><a href="https://mritd.com/2022/10/19/use-headscale-to-build-a-p2p-network" target="_blank" rel="noopener" title="https://mritd.com/2022/10/19/use-headscale-to-build-a-p2p-network">https://mritd.com/2022/10/19/use-headscale-to-build-a-p2p-network</a></p><p><a href="https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale" target="_blank" rel="noopener" title="https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale">https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale</a></p><p><a href="https://icloudnative.io/posts/custom-derp-servers/" target="_blank" rel="noopener" title="https://icloudnative.io/posts/custom-derp-servers/">https://icloudnative.io/posts/custom-derp-servers/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、内网穿透概述&lt;/h1&gt;
&lt;h2 id=&quot;1、传统内网穿透介绍&quot;&gt;1、传统内网穿透介绍&lt;/h2&gt;
&lt;p&gt;传统内网穿透的方式为：内网设备&amp;lt;——&amp;gt;中转服务器&amp;lt;———&amp;gt;网络设备（手机、电脑），例如frp，nps，可以参考：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/124675640&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;内网穿透工具&quot;&gt;内网穿透工具&lt;/a&gt;；但是这种方法弊端也很明显&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中转服务器需要一定的费用进行支撑(带公网的云服务器)，如果是外网的服务器还可能存在被墙的风险&lt;/li&gt;
&lt;li&gt;中转服务器直接决定了中转的&amp;quot;速度&amp;quot;，而这个&amp;quot;速度&amp;quot;越快其对应的服务器带宽就越大，通常来说价格就越高&lt;/li&gt;
&lt;li&gt;需要一定的知识储备来搭建内网穿透的服务端，而且只能转发某个特定的端口&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.shawncoding.top/categories/Linux/"/>
    
    
    <category term="网络" scheme="https://blog.shawncoding.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>MDC学习笔记</title>
    <link href="https://blog.shawncoding.top/posts/ce853490.html"/>
    <id>https://blog.shawncoding.top/posts/ce853490.html</id>
    <published>2023-06-28T14:20:27.000Z</published>
    <updated>2023-06-28T14:27:09.214Z</updated>
    
    <content type="html"><![CDATA[<h1>一、MDC日志定位</h1><h2 id="1、概述">1、概述</h2><h3 id="1-1-简介">1.1 简介</h3><p>MDC是可以帮组我们 在多线程条件下记录追踪日志的功能，它支持 Log4J和LogBack 两种日志框架通常打印出的日志会有线程号等信息来标志当前日志属于哪个线程，然而由于线程是可以重复使用的，所以并不能很清晰的确认一个请求的日志范围。处理这种情况一般有两种处理方式：</p><ul><li>手动生成一个唯一序列号打印在日志中；</li><li>使用日志控件提供的MDC功能，生成一个唯一序列标记一个线程的日志</li></ul><p>在现网出现故障时，我们经常需要获取一次请求流程里的所有日志进行定位。如果请求只在一个线程里处理，则我们可以通过线程ID来过滤日志，但同时如果请求包含异步线程的处理，那么光靠线程ID就显得捉襟见肘了，这也是需要解决的一个问题</p><a id="more"></a><h3 id="1-2-MDC原理">1.2 MDC原理</h3><p><strong>MDC 可以看成是一个与当前线程绑定的哈希表</strong>，可以往其中添加键值对。MDC 中包含的内容可以被同一线程中执行的代码所访问。当前线程的子线程会继承其父线程中的 MDC 的内容。当需要记录日志时，只需要从 MDC 中获取所需的信息即可。MDC 的内容则由程序在适当的时候保存进去。对于一个 Web 应用来说，通常是在请求被处理的最开始保存这些数据。</p><p>如果是微服务之间的调用，则需要上层服务在 header 中添加标识同请求一起传输过来。下层服务直接使用上层服务的标识，就可以将日志串联起来</p><h2 id="2、MDC入门">2、MDC入门</h2><h3 id="2-1-配置日志文件">2.1 配置日志文件</h3><p>在resources下配置logback.xml，设置输出格式，默认是不会输出的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%X&#123;trace_id&#125;] [%level] [%thread] [%class:%line] - %m%n&lt;/pattern&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] [requestId=%X&#123;requestId&#125;] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-基础入门">2.2 基础入门</h3><p>SLF4J日志框架提供了一个MDC(Mapped Diagnostic Contexts)工具类，谷歌翻译为映射的诊断上下文，从字面上很难理解，我们可以先实战一把。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY = <span class="string">"requestId"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Main<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 入口传入请求ID</span></span><br><span class="line">        MDC.put(KEY, UUID.randomUUID().toString());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        logger.debug(<span class="string">"log in main thread 1"</span>);</span><br><span class="line">        logger.debug(<span class="string">"log in main thread 2"</span>);</span><br><span class="line">        logger.debug(<span class="string">"log in main thread 3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 出口移除请求ID</span></span><br><span class="line">        MDC.remove(KEY);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在main函数的入口调用<code>MDC.put()</code>方法传入请求ID，在出口调用<code>MDC.remove()</code>方法移除请求ID。配置好log4j2.xml文件后，运行main函数，可以在控制台看到以下日志输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2023-03-04 20:37:05.572 [main] [requestId=dab8412a-f070-4406-9940-89fcdbd3473f] DEBUG com.example.mdc.mdc.Main - <span class="built_in">log</span> <span class="keyword">in</span> main thread 1</span><br><span class="line">2023-03-04 20:37:05.572 [main] [requestId=dab8412a-f070-4406-9940-89fcdbd3473f] DEBUG com.example.mdc.mdc.Main - <span class="built_in">log</span> <span class="keyword">in</span> main thread 2</span><br><span class="line">2023-03-04 20:37:05.572 [main] [requestId=dab8412a-f070-4406-9940-89fcdbd3473f] DEBUG com.example.mdc.mdc.Main - <span class="built_in">log</span> <span class="keyword">in</span> main thread 3</span><br></pre></td></tr></table></figure><p>从日志中可以明显地看到花括号中包含了（映射的）请求ID(requestId)，这其实就是我们定位（诊断）问题的关键字（上下文）。有了MDC工具，只要在接口或切面植入<code>put()</code>和<code>remove()</code>代码，在现网定位问题时，我们就可以通过<code>grep requestId=xxx *.log</code>快速的过滤出某次请求的所有日志。</p><h3 id="2-3-进阶提升">2.3 进阶提升</h3><p>然而，MDC工具真的有我们所想的这么方便吗？回到我们开头，一次请求可能涉及多线程异步处理，那么在多线程异步的场景下，它是否还能正常运作呢？Talk is cheap, show me the code。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY = <span class="string">"requestId"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Main<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 入口传入请求ID</span></span><br><span class="line">        MDC.put(KEY, UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程打印日志</span></span><br><span class="line">        logger.debug(<span class="string">"log in main thread"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步线程打印日志</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                logger.debug(<span class="string">"log in other thread"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 出口移除请求ID</span></span><br><span class="line">        MDC.remove(KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码里我们新起了一个异步线程，并在匿名对象Runnable的<code>run()</code>方法打印日志。运行main函数，可以在控制台看到以下日志输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2023-03-04 20:38:06.594 [main] [requestId=bfbf71b4-2201-4558-b049-f613759eb88e] DEBUG com.example.mdc.mdc.Main - <span class="built_in">log</span> <span class="keyword">in</span> main thread</span><br><span class="line">2023-03-04 20:38:06.595 [Thread-0] [requestId=] DEBUG com.example.mdc.mdc.Main - <span class="built_in">log</span> <span class="keyword">in</span> other thread</span><br></pre></td></tr></table></figure><p>不幸的是，请求ID在异步线程里不打印了。这是怎么回事呢？要解决这个问题，我们就得知道MDC的实现原理。<strong>MDC之所以在异步线程中不生效是因为底层采用ThreadLocal作为数据结构</strong>，我们调用<code>MDC.put()</code>方法传入的请求ID只在当前线程有效。</p><p>知道了原理那么解决这个问题就轻而易举了，我们可以使用装饰器模式，新写一个<code>MDCRunnable</code>类对Runnable接口进行一层装饰。在创建<code>MDCRunnable</code>类时保存当前线程的MDC值，在执行<code>run()</code>方法时再将保存的MDC值拷贝到异步线程中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MDCRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable runnable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MDCRunnable</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runnable = runnable;</span><br><span class="line">        <span class="comment">// 保存当前线程的MDC值</span></span><br><span class="line">        <span class="keyword">this</span>.map = MDC.getCopyOfContextMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入已保存的MDC值</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            MDC.put(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 装饰器模式，执行run方法</span></span><br><span class="line">        runnable.run();</span><br><span class="line">        <span class="comment">// 移除已保存的MDC值</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            MDC.remove(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，我们需要对main函数里创建的Runnable实现类进行装饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY = <span class="string">"requestId"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Main<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService EXECUTOR = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 入口传入请求ID</span></span><br><span class="line">        MDC.put(KEY, UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程打印日志</span></span><br><span class="line">        logger.debug(<span class="string">"log in main thread"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步线程打印日志，用MDCRunnable装饰Runnable</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MDCRunnable(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                logger.debug(<span class="string">"log in other thread"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步线程池打印日志，用MDCRunnable装饰Runnable</span></span><br><span class="line">        EXECUTOR.execute(<span class="keyword">new</span> MDCRunnable(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                logger.debug(<span class="string">"log in other thread pool"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">        EXECUTOR.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 出口移除请求ID</span></span><br><span class="line">        MDC.remove(KEY);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行main函数，将会输出以下日志，可以发现多线程也请求同一个requestId了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2023-03-04 20:41:16.255 [main] [requestId=6bc1ffaa-379f-489c-8f12-59dba843472d] DEBUG com.example.mdc.mdc.Main - <span class="built_in">log</span> <span class="keyword">in</span> main thread</span><br><span class="line">2023-03-04 20:41:16.256 [Thread-0] [requestId=6bc1ffaa-379f-489c-8f12-59dba843472d] DEBUG com.example.mdc.mdc.Main - <span class="built_in">log</span> <span class="keyword">in</span> other thread</span><br><span class="line">2023-03-04 20:41:16.256 [pool-1-thread-1] [requestId=6bc1ffaa-379f-489c-8f12-59dba843472d] DEBUG com.example.mdc.mdc.Main - <span class="built_in">log</span> <span class="keyword">in</span> other thread pool</span><br></pre></td></tr></table></figure><h2 id="3、MDC-Spring">3、MDC+Spring</h2><p>对于一个 Spring 应用来说，我们想一下 Http 请求到达我们具体接口的时候，是不是还有 拦截器 <strong>HandlerInterceptor</strong> 和 过滤器 <strong>Filter</strong> 这两个，所以我们 把在 装有唯一序列标记的 MDC，就可以放这两个里面<code>MDC.put(&quot;RequestId&quot;, UUID.randomUUID().toString());</code></p><p><strong>我们可以让前端调用后端接口的时候，在 Header 里面生成一个唯一的字符串作为我们放 MDC的 RequestId</strong></p><h3 id="3-1-拦截器方式">3.1 拦截器方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogMdcHandlerInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MDC.put(<span class="string">"RequestId"</span>, UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MDC.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-过滤器方式">3.2 过滤器方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MDCFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUEST_ID_HEADER = <span class="string">"RequestId"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUEST_ID = <span class="string">"RequestId"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ProcessId_ID = <span class="string">"processId"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">        String requestId = httpRequest.getHeader(REQUEST_ID_HEADER);</span><br><span class="line">        <span class="keyword">if</span> (requestId == <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestId = UUID.randomUUID().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        MDC.put(REQUEST_ID, requestId);</span><br><span class="line">        httpResponse.setHeader(REQUEST_ID_HEADER, requestId);</span><br><span class="line">        <span class="keyword">int</span> processId = getProcessID();</span><br><span class="line">        MDC.put(ProcessId_ID, String.valueOf(processId));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            MDC.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getProcessID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(runtimeMXBean.getName().split(<span class="string">"@"</span>)[<span class="number">0</span>])</span><br><span class="line">                .intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-日志配置">3.3 日志配置</h3><p>在日志上下文增加参数，在日志中可以打印该参数，如RequestId，则日志配置：<code>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{RequestId}] [%thread] %-5level %logger{36} - %msg%n</code>则 RequestId 会打印在中括号里，%X{参数名} 是格式</p><p>这里提供另一种配置方式，仅供参考，建议还是单独配置logback.xml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Configuration:</span></span><br><span class="line">  <span class="attr">Appenders:</span></span><br><span class="line">    <span class="attr">Console:</span>  <span class="comment"># 输出到控制台</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">CONSOLE</span></span><br><span class="line">      <span class="attr">target:</span> <span class="string">SYSTEM_OUT</span></span><br><span class="line">      <span class="attr">ThresholdFilter:</span></span><br><span class="line">        <span class="attr">level:</span> <span class="string">$&#123;sys:log.level.console&#125;</span> </span><br><span class="line">        <span class="attr">onMatch:</span> <span class="string">ACCEPT</span></span><br><span class="line">        <span class="attr">onMismatch:</span> <span class="string">DENY</span></span><br><span class="line">      <span class="attr">PatternLayout:</span></span><br><span class="line">        <span class="attr">pattern:</span> <span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%X&#123;RequestId&#125;] [%thread] [%-5level] [%logger:%L] [%m] %n"</span></span><br><span class="line">    <span class="attr">RollingFile:</span> <span class="comment"># 输出到文件，超过128MB归档</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ROLLING_FILE</span></span><br><span class="line">        <span class="attr">ignoreExceptions:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">fileName:</span> <span class="string">$&#123;log.path&#125;/$&#123;project.name&#125;/default.log</span></span><br><span class="line">        <span class="attr">filePattern:</span> <span class="string">"$&#123;log.path&#125;/$$&#123;date:yyyy-MM&#125;/$&#123;project.name&#125;/default-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span></span><br><span class="line">        <span class="attr">PatternLayout:</span></span><br><span class="line">          <span class="attr">pattern:</span> <span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%X&#123;RequestId&#125;] [%thread] [%-5level] [%logger:%L] [%m] %n"</span></span><br><span class="line">        <span class="attr">Policies:</span></span><br><span class="line">          <span class="attr">SizeBasedTriggeringPolicy:</span></span><br><span class="line">            <span class="attr">size:</span> <span class="string">"128 MB"</span></span><br><span class="line">        <span class="attr">DefaultRolloverStrategy:</span></span><br><span class="line">          <span class="attr">max:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、MDC日志定位&lt;/h1&gt;
&lt;h2 id=&quot;1、概述&quot;&gt;1、概述&lt;/h2&gt;
&lt;h3 id=&quot;1-1-简介&quot;&gt;1.1 简介&lt;/h3&gt;
&lt;p&gt;MDC是可以帮组我们 在多线程条件下记录追踪日志的功能，它支持 Log4J和LogBack 两种日志框架通常打印出的日志会有线程号等信息来标志当前日志属于哪个线程，然而由于线程是可以重复使用的，所以并不能很清晰的确认一个请求的日志范围。处理这种情况一般有两种处理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动生成一个唯一序列号打印在日志中；&lt;/li&gt;
&lt;li&gt;使用日志控件提供的MDC功能，生成一个唯一序列标记一个线程的日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在现网出现故障时，我们经常需要获取一次请求流程里的所有日志进行定位。如果请求只在一个线程里处理，则我们可以通过线程ID来过滤日志，但同时如果请求包含异步线程的处理，那么光靠线程ID就显得捉襟见肘了，这也是需要解决的一个问题&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://blog.shawncoding.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>离线数据同步Sqoop与DataX</title>
    <link href="https://blog.shawncoding.top/posts/dcc67dd9.html"/>
    <id>https://blog.shawncoding.top/posts/dcc67dd9.html</id>
    <published>2023-06-28T14:19:16.000Z</published>
    <updated>2023-06-28T14:27:09.217Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Sqoop安装与使用</h1><h2 id="1、简介">1、简介</h2><p>Sqoop全称是 <strong>Apache Sqoop</strong>(现已经抛弃)，是一个开源工具，能够将数据从数据存储空间（数据仓库，系统文档存储空间，关系型数据库）导入 Hadoop 的 HDFS或列式数据库HBase，供 MapReduce 分析数据使用。数据传输的过程大部分是通过 MapReduce 过程来实现，只需要依赖数据库的Schema信息Sqoop所执行的操作是并行的，数据传输性能高，具备较好的容错性，并且能够自动转换数据类型。</p><p>Sqoop是一个为高效传输海量数据而设计的工具，一般用在从关系型数据库同步数据到非关系型数据库中。Sqoop专门是为大数据集设计的。Sqoop支持增量更新，将新记录添加到最近一次的导出的数据源上，或者指定上次修改的时间戳。</p><a id="more"></a><h2 id="2、Sqoop安装">2、Sqoop安装</h2><blockquote><p><a href="https://sqoop.apache.org/" target="_blank" rel="noopener" title="https://sqoop.apache.org/">https://sqoop.apache.org/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里我使用了1.4.6为例子，1.4.7还需要common包</span></span><br><span class="line">wget http://archive.apache.org/dist/sqoop/1.4.6/sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxf sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz -C /opt/module/</span><br><span class="line"><span class="built_in">cd</span> /opt/module</span><br><span class="line">mv sqoop-1.4.6.bin__hadoop-2.0.4-alpha/ sqoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line"><span class="comment"># 进入到/opt/module/sqoop/conf目录，重命名配置文件</span></span><br><span class="line">mv sqoop-env-template.sh sqoop-env.sh</span><br><span class="line">vim sqoop-env.sh</span><br><span class="line"><span class="comment"># 添加如下内容</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=/opt/module/hadoop-3.1.3</span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=/opt/module/hadoop-3.1.3</span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/opt/module/hive</span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/opt/module/zookeeper-3.5.7</span><br><span class="line"><span class="built_in">export</span> ZOOCFGDIR=/opt/module/zookeeper-3.5.7/conf</span><br><span class="line"><span class="comment"># 拷贝JDBC驱动</span></span><br><span class="line">cp mysql-connector-java-5.1.48.jar /opt/module/sqoop/lib/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证Sqoop</span></span><br><span class="line">bin/sqoop <span class="built_in">help</span></span><br><span class="line"><span class="comment"># 测试Sqoop是否能够成功连接数据库</span></span><br><span class="line">bin/sqoop list-databases --connect jdbc:mysql://hadoop102:3306/ --username root --password 123456</span><br></pre></td></tr></table></figure><h2 id="3、Sqoop实例">3、Sqoop实例</h2><h3 id="3-1-Mysql导入Hadoop">3.1 Mysql导入Hadoop</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /opt/module/sqoop/bin</span></span><br><span class="line"><span class="comment"># ======================数据导入到HDFS====================</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql://hadoop102/datax \</span><br><span class="line">--username root \</span><br><span class="line">--password 123456 \</span><br><span class="line">--table student \</span><br><span class="line">--target-dir /tmp/root/111 \</span><br><span class="line">--fields-terminated-by <span class="string">','</span> \</span><br><span class="line">-m 1 </span><br><span class="line"><span class="comment"># table &lt;table name&gt;抽取mysql数据库中的表</span></span><br><span class="line"><span class="comment"># --target-dir &lt;path&gt;指定导入hdfs的具体位置。默认生成在为/user/&lt;user&gt;//目录下</span></span><br><span class="line"><span class="comment"># -m &lt;数值&gt;执行map任务的个数，默认是4个</span></span><br><span class="line"><span class="comment"># -m 参数可以指定 map 任务的个数，默认是 4 个。如果指定为 1 个 map 任务的话，最终生成的 part-m-xxxxx 文件个数就为 1。在数据充足的情况下，生成的文件个数与指定 map 任务的个数是等值的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================数据导入到Hive中======================</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql://10.6.6.72:3309/hive \</span><br><span class="line">--username root \</span><br><span class="line">--password root123 \</span><br><span class="line">--hive-import \</span><br><span class="line">--table ROLES \</span><br><span class="line">--hive-database default \</span><br><span class="line">--hive-table roles_test \</span><br><span class="line">--fields-terminated-by <span class="string">','</span> \</span><br><span class="line">-m 1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># --hive-import将表导入Hive中</span></span><br><span class="line"><span class="comment"># -m 参数可以指定 map 任务的个数，默认是 4 个。如果指定为 1 个 map 任务的话，最终生成在 /warehouse/tablespace/managed/hive/roles_test/base_xxxx 目录下的 000000_x 文件个数就为 1 。在数据充足的情况下，生成的文件个数与指定 map 任务的个数是等值的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================据导入到HBase中============================</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql://10.6.6.72:3309/hive \</span><br><span class="line">--username root \</span><br><span class="line">--password root123 \</span><br><span class="line">--table ROLES \</span><br><span class="line">--hbase-table roles_test \</span><br><span class="line">--column-family info \</span><br><span class="line">--hbase-row-key ROLE_ID \</span><br><span class="line">--hbase-create-table \</span><br><span class="line">--hbase-bulkload</span><br><span class="line"></span><br><span class="line"><span class="comment"># --column-family   &lt;family&gt;设置导入的目标列族</span></span><br><span class="line"><span class="comment"># --hbase-row-key   &lt;col&gt;指定要用作行键的输入列；如果没有该参数，默认为mysql表的主键</span></span><br><span class="line"><span class="comment"># --hbase-create-table 如果执行，则创建缺少的HBase表</span></span><br><span class="line"><span class="comment"># --hbase-bulkload 启用批量加载</span></span><br><span class="line"><span class="comment"># 总结：roles_test 表的 row_key 是源表的主键 ROLE_ID 值，其余列均放入了 info 这个列族中</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Hadoop导出到Mysql">3.2 Hadoop导出到Mysql</h3><p>Sqoop export 工具将一组文件从 HDFS 导出回 Mysql 。目标表必须已存在于数据库中。根据用户指定的分隔符读取输入文件并将其解析为一组记录。默认操作是将这些转换为一组INSERT将记录注入数据库的语句。在“更新模式”中，Sqoop 将生成 UPDATE 替换数据库中现有记录的语句，并且在“调用模式”下，Sqoop 将为每条记录进行存储过程调用，将 HDFS、Hive、HBase的数据导出到 Mysql 表中，都会用到下表的参数：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>–table &lt;table name&gt;</td><td>指定要导出的mysql目标表</td></tr><tr><td>–export-dir &lt;path&gt;</td><td>指定要导出的hdfs路径</td></tr><tr><td>–input-fields-terminated-by &lt;char&gt;</td><td>指定输入字段分隔符</td></tr><tr><td>-m &lt;数值&gt;</td><td>执行map任务的个数，默认是4个</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =======================HDFS数据导出至Mysql========================</span></span><br><span class="line"><span class="comment"># 首先在 test 数据库中创建 roles_hdfs 数据表</span></span><br><span class="line">sqoop <span class="built_in">export</span> \</span><br><span class="line">--connect jdbc:mysql://10.6.6.72:3309/<span class="built_in">test</span> \</span><br><span class="line">--username root \</span><br><span class="line">--password root123 \</span><br><span class="line">--table roles_hdfs \</span><br><span class="line">--<span class="built_in">export</span>-dir /tmp/root/111 \</span><br><span class="line">--input-fields-terminated-by <span class="string">','</span> \</span><br><span class="line">-m 1</span><br><span class="line"><span class="comment"># 执行数据导入过程中，会触发 MapReduce 任务。任务成功之后，前往 mysql 数据库查看是否导入成功</span></span><br><span class="line"><span class="comment"># =======================Hive数据导出至Mysql=======================</span></span><br><span class="line">sqoop <span class="built_in">export</span> \</span><br><span class="line">--connect jdbc:mysql://10.6.6.72:3309/<span class="built_in">test</span> \</span><br><span class="line">--username root \</span><br><span class="line">--password root123 \</span><br><span class="line">--table roles_hive \</span><br><span class="line">--<span class="built_in">export</span>-dir /warehouse/tablespace/managed/hive/roles_test/base_0000001 \</span><br><span class="line">--input-fields-terminated-by <span class="string">','</span> \</span><br><span class="line">-m 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================HBase数据不支持导出至Mysql==================</span></span><br></pre></td></tr></table></figure><p>其他具体可以参考：<a href="https://juejin.cn/post/6994768829163241479" target="_blank" rel="noopener" title="sqoop学习，这一篇文章就够了">sqoop学习，这一篇文章就够了</a> / <a href="https://cloud.tencent.com/developer/article/1479981" target="_blank" rel="noopener" title="Sqoop1.4.7实现将Mysql数据与Hadoop3.0数据互相抽取">Sqoop1.4.7实现将Mysql数据与Hadoop3.0数据互相抽取</a></p><h1>二、DataX概述与入门</h1><h2 id="1、DataX概述">1、DataX概述</h2><blockquote><p><a href="https://github.com/alibaba/DataX" target="_blank" rel="noopener" title="https://github.com/alibaba/DataX">https://github.com/alibaba/DataX</a></p></blockquote><h3 id="1-1-简介">1.1 简介</h3><p>DataX 是阿里巴巴开源的一个异构数据源离线同步工具，致力于实现包括关系型数据库(MySQL、Oracle 等)、HDFS、Hive、ODPS、HBase、FTP 等各种异构数据源之间稳定高效的数据同步功能</p><p>为了解决异构数据源同步问题，DataX 将复杂的网状的同步链路变成了星型数据链路， DataX 作为中间传输载体负责连接各种数据源。当需要接入一个新的数据源的时候，只需要将此数据源对接到DataX，便能跟已有的数据源做到无缝数据同步。DataX 目前已经有了比较全面的插件体系，主流的RDBMS 数据库、NOSQL、大数据计算系统都已经接入</p><h3 id="1-2-框架设计">1.2 框架设计</h3><ul><li>Reader：数据采集模块，负责采集数据源的数据，将数据发送给Framework</li><li>Writer：数据写入模块，负责不断向Framework取数据，并将数据写入到目的端</li><li>Framework：用于连接reader和writer，作为两者的数据传输通道，并处理缓冲，流控，并发，数据转换等核心技术问题</li></ul><h3 id="1-3-运行原理">1.3 运行原理</h3><p><img src="http://qnypic.shawncoding.top/blog/202305030923183.png" alt></p><p>举例来说，用户提交了一个 DataX 作业，并且配置了 20 个并发，目的是将一个 100 张分表的 mysql 数据同步到 odps 里面。 DataX 的调度决策思路是：</p><ul><li>DataXJob 根据分库分表切分成了 100 个 Task</li><li>根据 20 个并发，DataX 计算共需要分配 4 个 TaskGroup</li><li>4 个 TaskGroup 平分切分好的 100 个 Task，每一个 TaskGroup 负责以 5 个并发共计运行 25 个 Task</li></ul><h2 id="2、DataX与-Sqoop-的对比">2、DataX与 Sqoop 的对比</h2><blockquote><p>sqoop参考文档：<a href="https://juejin.cn/post/6994768829163241479" target="_blank" rel="noopener" title="https://juejin.cn/post/6994768829163241479">https://juejin.cn/post/6994768829163241479</a></p></blockquote><p>Sqoop已经被apache丢弃，后面建议都用datax</p><table><thead><tr><th><strong>功****能</strong></th><th><strong>DataX</strong></th><th><strong>Sqoop</strong></th></tr></thead><tbody><tr><td>运行模式</td><td>单进程多线程</td><td>MR</td></tr><tr><td>MySQL 读写</td><td>单机压力大；读写粒度容易控制</td><td>MR 模式重，写出错处理麻烦</td></tr><tr><td>Hive 读写</td><td>单机压力大</td><td>很好</td></tr><tr><td>文件格式</td><td>orc 支持</td><td>orc 不支持，可添加</td></tr><tr><td>分布式</td><td>不支持，可以通过调度系统规避</td><td>支持</td></tr><tr><td>流控</td><td>有流控功能</td><td>需要定制</td></tr><tr><td>统计信息</td><td>已有一些统计，上报需定制</td><td>没有，分布式的数据收集不方便</td></tr><tr><td>数据校验</td><td>在 core 部分有校验功能</td><td>没有，分布式的数据收集不方便</td></tr><tr><td>监控</td><td>需要定制</td><td>需要定制</td></tr><tr><td>社区</td><td>开源不久，社区不活跃</td><td>一直活跃，核心部分变动很少</td></tr></tbody></table><h2 id="3、快速入门">3、快速入门</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要jdk和python</span></span><br><span class="line">wget https://datax-opensource.oss-cn-hangzhou.aliyuncs.com/202303/datax.tar.gz</span><br><span class="line">tar -zxvf datax.tar.gz -C /opt/module/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行自检脚本</span></span><br><span class="line"><span class="built_in">cd</span> /opt/module/datax/bin/</span><br><span class="line">python datax.py /opt/module/datax/job/job.json</span><br></pre></td></tr></table></figure><h1>三、DataX常用入门案例</h1><h2 id="1、从stream-流读取数据并打印到控制台">1、从stream 流读取数据并打印到控制台</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会显示出模板</span></span><br><span class="line"><span class="built_in">cd</span> /opt/module/datax/bin/</span><br><span class="line">python datax.py -r streamreader -w streamwriter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模板编写配置文件，在job目录下编码</span></span><br><span class="line">vim stream2stream.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"job"</span>: &#123;</span><br><span class="line">   <span class="string">"content"</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="string">"reader"</span>: &#123;</span><br><span class="line">         <span class="string">"name"</span>: <span class="string">"streamreader"</span>,</span><br><span class="line">         <span class="string">"parameter"</span>: &#123;</span><br><span class="line">           <span class="string">"sliceRecordCount"</span>: 10,</span><br><span class="line">           <span class="string">"column"</span>: [</span><br><span class="line">             &#123;</span><br><span class="line">               <span class="string">"type"</span>: <span class="string">"long"</span>,</span><br><span class="line">               <span class="string">"value"</span>: <span class="string">"10"</span></span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">               <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">               <span class="string">"value"</span>: <span class="string">"hello，DataX"</span></span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="string">"writer"</span>: &#123;</span><br><span class="line">         <span class="string">"name"</span>: <span class="string">"streamwriter"</span>,</span><br><span class="line">         <span class="string">"parameter"</span>: &#123;</span><br><span class="line">           <span class="string">"encoding"</span>: <span class="string">"UTF-8"</span>,</span><br><span class="line">           <span class="string">"print"</span>: <span class="literal">true</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"setting"</span>: &#123;</span><br><span class="line">     <span class="string">"speed"</span>: &#123;</span><br><span class="line">       <span class="string">"channel"</span>: 1</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">/opt/module/datax/bin/datax.py /opt/module/datax/job/stream2stream.json</span><br></pre></td></tr></table></figure><h2 id="2、读取-MySQL-中的数据存放到-HDFS">2、读取 MySQL 中的数据存放到 HDFS</h2><h3 id="2-1-查看官方模板">2.1 查看官方模板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/alibaba/DataX/blob/master/mysqlreader/doc/mysqlreader.md</span></span><br><span class="line"><span class="comment"># https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md</span></span><br><span class="line"><span class="comment"># MySQL的模板</span></span><br><span class="line">python /opt/module/datax/bin/datax.py -r mysqlreader -w hdfswriter</span><br></pre></td></tr></table></figure><p><img src="http://qnypic.shawncoding.top/blog/202305030923184.png" alt></p><p><img src="http://qnypic.shawncoding.top/blog/202305030923185.png" alt></p><h3 id="2-2-数据准备与配置">2.2 数据准备与配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database datax;</span><br><span class="line">mysql&gt; use datax;</span><br><span class="line">mysql&gt; create table student(id int,name varchar(20));</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into student values(1001,'zhangsan'),(1002,'lisi'),(1003,'wangwu');</span><br></pre></td></tr></table></figure><p><code>vim /opt/module/datax/job/mysql2hdfs.json</code>这里我配置了ha</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"job"</span>: &#123;</span><br><span class="line">   <span class="attr">"content"</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">"reader"</span>: &#123;</span><br><span class="line">         <span class="attr">"name"</span>: <span class="string">"mysqlreader"</span>, </span><br><span class="line">         <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">           <span class="attr">"column"</span>: [</span><br><span class="line">             <span class="string">"id"</span>,</span><br><span class="line">             <span class="string">"name"</span></span><br><span class="line">           ], </span><br><span class="line">           <span class="attr">"connection"</span>: [</span><br><span class="line">             &#123;</span><br><span class="line">               <span class="attr">"jdbcUrl"</span>: [</span><br><span class="line">                 <span class="string">"jdbc:mysql://hadoop102:3306/datax"</span></span><br><span class="line">               ], </span><br><span class="line">               <span class="attr">"table"</span>: [</span><br><span class="line">                 <span class="string">"student"</span></span><br><span class="line">               ]</span><br><span class="line">             &#125;</span><br><span class="line">           ], </span><br><span class="line">           <span class="attr">"username"</span>: <span class="string">"root"</span>, </span><br><span class="line">           <span class="attr">"password"</span>: <span class="string">"123456"</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;, </span><br><span class="line">       <span class="attr">"writer"</span>: &#123;</span><br><span class="line">         <span class="attr">"name"</span>: <span class="string">"hdfswriter"</span>, </span><br><span class="line">         <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">           <span class="attr">"column"</span>: [</span><br><span class="line">             &#123;</span><br><span class="line">               <span class="attr">"name"</span>: <span class="string">"id"</span>,</span><br><span class="line">               <span class="attr">"type"</span>: <span class="string">"int"</span></span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">               <span class="attr">"name"</span>: <span class="string">"name"</span>,</span><br><span class="line">               <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">             &#125;</span><br><span class="line">           ], </span><br><span class="line">           <span class="attr">"defaultFS"</span>: <span class="string">"hdfs://testDfs"</span>, </span><br><span class="line">           <span class="attr">"fieldDelimiter"</span>: <span class="string">"\t"</span>, </span><br><span class="line">           <span class="attr">"fileName"</span>: <span class="string">"student.txt"</span>, </span><br><span class="line">           <span class="attr">"fileType"</span>: <span class="string">"text"</span>, </span><br><span class="line">           <span class="attr">"path"</span>: <span class="string">"/"</span>, </span><br><span class="line">           <span class="attr">"writeMode"</span>: <span class="string">"append"</span>,</span><br><span class="line">           <span class="attr">"hadoopConfig"</span>:&#123;</span><br><span class="line">            <span class="attr">"dfs.nameservices"</span>: <span class="string">"testDfs"</span>,</span><br><span class="line">            <span class="attr">"dfs.ha.namenodes.testDfs"</span>: <span class="string">"namenode1,namenode2,namenode3"</span>,</span><br><span class="line">            <span class="attr">"dfs.namenode.rpc-address.aliDfs.namenode1"</span>: <span class="string">"hadoop102:8020"</span>,</span><br><span class="line">            <span class="attr">"dfs.namenode.rpc-address.aliDfs.namenode2"</span>: <span class="string">"hadoop103:8020"</span>,</span><br><span class="line">            <span class="attr">"dfs.namenode.rpc-address.aliDfs.namenode3"</span>: <span class="string">"hadoop104:8020"</span>,</span><br><span class="line">            <span class="attr">"dfs.client.failover.proxy.provider.testDfs"</span>: <span class="string">"org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ], </span><br><span class="line">   <span class="attr">"setting"</span>: &#123;</span><br><span class="line">     <span class="attr">"speed"</span>: &#123;</span><br><span class="line">       <span class="attr">"channel"</span>: <span class="string">"1"</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-执行与结果">2.3 执行与结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python /opt/module/datax/bin/datax.py /opt/module/datax/job/mysql2hdfs.json</span><br><span class="line"><span class="comment"># 注意：HdfsWriter 实际执行时会在该文件名后添加随机的后缀作为每个线程写入实际文件名</span></span><br></pre></td></tr></table></figure><h2 id="3、读取-HDFS-数据写入-MySQL">3、读取 HDFS 数据写入 MySQL</h2><blockquote><p><a href="https://github.com/alibaba/DataX/blob/master/hdfsreader/doc/hdfsreader.md" target="_blank" rel="noopener" title="https://github.com/alibaba/DataX/blob/master/hdfsreader/doc/hdfsreader.md">https://github.com/alibaba/DataX/blob/master/hdfsreader/doc/hdfsreader.md</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改名</span></span><br><span class="line">hadoop fs -mv /student.txt* /student.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看官方模板</span></span><br><span class="line">python bin/datax.py -r hdfsreader -w mysqlwriter</span><br></pre></td></tr></table></figure><p>创建配置文件<code>vim job/hdfs2mysql.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"job"</span>: &#123;</span><br><span class="line">    <span class="attr">"content"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"reader"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"hdfsreader"</span>, <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">            <span class="attr">"column"</span>: [<span class="string">"*"</span>],</span><br><span class="line">            <span class="attr">"defaultFS"</span>: <span class="string">"hdfs://hadoop102:8020"</span>, </span><br><span class="line">            <span class="attr">"encoding"</span>: <span class="string">"UTF-8"</span>, </span><br><span class="line">            <span class="attr">"fieldDelimiter"</span>: <span class="string">"\t"</span>,</span><br><span class="line">            <span class="attr">"fileType"</span>: <span class="string">"text"</span>, </span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"/student.txt"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"writer"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"mysqlwriter"</span>, </span><br><span class="line">          <span class="attr">"parameter"</span>: &#123;</span><br><span class="line">            <span class="attr">"column"</span>: [</span><br><span class="line">              <span class="string">"id"</span>, <span class="string">"name"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"connection"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"jdbcUrl"</span>: <span class="string">"jdbc:mysql://hadoop102:3306/datax"</span>, </span><br><span class="line">                <span class="attr">"table"</span>: [<span class="string">"student2"</span>]</span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"password"</span>: <span class="string">"123456"</span>, </span><br><span class="line">            <span class="attr">"username"</span>: <span class="string">"root"</span>, </span><br><span class="line">            <span class="attr">"writeMode"</span>: <span class="string">"insert"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"setting"</span>: &#123;</span><br><span class="line">      <span class="attr">"speed"</span>: &#123;</span><br><span class="line">        <span class="attr">"channel"</span>: <span class="string">"1"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于hadoop高可用的配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"hadoopConfig":&#123;</span><br><span class="line">       "dfs.nameservices": "testDfs",</span><br><span class="line">       "dfs.ha.namenodes.testDfs": "namenode1,namenode2",</span><br><span class="line">       "dfs.namenode.rpc-address.aliDfs.namenode1": "",</span><br><span class="line">       "dfs.namenode.rpc-address.aliDfs.namenode2": "",</span><br><span class="line">       "dfs.client.failover.proxy.provider.testDfs": "org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 MySQL 的 datax 数据库中创建 student2</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use datax;</span><br><span class="line">mysql&gt; create table student2(id int,name varchar(20));</span><br></pre></td></tr></table></figure><p>开始执行<code>python bin/datax.py job/hdfs2mysql.json</code></p><h2 id="4、其他数据库">4、其他数据库</h2><blockquote><p>详见官网：<a href="https://github.com/alibaba/DataX" target="_blank" rel="noopener" title="https://github.com/alibaba/DataX">https://github.com/alibaba/DataX</a></p></blockquote><h1>四、DataX源码分析</h1><h2 id="1、总体执行流程">1、总体执行流程</h2><p><img src="http://qnypic.shawncoding.top/blog/202305030923186.png" alt></p><h2 id="2、程序入口">2、程序入口</h2><p><a href="http://datax.py" target="_blank" rel="noopener">datax.py</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">ENGINE_COMMAND = <span class="string">"java -server $&#123;jvm&#125; %s -classpath %s  $&#123;params&#125; com.alibaba.datax.core.Engine -mode $&#123;mode&#125; -jobid $&#123;jobid&#125; -job $&#123;job&#125;"</span> % (DEFAULT_PROPERTY_CONF, CLASS_PATH)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到入口类com.alibaba.datax.core.Engine，搜索main方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Configuration allConf)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">//JobContainer会在schedule后再行进行设置和调整值</span></span><br><span class="line">        <span class="keyword">int</span> channelNumber =<span class="number">0</span>;</span><br><span class="line">        AbstractContainer container;</span><br><span class="line">        <span class="keyword">long</span> instanceId;</span><br><span class="line">        <span class="keyword">int</span> taskGroupId = -<span class="number">1</span>;</span><br><span class="line">        ......</span><br><span class="line">        container.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JobContainer.java</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jobContainer主要负责的工作全部在start()里面，包括init、prepare、split、scheduler、</span></span><br><span class="line"><span class="comment"> * post以及destroy和statistics</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LOG.info(<span class="string">"DataX jobContainer starts job."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> hasException = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isDryRun = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.startTimeStamp = System.currentTimeMillis();</span><br><span class="line">        isDryRun = configuration.getBool(CoreConstant.DATAX_JOB_SETTING_DRYRUN, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(isDryRun) &#123;</span><br><span class="line">            LOG.info(<span class="string">"jobContainer starts to do preCheck ..."</span>);</span><br><span class="line">            <span class="keyword">this</span>.preCheck();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userConf = configuration.clone();</span><br><span class="line">            LOG.debug(<span class="string">"jobContainer starts to do preHandle ..."</span>);</span><br><span class="line">            <span class="comment">//Job 前置操作</span></span><br><span class="line">            <span class="keyword">this</span>.preHandle();</span><br><span class="line"></span><br><span class="line">            LOG.debug(<span class="string">"jobContainer starts to do init ..."</span>);</span><br><span class="line">            <span class="comment">//初始化 reader 和 writer</span></span><br><span class="line">            <span class="keyword">this</span>.init();</span><br><span class="line">            LOG.info(<span class="string">"jobContainer starts to do prepare ..."</span>);</span><br><span class="line">            <span class="comment">//全局准备工作，比如 odpswriter 清空目标表</span></span><br><span class="line">            <span class="keyword">this</span>.prepare();</span><br><span class="line">            LOG.info(<span class="string">"jobContainer starts to do split ..."</span>);</span><br><span class="line">            <span class="comment">//拆分 Task</span></span><br><span class="line">            <span class="keyword">this</span>.totalStage = <span class="keyword">this</span>.split();</span><br><span class="line">            LOG.info(<span class="string">"jobContainer starts to do schedule ..."</span>);</span><br><span class="line">            <span class="keyword">this</span>.schedule();</span><br><span class="line">            LOG.debug(<span class="string">"jobContainer starts to do post ..."</span>);</span><br><span class="line">            <span class="keyword">this</span>.post();</span><br><span class="line"></span><br><span class="line">            LOG.debug(<span class="string">"jobContainer starts to do postHandle ..."</span>);</span><br><span class="line">            <span class="keyword">this</span>.postHandle();</span><br><span class="line">            LOG.info(<span class="string">"DataX jobId [&#123;&#125;] completed successfully."</span>, <span class="keyword">this</span>.jobId);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.invokeHooks();</span><br><span class="line">       ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Task-切分逻辑">3、Task 切分逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行reader和writer最细粒度的切分，需要注意的是，writer的切分结果要参照reader的切分结果，</span></span><br><span class="line"><span class="comment"> * 达到切分后数目相等，才能满足1：1的通道模型，所以这里可以将reader和writer的配置整合到一起，</span></span><br><span class="line"><span class="comment"> * 然后，为避免顺序给读写端带来长尾影响，将整合的结果shuffler掉</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">split</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.adjustChannelNumber();</span><br><span class="line">    ......</span><br><span class="line">     List&lt;Configuration&gt; readerTaskConfigs = <span class="keyword">this</span></span><br><span class="line">            .doReaderSplit(<span class="keyword">this</span>.needChannelNumber);</span><br><span class="line">    <span class="keyword">int</span> taskNumber = readerTaskConfigs.size();</span><br><span class="line">    List&lt;Configuration&gt; writerTaskConfigs = <span class="keyword">this</span></span><br><span class="line">            .doWriterSplit(taskNumber);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//并发数的确定</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustChannelNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> needChannelNumberByByte = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">int</span> needChannelNumberByRecord = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isByteLimit = (<span class="keyword">this</span>.configuration.getInt(</span><br><span class="line">            CoreConstant.DATAX_JOB_SETTING_SPEED_BYTE, <span class="number">0</span>) &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (isByteLimit) &#123;</span><br><span class="line">        <span class="keyword">long</span> globalLimitedByteSpeed = <span class="keyword">this</span>.configuration.getInt(</span><br><span class="line">                CoreConstant.DATAX_JOB_SETTING_SPEED_BYTE, <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在byte流控情况下，单个Channel流量最大值必须设置，否则报错！</span></span><br><span class="line">        Long channelLimitedByteSpeed = <span class="keyword">this</span>.configuration</span><br><span class="line">                .getLong(CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_BYTE);</span><br><span class="line">        <span class="keyword">if</span> (channelLimitedByteSpeed == <span class="keyword">null</span> || channelLimitedByteSpeed &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> DataXException.asDataXException(</span><br><span class="line">                    FrameworkErrorCode.CONFIG_ERROR,</span><br><span class="line">                    <span class="string">"在有总bps限速条件下，单个channel的bps值不能为空，也不能为非正数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        needChannelNumberByByte =</span><br><span class="line">                (<span class="keyword">int</span>) (globalLimitedByteSpeed / channelLimitedByteSpeed);</span><br><span class="line">        needChannelNumberByByte =</span><br><span class="line">                needChannelNumberByByte &gt; <span class="number">0</span> ? needChannelNumberByByte : <span class="number">1</span>;</span><br><span class="line">        LOG.info(<span class="string">"Job set Max-Byte-Speed to "</span> + globalLimitedByteSpeed + <span class="string">" bytes."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isRecordLimit = (<span class="keyword">this</span>.configuration.getInt(</span><br><span class="line">            CoreConstant.DATAX_JOB_SETTING_SPEED_RECORD, <span class="number">0</span>)) &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (isRecordLimit) &#123;</span><br><span class="line">        <span class="keyword">long</span> globalLimitedRecordSpeed = <span class="keyword">this</span>.configuration.getInt(</span><br><span class="line">                CoreConstant.DATAX_JOB_SETTING_SPEED_RECORD, <span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line">        Long channelLimitedRecordSpeed = <span class="keyword">this</span>.configuration.getLong(</span><br><span class="line">                CoreConstant.DATAX_CORE_TRANSPORT_CHANNEL_SPEED_RECORD);</span><br><span class="line">        <span class="keyword">if</span> (channelLimitedRecordSpeed == <span class="keyword">null</span> || channelLimitedRecordSpeed &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> DataXException.asDataXException(FrameworkErrorCode.CONFIG_ERROR,</span><br><span class="line">                    <span class="string">"在有总tps限速条件下，单个channel的tps值不能为空，也不能为非正数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        needChannelNumberByRecord =</span><br><span class="line">                (<span class="keyword">int</span>) (globalLimitedRecordSpeed / channelLimitedRecordSpeed);</span><br><span class="line">        needChannelNumberByRecord =</span><br><span class="line">                needChannelNumberByRecord &gt; <span class="number">0</span> ? needChannelNumberByRecord : <span class="number">1</span>;</span><br><span class="line">        LOG.info(<span class="string">"Job set Max-Record-Speed to "</span> + globalLimitedRecordSpeed + <span class="string">" records."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取较小值</span></span><br><span class="line">    <span class="keyword">this</span>.needChannelNumber = needChannelNumberByByte &lt; needChannelNumberByRecord ?</span><br><span class="line">            needChannelNumberByByte : needChannelNumberByRecord;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果从byte或record上设置了needChannelNumber则退出</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.needChannelNumber &lt; Integer.MAX_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isChannelLimit = (<span class="keyword">this</span>.configuration.getInt(</span><br><span class="line">            CoreConstant.DATAX_JOB_SETTING_SPEED_CHANNEL, <span class="number">0</span>) &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (isChannelLimit) &#123;</span><br><span class="line">        <span class="keyword">this</span>.needChannelNumber = <span class="keyword">this</span>.configuration.getInt(</span><br><span class="line">                CoreConstant.DATAX_JOB_SETTING_SPEED_CHANNEL);</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">"Job set Channel-Number to "</span> + <span class="keyword">this</span>.needChannelNumber</span><br><span class="line">                + <span class="string">" channels."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> DataXException.asDataXException(</span><br><span class="line">            FrameworkErrorCode.CONFIG_ERROR,</span><br><span class="line">            <span class="string">"Job运行速度必须设置"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、调度">4、调度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JobContainer.java</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * schedule首先完成的工作是把上一步reader和writer split的结果整合到具体taskGroupContainer中,</span></span><br><span class="line"><span class="comment"> * 同时不同的执行模式调用不同的调度策略，将所有任务调度起来</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里的全局speed和每个channel的速度设置为B/s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> channelsPerTaskGroup = <span class="keyword">this</span>.configuration.getInt(</span><br><span class="line">            CoreConstant.DATAX_CORE_CONTAINER_TASKGROUP_CHANNEL, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">int</span> taskNumber = <span class="keyword">this</span>.configuration.getList(</span><br><span class="line">            CoreConstant.DATAX_JOB_CONTENT).size();</span><br><span class="line">    <span class="comment">//确定的 channel 数和切分的 task 数取最小值，避免浪费</span></span><br><span class="line">    <span class="keyword">this</span>.needChannelNumber = Math.min(<span class="keyword">this</span>.needChannelNumber, taskNumber);</span><br><span class="line">    PerfTrace.getInstance().setChannelNumber(needChannelNumber);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过获取配置信息得到每个taskGroup需要运行哪些tasks任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    List&lt;Configuration&gt; taskGroupConfigs = JobAssignUtil.assignFairly(<span class="keyword">this</span>.configuration,</span><br><span class="line">            <span class="keyword">this</span>.needChannelNumber, channelsPerTaskGroup);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">        scheduler.schedule(taskGroupConfigs);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公平的分配 task 到对应的 taskGroup 中。</span></span><br><span class="line"><span class="comment"> * 公平体现在：会考虑 task 中对资源负载作的 load 标识进行更均衡的作业分配操作。</span></span><br><span class="line"><span class="comment"> * TODO 具体文档举例说明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Configuration&gt; <span class="title">assignFairly</span><span class="params">(Configuration configuration, <span class="keyword">int</span> channelNumber, <span class="keyword">int</span> channelsPerTaskGroup)</span> </span>&#123;</span><br><span class="line">    Validate.isTrue(configuration != <span class="keyword">null</span>, <span class="string">"框架获得的 Job 不能为 null."</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Configuration&gt; contentConfig = configuration.getListConfiguration(CoreConstant.DATAX_JOB_CONTENT);</span><br><span class="line">    Validate.isTrue(contentConfig.size() &gt; <span class="number">0</span>, <span class="string">"框架获得的切分后的 Job 无内容."</span>);</span><br><span class="line"></span><br><span class="line">    Validate.isTrue(channelNumber &gt; <span class="number">0</span> &amp;&amp; channelsPerTaskGroup &gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">"每个channel的平均task数[averTaskPerChannel]，channel数目[channelNumber]，每个taskGroup的平均channel数[channelsPerTaskGroup]都应该为正数"</span>);</span><br><span class="line">    <span class="comment">//TODO 确定 taskgroup 的数量</span></span><br><span class="line">    <span class="keyword">int</span> taskGroupNumber = (<span class="keyword">int</span>) Math.ceil(<span class="number">1.0</span> * channelNumber / channelsPerTaskGroup);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要实现的效果通过例子来说是：</span></span><br><span class="line"><span class="comment">     * a 库上有表：0, 1, 2</span></span><br><span class="line"><span class="comment">     * b 库上有表：3, 4</span></span><br><span class="line"><span class="comment">     * c 库上有表：5, 6, 7</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果有 4个 taskGroup</span></span><br><span class="line"><span class="comment">     * 则 assign 后的结果为：</span></span><br><span class="line"><span class="comment">     * taskGroup-0: 0,  4,</span></span><br><span class="line"><span class="comment">     * taskGroup-1: 3,  6,</span></span><br><span class="line"><span class="comment">     * taskGroup-2: 5,  2,</span></span><br><span class="line"><span class="comment">     * taskGroup-3: 1,  7</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    List&lt;Configuration&gt; taskGroupConfig = doAssign(resourceMarkAndTaskIdMap, configuration, taskGroupNumber);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整 每个 taskGroup 对应的 Channel 个数（属于优化范畴）</span></span><br><span class="line">    adjustChannelNumPerTaskGroup(taskGroupConfig, channelNumber);</span><br><span class="line">    <span class="keyword">return</span> taskGroupConfig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//AbstractScheduler.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(List&lt;Configuration&gt; configurations)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 丢线程池运行</span></span><br><span class="line">    startAllTaskGroup(configurations);</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、数据传输">5、数据传输</h2><p>找到<code>TaskGroupContainer.start()—&gt; taskExecutor.doStart()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.writerThread.start();</span><br><span class="line">    <span class="comment">// reader 没有起来，writer 不可能结束</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.writerThread.isAlive() || <span class="keyword">this</span>.taskCommunication.getState() == State.FAILED) &#123;</span><br><span class="line">    <span class="keyword">throw</span> DataXException.asDataXException(</span><br><span class="line">    FrameworkErrorCode.RUNTIME_ERROR,</span><br><span class="line">    <span class="keyword">this</span>.taskCommunication.getThrowable());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.readerThread.start();</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以看看 generateRunner()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">        taskReader.init();</span><br><span class="line">        ......</span><br><span class="line">        taskReader.prepare();</span><br><span class="line">        ......</span><br><span class="line">        taskReader.startRead(recordSender);</span><br><span class="line">        ......</span><br><span class="line">        taskReader.post();</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">super</span>.destroy();</span><br><span class="line">        ......</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">比如看 MysqlReader 的 startReader 方法</span><br><span class="line">-》CommonRdbmsReaderTask.startRead()</span><br><span class="line">-》transportOneRecord()</span><br><span class="line">-》sendToWriter()</span><br><span class="line">-》BufferedRecordExchanger. flush()</span><br><span class="line">-》Channel.pushAll()</span><br><span class="line">-》Channel.statPush()</span><br></pre></td></tr></table></figure><h1>五、DataX 使用优化</h1><h2 id="1、关键参数">1、关键参数</h2><ul><li>job.setting.speed.channel : channel 并发数</li><li>job.setting.speed.record : 全局配置 channel 的 record 限速</li><li>job.setting.speed.byte：全局配置 channel 的 byte 限速</li><li>core.transport.channel.speed.record：单个 channel 的 record 限速</li><li>core.transport.channel.speed.byte：单个 channel 的 byte 限速</li></ul><h2 id="2、优化-1：提升每个-channel-的速度">2、优化 1：提升每个 channel 的速度</h2><p>在 DataX 内部对每个 Channel 会有严格的速度控制，分两种，一种是控制每秒同步的记录数，另外一种是每秒同步的字节数，默认的速度限制是 1MB/s，可以根据具体硬件情况设置这个 byte 速度或者 record 速度，一般设置 byte 速度，比如：我们可以把单个 Channel 的速度上限配置为 5MB</p><h2 id="3、优化-2：提升-DataX-Job-内-Channel-并发数">3、优化 2：提升 DataX Job 内 Channel 并发数</h2><p><strong>并发数 = taskGroup 的数量 * 每个 TaskGroup 并发执行的 Task 数 (默认为 5)</strong>。提升 job 内 Channel 并发有三种配置方式：</p><h3 id="3-1-配置全局-Byte-限速以及单-Channel-Byte-限速">3.1 配置全局 Byte 限速以及单 Channel Byte 限速</h3><p>Channel 个数 = 全局 Byte 限速 / 单 Channel Byte 限速</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"core"</span>: &#123;</span><br><span class="line">    <span class="attr">"transport"</span>: &#123;</span><br><span class="line">      <span class="attr">"channel"</span>: &#123;</span><br><span class="line">        <span class="attr">"speed"</span>: &#123;</span><br><span class="line">          <span class="attr">"byte"</span>: <span class="number">1048576</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"job"</span>: &#123;</span><br><span class="line">    <span class="attr">"setting"</span>: &#123;</span><br><span class="line">      <span class="attr">"speed"</span>: &#123;</span><br><span class="line">        <span class="attr">"byte"</span> : <span class="number">5242880</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>core.transport.channel.speed.byte=1048576，job.setting.speed.byte=5242880，所以 Channel个数 = 全局 Byte 限速 / 单 Channel Byte 限速=5242880/1048576=5 个</p><h3 id="3-2-配置全局-Record-限速以及单-Channel-Record-限速">3.2 配置全局 Record 限速以及单 Channel Record 限速</h3><p>Channel 个数 = 全局 Record 限速 / 单 Channel Record 限速</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"core"</span>: &#123;</span><br><span class="line">    <span class="attr">"transport"</span>: &#123;</span><br><span class="line">      <span class="attr">"channel"</span>: &#123;</span><br><span class="line">        <span class="attr">"speed"</span>: &#123;</span><br><span class="line">          <span class="attr">"record"</span>: <span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"job"</span>: &#123;</span><br><span class="line">    <span class="attr">"setting"</span>: &#123;</span><br><span class="line">      <span class="attr">"speed"</span>: &#123;</span><br><span class="line">        <span class="attr">"record"</span> : <span class="number">500</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>core.transport.channel.speed.record=100 ， job.setting.speed.record=500, 所 以 配 置 全 局Record 限速以及单 Channel Record 限速，Channel 个数 = 全局 Record 限速 / 单 ChannelRecord 限速=500/100=5</p><h3 id="3-3-直接配置-Channel-个数">3.3 直接配置 Channel 个数</h3><p>只有在上面两种未设置才生效，上面两个同时设置是取值小的作为最终的 channel 数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"job"</span>: &#123;</span><br><span class="line">    <span class="attr">"setting"</span>: &#123;</span><br><span class="line">      <span class="attr">"speed"</span>: &#123;</span><br><span class="line">        <span class="attr">"channel"</span> : <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接配置 job.setting.speed.channel=5，所以 job 内 Channel 并发=5 个</p><h2 id="4、优化-3：提高-JVM-堆内存">4、优化 3：提高 JVM 堆内存</h2><p>当提升 DataX Job 内 Channel 并发数时，内存的占用会显著增加，因为 DataX 作为数据交换通道，在内存中会缓存较多的数据。例如 Channel 中会有一个 Buffer，作为临时的数据交换的缓冲区，而在部分 Reader 和 Writer 的中，也会存在一些 Buffer，为了防止 OOM 等错误，调大 JVM 的堆内存。</p><p>建议将内存设置为 4G 或者 8G，这个也可以根据实际情况来调整。调整 JVM xms xmx 参数的两种方式：一种是直接更改 <a href="http://datax.py" target="_blank" rel="noopener">datax.py</a> 脚本；另一种是在启动的时候，加上对应的参数，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python datax/bin/datax.py --jvm=<span class="string">"-Xms8G -Xmx8G"</span> XXX.json</span><br></pre></td></tr></table></figure><h1>六、DataX脚本</h1><p>python生成datax配置文件脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#MySQL相关配置，需根据实际情况作出修改</span></span><br><span class="line">mysql_host = <span class="string">"hadoop102"</span></span><br><span class="line">mysql_port = <span class="string">"3306"</span></span><br><span class="line">mysql_user = <span class="string">"root"</span></span><br><span class="line">mysql_passwd = <span class="string">"123456"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#HDFS NameNode相关配置，需根据实际情况作出修改</span></span><br><span class="line">hdfs_nn_host = <span class="string">"hadoop102"</span></span><br><span class="line">hdfs_nn_port = <span class="string">"8020"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成配置文件的目标路径，可根据实际情况作出修改</span></span><br><span class="line">output_path = <span class="string">"/opt/module/datax/job/export"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_connection</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> MySQLdb.connect(host=mysql_host, port=int(mysql_port), user=mysql_user, passwd=mysql_passwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mysql_meta</span><span class="params">(database, table)</span>:</span></span><br><span class="line">    connection = get_connection()</span><br><span class="line">    cursor = connection.cursor()</span><br><span class="line">    sql = <span class="string">"SELECT COLUMN_NAME,DATA_TYPE from information_schema.COLUMNS WHERE TABLE_SCHEMA=%s AND TABLE_NAME=%s ORDER BY ORDINAL_POSITION"</span></span><br><span class="line">    cursor.execute(sql, [database, table])</span><br><span class="line">    fetchall = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    connection.close()</span><br><span class="line">    <span class="keyword">return</span> fetchall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mysql_columns</span><span class="params">(database, table)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> map(<span class="keyword">lambda</span> x: x[<span class="number">0</span>], get_mysql_meta(database, table))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_json</span><span class="params">(target_database, target_table)</span>:</span></span><br><span class="line">    job = &#123;</span><br><span class="line">        <span class="string">"job"</span>: &#123;</span><br><span class="line">            <span class="string">"setting"</span>: &#123;</span><br><span class="line">                <span class="string">"speed"</span>: &#123;</span><br><span class="line">                    <span class="string">"channel"</span>: <span class="number">3</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"errorLimit"</span>: &#123;</span><br><span class="line">                    <span class="string">"record"</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">"percentage"</span>: <span class="number">0.02</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"content"</span>: [&#123;</span><br><span class="line">                <span class="string">"reader"</span>: &#123;</span><br><span class="line">                    <span class="string">"name"</span>: <span class="string">"hdfsreader"</span>,</span><br><span class="line">                    <span class="string">"parameter"</span>: &#123;</span><br><span class="line">                        <span class="string">"path"</span>: <span class="string">"$&#123;exportdir&#125;"</span>,</span><br><span class="line">                        <span class="string">"defaultFS"</span>: <span class="string">"hdfs://"</span> + hdfs_nn_host + <span class="string">":"</span> + hdfs_nn_port,</span><br><span class="line">                        <span class="string">"column"</span>: [<span class="string">"*"</span>],</span><br><span class="line">                        <span class="string">"fileType"</span>: <span class="string">"text"</span>,</span><br><span class="line">                        <span class="string">"encoding"</span>: <span class="string">"UTF-8"</span>,</span><br><span class="line">                        <span class="string">"fieldDelimiter"</span>: <span class="string">"\t"</span>,</span><br><span class="line">                        <span class="string">"nullFormat"</span>: <span class="string">"\\N"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"writer"</span>: &#123;</span><br><span class="line">                    <span class="string">"name"</span>: <span class="string">"mysqlwriter"</span>,</span><br><span class="line">                    <span class="string">"parameter"</span>: &#123;</span><br><span class="line">                        <span class="string">"writeMode"</span>: <span class="string">"replace"</span>,</span><br><span class="line">                        <span class="string">"username"</span>: mysql_user,</span><br><span class="line">                        <span class="string">"password"</span>: mysql_passwd,</span><br><span class="line">                        <span class="string">"column"</span>: get_mysql_columns(target_database, target_table),</span><br><span class="line">                        <span class="string">"connection"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="string">"jdbcUrl"</span>:</span><br><span class="line">                                    <span class="string">"jdbc:mysql://"</span> + mysql_host + <span class="string">":"</span> + mysql_port + <span class="string">"/"</span> + target_database + <span class="string">"?useUnicode=true&amp;characterEncoding=utf-8"</span>,</span><br><span class="line">                                <span class="string">"table"</span>: [target_table]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_path):</span><br><span class="line">        os.makedirs(output_path)</span><br><span class="line">    <span class="keyword">with</span> open(os.path.join(output_path, <span class="string">"."</span>.join([target_database, target_table, <span class="string">"json"</span>])), <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(job, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args)</span>:</span></span><br><span class="line">    target_database = <span class="string">""</span></span><br><span class="line">    target_table = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    options, arguments = getopt.getopt(args, <span class="string">'-d:-t:'</span>, [<span class="string">'targetdb='</span>, <span class="string">'targettbl='</span>])</span><br><span class="line">    <span class="keyword">for</span> opt_name, opt_value <span class="keyword">in</span> options:</span><br><span class="line">        <span class="keyword">if</span> opt_name <span class="keyword">in</span> (<span class="string">'-d'</span>, <span class="string">'--targetdb'</span>):</span><br><span class="line">            target_database = opt_value</span><br><span class="line">        <span class="keyword">if</span> opt_name <span class="keyword">in</span> (<span class="string">'-t'</span>, <span class="string">'--targettbl'</span>):</span><br><span class="line">            target_table = opt_value</span><br><span class="line"></span><br><span class="line">    generate_json(target_database, target_table)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于需要使用Python访问Mysql数据库，故需安装驱动</span></span><br><span class="line">sudo yum install -y MySQL-python</span><br><span class="line"><span class="comment"># 脚本使用说明</span></span><br><span class="line"><span class="comment"># 通过-d传入MySQL数据库名，-t传入MySQL表名，执行上述命令即可生成该表的DataX</span></span><br><span class="line">python gen_export_config.py -d database -t table</span><br><span class="line"><span class="comment"># 然后把上述的写到一个脚本文件里即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后编写每日的导出脚本，导入也同理</span></span><br><span class="line">vim hdfs_to_mysql.sh</span><br></pre></td></tr></table></figure><p>导出脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">DATAX_HOME=/opt/module/datax</span><br><span class="line"></span><br><span class="line"><span class="comment">#DataX导出路径不允许存在空文件，该函数作用为清理空文件</span></span><br><span class="line"><span class="function"><span class="title">handle_export_path</span></span>()&#123;</span><br><span class="line">  target_file=<span class="variable">$1</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> `hadoop fs -ls -R <span class="variable">$target_file</span> | awk <span class="string">'&#123;print $8&#125;'</span>`; <span class="keyword">do</span></span><br><span class="line">    hadoop fs -<span class="built_in">test</span> -z <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">if</span> [[ $? -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>文件大小为0，正在删除"</span></span><br><span class="line">      hadoop fs -rm -r -f <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据导出</span></span><br><span class="line"><span class="function"><span class="title">export_data</span></span>() &#123;</span><br><span class="line">  datax_config=<span class="variable">$1</span></span><br><span class="line">  export_dir=<span class="variable">$2</span></span><br><span class="line">  hadoop fs -<span class="built_in">test</span> -e <span class="variable">$export_dir</span></span><br><span class="line">  <span class="keyword">if</span> [[ $? -eq 0 ]]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    handle_export_path <span class="variable">$export_dir</span></span><br><span class="line">    file_count=$(hadoop fs -ls <span class="variable">$export_dir</span> | wc -l)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$file_count</span> -gt 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">set</span> -e;</span><br><span class="line">      Python <span class="variable">$DATAX_HOME</span>/bin/datax.py -p<span class="string">"-Dexportdir=<span class="variable">$export_dir</span>"</span> <span class="variable">$datax_config</span></span><br><span class="line">      <span class="built_in">set</span> +e;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$export_dir</span> 目录为空，跳过~"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"路径 <span class="variable">$export_dir</span> 不存在，跳过~"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里写上面生成的datax配置文件路径和hdfs的路径名</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  <span class="string">"ads_new_buyer_stats"</span>)</span><br><span class="line">    export_data /opt/module/datax/job/<span class="built_in">export</span>/gmall_report.ads_new_buyer_stats.json /warehouse/gmall/ads/ads_new_buyer_stats</span><br><span class="line"><span class="string">"all"</span>)</span><br><span class="line">  export_data /opt/module/datax/job/<span class="built_in">export</span>/gmall_report.ads_new_buyer_stats.json /warehouse/gmall/ads/ads_new_buyer_stats</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Sqoop安装与使用&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;Sqoop全称是 &lt;strong&gt;Apache Sqoop&lt;/strong&gt;(现已经抛弃)，是一个开源工具，能够将数据从数据存储空间（数据仓库，系统文档存储空间，关系型数据库）导入 Hadoop 的 HDFS或列式数据库HBase，供 MapReduce 分析数据使用。数据传输的过程大部分是通过 MapReduce 过程来实现，只需要依赖数据库的Schema信息Sqoop所执行的操作是并行的，数据传输性能高，具备较好的容错性，并且能够自动转换数据类型。&lt;/p&gt;
&lt;p&gt;Sqoop是一个为高效传输海量数据而设计的工具，一般用在从关系型数据库同步数据到非关系型数据库中。Sqoop专门是为大数据集设计的。Sqoop支持增量更新，将新记录添加到最近一次的导出的数据源上，或者指定上次修改的时间戳。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://blog.shawncoding.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="https://blog.shawncoding.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity实战解析</title>
    <link href="https://blog.shawncoding.top/posts/7d3daa07.html"/>
    <id>https://blog.shawncoding.top/posts/7d3daa07.html</id>
    <published>2023-04-07T13:43:22.000Z</published>
    <updated>2023-04-07T13:49:08.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Security入门笔记：<a href="https://blog.csdn.net/lemon_TT/article/details/124675493" target="_blank" rel="noopener" title="Spring Security学习笔记">Spring Security学习笔记</a></p></blockquote><h1>一、Security认证和原理</h1><p><code>Spring Security</code>是一种基于<code>Spring AOP</code>和<code>Servlet Filter</code>的安全框架，其核心是一组过滤器链，实现 Web 请求和方法调用级别的用户鉴权和权限控制</p><h2 id="1、认证基本流程">1、认证基本流程</h2><h3 id="1-1-表单认证概述">1.1 表单认证概述</h3><p><code>Spring Security</code>提供了两种认证方式：HttpBasic 认证和 HttpForm 表单认证。HttpBasic 认证不需要我们编写登录页面，当浏览器请求 URL 需要认证才能访问时，页面会自动弹出一个登录窗口，要求用户输入用户名和密码进行认证。大多数情况下，我们还是通过编写登录页面进行 HttpForm 表单认证(现在默认是这个模式)</p><a id="more"></a><h3 id="1-2-基本流程分析">1.2 基本流程分析</h3><p><code>Spring Security</code>采取过滤链实现认证与授权，只有当前过滤器通过，才能进入下一个过滤器</p><p><img src="http://qnypic.shawncoding.top/blog/202304071916175.png" alt></p><p>绿色部分是认证过滤器，需要我们自己配置，可以配置多个认证过滤器。认证过滤器可以使用<code>Spring Security</code>提供的认证过滤器，也可以自定义过滤器（例如：验证码验证）。认证过滤器要在<code>configure(HttpSecurity http)</code>方法中配置，没有配置不生效。下面会重点介绍以下三个过滤器：</p><ul><li><code>UsernamePasswordAuthenticationFilter</code>过滤器：该过滤器会拦截前端提交的 POST 方式的登录表单请求，并进行身份认证</li><li><code>ExceptionTranslationFilter</code>过滤器：该过滤器不需要我们配置，对于前端提交的请求会直接放行，捕获后续抛出的异常并进行处理（例如：权限访问限制）</li><li><code>FilterSecurityInterceptor</code>过滤器：该过滤器是过滤器链的最后一个过滤器，根据资源权限配置来判断当前请求是否有权限访问对应的资源。如果访问受限会抛出相关异常，并由<code>ExceptionTranslationFilter</code>过滤器进行捕获和处理</li></ul><p>而认证流程是在<code>UsernamePasswordAuthenticationFilter</code>过滤器中处理的，具体流程如下所示：</p><p><img src="http://qnypic.shawncoding.top/blog/202304071916177.png" alt></p><blockquote><p>具体的源码相关可以查阅：<a href="https://www.cnblogs.com/zongmin/p/13783174.html" target="_blank" rel="noopener" title="https://www.cnblogs.com/zongmin/p/13783174.html">https://www.cnblogs.com/zongmin/p/13783174.html</a></p></blockquote><h3 id="1-3-权限访问流程">1.3 权限访问流程</h3><p>上面介绍了认证流程，下面介绍权限访问流程，主要是对<code>ExceptionTranslationFilter</code>过滤器和<code>FilterSecurityInterceptor</code>过滤器进行介绍</p><ul><li><code>ExceptionTranslationFilter</code>过滤器，该过滤器是用于处理异常的，不需要我们配置，对于前端提交的请求会直接放行，捕获后续抛出的异常并进行处理（例如：权限访问限制）</li><li><code>FilterSecurityInterceptor</code>是过滤器链的最后一个过滤器，该过滤器是过滤器链的最后一个过滤器，根据资源权限配置来判断当前请求是否有权限访问对应的资源。如果访问受限会抛出相关异常，最终所抛出的异常会由前一个过滤器<code>ExceptionTranslationFilter</code>进行捕获和处理</li></ul><p>需要注意，<code>Spring Security</code>的过滤器链是配置在 SpringMVC 的核心组件 DispatcherServlet 运行之前。也就是说，请求通过<code>Spring Security</code>的所有过滤器，不意味着能够正常访问资源，该请求还需要通过 SpringMVC 的拦截器链</p><h2 id="2、请求间共享认证信息">2、请求间共享认证信息</h2><h3 id="2-1-概述">2.1 概述</h3><p>一般认证成功后的用户信息是通过 Session 在多个请求之间共享，<code>Spring Security</code>实现将已认证的用户信息对象 Authentication 与 Session 绑定</p><p><img src="http://qnypic.shawncoding.top/blog/202304071916178.png" alt></p><h3 id="2-2-获取认证用户信息">2.2 获取认证用户信息</h3><p>由前文可知，封装了已认证用户信息对象 Authentication 的 SecurityContext 即存储在 SecurityContextHolder 中，也存储在 Session 中，所以这里有几种获取用户数据的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 SecurityContextHolder 获取认证用户信息对象 Authentication</span></span><br><span class="line">Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"><span class="comment">// 敏感信息 credentials 被去除，principal 存储的为 UserDetails 实现类，可以通过强转获取 UserDetails 对象</span></span><br><span class="line"><span class="comment">// 从 Authentication 中获取 UserDetails</span></span><br><span class="line">UserDetails user = (UserDetails) authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 HttpSession 获取</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test3"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">test3</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 Session 获取 SecurityContext</span></span><br><span class="line">    SecurityContext context = (SecurityContext) session.getAttribute(<span class="string">"SPRING_SECURITY_CONTEXT"</span>);</span><br><span class="line">    <span class="comment">// 从 Authentication 中获取 UserDetails</span></span><br><span class="line">    UserDetails user = (UserDetails) context.getAuthentication().getPrincipal();</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后也是通过request获取用户的session</span></span><br><span class="line">HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">Principal userPrincipal = request.getUserPrincipal();</span><br><span class="line">String userName = userPrincipal.getName();</span><br></pre></td></tr></table></figure><h2 id="3、认证的几种方式">3、认证的几种方式</h2><p>创建数据库表和数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">      <span class="string">`id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">      <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">      <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">      <span class="string">`mobile`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line">      <span class="string">`enabled`</span> <span class="built_in">tinyint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'用户是否可用'</span>,</span><br><span class="line">      <span class="string">`roles`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'用户角色，多个角色之间用逗号隔开'</span>,</span><br><span class="line">      PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">      <span class="keyword">KEY</span> <span class="string">`index_username`</span>(<span class="string">`username`</span>),</span><br><span class="line">      <span class="keyword">KEY</span> <span class="string">`index_mobile`</span>(<span class="string">`mobile`</span>)</span><br><span class="line">) <span class="keyword">COMMENT</span> <span class="string">'用户表'</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 密码明文都为 123456  </span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'admin'</span>, <span class="string">'$2a$10$JNVWTh5Yq56kJtrCZkcDk.DL/L/i8g3KrTAshcHW3mFf8//lnfG56'</span>, <span class="string">'11111111111'</span>, <span class="string">'1'</span>, <span class="string">'ROLE_ADMIN,ROLE_USER'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'user'</span>, <span class="string">'$2a$10$JNVWTh5Yq56kJtrCZkcDk.DL/L/i8g3KrTAshcHW3mFf8//lnfG56'</span>, <span class="string">'22222222222'</span>, <span class="string">'1'</span>, <span class="string">'ROLE_USER'</span>);</span><br></pre></td></tr></table></figure><p>创建 User 实体类，实现 UserDetails 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;   <span class="comment">// 主键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;  <span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;   <span class="comment">// 密码</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String mobile;    <span class="comment">// 手机号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roles;    <span class="comment">// 用户角色，多个角色之间用逗号隔开</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;  <span class="comment">// 用户是否可用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;  <span class="comment">// 用户权限集合</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;  <span class="comment">// 返回用户权限集合</span></span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;  <span class="comment">// 账户是否未过期</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;  <span class="comment">// 账户是否未锁定</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;  <span class="comment">// 密码是否未过期</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;  <span class="comment">// 账户是否可用</span></span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;  <span class="comment">// equals() 方法一般要重写</span></span><br><span class="line">        <span class="keyword">return</span> obj <span class="keyword">instanceof</span> User &amp;&amp; <span class="keyword">this</span>.username.equals(((User) obj).username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;   <span class="comment">// hashCode() 方法一般要重写</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 CustomUserDetailsService 类，实现 UserDetailsService 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//(1) 从数据库尝试读取该用户</span></span><br><span class="line">        User user = userMapper.selectByUsername(username);</span><br><span class="line">        <span class="comment">// 用户不存在，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2) 将数据库形式的 roles 解析为 UserDetails 的权限集合</span></span><br><span class="line">        <span class="comment">// AuthorityUtils.commaSeparatedStringToAuthorityList() 是 Spring Security 提供的方法，用于将逗号隔开的权限集字符串切割为可用权限对象列表</span></span><br><span class="line">        user.setAuthorities(AuthorityUtils.commaSeparatedStringToAuthorityList(user.getRoles()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3) 返回 UserDetails 对象</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是自定义认证类(第三种方法选用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义认证器</span></span><br><span class="line"><span class="comment"> * 验证逻辑，比较传入的 pwd 和 从数据库中拿到的 pwd。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CustomUserDetailsServiceImpl userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  这里有个循环依赖问题，在配置文件改成spring.main.allow-circular-references: true 即可</span></span><br><span class="line"><span class="comment">     *  或者将PasswordEncoder这个bean类单独生成一个文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 验证器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验证器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException .</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取用户名</span></span><br><span class="line">        String account = authentication.getName();</span><br><span class="line">        <span class="comment">// 获取密码</span></span><br><span class="line">        String password = (String) authentication.getCredentials();</span><br><span class="line">        <span class="comment">// 记录login请求日志</span></span><br><span class="line">        HttpServletRequest request = ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes())).getRequest();</span><br><span class="line"></span><br><span class="line">        UserDetails userDetails = userDetailsService.loadUserByUsername(account);</span><br><span class="line">        <span class="keyword">boolean</span> checkPassword = bCryptPasswordEncoder.matches(password, userDetails.getPassword());</span><br><span class="line">        <span class="keyword">if</span> (!checkPassword) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"密码不正确，请重新登录!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userDetails, password, userDetails.getAuthorities());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件，我们通过配置文件来选择不同的认证模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义数据库验证认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CustomUserDetailsServiceImpl userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义登录校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationProvider authenticationProvider;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制用户认证管理器来实现用户认证</span></span><br><span class="line"><span class="comment">     * 内存覆盖</span></span><br><span class="line"><span class="comment">     * 最简单是配置文件直接覆盖写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span></span><br><span class="line"><span class="comment">//        // 采用内存存储方式，用户认证信息存储在内存中</span></span><br><span class="line"><span class="comment">//        auth.inMemoryAuthentication()</span></span><br><span class="line"><span class="comment">//                .withUser("admin").password(passwordEncoder()</span></span><br><span class="line"><span class="comment">//                        .encode("123456")).roles("ADMIN");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制用户认证管理器来实现用户认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、采用内存存储方式，用户认证信息存储在内存中</span></span><br><span class="line">        <span class="comment">// auth.inMemoryAuthentication()</span></span><br><span class="line">        <span class="comment">//        .withUser("admin").password(passwordEncoder()</span></span><br><span class="line">        <span class="comment">//        .encode("123456")).roles("ROLE_ADMIN");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、不再使用内存方式存储用户认证信息，而是动态从数据库中获取</span></span><br><span class="line">        <span class="comment">//auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、自定义登录验证</span></span><br><span class="line">        auth.authenticationProvider(authenticationProvider);</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 开启基于 HTTP 请求访问控制</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// 以下访问不需要任何权限，任何人都可以访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/login/page"</span>).permitAll()</span><br><span class="line">                <span class="comment">// 以下访问需要 ROLE_ADMIN 权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"ADMIN"</span>)</span><br><span class="line">                <span class="comment">// 以下访问需要 ROLE_USER 权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasAuthority(<span class="string">"ROLE_USER"</span>)</span><br><span class="line">                <span class="comment">// 其它任何请求访问都需要先通过认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处需要简单介绍下<code>Spring Security</code>的授权方式，在<code>Spring Security</code>中角色属于权限的一部分。对于角色<code>ROLE_ADMIN</code>的授权方式有两种：<code>hasRole(&quot;ADMIN&quot;)</code>和<code>hasAuthority(&quot;ROLE_ADMIN&quot;)</code>，这两种方式是等价的。可能有人会疑惑，为什么在数据库中的角色名添加了<code>ROLE_</code>前缀，而 hasRole() 配置时不需要加<code>ROLE_</code>前缀。</p><p>hasRole() 在判断权限时会自动在角色名前添加<code>ROLE_</code>前缀，所以配置时不需要添加<code>ROLE_</code>前缀，同时这也要求 UserDetails 对象的权限集合中存储的角色名要有<code>ROLE_</code>前缀。如果不希望匹配这个前缀，那么改为调用 hasAuthority() 方法即可</p><h2 id="4、注解权限">4、注解权限</h2><h3 id="4-1-概述">4.1 概述</h3><p>要开启<code>Spring</code>方法级安全，在添加了<code>@Configuration</code>注解的类上再添加<code>@EnableGlobalMethodSecurity</code>注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中注解<code>@EnableGlobalMethodSecurity</code>有几个方法：</p><ul><li><strong><code>prePostEnabled</code>****：</strong> 确定 前置注解<code>[@PreAuthorize,@PostAuthorize,..]</code> 是否启用（常用/重要）</li><li><strong><code>securedEnabled</code>****：</strong> 确定安全注解 <code>[@Secured]</code> 是否启用</li><li><strong><code>jsr250Enabled</code>****：</strong> 确定 <code>JSR-250注解 [@RolesAllowed..]</code>是否启用</li></ul><p>同一个应用程序中，可以启用多个类型的注解，但是只应该设置一个注解对于行为类的接口或者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="function">List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@PreAuthorize</span>(<span class="string">"hasAnyRole('user')"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 下面不能设置两个注解，如果设置两个，只有其中一个生效</span></span><br><span class="line">    <span class="comment">// @PreAuthorize("hasAnyRole('user')")</span></span><br><span class="line">  <span class="meta">@Secured</span>(&#123; <span class="string">"ROLE_user"</span>, <span class="string">"ROLE_admin"</span> &#125;)</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Secured注解使用方式">4.2 @Secured注解使用方式</h3><p><code>@Secured</code>注解是用来定义业务方法的安全配置。在需要安全[角色/权限等]的方法上指定 @Secured，并且只有那些角色/权限的用户才可以调用该方法。<code>@Secured</code>缺点（限制）就是不支持<code>Spring EL</code>表达式。不够灵活。并且指定的角色必须以<code>ROLE_</code>开头，不可省略。</p><p>在上面的例子中，<code>updateUser</code> 方法只能被拥有<code>user</code>权限的用户调用。<code>deleteUser</code> 方法只能够被拥有<code>admin</code> 或者<code>user</code> 权限的用户调用。而如果想要指定<code>&quot;AND&quot;</code>条件，即调用<code>deleteUser</code>方法需同时拥有<code>ADMIN</code>和<code>DBA</code>角色的用户，<code>@Secured</code>便不能实现。这时就需要使用<code>prePostEnabled</code>提供的注解<code>@PreAuthorize/@PostAuthorize</code></p><h3 id="4-3-jsr250Enabled">4.3 jsr250Enabled</h3><ul><li><strong><code>@DenyAll</code>****：</strong> 拒绝所有访问</li><li><strong><code>@RolesAllowed({&quot;USER&quot;, &quot;ADMIN&quot;})</code>****：</strong> 该方法只要具有<code>&quot;USER&quot;</code>, <code>&quot;ADMIN&quot;</code>任意一种权限就可以访问。这里可以省略前缀<code>ROLE_</code>，实际的权限可能是<code>ROLE_ADMIN</code></li><li><strong><code>@PermitAll</code>****：</strong> 允许所有访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"test/allow"</span>)</span><br><span class="line"><span class="meta">@RolesAllowed</span>(&#123;<span class="string">"USER"</span>,<span class="string">"ADMIN"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAllow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"需要权限"</span>;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"test/perm"</span>)</span><br><span class="line"><span class="meta">@PermitAll</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPerm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"允许"</span>;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"test/deny"</span>)</span><br><span class="line"><span class="meta">@DenyAll</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testDeny</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"拒绝"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-prePostEnabled-规范-重要">4.4 prePostEnabled 规范(重要)</h3><p>该注解更适合方法级的安全,也支持Spring 表达式语言，提供了基于表达式的访问控制。参见常见<a href="http://docs.spring.io/spring-security/site/docs/4.0.1.RELEASE/reference/htmlsingle/#el-common-built-in" target="_blank" rel="noopener" title="内置表达式">内置表达式</a>了解支持表达式的完整列表，上面只使用到了一个注解<code>@PreAuthorize</code>，启用<code>prePostEnabled</code>后，提供有四个注解：</p><ul><li><strong><code>@PreAuthorize</code>****：</strong> 进入方法之前验证授权。可以将登录用户的<code>roles</code>参数传到方法中验证。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能user角色可以访问</span></span><br><span class="line"><span class="meta">@PreAuthorize</span> (<span class="string">"hasAnyRole('user')"</span>)</span><br><span class="line"><span class="comment">// user 角色或者 admin 角色都可访问</span></span><br><span class="line"><span class="meta">@PreAuthorize</span> (<span class="string">"hasAnyRole('user') or hasAnyRole('admin')"</span>)</span><br><span class="line"><span class="comment">// 同时拥有 user 和 admin 角色才能访问</span></span><br><span class="line"><span class="meta">@PreAuthorize</span> (<span class="string">"hasAnyRole('user') and hasAnyRole('admin')"</span>)</span><br><span class="line"><span class="comment">// 限制只能查询 id 小于 10 的用户</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"#id &lt; 10"</span>)</span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 只能查询自己的信息</span></span><br><span class="line"> <span class="meta">@PreAuthorize</span>(<span class="string">"principal.username.equals(#username)"</span>)</span><br><span class="line"><span class="function">User <span class="title">find</span><span class="params">(String username)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 限制只能新增用户名称为abc的用户</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"#user.name.equals('abc')"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span></span></span><br></pre></td></tr></table></figure><ul><li><strong><code>@PostAuthorize</code>****：</strong> 该注解使用不多，在方法执行后再进行权限验证。 适合验证带有返回值的权限。<code>Spring EL</code> 提供 返回对象能够在表达式语言中获取返回的对象<code>returnObject</code>。校验通过就返回，否则表示校验失败，将抛出 <code>AccessDeniedException</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询到用户信息后，再验证用户名是否和登录用户名一致</span></span><br><span class="line"><span class="meta">@PostAuthorize</span>(<span class="string">"returnObject.name == authentication.name"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/get-user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUser(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证返回的数是否是偶数</span></span><br><span class="line"><span class="meta">@PostAuthorize</span>(<span class="string">"returnObject % 2 == 0"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>@PreFilter</code>****：</strong> 对集合类型的参数执行过滤，移除结果为<code>false</code>的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定过滤的参数，过滤偶数</span></span><br><span class="line"><span class="meta">@PreFilter</span>(filterTarget=<span class="string">"ids"</span>, value=<span class="string">"filterObject%2==0"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(List&lt;Integer&gt; ids, List&lt;String&gt; username)</span></span></span><br></pre></td></tr></table></figure><ul><li><strong><code>@PostFilter</code>****：</strong> 对集合类型的返回值进行过滤，移除结果为<code>false</code>的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostFilter</span>(<span class="string">"filterObject.id%2==0"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、自定义认证成功-失败处理器">5、自定义认证成功/失败处理器</h2><h3 id="5-1-登录处理的方法介绍">5.1 登录处理的方法介绍</h3><p>此处先对<code>http.formLogin()</code>返回值的主要方法进行说明，这些方法涉及用户登录的处理，具体如下：</p><ul><li><code>loginPage(String loginPage)</code>：设置用户登录页面的访问路径，默认为 GET 请求的 <code>/login</code>。</li><li><code>loginProcessingUrl(String loginProcessingUrl)</code>：设置登录表单提交的路径，默认为是 POST 请求的 loginPage() 设置的路径</li><li><code>successForwardUrl(String forwordUrl)</code>：设置用户认证成功后转发的地址。</li><li><code>successHandler(AuthenticationSuccessHandler successHandler)</code>：配置用户认证成功后的自定义处理器。</li><li><code>defaultSuccessUrl(String defaultSuccessUrl)</code>：设置用户认证成功后重定向的地址。这里需要注意，该路径是用户直接访问登录页面认证成功后重定向的路径，如果是其他路径跳转到登录页面认证成功后会重定向到原始访问路径。可设置第二个参数为 true，使认证成功后始终重定向到该地址。</li><li><code>failureForwrad(String forwardUrl)</code>：设置用户认证失败后转发的地址。</li><li><code>failureHandler(AuthenticationFailureHandler authenticationFailureHandler)</code>：设置用户登录失败后的自定义错误处理器。</li><li><code>failureUrl(String authenticationFailureUrl)</code>：设置用户登录失败后重定向的地址，指定的路径要能匿名访问，默认为<code>loginPage() + ?error</code>。</li><li><code>usernameParamter(String usernameParamter)</code>：设置登录表单中的用户名参数，默认为 username。</li><li><code>passwordParamter(String passwordParamter)</code>：设置登录表单中的密码参数，默认为 password。</li></ul><h3 id="5-2-成功-失败处理器">5.2 成功/失败处理器</h3><p>因为需要用到Jackson，首先对其进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一注解，解决前后端交互 Long 类型精度丢失的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">jacksonObjectMapper</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = builder.createXmlMapper(<span class="keyword">false</span>).build();</span><br><span class="line">        <span class="comment">// 设置日期转换</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">        <span class="comment">// 设置时区</span></span><br><span class="line">        <span class="comment">// objectMapper.setTimeZone(TimeZone.getTimeZone("GMT+8"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化时，值为 null 的属性不序列化</span></span><br><span class="line">        <span class="comment">// Include.Include.ALWAYS 默认</span></span><br><span class="line">        <span class="comment">// Include.NON_DEFAULT 属性为默认值不序列化</span></span><br><span class="line">        <span class="comment">// Include.NON_EMPTY 属性为空（"" 或 null）都不序列化</span></span><br><span class="line">        <span class="comment">// Include.NON_NULL 属性为 null 不序列化</span></span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="comment">// 反序列化时，遇到未知属性的时候不抛出异常</span></span><br><span class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化成 json 时，将 Long 转换成 String（防止 js 丢失精度）</span></span><br><span class="line">        <span class="comment">// Java 的 Long 能表示的范围比 js 中 number 大，意味着部分数值在 js 会变成不准确的值</span></span><br><span class="line">        SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">        simpleModule.addSerializer(Long<span class="class">.<span class="keyword">class</span>, <span class="title">ToStringSerializer</span>.<span class="title">instance</span>)</span>;</span><br><span class="line">        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        objectMapper.registerModule(simpleModule);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义失败处理器，这里有个判断原因是可以根据header的信息自定义选择如何跳转。真实环境可以根据自己实际情况进行选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录失败返回给前端消息</span></span><br><span class="line"><span class="comment"> * 继承 SimpleUrlAuthenticationFailureHandler 处理器，该类是 failureUrl() 方法使用的认证失败处理器</span></span><br><span class="line"><span class="comment"> * 也可以直接实现AuthenticationFailureHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationFailureHandler</span> <span class="keyword">extends</span> <span class="title">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要在请求的时候加头部信息，否则会认为是表单请求，而不是js请求</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        String xRequestedWith = request.getHeader(<span class="string">"x-requested-with"</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"JSON"</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            Msg msg = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameNotFoundException) &#123;</span><br><span class="line">                msg = Msg.fail(CustomExceptionCode.LOGIN_USER_NOT_EXISTED);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">                msg = Msg.fail(CustomExceptionCode.LOGIN_FAILED);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ValidateCodeException) &#123;</span><br><span class="line">                <span class="comment">// 验证码类型错误</span></span><br><span class="line">                msg = Msg.problem(CustomExceptionCode.LOGIN_VERIFICATION_FAILED.getCode(), e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                msg = Msg.fail(CustomExceptionCode.FAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 认证失败，响应 JSON 数据</span></span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            response.getWriter().write(objectMapper.writeValueAsString(msg));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 以下配置等同于前文的 failureUrl("/login/page?error")</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 认证失败后，重定向到指定地址</span></span><br><span class="line">            <span class="comment">// 设置默认的重定向路径</span></span><br><span class="line">            <span class="keyword">super</span>.setDefaultFailureUrl(<span class="string">"/login/page?error"</span>);</span><br><span class="line">            <span class="comment">// 调用父类的 onAuthenticationFailure() 方法</span></span><br><span class="line">            <span class="keyword">super</span>.onAuthenticationFailure(request, response, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义成功处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承 SavedRequestAwareAuthenticationSuccessHandler 类，该类是 defaultSuccessUrl() 方法使用的认证成功处理器</span></span><br><span class="line"><span class="comment"> * 也可以直接实现AuthenticationSuccessHandler接口类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationSuccessHandler</span> <span class="keyword">extends</span> <span class="title">SavedRequestAwareAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String xRequestedWith = request.getHeader(<span class="string">"x-requested-with"</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"JSON"</span>.equals(xRequestedWith)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里可以进行用户信息的操作</span></span><br><span class="line">            <span class="comment">// 认证成功，响应 JSON 数据</span></span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            response.getWriter().write(objectMapper.writeValueAsString(Msg.success(<span class="number">200</span>,<span class="string">"用户认证成功"</span>).add(<span class="string">"data"</span>,map)));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 以下配置等同于前文中的 defaultSuccessUrl("/index")</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 认证成功后，如果存在原始访问路径，则重定向到该路径；如果没有，则重定向 /index</span></span><br><span class="line">            <span class="comment">// 设置默认的重定的路径</span></span><br><span class="line">            <span class="keyword">super</span>.setDefaultTargetUrl(<span class="string">"/index"</span>);</span><br><span class="line">            <span class="comment">// 调用父类的 onAuthenticationSuccess() 方法</span></span><br><span class="line">            <span class="keyword">super</span>.onAuthenticationSuccess(request, response, authentication);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后配置config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationSuccessHandler authenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 启动 form 表单登录</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                <span class="comment">// 设置登录页面的访问路径，默认为 /login，GET 请求；该路径不设限访问</span></span><br><span class="line">                .loginPage(<span class="string">"/login/page"</span>)</span><br><span class="line">                <span class="comment">// 设置登录表单提交路径，默认为 loginPage() 设置的路径，POST 请求</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login/form"</span>)</span><br><span class="line">                <span class="comment">// 设置登录表单中的用户名参数，默认为 username</span></span><br><span class="line">                .usernameParameter(<span class="string">"name"</span>)</span><br><span class="line">                <span class="comment">// 设置登录表单中的密码参数，默认为 password</span></span><br><span class="line">                .passwordParameter(<span class="string">"pwd"</span>)</span><br><span class="line">                <span class="comment">// 认证成功处理，如果存在原始访问路径，则重定向到该路径；如果没有，则重定向 /index</span></span><br><span class="line">                <span class="comment">//.defaultSuccessUrl("/index")</span></span><br><span class="line">                <span class="comment">// 认证失败处理，重定向到指定地址，默认为 loginPage() + ?error；该路径不设限访问</span></span><br><span class="line">                <span class="comment">//.failureUrl("/login/page?error");</span></span><br><span class="line">                <span class="comment">// 不再使用 defaultSuccessUrl() 和 failureUrl() 方法进行认证成功和失败处理，</span></span><br><span class="line">                <span class="comment">// 使用自定义的认证成功和失败处理器</span></span><br><span class="line">                .successHandler(authenticationSuccessHandler)</span><br><span class="line">                .failureHandler(authenticationFailureHandler);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、自定义权限处理器">6、自定义权限处理器</h2><p>无权访问自定义处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 认证失败后返回的类</span></span><br><span class="line"><span class="comment"> * 也可以直接实现AccessDeniedHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAccessDeniedHandler</span> <span class="keyword">extends</span> <span class="title">AccessDeniedHandlerImpl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要在请求的时候加头部信息，否则会认为是表单请求，而不是js请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        String xRequestedWith = request.getHeader(<span class="string">"x-requested-with"</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"JSON"</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            Msg result = Msg.fail(CustomExceptionCode.LOGIN_NO_ACCESS);</span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            response.getWriter().write(objectMapper.writeValueAsString(result));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.handle(request,response,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未登录访问处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义未认证访问处理器</span></span><br><span class="line"><span class="comment"> * 也可以直接实现AuthenticationEntryPoint</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未登录时返回给前端数据,注意这是json数据返回了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Msg result = Msg.fail(CustomExceptionCode.LOGIN_NEED);</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().write(objectMapper.writeValueAsString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将处理器配置到security</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义认证授权失败处理</span></span><br><span class="line">http.exceptionHandling()</span><br><span class="line">        <span class="comment">// js请求会覆盖默认</span></span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">        <span class="comment">// 默认授权失败会重定向到登录页</span></span><br><span class="line">        <span class="comment">//.accessDeniedPage("/login/page")</span></span><br><span class="line">        <span class="comment">// 默认未登录返回的json类</span></span><br><span class="line">        .authenticationEntryPoint(authenticationEntryPoint);</span><br></pre></td></tr></table></figure><h1>二、Security验证码使用</h1><h2 id="1、原理概述">1、原理概述</h2><p>在用户登录时，一般通过表单的方式进行登录都会要求用户输入验证码，<code>Spring Security</code>默认没有实现图形验证码的功能，所以需要我们自己实现</p><p><img src="http://qnypic.shawncoding.top/blog/202304071916179.png" alt></p><p>前文中实现的用户名、密码登录是在<code>UsernamePasswordAuthenticationFilter</code>过滤器进行认证的，而图形验证码一般是在用户名、密码认证之前进行验证的，所以需要在<code>UsernamePasswordAuthenticationFilter</code>过滤器之前添加一个自定义过滤器 <code>ImageCodeValidateFilter</code>，用来校验用户输入的图形验证码是否正确。自定义过滤器继承 <code>OncePerRequestFilter </code>类，该类是 Spring 提供的在一次请求中只会调用一次的 filter</p><p><img src="http://qnypic.shawncoding.top/blog/202304071916180.png" alt></p><p>自定义的过滤器 <code>ImageCodeValidateFilter </code>首先会判断请求是否为 <code>POST 方式</code>的登录表单提交请求，如果是就将其拦截进行图形验证码校验。如果验证错误，会抛出自定义异常类对象 <code>ValidateCodeException</code>，该异常类需要继承 <code>AuthenticationException </code>类。在自定义过滤器中，我们需要手动捕获自定义异常类对象，并将捕获到自定义异常类对象交给自定义失败处理器进行处理。</p><p><img src="http://qnypic.shawncoding.top/blog/202304071916181.png" alt></p><h2 id="2、实战">2、实战</h2><h3 id="2-1-验证码图片的生成">2.1 验证码图片的生成</h3><p> 更改安全配置类 SpringSecurityConfig，设置访问<code>/captcha/image</code>不需要任何权限，访问就会出现一个验证码小图片，其他几种验证码可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/129339353" target="_blank" rel="noopener" title="Java验证码">Java验证码</a></p><p>首先创建验证码的存储类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCode</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String code;           <span class="comment">// 验证码字符</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;  <span class="comment">// 过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 验证码字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 过期时间，单位秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CheckCode</span><span class="params">(String code, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.expireTime = LocalDateTime.now().plusSeconds(expireTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CheckCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认验证码 60 秒后过期</span></span><br><span class="line">        <span class="keyword">this</span>(code, <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否过期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExpried</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.expireTime.isBefore(LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证码生成类，图片直接返回，结果保存在此次session中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SESSION_KEY_IMAGE_CODE = <span class="string">"SESSION_KEY_IMAGE_CODE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证码图片边框宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> WIDTH = <span class="number">120</span>;</span><br><span class="line">    <span class="comment">// 验证码图片边框高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> HEIGHT = <span class="number">45</span>;</span><br><span class="line">    <span class="comment">// 验证码有效时间 60s</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expireIn = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通验证码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">4</span>; <span class="comment">// 验证码位数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/captcha/image"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCode</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置响应报头信息</span></span><br><span class="line">        response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"No-cache"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">        response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 设置响应的MIME类型</span></span><br><span class="line">        response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//画板</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(WIDTH,HEIGHT,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//画笔</span></span><br><span class="line">        Graphics g = image.getGraphics();</span><br><span class="line">        <span class="comment">//字体</span></span><br><span class="line">        Font font = <span class="keyword">new</span> Font(<span class="string">"微软雅黑"</span>, Font.BOLD,<span class="number">35</span>);</span><br><span class="line">        <span class="comment">//设置字体</span></span><br><span class="line">        g.setFont(font);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引入背景图片</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, WIDTH, HEIGHT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机数</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//要随机的字符串</span></span><br><span class="line">        String template = <span class="string">"123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">char</span> tempNum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="comment">//获取随机出的字符</span></span><br><span class="line">            <span class="keyword">int</span> tempIndex = random.nextInt(template.length()-<span class="number">1</span>);</span><br><span class="line">            tempNum = template.charAt(tempIndex);</span><br><span class="line">            <span class="comment">//拼成字符串</span></span><br><span class="line">            s.append(tempNum);</span><br><span class="line">            <span class="comment">//设置颜色</span></span><br><span class="line">            Color color = <span class="keyword">new</span> Color(<span class="number">20</span>+random.nextInt(<span class="number">110</span>),<span class="number">20</span>+random.nextInt(<span class="number">110</span>),random.nextInt(<span class="number">110</span>));</span><br><span class="line">            g.setColor(color);</span><br><span class="line">            <span class="comment">//字母写入图片</span></span><br><span class="line">            g.drawString(String.valueOf(tempNum),<span class="number">25</span> * i + <span class="number">12</span>, <span class="number">32</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放入session缓存，默认60s过期</span></span><br><span class="line">        CheckCode checkCode = <span class="keyword">new</span> CheckCode(s.toString().toLowerCase(),expireIn);</span><br><span class="line">        HttpSession se = request.getSession();</span><br><span class="line">        se.setAttribute(Constants.KAPTCHA_SESSION_KEY, checkCode);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取流发送给前台</span></span><br><span class="line">        ServletOutputStream ots = response.getOutputStream();</span><br><span class="line">        ImageIO.write(image,<span class="string">"JPEG"</span>,ots);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-自定义验证码过滤器">2.2 自定义验证码过滤器</h3><p>创建自定义异常类 ValidateCodeException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义验证码校验错误的异常类，继承 AuthenticationException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeException</span> <span class="keyword">extends</span> <span class="title">AuthenticationException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidateCodeException</span><span class="params">(String msg, Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidateCodeException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义图形验证码校验过滤器 ImageCodeValidateFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCodeValidateFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String codeParamter = <span class="string">"imageCode"</span>;  <span class="comment">// 前端输入的图形验证码参数名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationFailureHandler authenticationFailureHandler;  <span class="comment">// 自定义认证失败处理器</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 非 POST 方式的表单提交请求不校验图形验证码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"/login/form"</span>.equals(request.getRequestURI()) &amp;&amp; <span class="string">"POST"</span>.equals(request.getMethod())) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 校验图形验证码合法性</span></span><br><span class="line">                validate(request);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ValidateCodeException e) &#123;</span><br><span class="line">                <span class="comment">// 手动捕获图形验证码校验过程抛出的异常，将其传给失败处理器进行处理</span></span><br><span class="line">                authenticationFailureHandler.onAuthenticationFailure(request, response, e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行请求，进入下一个过滤器</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断验证码的合法性</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取用户传入的图形验证码值</span></span><br><span class="line">        String requestCode = request.getParameter(<span class="keyword">this</span>.codeParamter);</span><br><span class="line">        <span class="keyword">if</span>(requestCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestCode = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        requestCode = requestCode.trim().toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Session</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">// 获取存储在 Session 里的验证码值</span></span><br><span class="line">        CheckCode savedCode = (CheckCode) session.getAttribute(Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line">        <span class="keyword">if</span> (savedCode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 随手清除验证码，无论是失败，还是成功。客户端应在登录失败时刷新验证码</span></span><br><span class="line">            session.removeAttribute(Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验出错，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(requestCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码的值不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (savedCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (savedCode.isExpried()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码过期"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!requestCode.equalsIgnoreCase(savedCode.getCode())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码输入错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改安全配置类 SpringSecurityConfig，将自定义过滤器添加过滤器链中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageCodeValidateFilter imageCodeValidateFilter; <span class="comment">// 自定义过滤器（图形验证码校验）</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//...        </span></span><br><span class="line">        <span class="comment">// 将自定义过滤器（图形验证码校验）添加到 UsernamePasswordAuthenticationFilter 之前</span></span><br><span class="line">        http.addFilterBefore(imageCodeValidateFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、session异常问题">3、session异常问题</h2><p>可能会出现获取验证码的session和需要输入验证码不是同一个的情况，添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSessionConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CookieSerializer <span class="title">httpSessionIdResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultCookieSerializer cookieSerializer = <span class="keyword">new</span> DefaultCookieSerializer();</span><br><span class="line">        <span class="comment">// 取消仅限同一站点设置,防止跨域造成的session不一样，这样验证码就会有问题</span></span><br><span class="line">        cookieSerializer.setSameSite(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> cookieSerializer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、Remember-Me 和注销</h1><h2 id="1、Remember-Me-功能概述">1、Remember-Me 功能概述</h2><h3 id="1-1-概述">1.1 概述</h3><p>在实际开发中，为了用户登录方便常常会启用记住我（Remember-Me）功能。如果用户登录时勾选了“记住我”选项，那么在一段有效时间内，会默认自动登录，免去再次输入用户名、密码等登录操作。该功能的实现机理是根据用户登录信息生成 Token 并保存在用户浏览器的 Cookie 中，当用户需要再次登录时，自动实现校验并建立登录态的一种机制。<code>Spring Security</code>提供了两种 Remember-Me 的实现方式：</p><ul><li>简单加密 Token：用散列算法加密用户必要的登录系信息并生成 Token 令牌。</li><li>持久化 Token：数据库等持久性数据存储机制用的持久化 Token 令牌。</li></ul><h3 id="1-2-基本原理">1.2 基本原理</h3><p>Remember-Me 功能的开启需要在<code>configure(HttpSecurity http)</code>方法中通过<code>http.rememberMe()</code>配置，该配置主要会在过滤器链中添加 RememberMeAuthenticationFilter 过滤器，通过该过滤器实现自动登录。该过滤器的位置在其它认证过滤器之后，其它认证过滤器没有进行认证处理时，该过滤器尝试工作：</p><p><img src="http://qnypic.shawncoding.top/blog/202304071916182.png" alt></p><p><strong>注意：</strong> Remember-Me 功能是用于再次登录（认证）的，而不是再次请求。工作流程如下：</p><ul><li>当用户成功登录认证后，浏览器中存在两个 Cookie，一个是 remember-me，另一个是 JSESSIONID。用户再次请求访问时，请求首先被 <code>SecurityContextPersistenceFilter </code>过滤器拦截，该过滤器会根据 JSESSIONID 获取对应 Session 中存储的 SecurityContext 对象。如果获取到的 SecurityContext 对象中存储了认证用户信息对象 Authentiacaion，也就是说线程可以直接获得认证用户信息，那么后续的认证过滤器不需要对该请求进行拦截，remember-me 不起作用。</li><li>当 JSESSIONID 过期后，浏览器中只存在 remember-me 的 Cookie。用户再次请求访问时，由于请求没有携带 JSESSIONID，SecurityContextPersistenceFilter 过滤器无法获取 Session 中的 SecurityContext 对象，也就没法获得认证用户信息，后续需要进行登录认证。如果没有 remember-me 的 Cookie，浏览器会重定向到登录页面进行表单登录认证；但是 remember-me 的 Cookie 存在，RememberMeAuthenticationFilter 过滤器会将请求进行拦截，根据 remember-me 存储的 Token 值实现自动登录，并将成功登录后的认证用户信息对象 Authentiacaion 存储到 SecurityContext 中。当响应返回时，SecurityContextPersistenceFilter 过滤器会将 SecurityContext 存储在 Session 中，下次请求又通过 JSEESIONID 获取认证用户信息。</li></ul><p>**总结：**remember-me 只有在 JSESSIONID 失效和前面的过滤器认证失败或者未进行认证时才发挥作用。此时，只要 remember-me 的 Cookie 不过期，我们就不需要填写登录表单，就能实现再次登录，并且 remember-me 自动登录成功之后，会生成新的 Token 替换旧的 Token，相应 Cookie 的 Max-Age 也会重置。</p><p>此处对<code>http.rememberMe()</code>返回值的主要方法进行说明，这些方法涉及 Remember-Me 配置：</p><ul><li><code>rememberMeParameter(String rememberMeParameter)</code>：指定在登录时“记住我”的 HTTP 参数，默认为 <code>remember-me</code></li><li><code>key(String key)</code>：“记住我”的 Token 中的标识字段，默认是一个随机的 UUID 值</li><li><code>tokenValiditySeconds(int tokenValiditySeconds)</code>：“记住我” 的 Token 令牌有效期，单位为秒，即对应的 cookie 的 Max-Age 值，默认时间为 2 周</li><li><code>userDetailsService(UserDetailsService userDetailsService)</code>：指定 Remember-Me 功能自动登录过程使用的 UserDetailsService 对象，默认使用 Spring 容器中的 UserDetailsService 对象</li><li><code>tokenRepository(PersistentTokenRepository tokenRepository)</code>：指定 TokenRepository 对象，用来配置持久化 Token</li><li><code>alwaysRemember(boolean alwaysRemember)</code>：是否应该始终创建记住我的 Token，默认为 false</li><li><code>useSecureCookie(boolean useSecureCookie)</code>：是否设置 Cookie 为安全，如果设置为 true，则必须通过 https 进行连接请求</li></ul><h2 id="2、Remember-Me实战">2、Remember-Me实战</h2><blockquote><p>源码分析可以参考：<a href="https://www.cnblogs.com/zongmin/p/13783285.html" target="_blank" rel="noopener" title="https://www.cnblogs.com/zongmin/p/13783285.html">https://www.cnblogs.com/zongmin/p/13783285.html</a></p></blockquote><h3 id="2-1-简单加密-Token（基本使用）">2.1 简单加密 Token（基本使用）</h3><p>在用户选择“记住我”登录并成功认证后，<code>Spring Security</code>将默认会生成一个名为 remember-me 的 Cookie 存储 Token 并发送给浏览器；用户注销登录后，该 Cookie 的 Max-Age 会被设置为 0，即删除该 Cookie。Token 值由下列方式组合而成：<code>base64(username + &quot;:&quot; + expirationTime + &quot;:&quot; +md5Hex(username + &quot;:&quot; + expirationTime + &quot;:&quot; + password + &quot;:&quot; + key))</code></p><p>其中，username 代表用户名；password 代表用户密码；expirationTime 表示记住我的 Token 的失效日期，以毫秒为单位；key 表示防止修改 Token 的标识，默认是一个随机的 UUID 值，默认表单如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login/form&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"imageCode"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"验证码"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:onclick</span>=<span class="string">"this.src='/code/image?'+Math.random()"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/code/image&#125;"</span> <span class="attr">alt</span>=<span class="string">"验证码"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;param.error&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.SPRING_SECURITY_LAST_EXCEPTION.message&#125;"</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>用户名或密码错误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"remember-me"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改安全配置类 SpringSecurityConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomUserDetailsServiceImpl userDetailsService;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 开启 Remember-Me 功能</span></span><br><span class="line">        http.rememberMe()</span><br><span class="line">                <span class="comment">// 指定在登录时“记住我”的 HTTP 参数，默认为 remember-me</span></span><br><span class="line">                .rememberMeParameter(<span class="string">"remember-me"</span>)</span><br><span class="line">                <span class="comment">// 设置 Token 有效期为 200s，默认时长为 2 星期</span></span><br><span class="line">                .tokenValiditySeconds(<span class="number">200</span>)</span><br><span class="line">              <span class="comment">// 指定 UserDetailsService 对象</span></span><br><span class="line">                .userDetailsService(userDetailsService);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启注销登录功能</span></span><br><span class="line">        http.logout()</span><br><span class="line">                <span class="comment">// 用户注销登录时访问的 url，默认为 /logout</span></span><br><span class="line">                .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                <span class="comment">// 用户成功注销登录后重定向的地址，默认为 loginPage() + ?logout</span></span><br><span class="line">                .logoutSuccessUrl(<span class="string">"/login/page?logout"</span>);            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-持久化-Token（基本使用）">2.2 持久化 Token（基本使用）</h3><p>在用户选择“记住我”成功登录认证后，默认会生成一个名为 remember-me 的 Cookie 储存 Token，并发送给浏览器，具体实现流程如下：</p><p><img src="http://qnypic.shawncoding.top/blog/202304071916183.png" alt></p><ul><li>用户选择“记住我”功能成功登录认证后，<code>Spring Security</code>会把用户名 username、序列号 series、令牌值 token 和最后一次使用自动登录的时间 last_used 作为一条 Token 记录存入数据库表中，同时生成一个名为 remember-me 的 Cookie 存储<code>series:token</code>的 base64 编码，该编码为发送给浏览器的 Token</li><li>当用户需要再次登录时，RememberMeAuthenticationFilter 过滤器首先会检查请求是否有 remember-me 的 Cookie。如果存在，则检查其 Token 值中的 series 和 token 字段是否与数据库中的相关记录一致，一致则通过验证，并且<strong>系统重新生成一个新 token 值替换数据库中对应记录的旧 token，该记录的序列号 series 保持不变，认证时间 last_used 更新，同时重新生成新的 Token（旧 series : 新 token）通过 Cookie 发送给浏览器</strong>，remember-me 的 Cookie 的 Max-Age 也因此重置</li><li>上述验证通过后，获取数据库中对应 Token 记录的 username 字段，调用 UserDetailsService 获取用户信息。之后进行登录认证，认证成功后将认证用户信息 Authentication 对象存入 SecurityContext</li><li>如果对应的 Cookie 值包含的 token 字段与数据库中对应 Token 记录的 token 字段不匹配，则有可能是用户的 Cookie 被盗用，这时将<strong>会删除数据库中与当前用户相关的所有 Token 记录</strong>，用户需要重新进行表单登录</li><li>如果对应的 Cookie 不存在，或者其值包含的 series 和 token 字段与数据库中的记录不匹配，则用户需要重新进行表单登录。<strong>如果用户退出登录，则删除数据库中对应的 Token 记录，并将相应的 Cookie 的 Max-Age 设置为 0</strong></li></ul><p>首先创建数据库表 persistent_logins，用于存储自动登录信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`persistent_logins`</span> (</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`series`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="string">`token`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`last_used`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> 修改安全配置类 <code>SpringSecurityConfig</code>，使用持久化 Token 方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;  <span class="comment">// 数据源</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 JdbcTokenRepositoryImpl，用于 Remember-Me 的持久化 Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTokenRepositoryImpl <span class="title">tokenRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">        <span class="comment">// 配置数据源</span></span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 第一次启动的时候可以使用以下语句自动建表（可以不用这句话，自己手动建表，源码中有语句的）</span></span><br><span class="line">        <span class="comment">// jdbcTokenRepository.setCreateTableOnStartup(true);</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 开启 Remember-Me 功能</span></span><br><span class="line">        http.rememberMe()</span><br><span class="line">                <span class="comment">// 指定在登录时“记住我”的 HTTP 参数，默认为 remember-me</span></span><br><span class="line">                .rememberMeParameter(<span class="string">"remember-me"</span>)</span><br><span class="line">                <span class="comment">// 设置 Token 有效期为 200s，默认时长为 2 星期</span></span><br><span class="line">                .tokenValiditySeconds(<span class="number">200</span>)</span><br><span class="line">                <span class="comment">// 设置操作数据表的 Repository</span></span><br><span class="line">                .tokenRepository(tokenRepository())</span><br><span class="line">                <span class="comment">// 指定 UserDetailsService 对象</span></span><br><span class="line">                .userDetailsService(userDetailsService);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启注销登录功能</span></span><br><span class="line">        http.logout()</span><br><span class="line">                <span class="comment">// 用户注销登录时访问的 url，默认为 /logout</span></span><br><span class="line">                .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                <span class="comment">// 用户成功注销登录后重定向的地址，默认为 loginPage() + ?logout</span></span><br><span class="line">                .logoutSuccessUrl(<span class="string">"/login/page?logout"</span>);             </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、注销登录">3、注销登录</h2><h3 id="3-1-概述">3.1 概述</h3><p>注销登录需要在安全配置类的<code>configure(HttpSecurity http)</code> 里使用<code>http.logout()</code>配置，该配置主要会在过滤器链中加入 LogoutFilter 过滤器，<code>Spring Security</code>通过该过滤器实现注销登录功能。此处对<code>http.logout()</code>返回值的主要方法进行介绍，这些方法设计注销登录的配置，具体如下：</p><ul><li><code>logoutUrl(String outUrl)</code>：指定用户注销登录时请求访问的地址，默认为 POST 方式的<code>/logout</code></li><li><code>logoutSuccessUrl(String logoutSuccessUrl)</code>：指定用户成功注销登录后的重定向地址，默认为<code>/登录页面url?logout</code></li><li><code>logoutSuccessHandler(LogoutSuccessHandler logoutSuccessHandler)</code>：指定用户成功注销登录后使用的处理器</li><li><code>deleteCookies(String ...cookieNamesToClear)</code>：指定用户注销登录后删除的 Cookie</li><li><code>invalidateHttpSession(boolean invalidateHttpSession)</code>：指定用户注销登录后是否立即清除用户的 Session，默认为 true</li><li><code>clearAuthentication(boolean clearAuthentication)</code>：指定用户退出登录后是否立即清除用户认证信息对象 Authentication，默认为 true</li><li><code>addLogoutHandler(LogoutHandler logoutHandler)</code>：指定用户注销登录时使用的处理器</li></ul><p>需要注意，<code>Spring Security</code>默认以 POST 方式请求访问<code>/logout</code>注销登录，以 POST 方式请求的原因是为了防止 csrf（跨站请求伪造），如果想使用 GET 方式的请求，则需要关闭 csrf 防护。前面我们能以 GET 方式的请求注销登录，是因为我们在<code>configure(HttpSecurity http)</code>方法中关闭了 csrf 防护</p><p>默认配置下，成功注销登录后会进行如下三个操作：</p><ul><li>删除用户浏览器中的指定 Cookie</li><li>将用户浏览器中 remember-me 的 Cookie 删除，并清除用户在数据库中 remember-me 的 Token 记录</li><li>当前用户的 Session 删除，并清除当前 SecurityContext 中的用户认证信息对象 Authentication</li><li>通知用户浏览器重定向到<code>/登录页面url?logout</code></li></ul><h3 id="3-2-自定义登出处理器">3.2 自定义登出处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承 SimpleUrlLogoutSuccessHandler 处理器，该类是 logoutSuccessUrl() 方法使用的成功注销登录处理器</span></span><br><span class="line"><span class="comment"> * 也可以直接实现LogoutSuccessHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomLogoutSuccessHandler</span> <span class="keyword">extends</span> <span class="title">SimpleUrlLogoutSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String xRequestedWith = request.getHeader(<span class="string">"x-requested-with"</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"JSON"</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            <span class="comment">// 成功注销登录，响应 JSON 数据</span></span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            response.getWriter().write(objectMapper.writeValueAsString(Msg.success(<span class="number">200</span>, <span class="string">"注销登录成功！"</span>)));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 以下配置等同于在 http.logout() 后配置 logoutSuccessUrl("/login/page?logout")</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置默认的重定向路径</span></span><br><span class="line">            <span class="keyword">super</span>.setDefaultTargetUrl(<span class="string">"/login/page?logout"</span>);</span><br><span class="line">            <span class="comment">// 调用父类的 onLogoutSuccess() 方法</span></span><br><span class="line">            <span class="keyword">super</span>.onLogoutSuccess(request, response, authentication);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-安全配置类">3.3 安全配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomLogoutSuccessHandler logoutSuccessHandler;  <span class="comment">// 自定义成功注销登录处理器</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 开启注销登录功能</span></span><br><span class="line">        http.logout()</span><br><span class="line">                <span class="comment">// 用户注销登录时访问的 url，默认为 /logout</span></span><br><span class="line">                .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                <span class="comment">// 用户成功注销登录后重定向的地址，默认为 loginPage() + ?logout</span></span><br><span class="line">                <span class="comment">//.logoutSuccessUrl("/login/page?logout")</span></span><br><span class="line">                <span class="comment">// 不再使用 logoutSuccessUrl() 方法，使用自定义的成功注销登录处理器</span></span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">                <span class="comment">// 指定用户注销登录时删除的 Cookie</span></span><br><span class="line">                .deleteCookies(<span class="string">"JSESSIONID"</span>)</span><br><span class="line">                <span class="comment">// 用户注销登录时是否立即清除用户的 Session，默认为 true</span></span><br><span class="line">                .invalidateHttpSession(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 用户注销登录时是否立即清除用户认证信息 Authentication，默认为 true</span></span><br><span class="line">                .clearAuthentication(<span class="keyword">true</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>四、Session 会话管理</h1><h2 id="1、Session管理配置">1、Session管理配置</h2><p>Session 会话管理需要在<code>configure(HttpSecurity http)</code>方法中通过<code>http.sessionManagement()</code>开启配置。此处对<code>http.sessionManagement()</code>返回值的主要方法进行说明，这些方法涉及 Session 会话管理的配置，具体如下：</p><ul><li><code>invalidSessionUrl(String invalidSessionUrl)</code>：指定会话失效时（请求携带无效的 JSESSIONID 访问系统）重定向的 URL，默认重定向到登录页面</li><li><code>invalidSessionStrategy(InvalidSessionStrategy invalidSessionStrategy)</code>：指定会话失效时（请求携带无效的 JSESSIONID 访问系统）的处理策略</li><li><code>maximumSessions(int maximumSessions)</code>：指定每个用户的最大并发会话数量，-1 表示不限数量</li><li><code>maxSessionsPreventsLogin(boolean maxSessionsPreventsLogin)</code>：如果设置为 true，表示某用户达到最大会话并发数后，新会话请求会被拒绝登录；如果设置为 false，表示某用户达到最大会话并发数后，新会话请求访问时，其最老会话会在下一次请求时失效并根据 expiredUrl() 或者 expiredSessionStrategy() 方法配置的会话失效策略进行处理，默认值为 false</li><li><code>expiredUrl(String expiredUrl)</code>：如果某用户达到最大会话并发数后，新会话请求访问时，其最老会话会在下一次请求时失效并重定向到 expiredUrl</li><li><code>expiredSessionStrategy(SessionInformationExpiredStrategy expiredSessionStrategy)</code>：如果某用户达到最大会话并发数后，新会话请求访问时，其最老会话会在下一次请求中失效并按照该策略处理请求。注意如果本方法与 expiredUrl() 同时使用，优先使用 expiredUrl() 的配置</li><li><code>sessionRegistry(SessionRegistry sessionRegistry)</code>：设置所要使用的 sessionRegistry，默认配置的是 SessionRegistryImpl 实现类</li></ul><h2 id="2、Session-会话失效处理">2、Session 会话失效处理</h2><blockquote><p>当用户的 Session 会话失效（请求携带着无效的 JSESSIONID 访问系统）时，可以制定相关策略对会话失效的请求进行处理</p></blockquote><h3 id="2-1-Session-失效时间">2.1  Session 失效时间</h3><p>Session 的失效时间配置是 SpringBoot 原生支持的，可以在 配置文件中直接配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment"># session 失效时间，单位是秒，默认为 30min</span></span><br><span class="line">    <span class="comment"># Session 的失效时间至少要 1 分钟，少于 1 分钟按照 1 分钟配置,源码详情TomcatServletWebServerFactory.getSessionTimeoutInMinutes()</span></span><br><span class="line">    <span class="attr">session:</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">30m</span></span><br><span class="line">      <span class="comment"># JSESSIONID (Cookie)的生命周期，单位是秒，默认为 -1</span></span><br><span class="line">      <span class="attr">cookie:</span></span><br><span class="line">        <span class="attr">max-age:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="2-2-invalidSessionUrl-方法">2.2 invalidSessionUrl 方法</h3><p>配置 Session 会话失效时重定向到<code>/login/page</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 开启 Session 会话管理配置</span></span><br><span class="line">        http.sessionManagement()</span><br><span class="line">                <span class="comment">// 设置 Session 会话失效时重定向路径，默认为 loginPage()</span></span><br><span class="line">                .invalidSessionUrl(<span class="string">"/login/page"</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-invalidSessionStrategy-方法">2.3 invalidSessionStrategy 方法</h3><p>自定义 Session 会话失效处理策略 CustomInvalidSessionStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户请求携带无效的 JSESSIONID 访问时的处理策略，即对应的 Session 会话失效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomInvalidSessionStrategy</span> <span class="keyword">implements</span> <span class="title">InvalidSessionStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedirectStrategy redirectStrategy = <span class="keyword">new</span> DefaultRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInvalidSessionDetected</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 清除浏览器中的无效的 JSESSIONID</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>, <span class="keyword">null</span>);</span><br><span class="line">        cookie.setPath(getCookiePath(request));</span><br><span class="line">        cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        String xRequestedWith = request.getHeader(<span class="string">"x-requested-with"</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"JSON"</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            <span class="comment">// 响应 JSON 数据</span></span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            response.getWriter().write(objectMapper.writeValueAsString(Msg.fail(CustomExceptionCode.LOGIN_SESSION_EXPIRED)));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 重定向到登录页面</span></span><br><span class="line">            redirectStrategy.sendRedirect(request, response, <span class="string">"/login/page"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCookiePath</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line">        <span class="keyword">return</span> contextPath.length() &gt; <span class="number">0</span> ? contextPath : <span class="string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改安全配置类 SpringSecurityConfig，配置使用自定义的 Session 会话失效处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomInvalidSessionStrategy invalidSessionStrategy;  <span class="comment">// 自定义 Session 会话失效策略</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 开启 Session 会话管理配置</span></span><br><span class="line">        http.sessionManagement()</span><br><span class="line">                <span class="comment">// 设置 Session 会话失效时重定向路径，默认为 loginPage()</span></span><br><span class="line">                <span class="comment">// .invalidSessionUrl("/login/page")</span></span><br><span class="line">                <span class="comment">// 配置使用自定义的 Session 会话失效处理策略</span></span><br><span class="line">                .invalidSessionStrategy(invalidSessionStrategy);       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Session-会话并发控制">3、Session 会话并发控制</h2><p>Session 会话并发控制可以限制用户的最大并发会话数量，例如：只允许一个用户在一个地方登陆，也就是说每个用户在系统中只能有一个 Session 会话。在使用 Session 会话并发控制时，最好保证自定义的 UserDetails 实现类重写了 equals() 和 hashCode() 方法</p><h3 id="3-1-两种情况分析">3.1 两种情况分析</h3><ul><li><strong>同一个用户在第二个地方登录，则不允许他二次登录</strong>。这里设置<code>maximumSessions(1)</code>(单用户的 Session 最大并发会话数量)以及<code>maxSessionsPreventsLogin(true)</code>(用户达到最大会话并发数后，新会话请求会被拒绝登录)；上述配置限制了同一个用户的二次登陆，但是不建议使用该配置。因为用户一旦被盗号，那真正的用户后续就无法登录，只能通过联系管理员解决，所以如果只能一个用户 Session 登录，一般是新会话登录并将老会话踢下线。</li><li><strong>如果同一个用户在第二个地方登录，则将第一个踢下线</strong></li></ul><p>首先自定义最老会话被踢时的处理策略 CustomSessionInformationExpiredStrategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前提：Session 并发处理的配置为 maxSessionsPreventsLogin(false)</span></span><br><span class="line"><span class="comment"> * 用户的并发 Session 会话数量达到上限，新会话登录后，最老会话会在下一次请求中失效，并执行此策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSessionInformationExpiredStrategy</span> <span class="keyword">implements</span> <span class="title">SessionInformationExpiredStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedirectStrategy redirectStrategy = <span class="keyword">new</span> DefaultRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExpiredSessionDetected</span><span class="params">(SessionInformationExpiredEvent event)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request = event.getRequest();</span><br><span class="line">        HttpServletResponse response = event.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最老会话被踢下线时显示的信息</span></span><br><span class="line">        UserDetails userDetails = (UserDetails) event.getSessionInformation().getPrincipal();</span><br><span class="line">        String msg = String.format(<span class="string">"用户[%s]在另外一台机器登录，您已下线！"</span>, userDetails.getUsername());</span><br><span class="line"></span><br><span class="line">        String xRequestedWith = event.getRequest().getHeader(<span class="string">"x-requested-with"</span>);</span><br><span class="line">        <span class="comment">// 判断前端的请求是否为 ajax 请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"JSON"</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            <span class="comment">// 认证成功，响应 JSON 数据</span></span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            response.getWriter().write(objectMapper.writeValueAsString(Msg.problem(<span class="number">400</span>,msg)));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 返回到登录页面显示信息</span></span><br><span class="line">            AuthenticationException e = <span class="keyword">new</span> AuthenticationServiceException(msg);</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"SPRING_SECURITY_LAST_EXCEPTION"</span>, e);</span><br><span class="line">            redirectStrategy.sendRedirect(request, response, <span class="string">"/login/page?error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改安全配置类 <code>SpringSecurityConfig</code>，配置最老会话被踢时的处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomSessionInformationExpiredStrategy sessionInformationExpiredStrategy;  <span class="comment">// 自定义最老会话失效策略</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 开启 Session 会话管理配置</span></span><br><span class="line">        http.sessionManagement()</span><br><span class="line">                <span class="comment">// 设置 Session 会话失效时重定向路径，默认为 loginPage()</span></span><br><span class="line">                <span class="comment">// .invalidSessionUrl("/login/page")</span></span><br><span class="line">                <span class="comment">// 配置使用自定义的 Session 会话失效处理策略</span></span><br><span class="line">                .invalidSessionStrategy(invalidSessionStrategy)</span><br><span class="line">                <span class="comment">// 设置单用户的 Session 最大并发会话数量，-1 表示不受限制</span></span><br><span class="line">                .maximumSessions(<span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 设置为 true，表示某用户达到最大会话并发数后，新会话请求会被拒绝登录；</span></span><br><span class="line">                <span class="comment">// 设置为 false，表示某用户达到最大会话并发数后，新会话请求访问时，其最老会话会在下一次请求时失效</span></span><br><span class="line">                .maxSessionsPreventsLogin(<span class="keyword">false</span>)</span><br><span class="line">                <span class="comment">// 设置所要使用的 sessionRegistry，默认为 SessionRegistryImpl 实现类</span></span><br><span class="line">                .sessionRegistry(sessionRegistry())</span><br><span class="line">                <span class="comment">// 最老会话在下一次请求时失效，并重定向到 /login/page</span></span><br><span class="line">                <span class="comment">//.expiredUrl("/login/page");</span></span><br><span class="line">                <span class="comment">// 最老会话在下一次请求时失效，并按照自定义策略处理</span></span><br><span class="line">                .expiredSessionStrategy(sessionInformationExpiredStrategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 SessionRegistry，该 Bean 用于管理 Session 会话并发控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionRegistry <span class="title">sessionRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SessionRegistryImpl();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 Session 的监听器（如果使用并发 Sessoion 控制，一般都需要配置）</span></span><br><span class="line"><span class="comment">     * 解决 Session 失效后, SessionRegistry 中 SessionInformation 没有同步失效问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpSessionEventPublisher <span class="title">httpSessionEventPublisher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpSessionEventPublisher();</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原理分析可以参考：<a href="https://www.cnblogs.com/zongmin/p/13783348.html" target="_blank" rel="noopener" title="https://www.cnblogs.com/zongmin/p/13783348.html">https://www.cnblogs.com/zongmin/p/13783348.html</a></p></blockquote><h3 id="3-2-自定义统计session使用">3.2 自定义统计session使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SessionRegistry sessionRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test4"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getOnlineSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 统计当前用户未过期的并发 Session 数量</span></span><br><span class="line">        UserDetails user = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">        List&lt;SessionInformation&gt; sessions = <span class="keyword">this</span>.sessionRegistry.getAllSessions(user, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span>  Msg.success().add(<span class="string">"size"</span>,sessions.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test5"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getOnlineUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 统计所有在线用户</span></span><br><span class="line">        List&lt;String&gt; userList = sessionRegistry.getAllPrincipals().stream()</span><br><span class="line">                .map(user -&gt; ((UserDetails) user).getUsername())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> Msg.success().add(<span class="string">"userList"</span>,userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、-Redis-共享-Session">4、 Redis 共享 Session</h2><h3 id="4-1-操作概述">4.1 操作概述</h3><p>首先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis 依赖启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- redis 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 Redis 管理 session --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件进行配置，同时Redis 存储 Session 默认的序列化方式为 <code>JdkSerializationRedisSerializer</code>，所以存入 <code>Session </code>的对象都要实现 <code>Serializable </code>接口。因此，要保证前面代码中的验证码 <code>CheckCode </code>类实现 <code>Serializable </code>接口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># Redis 服务器地址</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment"># Redis 服务器连接端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># Redis 服务器连接密码（默认无）</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制），默认 8</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="comment"># 连接池大阻塞等待时间（使用负值表示没有限制），默认 -1</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">PT10S</span></span><br><span class="line">        <span class="comment"># 连接池中的大空闲连接 默认 8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 连接池中的小空闲连接 默认 0</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">PT10S</span></span><br><span class="line">  <span class="comment"># 使用 Redis 存储 Session，默认为 none（使用内存存储）</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment"># session 失效时间，单位是秒，默认为 30min</span></span><br><span class="line">    <span class="comment"># Session 的失效时间至少要 1 分钟，少于 1 分钟按照 1 分钟配置</span></span><br><span class="line">    <span class="attr">session:</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">30m</span></span><br><span class="line">      <span class="comment"># JSESSIONID (Cookie)的生命周期，单位是秒，默认为 -1</span></span><br><span class="line">      <span class="attr">cookie:</span></span><br><span class="line">        <span class="attr">max-age:</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 指定存储 SessionId 的 Cookie 名（使用 Redis 存储 Session 后，Cookie 名默认会变为 SESSION）</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">JSESSIONID</span></span><br></pre></td></tr></table></figure><p>最后启动访问即可</p><h3 id="4-2-Redis数据解释">4.2 Redis数据解释</h3><p>一共有三组数据：</p><ul><li><p><strong>第一组：string 结构，用于记录指定 Session 的剩余存活时间</strong></p><p><code>spring:session:sessions:9bf69e21-ddd6-4c53-b7e6-976c047158cb</code>就是这个 string 结构的 key，后缀的字符串是 JSEESIONID 的 base64 解码值。其 value 为空，TTL 时间为对应 Session 的剩余存活时间</p></li><li><p><strong>第二组：hash 结构，用于存储指定 Session 的数据</strong></p><p><code>spring:session:sessions:9bf69e21-ddd6-4c53-b7e6-976c047158cb</code>就是这个 hash 结构的 key，后缀的字符串是 JSEESIONID 的 base64 解码值。hash 结构的 value 值本身就是一个 map 集合，分别为 lastAccessedTime(最后访问时间)、creationTime(创建时间)、maxInactiveInterval(最大存活时间)、<code>sessionAttr:属性名</code> (Session 里存储的属性数据)</p></li><li><p><strong>第三组：set 结构，用于记录 Session 的过期时间</strong></p><p><code>spring:session:expirations:1602144780000</code> 就是这个 set 结构的 key，后缀的字符串是一个整分钟的时间戳，其 value 是一个 set 集合，存的是这个时间戳的分钟内要失效的 Session 对应的 JSEESIONID 的 base64 解码值</p></li></ul><h2 id="5、remember-me-失效解释-补充">5、remember-me 失效解释(补充)</h2><p>当配置了<code>.maximumSessions(1).maxSessionsPreventsLogin(false)</code>要求只能一个用户 Session 登录时，我们在两个地方使用相同的账号，并且都勾选 remember-me 进行登录。最老会话的下一次请求不但会使老会话强制失效，还会使数据库中所有该用户的所有 remember-me 记录被删除。</p><h1>五、补充与说明</h1><p>我的config文件，仅供参考</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@EnableWebSecurity</span>       <span class="comment">// 开启 MVC Security 安全配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationSuccessHandler authenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomLogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义 Session 会话失效策略</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomInvalidSessionStrategy invalidSessionStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义数据库验证认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CustomUserDetailsServiceImpl userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义最老会话失效策略</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomSessionInformationExpiredStrategy sessionInformationExpiredStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要登录处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无权访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义登录校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomAuthenticationProvider authenticationProvider;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义过滤器（图形验证码校验）</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageCodeValidateFilter imageCodeValidateFilter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码编码器，密码不能明文存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用 BCryptPasswordEncoder 密码编码器，该编码器会将随机产生的 salt 混入最终生成的密文中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制用户认证管理器来实现用户认证</span></span><br><span class="line"><span class="comment">     * 内存覆盖</span></span><br><span class="line"><span class="comment">     * 最简单是配置文件直接覆盖写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span></span><br><span class="line"><span class="comment">//        // 采用内存存储方式，用户认证信息存储在内存中</span></span><br><span class="line"><span class="comment">//        auth.inMemoryAuthentication()</span></span><br><span class="line"><span class="comment">//                .withUser("admin").password(passwordEncoder()</span></span><br><span class="line"><span class="comment">//                        .encode("123456")).roles("ADMIN");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内存中覆盖默认的用户名与密码</span></span><br><span class="line"><span class="comment">     * Security5.7后新的写法</span></span><br><span class="line"><span class="comment">     * 和上面一样作用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public UserDetailsService userDetailsService()&#123;</span></span><br><span class="line"><span class="comment">//        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();</span></span><br><span class="line"><span class="comment">//        log.info("Password: &#123;&#125;", passwordEncoder().encode("123456"));</span></span><br><span class="line"><span class="comment">//        manager.createUser(User.withUsername("admin").password(passwordEncoder().encode("123456")).authorities("ADMIN").build());</span></span><br><span class="line"><span class="comment">//        return manager;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;  <span class="comment">// 数据源</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 JdbcTokenRepositoryImpl，用于 Remember-Me 的持久化 Token</span></span><br><span class="line"><span class="comment">     * 每次认证登录会生成一次记录，注销或过期会自动删除</span></span><br><span class="line"><span class="comment">     * 下面配置了才用，否则不用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTokenRepositoryImpl <span class="title">tokenRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">        <span class="comment">// 配置数据源</span></span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 第一次启动的时候可以使用以下语句自动建表（可以不用这句话，自己手动建表，源码中有语句的）</span></span><br><span class="line">        <span class="comment">// jdbcTokenRepository.setCreateTableOnStartup(true);</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制用户认证管理器来实现用户认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、采用内存存储方式，用户认证信息存储在内存中</span></span><br><span class="line">        <span class="comment">// auth.inMemoryAuthentication()</span></span><br><span class="line">        <span class="comment">//        .withUser("admin").password(passwordEncoder()</span></span><br><span class="line">        <span class="comment">//        .encode("123456")).roles("ROLE_ADMIN");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、不再使用内存方式存储用户认证信息，而是动态从数据库中获取</span></span><br><span class="line">        <span class="comment">//auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、自定义登录验证</span></span><br><span class="line">        auth.authenticationProvider(authenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制基于 HTTP 请求的用户访问控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动 form 表单登录</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                <span class="comment">// 设置登录页面的访问路径，默认为 /login，GET 请求；该路径不设限访问</span></span><br><span class="line">                .loginPage(<span class="string">"/login/page"</span>)</span><br><span class="line">                <span class="comment">// 设置登录表单提交路径，默认为 loginPage() 设置的路径，POST 请求</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login/form"</span>)</span><br><span class="line">                <span class="comment">// 设置登录表单中的用户名参数，默认为 username</span></span><br><span class="line">                .usernameParameter(<span class="string">"name"</span>)</span><br><span class="line">                <span class="comment">// 设置登录表单中的密码参数，默认为 password</span></span><br><span class="line">                .passwordParameter(<span class="string">"pwd"</span>)</span><br><span class="line">                <span class="comment">// 认证成功处理，如果存在原始访问路径，则重定向到该路径；如果没有，则重定向 /index</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/index"</span>)</span><br><span class="line">                <span class="comment">// 认证失败处理，重定向到指定地址，默认为 loginPage() + ?error；该路径不设限访问</span></span><br><span class="line">                .failureUrl(<span class="string">"/login/page?error"</span>)</span><br><span class="line">                <span class="comment">// 不再使用 defaultSuccessUrl() 和 failureUrl() 方法进行认证成功和失败处理，</span></span><br><span class="line">                <span class="comment">// 使用自定义的认证成功和失败处理器，可以在自定义那里进行设置，如果js请求就返回json，否则就返回表单(即上面设置的路径)</span></span><br><span class="line">                .successHandler(authenticationSuccessHandler)</span><br><span class="line">                .failureHandler(authenticationFailureHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启基于 HTTP 请求访问控制</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// 以下访问不需要任何权限，任何人都可以访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/login/page"</span>,<span class="string">"/captcha/image"</span>).permitAll()</span><br><span class="line">                <span class="comment">// 对于角色ROLE_ADMIN的授权方式有两种：hasRole("ADMIN")和hasAuthority("ROLE_ADMIN")，这两种方式是等价的。</span></span><br><span class="line">                <span class="comment">// 以下访问需要 ROLE_ADMIN 权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"ADMIN"</span>)</span><br><span class="line">                <span class="comment">// 以下访问需要 ROLE_USER 权限</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasAuthority(<span class="string">"ROLE_USER"</span>)</span><br><span class="line">                <span class="comment">// 其它任何请求访问都需要先通过认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">        <span class="comment">// 将自定义过滤器（图形验证码校验）添加到 UsernamePasswordAuthenticationFilter 之前</span></span><br><span class="line">        http.addFilterBefore(imageCodeValidateFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 csrf 防护</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启 Remember-Me 功能</span></span><br><span class="line">        http.rememberMe()</span><br><span class="line">                <span class="comment">// 指定在登录时“记住我”的 HTTP 参数，默认为 remember-me</span></span><br><span class="line">                .rememberMeParameter(<span class="string">"remember-me"</span>)</span><br><span class="line">                <span class="comment">// 设置 Token 有效期为 200s，默认时长为 2 星期</span></span><br><span class="line">                .tokenValiditySeconds(<span class="number">200</span>)</span><br><span class="line">                <span class="comment">// 设置操作数据表的 Repository</span></span><br><span class="line"><span class="comment">//                .tokenRepository(tokenRepository())</span></span><br><span class="line">                <span class="comment">// 指定 UserDetailsService 对象</span></span><br><span class="line">                .userDetailsService(userDetailsService);</span><br><span class="line">        <span class="comment">// 开启注销登录功能</span></span><br><span class="line">        http.logout()</span><br><span class="line">                <span class="comment">// 用户注销登录时访问的 url，默认为 /logout</span></span><br><span class="line">                .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                <span class="comment">// 用户成功注销登录后重定向的地址，默认为 loginPage() + ?logout</span></span><br><span class="line">                .logoutSuccessUrl(<span class="string">"/login/page?logout"</span>)</span><br><span class="line">                <span class="comment">// 不再使用 logoutSuccessUrl() 方法，使用自定义的成功注销登录处理器</span></span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">                <span class="comment">// 指定用户注销登录时删除的 Cookie</span></span><br><span class="line">                .deleteCookies(<span class="string">"JSESSIONID"</span>)</span><br><span class="line">                <span class="comment">// 用户注销登录时是否立即清除用户的 Session，默认为 true</span></span><br><span class="line">                .invalidateHttpSession(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 用户注销登录时是否立即清除用户认证信息 Authentication，默认为 true</span></span><br><span class="line">                .clearAuthentication(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启 Session 会话管理配置</span></span><br><span class="line">        http.sessionManagement()</span><br><span class="line">                <span class="comment">// 设置 Session 会话失效时重定向路径，默认为 loginPage()</span></span><br><span class="line">                 .invalidSessionUrl(<span class="string">"/login/page"</span>)</span><br><span class="line">                <span class="comment">// 配置使用自定义的 Session 会话失效处理策略</span></span><br><span class="line">                .invalidSessionStrategy(invalidSessionStrategy)</span><br><span class="line">                <span class="comment">// 设置单用户的 Session 最大并发会话数量，-1 表示不受限制</span></span><br><span class="line">                .maximumSessions(<span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 设置为 true，表示某用户达到最大会话并发数后，新会话请求会被拒绝登录；</span></span><br><span class="line">                <span class="comment">// 设置为 false，表示某用户达到最大会话并发数后，新会话请求访问时，其最老会话会在下一次请求时失效</span></span><br><span class="line">                .maxSessionsPreventsLogin(<span class="keyword">false</span>)</span><br><span class="line">                <span class="comment">// 设置所要使用的 sessionRegistry，默认为 SessionRegistryImpl 实现类</span></span><br><span class="line">                .sessionRegistry(sessionRegistry())</span><br><span class="line">                <span class="comment">// 最老会话在下一次请求时失效，并重定向到 /login/page</span></span><br><span class="line">                .expiredUrl(<span class="string">"/login/page"</span>)</span><br><span class="line">                <span class="comment">// 最老会话在下一次请求时失效，并按照自定义策略处理</span></span><br><span class="line">                .expiredSessionStrategy(sessionInformationExpiredStrategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义认证授权失败处理</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                <span class="comment">// js请求会覆盖默认</span></span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">                <span class="comment">// 默认授权失败会重定向到登录页</span></span><br><span class="line"><span class="comment">//                .accessDeniedPage("/login/page")</span></span><br><span class="line">                <span class="comment">// 默认未登录返回的json类</span></span><br><span class="line">                .authenticationEntryPoint(authenticationEntryPoint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 SessionRegistry，该 Bean 用于管理 Session 会话并发控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionRegistry <span class="title">sessionRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SessionRegistryImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 Session 的监听器（注意：如果使用并发 Sessoion 控制，一般都需要配置该监听器）</span></span><br><span class="line"><span class="comment">     * 解决 Session 失效后, SessionRegistry 中 SessionInformation 没有同步失效的问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpSessionEventPublisher <span class="title">httpSessionEventPublisher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpSessionEventPublisher();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制一些全局性的安全配置，例如：不拦截静态资源的访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 静态资源的访问不需要拦截，直接放行</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/**/*.css"</span>, <span class="string">"/**/*.js"</span>, <span class="string">"/**/*.png"</span>, <span class="string">"/**/*.jpg"</span>, <span class="string">"/**/*.jpeg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外Security5.7以后该方法就不推荐了，可以用新版的配置文件方式，更加简洁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销成功返回的 JSON 格式数据给前端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AjaxLogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无权访问 JSON 格式的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AjaxAccessDeniedHandler ajaxAccessDeniedHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AjaxAuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomizeSessionInformationExpiredStrategy sessionInformationExpiredStrategy;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter tokenAuthenticationFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PowerManagerMapper powerManagerMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PowerManagerService powerManagerService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入AuthenticationConfiguration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationConfiguration auth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编写AuthenticationManager的bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> auth.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换旧版本中的configure(HttpSecurity http)方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityFilterChain <span class="title">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.cors().and().csrf().disable();</span><br><span class="line">        http.httpBasic()</span><br><span class="line">                .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">//自定义放行接口</span></span><br><span class="line">                .antMatchers(</span><br><span class="line">                        <span class="string">"/swagger**/**"</span>,</span><br><span class="line">                        <span class="string">"/swagger-ui.html"</span>,</span><br><span class="line">                        <span class="string">"/swagger-resources/**"</span>,</span><br><span class="line">                        <span class="string">"/webjars/**"</span>,</span><br><span class="line">                        <span class="string">"/v3/**"</span></span><br><span class="line">                ).permitAll()</span><br><span class="line"></span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and().logout().logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                <span class="comment">//登出处理</span></span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">                <span class="comment">//添加关于自定义的认证过滤器和自定义的授权过滤器</span></span><br><span class="line">                .and()</span><br><span class="line">                .logout().permitAll()<span class="comment">//注销行为任意访问</span></span><br><span class="line">                <span class="comment">//会话管理</span></span><br><span class="line">                .and().sessionManagement()</span><br><span class="line">                <span class="comment">//同一账号同时登录最大用户数</span></span><br><span class="line">                .maximumSessions(<span class="number">1</span>)</span><br><span class="line">                <span class="comment">//会话信息过期策略会话信息过期策略(账号被挤下线)</span></span><br><span class="line">                .expiredSessionStrategy(sessionInformationExpiredStrategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义权限拒绝处理类</span></span><br><span class="line">        <span class="comment">// 无权访问 JSON 格式的数据</span></span><br><span class="line">        http.exceptionHandling().accessDeniedHandler(ajaxAccessDeniedHandler);</span><br><span class="line">        <span class="comment">// 登录验证</span></span><br><span class="line">        http.addFilter(<span class="keyword">new</span> TokenLoginFilter(authenticationManager(),redisUtils,logService,powerManagerMapper,powerManagerService)).httpBasic();</span><br><span class="line">        <span class="comment">// JWT Filter</span></span><br><span class="line">        http.addFilterBefore(tokenAuthenticationFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想加token验证的话可以参考：<a href="https://blog.csdn.net/rq12345688/article/details/125479657" target="_blank" rel="noopener" title="Spring Security配置">Spring Security配置</a>和<a href="https://blog.csdn.net/lemon_TT/article/details/124675493" target="_blank" rel="noopener" title="Spring Security学习笔记">Spring Security学习笔记</a></p><p>本次Spring Security的Demo代码地址：Security Demo项目</p><hr><p><a href="https://blog.csdn.net/2201_75856701/article/details/128676769" target="_blank" rel="noopener" title="https://blog.csdn.net/2201_75856701/article/details/128676769">https://blog.csdn.net/2201_75856701/article/details/128676769</a></p><p><a href="https://www.cnblogs.com/zongmin/tag/Spring%20Security/" target="_blank" rel="noopener" title="https://www.cnblogs.com/zongmin/tag/Spring Security/">https://www.cnblogs.com/zongmin/tag/Spring Security/</a></p><p><a href="https://blog.csdn.net/rq12345688/article/details/125479657" target="_blank" rel="noopener" title="https://blog.csdn.net/rq12345688/article/details/125479657">https://blog.csdn.net/rq12345688/article/details/125479657</a></p><p><a href="https://blog.csdn.net/lemon_TT/article/details/124675493" target="_blank" rel="noopener" title="https://blog.csdn.net/lemon_TT/article/details/124675493">https://blog.csdn.net/lemon_TT/article/details/124675493</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Security入门笔记：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/124675493&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Spring Security学习笔记&quot;&gt;Spring Security学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;一、Security认证和原理&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Spring Security&lt;/code&gt;是一种基于&lt;code&gt;Spring AOP&lt;/code&gt;和&lt;code&gt;Servlet Filter&lt;/code&gt;的安全框架，其核心是一组过滤器链，实现 Web 请求和方法调用级别的用户鉴权和权限控制&lt;/p&gt;
&lt;h2 id=&quot;1、认证基本流程&quot;&gt;1、认证基本流程&lt;/h2&gt;
&lt;h3 id=&quot;1-1-表单认证概述&quot;&gt;1.1 表单认证概述&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Spring Security&lt;/code&gt;提供了两种认证方式：HttpBasic 认证和 HttpForm 表单认证。HttpBasic 认证不需要我们编写登录页面，当浏览器请求 URL 需要认证才能访问时，页面会自动弹出一个登录窗口，要求用户输入用户名和密码进行认证。大多数情况下，我们还是通过编写登录页面进行 HttpForm 表单认证(现在默认是这个模式)&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://blog.shawncoding.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Rsync与Inotify监控与同步</title>
    <link href="https://blog.shawncoding.top/posts/db2e6bf7.html"/>
    <id>https://blog.shawncoding.top/posts/db2e6bf7.html</id>
    <published>2023-04-07T13:43:11.000Z</published>
    <updated>2023-04-07T13:49:08.173Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Rsync远程同步</h1><h2 id="1、概述">1、概述</h2><h3 id="1-1-介绍">1.1 介绍</h3><blockquote><p>rsync官方文档：<a href="https://www.samba.org/ftp/rsync/rsync.html" target="_blank" rel="noopener" title="https://www.samba.org/ftp/rsync/rsync.html">https://www.samba.org/ftp/rsync/rsync.html</a></p></blockquote><p>Rsync（remote synchronize）是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。Rsync使用所谓的“Rsync算法”来使本地和远 程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快；Rsync支持大多数的类Unix系统，无论是Linux、Solaris还是BSD上都经过了良好的测试；此外，它在windows平台下也有相应的版本，如cwRsync和Sync2NAS等工具</p><a id="more"></a><h3 id="1-2-原理">1.2 原理</h3><p>rsync 是一个常用的 Linux 应用程序，用于文件同步，是用于替代rcp的一个工具，目前由<code>rsync.samba.org</code>维护，所以<code>rsync.conf</code>文件的格式类似于samba的主配 置文件；它可以在本地计算机与远程计算机之间，或者两个本地目录之间同步文件（但不支持两台远程计算机之间的同步）。它也可以当作文件复制工具，替代<code>cp</code>和<code>mv</code>命令。它名称里面的<code>r</code>指的是 remote，rsync 其实就是&quot;远程同步&quot;（remote sync）的意思。与其他文件传输工具（如 FTP 或 scp）不同，<strong>rsync 的最大特点是会检查发送方和接收方已有的文件，仅传输有变动的部分（默认规则是文件大小或修改时间有变动）</strong>。</p><p>Rsync可以通过rsh或ssh使用，也能以daemon模式去运行 ，<strong>在以daemon方式运行时Rsync server会打开一个873 端口</strong>，等待客户端去连接。连接时，Rsync server会检查口令是否相符，若通过口令查核，则可以开始进行文件传输。第一次连通完成时，会把整份文件传输一次，以后则就只需进行增量备份。</p><h3 id="1-3-特点">1.3 特点</h3><ul><li>可以镜像保存整个目录树和文件系统；</li><li>可以很容易做到保持原来文件的权限、时间、软硬链接等；</li><li>无须特殊权限即可安装；</li><li>优化的流程，文件传输效率高；</li><li>可以使用rsh、ssh等方式来传输文件，当然也可以通过直接的socket连接；</li><li>支持匿名传输</li></ul><h3 id="1-4-安装">1.4 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意该软件传输的两台机器都需要安装</span></span><br><span class="line"><span class="comment"># ubuntu的安装，但是一般都自带了</span></span><br><span class="line">sudo apt-get install rsync</span><br><span class="line"><span class="comment"># Centos安装</span></span><br><span class="line">yum install -y rsync</span><br></pre></td></tr></table></figure><p>Rsync有两种模式：</p><ul><li>SSH模式：包括本地模式（类似于cp命令）远程模式（类似于scp命令）</li><li>daemon模式：守护进程（socket进程：是rsync的重要功能）</li></ul><h2 id="2、Rsync基本用法">2、Rsync基本用法</h2><h3 id="2-1-基本参数">2.1 基本参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -r 参数</span></span><br><span class="line"><span class="comment"># 本机使用 rsync 命令时，可以作为cp和mv命令的替代方法，将源目录同步到目标目录</span></span><br><span class="line">rsync -r <span class="built_in">source</span> destination</span><br><span class="line"><span class="comment"># -r表示递归，即包含子目录。注意，-r是必须的，否则 rsync 运行不会成功。source目录表示源目录，destination表示目标目录。</span></span><br><span class="line"><span class="comment"># 如果有多个文件或目录需要同步，可以写成下面这样;source1、source2都会被同步到destination目录</span></span><br><span class="line">rsync -r source1 source2 destination</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 参数,equals -rlptgoD</span></span><br><span class="line"><span class="comment"># -a参数可以替代-r，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以-a比-r更有用</span></span><br><span class="line">rsync -a <span class="built_in">source</span> destination</span><br><span class="line"><span class="comment"># 目标目录destination如果不存在，rsync 会自动创建。执行上面的命令后，源目录source被完整地复制到了目标目录destination下面，即形成了destination/source的目录结构。</span></span><br><span class="line"><span class="comment"># 如果只想同步源目录source里面的内容到目标目录destination，则需要在源目录后面加上斜杠。</span></span><br><span class="line"><span class="comment"># source目录里面的内容，就都被复制到了destination目录里面，并不会在destination下面创建一个source子目</span></span><br><span class="line">rsync -a <span class="built_in">source</span>/ destination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 参数</span></span><br><span class="line"><span class="comment"># 如果不确定 rsync 执行后会产生什么结果，可以先用-n或--dry-run参数模拟执行的结果</span></span><br><span class="line"><span class="comment"># -n参数模拟命令执行的结果，并不真的执行命令。-v参数则是将结果输出到终端，这样就可以看到哪些内容会被同步</span></span><br><span class="line">rsync -anv <span class="built_in">source</span>/ destination</span><br><span class="line"></span><br><span class="line"><span class="comment"># --delete 参数</span></span><br><span class="line"><span class="comment"># 默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用--delete参数，这将删除只存在于目标目录、不存在于源目录的文件</span></span><br><span class="line"><span class="comment"># --delete参数会使得destination成为source的一个镜像</span></span><br><span class="line">rsync -av --delete <span class="built_in">source</span>/ destination</span><br><span class="line"></span><br><span class="line"><span class="comment"># --exclude 参数</span></span><br><span class="line"><span class="comment"># 有时，我们希望同步时排除某些文件或目录，这时可以用--exclude参数指定排除模式</span></span><br><span class="line"><span class="comment"># 命令排除了所有 TXT 文件</span></span><br><span class="line">rsync -av --exclude=<span class="string">'*.txt'</span> <span class="built_in">source</span>/ destination</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">rsync -av --exclude <span class="string">'*.txt'</span> <span class="built_in">source</span>/ destination</span><br><span class="line"><span class="comment"># 注意，rsync 会同步以"点"开头的隐藏文件，如果要排除隐藏文件，可以这样写--exclude=".*"</span></span><br><span class="line"><span class="comment"># 如果要排除某个目录里面的所有文件，但不希望排除目录本身，可以写成下面这样</span></span><br><span class="line">rsync -av --exclude <span class="string">'dir1/*'</span> <span class="built_in">source</span>/ destination</span><br><span class="line"><span class="comment"># 多个排除模式，可以用多个--exclude参数</span></span><br><span class="line">rsync -av --exclude <span class="string">'file1.txt'</span> --exclude <span class="string">'dir1/*'</span> <span class="built_in">source</span>/ destination</span><br><span class="line"><span class="comment"># 多个排除模式也可以利用 Bash 的大扩号的扩展功能，只用一个--exclude参数。</span></span><br><span class="line">rsync -av --exclude=&#123;<span class="string">'file1.txt'</span>,<span class="string">'dir1/*'</span>&#125; <span class="built_in">source</span>/ destination</span><br><span class="line"><span class="comment"># 如果排除模式很多，可以将它们写入一个文件，每个模式一行，然后用--exclude-from参数指定这个文件</span></span><br><span class="line">rsync -av --exclude-from=<span class="string">'exclude-file.txt'</span> <span class="built_in">source</span>/ destination</span><br><span class="line"></span><br><span class="line"><span class="comment"># --include 参数</span></span><br><span class="line"><span class="comment"># --include参数用来指定必须同步的文件模式，往往与--exclude结合使用</span></span><br><span class="line"><span class="comment"># 排除所有文件，但是会包括 TXT 文件</span></span><br><span class="line">rsync -av --include=<span class="string">"*.txt"</span> --exclude=<span class="string">'*'</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><h3 id="2-2-远程同步">2.2 远程同步</h3><p>首先介绍SSH协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rsync 除了支持本地两个目录之间的同步，也支持远程同步。它可以将本地内容，同步到远程服务器</span></span><br><span class="line">rsync -av <span class="built_in">source</span>/ username@remote_host:destination</span><br><span class="line"><span class="comment"># 也可以将远程内容同步到本地</span></span><br><span class="line">rsync -av username@remote_host:<span class="built_in">source</span>/ destination</span><br><span class="line"><span class="comment"># rsync 默认使用 SSH 进行远程登录和数据传输，由于早期 rsync 不使用 SSH 协议，需要用-e参数指定协议，后来才改的。所以，下面-e ssh可以省略</span></span><br><span class="line">rsync -av -e ssh <span class="built_in">source</span>/ user@remote_host:/destination</span><br><span class="line"><span class="comment"># 如果 ssh 命令有附加的参数，则必须使用-e参数指定所要执行的 SSH 命令</span></span><br><span class="line"><span class="comment"># -e参数指定 SSH 使用2234端口</span></span><br><span class="line">rsync -av -e <span class="string">'ssh -p 2234'</span> <span class="built_in">source</span>/ user@remote_host:/destination</span><br></pre></td></tr></table></figure><p>rsync 协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 除了使用 SSH，如果另一台服务器安装并运行了 rsync 守护程序，则也可以用rsync://协议（默认端口873）进行传输。具体写法是服务器与目标目录之间使用双冒号分隔::</span></span><br><span class="line">rsync -av <span class="built_in">source</span>/ 192.168.122.32::module/destination</span><br><span class="line"><span class="comment"># 上面地址中的module并不是实际路径名，而是 rsync 守护程序指定的一个资源名，由管理员分配</span></span><br><span class="line"><span class="comment"># 如果想知道 rsync 守护程序分配的所有 module 列表，可以执行下面命令</span></span><br><span class="line"><span class="comment"># rsync rsync://192.168.122.32</span></span><br><span class="line"><span class="comment"># rsync 协议除了使用双冒号，也可以直接用rsync://协议指定地址</span></span><br><span class="line">rsync -av <span class="built_in">source</span>/ rsync://192.168.122.32/module/destination</span><br></pre></td></tr></table></figure><h3 id="2-3-增量备份">2.3 增量备份</h3><p>rsync 的最大特点就是它可以完成增量备份，也就是默认只复制有变动的文件。除了源目录与目标目录直接比较，rsync 还支持使用基准目录，即将源目录与基准目录之间变动的部分，同步到目标目录。</p><p>具体做法是，第一次同步是全量备份，所有文件在基准目录里面同步一份。以后每一次同步都是增量备份，只同步源目录与基准目录之间有变动的部分，将这部分保存在一个新的目标目录。这个新的目标目录之中，也是包含所有文件，但实际上，只有那些变动过的文件是存在于该目录，其他没有变动的文件都是指向基准目录文件的硬链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --link-dest参数用来指定同步时的基准目录</span></span><br><span class="line">rsync -a --delete --link-dest /compare/path /<span class="built_in">source</span>/path /target/path</span><br><span class="line"><span class="comment"># 上面命令中，--link-dest参数指定基准目录/compare/path，然后源目录/source/path跟基准目录进行比较，找出变动的文件，将它们拷贝到目标目录/target/path。那些没变动的文件则会生成硬链接。这个命令的第一次备份时是全量备份，后面就都是增量备份了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一次同步都会生成一个新目录$&#123;BACKUP_DIR&#125;/$&#123;DATETIME&#125;，并将软链接$&#123;BACKUP_DIR&#125;/latest指向这个目录。</span></span><br><span class="line"><span class="comment"># 下一次备份时，就将$&#123;BACKUP_DIR&#125;/latest作为基准目录，生成新的备份目录。最后，再将软链接$&#123;BACKUP_DIR&#125;/latest指向新的备份目录</span></span><br><span class="line"><span class="comment"># 下面是一个脚本示例，备份用户的主目录</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># A script to perform incremental backups using rsync</span></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"></span><br><span class="line"><span class="built_in">readonly</span> SOURCE_DIR=<span class="string">"<span class="variable">$&#123;HOME&#125;</span>"</span></span><br><span class="line"><span class="built_in">readonly</span> BACKUP_DIR=<span class="string">"/mnt/data/backups"</span></span><br><span class="line"><span class="built_in">readonly</span> DATETIME=<span class="string">"<span class="variable">$(date '+%Y-%m-%d_%H:%M:%S')</span>"</span></span><br><span class="line"><span class="built_in">readonly</span> BACKUP_PATH=<span class="string">"<span class="variable">$&#123;BACKUP_DIR&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>"</span></span><br><span class="line"><span class="built_in">readonly</span> LATEST_LINK=<span class="string">"<span class="variable">$&#123;BACKUP_DIR&#125;</span>/latest"</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$&#123;BACKUP_DIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">rsync -av --delete \</span><br><span class="line">  <span class="string">"<span class="variable">$&#123;SOURCE_DIR&#125;</span>/"</span> \</span><br><span class="line">  --link-dest <span class="string">"<span class="variable">$&#123;LATEST_LINK&#125;</span>"</span> \</span><br><span class="line">  --exclude=<span class="string">".cache"</span> \</span><br><span class="line">  <span class="string">"<span class="variable">$&#123;BACKUP_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">rm -rf <span class="string">"<span class="variable">$&#123;LATEST_LINK&#125;</span>"</span></span><br><span class="line">ln -s <span class="string">"<span class="variable">$&#123;BACKUP_PATH&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;LATEST_LINK&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="2-4-其他配置项">2.4 其他配置项</h3><ul><li><code>-a</code>、<code>--archive</code>参数表示存档模式，保存所有的元数据，比如修改时间（modification time）、权限、所有者等，并且软链接也会同步过去</li><li><code>--append</code>参数指定文件接着上次中断的地方，继续传输</li><li><code>--append-verify</code>参数跟<code>--append</code>参数类似，但会对传输完成后的文件进行一次校验。如果校验失败，将重新发送整个文件</li><li><code>-b</code>、<code>--backup</code>参数指定在删除或更新目标目录已经存在的文件时，将该文件更名后进行备份，默认行为是删除。更名规则是添加由<code>--suffix</code>参数指定的文件后缀名，默认是<code>~</code></li><li><code>--backup-dir</code>参数指定文件备份时存放的目录，比如<code>--backup-dir=/path/to/backups</code></li><li><code>--bwlimit</code>参数指定带宽限制，默认单位是 KB/s，比如<code>--bwlimit=100</code></li><li><code>-c</code>、<code>--checksum</code>参数改变<code>rsync</code>的校验方式。默认情况下，rsync 只检查文件的大小和最后修改日期是否发生变化，如果发生变化，就重新传输；使用这个参数以后，则通过判断文件内容的校验和，决定是否重新传输</li><li><code>--delete</code>参数删除只存在于目标目录、不存在于源目标的文件，即保证目标目录是源目标的镜像</li><li><code>-e</code>参数指定使用 SSH 协议传输数据<code>--exclude</code>参数指定排除不进行同步的文件，比如<code>--exclude=&quot;*.iso&quot;</code></li><li><code>--exclude-from</code>参数指定一个本地文件，里面是需要排除的文件模式，每个模式一行</li><li><code>--existing</code>、<code>--ignore-non-existing</code>参数表示不同步目标目录中不存在的文件和目录</li><li><code>-h</code>参数表示以人类可读的格式输出</li><li><code>-h</code>、<code>--help</code>参数返回帮助信息</li><li><code>-i</code>参数表示输出源目录与目标目录之间文件差异的详细情况</li><li><code>--ignore-existing</code>参数表示只要该文件在目标目录中已经存在，就跳过去，不再同步这些文件</li><li><code>--include</code>参数指定同步时要包括的文件，一般与<code>--exclude</code>结合使用</li><li><code>--link-dest</code>参数指定增量备份的基准目录</li><li><code>-m</code>参数指定不同步空目录</li><li><code>--max-size</code>参数设置传输的最大文件的大小限制，比如不超过200KB（<code>--max-size='200k'</code>）</li><li><code>--min-size</code>参数设置传输的最小文件的大小限制，比如不小于10KB（<code>--min-size=10k</code>）</li><li><code>-n</code>参数或<code>--dry-run</code>参数模拟将要执行的操作，而并不真的执行。配合<code>-v</code>参数使用，可以看到哪些内容会被同步过去</li><li><code>-P</code>参数是<code>--progress</code>和<code>--partial</code>这两个参数的结合</li><li><code>--partial</code>参数允许恢复中断的传输。不使用该参数时，<code>rsync</code>会删除传输到一半被打断的文件；使用该参数后，传输到一半的文件也会同步到目标目录，下次同步时再恢复中断的传输。一般需要与<code>--append</code>或<code>--append-verify</code>配合使用</li><li><code>--partial-dir</code>参数指定将传输到一半的文件保存到一个临时目录，比如<code>--partial-dir=.rsync-partial</code>。一般需要与<code>--append</code>或<code>--append-verify</code>配合使用</li><li><code>--progress</code>参数表示显示进展</li><li><code>-r</code>参数表示递归，即包含子目录</li><li><code>--remove-source-files</code>参数表示传输成功后，删除发送方的文件</li><li><code>--size-only</code>参数表示只同步大小有变化的文件，不考虑文件修改时间的差异</li><li><code>--suffix</code>参数指定文件名备份时，对文件名添加的后缀，默认是<code>~</code></li><li><code>-u</code>、<code>--update</code>参数表示同步时跳过目标目录中修改时间更新的文件，即不同步这些有更新的时间戳的文件</li><li><code>-v</code>参数表示输出细节。<code>-vv</code>表示输出更详细的信息，<code>-vvv</code>表示输出最详细的信息</li><li><code>--version</code>参数返回 rsync 的版本</li><li><code>-z</code>参数指定同步时压缩数据</li></ul><h2 id="3、rsync服务器搭建">3、rsync服务器搭建</h2><h3 id="3-1-daemon模式启动">3.1 daemon模式启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu已经默认安装rsync的，只是不是默认启动而已，需要修改/etc/default/rsync</span></span><br><span class="line">RSYNC_ENABLE=<span class="literal">true</span>   <span class="comment">#false改true</span></span><br><span class="line"><span class="comment"># 然后将配置文件拷贝到rsync的配置目录下</span></span><br><span class="line">sudo cp /usr/share/doc/rsync/examples/rsyncd.conf /etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据自己的需求修改配置后，启动服务</span></span><br><span class="line">sudo systemctl start rsync</span><br><span class="line"><span class="comment"># 开放防火墙,rsync服务使用的端口是873，如果开了防火墙需要开放</span></span><br><span class="line">sudo ufw allow 873</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于Centos来说，可以采取以下措施(未验证，只能进行参考)</span></span><br><span class="line"><span class="comment"># 对于负荷较重的 rsync 服务器应该使用独立运行方式</span></span><br><span class="line">yum install rsync xinetd <span class="comment">#服务安装</span></span><br><span class="line">/usr/bin/rsync --daemon</span><br><span class="line"><span class="comment"># 对于负荷较轻的 rsync 服务器可以使用 xinetd 运行方式</span></span><br><span class="line">yum install rsync xinetd <span class="comment">#服务安装</span></span><br><span class="line"><span class="comment"># vim /etc/xinetd.d/rsync --配置托管服务，将下项改为 no</span></span><br><span class="line"><span class="built_in">disable</span> = no</span><br><span class="line">/etc/init.d/xinetd start <span class="comment">#启动托管服务 xinetd</span></span><br><span class="line"><span class="comment"># chkconfig rsync on</span></span><br><span class="line">netstat -ntpl | grep 873 <span class="comment">#查看服务是否启动</span></span><br></pre></td></tr></table></figure><h3 id="3-2-配置文件详解">3.2 配置文件详解</h3><p>全局参数</p><ul><li>在全局参数部分也可以定义模块参数，这时该参数的值就是所有模块的默认值</li><li><code>address</code> —在独立运行时，用于指定的服务器运行的 IP 地址；由 xinetd 运行时将忽略此参数，使用命令行上的 –address 选项替代。默认本地所有IP</li><li><code>port</code> —指定 rsync 守护进程监听的端口号。由 xinetd 运行时将忽略此参数，使用命令行上的 –port 选项替代。默认 873</li><li><code>motd file</code> —指定一个消息文件，当客户连接服务器时该文件的内容显示给客户</li><li><code>pid file</code> —rsync 的守护进程将其 PID 写入指定的文件</li><li><code>log file</code> —指定 rsync 守护进程的日志文件，而不将日志发送给 syslog</li><li><code>syslog facility</code> —指定 rsync 发送日志消息给 syslog 时的消息级别</li><li><code>socket options</code> —指定自定义 TCP 选项</li><li><code>lockfile</code> —指定rsync的锁文件存放路径</li><li><code>timeout = 600</code> —超时时间</li></ul><p><strong>模块参数</strong></p><p>模块参数主要用于定义 rsync 服务器哪个目录要被同步。模块声明的格式必须为 [module] 形式，这个名字就是在 rsync 客户端看到的名字，类似于 Samba 服务器提供的共享名。而服务器真正同步的数据是通过 path 来指定的</p><p><strong>基本模块参数</strong></p><ul><li><code>path</code> —指定当前模块在 rsync 服务器上的同步路径，该参数是必须指定的</li><li><code>comment</code> —给模块指定一个描述，该描述连同模块名在客户连接得到模块列表时显示给客户</li></ul><p><strong>模块控制参数</strong></p><ul><li><code>use chroot =</code> —默认为 true，在传输文件之前首先 chroot 到 path 参数所指定的目录下；优点，安全；缺点，需要 root 权限，不能备份指向 path 外部的符号连接所指向的目录文件</li><li><code>uid =</code> —指定该模块以指定的 UID 传输文件；默认nobody</li><li><code>gid =</code> —指定该模块以指定的 GID 传输文件；默认nobody</li><li><code>max connections</code> —最大并发连接数，0为不限制</li><li><code>lock file</code> —指定支持 max connections 参数的锁文件。默认 /var/run/rsyncd.lock</li><li><code>list</code> —指定当客户请求列出可以使用的模块列表时，该模块是否应该被列出。默认为 true，显示</li><li><code>read only =</code> —只读选择，也就是说，不让客户端上传文件到服务器上。默认true</li><li><code>write only =</code> —只写选择，也就是说，不让客户端从服务器上下载文件。默认false</li><li><code>ignore errors</code> —忽略IO错误。默认true</li><li><code>ignore nonreadable</code> —指定 rysnc服务器完全忽略那些用户没有访问权限的文件。这对于在需要备份的目录中有些不应该被备份者获得的文件时是有意义的。false</li><li><code>timeout =</code> —该选项可以覆盖客户指定的 IP 超时时间。从而确保 rsync 服务器不会永远等待一个崩溃的客户端。对于匿名 rsync 服务器来说，理想的数字是 600（单位为秒）。0 (未限制)</li><li><code>dont compress</code> —用来指定那些在传输之前不进行压缩处理的文件。该选项可以定义一些不允许客户对该模块使用的命令选项列表。必须使用选项全名，而不能是简称。当发生拒绝某个选项的情况时，服务器将报告错误信息然后退出。例如，要防止使用压缩，应该是：&quot;dont compress = &quot;<em>。</em> .gz <em>.tgz</em> .zip <em>.z</em> .rpm <em>.deb</em> .iso <em>.bz2</em> .tbz</li></ul><p><strong>模块文件筛选参数</strong></p><ul><li><code>exclude</code> —指定多个由空格隔开的多个文件或目录(相对路径)，并将其添加到 exclude 列表中。这等同于在客户端命令中使用 –exclude 来指定模式</li><li><code>exclude from</code> —指定一个包含 exclude 规则定义的文件名，服务器从该文件中读取 exclude 列表定义</li><li><code>include</code> —指定多个由空格隔开的多个文件或目录(相对路径)，并将其添加到 include 列表中。这等同于在客户端命令中使用 –include 来指定模式</li><li><code>include from</code> —指定一个包含 include 规则定义的文件名，服务器从该文件中读取 include 列表定义</li></ul><p><strong>模块用户认证参数</strong></p><ul><li><code>auth users</code> —指定由空格或逗号分隔的用户名列表，只有这些用户才允许连接该模块（和系统用户没有任何关系）。用户名和口令以明文方式存放在 secrets file 参数指定的文件中。默认为匿名方式</li><li><code>secrets file</code> —指定一个 rsync 认证口令文件。只有在 auth users 被定义时，该文件才起作用。文件权限必须是 600</li><li><code>strict modes</code> —指定是否监测口令文件的权限。为 true 则口令文件只能被 rsync 服务器运行身份的用户访问，其他任何用户不可以访问该文件。默认为true</li></ul><p><strong>模块访问控制参数</strong></p><ul><li><code>hosts allow</code> —用一个主机列表指定哪些主机客户允许连接该模块。不匹配主机列表的主机将被拒绝。默认值为 </li><li><code>hosts deny</code> —用一个主机列表指定哪些主机客户不允许连接该模块</li></ul><p><strong>模块日志参数</strong></p><ul><li><p><code>transfer logging</code> —使 rsync 服务器将传输操作记录到传输日志文件。默认值为false</p></li><li><p><code>log format</code> —指定传输日志文件的字段。默认为：&quot;%o %h [%a] %m (%u) %f %l&quot;</p><p>设置了&quot;log file&quot;参数时，在日志每行的开始会添加&quot;%t [%p]&quot;;可以使用的日志格式定义符如下所示：  </p><p>%o —操作类型：&quot;send&quot;或 “recv”</p><p>%h —远程主机名  </p><p>%a —远程IP地址  </p><p>%m —模块名  </p><p>%u —证的用户名（匿名时是 null）  </p><p>%f —文件名  </p><p>%l —文件长度字符数  </p><p>%p —该次 rsync 会话的 PID  </p><p>%P —模块路径  </p><p>%t —当前时间  </p><p>%b —实际传输的字节数  </p><p>%c —当发送文件时，记录该文件的校验码</p></li></ul><h3 id="3-3-配置文件举例">3.3 配置文件举例</h3><p>例子一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sample rsyncd.conf configuration file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GLOBAL OPTIONS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#motd file=/etc/motd #登录欢迎信息</span></span><br><span class="line"><span class="comment">#log file=/var/log/rsyncd #日志文件</span></span><br><span class="line"><span class="comment"># for pid file, do not use /var/run/rsync.pid if</span></span><br><span class="line"><span class="comment"># you are going to run rsync out of the init.d script.</span></span><br><span class="line">pid file=/var/run/rsyncd.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定rsync发送日志消息给syslog时的消息级别，常见的消息级别是：uth, authpriv, cron, daemon, ftp, kern, lpr, mail, news, security, sys-log, user, uucp, local0, local1, local2, local3,local4, local5, local6和local7。默认值是daemon。</span></span><br><span class="line"><span class="comment">#syslog facility=daemon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义tcp选项，默认是关闭的</span></span><br><span class="line"><span class="comment">#socket options=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是模块信息，我们可以创建多个模块</span></span><br><span class="line"><span class="comment"># MODULE OPTIONS</span></span><br><span class="line"></span><br><span class="line">[ftp]</span><br><span class="line">        comment = public archive <span class="comment">#模块描述</span></span><br><span class="line">        path = /var/www/pub <span class="comment">#需要同步的路径</span></span><br><span class="line">        use chroot = yes <span class="comment">#默认是yes|true，如果为true，那么在rsync在传输文件以前首先chroot到path参数指定的目录下。这样做的原因是实现额外的安全防护，但是缺点是需要root权限，并且不能备份指向外部的符号连接指向的目录文件。</span></span><br><span class="line"><span class="comment">#       max connections=10 #最大连接数</span></span><br><span class="line">        lock file = /var/lock/rsyncd <span class="comment">#指定支持max connections参数的锁文件。</span></span><br><span class="line"><span class="comment"># the default for read only is yes...</span></span><br><span class="line">        <span class="built_in">read</span> only = yes <span class="comment">#只读选项</span></span><br><span class="line">        list = yes <span class="comment">#客户请求时可用模块时是否列出该模块</span></span><br><span class="line">        uid = nobody <span class="comment">#设定该模块传输文件时守护进程应该具有的uid</span></span><br><span class="line">        gid = nogroup <span class="comment">#设定该模块传输文件时守护进程应具有的gid，此项与uid配合可以确定文件的访问权限</span></span><br><span class="line"><span class="comment">#       exclude = #用来指定多个由空格隔开的多个模式列表，并将其添加到exclude列表中。这等同于在客户端命令中使用--exclude来指定模式，不过配置文件中指定的exlude模式不会传递给客户端，而仅仅应用于服务器。一个模块只能指定一个exlude选项，但是可以在模式前面使用"-"和"+"来指定是exclude还是include    #这个我的理解是排除目录中不需同步的文件</span></span><br><span class="line"><span class="comment">#       exclude from = #可以指定一个包含exclude模式定义的文件名</span></span><br><span class="line"><span class="comment">#       include = #与exclude相似</span></span><br><span class="line"><span class="comment">#       include from = #可以指定一个包含include模式定义的文件名</span></span><br><span class="line"><span class="comment">#       auth users = #该选项指定由空格或逗号分隔的用户名列表，只有这些用户才允许连接该模块。这里的用户和系统用户没有任何关系。如果"auth users"被设置，那么客户端发出对该模块的连接请求以后会被rsync请求challenged进行验证身份这里使用的 challenge/response认证协议。用户的名和密码以明文方式存放在"secrets file"选项指定的文件中。默认情况下无需密码就可以连接模块(也就是匿名方式)</span></span><br><span class="line"><span class="comment">#       secrets file = /etc/rsyncd.secrets #该文件每行包含一个username:password对，以明文方式存储，只有在auth users被定义时，此选项才生效。同时我们需要将此文件权限设置为0600</span></span><br><span class="line">        strict modes = yes <span class="comment">#该选项指定是否监测密码文件的权限，如果该选项值为true那么密码文件只能被rsync服务器运行身份的用户访问，其他任何用户不可以访问该文件。默认值为true</span></span><br><span class="line"><span class="comment">#       hosts allow = #允许的主机</span></span><br><span class="line"><span class="comment">#       hosts deny = #拒绝访问的主机</span></span><br><span class="line">        ignore errors = no <span class="comment">#设定rsync服务器在运行delete操作时是否忽略I/O错误</span></span><br><span class="line">        ignore nonreadable = yes <span class="comment">#设定rysnc服务器忽略那些没有访问文件权限的用户</span></span><br><span class="line">        transfer logging = no <span class="comment">#使rsync服务器使用ftp格式的文件来记录下载和上载操作在自己单独的日志中</span></span><br><span class="line"><span class="comment">#       log format = %t: host %h (%a) %o %f (%l bytes). Total %b bytes. #设定日志格式</span></span><br><span class="line">        timeout = 600 <span class="comment">#超时设置(秒)</span></span><br><span class="line">        refuse options = checksum dry-run <span class="comment">#定义一些不允许客户对该模块使用的命令选项列表</span></span><br><span class="line">        dont compress = *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz <span class="comment">#告诉rysnc那些文件在传输前不用压缩，默认已设定压缩包不再进行压缩</span></span><br></pre></td></tr></table></figure><p>例子二</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rsync_config</span></span><br><span class="line"><span class="comment">#created by HQ at 2017</span></span><br><span class="line"><span class="comment">##rsyncd.conf start##</span></span><br><span class="line"></span><br><span class="line">uid = rsync            <span class="comment">#指定rsync服务运行时向磁盘读取和写入的用户</span></span><br><span class="line">gid = rsync            <span class="comment">#指定rsync服务运行时向磁盘读取和写入的用户组</span></span><br><span class="line">port = 873             <span class="comment">#服务默认端口号873</span></span><br><span class="line">fake super = yes       <span class="comment">#伪装管理员功能开启 便于可以执行chgrp命令</span></span><br><span class="line">use chroot = <span class="literal">false</span>     <span class="comment">#安全配置 ！！！</span></span><br><span class="line">max connections = 200  <span class="comment">#最大连接数 同时支持200个客户端连接</span></span><br><span class="line">timeout = 300          <span class="comment">#连接超时时间300秒</span></span><br><span class="line">incoming  chmod  = Du=rwx,Dg=rwx,Fu=rwx,Fgo=rwx</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line"><span class="comment">#进程信息文件，便于获取进程号停止进程，便于判断服务是否启动，避免反复启动 </span></span><br><span class="line">lock file = /var/run/rsync.lock   <span class="comment">#锁文件 </span></span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log    <span class="comment">#服务运行时日志文件</span></span><br><span class="line">transfer logging = yes            <span class="comment">#使rsync服务器使用ftp格式的文件来记录下载和上载操作在自己单独的日志中。</span></span><br><span class="line">dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2</span><br><span class="line"><span class="comment">#用来指定那些不进行压缩处理再传输的文件</span></span><br><span class="line">ignore errors     <span class="comment">#忽略传输过程一些小错误 </span></span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span> <span class="comment">#指定备份目录的权限为可读可写 </span></span><br><span class="line">list = <span class="literal">false</span>      <span class="comment">#是否可以列表</span></span><br><span class="line">hosts allow = 172.16.1.0/24        <span class="comment">#允许访问rsync服务器的客户端白名单 </span></span><br><span class="line">hosts deny = 0.0.0.0/32            <span class="comment">#禁止访问rsync服务器的客户端黑名单 </span></span><br><span class="line">auth users = rsyncuser             <span class="comment">#定义认证用户，实际并不存在 </span></span><br><span class="line">secrets file = /etc/rsync.passwd </span><br><span class="line"><span class="comment">#密码文件,包含客户机使用定义认证用户连接服务器需要的用户和密码信息 </span></span><br><span class="line">ignore nonreadable = yes           <span class="comment">#忽略错误程序</span></span><br><span class="line"></span><br><span class="line">[home]                             <span class="comment">#模块名称，可以多个模块 </span></span><br><span class="line">    path = /home                   <span class="comment">#模块对应的文件同步的路径</span></span><br><span class="line">    comment = home dir by oldboy   <span class="comment">#模块信息</span></span><br></pre></td></tr></table></figure><p>例子三</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###全局配置</span></span><br><span class="line">address = 192.168.3.52           <span class="comment">#指定服务器IP地址</span></span><br><span class="line">port = 873                       <span class="comment">#指定运行端口，默认是873，您可以自己指定；</span></span><br><span class="line">uid = root                       <span class="comment">#rsync使用的用户，默认nobody</span></span><br><span class="line">gid = root                       <span class="comment">#rsync使用的gid 默认nobody</span></span><br><span class="line"><span class="comment">#注：服务器端传输文件时，要发哪个用户和用户组来执行，默认是nobody。 如果用nobody 用户和用户组，可能遇到权限问题，有些</span></span><br><span class="line"><span class="comment">#文件从服务器上拉不下来。所以我就偷懒，为了方便，用了root 。不过您可以在定义要同步的目录时定义的模块中指定用户来解决权限的问题。</span></span><br><span class="line">use chroot = no                     <span class="comment">#是否限定在该目录下，默认为true</span></span><br><span class="line"><span class="comment">#当有软连接时，需要改为fasle,如果为true就限定为模块默认目录，通常都在内网使用rsync所以不配也可以</span></span><br><span class="line">pid file = /var/run/rsyncd.pid       <span class="comment">#pid文件位置</span></span><br><span class="line">lock file = /var/run/rsync.lock     <span class="comment">#指定lock文件用来支持"max connections"参数使总连接不会超过限制</span></span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log      <span class="comment">#日志文件路径</span></span><br><span class="line">max connections = 200           <span class="comment">#设置最大连接数，默认0，意思无限制，负值为关闭这个模块</span></span><br><span class="line">timeout = 300                   <span class="comment">#默认为0，表示no timeout，建议300-600（5-10分钟）</span></span><br><span class="line">transfer logging = yes           <span class="comment">#使rsync服务器使用ftp格式的文件来记录下载和上载操作在自己单独的日志中。</span></span><br><span class="line"><span class="built_in">log</span> format = %t %a %m %f %b         <span class="comment">#通过该选项用户在使用transfer logging可以自己定制日志文件的字段。其格式是</span></span><br><span class="line"><span class="comment">#一个包含格式定义符的字符串，可以使用的格式定义符如下所示：</span></span><br><span class="line"><span class="comment">#%h 远程主机名  #%a 远程IP地址  #%l 文件长度字符数  #%p 该次rsync会话的进程id  #%o 操作类型："send"或"recv"</span></span><br><span class="line"><span class="comment">#%f 文件名      #%P 模块路径    #%m 模块名          #%t 当前时间               #%u 认证的用户名(匿名时是null)  </span></span><br><span class="line"><span class="comment">#%b 实际传输的字节数            #%c 当发送文件时，该字段记录该文件的校验码</span></span><br><span class="line"><span class="comment">#默认log格式为："%o %h [%a] %m (%u) %f %l"，一般来说,在每行的头上会添加"%t [%p] "。在源代码中同时发布有一个叫</span></span><br><span class="line"><span class="comment">#rsyncstats的perl脚本程序来统计这种格式的日志文件。</span></span><br><span class="line">ignore nonreadable = yes      </span><br><span class="line"><span class="comment">#指定rysnc服务器完全忽略那些用户没有访问权限的文件。这对于在需要备份的目录中有些文件是不应该被备份者得到的情况是有意义的。    </span></span><br><span class="line">dont compress = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2  </span><br><span class="line"><span class="comment">#用来指定那些不进行压缩处理再传输的文件，默认值是*.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###目录配置</span></span><br><span class="line">[rsync]</span><br><span class="line">  comment= <span class="string">"测试"</span></span><br><span class="line">  path = /data/rsync</span><br><span class="line">  ignore errors = yes          <span class="comment">#是否忽略IO错误</span></span><br><span class="line">  <span class="built_in">read</span> only = no            <span class="comment">#read only 是只读选择，也就是说，不让客户端上传文件到服务器上</span></span><br><span class="line">  write only = no            <span class="comment">#write only指只可以上传文件不可以下载</span></span><br><span class="line">  hosts allow = 192.168.3.55    </span><br><span class="line">  <span class="comment">#可以指定单个IP，也可以指定整个网段，能提高安全性。格式是ip 与ip 之间、#ip和网段之间、网段和网段之间要用空格隔开；</span></span><br><span class="line">  hosts deny = *</span><br><span class="line">  list = yes      <span class="comment">#list 意思是把rsync 服务器上提供同步数据的目录在服务器上模块是否显示列出来。默认是yes。</span></span><br><span class="line">          <span class="comment">#如果你不想列出来，就no ；如果是no是比较安全的，至少别人不知道你的服务器上提供了哪些目录。</span></span><br><span class="line">  exclude = file1/ file2/    <span class="comment">#exclude是排除的意思，也就是说，要把/data/rsync目录下的file1和</span></span><br><span class="line">          <span class="comment">#file2排除在外； beinan/和samba/目录之间有空格分开</span></span><br><span class="line">  auth user = tytt    <span class="comment">#该选项指定由空格或逗号分隔的用户名列表，只有这些用户才允许连接该模块。这里的用户</span></span><br><span class="line">          <span class="comment">#和系统用户没有任何关系。如果"auth users"被设置，那么客户端发出对该模块的连接</span></span><br><span class="line">          <span class="comment">#请求以后会被rsync请求challenged进行验证身份,这里使用的challenge/response</span></span><br><span class="line">          <span class="comment">#认证协议。用户的名和密码以明文方式存放在"secrets file"选项指定的文件中。</span></span><br><span class="line">          <span class="comment">#默认情况下无需密码就可以连接模块(也就是匿名方式)。</span></span><br><span class="line">  secrets file = /etc/rsync.passwd <span class="comment">#该选项指定一个包含定义用户名:密码对的文件。只有在"auth users"</span></span><br><span class="line">           <span class="comment">#被定义时，该文件才有作用。文件每行包含一个username:passwd对。</span></span><br><span class="line">           <span class="comment">#一般来说密码最好不要超过8个字符。没有默认的secures file名，</span></span><br><span class="line">           <span class="comment">#需要限式指定一个。(例如：/etc/rsyncd.secrets)</span></span><br></pre></td></tr></table></figure><h3 id="3-4-实战demo">3.4 实战demo</h3><p>本次测试样例，首先配置服务端，<code>vim /etc/rsyncd.conf</code>，注意一行后面不能有注释否则会出错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rsync运行权限为root</span></span><br><span class="line">uid = root</span><br><span class="line"><span class="comment">#rsync运行权限为root</span></span><br><span class="line">gid = root</span><br><span class="line"><span class="comment">#是否让进程离开工作目录</span></span><br><span class="line">use chroot = no</span><br><span class="line"><span class="comment">#最大并发连接数，0为不限制</span></span><br><span class="line">max connections = 5 </span><br><span class="line"><span class="comment">#超时时间</span></span><br><span class="line">timeout = 600 </span><br><span class="line"><span class="comment">#指定rsync的pid存放路径</span></span><br><span class="line">pid file = /var/run/rsyncd.pid </span><br><span class="line"><span class="comment">#指定rsync的锁文件存放路径</span></span><br><span class="line">lockfile = /var/run/rsyncd.lock </span><br><span class="line"><span class="comment">#指定rsync的日志存放路径</span></span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log </span><br><span class="line"><span class="comment">#模块名称</span></span><br><span class="line">[web1] </span><br><span class="line">  <span class="comment">#该模块存放文件的基础路径</span></span><br><span class="line">  path = /data/<span class="built_in">test</span>/src </span><br><span class="line">  <span class="comment">#忽略一些无关的I/O错误</span></span><br><span class="line">  ignore errors = yes </span><br><span class="line">  <span class="comment">#客户端可以上传</span></span><br><span class="line">  <span class="built_in">read</span> only = no </span><br><span class="line">  <span class="comment">#客户端可以下载</span></span><br><span class="line">  write only = no </span><br><span class="line">  <span class="comment">#允许连接的客户端主机ip</span></span><br><span class="line">  hosts allow = </span><br><span class="line">  <span class="comment">#黑名单，表示任何主机</span></span><br><span class="line">  hosts deny = </span><br><span class="line">  list = yes</span><br><span class="line">  <span class="comment">#认证此模块的用户名</span></span><br><span class="line">  auth users = web </span><br><span class="line">  <span class="comment">#指定存放"用户名:密码"格式的文件</span></span><br><span class="line">  secrets file = /etc/web.passwd</span><br></pre></td></tr></table></figure><p>创建好服务端相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建基础目录</span></span><br><span class="line">mkdir -p /data/<span class="built_in">test</span>/src</span><br><span class="line"><span class="comment"># 再创建一个目录</span></span><br><span class="line">mkdir -p /data/<span class="built_in">test</span>/src/george</span><br><span class="line">touch /data/<span class="built_in">test</span>/src/&#123;1,2,3&#125;</span><br><span class="line"><span class="comment"># 创建密码文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"web:123"</span> &gt; /etc/web.passwd</span><br><span class="line">chmod 600 /etc/web.passwd</span><br><span class="line">systemctl start rsync.service</span><br></pre></td></tr></table></figure><p>然后进行客户端的配置和测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建需要同步的文件夹</span></span><br><span class="line">mkdir /data/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 密码123，将服务器 web1 模块里的文件同步至 /data/test</span></span><br><span class="line">rsync -avzP web@192.168.22.11::web1 /data/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># 访问查看</span></span><br><span class="line">rsync --list-only  web@192.168.31.73::web1 /data/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># -a —参数，相当于-rlptgoD，</span></span><br><span class="line"><span class="comment"># -r —是递归</span></span><br><span class="line"><span class="comment"># -l —是链接文件，意思是拷贝链接文件</span></span><br><span class="line"><span class="comment"># -i —列出 rsync 服务器中的文件</span></span><br><span class="line"><span class="comment"># -p —表示保持文件原有权限</span></span><br><span class="line"><span class="comment"># -t —保持文件原有时间</span></span><br><span class="line"><span class="comment"># -g —保持文件原有用户组</span></span><br><span class="line"><span class="comment"># -o —保持文件原有属主</span></span><br><span class="line"><span class="comment"># -D —相当于块设备文件</span></span><br><span class="line"><span class="comment"># -z —传输时压缩</span></span><br><span class="line"><span class="comment"># -P —传输进度</span></span><br><span class="line"><span class="comment"># -v —传输时的进度等信息，和-P有点关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让客户端与服务器保持完全一致， --delete</span></span><br><span class="line">rsync -avzP --delete web@192.168.22.11::web1 /data/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># 上传客户端文件至服务端</span></span><br><span class="line">rsync -avzP --delete /data/<span class="built_in">test</span>/ web@192.168.22.11::web1</span><br><span class="line"><span class="comment"># 上传客户端文件至服务端的 george 目录</span></span><br><span class="line">rsync -avzP --delete /data/<span class="built_in">test</span>/ web@192.168.22.11::web1/george</span><br><span class="line"><span class="comment"># 递归列出服务端 web1 模块的文件</span></span><br><span class="line">rsync -ir --password-file=/tmp/rsync.password web@192.168.22.11::web1</span><br><span class="line"><span class="comment"># 同步除了路径以及文件名中包含 “3” *的所有文件</span></span><br><span class="line">rsync -avzP --exclude=<span class="string">"*3*"</span> --password-file=/tmp/rsync.password web@192.168.22.11::web1 /data/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过密码文件同步</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"123"</span>&gt; /tmp/rsync.password</span><br><span class="line">chmod 600 /tmp/rsync.password</span><br><span class="line"><span class="comment"># 调用密码文件</span></span><br><span class="line">rsync -avzP --delete --password-file=/tmp/rsync.password web@192.168.22.11::web1 /data/<span class="built_in">test</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端自动同步，定时计划</span></span><br><span class="line">crontab -e</span><br><span class="line">10 0 * rsync -avzP —delete —password-file=/tmp/rsync.password web@192.168.22.11::web1 /data/<span class="built_in">test</span>/</span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h1>二、Rsync+Notify实时同步</h1><h2 id="1、概述-v2">1、概述</h2><p><code>rsync</code>与传统的<code>cp</code>、<code>tar</code>备份方式相比，<code>rsync</code>具有安全性高、备份迅速、支持增量备份等优点，通过<code>rsync</code>可以解决对实时性要求不高的数据备份需求，例如定期的备份文件服务器数据到远端服务器，对本地磁盘定期做数据镜像等。随着应用系统规模的不断扩大，对数据的安全性和可靠性也提出的更好的要求，<code>rsync</code>在高端业务系统中也逐渐暴露出了很多不足，首先，<code>rsync</code>同步数据时，需要扫描所有文件后进行比对，进行差量传输。如果文件数量达到了百万甚至千万量级，扫描所有文件将是非常耗时的。而且正在发生变化的往往是其中很少的一部分，这是非常低效的方式。其次，<code>rsync</code>不能实时的去监测、同步数据，虽然它可以通过<code>linux</code>守护进程的方式进行触发同步，但是两次触发动作一定会有时间差，这样就导致了服务端和客户端数据可能出现不一致，无法在应用故障时完全的恢复数据。基于以上原因，<code>rsync</code>+<code>inotify</code>组合出现了！</p><p><code>Inotify</code>是一种强大的、细粒度的、异步的文件系统事件监控机制，<code>linux</code>内核从<code>2.6.13</code>起，加入了<code>Inotify</code>支持，通过<code>Inotify</code>可以监控文件系统中添加、删除，修改、移动等各种细微事件，利用这个内核接口，第三方软件就可以监控文件系统下文件的各种变化情况，而<code>inotify-tools</code>就是这样的一个第三方软件。在前面有讲到，rsync可以实现触发式的文件同步，但是通过<code>crontab</code>守护进程方式进行触发，同步的数据和实际数据会有差异，而<code>inotify</code>可以监控文件系统的各种变化，当文件有任何变动时，就触发<code>rsync</code>同步，这样刚好解决了同步数据的实时性问题。</p><h2 id="2、Notify配置与运行">2、Notify配置与运行</h2><h3 id="2-1-环境配置">2.1 环境配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自行下载最新版本</span></span><br><span class="line">wget https://github.com/inotify-tools/inotify-tools/releases/download/3.20.2.2/inotify-tools-3.20.2.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">apt install -y gcc</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/inotify</span><br><span class="line">tar -zxvf inotify-tools-3.20.2.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> inotify-tools-3.20.2.2</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/inotify/</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量,也可以不配置，这样就需要带前缀/usr/local/inotify/bin运行了</span></span><br><span class="line">vim /root/.bash_profile</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/inotify/bin/:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /root/.bash_profile</span><br><span class="line"><span class="comment"># 加载库文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/usr/local/inotify/lib'</span> &gt;&gt; /etc/ld.so.conf</span><br><span class="line">ldconfig</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/inotify/include /usr/include/inotify</span><br></pre></td></tr></table></figure><h3 id="2-2-常用参数介绍">2.2 常用参数介绍</h3><ul><li><code>-m</code> —始终保持监听状态，默认触发事件即退出</li><li><code>-r</code> —递归查询目录</li><li><code>-q</code> —打印出监控事件</li><li><code>-e</code> —定义监控的事件，可用参数：<ul><li><code>access</code> —访问文件</li><li><code>modify</code> —修改文件</li><li><code>attrib</code> —属性变更</li><li><code>open</code> —打开文件</li><li><code>delete</code> —删除文件</li><li><code>create</code> —新建文件</li><li><code>move</code> —文件移动</li></ul></li><li><code>—fromfile</code> —从文件读取需要监视的文件或者排除的文件，一个文件一行，排除的文件以@开头</li><li><code>—timefmt</code> —时间格式</li><li><code>—format</code> —输出格式</li><li><code>—exclude</code> —正则匹配需要排除的文件，大小写敏感</li><li><code>—exclude</code> —正则匹配需要排除的文件，忽略大小写</li><li><code>%y%m%d %H%M</code> —年月日时钟</li><li><code>%T%w%f%e</code> —时间路径文件名状态</li></ul><h2 id="3、测试运行">3、测试运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行，当监控的目录发送改变时，会发生变化</span></span><br><span class="line">inotifywait -mrq --timefmt <span class="string">'%Y-%m-%d %H:%M:%S'</span> --format <span class="string">'%T %w%f %e'</span> -e close_write,modify,delete,create,attrib,move /home/<span class="built_in">test</span>/src/</span><br></pre></td></tr></table></figure><p>编写脚本自动同步，两台机器需要做好 ssh 免密登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dest机器</span></span><br><span class="line">mdkir /data/<span class="built_in">test</span>/dest/</span><br><span class="line"><span class="comment"># src机器</span></span><br><span class="line">mdkir /data/<span class="built_in">test</span>/src/</span><br><span class="line"><span class="comment"># 测试下命令</span></span><br><span class="line">rsync -av --delete /data/<span class="built_in">test</span>/src/ 192.168.22.12:/data/<span class="built_in">test</span>/dest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面编写脚本</span></span><br><span class="line">vim /data/<span class="built_in">test</span>/test.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/<span class="built_in">local</span>/inotify/bin/inotifywait -mrq -e modify,create,move,delete,attrib /data/<span class="built_in">test</span>/src | <span class="keyword">while</span> <span class="built_in">read</span> events</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  rsync -a --delete /data/<span class="built_in">test</span>/src/ 192.168.22.12:/data/<span class="built_in">test</span>/dest</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"`date +'%F %T'` 出现事件：<span class="variable">$events</span>"</span> &gt;&gt; /tmp/rsync.log 2&gt;&amp;1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行启动</span></span><br><span class="line">chmod 755 /data/<span class="built_in">test</span>/test.sh</span><br><span class="line">/data/<span class="built_in">test</span>/test.sh &amp;</span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/data/test/test.sh &amp;'</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://www.ruanyifeng.com/blog/2020/08/rsync.html" target="_blank" rel="noopener" title="https://www.ruanyifeng.com/blog/2020/08/rsync.html">https://www.ruanyifeng.com/blog/2020/08/rsync.html</a></p><p><a href="https://www.cnblogs.com/george-guo/p/7718515.html" target="_blank" rel="noopener" title="https://www.cnblogs.com/george-guo/p/7718515.html">https://www.cnblogs.com/george-guo/p/7718515.html</a></p><p><a href="https://blog.csdn.net/lemon_TT/article/details/125726225" target="_blank" rel="noopener" title="https://blog.csdn.net/lemon_TT/article/details/125726225">https://blog.csdn.net/lemon_TT/article/details/125726225</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Rsync远程同步&lt;/h1&gt;
&lt;h2 id=&quot;1、概述&quot;&gt;1、概述&lt;/h2&gt;
&lt;h3 id=&quot;1-1-介绍&quot;&gt;1.1 介绍&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;rsync官方文档：&lt;a href=&quot;https://www.samba.org/ftp/rsync/rsync.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://www.samba.org/ftp/rsync/rsync.html&quot;&gt;https://www.samba.org/ftp/rsync/rsync.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rsync（remote synchronize）是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。Rsync使用所谓的“Rsync算法”来使本地和远 程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快；Rsync支持大多数的类Unix系统，无论是Linux、Solaris还是BSD上都经过了良好的测试；此外，它在windows平台下也有相应的版本，如cwRsync和Sync2NAS等工具&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.shawncoding.top/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://blog.shawncoding.top/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>PM2入门及其常用命令</title>
    <link href="https://blog.shawncoding.top/posts/c5bf5d54.html"/>
    <id>https://blog.shawncoding.top/posts/c5bf5d54.html</id>
    <published>2023-04-07T13:43:03.000Z</published>
    <updated>2023-04-07T13:49:08.173Z</updated>
    
    <content type="html"><![CDATA[<h1>一、PM2概述</h1><h2 id="1、简介">1、简介</h2><blockquote><p>进程管理主要是指创建，终止和监控进程。进程管理器主要是用来确保你的应用在启动后能够保持在线</p></blockquote><p>pm2 是 nodejs 的进程管理器，默认支持负载均衡，能够守护进程。还支持查看应用运行时的性能，资源占用情况等</p><h2 id="2、普通-node-进程的缺陷">2、普通 node 进程的缺陷</h2><ul><li>普通启动方式：node index.js，关闭终端就结束进程</li><li>node 进程挂掉和“僵死”：<ul><li>进程挂掉大概有以下几种原因：<ul><li>内存泄漏：内存一点点积累到达临界值爆掉</li><li>死循环导致内存突增爆掉</li><li>死循环导致磁盘写爆</li><li>被动被kill，主动退出。</li></ul></li><li>“僵死”大概有以下几种可能:<ul><li>有某个非常耗时的cpu操作正在执行</li><li>写了个死循环（死循环不一定会导致服务挂掉，有可能只会cpu飙升，让服务处于假死状态）</li></ul></li></ul></li></ul><p>不管发生上面哪种情况，都会造成服务的不可访问，需要等我们自己去发现问题后，然后重启应用。</p><a id="more"></a><h2 id="3、PM2优点">3、PM2优点</h2><ul><li><strong>后台运行</strong>：普通启动方式：node index.js，关闭终端就结束进程；pm2可以后台运行，终端关闭不影响</li><li><strong>自动重启</strong>：在应用意外挂掉或者机器重启后，能够自动重启应用；可以监听某些文件改动，自动重启</li><li><strong>停止不稳定的进程</strong>：限制不稳定的重启的次数，达到上限就停止进程</li><li><strong>自动负载均衡</strong>：支持集群模式，会自动使用轮询的方式达到负载均衡，可以方便的启动多个node进程，充分利用cpu和内存</li><li><strong>0 秒停机重启</strong>：集群模式下，可以达到重启时不停止服务</li><li>简单日志管理：pm2可以收集日志，并有插件配合进行管理</li><li>提供实时的接口：pm2插件提供实时的接口，返回服务器与进程的信息</li><li>可以监控应用性能，资源占用情况等，自动输出日志</li><li>开发模式支持热更新</li><li>集成管理：对于多个进程，不同环境，可以统一配置，方便管理</li></ul><h2 id="4、PM2安装">4、PM2安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有nodejs的需要首先安装</span></span><br><span class="line"><span class="comment"># 安装地址http://nodejs.cn/download/</span></span><br><span class="line"><span class="comment"># 有问题</span></span><br><span class="line">wget https://nodejs.org/dist/v18.14.2/node-v18.14.2-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v18.14.2-linux-x64.tar.xz</span><br><span class="line">mv node-v18.14.2-linux-x64 /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nodejs/bin</span><br><span class="line">./node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/usr/<span class="built_in">local</span>/node</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装pm2</span></span><br><span class="line"></span><br><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><h1>二、PM2命令详情</h1><h2 id="1、PM2常用命令">1、PM2常用命令</h2><blockquote><p>快速入门：<a href="https://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/quick-start/">https://pm2.keymetrics.io/docs/usage/quick-start/</a></p></blockquote><h3 id="1-1-启动">1.1 启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pm2有两种模式，开发模式和生产模式</span></span><br><span class="line"><span class="comment"># 开发 node 应用的时候，修改代码过后每次都要重启下应用，很麻烦。使用 pm2-dev 命令启动应用，应用会在在代码发生变更过后，自动重启</span></span><br><span class="line">pm2-dev start server.js</span><br><span class="line"><span class="comment"># 应用部署到生产环境后，可以使用 pm2 start 来启动应用，命令启动的应用，默认支持进程守护，并且可以通过 pm2 进行监控</span></span><br><span class="line">pm2 start server.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动指定应用，如pm2 start index.js --name httpServer；</span></span><br><span class="line">pm2 start &lt;script_file|config_file&gt; [options]</span><br><span class="line"><span class="comment"># 支持不同文件格式</span></span><br><span class="line">pm2 start app.js</span><br><span class="line">pm2 start bashscript.sh</span><br><span class="line">pm2 start python-app.py</span><br><span class="line">pm2 start binary-file</span><br><span class="line">pm2 start <span class="string">"npm run start"</span></span><br><span class="line">pm2 start <span class="string">"ls -la"</span></span><br><span class="line">pm2 start app.py</span><br><span class="line"><span class="comment"># 设置启动应用的显示名称</span></span><br><span class="line">pm2 start app.js --name &lt;app_name&gt;</span><br><span class="line"><span class="comment"># 监控应用目录，一旦有文件发生更改就立刻重启应用</span></span><br><span class="line">pm2 start app.js --watch</span><br><span class="line"><span class="comment"># 指定日志输出目录</span></span><br><span class="line">pm2 start app.js --<span class="built_in">log</span> &lt;log_path&gt;</span><br><span class="line"><span class="comment"># 设置应用重启时，能使用内存的最大值</span></span><br><span class="line">pm2 start app.js --max-memory-restart &lt;200MB&gt;</span><br><span class="line"><span class="comment"># 启动时，传递参数给 app 应用</span></span><br><span class="line">pm2 start app.js -- arg1 arg2 arg3</span><br><span class="line"><span class="comment"># 禁止自动重启应用</span></span><br><span class="line">pm2 start app.js --no-autorestart</span><br><span class="line"><span class="comment"># 定时任务。可以设置 一天中的固定重启时间， 一周内固定重启日期，或者 一个时间间隔（如 每 48 小时重启一次）</span></span><br><span class="line"><span class="comment"># cron_pattern参考：https://www.npmjs.com/package/cron</span></span><br><span class="line">pm2 start app.js --cron &lt;cron_pattern&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定延时重启，这里的2000单位为毫秒，即在需要重启的时候等待两秒钟</span></span><br><span class="line">pm2 start --restart-delay=2000</span><br><span class="line"><span class="comment"># 灵活延时，重试时间会随着重试次数增多不断延长</span></span><br><span class="line"><span class="comment"># 此处的1000单位也是毫秒，PM2会在多次重启失败后以设定的时间为初始值，使用指数移动平均算法不断延长重试时间，最高为15000毫秒（即15秒），并在进程成功启动30秒后重置重试时间到到初始值</span></span><br><span class="line">pm2 start --exp-backoff-restart-delay=1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态服务器,将目录dist作为静态服务器根目录，端口为9090</span></span><br><span class="line">pm2 serve ./dist 9090</span><br></pre></td></tr></table></figure><h3 id="1-2-管理进程">1.2 管理进程</h3><p><code>app_name</code> 的位置除了传应用名，还可以传：</p><ul><li><code>all</code> 针对所有进程进行操作</li><li><code>id</code> 针对特定id的进程进行操作</li></ul><p>集群模式下，restart中断服务，而reload不会</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------------------重启、重载、停止、删除------------------------</span></span><br><span class="line"><span class="comment"># 停止指定应用，如pm2 stop httpServer；</span></span><br><span class="line"><span class="comment"># 也可以执行他目录下得 pm2-start.sh 脚本里面用. pm2-start.sh 执行输入0就可以关闭在执行得脚本</span></span><br><span class="line"><span class="comment"># (app_name|app_id|all)</span></span><br><span class="line">pm2 stop [options] </span><br><span class="line"><span class="comment"># 重启指定应用，如pm2 restart httpServer；</span></span><br><span class="line">pm2 reload|restart [options] </span><br><span class="line"><span class="comment"># 显示指定应用详情，如pm2 show httpServer；</span></span><br><span class="line">pm2 show [options] </span><br><span class="line"><span class="comment"># 删除指定应用，如pm2 delete httpServer，如果修改应用配置行为，最好先删除应用后，重新启动方才生效，如修改脚本入口文件；</span></span><br><span class="line">pm2 delete [options] </span><br><span class="line"><span class="comment"># 重置 restart 的计时器</span></span><br><span class="line">pm2 reset all  </span><br><span class="line"><span class="comment"># 杀掉pm2管理的所有进程；</span></span><br><span class="line">pm2 <span class="built_in">kill</span> </span><br><span class="line"><span class="comment"># 保存并恢复PM2进程</span></span><br><span class="line">pm2 update</span><br></pre></td></tr></table></figure><h3 id="1-3-应用信息查看">1.3 应用信息查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#----------------------------查看运行状态-------------------------</span></span><br><span class="line"><span class="comment"># 查看所有进程信息（app_name、app_id等）</span></span><br><span class="line">pm2 [list|ls|status]</span><br><span class="line"><span class="comment"># 对应用进行排序查看</span></span><br><span class="line">pm2 list --sort name:desc</span><br><span class="line"><span class="comment"># Or</span></span><br><span class="line">pm2 list --sort [name|id|pid|memory|cpu|status|uptime][:asc|desc]  </span><br><span class="line"><span class="comment"># 查看某个应用详情</span></span><br><span class="line">pm2 describe app_name|app_id</span><br><span class="line"><span class="comment"># 查看应用详情信息</span></span><br><span class="line">pm2 show app_name|app_id</span><br><span class="line"><span class="comment"># 清除保存的应用列表</span></span><br><span class="line">pm2 cleardump</span><br><span class="line"><span class="comment"># 保存当前应用列表，以后可以恢复</span></span><br><span class="line">pm2 save  <span class="comment"># 同 pm2 dump</span></span><br><span class="line"><span class="comment"># 重新加载之前保存的应用列表</span></span><br><span class="line">pm2 resurrect</span><br></pre></td></tr></table></figure><p>运行<code>pm2 list</code>的命令后，可以查看所有 pm2 启动的应用</p><ul><li><code>id</code>：应用 id</li><li><code>name</code>：应用名称</li><li><code>namespace</code>：在配置文件里面可以给应用设置 namespace。设置后可以使用命令行单独启动或停止某个 namespace 的应用</li><li><code>mode</code>: 进程的运行方式。分为 <code>fork</code> 与 <code>cluster</code></li><li><code>pid</code>：进程id</li><li><code>uptime</code>：运行时间</li><li><code>↺</code>：重启次数（从0开始计数）</li><li><code>status</code>：进程是否在线</li><li><code>cpu</code>：cpu占用率</li><li><code>mem</code>：内存占用大小</li></ul><p>而<code>pm2 show app_name|app_id</code>查看应用详情信息，除了 <code>pm2 list </code>命令返回的信息以外，还可以获取几个常用信息</p><ul><li><code>script path</code>：启动入口的文件路径</li><li><code>script args</code>：启动文件的参数</li><li><code>error log path</code>：错误日志的文件路径</li><li><code>out log path</code>：输出日志的文件路径</li><li><code>exec mode</code>：进程的模式</li><li><code>watch&amp;reload</code>：是否开启监听文件变动重启</li><li><code>unstable restarts</code>：不稳定的重启次数</li></ul><h3 id="1-4-日志与监控">1.4 日志与监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看指定应用的日志，即标准输出和标准错误；</span></span><br><span class="line">pm2 logs [options] [id|name|namespace] </span><br><span class="line">pm2 logs</span><br><span class="line"><span class="comment"># 还可以直接进入日志保存的目录查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控各个应用进程cpu和memory使用情况</span></span><br><span class="line">pm2 monit </span><br><span class="line"><span class="comment"># 查看所有命令</span></span><br><span class="line">pm2 --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">pm2 -h</span><br></pre></td></tr></table></figure><h2 id="2、集成部署EcosystemFile">2、集成部署EcosystemFile</h2><blockquote><p>官方参考：<a href="https://pm2.keymetrics.io/docs/usage/application-declaration/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/application-declaration/">https://pm2.keymetrics.io/docs/usage/application-declaration/</a></p></blockquote><h3 id="2-1-概述">2.1 概述</h3><p>当我们需要管理多个应用，或者应用有多个运行环境时，使用 <code>pm2 start</code> 来启动应用＋配置参数是很不方便的。所以，pm2 支持使用配置文件来启动和管理应用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">pm2 init simple</span><br><span class="line"><span class="comment"># 运行该命令可在工程下初始化一个 ecosystem.config.js 配置文件</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    name   : <span class="string">"app1"</span>,</span><br><span class="line">    script : <span class="string">"./app.js"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># apps是要管理应用的数组，每个对象都是一个应用的配置</span></span><br><span class="line"><span class="comment"># 你也可以自己创建一个配置文件，文件名以 .config.js 结尾，pm2 会自动识别并读取该文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start all applications</span></span><br><span class="line">pm2 start ecosystem.config.js</span><br><span class="line"><span class="comment"># Stop all</span></span><br><span class="line">pm2 stop ecosystem.config.js</span><br><span class="line"><span class="comment"># Restart all</span></span><br><span class="line">pm2 restart ecosystem.config.js</span><br><span class="line"><span class="comment"># Reload all</span></span><br><span class="line">pm2 reload ecosystem.config.js</span><br><span class="line"><span class="comment"># Delete all</span></span><br><span class="line">pm2 delete ecosystem.config.js</span><br></pre></td></tr></table></figure><h3 id="2-2-配置项详解">2.2 配置项详解</h3><p>基础配置</p><ul><li>name：进程名</li><li>script：node 启动文件的路径</li><li>cwd ：项目所在的目录</li><li>args ：通过命令行传递给node启动文件的参数</li><li>interpreter ：编译器的绝对路径（默认 node ）</li><li>interpreter_args ：传给编译器的参数</li><li>node_args：传给 node 的参数</li></ul><p><strong>进阶配置</strong></p><ul><li>instances ：应用启动实例个数，仅在cluster模式有效</li><li>exec_mode ：应用程序启动模式。可选 <code>cluster</code> 或 <code>fork</code>，默认为 <code>fork</code></li><li>watch ：是否启用监控模式，默认是 <code>false</code>。如果设置成 <code>true</code>，当应用程序变动时，pm2会自动重载</li><li>ignore_watch ：不用监听的文件，如</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ignore_watch: [</span><br><span class="line">   <span class="string">'node_modules'</span>,</span><br><span class="line">   <span class="string">'logs'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>max_memory_restart ：应用运行内存达到设定值后，会自动重启。避免了 <code>Node.js heap out of memory error </code>问题</p></li><li><p>env ：应用中的默认环境变量</p></li><li><p>env_ ：命令行中可传入的环境变量，覆盖默认环境变量</p></li><li><p>source_map_support ：默认 <code>true</code>，支持 sourcemap 文件</p></li></ul><p><strong>日志配置</strong></p><ul><li>log_date_format ：日志时间格式</li><li>error_file ：错误日志存放路径</li><li>out_file ：全部日志存放路径</li><li>combine_logs：是否将不同 id 的进程日志合并</li><li>merge_logs：同上</li></ul><p><strong>控制流</strong></p><ul><li>min_uptime：应用被视为已启动最小运行时间</li><li>max_restarts： 在应用状态被认定为 <code>error</code> 前，一定时间（<code>min_uptime</code> 指定的时间，若未配置，则为 1 秒）内的连续不稳定重启次数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以上两个配置项一般需要同时设置,以下举个例子</span></span><br><span class="line"><span class="comment"># server.js</span></span><br><span class="line">setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    console.log(<span class="string">'killed'</span>);</span><br><span class="line">    process.exit(1)</span><br><span class="line">&#125;, 1000);</span><br><span class="line"><span class="comment"># ecosystem.config.js</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  apps: [&#123;</span><br><span class="line">    name: <span class="string">"app-market"</span>,</span><br><span class="line">    script: <span class="string">"./server.js"</span>,</span><br><span class="line">    max_restarts: 4,</span><br><span class="line">    min_uptime: 5000,</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># server 应用在启动 1s 后，会自己强行结束进程。这时， pm2 由于进程守护的特性，会去重新拉起应用。</span></span><br><span class="line"><span class="comment"># 示例中设置了 min_uptime 为 5000（即 5s），max_restarts 为 4 次，所以 pm2 在进程停止（1s）后去重启进程，5s 钟可以内重启次数肯定可以达到 4 次。达到设定次数后，则停止重启应用</span></span><br></pre></td></tr></table></figure><ul><li>listen_timeout：如果应用没有发送 <code>ready</code> 信号，间隔多长时间 reload。单位为毫秒。</li><li>wait_ready：是否等待进程发送 <code>ready</code> 信号。默认为 <code>false</code>。设置为 <code>true</code> 后，需要在应用内部添加 <code>process.send('ready')</code> 语句发送 <code>ready</code> 信号。</li></ul><p>以上两个配置项一般需要搭配使用，详细使用场景见 <a href="https://pm2.keymetrics.io/docs/usage/signals-clean-restart/" target="_blank" rel="noopener" title="优雅的启动与停止应用">优雅的启动与停止应用</a></p><ul><li>kill_timeout：从告诉进程要关闭到强制关闭进程的间隔时间。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    name: <span class="string">'app'</span>,</span><br><span class="line">    script: <span class="string">'./app.js'</span>,</span><br><span class="line">    kill_timeout: 3000</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 pm2 要停止或重启一个应用时，会按顺序给你的进程发送一系列系统信号。它首先会发送一个 <code>SIGINT</code> 信号告诉你应用将会被停止。然后 pm2 会等待 3s（示例中 <code>kill_timeout</code> 设置的时间）。若 3s 后应用没有自己停止（exit），pm2 会发送一个 <code>SIGKILL</code> 信号来强制停止应用。<a href="https://pm2.keymetrics.io/docs/usage/signals-clean-restart/" target="_blank" rel="noopener" title="优雅停止">优雅停止</a></p><ul><li>estart_delay：进程掉线后，等待多长时间自动重启， 默认 0s</li><li>autorestart： 是否开启自动重启。默认开启。</li><li>cron_restart： 定时重启。可以设置 <strong>一天中的固定重启时间</strong>， <strong>一周内固定重启日期</strong>，或者 <strong>一个时间间隔（如 每 48 小时重启一次）</strong>。<a href="https://www.npmjs.com/package/cron" target="_blank" rel="noopener" title="cron_pattern 请参照这里">cron_pattern 请参照这里</a></li></ul><h3 id="2-3-使用配置文件">2.3 使用配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动、停止、重启、重载、删除配置文件中所有项目</span></span><br><span class="line">pm2 start ecosystem.config.js</span><br><span class="line">pm2 stop ecosystem.config.js</span><br><span class="line">pm2 restart ecosystem.config.js</span><br><span class="line">pm2 reload ecosystem.config.js</span><br><span class="line">pm2 delete ecosystem.config.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动指定应用</span></span><br><span class="line">pm2 start   ecosystem.config.js --only api-app</span><br><span class="line">pm2 start   ecosystem.config.js --only <span class="string">"api-app,worker-app"</span></span><br></pre></td></tr></table></figure><h2 id="3、集群模式">3、集群模式</h2><blockquote><p><a href="https://pm2.keymetrics.io/docs/usage/cluster-mode/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/cluster-mode/">https://pm2.keymetrics.io/docs/usage/cluster-mode/</a></p></blockquote><h3 id="3-1-cluster-模式与-fork-模式">3.1 cluster 模式与 fork 模式</h3><ul><li>fork 模式 ：fork 模式使用最基本的进程运行方式，只是单实例运行server，无法实现 TCP 连接共享。并且我们知道 JavaScript 代码是运行在单线程上的，换句话说一个 Node.js 进程只能运行在一个 CPU 上。那么如果用 Node.js 来做 Web Server，就无法享受到多核运算的好处</li><li>cluster 模式：集群模式允许 nodejs 应用程序在所有可用的 CPU 上进行扩展，而无需修改任何代码。可以显著提高应用程序的性能和可靠性，具体取决于可用的 CPU 数量。在底层，它使用了 Node.js 集群模块，这样扩展后的应用程序的子进程可以自动共享服务器端口。要了解更多信息，请参阅<a href="https://nodejs.org/api/cluster.html" target="_blank" rel="noopener" title=" Node.js 集群"> Node.js 集群</a></li></ul><h3 id="3-2-集群的使用">3.2 集群的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行启动</span></span><br><span class="line"><span class="comment"># max 的意思是：把应用部署到服务器所有可用的CPU上，并运行尽可能多的进程</span></span><br><span class="line">pm2 start app.js -i max</span><br><span class="line"><span class="comment"># 通过配置文件启动</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    script    : <span class="string">"app.js"</span>,</span><br><span class="line">    instances : <span class="string">"max"</span>,</span><br><span class="line">    exec_mode : <span class="string">"cluster"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：pm2 的负载均衡的特性是建立在以集群模式启动的基础上的，默认的启动模式是 fork，不支持负载均衡</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群模式下，由于 pm2 的 restart 命令会先杀掉所有进程，再重新拉起，会造成服务终止。</span></span><br><span class="line"><span class="comment"># 但是 reload 命令可以实现 0s 重启，维护升级的时候不需要停机。当重载时间过长或者无法重载时，pm2 会自动切换成 restart</span></span><br><span class="line">pm2 reload app.js        <span class="comment">#重新启动所有进程，始终保持至少一个进程在运行</span></span><br><span class="line">pm2 gracefulReload all   <span class="comment">#优雅地以群集模式重新加载所有应用程序</span></span><br></pre></td></tr></table></figure><p>**<code>-i</code>**<strong>后面的数字说明</strong></p><ul><li>0/max ：开启进程数量 == cpu核数量</li><li>-1：进程数量 == cpu核数量 - 1</li></ul><h3 id="3-3-动态扩展">3.3 动态扩展</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果希望在运行中动态增加实例数，可以使用下面的命令</span></span><br><span class="line">pm2 scale &lt;app_name&gt; +4 <span class="comment"># add 4 additional workers in realtime</span></span><br></pre></td></tr></table></figure><h2 id="4、PM2其他进阶">4、PM2其他进阶</h2><h3 id="4-1-日志输出">4.1 日志输出</h3><blockquote><p><a href="https://pm2.keymetrics.io/docs/usage/log-management/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/log-management/">https://pm2.keymetrics.io/docs/usage/log-management/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只要通过PM2 启动的Node.js项目，可以非常方便的查看其输出日志</span></span><br><span class="line"><span class="comment"># 显示所有应用的实时日志</span></span><br><span class="line">pm2 logs</span><br><span class="line"><span class="comment"># 显示 api 应用的日志</span></span><br><span class="line">pm2 logs api</span><br><span class="line"><span class="comment"># json格式显示所有应用的日志</span></span><br><span class="line">pm2 logs --json</span><br><span class="line"><span class="comment"># 显示1000行 big-api 的日志</span></span><br><span class="line">pm2 logs big-api --lines 1000</span><br><span class="line"><span class="comment"># 用仪表盘显示所有应用</span></span><br><span class="line">pm2 monit</span><br><span class="line"><span class="comment"># 输出日志加上时间</span></span><br><span class="line">pm2 start app.js --time</span><br><span class="line">pm2 restart app --time</span><br><span class="line"><span class="comment"># 默认日志的路径</span></span><br><span class="line">HOME/.pm2/logs</span><br><span class="line"><span class="comment"># 查看日志命令的可用选项</span></span><br><span class="line">pm2 logs -h</span><br><span class="line"><span class="comment"># 启动应用时，怎么初始化日志相关信息</span></span><br><span class="line">pm2 start app.js [OPTIONS]</span><br><span class="line">-l --<span class="built_in">log</span> [path]              specify filepath to output both out and error logs</span><br><span class="line">-o --output &lt;path&gt;           specify out <span class="built_in">log</span> file</span><br><span class="line">-e --error &lt;path&gt;            specify error <span class="built_in">log</span> file</span><br><span class="line">--time                       prefix logs with standard formated timestamp</span><br><span class="line">--<span class="built_in">log</span>-date-format &lt;format&gt;   prefix logs with custom formated timestamp</span><br><span class="line">--merge-logs                 适用 cluster mode</span><br><span class="line"><span class="comment"># cluster mode 中，让所有进程日志都写进同一个日志</span></span><br><span class="line"><span class="comment"># 命令启动，加上选项</span></span><br><span class="line">pm2 start app.js -i max --merge-logs &lt;具体日志文件&gt;</span><br><span class="line"><span class="comment"># 配置文件中，设置属性：</span></span><br><span class="line">merge_logs: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 不需要输出日志</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    apps: [&#123;</span><br><span class="line">        name: <span class="string">'Business News Watcher'</span>,</span><br><span class="line">        script: <span class="string">'app.js'</span>,</span><br><span class="line">        instances: 1,</span><br><span class="line">        out_file: <span class="string">"/dev/null"</span>,</span><br><span class="line">        error_file: <span class="string">"/dev/null"</span>,</span><br><span class="line">        cron_restart: <span class="string">'0 0 * * *'</span>,</span><br><span class="line">        [...]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 清除所有应用的日志</span></span><br><span class="line">pm2 flush</span><br><span class="line"><span class="comment"># 清除 api 应用的日志</span></span><br><span class="line">pm2 flush &lt;api&gt;</span><br><span class="line"><span class="comment"># 日志文件的大小，以及日志保存多久等功能需要额外插件支持：</span></span><br><span class="line">pm2 install pm2-logrotate</span><br></pre></td></tr></table></figure><h3 id="4-2-监控模式实时更新">4.2 监控模式实时更新</h3><blockquote><p><a href="https://pm2.keymetrics.io/docs/usage/restart-strategies/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/restart-strategies/">https://pm2.keymetrics.io/docs/usage/restart-strategies/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监控项目目录下所有文件，任意文件有改动，就自动重启 node.js 项目</span></span><br><span class="line"><span class="comment"># 用 pm2 启动 node.js 项目，项目目录下有文件改动就重启</span></span><br><span class="line">pm2 start app.js --watch</span><br><span class="line"><span class="comment"># 现在就可以正常访问 node.js 项目了，且可以查看项目状态</span></span><br><span class="line">pm2 list</span><br><span class="line">pm2 <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --ignore-watch 可以去除一些不需要监控的目录或文件</span></span><br><span class="line"><span class="comment"># 监控除了  node_modules 目录以外文件</span></span><br><span class="line">pm2 start app.js --watch --ignore-watch=<span class="string">"node_modules"</span></span><br><span class="line"><span class="comment"># 配置文件中设置监控的方法</span></span><br><span class="line"><span class="comment"># 监控和忽略具体文件</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    script: <span class="string">"app.js"</span>,</span><br><span class="line">    // 监控这两个文件夹</span><br><span class="line">    watch: [<span class="string">"server"</span>, <span class="string">"client"</span>],</span><br><span class="line">    // 监控时间间隔</span><br><span class="line">    watch_delay: 1000,</span><br><span class="line">    // 忽略这两个文件夹</span><br><span class="line">    ignore_watch: [<span class="string">"node_modules"</span>, <span class="string">"client/img"</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 监控项目目录下所有文件</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    script: <span class="string">"app.js"</span>,</span><br><span class="line">    watch: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------restart 与 reload 区别-----------</span></span><br><span class="line"><span class="comment"># restart 会杀掉现有进程 并 启动新进程，服务会中断；</span></span><br><span class="line"><span class="comment"># reload 不会杀掉现有进程，在现有进程重新加载，服务不会中断</span></span><br><span class="line"><span class="comment"># 只有 app_name 这个应用被reload</span></span><br><span class="line">pm2 reload &lt;app_name&gt;</span><br><span class="line"><span class="comment"># 配置文件中所有应用都被reload</span></span><br><span class="line">pm2 reload process.json</span><br><span class="line"><span class="comment"># 只有配置文件中的api应用被reload</span></span><br><span class="line">pm2 reload process.json --only api</span><br></pre></td></tr></table></figure><h3 id="4-3-PM2自启动">4.3 PM2自启动</h3><blockquote><p><a href="https://pm2.keymetrics.io/docs/usage/startup/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/startup/">https://pm2.keymetrics.io/docs/usage/startup/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当服务器意外崩溃重启后，Node.js要能够自启动，恢复服务</span></span><br><span class="line"><span class="comment"># 1、创建启动脚本</span></span><br><span class="line">pm2 startup</span><br><span class="line"><span class="comment"># 2、上面命令会输出类似如下提示，按照提示执行</span></span><br><span class="line">[PM2] Init System found: systemd</span><br><span class="line">[PM2] To setup the Startup Script, copy/paste the following <span class="built_in">command</span>:</span><br><span class="line">sudo env PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/nodejs/bin /usr/<span class="built_in">local</span>/nodejs/lib/node_modules/pm2/bin/pm2 startup systemd -u shawn --hp /home/shawn</span><br><span class="line"><span class="comment"># 3、保存正在运行的应用到启动脚本</span></span><br><span class="line">pm2 save</span><br><span class="line"><span class="comment"># 现在可以重启服务器，看看 node.js 项目是否能自启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复上一次保存的自启动列表</span></span><br><span class="line">pm2 resurrect</span><br><span class="line"><span class="comment"># 取消自启动</span></span><br><span class="line">pm2 unstartup</span><br><span class="line"><span class="comment"># 当 node.js 版本更新时，请一定要卸载并新建 自启动脚本 </span></span><br><span class="line">pm2 unstartup</span><br><span class="line">pm2 startup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果我们还希望PM2中的进程能随着PM2启动而启动，就需要每次在新增或删除进程后执行pm2 save</span></span><br><span class="line"><span class="comment"># 自动加入重启</span></span><br><span class="line"><span class="comment"># 我们对进程的变更将会被即时保存到~/.pm2/dump.pm2中，无需手动执行pm2 save</span></span><br><span class="line">pm2 <span class="built_in">set</span> pm2:autodump <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="4-4-环境变量隔离">4.4 环境变量隔离</h3><blockquote><p><a href="https://pm2.keymetrics.io/docs/usage/environment/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/environment/">https://pm2.keymetrics.io/docs/usage/environment/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成配置文件,pm2 init simple</span></span><br><span class="line"><span class="comment"># 生成默认配置文件：ecosystem.config.js</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    name   : <span class="string">"app1"</span>,</span><br><span class="line">    script : <span class="string">"./app.js"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加环境变量配置</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    apps: [&#123;</span><br><span class="line">        name: <span class="string">"app1"</span>,</span><br><span class="line">        script: <span class="string">"./app.js"</span>,</span><br><span class="line">        env: &#123;</span><br><span class="line">            <span class="string">"ip"</span>: <span class="string">"192.168.1.2"</span>,</span><br><span class="line">            <span class="string">"NODE_ENV"</span>: <span class="string">"development"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        env_production: &#123;</span><br><span class="line">            <span class="string">"ip"</span>: <span class="string">"192.168.1.1"</span>,</span><br><span class="line">            <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        env_develop: &#123;</span><br><span class="line">            <span class="string">"ip"</span>: <span class="string">"192.168.1.2"</span>,</span><br><span class="line">            <span class="string">"NODE_ENV"</span>: <span class="string">"develop"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用环境变量</strong></p><ul><li><code>env</code>默认环境变量，只要启动应用：<code>pm2 start ecosystem.config.js</code> ，那么 ip 变量就会被传递给应用 app1</li><li><code>env_production</code>对应调用方式是：<code>pm2 start ecosystem.config.js --env production</code></li><li><code>env_develop</code>对应调用方式是：<code>pm2 start ecosystem.config.js --env develop</code></li><li>规则是 ：配置文件中定义 <code>env_</code>开头的属性，那么就用 <code>--env</code>参数调用。</li></ul><p><code>--update-env</code>: 更新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=production pm2 restart web-interface --update-env</span><br></pre></td></tr></table></figure><h3 id="4-5-多服务器管理">4.5 多服务器管理</h3><blockquote><p><a href="https://pm2.keymetrics.io/docs/usage/deployment/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/deployment/">https://pm2.keymetrics.io/docs/usage/deployment/</a></p></blockquote><p>在 node.js 项目部署发布时，经常用 SSH 分别连接多台服务器，对每一台服务器都要执行 git pull 最新代码，编译启动应用的操作，操作琐碎且容易忘记其中某些操作。pm2 可以很好解决这个问题，只需一个命令就可以自动完成，还能实时监控、查看 node.js 应用的运行情况</p><p><strong>第一步：服务器环境配置</strong></p><ul><li>安装 node.js ：<a href="https://learn-anything.cn/node-js-nvm" target="_blank" rel="noopener" title="不会，看这里！">不会，看这里！</a></li><li>安装 pm2 ：<code>npm install pm2@latest -g</code>或 <code>yarn global add pm2</code></li><li>安装 git ：<a href="https://learn-anything.cn/git-github" target="_blank" rel="noopener" title="不会，看这里">不会，看这里</a></li><li>配置 SSH，使得服务器可以免密运行 <code>git clone</code>，<a href="https://learn-anything.cn/git-github" target="_blank" rel="noopener" title="不会，看这里！">不会，看这里！</a></li></ul><p>第二步：开发机器环境配置</p><ul><li>安装 node.js ：<a href="https://learn-anything.cn/node-js-nvm" target="_blank" rel="noopener" title="不会，看这里！">不会，看这里！</a></li><li>安装 pm2 ：<code>npm install pm2@latest -g</code>或 <code>yarn global add pm2</code></li><li>配置SSH，免密登录服务器，<a href="https://learn-anything.cn/ssl-tls-http-https-ssh#2-ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95" target="_blank" rel="noopener" title="不会，看这里！">不会，看这里！</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node.js 项目操作步骤配置，注意修改对应的信息</span></span><br><span class="line"><span class="comment">// pm2 init 等同于 pm2 ecosystem，可以生成带有 deploy 属性的配置文件：ecosystem.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    apps : [&#123;</span><br><span class="line">        name      : <span class="string">'API'</span>,      <span class="comment">//应用名</span></span><br><span class="line">        script    : <span class="string">'app.js'</span>,   <span class="comment">//应用文件位置</span></span><br><span class="line">        env: &#123;</span><br><span class="line">            PM2_SERVE_PATH: <span class="string">"."</span>,    <span class="comment">//静态服务路径</span></span><br><span class="line">            PM2_SERVE_PORT: <span class="number">8080</span>,   <span class="comment">//静态服务器访问端口</span></span><br><span class="line">            NODE_ENV: <span class="string">'development'</span> <span class="comment">//启动默认模式</span></span><br><span class="line">        &#125;,</span><br><span class="line">        env_production : &#123;</span><br><span class="line">            NODE_ENV: <span class="string">'production'</span>  <span class="comment">//使用production模式 pm2 start ecosystem.config.js --env production</span></span><br><span class="line">        &#125;,</span><br><span class="line">        instances:<span class="string">"max"</span>,          <span class="comment">//将应用程序分布在所有CPU核心上,可以是整数或负数</span></span><br><span class="line">        watch:<span class="literal">true</span>,               <span class="comment">//监听模式</span></span><br><span class="line">        output: <span class="string">'./out.log'</span>,      <span class="comment">//指定日志标准输出文件及位置</span></span><br><span class="line">        error: <span class="string">'./error.log'</span>,     <span class="comment">//错误输出日志文件及位置，pm2 install pm2-logrotate进行日志文件拆分</span></span><br><span class="line">        merge_logs: <span class="literal">true</span>,         <span class="comment">//集群情况下，可以合并日志</span></span><br><span class="line">        log_type:<span class="string">"json"</span>,          <span class="comment">//日志类型</span></span><br><span class="line">        log_date_format: <span class="string">"DD-MM-YYYY"</span>,  <span class="comment">//日志日期记录格式</span></span><br><span class="line">    &#125;],</span><br><span class="line">    deploy : &#123;</span><br><span class="line">        production : &#123;</span><br><span class="line">            user : <span class="string">'node'</span>,                      <span class="comment">//ssh 用户</span></span><br><span class="line">            host : [<span class="string">"192.168.0.13"</span>, <span class="string">"192.168.0.14"</span>, <span class="string">"192.168.0.15"</span>],              <span class="comment">//ssh 地址</span></span><br><span class="line">            ref  : <span class="string">'origin/master'</span>,             <span class="comment">//GIT远程/分支</span></span><br><span class="line">            repo : <span class="string">'git@github.com:repo.git'</span>,   <span class="comment">//git地址</span></span><br><span class="line">            path : <span class="string">'/var/www/production'</span>,       <span class="comment">//服务器文件路径</span></span><br><span class="line">            post-deploy : <span class="string">'npm install &amp;&amp; pm2 reload ecosystem.config.js --env production'</span>  <span class="comment">//部署后的动作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pm2 连接服务器，通知其 git clone 代码等初始化工作</span></span><br><span class="line">pm2 deploy production setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 或 更新 node.js 项目</span></span><br><span class="line"><span class="comment"># 让服务器 git pull 代码，编译后启动应用</span></span><br><span class="line"><span class="comment"># --force 的作用：如果服务器本地代码有改动，那么放弃改动，用git仓库最新代码更新项目</span></span><br><span class="line">pm2 deploy production --force;</span><br></pre></td></tr></table></figure><p><strong>下面说一下命令详解</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line"><span class="comment"># 如果配置文件名是：ecosystem.config.js或者 pm2.config.js，上面命令可以不用写 &lt;configuration_file&gt;</span></span><br><span class="line">pm2 deploy &lt;configuration_file&gt; &lt;environment&gt; &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"><span class="comment"># 此命令就是默认寻找 ecosystem.config.js  或  pm2.config.js  配置文件执行</span></span><br><span class="line">pm2 deploy production setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在配置文件中设定 env_production和 env_development，就可以在执行命令时调用，把环境变量传递给node.js 项目</span></span><br><span class="line"><span class="comment"># pm2 deploy production --force;</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    apps: [&#123;</span><br><span class="line">        script: <span class="string">'index.js'</span>,</span><br><span class="line">        watch: <span class="string">'.'</span>,</span><br><span class="line">        env_production: &#123;</span><br><span class="line">            NODE_ENV: <span class="string">"production"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        env_development: &#123;</span><br><span class="line">            NODE_ENV: <span class="string">"development"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># command</span></span><br><span class="line">setup                  run remote setup commands</span><br><span class="line">update                 update deploy to the latest release</span><br><span class="line">revert[n]             revert to[n]th last deployment or 1</span><br><span class="line">curr[ent]              output current release commit</span><br><span class="line">prev[ious]             output previous release commit</span><br><span class="line"><span class="built_in">exec</span> | run &lt; cmd &gt;     execute the given &lt; cmd &gt;</span><br><span class="line">list                   list previous deploy commits</span><br><span class="line">[ref]                  deploy to[ref], the <span class="string">"ref"</span> setting, or latest tag </span><br><span class="line"></span><br><span class="line"><span class="comment"># exec可以让所有服务器执行一次命令</span></span><br><span class="line">pm2 deploy production <span class="built_in">exec</span> <span class="string">"pm2 reload all"</span></span><br><span class="line"><span class="comment"># 回滚到上一个部署版本</span></span><br><span class="line">pm2 deploy production revert 1</span><br><span class="line"><span class="comment"># 部署的几个时间点</span></span><br><span class="line"><span class="string">"pre-setup"</span>         : <span class="string">"在setup执行前 运行的 命令或脚本"</span>,</span><br><span class="line"><span class="string">"post-setup"</span>        : <span class="string">"在代码clone完成后 执行的命令或脚本"</span>,</span><br><span class="line"><span class="string">"pre-deploy"</span>        : <span class="string">"pm2 startOrRestart ecosystem.json --env production"</span>,</span><br><span class="line"><span class="string">"post-deploy"</span>       : <span class="string">"pm2 startOrRestart ecosystem.json --env production"</span>,</span><br><span class="line"><span class="string">"pre-deploy-local"</span>  : <span class="string">"echo 'This is a local executed command'"</span></span><br><span class="line"><span class="comment"># 操作多台服务器，只需修改host,单台就一个</span></span><br><span class="line"><span class="string">"host"</span> : [<span class="string">"212.83.163.1"</span>, <span class="string">"212.83.163.2"</span>, <span class="string">"212.83.163.3"</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------报错解决---------------------------</span></span><br><span class="line">npm: <span class="built_in">command</span> not found</span><br><span class="line">post-deploy hook failed</span><br><span class="line">Deploy failed</span><br><span class="line"><span class="comment"># pm2 部署时，出现上面错误，但运行 npm -v都是正常的，原因是 pm2 的配置文件，按照下面步骤即可解</span></span><br><span class="line"><span class="comment"># 1、打开终端</span></span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ nano .bashrc</span><br><span class="line"><span class="comment"># 2、把下面内容注释掉</span></span><br><span class="line"><span class="comment">#If not running interactively, don 't do anything</span></span><br><span class="line"><span class="keyword">case</span> $ - <span class="keyword">in</span></span><br><span class="line">*</span><br><span class="line">i * );;</span><br><span class="line">*) <span class="built_in">return</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="comment"># 3、更新环境变量</span></span><br><span class="line">$ <span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><h3 id="4-6-PM2-开启文件服务">4.6 PM2 开启文件服务</h3><blockquote><p><a href="https://pm2.keymetrics.io/docs/usage/expose/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/expose/">https://pm2.keymetrics.io/docs/usage/expose/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------1---------------------------</span></span><br><span class="line"><span class="comment"># 假设 ~/test目录下有一个 test.txt文件</span></span><br><span class="line"><span class="comment"># 开启文件服务器，默认端口是8080，可以根据需要修改</span></span><br><span class="line">pm2 serve ~/<span class="built_in">test</span> 8080</span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://localhost:8080/test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------2---------------------------</span></span><br><span class="line"><span class="comment"># 假设 ~/test目录下有一个 test.txt文件</span></span><br><span class="line"><span class="comment"># 1、切换到共享目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 2、新建配置文件 : ecosystem.config.js</span></span><br><span class="line">pm2 init simple</span><br><span class="line"><span class="comment"># 3、修改配置文件为如下内容</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    apps: [&#123;</span><br><span class="line">        name: <span class="string">"serve"</span>,</span><br><span class="line">        script: <span class="string">"serve"</span>,</span><br><span class="line">        env: &#123;</span><br><span class="line">            PM2_SERVE_PATH: <span class="string">'.'</span>,</span><br><span class="line">            PM2_SERVE_PORT: 8080</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 4、启动服务</span></span><br><span class="line">pm2 start ecosystem.config.js </span><br><span class="line">  <span class="comment">#或者</span></span><br><span class="line">pm2 start</span><br><span class="line"><span class="comment"># 5、浏览器访问</span></span><br><span class="line">http://localhost:8080/test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------3---------------------------</span></span><br><span class="line"><span class="comment"># 假设共享目录有index.html 文件，文件内容如下。访问共享目录时，默认打开 index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;pm2 serve&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Welcome&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;这是 pm2 服务器！&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="comment"># ---------命令行启动</span></span><br><span class="line"><span class="comment"># 1、切换到共享目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 2、启动服务</span></span><br><span class="line">pm2 serve --spa</span><br><span class="line"><span class="comment"># 3、访问</span></span><br><span class="line">http://localhost:8080</span><br><span class="line"><span class="comment"># ---------配置文件启动</span></span><br><span class="line"><span class="comment"># 1、切换到共享目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 2、新建配置文件 : ecosystem.config.js</span></span><br><span class="line">pm2 init simple</span><br><span class="line"><span class="comment"># 3、修改配置文件为如下内容</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    apps: [&#123;</span><br><span class="line">        name: <span class="string">"serve"</span>,</span><br><span class="line">        script: <span class="string">"serve"</span>,</span><br><span class="line">        env: &#123;</span><br><span class="line">            PM2_SERVE_PATH: <span class="string">'.'</span>,</span><br><span class="line">            PM2_SERVE_PORT: 8080,</span><br><span class="line">            PM2_SERVE_SPA: <span class="string">'true'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 4、启动服务</span></span><br><span class="line">pm2 start ecosystem.config.js </span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">pm2 start</span><br><span class="line"><span class="comment"># 5、浏览器访问</span></span><br><span class="line">http://localhost:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------4---------------------------</span></span><br><span class="line"><span class="comment"># 使用用户名和密码来访问服务</span></span><br><span class="line"><span class="comment"># --------------命令行启动</span></span><br><span class="line"><span class="comment"># 1、切换到共享目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 2、启动服务，用户名：username，密码：password</span></span><br><span class="line">pm2 serve --basic-auth-username username --basic-auth-password password</span><br><span class="line"><span class="comment"># 3、浏览器访问（需要输入上面用户名和密码）</span></span><br><span class="line">http://localhost:8080</span><br><span class="line"><span class="comment"># --------------配置文件启动</span></span><br><span class="line"><span class="comment"># 1、切换到共享目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 2、新建配置文件 : ecosystem.config.js</span></span><br><span class="line">pm2 init simple</span><br><span class="line"><span class="comment"># 3、修改配置文件为如下内容</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    apps: [&#123;</span><br><span class="line">        name: <span class="string">"serve"</span>,</span><br><span class="line">        script: <span class="string">"serve"</span>,</span><br><span class="line">        env: &#123;</span><br><span class="line">            PM2_SERVE_PATH: <span class="string">'.'</span>,</span><br><span class="line">            PM2_SERVE_PORT: 8080,</span><br><span class="line">            PM2_SERVE_BASIC_AUTH: <span class="string">'true'</span>,</span><br><span class="line">            PM2_SERVE_BASIC_AUTH_USERNAME: <span class="string">'username'</span>,</span><br><span class="line">            PM2_SERVE_BASIC_AUTH_PASSWORD: <span class="string">'password'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 4、启动服务</span></span><br><span class="line">pm2 start ecosystem.config.js </span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">pm2 start</span><br><span class="line"><span class="comment"># 5、浏览器访问（需要输入上面用户名和密码）</span></span><br><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><h2 id="5、Docker-集成">5、Docker 集成</h2><blockquote><p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启，这是另一种监控后台的方式，详情可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/122905098" target="_blank" rel="noopener" title="Supervisor+Dockerfile编译jdk镜像">Supervisor+Dockerfile编译jdk镜像</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在容器中安装 pm2</span></span><br><span class="line">RUN npm install pm2 -g</span><br><span class="line"><span class="comment"># 直接启动应用</span></span><br><span class="line">CMD [<span class="string">"pm2-runtime"</span>, <span class="string">"app.js"</span>]</span><br><span class="line"><span class="comment"># 通过配置文件启动</span></span><br><span class="line">CMD [<span class="string">"pm2-runtime"</span>, <span class="string">"ecosystem.config.js"</span>]</span><br></pre></td></tr></table></figure><p>**注意：在容器中使用 pm2 启动应用时，要使用 <strong><strong><code>pm2-runtime</code></strong></strong> 而不是 <strong><strong><code>pm2 start</code></strong></strong>, 因为：**pm2 是默认后台启动的， docker 感知不到。CMD 命令执行完成，docker 容器就结束了。 所以直接使用 <code>node app.js</code> 启动应用后，应用能一直在容器中保持运行。 pm2 以后台形式运行，CMD 命令执行完成，docker 就认为可以退出了。所以需要使用 <code>pm2-runtime</code> 来进行处理。<code>pm2-runtime</code> 是为 Docker 容器设计的，它将应用程序置于前台，从而使容器保持运行状态</p><hr><p><a href="https://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noopener" title="https://pm2.keymetrics.io/docs/usage/quick-start/">https://pm2.keymetrics.io/docs/usage/quick-start/</a></p><p><a href="https://www.jianshu.com/p/02af8c5261e5" target="_blank" rel="noopener" title="https://www.jianshu.com/p/02af8c5261e5">https://www.jianshu.com/p/02af8c5261e5</a></p><p><a href="https://blog.csdn.net/leonnew/article/details/121989900" target="_blank" rel="noopener" title="https://blog.csdn.net/leonnew/article/details/121989900">https://blog.csdn.net/leonnew/article/details/121989900</a></p><p><a href="https://blog.csdn.net/fanlehai/article/details/121014685" target="_blank" rel="noopener" title="https://blog.csdn.net/fanlehai/article/details/121014685">https://blog.csdn.net/fanlehai/article/details/121014685</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、PM2概述&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;进程管理主要是指创建，终止和监控进程。进程管理器主要是用来确保你的应用在启动后能够保持在线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pm2 是 nodejs 的进程管理器，默认支持负载均衡，能够守护进程。还支持查看应用运行时的性能，资源占用情况等&lt;/p&gt;
&lt;h2 id=&quot;2、普通-node-进程的缺陷&quot;&gt;2、普通 node 进程的缺陷&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;普通启动方式：node index.js，关闭终端就结束进程&lt;/li&gt;
&lt;li&gt;node 进程挂掉和“僵死”：
&lt;ul&gt;
&lt;li&gt;进程挂掉大概有以下几种原因：
&lt;ul&gt;
&lt;li&gt;内存泄漏：内存一点点积累到达临界值爆掉&lt;/li&gt;
&lt;li&gt;死循环导致内存突增爆掉&lt;/li&gt;
&lt;li&gt;死循环导致磁盘写爆&lt;/li&gt;
&lt;li&gt;被动被kill，主动退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“僵死”大概有以下几种可能:
&lt;ul&gt;
&lt;li&gt;有某个非常耗时的cpu操作正在执行&lt;/li&gt;
&lt;li&gt;写了个死循环（死循环不一定会导致服务挂掉，有可能只会cpu飙升，让服务处于假死状态）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管发生上面哪种情况，都会造成服务的不可访问，需要等我们自己去发现问题后，然后重启应用。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.shawncoding.top/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://blog.shawncoding.top/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>iptables防火墙详解</title>
    <link href="https://blog.shawncoding.top/posts/db8c3dcd.html"/>
    <id>https://blog.shawncoding.top/posts/db8c3dcd.html</id>
    <published>2023-04-07T13:42:54.000Z</published>
    <updated>2023-04-07T13:49:08.173Z</updated>
    
    <content type="html"><![CDATA[<h1>一、iptables概念</h1><h2 id="1、防火墙基础">1、防火墙基础</h2><h3 id="1-1-防火墙概念">1.1 防火墙概念</h3><p>从逻辑上讲，防火墙可以大体分为<strong>主机防火墙和网络防火墙</strong>。网络防火墙和主机防火墙并不冲突，可以理解为，网络防火墙主外（集体）， 主机防火墙主内（个人）</p><ul><li>主机防火墙：针对于单个主机进行防护</li><li>网络防火墙：往往处于网络入口或边缘，针对于网络入口进行防护，服务于防火墙背后的本地局域网</li></ul><p>从物理上讲，防火墙可以分为<strong>硬件防火墙和软件防火墙</strong></p><ul><li>硬件防火墙：在硬件级别实现部分防火墙功能，另一部分功能基于软件实现，性能高，成本高</li><li>软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙，性能低，成本低</li></ul><p>Linux防火墙体系主要工作在网络层，针对TCP/IP数据包实施过滤和限制，属于典型的包过滤防火墙（也称网络层防火墙）；Linux防火墙体系基于内核编码实现，具有非常稳定的性能和高效率，因此被广泛的应用</p><a id="more"></a><h3 id="1-2-Netfilter和iptables的区别">1.2 Netfilter和iptables的区别</h3><p><strong>Netfilter</strong>：指的是Linux内核中实现包过滤防火墙的内部结构，不以程序或文件的形式存在，属于“内核态”（KernelSpace，又称内核空间）的防火墙功能体系(filter是过滤器的意思，netfilter即网络层过滤)；Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有网络地址转换(Network Address Translate)、数据包内容修改以及数据包过滤的防火墙功能</p><p><strong>Iptables</strong>：指的是用来管理Linux防火墙的命令程序，通常位于<code>/sbin/iptables</code>，属于“用户态”（UserSpace，又称用户空间）的防火墙管理体系(iptables: IP信息包过滤系统)。虽然我们使用<code>service iptables start</code>启动iptables服务，但是其实准确的来说，iptables并没有一个守护进程，所以并不能算是真正意义上的服务，而应该算是内核提供的功能</p><h2 id="2、Iptables的表、链结构">2、Iptables的表、链结构</h2><blockquote><p>包过滤主要是网络层，针对IP数据包；体现在对包内的IP地址、端口等信息的处理上；而iptables作用是为包过滤机制的实现提供规则（或策略），通过各种不同的规则，告诉netfilter对来自某些源、前往某些目的或具有某些协议特征的数据包应该如何处理。iptables 默认维护着 4 个表和 5 个链，所有的防火墙策略规则都被分别写入这些表与链中</p></blockquote><h3 id="2-1-规则链">2.1 规则链</h3><p>规则链上可能不止有一条规则，而是有很多条规则，当我们把这些规则串到一个链条上的时候，就形成了链,ip请求将这条链上的所有规则匹配一遍，如果有符合条件的规则，则执行规则对应的动作。</p><p><strong>规则的作用是对数据包进行过滤或处理；链的作用是容纳各种防火墙规则；链的分类依据是处理数据包的不同时机</strong></p><p><img src="http://qnypic.shawncoding.top/blog/image_WzlkmxKa6T.png" alt></p><p>总共有五种5种规则链，分别是</p><ul><li>INPUT：处理入站数据包</li><li>OUTPUT：处理出站数据包</li><li>FORWARD：处理转发数据包</li><li>POSTROUTING链：在进行路由选择后处理数据包（对数据链进行源地址修改转换）</li><li>PREROUTING链：在进行路由选择前处理数据包（做目标地址转换）</li></ul><p><strong>INPUT、OUTPUT链主要用在&quot;主机型防火墙&quot;中，即主要针对服务器本机进行保护的防火墙；而FORWARD、PREROUTING、POSTROUTING链多用在&quot;网络型防火墙&quot;中</strong></p><h3 id="2-2-规则表">2.2 规则表</h3><p><strong>表的作用是容纳各种规则链；表的划分依据是防火墙规则的作用相似</strong>，默认包括4个规则表</p><ul><li><p><strong>raw表</strong></p><p>确定是否对该数据包进行状态跟踪以及处理异常，表内包含两个链：OUTPUT、PREROUTING</p></li><li><p>mangle表</p><p>为数据包的TOS（服务类型）、TTL（生命周期）值，或者为数据包设置Mark标记，以实现流量整形、策略路由等高级应用。其对应iptable_mangle，表内包含五个链：PREROUTING、POSTROUTING、INPUT、OUTPUT、FORWARD</p></li><li><p><strong>nat表</strong></p><p>修改数据包中的源、目标IP地址或端口；其对应的模块为iptable_nat，表内包括三个链：PREROUTING、POSTROUTING、OUTPUT(centos7中还有INPUT，centos6中没有)</p><p>PREROUTING链 – 处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址（destination ip address），通常用于DNAT(destination NAT)。POSTROUTING链 – 处理即将离开本机的数据包。它会转换数据包中的源IP地址（source ip address），通常用于SNAT（source NAT）。OUTPUT链 – 处理本机产生的数据包</p></li><li><p><strong>filter表</strong></p><p>确定是否放行该数据包（过滤）；其对应的内核模块为iptable_filter，表内包含三个链：INPUT、FORWARD、OUTPUT</p><p>INPUT链 – 处理来自外部的数据。OUTPUT链 – 处理向外发送的数据。FORWARD链 – 将数据转发到本机的其他网卡设备上。</p></li></ul><p><img src="http://qnypic.shawncoding.top/blog/rwEM7VRru.png" alt></p><h3 id="2-3-规则表之间的顺序">2.3 规则表之间的顺序</h3><ul><li><p>raw-&gt;mangle-&gt;nat-&gt;filter</p></li><li><p>规则链之间的顺序</p><ul><li>入站：<strong>PREROUTING-&gt;INPUT</strong></li><li>出站：OUTPUT-&gt;POSTROUTING</li><li>转发：PREROUTING-&gt;FORWARD-&gt;POSTROUTING</li></ul></li><li><p>规则链内的匹配顺序</p><p>按顺序依次检查，匹配即停止（LOG策略例外），若找不到相匹配的规则，则按该链的默认策略处理</p></li><li><p>表和链的关系：表下面是链，表容纳链</p></li></ul><p><img src="http://qnypic.shawncoding.top/blog/ziB0kUlrCp.png" alt></p><h2 id="3、规则">3、规则</h2><blockquote><p>根据指定的匹配条件来尝试匹配每个流经此处的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理</p></blockquote><h3 id="3-1-匹配条件">3.1 匹配条件</h3><p><strong>基本匹配条件</strong></p><ul><li>源地址Source IP，目标地址 Destination IP</li></ul><p>扩展匹配条件</p><ul><li>除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。</li><li>源端口Source Port, 目标端口Destination Port</li></ul><h3 id="3-2-处理动作">3.2 处理动作</h3><blockquote><p>处理动作在iptables中被称为target，动作也可以分为基本动作和扩展动作。此处列出一些常用的动作</p></blockquote><p><strong>ACCEPT</strong>：允许数据包通过</p><p><strong>DROP</strong>：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应</p><p><strong>REJECT</strong>：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息</p><p><strong>SNAT</strong>：源地址转换，解决内网用户用同一个公网地址上网的问题</p><p><strong>MASQUERADE</strong>：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上</p><p><strong>DNAT</strong>：目标地址转换</p><p><strong>REDIRECT</strong>：在本机做端口映射</p><p><strong>LOG</strong>：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配</p><h1>二、iptables规则管理</h1><h2 id="1、iptables规则操作">1、iptables规则操作</h2><h3 id="1-1-iptables信息查询">1.1 iptables信息查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter负责过滤功能，比如允许哪些IP地址访问，拒绝哪些IP地址访问，允许访问哪些端口，禁止访问哪些端口</span></span><br><span class="line"><span class="comment"># filter表会根据我们定义的规则进行过滤，filter表应该是我们最常用到的表了</span></span><br><span class="line"><span class="comment"># 下面两种都可以</span></span><br><span class="line"><span class="comment"># 默认不加-t就是指的filter表</span></span><br><span class="line">iptables -t filter --list</span><br><span class="line">iptables -t raw -L</span><br><span class="line">iptables -t mangle -L</span><br><span class="line">iptables -t nat -L</span><br><span class="line"></span><br><span class="line"><span class="comment"># -v是显示详细的信息，列出INPUT链的详细信息</span></span><br><span class="line">iptables -vL INPUT</span><br><span class="line"><span class="comment"># 不让IP进行反解</span></span><br><span class="line">iptables -nvL INPUT</span><br><span class="line"><span class="comment"># 显示规则的序号，--line-numbers选项表示显示规则的序号，注意，此选项为长选项，不能与其他短选项合并，不过此选项可以简写为--line</span></span><br><span class="line">iptables --line-numbers -t 表名 -L</span><br><span class="line"><span class="comment"># 表示查看表中的所有规则，并且显示更详细的信息(-v选项)，不过，计数器中的信息显示为精确的计数值，而不是显示为经过可读优化的计数值，-x选项表示显示计数器的精确值</span></span><br><span class="line">iptables -t 表名 -v -x -L</span><br><span class="line"><span class="comment"># 可以合起来，不过-L在最后</span></span><br><span class="line">iptables --line -t filter -nvxL INPUT</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------显示界面解释-----------------------</span></span><br><span class="line"><span class="comment"># Chain INPUT (policy ACCEPT 170M packets, 33G bytes)</span></span><br><span class="line"><span class="comment"># policy表示当前链的默认策略，policy ACCEPT表示INPUT的链的默认动作为ACCEPT，换句话说就是，默认接受通过INPUT关卡的所有请求，所以我们在配置INPUT链的具体规则时，应该将需要拒绝的请求配置到规则中</span></span><br><span class="line"><span class="comment"># 说白了就是”黑名单”机制，默认所有人都能通过，只有指定的人不能通过，当我们把INPUT链默认动作设置为接受(ACCEPT)，就表示所有人都能通过这个关卡，此时就应该在具体的规则中指定需要拒绝的请求，就表示只有指定的人不能通过这个关卡，这就是黑名单机制</span></span><br><span class="line"><span class="comment"># packets表示当前链（上例为INPUT链）默认策略匹配到的包的数量，0 packets表示默认策略匹配到0个包。</span></span><br><span class="line"><span class="comment"># bytes表示当前链默认策略匹配到的所有包的大小总和。</span></span><br><span class="line"><span class="comment"># 其实，我们可以把packets与bytes称作”计数器”，上图中的计数器记录了默认策略匹配到的报文数量与总大小，”计数器”只会在使用-v选项时，才会显示出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pkts:对应规则匹配到的报文的个数。</span></span><br><span class="line"><span class="comment"># bytes:对应匹配到的报文包的大小总和。</span></span><br><span class="line"><span class="comment"># target:规则对应的target，往往表示规则对应的”动作”，即规则匹配成功后需要采取的措施。</span></span><br><span class="line"><span class="comment"># prot:表示规则对应的协议，是否只针对某些协议应用此规则。</span></span><br><span class="line"><span class="comment"># opt:表示规则对应的选项。</span></span><br><span class="line"><span class="comment"># in:表示数据包由哪个接口(网卡)流入，即从哪个网卡来。</span></span><br><span class="line"><span class="comment"># out:表示数据包将由哪个接口(网卡)流出，即到哪个网卡去。</span></span><br><span class="line"><span class="comment"># source:表示规则对应的源头地址，可以是一个IP，也可以是一个网段。</span></span><br><span class="line"><span class="comment"># destination:表示规则对应的目标地址。可以是一个IP，也可以是一个网段</span></span><br></pre></td></tr></table></figure><h3 id="1-2-规则添加">1.2 规则添加</h3><p>注意：添加规则时，<strong>规则的顺序非常重要</strong>，哪个先匹配就执行哪个，后面就算有一模一样的也不会执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在指定表的指定链的尾部添加一条规则，-A选项表示在对应链的末尾添加规则，省略-t选项时，表示默认操作filter表中的规则</span></span><br><span class="line">iptables -t 表名 -A 链名 匹配条件 -j 动作</span><br><span class="line"><span class="comment"># 举例，表示丢弃来自192.168.1.146的数据包</span></span><br><span class="line"><span class="comment"># 使用-s选项，指明”匹配条件”中的”源地址”，即如果报文的源地址属于-s对应的地址，那么报文则满足匹配条件，-s为source之意，表示源地址</span></span><br><span class="line">iptables -t filter -A INPUT -s 192.168.1.146 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定表的指定链的首部添加一条规则，-I选型表示在对应链的开头添加规则</span></span><br><span class="line">iptables -t 表名 -I 链名 匹配条件 -j 动作</span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定表的指定链的指定位置添加一条规则</span></span><br><span class="line">iptables -t 表名 -I 链名 规则序号 匹配条件 -j 动作</span><br><span class="line">iptables -t filter -I INPUT 5 -s 192.168.1.146 -j REJECT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置指定表的指定链的默认策略（默认动作），并非添加规则。</span></span><br><span class="line">iptables -t 表名 -P 链名 动作</span><br><span class="line"><span class="comment"># 表示将filter表中FORWARD链的默认策略设置为ACCEPT</span></span><br><span class="line">iptables -t filter -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><h3 id="1-3-规则删除">1.3 规则删除</h3><p>注意：如果没有保存规则，删除规则时请慎重</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照规则序号删除规则，删除指定表的指定链的指定规则，-D选项表示删除对应链中的规则</span></span><br><span class="line">iptables -nvL --line-numbers</span><br><span class="line">iptables -t 表名 -D 链名 规则序号</span><br><span class="line"><span class="comment"># 表示删除filter表中INPUT链中序号为3的规则</span></span><br><span class="line">iptables -t filter -D INPUT 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照具体的匹配条件与动作删除规则，删除指定表的指定链的指定规则</span></span><br><span class="line">iptables -t 表名 -D 链名 匹配条件 -j 动作</span><br><span class="line"><span class="comment"># 表示删除filter表中INPUT链中源地址为192.168.1.146并且动作为DROP的规则</span></span><br><span class="line">iptables -t filter -D INPUT -s 192.168.1.146 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定表的指定链中的所有规则，-F选项表示清空对应链中的规则，执行时需三思</span></span><br><span class="line">iptables -t 表名 -F 链名</span><br><span class="line">iptables -t filter -F INPUT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定表中的所有规则，执行时需三思</span></span><br><span class="line">iptables -t 表名 -F</span><br><span class="line">iptables -t filter -F</span><br></pre></td></tr></table></figure><h3 id="1-4-规则修改">1.4 规则修改</h3><p>注意：如果使用-R选项修改规则中的动作，那么必须指明原规则中的原匹配条件，例如源IP，目标IP等，如果不写明会变成默认，建议直接新增后删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改指定表中指定链的指定规则，-R选项表示修改对应链中的规则，使用-R选项时要同时指定对应的链以及规则对应的序号，并且规则中原本的匹配条件不可省略</span></span><br><span class="line">iptables -t 表名 -R 链名 规则序号 规则原本的匹配条件 -j 动作</span><br><span class="line"><span class="comment"># 修改filter表中INPUT链的第3条规则，将这条规则的动作修改为ACCEPT， -s 192.168.1.146为这条规则中原本的匹配条件，如果省略此匹配条件，修改后的规则中的源地址可能会变为0.0.0.0/0</span></span><br><span class="line">iptables -t filter -R INPUT 3 -s 192.168.1.146 -j ACCEPT</span><br><span class="line"><span class="comment"># 其他修改规则的方法：先通过编号删除规则，再在原编号位置添加一条规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改指定表的指定链的默认策略（默认动作），并非修改规则，可以使用如下命令</span></span><br><span class="line">iptables -t 表名 -P 链名 动作</span><br><span class="line"><span class="comment"># 将filter表中FORWARD链的默认策略修改为ACCEPT</span></span><br><span class="line">iptables -t filter -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><h3 id="1-5-规则保存">1.5 规则保存</h3><p>在默认的情况下，我们对&quot;防火墙&quot;所做出的修改都是&quot;临时的&quot;，换句话说就是，当重启iptables服务或者重启服务器以后，我们平常添加的规则或者对规则所做出的修改都将消失，为了防止这种情况的发生，我们需要将规则&quot;保存&quot;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos6中，使用"service iptables save"命令即可保存规则，规则默认保存在/etc/sysconfig/iptables文件中</span></span><br><span class="line">service iptables save</span><br><span class="line"><span class="comment"># 如果误操作了规则，但是并没有保存，那么使用service iptables restart命令重启iptables以后，规则会再次回到上次保存/etc/sysconfig/iptables文件时的模样</span></span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos7中，已经不再使用init风格的脚本启动服务，而是使用unit文件</span></span><br><span class="line"><span class="comment"># 使用firewall替代了原来的iptables service，不过不用担心，我们只要通过yum源安装iptables与iptables-services即可（iptables一般会被默认安装，但是iptables-services在centos7中一般不会被默认安装）</span></span><br><span class="line"><span class="comment">#配置好yum源以后安装iptables-service</span></span><br><span class="line">yum install -y iptables-services</span><br><span class="line"><span class="comment">#停止firewalld</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">#禁止firewalld自动启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#启动iptables</span></span><br><span class="line">systemctl start iptables</span><br><span class="line"><span class="comment">#将iptables设置为开机自动启动，以后即可通过iptables-service控制iptables服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables</span><br><span class="line"><span class="comment"># 上述配置过程只需一次，以后即可在centos7中愉快的使用service iptables save命令保存iptables规则了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后是ubuntu的安装</span></span><br><span class="line"><span class="comment"># 首先安装iptables-persistent工具</span></span><br><span class="line">sudo apt install iptables-persistent</span><br><span class="line"><span class="comment"># 每当设置了新的iptables规则后，使用如下命令保存规则即可，规则会根据ipv4和ipv6分别保存在了/etc/iptables/rules.v4和/etc/iptables/rules.v6文件中</span></span><br><span class="line">netfilter-persistent  save</span><br><span class="line"><span class="comment"># 由于 ipt­a­bles-per­sis­tent 在安装时已经把它作为一个服务设置为开机启动了，它在开机后会自动加载已经保存的规则，所以也就达到了永久保存的目的</span></span><br></pre></td></tr></table></figure><p>最后是通用的方法，使用另一种方法保存iptables规则，就是使用<code>iptables-save</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用iptables-save并不能保存当前的iptables规则，但是可以将当前的iptables规则以”保存后的格式”输出到屏幕上</span></span><br><span class="line"><span class="comment"># 我们可以使用iptables-save命令，再配合重定向，将规则重定向到/etc/sysconfig/iptables文件中即可</span></span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以将/etc/sysconfig/iptables中的规则重新载入为当前的iptables规则，但是注意，未保存入/etc/sysconfig/iptables文件中的修改将会丢失或者被覆盖</span></span><br><span class="line"><span class="comment"># 使用iptables-restore命令可以从指定文件中重载规则</span></span><br><span class="line">iptables-restore &lt; /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><h2 id="2、iptables匹配条件">2、iptables匹配条件</h2><h3 id="2-1-常用基本匹配条件">2.1 常用基本匹配条件</h3><p>当规则中同时存在多个匹配条件时，多个条件之间默认存在&quot;与&quot;的关系，即报文必须同时满足所有条件，才能被规则匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------匹配条件：目标IP地址</span></span><br><span class="line"><span class="comment"># -s用于匹配报文的源地址,可以同时指定多个源地址，每个IP之间用逗号隔开，也可以指定为一个网段</span></span><br><span class="line"><span class="comment"># 逗号两侧均不能包含空格，多个IP之间必须与逗号相连</span></span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.111,192.168.1.118 -j DROP</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.0/24 -j ACCEPT</span><br><span class="line"><span class="comment"># 只要发往本机的报文的源地址不是192.168.1.146，就接受报文</span></span><br><span class="line">iptables -t filter -I INPUT ! -s 192.168.1.0/24 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># -d用于匹配报文的目标地址,可以同时指定多个目标地址，每个IP之间用逗号隔开，也可以指定为一个网段</span></span><br><span class="line"><span class="comment"># 所有IP发送往111,118的报文都将被丢弃</span></span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.1.111,192.168.1.118 -j DROP</span><br><span class="line">iptables -t filter -I INPUT -d 192.168.1.0/24 -j ACCEPT</span><br><span class="line"><span class="comment"># 不管是-s选项还是-d选项，取反操作与同时指定多个IP的操作不能同时使用</span></span><br><span class="line">iptables -t filter -I INPUT ! -d 192.168.1.0/24 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------匹配条件：协议类型</span></span><br><span class="line"><span class="comment"># -p用于匹配报文的协议类型,可以匹配的协议类型tcp、udp、udplite、icmp、esp、ah、sctp等（centos7中还支持icmpv6、mh）</span></span><br><span class="line">iptables -t filter -I INPUT -p tcp -s 192.168.1.146 -j ACCEPT</span><br><span class="line">iptables -t filter -I INPUT ! -p udp -s 192.168.1.146 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------匹配条件：网卡接口</span></span><br><span class="line"><span class="comment"># -i用于匹配报文是从哪个网卡接口流入本机的，由于匹配条件只是用于匹配报文流入的网卡</span></span><br><span class="line"><span class="comment"># 所以在OUTPUT链与POSTROUTING链中不能使用此选项</span></span><br><span class="line"><span class="comment"># 拒绝由网卡eth4流入的ping请求报文</span></span><br><span class="line">iptables -t filter -I INPUT -p icmp -i eth4 -j DROP</span><br><span class="line">iptables -t filter -I INPUT -p icmp ! -i eth4 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># -o用于匹配报文将要从哪个网卡接口流出本机，于匹配条件只是用于匹配报文流出的网卡，所以在INPUT链与PREROUTING链中不能使用此选项。</span></span><br><span class="line">iptables -t filter -I OUTPUT -p icmp -o eth4 -j DROP</span><br><span class="line">iptables -t filter -I OUTPUT -p icmp ! -o eth4 -j DROP</span><br></pre></td></tr></table></figure><h3 id="2-2-扩展匹配条件-基本">2.2 扩展匹配条件(基本)</h3><blockquote><p>基本匹配条件我们可以直接使用，而如果想要使用扩展匹配条件，则需要依赖一些扩展模块，或者说在使用扩展匹配条件之前，需要指定相应的扩展模块，使用-m 来选择扩展模块</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用的扩展匹配条件,tcp扩展模块</span></span><br><span class="line"><span class="comment"># -m tcp表示使用tcp扩展模块，–dport表示tcp扩展模块中的一个扩展匹配条件，可用于匹配报文的目标端口。</span></span><br><span class="line"><span class="comment"># 注意，-p tcp与 -m tcp并不冲突，-p用于匹配报文的协议，-m 用于指定扩展模块的名称，正好，这个扩展模块也叫tcp，那就可以省略</span></span><br><span class="line"><span class="comment"># 如果-p对应的值为udp，那么默认调用的扩展模块就为-m udp</span></span><br><span class="line"><span class="comment"># -p tcp -m tcp –sport 用于匹配tcp协议报文的源端口，可以使用冒号指定一个连续的端口范围</span></span><br><span class="line"><span class="comment"># -p tcp -m tcp –dport 用于匹配tcp协议报文的目标端口，可以使用冒号指定一个连续的端口范围</span></span><br><span class="line"><span class="comment">#示例如下</span></span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp --sport 22 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 22:25 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport :22 -j REJECT</span><br><span class="line"><span class="comment"># 匹配80号端口以及其以后的所有端口（直到65535）</span></span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp --dport 80: -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp ! --sport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># multiport扩展模块</span></span><br><span class="line"><span class="comment"># -m multiport –dports 22,36,80表示使用了multiport扩展模块的–dports扩展条件，以同时指定了多个离散的端口，每个端口之间用逗号隔开</span></span><br><span class="line"><span class="comment"># -m multiport是不能省略的，如果你省略了-m multiport，就相当于在没有指定扩展模块的情况下，使用了扩展条件（”–dports”），那么上例中，iptables会默认调用”-m tcp”，但是，”–dports扩展条件”并不属于”tcp扩展模块”,而是属于”multiport扩展模块”，所以，这时就会报错</span></span><br><span class="line"><span class="comment"># -p tcp -m multiport –sports 用于匹配报文的源端口，可以指定离散的多个端口号,端口之间用”逗号”隔开</span></span><br><span class="line"><span class="comment"># -p udp -m multiport –dports 用于匹配报文的目标端口，可以指定离散的多个端口号，端口之间用”逗号”隔开</span></span><br><span class="line"><span class="comment">#示例如下</span></span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.1.146 -p udp -m multiport --sports 137,138 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 22,80 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport ! --dports 22,80 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 80:88 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m multiport --dports 22,80:88 -j REJECT</span><br></pre></td></tr></table></figure><h3 id="2-3-扩展匹配条件-其他">2.3 扩展匹配条件(其他)</h3><ul><li><strong>iprange模块</strong></li></ul><blockquote><p>-s选项与-d选项并不能一次性的指定一段连续的IP地址范围，如果我们需要指定一段连续的IP地址范围，可以使用iprange扩展模块。使用iprange扩展模块可以指定&quot;一段连续的IP地址范围&quot;，用于匹配报文的源地址或者目标地址</p></blockquote><p>—src-range：指定连续的源地址范围</p><p>—dst-range：指定连续的目标地址范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例</span></span><br><span class="line">iptables -t filter -I INPUT -m iprange --src-range 192.168.1.127-192.168.1.146 -j DROP</span><br><span class="line">iptables -t filter -I OUTPUT -m iprange --dst-range 192.168.1.127-192.168.1.146 -j DROP</span><br><span class="line">iptables -t filter -I INPUT -m iprange ! --src-range 192.168.1.127-192.168.1.146 -j DROP</span><br></pre></td></tr></table></figure><ul><li><strong>string模块</strong></li></ul><blockquote><p>使用string扩展模块，可以指定要匹配的字符串，如果报文中包含对应的字符串，则符合匹配条件，比如，如果报文中包含字符”OOXX”，我们就丢弃当前报文</p></blockquote><p>—algo：指定对应的匹配算法，可用算法为bm、kmp，此选项为必需选项。</p><p>—string：指定需要匹配的字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -m string表示使用string模块，–algo bm表示使用bm算法去匹配指定的字符串，–string"OOXX"则表示我们想要匹配的字符串为"OOXX"</span></span><br><span class="line">iptables -t filter -I INPUT -p tcp --sport 80 -m string --algo bm --string <span class="string">"OOXX"</span> -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -p tcp --sport 80 -m string --algo bm --string <span class="string">"OOXX"</span> -j REJECT</span><br></pre></td></tr></table></figure><ul><li><strong>time模块</strong></li></ul><blockquote><p>我们可以通过time扩展模块，根据时间段区匹配报文，如果报文到达的时间在指定的时间范围以内，则符合匹配条件</p></blockquote><p>—timestart：用于指定时间范围的开始时间，不可取反</p><p>—timestop：用于指定时间范围的结束时间，不可取反</p><p>—weekdays：用于指定”星期几”，可取反</p><p>—monthdays：用于指定”几号”，可取反</p><p>—datestart：用于指定日期范围的开始日期，不可取反</p><p>—datestop：用于指定日期范围的结束时间，不可取反</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "-m time"表示使用time扩展模块，–timestart选项用于指定起始时间，–timestop选项用于指定结束时间</span></span><br><span class="line"><span class="comment"># 每天早上9点到下午6点不能看网页</span></span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80 -m time --timestart 09:00:00 --timestop 19:00:00 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 443 -m time --timestart 09:00:00 --timestop 19:00:00 -j REJECT</span><br><span class="line"><span class="comment"># 只有周六日不能看网页</span></span><br><span class="line"><span class="comment"># 使用–weekdays选项可以指定每个星期的具体哪一天，可以同时指定多个，用逗号隔开，除了能够数字表示”星期几”,还能用缩写表示，例如：Mon, Tue, Wed, Thu, Fri, Sat, Sun</span></span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --weekdays 6,7 -j REJECT</span><br><span class="line"><span class="comment"># 具体指定的每个月的哪一天</span></span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --monthdays 22,23 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time ! --monthdays 22,23 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --timestart 09:00:00 --timestop 18:00:00 --weekdays 6,7 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --weekdays 5 --monthdays 22,23,24,25,26,27,28 -j REJECT</span><br><span class="line"><span class="comment"># 可以使用–datestart 选项与-datestop选项，指定具体的日期范围</span></span><br><span class="line">iptables -t filter -I OUTPUT -p tcp --dport 80  -m time --datestart 2017-12-24 --datestop 2017-12-27 -j REJECT</span><br></pre></td></tr></table></figure><ul><li><strong>connlimit 模块</strong></li></ul><blockquote><p>使用connlimit扩展模块，可以限制每个IP地址同时链接到server端的链接数量，注意：我们不用指定IP，其默认就是针对&quot;每个客户端IP&quot;，即对单IP的并发连接数限制</p></blockquote><p>—connlimit-above：单独使用此选项时，表示限制每个IP的链接数量。</p><p>—connlimit-mask：此选项不能单独使用，在使用–connlimit-above选项时，配合此选项，则可以针对&quot;某类IP段内的一定数量的IP&quot;进行连接数量的限制，如果不明白可以参考上文的详细解释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限制每个IP地址最多只能占用两个ssh链接远程到server端</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 2 -j REJECT</span><br><span class="line"><span class="comment"># –connlimit-mask 24表示某个C类网段，没错，mask为掩码之意，所以将24转换成点分十进制就表示255.255.255.0</span></span><br><span class="line"><span class="comment"># 一个最多包含254个IP的C类网络中，同时最多只能有20个ssh客户端连接到当前服务器</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 20 --connlimit-mask 24 -j REJECT</span><br><span class="line"><span class="comment"># –connlimit-mask 27表示某个C类网段，通过计算后可以得知，这个网段中最多只能有30台机器（30个IP），这30个IP地址最多只能有10个ssh连接同时连接到服务器端，当然，这样并不能避免某个IP占用所有连接的情况发生</span></span><br><span class="line"><span class="comment"># 假设，报文来自192.168.1.40这个IP，按照掩码为27进行计算，这个IP属于192.168.1.32/27网段，如果192.168.1.40同时占用了10个ssh连接，那么当192.168.1.51这个IP向服务端发起ssh连接请求时，同样会被拒绝，因为192.168.1.51这个IP按照掩码为27进行计算，也是属于192.168.1.32/27网段，所以他们共享这10个连接名额</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -m connlimit --connlimit-above 10 --connlimit-mask 27 -j REJECT</span><br><span class="line"><span class="comment"># 在不使用–connlimit-mask的情况下，连接数量的限制是针对”每个IP”而言的，当使用了–connlimit-mask选项以后，则可以针对”某类IP段内的一定数量的IP”进行连接数量的限制</span></span><br></pre></td></tr></table></figure><ul><li><strong>limit模块</strong></li></ul><blockquote><p>connlimit模块是对连接数量进行限制的，limit模块是对&quot;报文到达速率&quot;进行限制的。用大白话说就是，如果我想要限制单位时间内流入的包的数量，就能用limit模块，我们可以以秒为单位进行限制，也可以以分钟、小时、天作为单位进行限制，比如，限制每秒中最多流入3个包，或者限制每分钟最多流入30个包都可以</p></blockquote><p>—limit-burst：类比”令牌桶”算法，此选项用于指定令牌桶中令牌的最大数量，上文中已经详细的描述了”令牌桶”的概念，方便回顾</p><p>—limit：类比”令牌桶”算法，此选项用于指定令牌桶中生成新令牌的频率，可用时间单位有second、minute 、hour、day</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例 #注意，如下两条规则需配合使用，具体原因上文已经解释过，忘记了可以回顾</span></span><br><span class="line"><span class="comment"># ”–limit-burst”可以指定”空闲时可放行的包的数量”,用了令牌桶的方法，所以前几个都会接收，后面满了才会按照指定速率</span></span><br><span class="line"><span class="comment"># 3/second表示每秒生成3个”令牌”，30/minute表示每分钟生成30个”令牌”</span></span><br><span class="line"><span class="comment"># 外部主机对本机进行ping操作时，本机最多每6秒中放行一个ping包</span></span><br><span class="line">iptables -t filter -I INPUT -p icmp -m <span class="built_in">limit</span> --<span class="built_in">limit</span>-burst 3 --<span class="built_in">limit</span> 10/minute -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -p icmp -j REJECT</span><br></pre></td></tr></table></figure><h3 id="2-4-扩展匹配条件tcp-flags">2.4 扩展匹配条件tcp-flags</h3><p>—tcp-flags指的就是tcp头中的标志位，看来，在使用iptables时，我们可以通过此扩展匹配条件，去匹配tcp报文的头部的标识位，然后根据标识位的实际情况实现访问控制的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复习之前的内容，这个也是tcp模块里的</span></span><br><span class="line"><span class="comment"># --sport用于匹配tcp协议报文的源端口，可以使用冒号指定一个连续的端口范围</span></span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp --sport 22 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp --sport 22:25 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -d 192.168.1.146 -p tcp -m tcp ! --sport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># --dport 用于匹配tcp协议报文的目标端口，可以使用冒号指定一个连续的端口范围</span></span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 22:25 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport :22 -j REJECT</span><br><span class="line">iptables -t filter -I INPUT -s 192.168.1.146 -p tcp -m tcp --dport 80: -j REJECT</span><br><span class="line"></span><br><span class="line"><span class="comment"># --tcp-flags,用于匹配报文的tcp头的标志位</span></span><br><span class="line"><span class="comment"># 匹配到”第一次握手”的报文</span></span><br><span class="line">iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --tcp-flags SYN,ACK,FIN,RST,URG,PSH SYN -j REJECT</span><br><span class="line"><span class="comment"># 匹配tcp头中的第二次握手时的标志位</span></span><br><span class="line">iptables -t filter -I OUTPUT -p tcp -m tcp --sport 22 --tcp-flags SYN,ACK,FIN,RST,URG,PSH SYN,ACK -j REJECT</span><br><span class="line"><span class="comment"># 上两条命令的简写</span></span><br><span class="line">iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --tcp-flags ALL SYN -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p tcp -m tcp --sport 22 --tcp-flags ALL SYN,ACK -j REJECT</span><br><span class="line"></span><br><span class="line"><span class="comment"># --syn 用于匹配tcp新建连接的请求报文，相当于使用”–tcp-flags SYN,RST,ACK,FIN  SYN”</span></span><br><span class="line">iptables -t filter -I INPUT -p tcp -m tcp --dport 22 --syn -j REJECT</span><br></pre></td></tr></table></figure><h3 id="2-5-udp扩展与icmp扩展">2.5 udp扩展与icmp扩展</h3><p>udp扩展模块，这个扩展模块中能用的匹配条件比较少，只有两个，就是–sport与–dport，即匹配报文的源端口与目标端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 放行samba服务的137与138这两个UDP端口</span></span><br><span class="line">iptables -t filter -I INPUT -p udp -m udp --dport 137 -j ACCEPT</span><br><span class="line">iptables -t filter -I INPUT -p udp -m udp --dport 137:157 -j ACCEPT</span><br><span class="line"><span class="comment">#可以结合multiport模块指定多个离散的端口</span></span><br><span class="line"><span class="comment"># 但是udp中的–sport与–dport也只能指定连续的端口范围，并不能一次性指定多个离散的端口，使用之前总结过的multiport扩展模块，即可指定多个离散的UDP端口</span></span><br></pre></td></tr></table></figure><p>ICMP协议的全称为Internet Control Message Protocol，翻译为互联网控制报文协议，它主要用于探测网络上的主机是否可用，目标是否可达，网络是否通畅，路由是否可用等。—icmp-type：匹配icmp报文的具体类型</p><p>我们平常使用ping命令ping某主机时，如果主机可达，对应主机会对我们的ping请求做出回应（此处不考虑禁ping等情况），也就是说，我们发出ping请求，对方回应ping请求，虽然ping请求报文与ping回应报文都属于ICMP类型的报文，但是如果在概念上细分的话，它们所属的类型还是不同的，我们发出的ping请求属于类型8的icmp报文，而对方主机的ping回应报文则属于类型0的icmp报文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要禁止所有icmp类型的报文进入本机</span></span><br><span class="line"><span class="comment"># 我们只想要ping通别人，但是不想让别人ping通我们</span></span><br><span class="line"><span class="comment"># –icmp-type 8/0表示icmp报文的type为8，code为0才会被匹配到，也就是只有ping请求类型的报文才能被匹配到</span></span><br><span class="line"><span class="comment"># 别人对我们发起的ping请求将会被拒绝通过防火墙，而我们之所以能够ping通别人，是因为别人回应我们的报文的icmp type为0，code也为0，所以无法被上述规则匹配到，所以我们可以看到别人回应我们的信息</span></span><br><span class="line">iptables -t filter -I INPUT -p icmp -m icmp --icmp-type 8/0 -j REJECT</span><br><span class="line"><span class="comment"># 因为type为8的类型下只有一个code为0的类型，所以我们可以省略对应的code</span></span><br><span class="line">iptables -t filter -I INPUT -p icmp --icmp-type 8 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p icmp -m icmp --icmp-type 0/0 -j REJECT</span><br><span class="line">iptables -t filter -I OUTPUT -p icmp --icmp-type 0 -j REJECT</span><br><span class="line"><span class="comment"># 除了能够使用对应type/code匹配到具体类型的icmp报文以外，我们还能用icmp报文的描述名称去匹配对应类型的报文</span></span><br><span class="line">iptables -t filter -I INPUT -p icmp --icmp-type <span class="string">"echo-request"</span> -j REJECT</span><br></pre></td></tr></table></figure><h3 id="2-6-state扩展">2.6 state扩展</h3><p>state模块可以让iptables实现&quot;连接追踪&quot;机制，对于state模块而言的&quot;连接&quot;并不能与tcp的&quot;连接&quot;画等号，在TCP/IP协议簇中，UDP和ICMP是没有所谓的连接的，但是对于state模块来说，tcp报文、udp报文、icmp报文都是有连接状态的，我们可以这样认为，对于state模块而言，只要两台机器在&quot;你来我往&quot;的通信，就算建立起了连接，其中的报文可以分为5种状态，报文状态可以为<strong>NEW、ESTABLISHED、RELATED、INVALID、UNTRACKED</strong></p><ul><li><strong>NEW</strong>：连接中的第一个包，状态就是NEW，我们可以理解为新连接的第一个包的状态为NEW。</li><li><strong>ESTABLISHED</strong>：我们可以把NEW状态包后面的包的状态理解为ESTABLISHED，表示连接已建立。</li><li><strong>RELATED</strong>：从字面上理解RELATED译为关系，但是这样仍然不容易理解，我们举个例子，比如FTP服务，FTP服务端会建立两个进程，一个命令进程，一个数据进程。命令进程负责服务端与客户端之间的命令传输（我们可以把这个传输过程理解成state中所谓的一个&quot;连接&quot;，暂称为&quot;命令连接&quot;）。数据进程负责服务端与客户端之间的数据传输 ( 我们把这个过程暂称为&quot;数据连接&quot; )。但是具体传输哪些数据，是由命令去控制的，所以，&quot;数据连接&quot;中的报文与&quot;命令连接&quot;是有关系的。那么，&quot;数据连接&quot;中的报文可能就是RELATED状态，因为这些报文与&quot;命令连接&quot;中的报文有关系。(注：如果想要对ftp进行连接追踪，需要单独加载对应的内核模块<code>nf_conntrack_ftp</code>，如果想要自动加载，可以配置<code>/etc/sysconfig/iptables-config</code>文件)</li><li><strong>INVALID</strong>：如果一个包没有办法被识别，或者这个包没有任何状态，那么这个包的状态就是INVALID，我们可以主动屏蔽状态为INVALID的报文。</li><li><strong>UNTRACKED</strong>：报文的状态为untracked时，表示报文未被追踪，当报文的状态为Untracked时通常表示无法找到相关的连接。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只要放行状态为ESTABLISHED的报文即可，因为如果报文的状态为ESTABLISHED，那么报文肯定是之前发出的报文的回应</span></span><br><span class="line"><span class="comment"># 如果你还不放心，可以将状态为RELATED或ESTABLISHED的报文都放行，这样，就表示只有回应我们的报文能够通过防火墙，如果是别人主动发送过来的新的报文，则无法通过防火墙</span></span><br><span class="line"><span class="comment"># 这样就可以保证主机安全</span></span><br><span class="line">iptables -F</span><br><span class="line">iptables -t filter -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -t filter -A INPUT -j REJECT</span><br><span class="line"><span class="comment"># 当前主机IP为104，当放行ESTABLISHED与RELATED状态的包以后，并没有影响通过本机远程ssh到IP为77的主机上，但是无法从77上使用22端口主动连接到104上</span></span><br><span class="line"><span class="comment"># 对于其他端口与IP来说，也是相同的，可以从104主动发送报文，并且能够收到响应报文，但是其他主机并不能主动向104发起请求。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在更推荐conntrack代替state的，不过两者都能使用，区别不大</span></span><br><span class="line">iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="2-7-mac扩展">2.7 mac扩展</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac扩展用来匹配某个mac地址</span></span><br><span class="line"><span class="comment"># 用法 -m mac --mac-source MAC</span></span><br><span class="line"><span class="comment"># 阻断来自某MAC地址的数据包通过本机</span></span><br><span class="line">iptables -A FORWARD -m mac --mac-source xx:xx:xx:xx -j DROP</span><br><span class="line"><span class="comment"># 注意</span></span><br><span class="line"><span class="comment"># 报文经过路由后，数据包中原有的mac信息会被替换，所以在路由后的iptables中使用mac模块是没有意义的</span></span><br></pre></td></tr></table></figure><h1>三、iptables进阶与提高</h1><p>1、iptables的黑白名单机制</p><p>报文在经过iptables的链时，会匹配链中的规则，遇到匹配的规则时，就执行对应的动作，如果链中的规则都无法匹配到当前报文，则使用链的默认策略（默认动作），<strong>链的默认策略通常设置为ACCEPT或者DROP</strong>。</p><p>那么，当链的默认策略设置为<code>ACCEPT</code>时，如果对应的链中没有配置任何规则，就表示接受所有的报文，如果对应的链中存在规则，但是这些规则没有匹配到报文，报文还是会被接受。同理，当链的默认策略设置为<code>DROP</code>时，如果对应的链中没有配置任何规则，就表示拒绝所有报文，如果对应的链中存在规则，但是这些规则没有匹配到报文，报文还是会被拒绝。</p><ul><li><strong>黑名单机制</strong>：当链的默认策略为ACCEPT时，链中的规则对应的动作应该为DROP或者REJECT，表示只有匹配到规则的报文才会被拒绝，没有被规则匹配到的报文都会被默认接受</li><li><strong>白名单机制</strong>：当链的默认策略为DROP时，链中的规则对应的动作应该为ACCEPT，表示只有匹配到规则的报文才会被放行，没有被规则匹配到的报文都会被默认拒绝</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 白名单机制</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="comment"># 将INPUT链的默认策略改为DROP</span></span><br><span class="line">iptables -nvL INPUT</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果此时iptables -F清空了的话，那么将拒绝所有请求</span></span><br><span class="line"><span class="comment"># 这就是默认策略设置为DROP的缺点，在对应的链中没有设置任何规则时，这样使用默认策略为DROP是非常不明智的，因为管理员也会把自己拒之门外</span></span><br><span class="line"><span class="comment"># 所以，我们如果想要使用”白名单”的机制，最好将链的默认策略保持为”ACCEPT”，然后将”拒绝所有请求”这条规则放在链的尾部，将”放行规则”放在前面</span></span><br><span class="line"><span class="comment"># 这样做，既能实现”白名单”机制，又能保证在规则被清空时，管理员还有机会连接到主机</span></span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line"><span class="comment"># 当所有放行规则设置完成后，在INPUT链的尾部，设置一条拒绝所有请求的规则</span></span><br><span class="line">iptables -A INPUT -j REJECT</span><br></pre></td></tr></table></figure><h2 id="2、iptables自定义链">2、iptables自定义链</h2><blockquote><p>自定义链可以方便的管理不同的规则，方便后期规则的修改，但是需要注意的是，自定义链并不能直接使用，而是需要被默认链引用才能够使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建自定义链</span></span><br><span class="line"><span class="comment">#示例：在filter表中创建IN_WEB自定义链，省略-t选项时，缺省操作的就是filter表</span></span><br><span class="line">iptables -t filter -N IN_WEB</span><br><span class="line"><span class="comment"># 可以看到，这条自定义链的引用计数为0 (0 references),就是说，这条自定义链还没有被任何默认链所引用</span></span><br><span class="line">iptables -nvL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义链中配置规则,和其他一样</span></span><br><span class="line">iptables -t filter -I IN_WEB -s 192.168.1.139 -j REJECT</span><br><span class="line">iptables -I IN_WEB -s 192.168.1.188 -j REJECT</span><br><span class="line">iptables -t filter --line -nvL IN_WEB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用自定义链</span></span><br><span class="line"><span class="comment">#示例：在INPUT链中引用刚才创建的自定义链</span></span><br><span class="line">iptables -t filter -I INPUT -p tcp --dport 80 -j IN_WEB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名自定义链</span></span><br><span class="line"><span class="comment">#示例：将IN_WEB自定义链重命名为WEB</span></span><br><span class="line">iptables -E IN_WEB WEB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除自定义链</span></span><br><span class="line"><span class="comment"># 删除自定义链需要满足两个条件:自定义链没有被引用;自定义链中没有任何规则</span></span><br><span class="line"><span class="comment">#示例：删除引用计数为0并且不包含任何规则的WEB链</span></span><br><span class="line">iptables -D INPUT 1</span><br><span class="line">iptables -t filter -F WEB</span><br><span class="line"><span class="comment"># 使用”-X”选项可以删除一个引用计数为0的、空的自定义链</span></span><br><span class="line">iptables -X WEB</span><br></pre></td></tr></table></figure><h2 id="3、iptables之网络防火墙">3、iptables之网络防火墙</h2><h3 id="3-1-概述">3.1 概述</h3><p>网络防火墙： 往往处于网络入口或边缘，针对于网络入口进行防护，服务于防火墙背后的本地局域网(有点类似路由器)，网络防火墙往往处于网络的入口或者边缘，那么，如果想要使用iptables充当网络防火墙，iptables所在的主机则需要处于网络入口处。</p><p>不管是由外部主机发往内部主机的报文，还是由内部主机发往外部主机的报文，都需要经过iptables所在的主机，<strong>由iptables所在的主机进行&quot;过滤并转发&quot;，所以，防火墙主机的主要工作就是&quot;过滤并转发&quot;</strong></p><p><img src="http://qnypic.shawncoding.top/blog/%E8%BD%AC%E5%8F%91%E5%9B%BE_ziB0kUlrCp.png" alt></p><p>前文中，iptables都是作为**“主机防火墙”**的角色出现的，所以我们举例时，只用到了上图中的INPUT链与OUTPUT链，因为拥有&quot;过滤功能&quot;的链只有3条，INPUT、OUTPUT、FORWARD，当报文发往本机时，如果想要过滤，只能在INPUT链与OUTPUT链中实现，而此时，iptables的角色发生了转变，我们想要将iptables所在的主机打造成&quot;网络防火墙&quot;，而刚才已经说过，网络防火墙的职责就是&quot;过滤并转发&quot;，要想&quot;过滤&quot;，只能在INPUT、OUTPUT、FORWARD三条链中实现，要想&quot;转发&quot;，报文则只会经过FORWARD链（发往本机的报文才会经过INPUT链），所以，综上所述，iptables的角色变为&quot;网络防火墙&quot;时，规则只能定义在FORWARD链中。</p><h3 id="3-2-实战demo">3.2 实战demo</h3><p>此处所描述的内网、外网与我们平常所说的公网、私网不同。此处描述的内外部网络你可以理解成两个网段，A网络与B网络，为了方便描述，我们把圆形内的主机称为内部主机，把上图中圆形所表示的网络称为内部网络，把圆形外的网络称为外部网络。</p><p><img src="http://qnypic.shawncoding.top/blog/image_NO1LRSbq8q.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | awk <span class="string">'/inet/&#123;print $1,$2&#125;'</span></span><br><span class="line"><span class="comment"># route命令配置的路由条目在网络重启后将会失效</span></span><br><span class="line"><span class="comment"># 现在A主机通往10.1网络的网关已经指向了B主机</span></span><br><span class="line"><span class="comment"># 因为A发往内网的网关是默认的，所以再加一个从内网到A的默认网关即可</span></span><br><span class="line">route add -net 10.1.0.0/16 gw 192.168.1.146</span><br><span class="line">route -n</span><br><span class="line"><span class="comment"># 如果A ping 10.1.0.3会有反应，因为这两个网卡都是它自己，故会反应</span></span><br><span class="line"><span class="comment"># 但ping内网中的其他机器就不会有回应了，因为还没配置规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------开启转发----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果想要iptables作为网络防火墙，iptables所在主机开启核心转发功能，以便能够转发报文。</span></span><br><span class="line"><span class="comment">#使用如下命令查看当前主机是否已经开启了核心转发，0表示未开启，1表示已开启</span></span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="comment">#使用如下两种方法均可临时开启核心转发，立即生效，但是重启网络配置后会失效。</span></span><br><span class="line">方法一：<span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">方法二：sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用如下方法开启核心转发功能，重启网络服务后永久生效。</span></span><br><span class="line"><span class="comment"># 配置/etc/sysctl.conf文件（centos7中配置/usr/lib/sysctl.d/00-system.conf文件），在配置文件中将 net.ipv4.ip_forward设置为1</span></span><br><span class="line"><span class="comment"># ubuntu中</span></span><br><span class="line"><span class="comment"># echo "net.ipv4.ip_forward = 1" &gt;&gt; /etc/sysctl.conf</span></span><br><span class="line"><span class="comment"># sysctl -p</span></span><br><span class="line"><span class="comment"># 总之原理就是把net.ipv4.ip_forward = 1开启</span></span><br><span class="line"><span class="comment"># 这样内外网都可以ping通了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------转发规则------------------------------</span></span><br><span class="line"><span class="comment">#由于iptables此时的角色为"网络防火墙"，所以需要在filter表中的FORWARD链中设置规则。</span></span><br><span class="line"><span class="comment">#可以使用"白名单机制"，先添加一条默认拒绝的规则，然后再为需要放行的报文设置规则。</span></span><br><span class="line"><span class="comment">#配置规则时需要考虑"方向问题"，针对请求报文与回应报文，考虑报文的源地址与目标地址，源端口与目标端口等。</span></span><br><span class="line"><span class="comment">#示例为允许网络内主机访问网络外主机的web服务与sshd服务</span></span><br><span class="line"><span class="comment"># 白名单机制，先添加最后一个为拒绝</span></span><br><span class="line">iptables -A FORWARD -j REJECT</span><br><span class="line">iptables -I FORWARD -s 10.1.0.0/16 -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -I FORWARD -d 10.1.0.0/16 -p tcp --sport 80 -j ACCEPT</span><br><span class="line">iptables -I FORWARD -s 10.1.0.0/16 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -I FORWARD -d 10.1.0.0/16 -p tcp --sport 22 -j ACCEPT</span><br><span class="line"> </span><br><span class="line"><span class="comment">#可以使用state扩展模块，对上述规则进行优化，使用如下配置可以省略许多"回应报文放行规则"。</span></span><br><span class="line">iptables -A FORWARD -j REJECT</span><br><span class="line">iptables -I FORWARD -s 10.1.0.0/16 -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -I FORWARD -s 10.1.0.0/16 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -I FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="4、iptables动作总结">4、iptables动作总结</h2><h3 id="4-1-常用动作之REJECT">4.1 常用动作之REJECT</h3><blockquote><p>之前用到了一些常用动作，比如ACCEPT、DROP、REJECT等。&quot;动作&quot;与&quot;匹配条件&quot;一样，也有&quot;基础&quot;与&quot;扩展&quot;之分。同样，使用扩展动作也需要借助扩展模块，但是，扩展动作可以<strong>直接使用</strong>，不用像使用&quot;扩展匹配条件&quot;那样指定特定的模块。之前用到的ACCEPT与DROP都属于基础动作；而REJECT则属于扩展动作。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -----------------------------动作REJECT----------------</span></span><br><span class="line"><span class="comment"># REJECT动作的常用选项为--reject-with，使用--reject-with选项，可以设置提示信息，当对方被拒绝时，会提示对方为什么被拒绝</span></span><br><span class="line"><span class="comment"># 可用值如下</span></span><br><span class="line"><span class="comment"># icmp-net-unreachable</span></span><br><span class="line"><span class="comment"># icmp-host-unreachable</span></span><br><span class="line"><span class="comment"># icmp-port-unreachable</span></span><br><span class="line"><span class="comment"># icmp-proto-unreachable</span></span><br><span class="line"><span class="comment"># icmp-net-prohibited</span></span><br><span class="line"><span class="comment"># icmp-host-pro-hibited</span></span><br><span class="line"><span class="comment"># icmp-admin-prohibited</span></span><br><span class="line"><span class="comment"># 当不设置任何值时，默认值为icmp-port-unreachable</span></span><br><span class="line"></span><br><span class="line">iptables -F</span><br><span class="line">iptables -t filter -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -j REJECT</span><br><span class="line">iptables -nvL INPUT</span><br><span class="line"><span class="comment"># 当没有明确设置–reject-with的值时，默认提示信息为icmp-port-unreachable，即端口不可达之意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改拒绝报文，发ping就会显示主机不可达</span></span><br><span class="line">iptables -I INPUT 2 -j REJECT --reject-with icmp-host-unreachable</span><br></pre></td></tr></table></figure><h3 id="4-2-常用动作之LOG">4.2 常用动作之LOG</h3><blockquote><p>使用LOG动作，可以将符合条件的报文的相关信息记录到日志中，但当前报文具体是被&quot;接受&quot;，还是被&quot;拒绝&quot;，都由后面的规则控制，换句话说，LOG动作只负责记录匹配到的报文的相关信息，不负责对报文的其他处理，如果想要对报文进行进一步的处理，可以在之后设置具体规则，进行进一步的处理。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举例</span></span><br><span class="line">iptables -F</span><br><span class="line"><span class="comment"># 将发往22号端口的报文相关信息记录在日志中</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -j LOG</span><br><span class="line"><span class="comment"># 都会被记录到日志中，查看/var/log/messages即可看到对应报文的相关信息</span></span><br><span class="line">tail -f /var/<span class="built_in">log</span>/messages</span><br><span class="line"><span class="comment"># 但匹配条件过于宽泛，所以在使用LOG动作时，匹配条件应该尽量写的精确一些，先删除这条</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然，我们也可以将相关信息记录在指定的文件中，以防止iptables的相关信息与其他日志信息相混淆</span></span><br><span class="line"><span class="comment"># 修改/etc/rsyslog.conf文件（或者/etc/syslog.conf），在rsyslog配置文件中添加如下配置即可</span></span><br><span class="line">vim /etc/rsyslog.conf</span><br><span class="line"><span class="comment"># 末尾添加</span></span><br><span class="line">kern.warning /var/<span class="built_in">log</span>/iptables.log</span><br><span class="line"><span class="comment"># 加入上述配置后，报文的相关信息将会被记录到/var/log/iptables.log文件中</span></span><br><span class="line"><span class="comment"># 完成上述配置后，重启rsyslog服务（或者syslogd）</span></span><br><span class="line">service rsyslog restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># LOG动作也有自己的选项，常用选项如下</span></span><br><span class="line"><span class="comment"># --log-level选项可以指定记录日志的日志级别，可用级别有emerg，alert，crit，error，warning，notice，info，debug</span></span><br><span class="line"><span class="comment"># –-log-prefix选项可以给记录到的相关信息添加”标签”之类的信息，以便区分各种记录到的报文信息，方便在分析时进行过滤</span></span><br><span class="line"><span class="comment"># 注：-–log-prefix对应的值不能超过29个字符</span></span><br><span class="line"><span class="comment"># 举例将主动连接22号端口的报文的相关信息都记录到日志中，并且把这类记录命名为want-in-from-port-22</span></span><br><span class="line">iptables -F INPUT</span><br><span class="line">iptables -I INPUT -p tcp --dport 22 -m state --state NEW -j LOG --<span class="built_in">log</span>-prefix <span class="string">"want-in-from-port-22"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以连接ssh进行测试，查看iptables.log日志，发现日志中有标签，还有网卡信息，时间等</span></span><br></pre></td></tr></table></figure><h3 id="4-3-NAT相关动作-重要">4.3 NAT相关动作(重要)</h3><p>图中圆形所示的逻辑区域表示公司内网，网段为<code>10.1.0.0/16</code>，主机B、C、D都属于内网主机，主机B比较特殊，同时扮演了网关与防火墙，主机B持有公司唯一的公网IP（我们用了一个假的公网IP），局域网内主机如果想与公网主机通讯，需要共享此公网IP，由B主机进行NAT，所以，我们为主机B准备了两块网卡，公网IP与私网IP分别配置到这两块网卡中</p><p><img src="http://qnypic.shawncoding.top/blog/image_GyHI8qMvVP.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果想要NAT功能能够正常使用，需要开启Linux主机的核心转发功能。</span></span><br><span class="line"><span class="comment"># -----------------------开启转发----------------------------</span></span><br><span class="line"><span class="comment">#使用如下命令查看当前主机是否已经开启了核心转发，0表示未开启，1表示已开启</span></span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="comment">#使用如下两种方法均可临时开启核心转发，立即生效，但是重启网络配置后会失效。</span></span><br><span class="line">方法一：<span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">方法二：sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"><span class="comment">#使用如下方法开启核心转发功能，重启网络服务后永久生效。</span></span><br><span class="line"><span class="comment"># 配置/etc/sysctl.conf文件（centos7中配置/usr/lib/sysctl.d/00-system.conf文件），在配置文件中将 net.ipv4.ip_forward设置为1</span></span><br><span class="line"><span class="comment"># ubuntu中</span></span><br><span class="line"><span class="comment"># echo "net.ipv4.ip_forward = 1" &gt;&gt; /etc/sysctl.conf</span></span><br><span class="line"><span class="comment"># sysctl -p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------SNAT相关操作----------------------</span></span><br><span class="line"><span class="comment"># 网络内部的主机可以借助SNAT隐藏自己的IP地址，同时还能够共享合法的公网IP，让局域网内的多台主机共享公网IP访问互联网</span></span><br><span class="line"><span class="comment"># 而此时的主机B就扮演了拥有NAT功能的设备，我们使用iptables的SNAT动作达到刚才所说的目的</span></span><br><span class="line"><span class="comment"># 我们将来自于10.1.0.0/16网段的报文的源地址改为公司的公网IP地址</span></span><br><span class="line"><span class="comment"># -t nat表示操作nat表，我们之前一直在灌输一个概念，就是不同的表有不同的功能，filter表的功能是过滤，nat表的功能就是地址转换，所以我们需要在nat表中定义nat规则。</span></span><br><span class="line"><span class="comment"># -A POSTROUTING表示将SNAT规则添加到POSTROUTING链的末尾，在centos7中，SNAT规则只能存在于POSTROUTING链与INPUT链中，在centos6中，SNAT规则只能存在于POSTROUTING链中</span></span><br><span class="line"><span class="comment"># -s 10.1.0.0/16表示报文来自于10.1.0.0/16网段</span></span><br><span class="line"><span class="comment"># -j SNAT表示使用SNAT动作，对匹配到的报文进行处理，对匹配到的报文进行源地址转换</span></span><br><span class="line"><span class="comment"># –to-source 192.168.1.146表示将匹配到的报文的源IP修改为192.168.1.146，我们已经总结过，某些动作会有自己的选项，–to-source就是SNAT动作的常用选项，用于指定SNAT需要将报文的源IP修改为哪个IP地址</span></span><br><span class="line"><span class="comment"># 只是用于配置SNAT的话，我们并不用 手动的进行DNAT设置，iptables会自动维护NAT表，并将响应报文的目标地址转换回来</span></span><br><span class="line"><span class="comment"># 内外网可以相互ping通，iptables自动维护转换表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置SNAT，可以隐藏网内主机的IP地址，也可以共享公网IP，访问互联网，如果只是共享IP的话，只配置如下SNAT规则即可</span></span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -j SNAT --to-source 公网IP</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------动作MASQUERADE-----------------------------</span></span><br><span class="line"><span class="comment"># MASQUERADE和SNAT类似，也就是源地址转换</span></span><br><span class="line"><span class="comment"># MASQUERADE会动态的将源地址转换为可用的IP地址，其实与SNAT实现的功能完全一致，都是修改源地址</span></span><br><span class="line"><span class="comment"># 只不过SNAT需要指明将报文的源地址改为哪个IP，而MASQUERADE则不用指定明确的IP，会动态的将报文的源地址修改为指定网卡上可用的IP地址</span></span><br><span class="line"><span class="comment"># 通过外网网卡出去的报文在经过POSTROUTING链时，会自动将报文的源地址修改为外网网卡上可用的IP地址，这时，即使外网网卡中的公网IP地址发生了改变，也能够正常的、动态的将内部主机的报文的源IP映射为对应的公网IP</span></span><br><span class="line"><span class="comment"># 可以把MASQUERADE理解为动态的、自动化的SNAT，如果没有动态SNAT的需求，没有必要使用MASQUERADE，因为SNAT更加高效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果公网IP是动态获取的，不是固定的，则可以使用MASQUERADE进行动态的SNAT操作，如下命令表示将10.1网段的报文的源IP修改为eth0网卡中可用的地址</span></span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------DNAT相关操作---------------------------</span></span><br><span class="line"><span class="comment"># 配置DNAT，可以通过公网IP访问局域网内的服务</span></span><br><span class="line"><span class="comment"># -t nat -I PREROUTING表示在nat表中的PREROUTING链中配置DNAT规则，DNAT规则只配置在PREROUTING链与OUTPUT链中。</span></span><br><span class="line"><span class="comment"># 注：理论上来说，只要配置DNAT规则，不需要对应的SNAT规则即可达到DNAT效果</span></span><br><span class="line"><span class="comment"># 但是在测试DNAT时，对应SNAT规则也需要配置，才能正常DNAT，可以先尝试只配置DNAT规则</span></span><br><span class="line"><span class="comment"># 如果无法正常DNAT，再尝试添加对应的SNAT规则，SNAT规则配置一条即可，DNAT规则需要根据实际情况配置不同的DNAT规则</span></span><br><span class="line">iptables -t nat -I PREROUTING -d 公网IP -p tcp --dport 公网端口 -j DNAT --to-destination 私网IP:端口号</span><br><span class="line">iptables -t nat -I PREROUTING -d 公网IP -p tcp --dport 8080 -j DNAT --to-destination 10.1.0.1:80</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.1.0.0/16 -j SNAT --to-source 公网IP</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------动作REDIRECT--------------------</span></span><br><span class="line"><span class="comment"># 使用REDIRECT动作可以在本机上进行端口映射</span></span><br><span class="line"><span class="comment"># REDIRECT规则只能定义在PREROUTING链或者OUTPUT链中</span></span><br><span class="line"><span class="comment"># 在本机进行目标端口映射时可以使用REDIRECT动作</span></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line"><span class="comment"># 配置完成上述规则后，其他机器访问本机的80端口时，会被映射到8080端口</span></span><br></pre></td></tr></table></figure><h1>四、总结</h1><h2 id="1、配置应用程序规则举例">1、配置应用程序规则举例</h2><h3 id="1-1-SSH">1.1 SSH</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-m state: 启用状态匹配模块（state matching module）</span></span><br><span class="line"><span class="comment">#–-state: 状态匹配模块的参数。当SSH客户端第一个数据包到达服务器时，状态字段为NEW；建立连接后数据包的状态字段都是ESTABLISHED</span></span><br><span class="line"><span class="comment">#–sport 22: sshd监听22端口，同时也通过该端口和客户端建立连接、传送数据。因此对于SSH服务器而言，源端口就是22</span></span><br><span class="line"><span class="comment">#–dport 22: ssh客户端程序可以从本机的随机端口与SSH服务器的22端口建立连接。因此对于SSH客户端而言，目的端口就是22</span></span><br><span class="line"><span class="comment"># 1.允许接收远程主机的SSH请求</span></span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment"># 2.允许发送本地主机的SSH响应</span></span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment"># 如果服务器也需要使用SSH连接其他远程主机，则还需要增加以下配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.送出的数据包目的端口为22</span></span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment"># 2.接收的数据包源端口为22</span></span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="1-2-HTTP">1.2 HTTP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.删除现有规则</span></span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.配置默认链策略</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.允许远程主机进行SSH连接</span></span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.允许本地主机进行SSH连接</span></span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.允许HTTP请求</span></span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置转发端口示例</span></span><br><span class="line">iptables -t nat -I PREROUTING -p tcp --dport 3389 -j DNAT --to 38.X25.X.X02 </span><br><span class="line">iptables -t nat -I POSTROUTING -p tcp --dport 3389 -j MASQUERADE</span><br></pre></td></tr></table></figure><h3 id="1-3-NAT规则实战">1.3 NAT规则实战</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把本地的mysql 3306端口映射出去变成63306，外面连接的语句是</span></span><br><span class="line"><span class="comment"># 注：当访问63306的时候，会自动去请求3306，然后返回数据</span></span><br><span class="line">mysql -uroot -p<span class="string">'password'</span> -h xxxxx -P 63306</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先允许数据包转发</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="comment"># 注：这是允许所有外来的IP访问，慎用</span></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -m tcp --dport 63306 -j DNAT --to-destination 127.0.0.1:3306</span><br><span class="line"><span class="comment"># 修改规则(4代表编号, --line-number可查看对应编号, -s 指定来源IP)</span></span><br><span class="line">iptables -t nat -R PREROUTING 4 -s 192.168.40.154 -p tcp -m tcp --dport 63306 -j DNAT --to-destination 127.0.0.1:3306</span><br><span class="line"><span class="comment"># 查看nat规则</span></span><br><span class="line">iptables -L -t nat --line-number</span><br></pre></td></tr></table></figure><h2 id="2、iptables常用套路小结">2、iptables常用套路小结</h2><ul><li><p><strong>规则的顺序非常重要</strong></p><p>如果报文已经被前面的规则匹配到，IPTABLES则会对报文执行对应的动作，通常是ACCEPT或者REJECT，报文被放行或拒绝以后，即使后面的规则也能匹配到刚才放行或拒绝的报文，也没有机会再对报文执行相应的动作了（前面规则的动作为LOG时除外），所以，针对相同服务的规则，更严格的规则应该放在前面</p></li><li><p><strong>当规则中有多个匹配条件时，条件之间默认存在&quot;与&quot;的关系</strong></p><p>如果一条规则中包含了多个匹配条件，那么报文必须同时满足这个规则中的所有匹配条件，报文才能被这条规则匹配到。</p></li><li><p><strong>在不考虑1的情况下，应该将更容易被匹配到的规则放置在前面</strong></p><p>比如，你写了两条规则，一条针对sshd服务，一条针对web服务。假设，一天之内，有20000个请求访问web服务，有200个请求访问sshd服务，那么，应该将针对web服务的规则放在前面，针对sshd的规则放在后面，因为访问web服务的请求频率更高。如果将sshd的规则放在前面，当报文是访问web服务时，sshd的规则也要白白的验证一遍，由于访问web服务的频率更高，白白耗费的资源就更多；如果web服务的规则放在前面，由于访问web服务的频率更高，所以无用功会比较少。换句话说就是，在没有顺序要求的情况下，不同类别的规则，被匹配次数多的、匹配频率高的规则应该放在前面。</p></li><li><p>当IPTABLES所在主机作为网络防火墙时，在配置规则时，应着重考虑方向性，双向都要考虑，从外到内，从内到外。</p></li><li><p>在配置IPTABLES白名单时，往往会将链的默认策略设置为ACCEPT，通过在链的最后设置REJECT规则实现白名单机制，而不是将链的默认策略设置为DROP，如果将链的默认策略设置为DROP，当链中的规则被清空时，管理员的请求也将会被DROP掉。</p></li></ul><hr><p>参考文章：</p><p><a href="https://www.zsythink.net/archives/tag/iptables/" target="_blank" rel="noopener" title="https://www.zsythink.net/archives/tag/iptables/">https://www.zsythink.net/archives/tag/iptables/</a></p><p><a href="https://zhuanlan.zhihu.com/p/279919870" target="_blank" rel="noopener" title="https://zhuanlan.zhihu.com/p/279919870">https://zhuanlan.zhihu.com/p/279919870</a></p><p><a href="https://zhuanlan.zhihu.com/p/465319846" target="_blank" rel="noopener" title="https://zhuanlan.zhihu.com/p/465319846">https://zhuanlan.zhihu.com/p/465319846</a></p><p><a href="https://www.cnblogs.com/hellowangbucuo/p/9617282.html" target="_blank" rel="noopener" title="https://www.cnblogs.com/hellowangbucuo/p/9617282.html">https://www.cnblogs.com/hellowangbucuo/p/9617282.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、iptables概念&lt;/h1&gt;
&lt;h2 id=&quot;1、防火墙基础&quot;&gt;1、防火墙基础&lt;/h2&gt;
&lt;h3 id=&quot;1-1-防火墙概念&quot;&gt;1.1 防火墙概念&lt;/h3&gt;
&lt;p&gt;从逻辑上讲，防火墙可以大体分为&lt;strong&gt;主机防火墙和网络防火墙&lt;/strong&gt;。网络防火墙和主机防火墙并不冲突，可以理解为，网络防火墙主外（集体）， 主机防火墙主内（个人）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机防火墙：针对于单个主机进行防护&lt;/li&gt;
&lt;li&gt;网络防火墙：往往处于网络入口或边缘，针对于网络入口进行防护，服务于防火墙背后的本地局域网&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从物理上讲，防火墙可以分为&lt;strong&gt;硬件防火墙和软件防火墙&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件防火墙：在硬件级别实现部分防火墙功能，另一部分功能基于软件实现，性能高，成本高&lt;/li&gt;
&lt;li&gt;软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙，性能低，成本低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux防火墙体系主要工作在网络层，针对TCP/IP数据包实施过滤和限制，属于典型的包过滤防火墙（也称网络层防火墙）；Linux防火墙体系基于内核编码实现，具有非常稳定的性能和高效率，因此被广泛的应用&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.shawncoding.top/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://blog.shawncoding.top/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch8.x学习笔记</title>
    <link href="https://blog.shawncoding.top/posts/6b517eb9.html"/>
    <id>https://blog.shawncoding.top/posts/6b517eb9.html</id>
    <published>2023-04-07T13:42:41.000Z</published>
    <updated>2023-04-07T13:49:08.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ES7.x版本可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/129101681" target="_blank" rel="noopener" title="Elasticsearch7学习笔记">Elasticsearch7学习笔记</a></p></blockquote><h1>一、Elasticsearch8.x概述</h1><h2 id="1、Elasticsearch-新特性">1、Elasticsearch 新特性</h2><p>从 2019 年 4 月 10 日 Elasticsearch7.0 版本的发布，到 2022 年 2 月 11 日 Elasticsearch8.0 版本的发布的近 3 年间，基于不断优化的开发设计理念，Elasticsearch 发布了一系列的小版本。这些小版本在以下方面取得了长足的进步并同时引入一些全新的功能：</p><ul><li>减少内存堆使用，完全支持 ARM 架构，引入全新的方式以使用更少的存储空间，从而让每个节点托管更多的数据</li><li>降低查询开销，在大规模部署中成效尤为明显</li><li>提高日期直方图和搜索聚合的速度，增强了页面缓存的性能，并创建了一个新的&quot;pre-filter&quot;搜索短语</li><li>在 Elasticsearch 7.3 和 Elasticsearch 7.4 版中，引入了对矢量相似函数的支持在最新发布的 8.0 版本中，也同样增加和完善了很多新的功能</li><li>增加对自然语言处理 (NLP) 模型的原生支持，让矢量搜索功能更容易实现，让客户和员工能够使用他们自己的文字和语言来搜索并收到高度相关的结果</li><li>直接在 Elasticsearch 中执行命名实体识别、情感分析、文本分类等，而无需使用额外的组件或进行编码</li><li>Elasticsearch 8.0 基于 Lucene 9.0 开发的，那些利用现代 NLP 的搜索体验，都可以借助（新增的）对近似最近邻搜索的原生支持，快速且大规模地实现。通过 ANN，可以快速并高效地将基于矢量的查询与基于矢量的文档语料库（无论是小语料库、大语料库还是巨型语料库）进行比较</li><li>可以直接在 Elasticsearch 中使用 PyTorch Machine Learning 模型（如 BERT），并在Elasticsearch 中原生使用这些模型执行推理</li></ul><a id="more"></a><h2 id="2、8-x与7-x的对比">2、8.x与7.x的对比</h2><ul><li>减少内存堆使用，完全支持 ARM 架构，引入全新的方式以使用更少的存储空间，从而让每个节点托管更多的数据</li><li>Elasticsearch8.x需要jdk17</li><li>降低查询开销，在大规模部署中成效尤为明显</li><li>首次启动 Elasticsearch8.x时，会自动进行安全配置</li><li>在 Elasticsearch 8.0 中做了一些改变来保护系统索引不被直接访问</li><li>为<code>keyword</code>、 <code>match_only_text</code>和<code>text</code>字段节省存储空间</li><li>加快<code>geo_point</code>、<code>geo_shape</code>和范围字段索引速度</li></ul><h1>二、Elasticsearch <strong>安装</strong>与使用</h1><h2 id="1、Elasticsearch-集群安装">1、Elasticsearch 集群安装</h2><h3 id="1-1-ES下载与集群规划">1.1 ES下载与集群规划</h3><blockquote><p>Java 的官方地址：<a href="ttps://www.oracle.com/java" title="https://www.oracle.com/java">https://www.oracle.com/java</a><br>ES官网：<a href="http://www.elastic.co/cn/" target="_blank" rel="noopener" title="http://www.elastic.co/cn/">http://www.elastic.co/cn/</a><br>ES下载：<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch" target="_blank" rel="noopener" title="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p></blockquote><p>我们准备三台 linux 虚拟机(基于Centos7)，用于配置Elasticsearch 集群，集群中-节点名称依次为 es-node-1，es-node-2，es-node-3，其中ES版本我们选择略早的 8.1.0 版本下载地址(可以直接选择适配JDK版本的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意以root登录</span></span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.1.0-linux-x86_64.tar.gz</span><br><span class="line"><span class="comment"># 将下载好的压缩包上传到服务器中,解压</span></span><br><span class="line">mkdir -p /usr/soft</span><br><span class="line">tar zxvf elasticsearch-8.1.0-linux-x86_64.tar.gz -C /usr/soft</span><br><span class="line"><span class="built_in">cd</span> /usr/soft/</span><br><span class="line">mv elasticsearch-8.1.0/ elasticsearch8</span><br></pre></td></tr></table></figure><p>解压后的Elasticsearch 的目录结构如下</p><table><thead><tr><th><strong>目录</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>bin</td><td>可执行脚本目录</td></tr><tr><td>config</td><td>配置目录</td></tr><tr><td>jdk</td><td>内置 JDK 目录</td></tr><tr><td>lib</td><td>类库</td></tr><tr><td>logs</td><td>日志目录</td></tr><tr><td>modules</td><td>模块目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr></tbody></table><h3 id="1-2-配置环境">1.2 配置环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增 es 用户</span></span><br><span class="line">useradd es</span><br><span class="line"><span class="comment"># 为 es 用户设置密码</span></span><br><span class="line">passwd es</span><br><span class="line"><span class="comment"># 修改文件拥有者</span></span><br><span class="line">chown -R es:es /usr/soft/elasticsearch8</span><br><span class="line"><span class="comment"># 创建数据文件目录</span></span><br><span class="line">mkdir /usr/soft/elasticsearch8/data</span><br><span class="line"><span class="comment"># 创建证书目录</span></span><br><span class="line">mkdir /usr/soft/elasticsearch8/config/certs</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==========================================</span></span><br><span class="line"><span class="comment"># 在第一台服务器节点 master 设置集群多节点通信密钥</span></span><br><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su es</span><br><span class="line"><span class="built_in">cd</span> /usr/soft/elasticsearch8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 签发 ca 证书，过程中需按两次回车键</span></span><br><span class="line">bin/elasticsearch-certutil ca</span><br><span class="line"><span class="comment"># 用 ca 证书签发节点证书，过程中需按三次回车键</span></span><br><span class="line">bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12</span><br><span class="line"><span class="comment"># 将生成的证书文件移动到 config/certs 目录中</span></span><br><span class="line">mv elastic-stack-ca.p12 elastic-certificates.p12 config/certs</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># 在第一台服务器节点 master 设置集群多节点 HTTP 证书</span></span><br><span class="line"><span class="comment"># 签发 Https 证书</span></span><br><span class="line">bin/elasticsearch-certutil http</span><br><span class="line"><span class="comment"># 以下是每次要求输入时，需要输入的内容</span></span><br><span class="line">n <span class="comment">#是否认证</span></span><br><span class="line">y <span class="comment">#是否已有证书</span></span><br><span class="line">certs/elastic-stack-ca.p12 <span class="comment">#证书目录</span></span><br><span class="line">回车 <span class="comment">#输入证书密码（如果没有设置就回车）</span></span><br><span class="line">5y <span class="comment">#证书有效时间5年</span></span><br><span class="line">n <span class="comment">#每个结点都生成证书吗</span></span><br><span class="line"></span><br><span class="line">master <span class="comment">#结点的主机名称</span></span><br><span class="line">slave1 <span class="comment">#结点的主机名称</span></span><br><span class="line">slave2 <span class="comment">#结点的主机名称</span></span><br><span class="line">回车 <span class="comment">#退出输入</span></span><br><span class="line">y <span class="comment">#确定</span></span><br><span class="line"></span><br><span class="line">192.168.3.34 <span class="comment">#结点的ip</span></span><br><span class="line">192.168.3.35 <span class="comment">#结点的ip</span></span><br><span class="line">192.168.3.36 <span class="comment">#结点的ip</span></span><br><span class="line">回车 <span class="comment">#退出输入</span></span><br><span class="line">y <span class="comment">#确定</span></span><br><span class="line"></span><br><span class="line">n <span class="comment">#是否修改证书配置</span></span><br><span class="line">回车 <span class="comment">#输入密码</span></span><br><span class="line">回车 <span class="comment">#生成位置（回车默认）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ====================================</span></span><br><span class="line"><span class="comment"># 解压刚刚生成的 zip 包</span></span><br><span class="line">unzip elasticsearch-ssl-http.zip</span><br><span class="line"><span class="comment"># 将解压后的证书文件移动到 config/certs 目录中</span></span><br><span class="line">mv elasticsearch/http.p12 kibana/elasticsearch-ca.pem config/certs</span><br></pre></td></tr></table></figure><h3 id="1-3-修改配置文件">1.3 修改配置文件</h3><p><code>config/elasticsearch.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 ES 集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">es-cluster</span> </span><br><span class="line"><span class="comment"># 设置集群中当前节点名称</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">master</span></span><br><span class="line"><span class="comment"># 设置数据，日志文件路径</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/usr/soft/elasticsearch8/data</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/soft/elasticsearch8/logs</span></span><br><span class="line"><span class="comment"># 设置网络访问节点</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="string">master</span></span><br><span class="line"><span class="comment"># 设置网络访问端口</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment"># 初始节点</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["master"]</span></span><br><span class="line"><span class="comment"># 安全认证</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.security.enrollment.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.security.http.ssl:</span></span><br><span class="line"> <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">keystore.path:</span> <span class="string">/usr/soft/elasticsearch8/config/certs/http.p12</span></span><br><span class="line"> <span class="attr">truststore.path:</span> <span class="string">/usr/soft/elasticsearch8/config/certs/http.p12</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl:</span></span><br><span class="line"> <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">verification_mode:</span> <span class="string">certificate</span></span><br><span class="line"> <span class="attr">keystore.path:</span> <span class="string">/usr/soft/elasticsearch8/config/certs/elastic-certificates.p12</span></span><br><span class="line"> <span class="attr">truststore.path:</span> <span class="string">/usr/soft/elasticsearch8/config/certs/elastic-certificates.p12</span></span><br><span class="line"><span class="comment"># 此处需注意，为上面配置的节点名称</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["master"]</span></span><br><span class="line"><span class="attr">http.host:</span> <span class="string">[_local_,</span> <span class="string">_site_]</span></span><br><span class="line"><span class="attr">ingest.geoip.downloader.enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">xpack.security.http.ssl.client_authentication:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure><h3 id="1-4-启动ES">1.4 启动ES</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再次之前需要扩大文件句柄数，不然会报错</span></span><br><span class="line"><span class="comment"># 由于es文件比较多，需要修改系统配置</span></span><br><span class="line"><span class="comment"># 修改 /etc/security/limits.conf</span></span><br><span class="line"><span class="comment"># 在文件末尾中增加下面内容，每个进程可以打开的文件数的限制</span></span><br><span class="line">es soft nofile 65536</span><br><span class="line">es hard nofile 65536</span><br><span class="line"><span class="comment"># 修改 /etc/security/limits.d/20-nproc.conf</span></span><br><span class="line"><span class="comment"># 在文件末尾中增加下面内容，每个进程可以打开的文件数的限制</span></span><br><span class="line">es soft nofile 65536</span><br><span class="line">es hard nofile 65536</span><br><span class="line"><span class="comment"># 操作系统级别对每个用户创建的进程数的限制</span></span><br><span class="line">* hard nproc 4096</span><br><span class="line"><span class="comment"># 注： * 地表linux 所有用户名称</span></span><br><span class="line"><span class="comment"># 修改/etc/sysctl.conf</span></span><br><span class="line"><span class="comment"># 在文件末尾中增加下面内容</span></span><br><span class="line"><span class="comment"># 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536</span></span><br><span class="line">vm.max_map_count=655360</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载</span></span><br><span class="line">sysctl -p</span><br><span class="line"><span class="comment"># 最后查看一下，不行就重启一下</span></span><br><span class="line"><span class="comment"># 查看当前用户的软限制</span></span><br><span class="line"><span class="built_in">ulimit</span> -n </span><br><span class="line"><span class="comment"># 查看当前用户的硬限制</span></span><br><span class="line"><span class="built_in">ulimit</span> -H -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 ES 软件</span></span><br><span class="line">bin/elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># reset with `bin/elasticsearch-reset-password -u elastic`</span></span><br></pre></td></tr></table></figure><p>第一次成功启动后，会显示密码，请记住(保存下来，后面会用到)，在访问时需要，因为配置了安全协议，所以使用 https 协议进行访问，但由于证书是自己生成的，并不可靠，所以会有安全提示。访问:<code>https://192.168.3.34:9200/</code>(注意账号密码的保存)</p><h3 id="1-5-安装其他结点">1.5 安装其他结点</h3><p>操作和上面一样证书直接拷贝<code>config/elasticsearch.yml</code>并修改：<code>node.name</code>、<code>network.host</code>(名字和前面不一样)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台启动服务</span></span><br><span class="line">bin/elasticsearch -d</span><br></pre></td></tr></table></figure><p>最后可以通过<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener" title="elasticsearch-head">elasticsearch-head</a>插件查看集群情况</p><h3 id="1-6-问题解决">1.6 问题解决</h3><ul><li><p>Elastic s earch 是使用 java 开发的， 8.1 版本的 ES 需要 JDK 17 及 以上版本。默认安装包中 带有 JDK 环境，如果系统配置** ES_ JAVA_HOME 环境变量，那么会采用系统配置的JDK**。如果没有配置 该环境变量，ES 会 使用自带 捆绑 的 JDK 。虽然自带的 JDK 是 ES软件推荐的 Java 版本，但 一般建议使用系统配置的 JDK</p></li><li><p>Windows 环境 中出现下面的错误信息，是因为开启了 SSL 认证：<code>received p1aintext http traffic an an https charnel，closing cormnection Metty4HftoChannel (Localkadress=/127.0.0.1.9200,</code>解决方法修改<br><code>config/elasticsearch.yml</code> 文件，将 enabled 的值修改为 false</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xpack.security.http.ssl:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">keystore.path:</span> <span class="string">certs/http.p12</span></span><br></pre></td></tr></table></figure></li><li><p>启动成功后，如果访问 localhost:9200 地址后，弹出登录窗口，第一次启动时，因为开启了密码验证模式，在启动窗口中会显示输入账号和密码。如果没有注意到或没有找到账号密码，可以设置免密登录：<code>xpack.security.enabled: false</code></p></li><li><p>双击启动窗口闪退，通过路径访问追踪错误，如果是&quot;空间不足&quot;，请修改<code>config/jvm.options</code> 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">-Xms4g</span></span><br><span class="line"><span class="string">-Xmx4g</span></span><br></pre></td></tr></table></figure></li><li><p>启动后，如果密码忘记了，怎么办？可以采用指令重置密码，如果只启动单一节点，此操作可能会失败，至少启动2 个节点，测试成功</p></li></ul><h2 id="2、Kibana-安装">2、Kibana 安装</h2><h3 id="2-1-下载">2.1 下载</h3><p>Elasticsearch 下载的版本是 8.1.0，这里我们选择同样的 8.1.0 版，<a href="https://www.elastic.co/cn/downloads/past-releases#kibana" target="_blank" rel="noopener" title="下载地址">下载地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-8.1.0-linux-x86_64.tar.gz</span><br><span class="line"><span class="comment"># 将下载的压缩包上传到服务器,解压缩</span></span><br><span class="line">tar -zxvf kibana-8.1.0-linux-x86_64.tar.gz -C /usr/soft</span><br></pre></td></tr></table></figure><h3 id="2-2-配置环境">2.2 配置环境</h3><p>给 Kibana 生成证书文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 ES 服务器中生成证书，输入回车即可</span></span><br><span class="line"><span class="built_in">cd</span> /usr/soft/elasticsearch8</span><br><span class="line">bin/elasticsearch-certutil csr -name kibana -dns master</span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">unzip csr-bundle.zip</span><br><span class="line"><span class="comment"># 将解压后的文件移动到 kibana 的 config 目录中</span></span><br><span class="line"><span class="built_in">cd</span> kibana/</span><br><span class="line">mv kibana.csr kibana.key /usr/soft/kibana-8.1.0/config/</span><br><span class="line"><span class="comment"># 生成 crt 文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/soft/kibana-8.1.0/config</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> kibana.csr -signkey kibana.key -out kibana.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===============================</span></span><br><span class="line">创建<span class="string">"kibana_system"</span>用户</span><br><span class="line"><span class="built_in">cd</span> /usr/soft/elasticsearch8</span><br><span class="line">bin\elasticsearch-reset-password -u kibana_system</span><br><span class="line">y</span><br><span class="line"><span class="comment"># 保存新的密码</span></span><br></pre></td></tr></table></figure><h3 id="2-3-修改配置文件">2.3 修改配置文件</h3><p><code>/usr/soft/kibana-8.1.0/config/kibana.yml</code>,注意修改elasticsearch.password的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line">server.port: 5601</span><br><span class="line"><span class="comment"># 服务主机名</span></span><br><span class="line">server.host: <span class="string">"master"</span></span><br><span class="line"><span class="comment"># 国际化 - 中文</span></span><br><span class="line">i18n.locale: <span class="string">"zh-CN"</span></span><br><span class="line"><span class="comment"># ES 服务主机地址</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">"https://master:9200"</span>]</span><br><span class="line"><span class="comment"># 访问 ES 服务的账号密码</span></span><br><span class="line">elasticsearch.username: <span class="string">"kibana_system"</span></span><br><span class="line">elasticsearch.password: <span class="string">"uwFAc4V9vl9WZVeACrYg"</span></span><br><span class="line">elasticsearch.ssl.verificationMode: none</span><br><span class="line">elasticsearch.ssl.certificateAuthorities: [ <span class="string">"/usr/soft/elasticsearch8/config/certs/elasticsearch-ca.pem"</span> ]</span><br><span class="line">server.ssl.enabled: <span class="literal">true</span></span><br><span class="line">server.ssl.certificate: /usr/soft/kibana-8.1.0/config/kibana.crt</span><br><span class="line">server.ssl.key: /usr/soft/kibana-8.1.0/config/kibana.key</span><br></pre></td></tr></table></figure><p>修改软件目录拥有者，如果使用elastic用户会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/soft/kibana-8.1.0</span><br><span class="line">chown -R es:es /usr/soft/kibana-8.1.0/</span><br></pre></td></tr></table></figure><h3 id="2-4-启动">2.4 启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su es</span><br><span class="line"><span class="comment"># 启动软件</span></span><br><span class="line">bin/kibana</span><br><span class="line"><span class="comment"># 也可以后台启动</span></span><br><span class="line">nohup /usr/soft/kibana-8.1.0/bin/kibana &gt;kibana.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>访问<code>https://192.168.3.34:5601/</code>(使用elastic用户登录)</p><h1>三、Elasticsearch 基础功能</h1><p>下面所有功能都在Kibana的控制台进行演示操作</p><h2 id="1、索引操作">1、索引操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line"><span class="comment"># PUT索引名称(小写)</span></span><br><span class="line"><span class="comment"># 如果重复会报错</span></span><br><span class="line">PUT test_index</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================================</span></span><br><span class="line"><span class="comment"># 可以增加配置</span></span><br><span class="line">PUT test_index_1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aliases"</span>: &#123;</span><br><span class="line">    <span class="string">"test1"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># ES不允许修改索引信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD索引,http200表示成功，不存在时404</span></span><br><span class="line">head test_index</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================</span></span><br><span class="line"><span class="comment"># 删除,如果删除一个不存在的索引，那么会返回错误信息</span></span><br><span class="line">DELETE test_index_1</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># 查询索引，返回索引详细信息</span></span><br><span class="line">GET test_index</span><br><span class="line"><span class="comment"># 查询所有索引</span></span><br><span class="line">GET _cat/indices</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>内容</strong></th><th><strong>含义</strong></th><th><strong>具体描述</strong></th></tr></thead><tbody><tr><td>green</td><td>health</td><td>当前服务器健康状态：</td></tr><tr><td><strong>green</strong>(集群完整) <strong>yellow</strong>(单点正常、集群不完整) red(单点不正常)</td><td></td><td></td></tr><tr><td>open</td><td>status</td><td>索引打开、关闭状态</td></tr><tr><td>myindex</td><td>index</td><td>索引名</td></tr><tr><td>Swx2xWHLR6yv23kTrK3sAg</td><td>uuid</td><td>索引统一编号</td></tr><tr><td>1</td><td>pri</td><td>主分片数量</td></tr><tr><td>1</td><td>rep</td><td>副本数量</td></tr><tr><td>0</td><td>docs.count</td><td>可用文档数量</td></tr><tr><td>0</td><td>docs.deleted</td><td>文档删除状态（逻辑删除）</td></tr><tr><td>450b</td><td>store.size</td><td>主分片和副分片整体占空间大小</td></tr><tr><td>225b</td><td>pri.store.size</td><td>主分片占空间大小</td></tr></tbody></table><h2 id="2、文档操作">2、文档操作</h2><blockquote><p>文档是 ES 软件搜索数据的最小单位, 不依赖预先定义的模式，所以可以将文档类比为表的一行JSON类型的数据。我们知道关系型数据库中，要提前定义字段才能使用，在Elasticsearch 中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文档</span></span><br><span class="line">PUT test_doc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处因为没有指定数据唯一性标识，所以无法使用PUT 请求，只能使用POST 请求，且对数据会生成随机的唯一性标识。否则会返回错误信息</span></span><br><span class="line">PUT test_doc/_doc/1001</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>:1001,</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"shawn"</span>,</span><br><span class="line">  <span class="string">"age"</span>:18</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">POST test_doc/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>:1001,</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"shawn1"</span>,</span><br><span class="line">  <span class="string">"age"</span>:25</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在创建数据时，指定唯一性标识，那么请求范式 POST，PUT 都可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询文档</span></span><br><span class="line"><span class="comment"># 根据唯一性标识可以查询对应的文档，如果没有唯一标识，会失败</span></span><br><span class="line">GET test_doc/_doc/1001</span><br><span class="line"><span class="comment"># 查询文档中所有数据</span></span><br><span class="line">GET test_doc/_search</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文档</span></span><br><span class="line"><span class="comment"># 修改文档本质上和新增文档是一样的，如果存在就修改，如果不存在就新增</span></span><br><span class="line">PUT test_doc/_doc/1001</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>:10011,</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"shawn"</span>,</span><br><span class="line">  <span class="string">"age"</span>:18</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># POST也可以</span></span><br><span class="line">POST test_doc/_doc/jYuBboYBpWpNx-SxIIHr</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>:10011,</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"shawn"</span>,</span><br><span class="line">  <span class="string">"age"</span>:18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文档</span></span><br><span class="line"><span class="comment"># 删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）</span></span><br><span class="line"><span class="comment"># 不写主键标识会报错</span></span><br><span class="line">DELETE test_doc/_doc/1002</span><br></pre></td></tr></table></figure><h2 id="3、搜索">3、搜索</h2><h3 id="3-1-数据搜索">3.1 数据搜索</h3><p>首先进行数据准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">PUT test_query</span><br><span class="line"></span><br><span class="line">PUT test_query/_bulk</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"test_query"</span>,<span class="string">"_id"</span>:<span class="string">"1001"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1001"</span>, <span class="string">"name"</span>:<span class="string">"zhang san"</span>,<span class="string">"age"</span>:30&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"test_query"</span>,<span class="string">"_id"</span>:<span class="string">"1002"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1002"</span>, <span class="string">"name"</span>:<span class="string">"li si"</span>,<span class="string">"age"</span>:40&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"test_query"</span>,<span class="string">"_id"</span>:<span class="string">"1003"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1003"</span>, <span class="string">"name"</span>:<span class="string">"wang wu"</span>,<span class="string">"age"</span>:50&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"test_query"</span>,<span class="string">"_id"</span>:<span class="string">"1004"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1004"</span>, <span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"age"</span>:30&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"test_query"</span>,<span class="string">"_id"</span>:<span class="string">"1005"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1005"</span>, <span class="string">"name"</span>:<span class="string">"li_si"</span>,<span class="string">"age"</span>:40&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"test_query"</span>,<span class="string">"_id"</span>:<span class="string">"1006"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"1006"</span>, <span class="string">"name"</span>:<span class="string">"wang_wu"</span>,<span class="string">"age"</span>:50&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===============================================</span></span><br><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line">GET test_query/_search</span><br><span class="line">GET test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Match是分词查湖ES会将数据分词（关键词）保存</span></span><br><span class="line">GET test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"zhang li"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整关键词匹配，发现没有查到</span></span><br><span class="line"><span class="comment"># 因为按分词保存了，并没有完整词语的保存信息</span></span><br><span class="line">GET test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"term"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: &#123;</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"zhang san"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对查询结果进行限制</span></span><br><span class="line">GET test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_source"</span>: [<span class="string">"name"</span>,<span class="string">"age"</span>], </span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"zhang li"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合查询</span></span><br><span class="line">GET test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"match"</span>: &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"zhang li"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"match"</span>: &#123;</span><br><span class="line">            <span class="string">"age"</span>: <span class="string">"40"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序查询</span></span><br><span class="line">GET test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"zhang li"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"age"</span>: &#123;</span><br><span class="line">        <span class="string">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页查询</span></span><br><span class="line">GET test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"from"</span>: 0,</span><br><span class="line">  <span class="string">"size"</span>: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-聚合搜索">3.2 聚合搜索</h3><blockquote><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值、平均值等等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组操作</span></span><br><span class="line">get test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>:&#123;</span><br><span class="line">    <span class="string">"ageGroup"</span>:&#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"size"</span>:0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组和聚合(求和)</span></span><br><span class="line">get test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>:&#123;</span><br><span class="line">    <span class="string">"ageGroup"</span>:&#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"ageSum"</span>: &#123;</span><br><span class="line">          <span class="string">"sum"</span>: &#123;</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"age"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"size"</span>:0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求年龄平均值</span></span><br><span class="line">get test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>:&#123;</span><br><span class="line">    <span class="string">"ageGroup"</span>:&#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"age"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"aveAge"</span>: &#123;</span><br><span class="line">          <span class="string">"avg"</span>: &#123;</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"age"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"size"</span>:0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取前几名topN</span></span><br><span class="line">get test_query/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>:&#123;</span><br><span class="line">    <span class="string">"top3"</span>:&#123;</span><br><span class="line">     <span class="string">"top_hits"</span>: &#123;</span><br><span class="line">       <span class="string">"sort"</span>: [&#123;</span><br><span class="line">         <span class="string">"age"</span>: &#123;</span><br><span class="line">           <span class="string">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;], </span><br><span class="line">       <span class="string">"size"</span>: 3</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"size"</span>:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、索引模板">4、索引模板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模板名称小写</span></span><br><span class="line">PUT _template/mytemplate</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"index_patterns"</span> :[</span><br><span class="line">    <span class="string">"my*"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">      <span class="string">"index"</span>:&#123;</span><br><span class="line">        <span class="string">"number_of_shards"</span>:<span class="string">"2"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"mappings"</span>: &#123;</span><br><span class="line">      <span class="string">"properties"</span>: &#123;</span><br><span class="line">        <span class="string">"now"</span>:&#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">          <span class="string">"format"</span>: <span class="string">"yyyy/MM/dd"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 用法my开头的应用</span></span><br><span class="line">GET _template/mytemplate</span><br><span class="line">PUT my_test_temp</span><br><span class="line">GET my_test_temp</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">DELETE _template/mytemplate</span><br></pre></td></tr></table></figure><h2 id="5、中文分词">5、中文分词</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们在使用 Elasticsearch 官方默认的分词插件时会发现，其对中文的分词效果不佳，经常分词后得效果不是我们想要得</span></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"chinese"</span>, </span><br><span class="line">  <span class="string">"text"</span>: [<span class="string">"我是一个学生"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能够更好地对中文进行搜索和查询，就需要在Elasticsearch 中集成好的分词器插件， 而 IK 分词器就是用于对中文提供支持得插件，下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener" title="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>注意和ES版本匹配，我们这里选择 8.1.0，在安装目录得plugins 目中，将下载得压缩包直接解压缩得里面即可，最后重启 **Elasticsearch **服务</p><h3 id="5-1-使用IK分词器">5.1 使用IK分词器</h3><p>IK 分词器提供了两个分词算法：</p><ul><li>ik_smart: 最少切分</li><li>Ik_max_word:最细粒度划分</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">  <span class="string">"text"</span>: [<span class="string">"我是一个三好学生"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-自定义分词效果">5.2 自定义分词效果</h3><p>我们在使用 IK 分词器时会发现其实有时候分词的效果也并不是我们所期待的,有时一些特殊得术语会被拆开，比如上面得中文“一个学生”希望不要拆开，怎么做呢？其实 IK 插件给我们提供了自定义分词字典，我们就可以添加自己想要保留得字了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先进入插件config，创建test.cfg，将一句话放进去</span></span><br><span class="line"><span class="comment"># 接下来我们修改配置文件：IKAnalyzer.cfg.xml</span></span><br><span class="line"><span class="comment"># 用户可以在这里配置自己的扩展字典</span></span><br><span class="line">&lt;entry key=<span class="string">"ext_dict"</span>&gt;test.dic&lt;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后重启进行测试</span></span><br></pre></td></tr></table></figure><h2 id="6、文档得分">6、文档得分</h2><h3 id="6-1-打分机制举例">6.1 打分机制举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PUT test_score</span><br><span class="line"></span><br><span class="line">PUT test_score/_doc/1001</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"text"</span>:<span class="string">"zhang san ni hao"</span></span><br><span class="line">&#125;</span><br><span class="line">PUT test_score/_doc/1002</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"text"</span>:<span class="string">"zhang si"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 可以发现得分是不一样的，匹配度</span></span><br><span class="line">GET test_score/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"zhang"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 详细信息查看</span></span><br><span class="line">GET test_score/_search?explain=<span class="literal">true</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"zhang"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-打分机制详解">6.2 打分机制详解</h3><p>Lucene 和ES 的得分机制是一个基于词频和逆文档词频的公式，简称为 TF-IDF 公式(具体可以自行查阅资料)</p><ul><li>TF (词频)</li></ul><p>Term Frequency : 搜索文本中的各个词条（term）在查询文本中出现了多少次， 出现次数越多，就越相关，得分会比较高</p><ul><li>IDF(逆文档频率)</li></ul><p>Inverse Document Frequency : 搜索文本中的各个词条（term）在整个索引的所有文档中出现了多少次，出现的次数越多，说明越不重要，也就越不相关，得分就比较低</p><h3 id="6-3-修改查询顺序">6.3 修改查询顺序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以通过修改权重来获得不同的score</span></span><br><span class="line">GET /testscore/_search?explain=<span class="literal">true</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"match"</span>: &#123;</span><br><span class="line">            <span class="string">"title"</span>: &#123;</span><br><span class="line">              <span class="string">"query"</span>: <span class="string">"Hadoop"</span>,<span class="string">"boost"</span>: 1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>四、Elasticsearch进阶功能</h1><h2 id="1、Java-API-操作">1、Java API 操作</h2><p>随着Elasticsearch 8.x 新版本的到来， Type 的概念被废除，为了适应这种数据结构的改变， Elasticsearch 官方从 7.15 版本开始建议使用新的 Elasticsearch Java Client</p><h3 id="1-1-增加依赖关系">1.1 增加依赖关系</h3><p>首先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elastic.version</span>&gt;</span>8.1.0<span class="tag">&lt;/<span class="name">elastic.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.plugin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>x-pack-sql-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>co.elastic.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elastic.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.json-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-获取客户端对象">1.2 获取客户端对象</h3><p>就像连接MySQL 数据库一样， Java 通过客户端操作 Elasticsearch 也要获取到连接后才可以。咱们现在使用的基于 https 安全的 Elasticsearch 服务，所以首先我们需要将之前的证书进行一个转换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/soft/elasticsearch8/config/certs/</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 生成证书</span></span><br><span class="line">openssl pkcs12 -<span class="keyword">in</span> elastic-stack-ca.p12 -clcerts -nokeys -out java-ca.crt</span><br></pre></td></tr></table></figure><p>在根目录创建certs文件夹，将证书放入certs中，配置证书后，我们就可以采用https 方式获取连接对象了。java创建类，如果启动不报错即成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initEsConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initEsConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取客户端对象</span></span><br><span class="line">        <span class="keyword">final</span> CredentialsProvider credentialsProvider = <span class="keyword">new</span> BasicCredentialsProvider();</span><br><span class="line">        <span class="comment">// 注意这里改成自己的账号密码</span></span><br><span class="line">        credentialsProvider.setCredentials(AuthScope.ANY,</span><br><span class="line">                <span class="keyword">new</span> UsernamePasswordCredentials(<span class="string">"elastic"</span>, <span class="string">"XV=4ZU5OzQEk46Z1T_Zl"</span>));</span><br><span class="line"></span><br><span class="line">        Path caCertificatePath = Paths.get(<span class="string">"es/certs/java-ca.crt"</span>);</span><br><span class="line">        CertificateFactory factory =</span><br><span class="line">                CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">        Certificate trustedCa;</span><br><span class="line">        <span class="keyword">try</span> (InputStream is = Files.newInputStream(caCertificatePath)) &#123;</span><br><span class="line">            trustedCa = factory.generateCertificate(is);</span><br><span class="line">        &#125;</span><br><span class="line">        KeyStore trustStore = KeyStore.getInstance(<span class="string">"pkcs12"</span>);</span><br><span class="line">        trustStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        trustStore.setCertificateEntry(<span class="string">"ca"</span>, trustedCa);</span><br><span class="line">        SSLContextBuilder sslContextBuilder = SSLContexts.custom()</span><br><span class="line">                .loadTrustMaterial(trustStore, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">final</span> SSLContext sslContext = sslContextBuilder.build();</span><br><span class="line">        <span class="comment">// 主机名改成自己的</span></span><br><span class="line">        RestClientBuilder builder = RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"master"</span>, <span class="number">9200</span>, <span class="string">"https"</span>))</span><br><span class="line">                .setHttpClientConfigCallback(<span class="keyword">new</span> RestClientBuilder.HttpClientConfigCallback() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> HttpAsyncClientBuilder <span class="title">customizeHttpClient</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpAsyncClientBuilder httpClientBuilder)</span> </span>&#123;</span><br><span class="line">                     <span class="keyword">return</span> httpClientBuilder.setSSLContext(sslContext)</span><br><span class="line">                             .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)</span><br><span class="line">                             .setDefaultCredentialsProvider(credentialsProvider);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">        RestClient restClient = builder.build();</span><br><span class="line">        ElasticsearchTransport transport = <span class="keyword">new</span> RestClientTransport(</span><br><span class="line">                restClient, <span class="keyword">new</span> JacksonJsonpMapper());</span><br><span class="line">        <span class="comment">// 同步客户端对象</span></span><br><span class="line">        ElasticsearchClient client = <span class="keyword">new</span> ElasticsearchClient(transport);</span><br><span class="line">        <span class="comment">// 异步</span></span><br><span class="line"><span class="comment">//        ElasticsearchAsyncClient asyncClient = new ElasticsearchAsyncClient(transport);</span></span><br><span class="line">        transport.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是spring，也可以使用http</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//注入IOC容器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ElasticsearchClient <span class="title">elasticsearchClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestClient client = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>,<span class="string">"http"</span>)).build();</span><br><span class="line">        ElasticsearchTransport transport = <span class="keyword">new</span> RestClientTransport(client,<span class="keyword">new</span> JacksonJsonpMapper());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ElasticsearchClient(transport);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-索引操作">1.3 索引操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ElasticsearchClient client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ElasticsearchAsyncClient asyncClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ElasticsearchTransport transport;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initEsConnection();</span><br><span class="line">        operationIndex();</span><br><span class="line">        transport.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operationIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建索引</span></span><br><span class="line">        <span class="comment">// 使用构建器模式创建，ESAPI都是这样</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest.Builder().index(<span class="string">"myindex"</span>).build();</span><br><span class="line">        <span class="keyword">final</span> CreateIndexResponse createIndexResponse = client.indices().create(request);</span><br><span class="line">        System.out.println(<span class="string">" 创建索引成功： ："</span> + createIndexResponse.index());</span><br><span class="line">        <span class="comment">// 查询索引</span></span><br><span class="line">        GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest.Builder().index(<span class="string">"myindex"</span>).build();</span><br><span class="line">        <span class="keyword">final</span> GetIndexResponse getIndexResponse = client.indices().get(getIndexRequest);</span><br><span class="line">        System.out.println( <span class="string">"索引查询成功： ："</span> + getIndexResponse.result());</span><br><span class="line">        <span class="comment">// 删除索引</span></span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = <span class="keyword">new</span> DeleteIndexRequest.Builder().index(<span class="string">"myindex"</span>).build();</span><br><span class="line">        <span class="keyword">final</span> DeleteIndexResponse delete = client.indices().delete(deleteIndexRequest);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> acknowledged = delete.acknowledged();</span><br><span class="line">        System.out.println(<span class="string">" 删除索引成功： ："</span> + acknowledged);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initEsConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取客户端对象</span></span><br><span class="line">        <span class="keyword">final</span> CredentialsProvider credentialsProvider = <span class="keyword">new</span> BasicCredentialsProvider();</span><br><span class="line">        credentialsProvider.setCredentials(AuthScope.ANY,</span><br><span class="line">                <span class="keyword">new</span> UsernamePasswordCredentials(<span class="string">"elastic"</span>, <span class="string">"XV=4ZU5OzQEk46Z1T_Zl"</span>));</span><br><span class="line"></span><br><span class="line">        Path caCertificatePath = Paths.get(<span class="string">"es/certs/java-ca.crt"</span>);</span><br><span class="line">        CertificateFactory factory =</span><br><span class="line">                CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">        Certificate trustedCa;</span><br><span class="line">        <span class="keyword">try</span> (InputStream is = Files.newInputStream(caCertificatePath)) &#123;</span><br><span class="line">            trustedCa = factory.generateCertificate(is);</span><br><span class="line">        &#125;</span><br><span class="line">        KeyStore trustStore = KeyStore.getInstance(<span class="string">"pkcs12"</span>);</span><br><span class="line">        trustStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        trustStore.setCertificateEntry(<span class="string">"ca"</span>, trustedCa);</span><br><span class="line">        SSLContextBuilder sslContextBuilder = SSLContexts.custom()</span><br><span class="line">                .loadTrustMaterial(trustStore, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">final</span> SSLContext sslContext = sslContextBuilder.build();</span><br><span class="line">        RestClientBuilder builder = RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"master"</span>, <span class="number">9200</span>, <span class="string">"https"</span>))</span><br><span class="line">                .setHttpClientConfigCallback(<span class="keyword">new</span> RestClientBuilder.HttpClientConfigCallback() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> HttpAsyncClientBuilder <span class="title">customizeHttpClient</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpAsyncClientBuilder httpClientBuilder)</span> </span>&#123;</span><br><span class="line">                     <span class="keyword">return</span> httpClientBuilder.setSSLContext(sslContext)</span><br><span class="line">                             .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)</span><br><span class="line">                             .setDefaultCredentialsProvider(credentialsProvider);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">        RestClient restClient = builder.build();</span><br><span class="line">        transport = <span class="keyword">new</span> RestClientTransport(</span><br><span class="line">                restClient, <span class="keyword">new</span> JacksonJsonpMapper());</span><br><span class="line">        <span class="comment">// 同步客户端对象</span></span><br><span class="line">        client = <span class="keyword">new</span> ElasticsearchClient(transport);</span><br><span class="line">        <span class="comment">// 异步</span></span><br><span class="line">        asyncClient = <span class="keyword">new</span> ElasticsearchAsyncClient(transport);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Lambda操作函数如下</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operationIndexLambda</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建索引</span></span><br><span class="line">        <span class="keyword">final</span> Boolean acknowledged = client.indices().create(p -&gt; p.index(<span class="string">"myindex1"</span>)).acknowledged();</span><br><span class="line">        System.out.println(<span class="string">"创建索引成功"</span>);</span><br><span class="line">        <span class="comment">// 获取索引</span></span><br><span class="line">        System.out.println(client.indices().get(req -&gt; req.index(<span class="string">"myindex1"</span>)));</span><br><span class="line">        <span class="comment">// 删除索引</span></span><br><span class="line">        client.indices().delete(reqbuilder -&gt; reqbuilder.index(<span class="string">"myindex1"</span>)).acknowledged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-文档操作">1.4 文档操作</h3><p>Users自行创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operationDocument</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Users user = <span class="keyword">new</span> Users(<span class="string">"shawn"</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">// 创建文档</span></span><br><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest.Builder&lt;Users&gt;()</span><br><span class="line">            .index(<span class="string">"myindex"</span>).id(<span class="string">"1001"</span>).document(user).build();</span><br><span class="line">    <span class="keyword">final</span> IndexResponse index = client.index(indexRequest);</span><br><span class="line">    System.out.println(<span class="string">" 文档操作结果 :"</span> + index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量创建文档</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;BulkOperation&gt; operations = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i= <span class="number">1</span>;i &lt;= <span class="number">5</span>; i++ ) &#123;</span><br><span class="line">        CreateOperation&lt;Users&gt; otObj = <span class="keyword">new</span> CreateOperation.Builder&lt;Users&gt;()</span><br><span class="line">                .index(<span class="string">"myindex"</span>)</span><br><span class="line">                .id(<span class="string">"200"</span> + i)</span><br><span class="line">                .document(<span class="keyword">new</span> Users(<span class="string">"shawn"</span> + i, <span class="number">18</span> + i))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> BulkOperation bulk = <span class="keyword">new</span></span><br><span class="line">                BulkOperation.Builder().create(otObj).build();</span><br><span class="line">        operations.add(bulk);</span><br><span class="line">    &#125;</span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest.Builder().operations(operations).build();</span><br><span class="line">    <span class="keyword">final</span> BulkResponse bulkResponse = client.bulk(bulkRequest);</span><br><span class="line">    System.out.println(<span class="string">" 数据操作成功： ："</span>+ bulkResponse);</span><br><span class="line">    <span class="comment">// 删除文档</span></span><br><span class="line">    DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest.Builder().index(<span class="string">"myindex"</span>).id(<span class="string">"1001"</span>).build();</span><br><span class="line">    client.delete(deleteRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operationDocumentLambda</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Users user = <span class="keyword">new</span> Users(<span class="string">"shawn"</span>, <span class="number">18</span>);</span><br><span class="line">    List&lt;Users&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    userList.add(user);</span><br><span class="line">    <span class="comment">// 创建文档</span></span><br><span class="line">    System.out.println(</span><br><span class="line">            client.index(req-&gt;</span><br><span class="line">                    req.index(<span class="string">"myindex"</span>)</span><br><span class="line">                            .id(<span class="string">"1001"</span>)</span><br><span class="line">                            .document(user)).result());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量创建文档</span></span><br><span class="line">    client.bulk(req -&gt;&#123;</span><br><span class="line">            userList.forEach(</span><br><span class="line">                    u -&gt; &#123;</span><br><span class="line">                        req.operations(</span><br><span class="line">                                b -&gt; &#123;</span><br><span class="line">                                    b.create(d -&gt;</span><br><span class="line">                                            d.id(u.getAge() + <span class="string">"200"</span>)</span><br><span class="line">                                                    .index(<span class="string">"myindex"</span>)</span><br><span class="line">                                                    .document(u));</span><br><span class="line">                                    <span class="keyword">return</span> b;</span><br><span class="line">                                &#125;</span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">        <span class="keyword">return</span> req;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文档</span></span><br><span class="line">    client.delete(req -&gt; req.index(<span class="string">"myindex"</span>).id(<span class="string">"1001"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-文档查询">1.5 文档查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operationSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> SearchRequest.Builder searchRequestBuilder = <span class="keyword">new</span></span><br><span class="line">            SearchRequest.Builder().index(<span class="string">"myindex1"</span>);</span><br><span class="line">    MatchQuery matchQuery = <span class="keyword">new</span></span><br><span class="line">            MatchQuery.Builder().field(<span class="string">"city"</span>).query(FieldValue.of(<span class="string">"beijing"</span>)).build();</span><br><span class="line">    Query query = <span class="keyword">new</span> Query.Builder().match(matchQuery).build();</span><br><span class="line">    searchRequestBuilder.query(query);</span><br><span class="line">    SearchRequest searchRequest = searchRequestBuilder.build();</span><br><span class="line">    <span class="keyword">final</span> SearchResponse&lt;Object&gt; search = client.search(searchRequest, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(search);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operationSearchLambda</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    client.search(</span><br><span class="line">            req -&gt; &#123;</span><br><span class="line">                req.query(</span><br><span class="line">                        q -&gt;</span><br><span class="line">                            q.match(</span><br><span class="line">                                    m -&gt; m.field(<span class="string">"city"</span>).query(<span class="string">"beijing"</span>)</span><br><span class="line">                            ));</span><br><span class="line">                <span class="keyword">return</span> req;</span><br><span class="line">            &#125;,Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-客户端异步操作">1.6 客户端异步操作</h3><p>ES Java API 提供了同步和异步的两种客户端处理。之前演示的都是同步处理，异步客<br>户端的处理和同步客户端处理的 API 基本原理相同，不同的是需要异步对返回结果进行相应的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operationAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 创建索引</span></span><br><span class="line">      asyncClient.indices().create(</span><br><span class="line">              req -&gt; req.index(<span class="string">"newindex"</span>)</span><br><span class="line">      ).thenApply(</span><br><span class="line">              CreateIndexResponse::acknowledged</span><br><span class="line">      ).whenComplete(</span><br><span class="line">      (resp, error) -&gt; &#123;</span><br><span class="line">          System.out.println(<span class="string">"回调函数"</span>);</span><br><span class="line">          <span class="keyword">if</span> (!resp) &#123;</span><br><span class="line">              System.out.println();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              error.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2、EQL操作">2、EQL操作</h2><blockquote><p>EQL 的全名是 Event Query Language (EQL)。事件查询语言（EQL）是一种用于基于事件的时间序列数据（例如日志，指标和跟踪）的查询语言。在 Elastic Security 平台上，当输入有效的 EQL 时，查询会在数据节点上编译，执行查询并返回结果。这一切都快速、并行地发生，让用户立即看到结果。</p></blockquote><p>EQL 的优点：</p><ul><li>EQL 使你可以表达事件之间的关系，许多查询语言允许您匹配单个事件。EQL 使你可以匹配不同事件类别和时间跨度的一系列事件</li><li>EQL 的学习曲线很低。EQL 语法看起来像其他常见查询语言，例如 SQL。 EQL 使你可以直观地编写和读取查询，从而可以进行快速，迭代的搜索</li><li>EQL 设计用于安全用例。尽管你可以将其用于任何基于事件的数据，但我们创建了 EQL 来进行威胁搜寻。 EQL不仅支持危害指标（IOC）搜索，而且可以描述超出IOC 范围的活动。</li></ul><h3 id="2-1-基础语法">2.1 基础语法</h3><p>要运行 EQL 搜索，搜索到的数据流或索引必须包含时间戳和事件类别字段。 默认情况下，EQL 使用Elastic 通用模式（ECS）中的 @timestamp 和 event.category 字段。<code>@timestamp</code> 表示时间戳，<code>event.category</code> 表示事件分类。咱们准备一些简单的数据,用于表示电商网站页面跳转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批量增加数据</span></span><br><span class="line">PUT /gmall</span><br><span class="line">PUT _bulk</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"gmall"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"@timestamp"</span>:<span class="string">"2022-06-01T12:00:00.00+08:00"</span>,<span class="string">"event"</span>:&#123;<span class="string">"category"</span>:<span class="string">"page"</span>&#125;,<span class="string">"page"</span>:&#123;<span class="string">"session_id"</span>:<span class="string">"42FC7E13-CB3E-5C05-0000-0010A0125101"</span>,<span class="string">"last_page_id"</span>:<span class="string">""</span>,<span class="string">"page_id"</span>:<span class="string">"login"</span>,<span class="string">"user_id"</span>:<span class="string">""</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"gmall"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"@timestamp"</span>:<span class="string">"2022-06-01T12:01:00.00+08:00"</span>,<span class="string">"event"</span>:&#123;<span class="string">"category"</span>:<span class="string">"page"</span>&#125;,<span class="string">"page"</span>:&#123;<span class="string">"session_id"</span>:<span class="string">"42FC7E13-CB3E-5C05-0000-0010A0125101"</span>,<span class="string">"last_page_id"</span>:<span class="string">"login"</span>,<span class="string">"page_id"</span>:<span class="string">"good_list"</span>,<span class="string">"user_id"</span>:<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"gmall"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"@timestamp"</span>:<span class="string">"2022-06-01T12:05:00.00+08:00"</span>,<span class="string">"event"</span>:&#123;<span class="string">"category"</span>:<span class="string">"page"</span>&#125;,<span class="string">"page"</span>:&#123;<span class="string">"session_id"</span>:<span class="string">"42FC7E13-CB3E-5C05-0000-0010A0125101"</span>,<span class="string">"last_page_id"</span>:<span class="string">"good_list"</span>,<span class="string">"page_id"</span>:<span class="string">"good_detail"</span>,<span class="string">"user_id"</span>:<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">GET gmall/_search</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据窗口搜索</span></span><br><span class="line"><span class="comment"># 在事件响应过程中，有很多时候，了解特定时间发生的所有事件是很有用的。使用一种名为any 的特殊事件类型，针对所有事件进行匹配，如果想要匹配特定事件，就需要指明事件分类名称</span></span><br><span class="line">GET /gmall/_eql/search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>:<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    any where page.user_id == "</span>1<span class="string">"</span></span><br><span class="line"><span class="string">  "</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计符合条件的事件</span></span><br><span class="line">GET /gmall/_eql/search</span><br><span class="line">&#123;<span class="string">"query"</span>:<span class="string">"\n    any where true\n  "</span>,<span class="string">"filter"</span>:&#123;<span class="string">"range"</span>:&#123;<span class="string">"@timestamp"</span>:&#123;<span class="string">"gte"</span>:<span class="string">"1654056000000"</span>,<span class="string">"lt"</span>:<span class="string">"1654056005000"</span>&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件序列</span></span><br><span class="line">GET /gmall/_eql/search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">sequence by page.session_id</span></span><br><span class="line"><span class="string">[page where page.page_id=="</span>login<span class="string">"]</span></span><br><span class="line"><span class="string">[page where page.page_id=="</span>good_detail<span class="string">"]</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-安全检测">2.2 安全检测</h3><blockquote><p>EQL在 Elastic Securit 中被广泛使用。 实际应用时，我们可以使用 EQL 语言来进行检测安全威胁和其他可疑行为</p></blockquote><p>例如regsvr32.exe 是一个内置的命令行实用程序，用于在 Windows 中注册.dll 库。作为本机工具，regsvr32.exe 具有受信任的状态，从而使它可以绕过大多数允许列表软件和脚本阻止程序。 有权访问用户命令行的攻击者可以使用 regsvr32.exe 通过.dll 库运行恶意脚本，即使在其他情况下也不允许这些脚本运行。regsvr32 滥用的一种常见变体是 Squfullydoo 攻击。在 Squfullydoo 攻击中，regsvr32.exe 命令使用 scrobj.dll 库注册并运行远程脚本。可以通过ES查找恶意攻击</p><h2 id="3、SQL操作">3、SQL操作</h2><h3 id="3-1-概述">3.1 概述</h3><blockquote><p><a href="https://www.elastic.co/cn/what-is/elasticsearch-sql" target="_blank" rel="noopener" title="https://www.elastic.co/cn/what-is/elasticsearch-sql">https://www.elastic.co/cn/what-is/elasticsearch-sql</a></p></blockquote><p>一般使用Elasticsearch 的时候，会使用 Query DSL 来查询数据，从 Elasticsearch6.3 版本以后，Elasticsearch 已经支持 SQL 查询了。Elasticsearch SQL 是一个X-Pack 组件，它允许针对Elasticsearch 实时执行类似 SQL 的查询。无论使用 REST 接口，命令行还是 JDBC，任何客户端都可以使用 SQL 对Elasticsearch 中的数据进行原生搜索和聚合数据。可以将 Elasticsearch SQL 看作是一种翻译器，它可以将SQL 翻译成Query DSL。Elasticsearch SQL 具有如下特性：</p><ul><li>原生支持：Elasticsearch SQL 是专门为 Elasticsearch 打造的。</li><li>没有额外的零件：无需其他硬件，处理器，运行环境或依赖库即可查询 Elasticsearch， Elasticsearch SQL 直接在 Elasticsearch 内部运行。</li><li>轻巧高效：Elasticsearch SQL 并未抽象化其搜索功能，相反的它拥抱并接受了 SQL 来实现全文搜索，以简洁的方式实时运行全文搜索。</li></ul><h3 id="3-2-SQL和Elasticsearch对应关系">3.2 SQL和Elasticsearch对应关系</h3><table><thead><tr><th><strong>SQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Column</td><td>field</td><td>对比两个，数据都存储在命名条目中，具有多种数据类型，包含一个值。SQL 将此类条目称为列，而 Elasticsearch 称为字段。请注意， 在 Elasticsearch 中，一个字段可以包含多个相同类型的值（本质上是一个列表），而在 SQL 中，一个列可以只包含一个所述类型的值。Elasticsearch SQL 将尽最大努力保留 SQL 语义，并根据查询拒绝那些返回具有多个值的字段的查询</td></tr><tr><td>Row</td><td>document</td><td>Columns 和fields 本身不存在；它们是 row 或 a 的一部分document。两者的语义略有不同：row 趋于严格（并且有更多的强制执行），而document 趋于更加灵活或松散（同时仍然具有结构）</td></tr><tr><td>Table</td><td>Index</td><td>执行查询的目标</td></tr><tr><td>Schema</td><td>Mapping</td><td>在RDBMS 中， schem 主要是表的命名空间，通常用作安全边界。Elasticsearch 没有为它提供等效的概念。但是，当启用安全性时，Elasticsearch 会自动应用安全性强制，以便角色只能看到它被允许访问的数据</td></tr><tr><td>Database</td><td>Cluster实例</td><td>在SQL 中， catalog 或者 database 从概念上可以互换使用，表示一组模式，即多个表。在 Elasticsearch 中，可用的索引集被分组在一个cluster ，语义也有所不同。 database 本质上是另一个命名空间（可能对数据的存储方式有一些影响），而 Elasticsearch cluster 是一个运行时实例，或者更确切地说是一组至少一个 Elasticsearch 实例（通常是分布式行）。在实践中，这意味着虽然在 SQL 中，一个实例中可能有多个目录，但在 Elasticsearch 中，一个目录仅限于一个</td></tr></tbody></table><h3 id="3-3-数据准备与条件查询">3.3 数据准备与条件查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT my-sql-index/_bulk?refresh</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"JAVA"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"JAVA"</span>,<span class="string">"author"</span>:<span class="string">"zhangsan"</span>,<span class="string">"release_date"</span>:<span class="string">"2022-05-01"</span>,<span class="string">"page_count"</span>:561&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"BIGDATA"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"BIGDATA"</span>,<span class="string">"author"</span>:<span class="string">"lisi"</span>,<span class="string">"release_date"</span>:<span class="string">"2022-05-02"</span>,<span class="string">"page_count"</span>:482&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_id"</span>:<span class="string">"SCALA"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"SCALA"</span>,<span class="string">"author"</span>:<span class="string">"wangwu"</span>,<span class="string">"release_date"</span>:<span class="string">"2022-05-03"</span>,<span class="string">"page_count"</span>:604&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个数据查询</span></span><br><span class="line"><span class="comment"># SQL</span></span><br><span class="line"><span class="comment"># 这里的表就是索引</span></span><br><span class="line"><span class="comment">#可以通过 format 参数控制返回结果的格式，默认为 json格式</span></span><br><span class="line"><span class="comment"># txt:表示文本格式，看起来更直观点. # csv:使用逗号隔开的数据</span></span><br><span class="line"><span class="comment"># json:JSON 格式数据</span></span><br><span class="line"><span class="comment"># tsv: 使用 tab 键隔开数据</span></span><br><span class="line"><span class="comment"># yaml:属性配置格式</span></span><br><span class="line">POST _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">SELECT * FROM "</span>my-sql-index<span class="string">"</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">SELECT * FROM "</span>my-sql-index<span class="string">" where page_count &gt; 500 "</span><span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-SQL与DSL混合查询">3.4 SQL与DSL混合查询</h3><p>当我们需要使用Query DSL 时，也可以先使用SQL 来查询，然后通过Translate API 转换即可，查询的结果为DSL 方式的结果，转换 SQL 为 DSL 进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换</span></span><br><span class="line">POST _sql/translate</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">SELECT * FROM "</span>my-sql-index<span class="string">" where page_count &gt; 500 "</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 混合使用</span></span><br><span class="line">POST _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">SELECT * FROM "</span>my-sql-index<span class="string">" where page_count &gt; 500 "</span><span class="string">""</span>,</span><br><span class="line">  <span class="string">"filter"</span>: &#123;</span><br><span class="line">    <span class="string">"range"</span>: &#123;</span><br><span class="line">      <span class="string">"page_count"</span>: &#123;</span><br><span class="line">        <span class="string">"gte"</span>: 400,</span><br><span class="line">        <span class="string">"lte"</span>: 600</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"fetch_size"</span>: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-常用SQl操作">3.5 常用SQl操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有索引</span></span><br><span class="line">GET _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">" show tables</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询指定索引</span></span><br><span class="line">GET _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">" show tables like 'myindex'</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模糊查询索引</span></span><br><span class="line">GET _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">show tables like 'my-%' "</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看索引结构</span></span><br><span class="line">GET _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">" describe myindex</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础查询操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">SELECT select_expr [, …] [ FROM table_name ]</span><br><span class="line">[ WHERE condition ]</span><br><span class="line">[ GROUP BY grouping_element [, …] ] [ HAVING condition]</span><br><span class="line">[ ORDER BY expression [ ASC | DESC ] [, …] ] [ LIMIT [ count ] ]</span><br><span class="line">[ PIVOT ( aggregation_expr FOR column IN ( value [ [ AS ] <span class="built_in">alias</span> ] [, …] ) ) ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件过滤</span></span><br><span class="line">POST _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">" SELECT * FROM "</span>my-sql-index<span class="string">" where name = 'JAVA' "</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询所有数据</span></span><br><span class="line">GET _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">SELECT * FROM "</span>my-sql-index<span class="string">"</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照日期进行分组</span></span><br><span class="line">GET _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">SELECT release_date FROM "</span>my-sql-index<span class="string">" group by release_date</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对分组后的数据进行过滤</span></span><br><span class="line">GET _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">SELECT sum(page_count), release_date as datacnt FROM "</span>my-sql-index<span class="string">" group by release_date having sum(page_count) &gt; 100</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对页面数量进行排序（降序）</span></span><br><span class="line">GET _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">select * from "</span>my-sql-index<span class="string">" order by page_count desc "</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#限定查询数量</span></span><br><span class="line">GET _sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">select * from "</span>my-sql-index<span class="string">" limit 3 "</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================</span></span><br><span class="line"><span class="comment"># 游标（cursor）是系统为用户开设的一个数据缓冲区，存储 sql 语句的执行结果，每个游标区都有一个名字，用户可以用 sql 语句逐一从游标中获取记录，并赋给主变量，交由主语言进一步处理。</span></span><br><span class="line"><span class="comment"># 就本质而言，游标实际上是一种能从包括多条数据记录的结果集中每次提取一条或多条记录的机制</span></span><br><span class="line"></span><br><span class="line">POST _sql?format=json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"query"</span>: <span class="string">""</span><span class="string">" SELECT * FROM "</span>my-sql-index<span class="string">" order by page_count desc "</span><span class="string">""</span>, <span class="string">"fetch_size"</span>: 2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 返回结果中的cursor 就是缓冲区的标识，这就意味着可以从缓冲区中直接获取后续数据，操作上有点类似于迭代器，可多次执行。</span></span><br><span class="line"><span class="comment"># 此处游标 cursor 值需要根据读者执行的操作进行修改，请勿直接使用</span></span><br><span class="line"><span class="comment"># 如果执行后，无任何结果返回，说明数据已经读取完毕,此时再次执行，会返回错误信息</span></span><br><span class="line">POST /_sql?format=json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"cursor"</span>: <span class="string">"8/LoA0RGTACMjMFKwzAchxesIkPwEXyGVHfoYYfNkYyBBSNJ1lxGuvzbbk2Tsaas+ny+17R4EC/D7/b78fEhhdpPRKjtsrjHiooii5POUPFkSIKNtPXCEazWq4mglc1rZQ1N/axSB9iLlmNGOWEq55NXJs27kCLkmM1nP8zXz1v5hk0m62SZLhTnxHyIZvUiZR+zx9Sb/r+d8nLnNJ2ev7m/RsWN7kLljygK0IfRCBWR0w38zivnT+jW6ABh18AgjA+6hM3Wdy6gyHpXDufdESzoFjaD+cd/+AIAAP//AwA="</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果关闭缓冲区，执行下面指令即可</span></span><br><span class="line">POST /_sql/close</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"cursor"</span>: <span class="string">"8/LoA0RGTACMjMFKwzAchxesIkPwEXyGVHfoYYfNkYyBBSNJ1lxGuvzbbk2Tsaas+ny+17R4EC/D7/b78fEhhdpPRKjtsrjHiooii5POUPFkSIKNtPXCEazWq4mglc1rZQ1N/axSB9iLlmNGOWEq55NXJs27kCLkmM1nP8zXz1v5hk0m62SZLhTnxHyIZvUiZR+zx9Sb/r+d8nLnNJ2ev7m/RsWN7kLljygK0IfRCBWR0w38zivnT+jW6ABh18AgjA+6hM3Wdy6gyHpXDufdESzoFjaD+cd/+AIAAP//AwA="</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-基础聚合操作">3.6 基础聚合操作</h3><blockquote><p>常用的函数可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/128374620" target="_blank" rel="noopener" title="MySQL8.0基础篇">MySQL8.0基础篇</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里讲几个特别的</span></span><br><span class="line"><span class="comment"># 如果需要匹配通配符本身 使用转义字符</span></span><br><span class="line">SELECT * FROM <span class="string">"my-sql-index"</span> WHERE name like <span class="string">'JAVA/%'</span> ESCAPE <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RLIKE 不要误会，这里的 R 表示的不是方向，而是正则表示式 Regex</span></span><br><span class="line">SELECT * FROM <span class="string">"my-sql-index"</span> WHERE name like <span class="string">'JAV*A'</span></span><br><span class="line">SELECT * FROM <span class="string">"my-sql-index"</span> WHERE name rlike <span class="string">'JAV*A'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尽管 LIKE 在 Elasticsearch SQL 中搜索或过滤时是一个有效的选项，但全文搜索 MATCH 和 QUERY速度更快、功能更强大，并且是首选替代方案。</span></span><br><span class="line"><span class="comment"># MATCH MATCH( 匹配字段，规则 , 配置参数 可选))</span></span><br><span class="line">SELECT * FROM <span class="string">"my-sql-index"</span> <span class="built_in">where</span> MATCH (name, <span class="string">'JAVA'</span>)</span><br><span class="line">SELECT * FROM <span class="string">"my-sql-index"</span> <span class="built_in">where</span> MATCH (name, <span class="string">'JAVA'</span>)</span><br><span class="line"><span class="comment"># MATCH MATCH((' 匹配字段 权重 1, 匹配字段 权重 2'2'，规则 , 配置参数 可选</span></span><br><span class="line">SELECT * FROM <span class="string">"my-sql-index"</span> <span class="built_in">where</span> MATCH(<span class="string">'author^2,name^5'</span>, <span class="string">'java'</span>)</span><br><span class="line"><span class="comment"># QUERY</span></span><br><span class="line">SELECT * FROM <span class="string">"my-sql-index"</span> <span class="built_in">where</span> QUERY(<span class="string">'name:Java'</span>)</span><br><span class="line"><span class="comment"># SCORE : 评分</span></span><br><span class="line">SELECT *, score () FROM <span class="string">"my-sql-index"</span> <span class="built_in">where</span> QUERY(<span class="string">'name:Java'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件分支函数</span></span><br><span class="line"><span class="comment"># 多重分支判断</span></span><br><span class="line">SELECT CASE 5</span><br><span class="line">    WHEN 1 THEN <span class="string">'elastic'</span></span><br><span class="line">    WHEN 2 THEN <span class="string">'search'</span></span><br><span class="line">    WHEN 3 THEN <span class="string">'elasticsearch'</span></span><br><span class="line">    ELSE <span class="string">'default'</span></span><br><span class="line">END AS <span class="string">"case"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ES 集 群</span></span><br><span class="line">SELECT DATABASE()</span><br><span class="line"><span class="comment"># 用户</span></span><br><span class="line">SELECT USER()</span><br></pre></td></tr></table></figure><h3 id="3-7-SQL-客户端-DataGrip">3.7 SQL 客户端 DataGrip</h3><p>DataGrip是 JetBrains 发布的多引擎数据库环境，可以在IDEA连接，不过要收费(试用30天)，连接es driver，配置好ssl等即可</p><h2 id="4、自然语言处理-NLP">4、自然语言处理 NLP</h2><blockquote><p>随着 8.0 的发布，Elastic 很高兴能够将 PyTorch 机器学习模型上传到 Elasticsearch 中， 以在 Elastic Stack 中提供现代自然语言处理 (NLP)。现在，Elasticsearch 用户能够集成用于构建NLP 模型的最流行的格式之一，并将这些模型作为 NLP 数据管道的一部分通过我们的Inference processor 整合到Elasticsearch 中</p></blockquote><h3 id="4-1-简介">4.1 简介</h3><ul><li>情绪分析：用于识别正面与负面陈述的二元分类</li><li>命名实体识别 (NER)：从非结构化文本构建结构，尝试提取名称、位置或组织等细节</li><li>文本分类：零样本分类允许你根据你选择的类对文本进行分类，而无需进行预训练。</li><li>文本嵌入：用于 k 近邻 (kNN)  搜索</li></ul><h3 id="4-2-Elasticsearch-中的自然语言处理">4.2 Elasticsearch 中的自然语言处理</h3><p>通过与在 PyTorch  模型中构建 NLP  模型的最流行的格式之一集成，Elasticsearch  可以提供一个平台，该平台可处理大量 NLP 任务和用例。许多优秀的库可用于训练 NLP 模型，因此我们暂时将其留给其他工具。无论你是使用 PyTorch NLP、Hugging Face Transformers 还是 Facebook  的 fairseq 等库来训练模型，你都可以将模型导入 Elasticsearch  并对这些模型进行推理。 Elasticsearch 推理最初将仅在摄取时进行，未来还可以扩展以在查询时引入推理。</p><p>Elasticsearch 一直是进行NLP 的好地方，但从历史上看，它需要在Elasticsearch 之外进行一些处理，或者编写一些非常复杂的插件。 借助 8.0，用户现在可以在Elasticsearch 中更直接地执行命名实体识别、情感分析、文本分类等操作——无需额外的组件或编码。 不仅在 Elasticsearch 中本地计算和创建向量在水平可扩展性方面是“胜利”（通过在服务器集群中分布计算）——这一变化还为 Elasticsearch 用户节省了大量时间和精力</p><p>借助Elastic 8.0，用户可以直接在 Elasticsearch 中使用 PyTorch 机器学习模型（例如 BERT）， 并在Elasticsearch 中使用这些模型进行推理。通过使用户能够直接在 Elasticsearch 中执行推理，将现代 NLP 的强大功能集成到搜索应用程序和体验、本质上更高效（得益于 Elasticsearch 的分布式计算能力）和 NLP 本身比以往任何时候都更容易 变得更快，因为你不需要将数据移出到单独的进程或系统中。</p><h3 id="4-3-NLP演示">4.3 NLP演示</h3><blockquote><p>项目插件地址：<a href="https://github.com/spinscale/elasticsearch-ingest-opennlp/releases/tag/8.1.1.1" target="_blank" rel="noopener" title="https://github.com/spinscale/elasticsearch-ingest-opennlp/releases/tag/8.1.1.1">https://github.com/spinscale/elasticsearch-ingest-opennlp/releases/tag/8.1.1.1</a></p></blockquote><p>目前这个NLP 支持检测 Date， Person， Location, POS (part of speech) 及其它，简单概述是将这个模型插件集成到ES，这样ES可以直接通过一句话进行查询分词；因为版本问题，需要打开插件的<code>plugin-descriptor.properties</code>文件，将ES版本8.1.1改成8.1.0，然后将ES进行重启(集群的话每台都要部署)</p><p>第二步下载NER模型，从sourceforge 下载最新的NER 模型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/ingest-opennlp/download-models</span><br><span class="line"><span class="comment"># 执行时，可能会提示脚本路径不对等问题。直接修改脚本文件改正即可</span></span><br></pre></td></tr></table></figure><p><img src="http://qnypic.shawncoding.top/blog/202304071915837.png" alt></p><p>第三步配置 opennlp，修改配置文件：<code>config/elasticsearch.yml</code>,重启</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ingest.opennlp.model.file.persons:</span> <span class="string">en-ner-persons.bin</span></span><br><span class="line"><span class="attr">ingest.opennlp.model.file.dates:</span> <span class="string">en-ner-dates.bin</span></span><br><span class="line"><span class="attr">ingest.opennlp.model.file.locations:</span> <span class="string">en-ner-locations.bin</span></span><br></pre></td></tr></table></figure><p>最后运用 opennlp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个支持 NLP 的 pipeline</span></span><br><span class="line">PUT _ingest/pipeline/opennlp-pipeline</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"A pipeline to do named entity extraction"</span>,</span><br><span class="line">  <span class="string">"processors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"opennlp"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"message"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加数据</span></span><br><span class="line">PUT my-nlp-index</span><br><span class="line">PUT my-nlp-index/_doc/1?pipeline=opennlp-pipeline</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"Shay Banon announced the release of Elasticsearch 6.0 in November 2017"</span></span><br><span class="line">&#125;</span><br><span class="line">PUT my-nlp-index/_doc/2?pipeline=opennlp-pipeline</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"Kobe Bryant was one of the best basketball players of all times. Not even Michael Jordan has ever scored 81 points in one game. Munich is really an awesome city, but New York is as well. Yesterday has been the hottest day of the year."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">GET my-nlp-index/_doc/1 GET my-nlp-index/_doc/2</span><br></pre></td></tr></table></figure><h1>五、Elasticsearch 优化</h1><h2 id="1、性能优化之缓存">1、性能优化之缓存</h2><p>Elasticsearch 应用时会使用各种缓存，而缓存是加快数据检索速度的王道。接下来，我们将着重介绍以下三种缓存：</p><ul><li>页缓存</li><li>分片级请求缓存</li><li>查询缓存</li></ul><h3 id="1-1-页缓存">1.1 页缓存</h3><p>数据的安全、可靠，常规操作中，数据都是保存在磁盘文件中的。所以对数据的访问，绝大数情况下其实就是对文件的访问，为了提升对文件的读写的访问效率，Linux 内核会以页大小（4KB）为单位，将文件划分为多个数据块。当用户对文件中的某个数据块进行读写操作时，内核首先会申请一个内存页（称为 PageCache 页缓存）与文件中的数据块进行绑定。</p><p><img src="http://qnypic.shawncoding.top/blog/202304071915856.png" alt></p><p>页缓存的基本理念是从磁盘读取数据后将数据放入可用内存中，以便下次读取时从内存返回数据，而且获取数据不需要进行磁盘查找。所有这些对应用程序来说是完全透明的，应用程序发出相同的系统调用，但操作系统可以使用页缓存而不是从磁盘读取。<br>Java 程序是跨平台的，所以没有和硬件（磁盘，内存）直接交互的能力，如果想要和磁盘文件交互，那么必须要通过 OS 操作系统来完成文件的读写，我们一般就称之为用户态转换为内核态。而操作系统对文件进行读写时，实际上就是对文件的页缓存进行读写。所以对文件进行读写操作时，会分以下两种情况进行处理：</p><ul><li>当从文件中读取数据时，如果要读取的数据所在的页缓存已经存在，那么就直接把页缓存的数据拷贝给用户即可。否则，内核首先会申请一个空闲的内存页（页缓存），然后从文件中读取数据到页缓存，并且把页缓存的数据拷贝给用户。</li><li>当向文件中写入数据时，如果要写入的数据所在的页缓存已经存在，那么直接把新数据写入到页缓存即可。否则，内核首先会申请一个空闲的内存页（页缓存），并且把新数据写入到页缓存中。对于被修改的页缓存，内核会定时把这些页缓存刷新到文件中</li></ul><p>页缓存对 Elasticsearch 来说意味着什么？与访问磁盘上的数据相比，通过页缓存可以更快地访问数据。这就是为什么建议的 Elasticsearch 内存通常不超过总可用内存的一半，这样另一半就可用于页缓存了。这也意味着不会浪费任何内存。如果数据本身发生更改，页缓存会将数据标记为脏数据，并将这些数据从页缓存中释放。由于 Elasticsearch 和 Lucene 使用的段只写入一次，因此这种机制非常适合数据的存储方式。段在初始写入之后是只读的，因此数据的更改可能是合并或添加新数据。在这种情况下， 需要进行新的磁盘访问。另一种可能是内存被填满了。在这种情况下，缓存数据过期的操作为 LRU。</p><h3 id="1-2-分片级请求缓存">1.2 分片级请求缓存</h3><p>对一个或多个索引发送搜索请求时，搜索请求首先会发送到ES 集群中的某个节点，称之为<strong>协调节点</strong>；协调节点会把该搜索请求分发给其他节点并在相应分片上执行搜索操作，我们把分片上的执行结果称为“<strong>本地结果集</strong>”，之后，分片再将执行结果返回给协调节点；协调节点获得所有分片的本地结果集之后，合并成最终的结果并返回给客户端。Elasticsearch 会在每个分片上缓存了本地结果集，这使得频繁使用的搜索请求几乎立即返回结果。这里的缓存，称之为<strong>Request Cache</strong>, 全称是 Shard Request Cache，即分片级请求缓存。</p><p>ES 能够保证在使用与不使用 Request Cache 情况下的搜索结果一致，那 ES 是如何保证的呢？这就要通过** Request Cache 的失效机制<strong>来了解啦。Request Cache 缓存失效是自动的，当索引 refresh 时就会失效，也就是说在默认情况下，</strong> Request Cache 是每 1 秒钟失效一次**，但需要注意的是，只有在分片的数据实际上发生了变化时，刷新分片缓存才会失效。也就是说当一个文档被索引 到 该文档变成 Searchable 的这段时间内，不管是否有请求命中缓存该文档都不会被返回。</p><p>所以我们可以通过<code>index.refresh_interval</code> 参数来设置 refresh 的刷新时间间隔，刷新间隔越长，缓存的数据越多，当缓存不够的时候，将使用LRU 最近最少使用策略删除数据。当然，我们也可以手动设置参数 <code>indices.request.cache.expire</code> 指定失效时间（单位为分钟），但是基本上我们没必要去这样做，因为缓存在每次索引 refresh 时都会自动失效。</p><ul><li><strong>Request Cache 的使用</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，Request Cache 是关闭的，我们可以在创建新的索引时启用</span></span><br><span class="line">curl -XPUT 服务器 IP:端口/索引名 -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "settings": &#123;</span></span><br><span class="line"><span class="string">  "index.requests.cache.enable": true</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过动态参数配置来进行设置</span></span><br><span class="line">curl -XPUT 服务器 IP:端口/索引名/_settings -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">"index.requests.cache.enable": true</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启缓存后，需要在搜索请求中加上 request_cache=true 参数，才能使查询请求被缓存</span></span><br><span class="line">curl -XGET ‘服务器 IP:端口/索引名/_search?request_cache=<span class="literal">true</span>&amp;pretty<span class="string">' -H '</span>Content-Type: application/json<span class="string">' -d</span></span><br><span class="line"><span class="string">  '</span>&#123;</span><br><span class="line">  <span class="string">"size"</span>: 0,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123; <span class="string">"popular_colors"</span>: &#123;</span><br><span class="line">  <span class="string">"terms"</span>: &#123;</span><br><span class="line">  <span class="string">"field"</span>: <span class="string">"colors"</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="string">'</span></span><br></pre></td></tr></table></figure><p>第一：参数 size：0 必须强制指定才能被缓存，否则请求是不会缓存的，即使手动的设置 request_cache=true<br>第二：在使用 script 脚本执行查询时，由于脚本的执行结果是不确定的（比如使用random 函数或使用了当前时间作为参数），一定要指定 request_cache=false 禁用 Request Cache 缓存。</p><ul><li>Request Cache 的设置</li></ul><p>Request Cache 作用域为 Node，在 Node 中的 Shard 共享这个 Cache 空间。默认最大大小为 JVM 堆内存的 1％。可以使用以下命令在 <code>config/elasticsearch.yml</code> 文件中进行更改：<code>indices.requests.cache.size: 1%</code>。Request Cache 是以查询的整个DSL 语句做为 key 的，所以如果要命中缓存，那么查询生成的 DSL 一定要一样，即使修改了一个字符或者条件顺序，都不能利用缓存，需要重新生成Cache。</p><h3 id="1-3-查询缓存">1.3 查询缓存</h3><p>这种缓存的工作方式也与其他缓存有着很大的不同。页缓存方式缓存的数据与实际从查询中读取的数据量无关。当使用类似查询时，分片级请求缓存会缓存数据。查询缓存更精细些，可以缓存在不同查询之间重复使用的数据。</p><p>Elasticsearch 具有 IndicesQueryCache 类。这个类与 IndicesService 的生命周期绑定在一起，这意味着它不是按索引，而是按节点的特性 — 这样做是有道理的，因为缓存本身使用了 Java  堆。这个索引查询缓存占用以下两个配置选项<code>indices.queries.cache.count：缓存条目总数，默认为 10,000，indices.queries.cache.size：用于此缓存的 Java 堆的百分比，默认为 10%</code></p><p>查询缓存已进入下一个粒度级别，可以跨查询重用！凭借其内置的启发式算法，它只缓存多次使用的筛选器，还根据筛选器决定是否值得缓存，或者现有的查询方法是否足够快， 以避免浪费任何堆内存。这些位集的生命周期与段的生命周期绑定在一起，以防止返回过时的数据。一旦使用了新段，就需要创建新的位集。</p><p>缓存是加快检索速度的唯一方法吗？</p><ul><li>io_uring。这是一种在 Linux 下使用自 Linux 5.1 以来发布的完成队列进行异步 I/O 的新方法。请注意，io_uring 仍处于大力开发阶段。但是，Java 中有一些首次使用 io_uring 的尝试，例如 netty。简单应用程序的性能测试结果十分惊人。我想我们还得等一段时间才能看到实际的性能数据，尽管我预计这些数据也会有重大变化。我们希望 JDK 将来也能提供对这一功能的支持。有一些计划支持 io_uring 作为 Project Loom 的一部分， 这可能会将 io_uring 引入 JVM。更多的优化，比如能够通过 madvise() 提示Linux 内核的访问模式，还尚未内置于 JVM 中。这个提示可防止预读问题，即内核尝试读取的数据会比预期下次读取的数据要多，这在需要随机访问时是无用的。</li><li>Lucene 开发人员一如既往地忙于从任何系统中获得最大的收益。目前已经有使用Foreign Memory API 重写 Lucene MMapDirectory 的初稿，这可能会成为 Java 16 中的一个预览功能。然而，这样做并不是出于性能原因，而是为了克服当前 MMap 实现的某些限制</li><li>Lucene最近的另一个变化是通过在FileChannel 类中使用直接i/o (O_DIRECT)来摆脱原生扩展。这意味着写入数据将不会让页缓存出现“抖动”现象，这将是 Lucene 9 的功能</li></ul><h2 id="2、性能优化之减少内存堆">2、性能优化之减少内存堆</h2><p>由于 Elasticsearch 用户不断突破在 Elasticsearch 节点上存储的数据量的极限，所以他们有时会在耗尽磁盘空间之前就将堆内存用完了。对于这些用户来说，这个问题难免让他们沮丧，因为每个节点拟合尽可能多的数据通常是降低成本的重要手段。</p><p>但为什么 Elasticsearch 需要堆内存来存储数据呢？为什么它不能只用磁盘空间呢？这其中有几个原因，但最主要的一个是，Lucene 需要在内存中存储一些信息，以便知道在磁盘的什么位置进行查找。例如，Lucene 的倒排索引由术语字典和术语索引组成，术语字典将术语按排序顺序归入磁盘上的区块，术语索引用于快速查找术语字典。该术语索引将术语前缀与磁盘上区块（包含具有该前缀的术语）起始位置的偏移量建立映射。术语字典在磁盘上，但是术语索引直到最近还在堆上。</p><p>索引需要多少内存？通常情况下，<strong>每 GB 索引需要几 MB 内存</strong>。这并不算多，但随着用户在节点上安装 TB 数越来越大的磁盘，索引很快就需要 10-20 GB 的堆内存来存储这些 TB 量级的索引。<strong>鉴于 Elastic 的建议，不要超过 30 GB</strong>，不然就没有给聚合等其他堆内存消耗者留下太多空间，而且，如果 JVM 没有为集群管理操作留出足够的空间，就会导致稳定性问题。使用 **7.7 **版本减少 **Elasticsearch **堆！</p><h2 id="3、功能优化之冻结层和可搜索快照">3、功能优化之冻结层和可搜索快照</h2><p>Elasticsearch 7.12 版中推出了冻结层的技术预览版，让您能够将计算与存储完全分离， 并直接在对象存储（如 AWS S3、Microsoft Azure Storage 和 Google Cloud Storage）中搜索数据。作为我们数据层旅程的下一个重要里程碑，冻结层实现以超低成本长期存储大量数据的同时，还能保持数据处于完全活动和可搜索状态，显著扩展了您的数据覆盖范围。</p><p>长期以来，我们一直支持通过多个数据层来进行数据生命周期管理：<strong>热层用于提供较高的处理速度，温层则用于降低成本，但性能也较低</strong>。两者都利用本地硬件来存储主数据和冗余副本。最近，我们引入了冷层，通过消除在本地存储冗余副本的需要，您可以在相同数量的硬件上最多存储两倍于热层的数据。尽管为了获得最佳性能，主数据仍然存储在本地，但冷层中的索引由存储在对象存储中的可搜索快照提供支持，以实现冗余。</p><p><strong>冻结层</strong>更进一步，完全不需要在本地存储任何数据。相反，它会使用可搜索快照来直接搜索存储在对象存储中的数据，而无需先将其解冻。本地缓存存储最近查询的数据，以便在进行重复搜索时提供最佳性能。因此，存储成本显著下降：与热层或温层相比，最多可降低90%；与冷层相比，最多可降低 80%。数据的全自动生命周期现已成为完整体：从热到温到冷，然后再到冻结，同时还可确保以尽可能低的存储成本获得所需的访问和搜索性能。</p><p><strong>冻结层利用可搜索快照将计算与存储完全分离</strong>。在根据索引生命周期管理 (ILM) 策略将数据从温层或冷层迁移到冻结层时，本地节点上的索引将迁移到 S3 或您选择的对象存储中。冷层将索引迁移到对象存储，但它仍然在本地节点上保留数据的单个完整副本，以确保提供快速而一致的搜索体验。另一方面，冻结层完全消除了本地副本，而是直接搜索对象存储中的数据。它会为最近查询的数据构建本地缓存，以便加快重复搜索的速度，但缓存大小只是存储在冻结层中的完整数据大小的一小部分。</p><p>对于典型的 10% 本地缓存大小，这意味着您只需少数几个本地层节点即可处理数百TB 的冻结层数据。下面简单比较一下：如果 RAM 为 64 GB 的典型温层节点可管理 10 TB，冷层节点将能够处理大约两倍于此的 20 TB，而冻结层节点将跃升至 100 TB。这相当于 1:1500 的 RAM 与存储比率，这还只是一个保守的估计。</p><h2 id="4、功能优化之原生矢量搜索">4、功能优化之原生矢量搜索</h2><p>Elasticsearch 8.0 版引入了一整套原生矢量搜索功能，让客户和员工能够使用他们自己的文字和语言来搜索并收到高度相关的结果。早在 Elasticsearch 7.0 版中，我们就针对高维矢量引入了字段类型。在 Elasticsearch 7.3 和 Elasticsearch 7.4 版中，引入了对矢量相似函数的支持。在 Elasticsearch 8.0 版中，将对自然语言处理 (NLP) 模型的原生支持直接引入了 Elasticsearch，让矢量搜索功能更容易实现。此外，Elasticsearch 8.0 版还包含了对近似最近邻 (ANN) 搜索的原生支持，因此可以快速且大规模地比较基于矢量的查询与基于矢量的文档语料库。</p><p>自然语言处理（Natural Language Processing）是计算科学领域与人工智能领域中的一个重要方向。它研究能实现人与计算机之间用自然语言进行有效通信的各种理论和方法。自然语言处理是一门融语言学、计算机科学、数学于一体的科学。因此，这一领域的研究将涉及自然语言，即人们日常使用的语言，所以它与语言学的研究有着密切的联系，但又有重要的区别。自然语言处理并不是一般地研究自然语言，而在于研制能有效地实现自然语言通信的计算机系统，特别是其中的软件系统。因而它是计算机科学的一部分</p><ul><li>NLP 的目标</li></ul><p>NLP 的目标是让计算机在理解语言方面像人类一样智能，最终的目标是弥补人类交流（自然语言）和计算机理解（机器语言）之间的差距。</p><ul><li>为什么需要 NLP</li></ul><p>有了 NLP，就可能完成自动语音、自动文本的编写等任务。让我们从大量的数据中解放出来，让计算机去执行。这些任务包括自动生成给定文本的摘要、机器翻译及其他的任务。</p><h2 id="5、功能优化之搜索聚合">5、功能优化之搜索聚合</h2><p>Elasticsearch 7.13 版新增功能可以实现更快的聚合。在 date_histogram 聚合方面， Elasticsearch 通过在内部将其重写为 filters 聚合，获得了巨大的性能提升。具体来说，它变成了一个包含 range 查询的 filters 聚合。这就是Elasticsearch 优化的内容 — range 查询。</p><p>为了加快 terms 和 date_histogram 这两个聚合的速度。可以将它们作为 filters 运行， 然后加快 filters 的聚合速度。</p><hr><p>参考链接：</p><p><a href="https://www.bilibili.com/video/BV1hh411D7sb?p=63" target="_blank" rel="noopener" title="https://www.bilibili.com/video/BV1hh411D7sb?p=63">https://www.bilibili.com/video/BV1hh411D7sb?p=63</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ES7.x版本可以参考：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/129101681&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Elasticsearch7学习笔记&quot;&gt;Elasticsearch7学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;一、Elasticsearch8.x概述&lt;/h1&gt;
&lt;h2 id=&quot;1、Elasticsearch-新特性&quot;&gt;1、Elasticsearch 新特性&lt;/h2&gt;
&lt;p&gt;从 2019 年 4 月 10 日 Elasticsearch7.0 版本的发布，到 2022 年 2 月 11 日 Elasticsearch8.0 版本的发布的近 3 年间，基于不断优化的开发设计理念，Elasticsearch 发布了一系列的小版本。这些小版本在以下方面取得了长足的进步并同时引入一些全新的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少内存堆使用，完全支持 ARM 架构，引入全新的方式以使用更少的存储空间，从而让每个节点托管更多的数据&lt;/li&gt;
&lt;li&gt;降低查询开销，在大规模部署中成效尤为明显&lt;/li&gt;
&lt;li&gt;提高日期直方图和搜索聚合的速度，增强了页面缓存的性能，并创建了一个新的&amp;quot;pre-filter&amp;quot;搜索短语&lt;/li&gt;
&lt;li&gt;在 Elasticsearch 7.3 和 Elasticsearch 7.4 版中，引入了对矢量相似函数的支持在最新发布的 8.0 版本中，也同样增加和完善了很多新的功能&lt;/li&gt;
&lt;li&gt;增加对自然语言处理 (NLP) 模型的原生支持，让矢量搜索功能更容易实现，让客户和员工能够使用他们自己的文字和语言来搜索并收到高度相关的结果&lt;/li&gt;
&lt;li&gt;直接在 Elasticsearch 中执行命名实体识别、情感分析、文本分类等，而无需使用额外的组件或进行编码&lt;/li&gt;
&lt;li&gt;Elasticsearch 8.0 基于 Lucene 9.0 开发的，那些利用现代 NLP 的搜索体验，都可以借助（新增的）对近似最近邻搜索的原生支持，快速且大规模地实现。通过 ANN，可以快速并高效地将基于矢量的查询与基于矢量的文档语料库（无论是小语料库、大语料库还是巨型语料库）进行比较&lt;/li&gt;
&lt;li&gt;可以直接在 Elasticsearch 中使用 PyTorch Machine Learning 模型（如 BERT），并在Elasticsearch 中原生使用这些模型执行推理&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://blog.shawncoding.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>语雀批量导出与图片下载</title>
    <link href="https://blog.shawncoding.top/posts/4f9b313c.html"/>
    <id>https://blog.shawncoding.top/posts/4f9b313c.html</id>
    <published>2023-03-05T16:18:39.000Z</published>
    <updated>2023-03-05T16:39:55.189Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><p>在云笔记方面我一般使用<a href="https://www.wolai.com/signup?invitation=JMJ57S3" target="_blank" rel="noopener" title="wolai"><strong>wolai</strong></a>和<strong>语雀</strong>，本地笔记用Typora，但是这两个云笔记各有利弊</p><ul><li>wolai的导出可以随md文件直接生成对应的图片文件夹，而且可以直接批量导出(需要企业版)，但是普通账户的图床容量只有200M</li><li>语雀个人账户的图床拥有10G容量，但是只支持单个文件导出，而且导出md文档的时候图片使用的还是语雀的图床，断网会导致不可访问，而且不能进行本地离线备份</li></ul><p>因此今天这篇文章就记录一下语雀如何进行图片本地化保存以及文档批量备份下载</p><a id="more"></a><h1>二、导出文档图片批量替换</h1><p>在实际的使用中，有几个网站是可以获取到语雀图片的（不用重新上传，自动转存）</p><ul><li>微信公众号</li><li>csdn</li><li>掘金</li><li>知乎</li></ul><p>但是还是需要将语雀图片的后缀给去掉，第一种方法是无需运行脚本，如果Typora支持正则，直接正则匹配<code>#clientId=[a-z0-9-&amp;=%.]*</code>(注意可能会变，自己根据实际情况来进行替换)，将这串字符给全部替换为空；</p><p>第二种需要进行跑python脚本，然后运行<code>python test.py [源文章] [目标文章]</code>(举例：<code>python test.py test.md test2.md</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">output_content = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_yuque</span><span class="params">(origin_md_path, output_md_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(origin_md_path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            line = re.sub(<span class="string">r'png#(.*)+'</span>, <span class="string">'png)'</span>, line)</span><br><span class="line">            image_url = str(re.findall(<span class="string">r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'</span>,line))</span><br><span class="line">            output_content.append(line)</span><br><span class="line">    <span class="keyword">with</span> open(output_md_path, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> _output_content <span class="keyword">in</span> output_content:</span><br><span class="line">            f.write(str(_output_content))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    origin_md_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    output_md_path = sys.argv[<span class="number">2</span>]</span><br><span class="line">    deal_yuque(origin_md_path, output_md_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1>三、Markdown中的图片转换到本地</h1><blockquote><p>参考：<a href="https://github.com/u21h2/yuque2md" target="_blank" rel="noopener" title="https://github.com/u21h2/yuque2md">https://github.com/u21h2/yuque2md</a></p></blockquote><p>可以根据自己定制批量化的修改操作，修改原理识别文档的图片地址，并自动下载到本地，最后替换文档中的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yuque_cdn_domain = <span class="string">'cdn.nlark.com'</span></span><br><span class="line">output_content = []</span><br><span class="line">image_file_prefix = <span class="string">'image-'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># origin_md_path: 输入的markdown文件路径</span></span><br><span class="line"><span class="comment"># output_md_path: 输出的markdown文件路径</span></span><br><span class="line"><span class="comment"># image_dir: 图片存储的目录</span></span><br><span class="line"><span class="comment"># image_url_prefix: 图片链接前缀，空字符串或者路径或者CDN地址</span></span><br><span class="line"><span class="comment"># image_rename_mode: 图片重命名模式，raw: 原始uuid模式，asc: 递增重命名模式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_yuque</span><span class="params">(origin_md_path, output_md_path, image_dir,image_url_prefix,image_rename_mode)</span>:</span></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> open(origin_md_path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            line = re.sub(<span class="string">r'png#(.*)+'</span>, <span class="string">'png)'</span>, line)</span><br><span class="line">            image_url = str(re.findall(<span class="string">r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'</span>,line))</span><br><span class="line">            <span class="comment"># 如果只下载语雀的图片可以在这里加个判断</span></span><br><span class="line">            <span class="comment"># if yuque_cdn_domain in image_url:</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'https://'</span> <span class="keyword">in</span> image_url) <span class="keyword">and</span> (<span class="string">'.png'</span> <span class="keyword">in</span> image_url):</span><br><span class="line">                image_url = image_url.replace(<span class="string">'('</span>, <span class="string">''</span>).replace(<span class="string">')'</span>, <span class="string">''</span>).replace(<span class="string">'['</span>, <span class="string">''</span>).replace(<span class="string">']'</span>, <span class="string">''</span>).replace(<span class="string">"'"</span>, <span class="string">''</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'.png'</span> <span class="keyword">in</span> image_url:</span><br><span class="line">                    suffix = <span class="string">'.png'</span></span><br><span class="line">                <span class="keyword">elif</span> <span class="string">'.jpeg'</span> <span class="keyword">in</span> image_url:</span><br><span class="line">                    suffix = <span class="string">'.jpeg'</span></span><br><span class="line">                download_image(image_url, image_dir, image_rename_mode, idx, suffix)</span><br><span class="line">                to_replace = <span class="string">'/'</span>.join(image_url.split(<span class="string">'/'</span>)[:<span class="number">-1</span>])</span><br><span class="line">                new_image_url = image_url.replace(to_replace, <span class="string">'placeholder'</span>)</span><br><span class="line">                <span class="keyword">if</span> image_rename_mode == <span class="string">'asc'</span>:</span><br><span class="line">                    new_image_url = image_url_prefix + image_file_prefix + str(idx) + suffix</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    new_image_url = new_image_url.replace(<span class="string">'placeholder/'</span>,image_url_prefix)</span><br><span class="line">                idx += <span class="number">1</span></span><br><span class="line">                line = line.replace(image_url, new_image_url)</span><br><span class="line">            output_content.append(line)</span><br><span class="line">    <span class="keyword">with</span> open(output_md_path, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> _output_content <span class="keyword">in</span> output_content:</span><br><span class="line">            f.write(str(_output_content))</span><br><span class="line">    <span class="keyword">return</span> idx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_image</span><span class="params">(image_url, image_dir, image_name_mode, idx, suffix)</span>:</span></span><br><span class="line">    r = requests.get(image_url, stream=<span class="literal">True</span>)</span><br><span class="line">    image_name = image_url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> image_name_mode == <span class="string">'asc'</span>:</span><br><span class="line">        image_name = image_file_prefix + str(idx) + suffix</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        open(image_dir+<span class="string">'/'</span>+image_name, <span class="string">'wb'</span>).write(r.content)</span><br><span class="line">    <span class="keyword">del</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(image_dir)</span>:</span></span><br><span class="line">    image_dir = image_dir.strip()</span><br><span class="line">    image_dir = image_dir.rstrip(<span class="string">"\\"</span>)</span><br><span class="line">    isExists = os.path.exists(image_dir)</span><br><span class="line">    <span class="keyword">if</span> isExists:</span><br><span class="line">        print(<span class="string">'图片存储目录已存在'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.makedirs(image_dir)</span><br><span class="line">        print(<span class="string">'图片存储目录创建成功'</span>)</span><br><span class="line">    <span class="keyword">return</span> image_dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    origin_md_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    output_md_path = sys.argv[<span class="number">2</span>]</span><br><span class="line">    image_dir = sys.argv[<span class="number">3</span>]</span><br><span class="line">    image_url_prefix = sys.argv[<span class="number">4</span>]</span><br><span class="line">    image_rename_mode = sys.argv[<span class="number">5</span>] <span class="comment"># raw asc</span></span><br><span class="line">    mkdir(image_dir)</span><br><span class="line">    cnt = deal_yuque(origin_md_path, output_md_path, image_dir, image_url_prefix, image_rename_mode)</span><br><span class="line">    print(<span class="string">'处理完成, 共&#123;&#125;张图片'</span>.format(cnt))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># origin_md_path = input('原文件路径：') </span></span><br><span class="line">    <span class="comment"># output_md_path = input('目标输出文件路径：')</span></span><br><span class="line">    <span class="comment"># image_dir = input('图片存储路径：')</span></span><br><span class="line">    <span class="comment"># image_url_prefix = input('文档图片前缀(默认为当前路径)：') or ''</span></span><br><span class="line">    <span class="comment"># image_rename_mode = input('图片重命名模式(raw和asc默认为asc)：') or 'asc'</span></span><br><span class="line">    <span class="comment"># mkdir(image_dir)</span></span><br><span class="line">    <span class="comment"># cnt = deal_yuque(origin_md_path, output_md_path, image_dir, image_url_prefix, image_rename_mode)</span></span><br><span class="line">    <span class="comment"># print('处理完成, 共&#123;&#125;张图片'.format(cnt))</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1>四、文档批量下载</h1><blockquote><p>参考：<a href="https://github.com/dzh929/ExportMD-rectify-pics" target="_blank" rel="noopener" title="https://github.com/dzh929/ExportMD-rectify-pics">https://github.com/dzh929/ExportMD-rectify-pics</a><br><a href="https://www.yuque.com/duzh929/blog/ocffqg" target="_blank" rel="noopener" title="https://www.yuque.com/duzh929/blog/ocffqg">https://www.yuque.com/duzh929/blog/ocffqg</a></p></blockquote><p>改导出方法不仅批量导出md文档，而且图片也以文件夹方式保存在本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dzh929/ExportMD-rectify-pics.git</span><br><span class="line"><span class="built_in">cd</span> ExportMD-rectify-pics</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">python ExportMD.py</span><br><span class="line"><span class="comment"># 对于namespace的获取</span></span><br><span class="line"><span class="comment"># 知识库 https://www.yuque.com/YourYuqueUserName 对应的 namespace 为 YourYuqueUserName</span></span><br><span class="line"><span class="comment"># Token需要创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发生错误，删除.userinfo后重试</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;p&gt;在云笔记方面我一般使用&lt;a href=&quot;https://www.wolai.com/signup?invitation=JMJ57S3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;wolai&quot;&gt;&lt;strong&gt;wolai&lt;/strong&gt;&lt;/a&gt;和&lt;strong&gt;语雀&lt;/strong&gt;，本地笔记用Typora，但是这两个云笔记各有利弊&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wolai的导出可以随md文件直接生成对应的图片文件夹，而且可以直接批量导出(需要企业版)，但是普通账户的图床容量只有200M&lt;/li&gt;
&lt;li&gt;语雀个人账户的图床拥有10G容量，但是只支持单个文件导出，而且导出md文档的时候图片使用的还是语雀的图床，断网会导致不可访问，而且不能进行本地离线备份&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此今天这篇文章就记录一下语雀如何进行图片本地化保存以及文档批量备份下载&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="IDETools" scheme="https://blog.shawncoding.top/tags/IDETools/"/>
    
  </entry>
  
  <entry>
    <title>配置文件、API接口脱敏</title>
    <link href="https://blog.shawncoding.top/posts/1b12b5fa.html"/>
    <id>https://blog.shawncoding.top/posts/1b12b5fa.html</id>
    <published>2023-03-05T16:18:31.000Z</published>
    <updated>2023-03-05T16:39:55.189Z</updated>
    
    <content type="html"><![CDATA[<h1>一、配置文件脱敏</h1><h2 id="1、概述">1、概述</h2><p>核心隐私数据无论对于企业还是用户来说尤其重要，因此要想办法杜绝各种隐私数据的泄漏。对于工程中的敏感信息，与数据库打交道的的工程肯定是配置数据源，尤其是数据库的<code>账号密码</code>，我们不想把它们<code>明文</code>写在配置文件里，又想让工程能正确跑起来，那应该怎么做呢？</p><a id="more"></a><p>**由于数据库的敏感性，所以不可能让每个人都知道su ****<code>root</code><strong><strong>的密码。且数据库中权限、视图这些机制也是为了保证安全性，所以要保证让尽可能少的人知道</strong></strong><code>root</code>**<strong>的密码</strong>。所以我们可以利用非对称加密算法的思想：</p><ul><li>在工程的配置文件中写入加密好的<code>密文</code>。</li><li>启动工程时让知道<code>密钥</code>的人，以启动参数的形式将<code>密钥</code>输入进去。</li><li>工程根据<code>密钥</code>，将<code>密文</code>自动解密为<code>明文</code>，用来完成配置。</li><li>无关的人是无法知道敏感信息的<code>明文</code>是什么的</li></ul><blockquote><p>这里我们使用一款开源插件：<code>jasypt-spring-boot</code>来进行脱敏处理，项目地址：<a href="https://github.com/ulisesbocchio/jasypt-spring-boot" target="_blank" rel="noopener" title="https://github.com/ulisesbocchio/jasypt-spring-boot">https://github.com/ulisesbocchio/jasypt-spring-boot</a></p></blockquote><h2 id="2、利用jar包手动加密">2、利用jar包手动加密</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用秘钥和密码明文生成密码</span></span><br><span class="line">java -cp jasypt-1.9.3.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=待加密内容 password=加密秘钥 algorithm=PBEWithMD5AndDES</span><br><span class="line"><span class="comment"># 检查生成的密码是否正确</span></span><br><span class="line">java -cp jasypt-1.9.3.jar org.jasypt.intf.cli.JasyptPBEStringDecryptionCLI input=加密后内容 password=加密秘钥 algorithm=PBEWithMD5AndDES</span><br></pre></td></tr></table></figure><h2 id="3、SpringBoot实现脱敏">3、SpringBoot实现脱敏</h2><h3 id="3-1-代码实现">3.1 代码实现</h3><p>首先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后进行密钥的配置（配置文件），当然将秘钥直接放在配置文件中也是不安全的，我们可以在项目启动的时候配置秘钥<code>java -jar xxx.jar  -Djasypt.encryptor.password=dGNtLW1hbmFnZS1zeXN0ZW</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">dGNtLW1hbmFnZS1zeXN0ZW</span></span><br><span class="line">    <span class="attr">algorithm:</span> <span class="string">PBEWithMD5AndDES</span></span><br></pre></td></tr></table></figure><p>然后可以对明文进行加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DesensitizationApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入加密方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringEncryptor encryptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动生成密文，此处演示了url，user，password</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encrypt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String url = encryptor.encrypt(<span class="string">"jdbc\\:mysql\\://127.0.0.1\\:3306/test?useUnicode\\=true&amp;characterEncoding\\=UTF-8&amp;zeroDateTimeBehavior\\=convertToNull&amp;useSSL\\=false&amp;allowMultiQueries\\=true&amp;serverTimezone=Asia/Shanghai"</span>);</span><br><span class="line">        String name = encryptor.encrypt(<span class="string">"root"</span>);</span><br><span class="line">        String password = encryptor.encrypt(<span class="string">"123456"</span>);</span><br><span class="line">        System.out.println(<span class="string">"database url: "</span> + url);</span><br><span class="line">        System.out.println(<span class="string">"database name: "</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"database password: "</span> + password);</span><br><span class="line">        <span class="keyword">assert</span> url.length() &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">assert</span> name.length() &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">assert</span> password.length() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二种手动加密的方法，不过加密解密要配合，与上面的方法不能混合使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BasicTextEncryptor textEncryptor = <span class="keyword">new</span> BasicTextEncryptor();</span><br><span class="line">        <span class="comment">//加密所需的密钥</span></span><br><span class="line">        textEncryptor.setPassword(<span class="string">"shawn"</span>);</span><br><span class="line">        <span class="comment">//要加密的数据（数据库的用户名或密码）</span></span><br><span class="line">        String username = textEncryptor.encrypt(<span class="string">"root"</span>);</span><br><span class="line">        String password = textEncryptor.encrypt(<span class="string">"123456"</span>);</span><br><span class="line">        String url = textEncryptor.encrypt(<span class="string">"jdbc:mysql://10.18.104.78:4000/testdb?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"</span>);</span><br><span class="line">        String redisHost = textEncryptor.encrypt(<span class="string">"172.16.110.85"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String decrypt = textEncryptor.decrypt("L+tOtB0YuK78F12PtS5c1Q==");</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"username:"</span>+username);</span><br><span class="line">        System.out.println(<span class="string">"password:"</span>+password);</span><br><span class="line">        System.out.println(<span class="string">"url:"</span>+url);</span><br><span class="line">        System.out.println(<span class="string">"redisHost:"</span>+redisHost);</span><br><span class="line">        System.out.println(textEncryptor.decrypt(<span class="string">"c9oILGKe4gHAs/FxJEcLug=="</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将加密后的密文写入配置,<code>jasypt</code>默认使用<code>ENC()</code>包裹，此时的数据源配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">ENC(L8I2RqYPptEtQNL4x8VhRVakSUdlsTGzEND/3TOnVTYPWe0ZnWsW0/5JdUsw9ulm)</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENC(EJYCSbBL8Pmf2HubIH7dHhpfDZcLyJCEGMR9jAV3apJtvFtx9TVdhUPsAxjQ2pnJ)</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">ENC(szkFDG56WcAOzG2utv0m2aoAvNFH5g3DXz0o6joZjT26Y5WNA+1Z+pQFpyhFBokqOp2jsFtB+P9b3gB601rfas3dSfvS8Bgo3MyP1nojJgVp6gCVi+B/XUs0keXPn+pbX/19HrlUN1LeEweHS/LCRZslhWJCsIXTwZo1PlpXRv3Vyhf2OEzzKLm3mIAYj51CrEaN3w5cMiCESlwvKUhpAJVz/uXQJ1spLUAMuXCKKrXM/6dSRnWyTtdFRost5cChEU9uRjw5M+8HU3BLemtcK0vM8iYDjEi5zDbZtwxD3hA=)</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><p>上述配置是使用默认的<code>prefix=ENC(</code>、<code>suffix=)</code>，当然我们可以根据自己的要求更改，只需要在配置文件中更改即可，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="comment">## 指定前缀、后缀</span></span><br><span class="line">    <span class="attr">property:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">'PASS('</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">')'</span></span><br></pre></td></tr></table></figure><p>那么此时的配置就必须使用<code>PASS()</code>包裹才会被解密，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">PASS(L8I2RqYPptEtQNL4x8VhRVakSUdlsTGzEND/3TOnVTYPWe0ZnWsW0/5JdUsw9ulm)</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">PASS(EJYCSbBL8Pmf2HubIH7dHhpfDZcLyJCEGMR9jAV3apJtvFtx9TVdhUPsAxjQ2pnJ)</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">PASS(szkFDG56WcAOzG2utv0m2aoAvNFH5g3DXz0o6joZjT26Y5WNA+1Z+pQFpyhFBokqOp2jsFtB+P9b3gB601rfas3dSfvS8Bgo3MyP1nojJgVp6gCVi+B/XUs0keXPn+pbX/19HrlUN1LeEweHS/LCRZslhWJCsIXTwZo1PlpXRv3Vyhf2OEzzKLm3mIAYj51CrEaN3w5cMiCESlwvKUhpAJVz/uXQJ1spLUAMuXCKKrXM/6dSRnWyTtdFRost5cChEU9uRjw5M+8HU3BLemtcK0vM8iYDjEi5zDbZtwxD3hA=)</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><h3 id="3-2-运行原理">3.2 运行原理</h3><ul><li>**jasypt的加密方式  **<br>jasypt采用<code>PBEWithMD5AndDES</code>加密方式，在相同的秘钥情况下，每次生成的密文都不相同，但可以使用秘钥解密获得相同的明文，可以确保秘钥的安全性</li><li>**jasypt-spring-boot-starter的运行原理  **<br>先使用原先的配置加载方式加载配置信息（因此系统使用何种配置方式，对加解密没有影响），再通过代理的方式代理了配置获取类，在Bean生成时加载配置的地方使用代理类执行密码转换获得明文</li><li>**jasypt-spring-boot-starter工作原理  **<br>在spring中的加载方式：<code>EnableEncryptablePropertiesConfiguration 类</code>负责配置文件加载将当前的environment环境配置进行代理或包装（返回<code>EnableEncryptablePropertiesBeanFactoryPostProcessor</code>）对所有的参数值使用Encryptable进行代理，生成<code>PropertySource</code>的AOP代理类  并使用<code>EncryptableMapPropertySourceWrapper</code>类来包装PropertySource  使用的时候通过<code>DefaultPropertyDetector</code>来判断数据是否符合<code>ENC(**********)</code>这样的数据结构  符合时，使用<code>EncryptablePropertyResolver</code>来解码数据</li></ul><h2 id="4、其他注意事项说明">4、其他注意事项说明</h2><p>对于密文使用，可以支持nacos配置中心，yml等多种配置文件；项目启动参数增加【-Djasypt.encryptor.password=秘钥】 来实现密文解密 ；最后关于加密结果，每次加密的结果都不一样，但使用秘钥都能得到正确的明文，注意加解密一定需要使用<code>jasypt-spring-boot-starter</code>中引用的<code>jasypt-x.x.x.jar</code> 对应版本，否则可能导致密文无法解析的情况</p><h1>二、接口返回数据脱敏</h1><h2 id="1、概述-v2">1、概述</h2><p>通常接口返回值中的一些敏感数据也是要脱敏的，因为不脱敏的敏感数据，可能会引起用户的不满。比如身份证号、手机号码、地址等通常的手段就是用<code>*</code>隐藏一部分数据，当然也可以根据自己需求定制。言归正传，如何优雅的实现呢？有两种实现方案：</p><ul><li>整合Mybatis插件，在查询的时候针对特定的字段进行脱敏</li><li>整合Jackson，在序列化阶段对特定字段进行脱敏</li></ul><p>这里我们就先使用第二种方法对数据进行脱敏</p><h2 id="2、SpringBoot实战">2、SpringBoot实战</h2><p>首先定制脱敏策略，针对项目需求，定制不同字段的脱敏规则，比如手机号中间几位用<code>*</code>替代，不同项目可以根据自己需求进行删减</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 脱敏策略，枚举类，针对不同的数据定制特定的策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SensitiveStrategy &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USERNAME(s -&gt; s.replaceAll(<span class="string">"(\\S)\\S(\\S*)"</span>, <span class="string">"$1*$2"</span>)),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ID_CARD(s -&gt; s.replaceAll(<span class="string">"(\\d&#123;4&#125;)\\d&#123;10&#125;(\\w&#123;4&#125;)"</span>, <span class="string">"$1****$2"</span>)),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PHONE(s -&gt; s.replaceAll(<span class="string">"(\\d&#123;3&#125;)\\d&#123;4&#125;(\\d&#123;4&#125;)"</span>, <span class="string">"$1****$2"</span>)),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ADDRESS(s -&gt; s.replaceAll(<span class="string">"(\\S&#123;3&#125;)\\S&#123;2&#125;(\\S*)\\S&#123;2&#125;"</span>, <span class="string">"$1****$2****"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Function&lt;String, String&gt; desensitizer;</span><br><span class="line"></span><br><span class="line">    SensitiveStrategy(Function&lt;String, String&gt; desensitizer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.desensitizer = desensitizer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Function&lt;String, String&gt; <span class="title">desensitizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desensitizer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步自定义一个脱敏注解，一旦有属性被标注，则进行对应得脱敏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义jackson注解，标注在属性上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@JacksonAnnotationsInside</span></span><br><span class="line"><span class="meta">@JsonSerialize</span>(using = SensitiveJsonSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">Sensitive</span> </span>&#123;</span><br><span class="line">    <span class="comment">//脱敏策略</span></span><br><span class="line">    <span class="function">SensitiveStrategy <span class="title">strategy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面将是重要实现，对标注注解<code>@Sensitive</code>的字段进行脱敏，实现如下，其中<code>createContextual</code>的作用是通过字段已知的上下文信息定制<code>JsonSerializer</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化注解自定义实现</span></span><br><span class="line"><span class="comment"> * JsonSerializer&lt;String&gt;：指定String 类型，serialize()方法用于将修改后的数据载入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveJsonSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">String</span>&gt; <span class="keyword">implements</span> <span class="title">ContextualSerializer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SensitiveStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(String value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        gen.writeString(strategy.desensitizer().apply(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性上的注解属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JsonSerializer&lt;?&gt; createContextual(SerializerProvider prov, BeanProperty property) <span class="keyword">throws</span> JsonMappingException &#123;</span><br><span class="line"></span><br><span class="line">        Sensitive annotation = property.getAnnotation(Sensitive<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(annotation)&amp;&amp;Objects.equals(String<span class="class">.<span class="keyword">class</span>, <span class="title">property</span>.<span class="title">getType</span>().<span class="title">getRawClass</span>())) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.strategy = annotation.strategy();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prov.findValueSerializer(property.getType(), property);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义Person类，对其数据脱敏，使用注解<code>@Sensitive</code>注解进行数据脱敏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真实姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Sensitive</span>(strategy = SensitiveStrategy.USERNAME)</span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Sensitive</span>(strategy = SensitiveStrategy.ADDRESS)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 电话号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Sensitive</span>(strategy = SensitiveStrategy.PHONE)</span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份证号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Sensitive</span>(strategy = SensitiveStrategy.ID_CARD)</span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后模拟接口测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person user = <span class="keyword">new</span> Person();</span><br><span class="line">        user.setRealName(<span class="string">"接口测试"</span>);</span><br><span class="line">        user.setPhoneNumber(<span class="string">"17683456578"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"浙江省杭州市温州市...."</span>);</span><br><span class="line">        user.setIdCard(<span class="string">"4333333333334334333"</span>);</span><br><span class="line">        user.setNickName(<span class="string">"shawn"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"realName"</span>: <span class="string">"接*测试"</span>,</span><br><span class="line">  <span class="string">"address"</span>: <span class="string">"浙江省****市温州市..****"</span>,</span><br><span class="line">  <span class="string">"phoneNumber"</span>: <span class="string">"176****6578"</span>,</span><br><span class="line">  <span class="string">"idCard"</span>: <span class="string">"4333****34333"</span>,</span><br><span class="line">  <span class="string">"nickName"</span>: <span class="string">"shawn"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p><p><a href="https://blog.csdn.net/zym_1321/article/details/122198121" target="_blank" rel="noopener" title="https://blog.csdn.net/zym_1321/article/details/122198121">https://blog.csdn.net/zym_1321/article/details/122198121</a></p><p><a href="https://mp.weixin.qq.com/s/fIhZS1zso0FmBCRfNKezJg" target="_blank" rel="noopener" title="https://mp.weixin.qq.com/s/fIhZS1zso0FmBCRfNKezJg">https://mp.weixin.qq.com/s/fIhZS1zso0FmBCRfNKezJg</a></p><p><a href="https://www.zhihu.com/question/431015637" target="_blank" rel="noopener" title="https://www.zhihu.com/question/431015637">https://www.zhihu.com/question/431015637</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、配置文件脱敏&lt;/h1&gt;
&lt;h2 id=&quot;1、概述&quot;&gt;1、概述&lt;/h2&gt;
&lt;p&gt;核心隐私数据无论对于企业还是用户来说尤其重要，因此要想办法杜绝各种隐私数据的泄漏。对于工程中的敏感信息，与数据库打交道的的工程肯定是配置数据源，尤其是数据库的&lt;code&gt;账号密码&lt;/code&gt;，我们不想把它们&lt;code&gt;明文&lt;/code&gt;写在配置文件里，又想让工程能正确跑起来，那应该怎么做呢？&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://blog.shawncoding.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>过滤器与拦截器</title>
    <link href="https://blog.shawncoding.top/posts/5a99ecc7.html"/>
    <id>https://blog.shawncoding.top/posts/5a99ecc7.html</id>
    <published>2023-03-05T16:18:22.000Z</published>
    <updated>2023-03-17T02:19:48.174Z</updated>
    
    <content type="html"><![CDATA[<h1>一、前言</h1><blockquote><p>常用项目编写规范参考：<a href="https://blog.csdn.net/lemon_TT/article/details/108309900" target="_blank" rel="noopener" title="Spring Boot后端接口规范">Spring Boot后端接口规范</a></p></blockquote><h2 id="1、概述">1、概述</h2><p>前面讲到数据统一响应、全局异常等常用后端框架，那么随着项目的开发，需要对请求进行校验(参数校验、前面校验等)，不符合的不进入后端业务逻辑，提前返回并抛出异常。一般实现方法有拦截器和过滤器，这两者都可以实现对应的功能，可以根据自己喜好进行编写。</p><p>过滤器一般完成通用的操作。如：<strong>登录验证、统⼀编码处理、敏感字符过滤</strong>，常见的过滤器用途主要包括：<strong>对用户请求进行统一认证、对用户的访问请求进行记录和审核</strong>、对用户发送的数据进行过滤或替换、转换图象格式、对响应内容进行压缩以减少传输量、对请求或响应进行加解密处理、触发资源访问事件等；拦截器采用AOP的设计思想， 它跟过滤器类似， 用来<strong>拦截处理方法在之前和之后执行一些 跟主业务没有关系的一些公共功能</strong>，比如<strong>权限控制、日志、异常记录、记录方法执行时间</strong></p><a id="more"></a><p>下面来讲讲这两者的异同和代码demo。</p><h2 id="2、过滤器与拦截器异同">2、过滤器与拦截器异同</h2><h3 id="2-1-简介">2.1 简介</h3><p>过滤器(filter)和拦截器(Inteceptor)的执行顺序概览</p><p><img src="http://qnypic.shawncoding.top/blog/da12fa07e67f48a385233ac4352f2e8b.png" alt="在这里插入图片描述"></p><h3 id="2-2-异同">2.2 异同</h3><ul><li>过滤器和拦截器触发时机不一样，过滤器是在请求进入容器后，但请求进入servlet之前进行预处理的。请求结束返回也是，是在servlet处理完后，返回给前端之前</li><li><strong>拦截器可以获取IOC容器中的各个bean</strong>，而过滤器就不行，因为拦截器是spring提供并管理的，spring的功能可以被拦截器使用，在拦截器里注入一个service，可以调用业务逻辑。而过滤器是JavaEE标准，只需依赖servlet api ，不需要依赖spring</li><li>过滤器的实现基于回调函数。而拦截器（代理模式）的实现基于反射</li><li>Filter是依赖于Servlet容器，属于Servlet规范的一部分，而拦截器则是独立存在的，可以在任何情况下使用</li><li>Filter的执行由Servlet容器回调完成，而拦截器通常通过动态代理（反射）的方式来执行</li><li>Filter的生命周期由Servlet容器管理，而拦截器则可以通过IoC容器来管理，因此可以通过注入等方式来获取其他Bean的实例，因此使用会更方便</li></ul><h3 id="2-3-总结">2.3 总结</h3><ul><li>过滤器可以修改request，而拦截器不能  </li><li>过滤器需要在servlet容器中实现，拦截器可以适用于javaEE，javaSE等各种环境</li><li>拦截器可以调用IOC容器中的各种依赖，而过滤器不能</li><li>过滤器只能在请求的前后使用，而拦截器可以详细到每个方法</li></ul><p>具体的执行调用流程如下</p><p><img src="http://qnypic.shawncoding.top/blog/0c4dc4e4867a4edb8163950eb3db8865.png" alt="在这里插入图片描述"></p><ul><li>过滤器（Filter） ：可以拿到原始的http请求，但是拿不到你请求的控制器和请求控制器中的方法的信息</li><li>拦截器（Interceptor）：可以拿到你请求的控制器和方法，却拿不到请求方法的参数</li><li>切片（Aspect）: 可以拿到方法的参数，但是却拿不到http请求和响应的对象</li></ul><p><img src="http://qnypic.shawncoding.top/blog/e041e0dadd6c44238a65b91d68ab42f5.png" alt="在这里插入图片描述"></p><p>这里说一下为什么spring security使用过滤器而不是拦截器。因为作为一个通用的安全框架不应该耦合其他web框架的元素。很显然拦截器是spring mvc或struts等框架提供的，如果基于拦截器势必耦合这些框架，就做不到通用了</p><h2 id="3、Filters-vs-HandlerInterceptors">3、Filters vs HandlerInterceptors</h2><ul><li><em>Filter</em> 是 Servlet 规范中的，而 <em>HandlerInterceptor</em> 是 Spring 中的一个概念</li><li>拦截器位置相对于过滤器更靠后</li><li>精细的预处理任务适用于拦截器，如授权检查等</li><li>内容处理相关或通用的流程，非常适合用过滤器；如上传表单、zip 压缩、图像处理、日志记录请求、身份验证等</li><li><em>HandlerInterceptor</em> 的 <code>postHandle</code> 方法允许我们向视图添加更多模型对象，但不能更改 HttpServletResponse，因为它已经被提交了</li><li>过滤器的 <code>doFilter</code> 方法比拦截器的 <code>postHandle</code> 更通用。我们可以在过滤器中改变请求或响应，并将其传递给链，甚至阻止请求的处理</li><li><em>HandlerInterceptor</em> 提供了比过滤器更精细的控制，因为我们可以访问实际的目标 <em>handler</em>，甚至可以检查 handler 方法是否有某个特定的注解</li></ul><h1>二、过滤器</h1><h2 id="1、概述-v2">1、概述</h2><blockquote><p>过滤器（Filter）是处于客户端与服务器目标资源之间的⼀道过滤技术，当访问服务器的资源时，过滤器可以将请求拦截下来，完成⼀些特殊的功能</p></blockquote><p>执行是在Servlet之前，客户端发送请求时，会先经过Filter，再到达目标Servlet中；响应时， 会根据执行流程再次反向执行Filter，⼀般用于完成通用的操作。如：登录验证、统⼀编码处理、敏感字符过滤。常见的过滤器用途主要包括：<strong>对用户请求进行统一认证、对用户的访问请</strong>求进行记录和审核、对用户发送的数据进行过滤或替换、转换图象格式、对响应内容进行压缩以减少传输量、对请求或响应进行加解密处理、触发资源访问事件等</p><h2 id="2、生命周期">2、生命周期</h2><h3 id="2-1-生命周期概述">2.1 生命周期概述</h3><p>过滤器的配置比较简单，<strong>直接实现Filter 接口即可</strong>，也可以通过<code>@WebFilter</code>注解实现对特定URL拦截，看到Filter 接口中定义了三个方法。</p><ul><li><code>init()</code> ：该方法在容器启动初始化过滤器时被调用，它在 Filter 的整个生命周期只会被调用一次。注意：这个方法必须执行成功，否则过滤器会不起作用</li><li><code>doFilter()</code> ：容器中的每一次请求都会调用该方法，比如定义一个 Filter 拦截 <code>/path/*</code>，那么每一个匹配 <code>/path/*</code> 访问资源的请求进来时，都会执行此方法， FilterChain 用来调用下一个过滤器 Filter。不同的过滤器通过<code>@Order()</code>排序注解执行顺序</li><li><code>destroy()</code>： 当容器销毁 过滤器实例时调用该方法，一般在方法中销毁或关闭资源，在过滤器 Filter 的整个生命周期也只会被调用一次</li></ul><h3 id="2-2-基于函数回调实现原理">2.2 基于函数回调实现原理</h3><p>在我们自定义的过滤器中都会实现一个 <code>doFilter()</code>方法，这个方法有一个<code>FilterChain</code> 参数，而实际上它是一个回调接口。<code>ApplicationFilterChain</code>是它的实现类， 这个实现类内部也有一个 <code>doFilter()</code> 方法就是回调方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FilterChain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ApplicationFilterChain</code>里面能拿到我们自定义的<code>xxxFilter</code>类，在其内部回调方法<code>doFilter()</code>里调用各个自定义<code>xxxFilter</code>过滤器，并执行 <code>doFilter()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationFilterChain</span> <span class="keyword">implements</span> <span class="title">FilterChain</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">            ...<span class="comment">//省略</span></span><br><span class="line">            internalDoFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">internalDoFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">            <span class="comment">//获取第pos个filter    </span></span><br><span class="line">            ApplicationFilterConfig filterConfig = filters[pos++];        </span><br><span class="line">            Filter filter = filterConfig.getFilter();</span><br><span class="line">            ...</span><br><span class="line">            filter.doFilter(request, response, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而每个<code>xxxFilter </code>会先执行自身的 <code>doFilter()</code> 过滤逻辑，最后在执行结束前会执行<code>filterChain.doFilter(servletRequest, servletResponse)</code>，也就是回调<code>ApplicationFilterChain</code>的<code>doFilter()</code> 方法，以此循环执行实现函数回调</p><h2 id="3、自定义过滤器两种实现方式">3、自定义过滤器两种实现方式</h2><p>不论是注解配置还是Java配置，都需要在启动类上加上<code>@ServletComponentScan(&quot;过滤器路径&quot;)</code>注解，过滤路径可以不写(或者直接注入容器交给spring管理)。注解注册和Java配置类注册，它们的自定义过滤器类都是一样的，只不过注册过程一个是通过<code>@WebFilter</code>注解，一个是通过Java配置类注册Bean。</p><h3 id="3-1-WebFilter注解注册">3.1 @WebFilter注解注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解过滤器实现</span></span><br><span class="line"><span class="comment"> * Filter的包是javax.servlet.Filter的</span></span><br><span class="line"><span class="comment"> * filterName：过滤器名称，需要唯一，不能重复</span></span><br><span class="line"><span class="comment"> * urlPatterns：要拦截的url资源路径，注意：通配符是一个星号（*）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)<span class="comment">//排序注解，执行顺序</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"filterAnnotation"</span>,urlPatterns = &#123;<span class="string">"/study/interfaces/v1/user"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">filterAnnotation</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化操作，只会执行一次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"filterAnnotation--初始化Filter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进入到过滤资源之前和之后做的事情</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"filterAnnotation--进入Target Resource之前做的事情"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"filterAnnotation--处理返回的Response"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁，只会在项目停止或者重新部署的时候才会执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"filterAnnotation--销毁Filter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再举一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"loginCheckFilter"</span>,urlPatterns = <span class="string">"/*"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> AntPathMatcher PATH_MATCHER = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取本次请求的URI</span></span><br><span class="line">        String requestURI = request.getRequestURI();<span class="comment">// /backend/index.html</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"拦截到请求：&#123;&#125;"</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">"/employee/login"</span>,</span><br><span class="line">                <span class="string">"/employee/logout"</span>,</span><br><span class="line">                <span class="string">"/backend/**"</span>,</span><br><span class="line">                <span class="string">"/front/**"</span>,</span><br><span class="line">                <span class="string">"/common/**"</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、判断本次请求是否需要处理</span></span><br><span class="line">        <span class="keyword">boolean</span> check = check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(check)&#123;</span><br><span class="line">            log.info(<span class="string">"本次请求&#123;&#125;不需要处理"</span>,requestURI);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">"employee"</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"用户已登录，用户id为：&#123;&#125;"</span>,request.getSession().getAttribute(<span class="string">"employee"</span>));</span><br><span class="line"></span><br><span class="line">            Long empId = (Long) request.getSession().getAttribute(<span class="string">"employee"</span>);</span><br><span class="line">            BaseContext.setCurrentId(empId);</span><br><span class="line"></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"用户未登录"</span>);</span><br><span class="line">        <span class="comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">"NOTLOGIN"</span>)));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，检查本次请求是否需要放行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String[] urls,String requestURI)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> match = PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span>(match)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-过滤器（配置类注册过滤器）">3.2 过滤器（配置类注册过滤器）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(BaseFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN = <span class="string">"20220423344556abac"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//内部接口集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; INSIDE_URLS = Lists.newArrayList(<span class="string">"/index"</span>,<span class="string">"/inside"</span>);</span><br><span class="line">    <span class="comment">//白名单接口集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; WHITE_PATH = Lists.newArrayList(<span class="string">"/white"</span>,<span class="string">"/login"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"初始化数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponseWrapper wrapper = <span class="keyword">new</span> HttpServletResponseWrapper((HttpServletResponse)servletResponse);</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span>(INSIDE_URLS.contains(requestURI))&#123;</span><br><span class="line">            <span class="comment">//内部接口，直接通过</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(WHITE_PATH.contains(requestURI))&#123;</span><br><span class="line">            <span class="comment">//白名单接口，直接通过</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行校验，如token校验</span></span><br><span class="line">        String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span>(TOKEN.equals(token))&#123;</span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//token校验不通过，重定向到登录页面</span></span><br><span class="line">            wrapper.sendRedirect(<span class="string">"/login"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后设置配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 作用相当于<span class="doctag">@WebFilter</span>这个注解</span></span><br><span class="line"><span class="comment"> * 过滤器配置类，进过滤器配置到bean中</span></span><br><span class="line"><span class="comment"> * Filter的包是javax.servlet.Filter的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//这个注解的目的是被IOC容器获取到</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基础过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;Filter&gt; <span class="title">baseFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        filterRegistrationBean.setFilter(<span class="keyword">new</span> BaseFilter());<span class="comment">//注册自定义过滤器类</span></span><br><span class="line">        <span class="comment">//过滤资源的路径，或者静态资源，注意：通配符是一个星号（*）</span></span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Lists.newArrayList(<span class="string">"/*"</span>));</span><br><span class="line">        filterRegistrationBean.setOrder(<span class="number">1</span>);<span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、实战OncePerRequestFilter">4、实战OncePerRequestFilter</h2><p>自定义配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"security.checker"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityCheckerConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean enable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放accessKey和accessSecurity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sign的过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer signExpireTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面继承了OncePerRequestFilter 来实现我们自己的自定义过滤器，OncePerRequestFilter 特点是请求进入后只会过滤一次，不会重复过滤(有些情况请求可能会两次进入相同的过滤器)，同时在不符合要求的请求需要即使抛出异常返回，或者重定向到其他接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamCheckFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"handlerExceptionResolver"</span>)</span><br><span class="line">    <span class="keyword">private</span> HandlerExceptionResolver resolver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己在application.yaml定义的字段</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SecurityCheckerConfig securityCheckerConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!securityCheckerConfig.getEnable())&#123;</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String timestamp = request.getHeader(<span class="string">"timestamp"</span>);</span><br><span class="line">        String accessKey = request.getHeader(<span class="string">"accesskey"</span>);</span><br><span class="line">        String sign = request.getHeader(<span class="string">"sign"</span>);</span><br><span class="line">        <span class="comment">//根据key在配置文件拿取accessSecret</span></span><br><span class="line">        String accessSecret = securityCheckerConfig.getMaps().get(accessKey);</span><br><span class="line">        <span class="comment">//检查时间戳合法性</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isNumeric(timestamp))&#123;</span><br><span class="line">            <span class="comment">// 异常类自定义的</span></span><br><span class="line">            resolver.resolveException(request,response,<span class="keyword">null</span>,<span class="keyword">new</span> TruckException(CustomCodeEnum.TIMESTAMP_IS_WRONGFUL));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//禁止超时签名</span></span><br><span class="line">        Long ts = Long.valueOf(timestamp);</span><br><span class="line">        <span class="keyword">if</span> (System.currentTimeMillis() - ts &gt; (securityCheckerConfig.getSignExpireTime() * CommonConstant.SECOND_TO_MILLIS)) &#123;</span><br><span class="line">            resolver.resolveException(request,response,<span class="keyword">null</span>,<span class="keyword">new</span> TruckException(CustomCodeEnum.SIGN_OVERTIME));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查KEY是否合理</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(accessKey) || StringUtils.isBlank(accessSecret)) &#123;</span><br><span class="line">            resolver.resolveException(request,response,<span class="keyword">null</span>,<span class="keyword">new</span> TruckException(CustomCodeEnum.ACCESSKEY_WRONGFUL));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!checkSign(getBody(request),accessSecret, sign))&#123;</span><br><span class="line">            resolver.resolveException(request,response,<span class="keyword">null</span>,<span class="keyword">new</span> TruckException(CustomCodeEnum.SIGN_ERROR));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkSign</span><span class="params">(Map&lt;String, Object&gt; params, String accessSecret, String originSign)</span> </span>&#123;</span><br><span class="line">        String sign = createSign(params, accessSecret);</span><br><span class="line">        <span class="keyword">if</span> (!sign.equals(originSign)) &#123;</span><br><span class="line">            log.error(<span class="string">"sign 校验不通过！ params: &#123;&#125;, ours sign : &#123;&#125;, theirs : &#123;&#125;"</span>, params, sign, originSign);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求体（去除空值）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> LinkedHashMap&lt;String, Object&gt; <span class="title">getBody</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String[]&gt; requestParameterMap = request.getParameterMap();</span><br><span class="line">        JSONObject params = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(requestParameterMap))&#123;</span><br><span class="line">            requestParameterMap.forEach((k,v) -&gt; params.put(k,v[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sortFields(params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将请求参数按照ASCII码排序，方便校验sign</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> LinkedHashMap&lt;String, Object&gt; <span class="title">sortFields</span><span class="params">(JSONObject params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将请求参数按照ASCII码排序，方便校验sign</span></span><br><span class="line">        String json = JSON.toJSONString(params, SerializerFeature.SortField);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseObject(json, LinkedHashMap<span class="class">.<span class="keyword">class</span>, <span class="title">Feature</span>.<span class="title">OrderedField</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成sign</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 所有字段按照ASCII码排序，否则签名不一样</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createSign</span><span class="params">(Map&lt;String, Object&gt; params, String accessSecret)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; keysSet = params.keySet();</span><br><span class="line">        Object[] keys = keysSet.toArray();</span><br><span class="line">        Arrays.sort(keys);</span><br><span class="line">        <span class="comment">// 拼接所有一级字段，二级字段不处理，但是字段按ASCII码排序</span></span><br><span class="line">        List&lt;String&gt; paramList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">            String value = String.valueOf(params.get(key));</span><br><span class="line">            String  str = key + <span class="string">"="</span> + value.replaceAll(<span class="string">"[\"| ]"</span>,<span class="string">""</span>).replaceAll(<span class="string">":"</span>, <span class="string">""</span>).trim();</span><br><span class="line">            paramList.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        paramList.add(<span class="string">"accessSecret="</span> + accessSecret);</span><br><span class="line">        String paramStr = String.join(<span class="string">"&amp;"</span>, paramList);</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.md5DigestAsHex(paramStr.getBytes()).toUpperCase();</span><br><span class="line"><span class="comment">//        return DigestUtils.md5Hex(paramStr).toUpperCase();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意的是我们用了<code>HandlerExceptionResolver</code> ，因为在Spring Boot由于全局异常处理<code>@RestControllerAdvice</code>只会去捕获所有Controller层抛出的异常，所以在filter当中抛出的异常GlobalExceptionHandler类是没有感知的，所以在filter当中抛出的异常最终会被Spring框架自带的全局异常处理类BasicErrorController捕获，会返回基础格式的Json响应</p><p>一种方法是继承上面所说的<code>BasicErrorController类</code>，并重写error()方法；另一种就是在filter当中引入<code>HandlerExceptionResolver</code>类，通过该类的<code>resolveException</code>方法抛出自定义异常，通过resolveException方法抛出的自定义异常可以被<code>RestControllerAdvice</code>捕获，从而满足我们的需求，最终得到的响应格式</p><h1>三、拦截器</h1><h2 id="1、概述-v3">1、概述</h2><p>拦截器采用AOP的设计思想， 它跟过滤器类似， 用来拦截处理方法在之前和之后执行一些 跟主业务没有关系的一些公共功能，比如可以实现权限控制、日志、异常记录、记录方法执行时间等等</p><h2 id="2、自定义拦截器">2、自定义拦截器</h2><h3 id="2-1-生命周期">2.1 生命周期</h3><p>SpringMVC提供了拦截器机制，允许运行目标方法之前进行一些拦截工作或者目标方法运行之后进行一下其他相关的处理。自定义的拦截器<strong>必须实现 HandlerInterceptor接口</strong>。</p><p>HandlerInterceptor 接口中定义了三个方法</p><ul><li><code>preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</code> ：这个方法将在请求处理之前进行调用。注意：如果该方法的<strong>返回值为false ，将视为当前请求结束</strong>，不仅自身的拦截器会失效，还会导致其他的拦截器也不再执行。</li><li><code>postHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</code>：只有在 preHandle() 方法返回值为true 时才会执行。会在Controller 中的方法调用之后，DispatcherServlet 返回渲染视图之前被调用。 此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null</li><li><code>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler)</code>：只有在 preHandle() 方法返回值为true 时才会执行。在整个请求结束之后， DispatcherServlet 渲染了对应的视图之后执行。如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于<code>try­ catch ­finally</code>中的finally，但仅调用处理器执行链中preHandle返回true的拦截器才会执行</li></ul><h3 id="2-2-代码示例">2.2 代码示例</h3><p>首先创建自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在处理方法之前执 日志、权限、 记录调用时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 可以在方法请求进来之前更改request中的属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 封装了当前处理方法的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 后续调用链是否执行/ false 则中断后续执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在请求映射到对应的处理方法映射，实现类才是HandlerMethod。</span></span><br><span class="line">        <span class="comment">// 如果是视图控制器，实现类ParameterizableViewController</span></span><br><span class="line">        <span class="keyword">if</span>(handler <span class="keyword">instanceof</span> HandlerMethod ) &#123;</span><br><span class="line">            HandlerMethod handMethod = (HandlerMethod) handler;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*System.out.println("-------类["+handMethod.getBean().getClass().getName()+"]" +</span></span><br><span class="line"><span class="comment">                "方法名["+handMethod.getMethod().getName()+"]" +</span></span><br><span class="line"><span class="comment">                "参数["+ Arrays.toString(handMethod.getMethod().getParameters()) +"]前执行--------preHandle");*/</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"---------方法后执行，在渲染之前--------------preHandle"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  如果preHandle返回false则会不会允许该方法</span></span><br><span class="line"><span class="comment">     *  在请求执行后执行, 在视图渲染之前执行</span></span><br><span class="line"><span class="comment">     *  当处理方法出现了异常则不会执行方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 可以在方法执行后去更改response中的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler  封装了当前处理方法的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView 封装了model和view.所以当请求结束后可以修改model中的数据或者新增model数据，也可以修改view的跳转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"---------方法后执行，在渲染之前--------------postHandle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果preHandle返回false则会不会允许该方法</span></span><br><span class="line"><span class="comment">     * 在视图渲染之后执行，相当于try catch finally 中finally，出现异常也一定会执行该方法</span></span><br><span class="line"><span class="comment">     * 如果执行的时候核心的业务代码出问题了，那么已经通过的拦截器的 afterCompletion会接着执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex  Exception对象，在该方法中去做一些：记录异常日志的功能，或者清除资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"---------在视图渲染之后--------------afterCompletion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在spring boot 项目中配置，实现 <code>WebMvcConfigurer </code>接口 并重写 <code>addInterceptors</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyFirstInterceptor <span class="title">myInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyFirstInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(myInterceptor())</span><br><span class="line">            .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">"/*.html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test01"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请求方法执行中..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-多拦截器示例">2.3 多拦截器示例</h3><p>拦截顺序取决于配置的顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyFirstInterceptor <span class="title">myInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyFirstInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MySecondInterceptor <span class="title">mySecondInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySecondInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(myInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/*.html"</span>);</span><br><span class="line">        registry.addInterceptor(mySecondInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">"/*.html"</span>)</span><br><span class="line">        .order(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到输出结果发现，先声明的拦截器 preHandle() 方法先执行，而postHandle()方法反而会后执行。<strong>但注意postHandle() 方法被调用的顺序跟 preHandle() 是相反的</strong>。我们要知道controller 中所有的请求都要经过核心组件<strong>DispatcherServlet</strong>路由，都会执行它的 <code>doDispatch()</code> 方法，而拦截器postHandle()、preHandle()方法便是在其中调用的。查看源码可知，发现两个方法中在调用拦截器数组 HandlerInterceptor[] 时，循环的顺序竟然是相反的</p><h3 id="3-4-静态资源被拦截问题">3.4 静态资源被拦截问题</h3><p>配置拦截器会导致静态资源被拦截，比如在 resources/static/ 目录下放置一个图片资源或者 html 文件，然后启动项目直接访问，即可看到无法访问的现象。也就是说，虽然 Spring Boot 2.0 废弃了<code>WebMvcConfigurerAdapter</code>，但是 <code>WebMvcConfigurationSupport</code> 又会导致默认的静态资源被拦截，这就需要我们手动将静态资源放开</p><p>除了在 MyInterceptorConfig 配置类中重写 <code>addInterceptors</code> 方法外，还需要再重写一个方法：<code>addResourceHandlers</code>，将静态资源放开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来指定静态资源不被拦截，否则继承WebMvcConfigurationSupport这种方式会导致静态资源无法直接访问</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/static/"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置好之后，重启项目，静态资源也可以正常访问了。</p><p>另一种方法是不继承 <code>WebMvcConfigurationSupport </code>类，直接实现 <code>WebMvcConfigurer </code>接口，然后重写 <code>addInterceptors</code> 方法，将自定义的拦截器添加进去即可（上面讲到）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现WebMvcConfigurer不会导致静态资源被拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、实战demo">4、实战demo</h2><p>判断用户有没有登录，一般用户登录功能我们可以这么做，要么往 session 中写一个 user，要么针对每个 user 生成一个 token，第二种要更好一点，那么针对第二种方式，如果用户登录成功了，每次请求的时候都会带上该用户的 token，如果未登录，则没有该 token，服务端可以检测这个 token 参数的有无来判断用户有没有登录，从而实现拦截功能。我们改造一下 <code>preHandle</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">    Method method = handlerMethod.getMethod();</span><br><span class="line">    String methodName = method.getName();</span><br><span class="line">    logger.info(<span class="string">"====拦截到了方法：&#123;&#125;，在该方法执行之前执行===="</span>, methodName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断用户有没有登陆，一般登陆之后的用户都有一个对应的token</span></span><br><span class="line">    String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == token || <span class="string">""</span>.equals(token)) &#123;</span><br><span class="line">        logger.info(<span class="string">"用户未登录，没有权限执行……请登录"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回true才会继续执行，返回false则取消当前请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后还有一个监听器，可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/126063399" target="_blank" rel="noopener" title="Spring事件监听">Spring事件监听</a></p><hr><p><a href="https://zhuanlan.zhihu.com/p/340397290" target="_blank" rel="noopener" title="https://zhuanlan.zhihu.com/p/340397290">https://zhuanlan.zhihu.com/p/340397290</a></p><p><a href="https://zhuanlan.zhihu.com/p/484289805" target="_blank" rel="noopener" title="https://zhuanlan.zhihu.com/p/484289805">https://zhuanlan.zhihu.com/p/484289805</a></p><p><a href="https://www.zhihu.com/question/443466900/answer/2509838187" target="_blank" rel="noopener" title="https://www.zhihu.com/question/443466900/answer/2509838187">https://www.zhihu.com/question/443466900/answer/2509838187</a>  </p><p><a href="https://blog.csdn.net/qq_45534061/article/details/106266747" target="_blank" rel="noopener" title="https://blog.csdn.net/qq_45534061/article/details/106266747">https://blog.csdn.net/qq_45534061/article/details/106266747</a></p><p><a href="https://blog.csdn.net/m0_37731470/article/details/116754395" target="_blank" rel="noopener" title="https://blog.csdn.net/m0_37731470/article/details/116754395">https://blog.csdn.net/m0_37731470/article/details/116754395</a></p><p><a href="https://blog.csdn.net/xinzhifu1/article/details/106356958/" target="_blank" rel="noopener" title="https://blog.csdn.net/xinzhifu1/article/details/106356958/">https://blog.csdn.net/xinzhifu1/article/details/106356958/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、前言&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;常用项目编写规范参考：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/108309900&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Spring Boot后端接口规范&quot;&gt;Spring Boot后端接口规范&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、概述&quot;&gt;1、概述&lt;/h2&gt;
&lt;p&gt;前面讲到数据统一响应、全局异常等常用后端框架，那么随着项目的开发，需要对请求进行校验(参数校验、前面校验等)，不符合的不进入后端业务逻辑，提前返回并抛出异常。一般实现方法有拦截器和过滤器，这两者都可以实现对应的功能，可以根据自己喜好进行编写。&lt;/p&gt;
&lt;p&gt;过滤器一般完成通用的操作。如：&lt;strong&gt;登录验证、统⼀编码处理、敏感字符过滤&lt;/strong&gt;，常见的过滤器用途主要包括：&lt;strong&gt;对用户请求进行统一认证、对用户的访问请求进行记录和审核&lt;/strong&gt;、对用户发送的数据进行过滤或替换、转换图象格式、对响应内容进行压缩以减少传输量、对请求或响应进行加解密处理、触发资源访问事件等；拦截器采用AOP的设计思想， 它跟过滤器类似， 用来&lt;strong&gt;拦截处理方法在之前和之后执行一些 跟主业务没有关系的一些公共功能&lt;/strong&gt;，比如&lt;strong&gt;权限控制、日志、异常记录、记录方法执行时间&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="Spring基础" scheme="https://blog.shawncoding.top/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot监控</title>
    <link href="https://blog.shawncoding.top/posts/d1523d3d.html"/>
    <id>https://blog.shawncoding.top/posts/d1523d3d.html</id>
    <published>2023-03-05T16:18:15.000Z</published>
    <updated>2023-03-17T05:56:36.046Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Prometheus+Grafana监控Springboot</h1><h2 id="1、简介">1、简介</h2><p>任何一个系统上线，运维监控都太重要了。关于Springboot微服务的监控，之前写过<a href="https://blog.csdn.net/lemon_TT/article/details/124675465" target="_blank" rel="noopener" title="Spring Boot Admin服务监控">Spring Boot Admin服务监控</a>，这个方案可以<strong>实时监控并提供告警提醒功能，但不能记录历史数据</strong>，无法查看过去1小时或过去1天等运维情况。本文介绍Prometheus + Grafana的方法监控Springboot 2.X，实现美观漂亮的数据可视化。</p><a id="more"></a><h2 id="2、SpringBoot应用镜像搭建">2、SpringBoot应用镜像搭建</h2><h3 id="2-1-springboot应用创建">2.1 springboot应用创建</h3><p>引入依赖，springboot选用2.x，jdk8</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Exposition servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- prometheus --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Hotspot JVM metrics--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建测试Controller，提供1000个线程方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(TestController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建线程</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">""</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        logger.info(Thread.currentThread().getName());</span><br><span class="line">      &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources目录下创建application.yml配置文件，endpoints可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/127089969" target="_blank" rel="noopener" title="SpringBoot生产监控">SpringBoot生产监控</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">monitor-demo</span></span><br><span class="line">  <span class="attr">security:</span> </span><br><span class="line">    <span class="attr">user:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">management:</span> </span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><h3 id="2-2-镜像创建">2.2 镜像创建</h3><p>上传服务器创建Dockerfile</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于java镜像创建新镜像</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> shawn</span><br><span class="line"><span class="comment"># 将jar包添加到容器中并更名为app.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash">  ./visualization.jar /visualization.jar</span></span><br><span class="line"><span class="comment"># 运行jar包</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"nohup"</span>,<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/visualization.jar"</span>,<span class="string">"&amp;"</span>]</span></span><br></pre></td></tr></table></figure><p>打包与运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker build -t demo01 .</span><br><span class="line">docker run -d -p 8888:8888 --name demo01 demo01</span><br><span class="line">docker ps -a</span><br><span class="line">docker logs demo01</span><br><span class="line"><span class="comment"># 浏览器访问，输入用户名密码：admin/123456</span></span><br><span class="line">http://192.168.31.98:8888/actuator/prometheus</span><br></pre></td></tr></table></figure><h2 id="3、Prometheus">3、Prometheus</h2><h3 id="3-1-概述">3.1 概述</h3><p>Prometheus是一个开源的服务监控系统时间序列数据库，通过Http请求拉取被监控的服务暴露的端点公开的度量列表和值，然后存放到时序数据库中，在现在最常见的<code>Kubernetes</code>容器管理系统中。最好再通过 Grafana的Dashboard进行图表展示分析和告警</p><h3 id="3-2-Prometheus创建">3.2 Prometheus创建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p visual/prometheus</span><br><span class="line"><span class="built_in">cd</span> visual</span><br><span class="line"></span><br><span class="line">docker pull prom/prometheus</span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 注意这里先创建好配置文件，配置文件见下面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始启动运行，注意修改路径</span></span><br><span class="line">docker run --name=prometheus --privileged=<span class="literal">true</span> \</span><br><span class="line">-p 9090:9090 -m 500M \</span><br><span class="line">--restart=on-failure:3 \</span><br><span class="line">-v /home/shawn/visual/prometheus.yml:/prometheus.yml \</span><br><span class="line">-v /home/shawn/visual/prometheus/data:/data -d prom/prometheus \</span><br><span class="line">--config.file=/prometheus.yml</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后就可以打开网页查看</span></span><br><span class="line">http://192.168.31.98:9090/targets</span><br></pre></td></tr></table></figure><p>准备配置文件<code>prometheus.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span> </span><br><span class="line">  <span class="comment"># 可随意指定，默认保存15天</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">monitor-demo</span></span><br><span class="line">    <span class="comment"># 多久采集一次数据</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="comment"># 采集时的超时时间</span></span><br><span class="line">    <span class="attr">scrape_timeout:</span> <span class="string">5s</span></span><br><span class="line">    <span class="comment"># 采集的路径</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">basic_auth:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 采集服务的地址，设置成Springboot应用所在服务器的具体地址</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="comment"># 可以多个地址- targets: ['hostname:9000','hostname:8080']</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.98</span><span class="string">:8888</span></span><br></pre></td></tr></table></figure><p>结果页面<br><img src="http://qnypic.shawncoding.top/blog/b664b1fc48a940c49f48a3996d9dc450.png" alt="在这里插入图片描述"></p><h2 id="4、Grafana可视化监控">4、Grafana可视化监控</h2><h3 id="4-1-可视化">4.1 可视化</h3><p>Docker部署Grafana，注意镜像源的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull grafana/grafana</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 </span></span><br><span class="line">docker run --name=grafana -p 3000:3000 --restart=always -d grafana/grafana</span><br></pre></td></tr></table></figure><p>浏览器访问：<code>http://192.168.31.98:3000</code>，输入用户名密码：admin/admin。成功登录后首先导入数据源，<code>Settings--&gt;Data Sources--&gt;选择Prometheus --&gt;url填写http://192.168.31.98:9090(刚才Prometheus 的地址)--&gt;保存</code></p><p>然后导入可视化面板：点击<code>+</code>号 --&gt; <code>Import</code> --&gt; 输入模板链接或ID --&gt; 点击Load</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里推荐一个模板id:10280</span></span><br><span class="line"><span class="comment"># 模板官网：https://grafana.com/grafana/dashboards</span></span><br></pre></td></tr></table></figure><p>当然各个面板可以自定义，不过要注意的是，面板的数据需要在<code>http://192.168.31.98:9090/graph</code>查得到才行，可以点击Explore→Metrics browser查看<br><img src="http://qnypic.shawncoding.top/blog/b2a36a8fe1d84feda6c5ea201e22700b.png" alt="在这里插入图片描述"></p><h3 id="4-2-告警设置">4.2 告警设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=grafana -p 3000:3000 \</span><br><span class="line">-v /home/shawn/visual/custom.ini:/usr/grafana/conf/custom.ini \</span><br><span class="line">--restart=always -d grafana/grafana \</span><br><span class="line">--config /usr/grafana/conf/custom.ini</span><br></pre></td></tr></table></figure><p>custom.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第522行修改smtp配置，所有修改配置前 ; 注释符号需要取消，将对应行，改为以下内容：</span></span><br><span class="line"><span class="section">[smtp]</span></span><br><span class="line"><span class="comment">#启用smtp</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span>                 </span><br><span class="line"><span class="comment">#qq smtp服务地址</span></span><br><span class="line"><span class="attr">host</span> = smtp.qq.com:<span class="number">465</span>        </span><br><span class="line"><span class="comment">#qq邮箱用户名</span></span><br><span class="line"><span class="attr">user</span> = <span class="number">86251</span>xxx@qq.com   </span><br><span class="line"><span class="comment"># If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""</span></span><br><span class="line"><span class="attr">password</span> = xxxxx     <span class="comment">#授权密码</span></span><br><span class="line"><span class="comment">#邮件From地址，和登录用户一致即可。</span></span><br><span class="line"><span class="attr">from_address</span> = <span class="number">86251</span>xxx@qq.com  </span><br><span class="line"><span class="comment">#修改完邮件配置后修改domain信息，邮件内容中包含Grafana的访问地址，默认地址为localhost</span></span><br></pre></td></tr></table></figure><h1>二、轻量级日志系统Loki</h1><blockquote><p>Loki官网：<a href="https://grafana.com/oss/loki/" target="_blank" rel="noopener" title="https://grafana.com/oss/loki/">https://grafana.com/oss/loki/</a></p></blockquote><h2 id="1、简介-v2">1、简介</h2><h3 id="1-1-介绍">1.1 介绍</h3><p>Loki是受Prometheus启发由Grafana Labs团队开源的水平可扩展，高度可用的多租户日志聚合系统。 开发语言: Google Go。它的设计具有很高的成本效益，并且易于操作。使用标签来作为索引，而不是对全文进行检索，也就是说，你通过这些标签既可以查询日志的内容也可以查询到监控的数据签，极大地降低了日志索引的存储。系统架构十分简单，由以下3个部分组成 ：</p><ul><li>Loki 是主服务器，负责存储日志和处理查询 。</li><li>promtail 是代理，负责收集日志并将其发送给 loki 。</li><li>Grafana 用于 UI 展示。</li></ul><p>只要在应用程序服务器上安装promtail来收集日志然后发送给Loki存储，就可以在Grafana UI界面通过添加Loki为数据源进行日志查询（如果Loki服务器性能不够，可以部署多个Loki进行存储及查询）。作为一个日志系统不关只有查询分析日志的能力，还能对日志进行监控和报警</p><h3 id="1-2-与ELK差异">1.2 与ELK差异</h3><ul><li>ELK虽然功能丰富，但规模复杂，资源占用高，操作苦难，很多功能往往用不上，有点杀鸡用牛刀的感觉。</li><li>不对日志进行全文索引。通过存储压缩非结构化日志和仅索引元数据，Loki 操作起来会更简单，更省成本。</li><li>通过使用与 Prometheus 相同的标签记录流对日志进行索引和分组，这使得日志的扩展和操作效率更高。</li><li>安装部署简单快速，且受 Grafana 原生支持</li></ul><h2 id="2、grafana-loki日志系统基本使用">2、grafana loki日志系统基本使用</h2><blockquote><p>高版本可以参考：<a href="https://grafana.com/docs/loki/latest/installation/docker/" target="_blank" rel="noopener" title="https://grafana.com/docs/loki/latest/installation/docker/">https://grafana.com/docs/loki/latest/installation/docker/</a></p></blockquote><h3 id="2-1-本机日志收集">2.1 本机日志收集</h3><p>这里直接使用docker-compose进行安装了，<code>docker-compose -f docker-compose.yaml up -d</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:1.5.0</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LANG=zh_CN.UTF-8</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3100:3100"</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/loki/local-config.yaml</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">promtail:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/promtail:1.5.0</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LANG=zh_CN.UTF-8</span></span><br><span class="line">    <span class="comment"># 日志映射路径自己修改</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/log/:/var/log/</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/promtail/docker-config.yaml</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LANG=zh_CN.UTF-8</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3000:3000"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br></pre></td></tr></table></figure><h3 id="2-2-docker日志容器查看">2.2 docker日志容器查看</h3><p>promtail只能收集本机的日志文件，如果要收集docker容器日志文件，需要在安装一个docker插件<code>loki-docker-driver</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">docker plugin install grafana/loki-docker-driver:latest --<span class="built_in">alias</span> loki --grant-all-permissions</span><br><span class="line"><span class="comment"># 当有新版本时, 更新plugins</span></span><br><span class="line">docker plugin <span class="built_in">disable</span> loki --force</span><br><span class="line">docker plugin upgrade loki grafana/loki-docker-driver:latest --grant-all-permissions</span><br><span class="line">docker plugin <span class="built_in">enable</span> loki</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>对于loki的<a href="https://github.com/cyriltovena/loki/blob/master/docs/sources/clients/docker-driver/configuration.md" target="_blank" rel="noopener" title="docker plugin">docker plugin</a>有两种使用方式。</p><ul><li>配置daemon.json,收集此后创建的所有容器的日志(注意，是配置daemon.json后重启docker服务后创建的容器才会把日志输出到loki</li><li>新建容器时指定logging类型为loki，这样只有指定了logging的容器才会输出到loki</li></ul><p><strong>全局收集配置</strong></p><p>编辑daemon.json，linux下默认路径是<code>/etc/docker/daemon.json (需要sudo)</code>， windows则默认是%userprofile%\.docker\daemon.json</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line">  <span class="comment"># 加速地址</span></span><br><span class="line">  <span class="attr">"registry-mirrors":</span> <span class="string">["https://xxx.mirror.aliyuncs.com"],</span></span><br><span class="line">  <span class="attr">"log-driver":</span> <span class="string">"loki"</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"log-opts":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="comment"># 配置的loki服务器地址</span></span><br><span class="line">    <span class="attr">"loki-url":</span> <span class="string">"http://192.168.1.1:3100/loki/api/v1/push"</span><span class="string">,</span></span><br><span class="line">    <span class="comment"># "loki-pipeline-stages": "- multiline:\n      firstline: '^\[\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125; \w&#123;4&#125;\]'\n",</span></span><br><span class="line">    <span class="attr">"max-size":</span> <span class="string">"50m"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"max-file":</span> <span class="string">"10"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>max-size表示日志文件最大大小</li><li>max-file表示最多10个日志文件，都是对单个容器来说的,  </li><li><a href="https://github.com/cyriltovena/loki/blob/master/docs/sources/clients/promtail/stages/multiline.md" target="_blank" rel="noopener" title="multiline">multiline</a>是配置多行识别(默认最多128行)，转为单行，firstline表示单条日志的首行正则表达式。例如 [03:00:32 INFO] 开头这种格式,所以对应正则是^\[\d{2}:\d{2}:\d{2} \w{4}\]  按照你自己的日志开头编写对应正则替换即可</li></ul><p>最后重启docker，<code>sudo systemctl restart docker</code>，在此之后创建的容器默认都会把日志发送到loki</p><p><strong>docker run配置日志输出到loki</strong></p><p>通过docker run启动容器，可以通过–log-driver来指定为loki，进行特定的容器日志收集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8888:8888 --rm --name=demo01 \</span><br><span class="line">--<span class="built_in">log</span>-driver=loki --<span class="built_in">log</span>-opt loki-url=<span class="string">"http://YOUR_IP:3100/loki/api/v1/push"</span> \</span><br><span class="line">--<span class="built_in">log</span>-opt max-size=50m --<span class="built_in">log</span>-opt max-file=10 \</span><br><span class="line">demo01</span><br></pre></td></tr></table></figure><ul><li>–log-driver=loki指定日志驱动器为loki</li><li>–log-opt loki-url则指定了loki的url</li><li>–log-opt max-size日志最大大小</li><li>–log-opt max-file日志文件最大数量</li></ul><p><strong>docker-compose 配置日志输出到loki</strong></p><p>docker-compose 小于3.4可以对需要日志输出的配置添加配置如下，注意：max-size和max-file这里需要加引号</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">loki</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="attr">loki-url:</span> <span class="string">"http://YOUR_IP:3100/loki/api/v1/push"</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="string">"50m"</span></span><br><span class="line">    <span class="attr">max-file:</span> <span class="string">"10"</span></span><br><span class="line">    <span class="attr">loki-pipeline-stages:</span> <span class="string">|</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">multiline:</span></span><br><span class="line">          <span class="attr">firstline:</span> <span class="string">'^\[\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125; \w&#123;4&#125;\]'</span></span><br></pre></td></tr></table></figure><p>对于3.4及其以上版本可以通过定义模板来减少代码量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.4"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">x-logging:</span></span><br><span class="line">  <span class="string">&amp;loki-logging</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">loki</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="attr">loki-url:</span> <span class="string">"http://YOUR_IP:3100/loki/api/v1/push"</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="string">"50m"</span></span><br><span class="line">    <span class="attr">max-file:</span> <span class="string">"10"</span></span><br><span class="line">    <span class="attr">loki-pipeline-stages:</span> <span class="string">|</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">multiline:</span></span><br><span class="line">          <span class="attr">firstline:</span> <span class="string">'^\[\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125; \w&#123;4&#125;\]'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LANG=zh_CN.UTF-8</span></span><br><span class="line">    <span class="attr">logging:</span> <span class="string">*loki-logging</span></span><br></pre></td></tr></table></figure><h3 id="2-3-grafana可视化">2.3 grafana可视化</h3><p>打开grafana，<code>http://192.168.1.1:3000</code>(换成自己的ip)，账户密码为admin/admin，进入后首先配置配置<code>Data sources</code>，选择Loki数据源，url填写<code>http://192.168.1.1:3100</code>(换成自己的ip)，保存后点击Explore即可成功查看</p><p><img src="http://qnypic.shawncoding.top/blog/7143efd4ddd34db49c6d3356dfa9cd21.png" alt="在这里插入图片描述"></p><h2 id="3、grafana-prometheus-loki-监控docker容器收集服务日志">3、grafana+prometheus+loki 监控docker容器收集服务日志</h2><h3 id="3-1-创建grafana，prometheus文件夹及配置文件">3.1 创建grafana，prometheus文件夹及配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 创建grafana文件夹</span></span><br><span class="line">mkdir -p grafana/grafana</span><br><span class="line">mkdir -p grafana/grafana/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建prometheus文件夹</span></span><br><span class="line">mkdir -p grafana/prometheus</span><br><span class="line">mkdir -p grafana/prometheus/data</span><br><span class="line">mkdir -p grafana/prometheus/<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建prometheus配置文件</span></span><br><span class="line">vim grafana/prometheus/prometheus.yml</span><br></pre></td></tr></table></figure><p>注意ip和路径的修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 报警暂时不需要，后续可以添加</span></span><br><span class="line"><span class="comment">#alerting:</span></span><br><span class="line"><span class="comment">#  alertmanagers:</span></span><br><span class="line"><span class="comment">#  - static_configs:</span></span><br><span class="line"><span class="comment">#    - targets:</span></span><br><span class="line"><span class="comment">#      - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"*rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># prometheus</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.249.149:9090']</span></span><br><span class="line">  <span class="comment"># 主机监控</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'node'</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.249.149:9100']</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment"># docker资源监控</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'cadvisor'</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.249.149:8080']</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># springboot 项目监控</span></span><br><span class="line"><span class="comment"># springboot 监控需要项目中集成prometheus</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">monitor-demo</span></span><br><span class="line">    <span class="comment"># 多久采集一次数据</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="comment"># 采集时的超时时间</span></span><br><span class="line">    <span class="attr">scrape_timeout:</span> <span class="string">5s</span></span><br><span class="line">    <span class="comment"># 采集的路径</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">basic_auth:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 采集服务的地址，设置成Springboot应用所在服务器的具体地址</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="comment"># 可以多个地址- targets: ['hostname:9000','hostname:8080']</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">localhost:8888</span></span><br><span class="line"> <span class="comment">#  - job_name: 'alertmanager'</span></span><br><span class="line"><span class="comment">#    static_configs:</span></span><br><span class="line"><span class="comment">#    - targets: ['alertmanager:9093']</span></span><br></pre></td></tr></table></figure><h3 id="3-2-创建loki-文件夹及配置文件">3.2 创建loki 文件夹及配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p grafana/loki</span><br><span class="line">mkdir -p grafana/loki/chunks</span><br><span class="line">mkdir -p grafana/loki/rules</span><br><span class="line"></span><br><span class="line">vim grafana/loki/<span class="built_in">local</span>-config.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">path_prefix:</span> <span class="string">/loki</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">filesystem:</span></span><br><span class="line">      <span class="attr">chunks_directory:</span> <span class="string">/loki/chunks</span></span><br><span class="line">      <span class="attr">rules_directory:</span> <span class="string">/loki/rules</span></span><br><span class="line">  <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">instance_addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020</span><span class="number">-10</span><span class="number">-24</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">boltdb-shipper</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">filesystem</span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 日志保存时长配置 12小时的倍数</span></span><br><span class="line"><span class="attr">table_manager:</span> </span><br><span class="line">  <span class="attr">retention_deletes_enabled:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">retention_period:</span> <span class="string">480h</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">alertmanager_url:</span> <span class="string">http://localhost:9093</span></span><br></pre></td></tr></table></figure><h3 id="3-3-创建compose文件">3.3 创建compose文件</h3><p><code>vim grafana/docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">networks:</span> </span><br><span class="line">  <span class="attr">prom:</span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">prometheus:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:latest</span> </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">prometheus</span> </span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">prometheus</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> </span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="comment"># 挂载prometheus配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/data:/prometheus</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/log:/var/log/</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--config.file=/etc/prometheus/prometheus.yml'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--storage.tsdb.path=/prometheus'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--storage.tsdb.retention.time=7d'</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9090:9090"</span> </span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">prom</span> </span><br><span class="line">  <span class="attr">grafana:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span> </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">grafana</span> </span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">grafana</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana/data:/var/lib/grafana</span> </span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3000:3000"</span> </span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">prom</span> </span><br><span class="line">  <span class="attr">node-exporter:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter:latest</span> </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node-exporter</span> </span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">exporter</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> </span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9100:9100"</span> </span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">prom</span> </span><br><span class="line">  <span class="attr">cadvisor:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">google/cadvisor:latest</span> </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cadvisor</span> </span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cadvisor</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> </span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="comment"># 挂载docker目录，为了监控docker使用情况，必须</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run:/var/run:rw</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/sys:/sys:ro</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/docker/:/var/lib/docker:ro</span> </span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span> </span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">prom</span> </span><br><span class="line">  <span class="attr">loki:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:latest</span> </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">loki</span> </span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="comment"># 挂载chunks文件夹及配置文件，loki收集到日志后会存储到chunks中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki/chunks:/loki/chunks</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki/rules:/loki/rules</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki/local-config.yaml:/etc/loki/local-config.yaml</span> </span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3100:3100"</span> </span><br><span class="line">    <span class="attr">networks:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">prom</span></span><br></pre></td></tr></table></figure><p>启动命令，注意命令和路径，实在grafana目录中启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> grafana</span><br><span class="line"><span class="comment"># docker-compose up -d</span></span><br><span class="line">docker-compose -f docker-compose.yml up -d</span><br></pre></td></tr></table></figure><h3 id="3-4-收集日志">3.4 收集日志</h3><p>使用loki-docker-driver，docker 安装loki驱动收集日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker plugin install  grafana/loki-docker-driver:latest --<span class="built_in">alias</span> loki --grant-all-permissions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志收集，或者全部容器都收集方法见上面</span></span><br><span class="line">docker run -d -p 8888:8888 --rm --name=demo01 \</span><br><span class="line">--<span class="built_in">log</span>-driver=loki --<span class="built_in">log</span>-opt \</span><br><span class="line">loki-url=<span class="string">"http://192.168.249.149:3100/loki/api/v1/push"</span> --<span class="built_in">log</span>-opt max-size=50m \</span><br><span class="line">--<span class="built_in">log</span>-opt max-file=10 demo01</span><br></pre></td></tr></table></figure><p>需要使用loki记录日志的docker-compose文件中替换日志收集驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  driver: loki</span><br><span class="line">  options:</span><br><span class="line">    loki-url: <span class="string">"http://192.168.249.149:3100/api/prom/push"</span></span><br><span class="line">    loki-retries: <span class="string">"5"</span></span><br><span class="line">    loki-batch-size: <span class="string">"400"</span></span><br></pre></td></tr></table></figure><p><strong>使用promtail收集日志文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim grafana/promatil/config.yml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">9080</span></span><br><span class="line">  <span class="attr">grpc_listen_port:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">positions:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">/var/log-position/positions.yaml</span> <span class="comment"># 记录日志上传的行号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># loki服务地址</span></span><br><span class="line"><span class="attr">client:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://192.168.249.149:3100/loki/api/v1/push</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">my-service</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">job:</span> <span class="string">test-service</span></span><br><span class="line">      <span class="attr">__path__:</span> <span class="string">/var/log/*.log</span></span><br></pre></td></tr></table></figure><p><code>vim grafana/promatil/promtail.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">grafana_promtail:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">promtail2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/promtail:2.4.0</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/log:/var/log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./promatil/config.yml:/etc/promtail/config.yml</span></span><br></pre></td></tr></table></figure><p>最后启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> grafana</span><br><span class="line"><span class="comment"># docker-compose up -d</span></span><br><span class="line">docker-compose -f promtail.yml up -d</span><br><span class="line"><span class="comment"># 如果改了配置文件</span></span><br><span class="line">docker-compose -f promtail.yml rebuild</span><br><span class="line"><span class="comment"># 如果修改了编排文件，就需要down后up</span></span><br></pre></td></tr></table></figure><h3 id="3-5-测试与模板">3.5 测试与模板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 好用的grafana模板下载</span></span><br><span class="line"><span class="comment"># https://grafana.com/dashboards</span></span><br><span class="line"></span><br><span class="line">Spring Boot 2.1 Statistics: 10280</span><br><span class="line">Spring Boot Statistics: 6756</span><br><span class="line">1 Node Exporter <span class="keyword">for</span> Prometheus Dashboard EN 20201010: 11074</span><br><span class="line">Docker and system monitoring: 893</span><br><span class="line">Docker Container &amp; Host Metrics: 10619</span><br></pre></td></tr></table></figure><p><img src="http://qnypic.shawncoding.top/blog/809238c86589408f9a120c15b0931d70.png" alt="在这里插入图片描述"></p><hr><p><a href="https://www.cnblogs.com/turingguo/p/13847003.html" target="_blank" rel="noopener" title="docker-compose安装loki套件(loki+grafana)">docker-compose安装loki套件(loki+grafana)</a></p><p><a href="https://www.cnblogs.com/yg0070/p/16437578.html" target="_blank" rel="noopener" title="docker-compose安装grafana+prometheus+loki 监控docker容器收集服务日志">docker-compose安装grafana+prometheus+loki 监控docker容器收集服务日志</a></p><p><a href="https://blog.csdn.net/u011943534/article/details/120871258" target="_blank" rel="noopener" title="k8s学习(三十二)K8s部署Loki日志收集">k8s学习(三十二)K8s部署Loki日志收集</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Prometheus+Grafana监控Springboot&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;任何一个系统上线，运维监控都太重要了。关于Springboot微服务的监控，之前写过&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/124675465&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Spring Boot Admin服务监控&quot;&gt;Spring Boot Admin服务监控&lt;/a&gt;，这个方案可以&lt;strong&gt;实时监控并提供告警提醒功能，但不能记录历史数据&lt;/strong&gt;，无法查看过去1小时或过去1天等运维情况。本文介绍Prometheus + Grafana的方法监控Springboot 2.X，实现美观漂亮的数据可视化。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux运维" scheme="https://blog.shawncoding.top/categories/Linux%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="linux基础" scheme="https://blog.shawncoding.top/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.0经典学习笔记</title>
    <link href="https://blog.shawncoding.top/posts/701720ae.html"/>
    <id>https://blog.shawncoding.top/posts/701720ae.html</id>
    <published>2023-03-05T16:18:05.000Z</published>
    <updated>2023-03-17T07:11:16.644Z</updated>
    
    <content type="html"><![CDATA[<h1>导读：课程概览</h1><h2 id="1-Spring-Boot是什么">1. Spring Boot是什么</h2><p>我们知道，从 2002 年开始，Spring 一直在飞速的发展，如今已经成为了在Java EE（Java Enterprise Edition）开发中真正意义上的标准，但是随着技术的发展，Java EE使用 Spring 逐渐变得笨重起来，大量的 XML 文件存在于项目之中。<strong>繁琐的配置，整合第三方框架的配置问题，导致了开发和部署效率的降低</strong>。</p><a id="more"></a><p>2012 年 10 月，Mike Youngstrom 在 Spring jira 中创建了一个功能请求，要求<strong>在 Spring 框架中支持无容器 Web 应用程序体系结构</strong>。他谈到了在主容器引导 spring 容器内配置 Web 容器服务。这是 jira 请求的摘录：</p><blockquote><p>我认为 Spring 的 Web 应用体系结构可以大大简化，如果它提供了从上到下利用 Spring 组件和配置模型的工具和参考体系结构。在简单的 <code>main()</code>方法引导的 Spring 容器内嵌入和统一这些常用Web 容器服务的配置。</p></blockquote><p>这一要求促使了 2013 年初开始的 Spring Boot 项目的研发，到今天，Spring Boot 的版本已经到了 2.0.3 RELEASE。Spring Boot 并不是用来替代 Spring 的解决方案，而<strong>是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具</strong>。</p><p>它集成了大量常用的第三方库配置，Spring Boot应用中这些第三方库几乎可以是零配置的开箱即用（out-of-the-box），大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。</p><h2 id="2-为什么学习Spring-Boot">2. 为什么学习Spring Boot</h2><h3 id="2-1-从Spring官方来看">2.1 从Spring官方来看</h3><p>我们打开 Spring 的<a href="http://spring.io/" target="_blank" rel="noopener">官方网站</a>，可以看到下图：</p><p><img src="http://qnypic.shawncoding.top/blog/c6a86cf65b118d8318fa483ef872e3dd.png" alt="Spring官网首图"></p><p>我们可以看到图中官方对 Spring Boot 的定位：<em>Build Anything</em>， Build任何东西。Spring Boot旨在尽可能快地启动和运行，并且只需最少的 Spring 前期配置。  同时我们也来看一下官方对后面两个的定位：</p><p>SpringCloud：<em>Coordinate Anything</em>，协调任何事情；<br>SpringCloud Data Flow：<em>Connect everything</em>，连接任何东西。</p><p>仔细品味一下，Spring 官网对 Spring Boot、SpringCloud 和 SpringCloud Data Flow三者定位的措辞非常有味道，同时也可以看出，Spring 官方对这三个技术非常重视，是现在以及今后学习的重点（SpringCloud 相关达人课课程届时也会上线）。</p><h3 id="2-2-从Spring-Boot的优点来看">2.2 从Spring Boot的优点来看</h3><p>Spring Boot 有哪些优点？主要给我们解决了哪些问题呢？我们以下图来说明：</p><p><img src="http://qnypic.shawncoding.top/blog/df2f09bcb2eb6b05b7c2f8451acd2735.png" alt="Spring Boot的优点"></p><h4 id="2-2-1-良好的基因">2.2.1 良好的基因</h4><p>Spring Boot 是伴随着 Spring 4.0 诞生的，从字面理解，Boot是引导的意思，因此 Spring Boot 旨在帮助开发者快速搭建 Spring 框架。Spring Boot 继承了原有 Spring 框架的优秀基因，使 Spring 在使用中更加方便快捷。</p><p><img src="http://qnypic.shawncoding.top/blog/f56c48f83b52cebf1dd6cc83f9624dca.png" alt="Spring Boot与Spring"></p><h4 id="2-2-2-简化编码">2.2.2 简化编码</h4><p>举个例子，比如我们要创建一个 web 项目，使用 Spring 的朋友都知道，在使用 Spring 的时候，需要在 pom 文件中添加多个依赖，而 Spring Boot 则会帮助开发着快速启动一个 web 容器，在 Spring Boot 中，我们只需要在 pom 文件中添加如下一个 starter-web 依赖即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们点击进入该依赖后可以看到，Spring Boot 这个 starter-web 已经包含了多个依赖，包括之前在 Spring 工程中需要导入的依赖，我们看一下其中的一部分，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- .....省略其他依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由此可以看出，Spring Boot 大大简化了我们的编码，我们不用一个个导入依赖，直接一个依赖即可。</p><h4 id="2-2-3-简化配置">2.2.3 简化配置</h4><p>Spring 虽然使Java EE轻量级框架，但由于其繁琐的配置，一度被人认为是“配置地狱”。各种XML、Annotation配置会让人眼花缭乱，而且配置多的话，如果出错了也很难找出原因。Spring Boot更多的是采用 Java Config 的方式，对 Spring 进行配置。举个例子：</p><p>我新建一个类，但是我不用 <code>@Service</code>注解，也就是说，它是个普通的类，那么我们如何使它也成为一个 Bean 让 Spring 去管理呢？只需要<code>@Configuration</code> 和<code>@Bean</code>两个注解即可，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestService <span class="title">getTestService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Configuration</code>表示该类是个配置类，<code>@Bean</code>表示该方法返回一个 Bean。这样就把<code>TestService</code>作为 Bean 让 Spring 去管理了，在其他地方，我们如果需要使用该 Bean，和原来一样，直接使用<code>@Resource</code>注解注入进来即可使用，非常方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> TestService testService;</span><br></pre></td></tr></table></figure><p>另外，部署配置方面，原来 Spring 有多个 xml 和 properties配置，在 Spring Boot 中只需要个 application.yml即可。</p><h4 id="2-2-4-简化部署">2.2.4 简化部署</h4><p>在使用 Spring 时，项目部署时需要我们在服务器上部署 tomcat，然后把项目打成 war 包扔到 tomcat里，在使用 Spring Boot 后，我们不需要在服务器上去部署 tomcat，因为 Spring Boot 内嵌了 tomcat，我们只需要将项目打成 jar 包，使用 <code>java -jar xxx.jar</code>一键式启动项目。</p><p>另外，也降低对运行环境的基本要求，环境变量中有JDK即可。</p><h4 id="2-2-5-简化监控">2.2.5 简化监控</h4><p>我们可以引入 spring-boot-start-actuator 依赖，直接使用 REST 方式来获取进程的运行期性能参数，从而达到监控的目的，比较方便。但是 Spring Boot 只是个微框架，没有提供相应的服务发现与注册的配套功能，没有外围监控集成方案，没有外围安全管理方案，所以在微服务架构中，还需要 Spring Cloud 来配合一起使用。</p><h3 id="2-3-从未来发展的趋势来看">2.3 从未来发展的趋势来看</h3><p>微服务是未来发展的趋势，项目会从传统架构慢慢转向微服务架构，因为微服务可以使不同的团队专注于更小范围的工作职责、使用独立的技术、更安全更频繁地部署。而 继承了 Spring 的优良特性，与 Spring 一脉相承，而且 支持各种REST API 的实现方式。Spring Boot 也是官方大力推荐的技术，可以看出，Spring Boot 是未来发展的一个大趋势。</p><h2 id="3-本课程能学到什么">3. 本课程能学到什么</h2><p>本课程使用目前 Spring Boot 最新版本2.0.3 RELEASE，课程文章均为作者在实际项目中剥离出来的场景和demo，目标是带领学习者快速上手 Spring Boot，将 Spring Boot 相关技术点快速运用在微服务项目中。全篇分为两部分：基础篇和进阶篇。</p><p>基础篇（01—10课）主要介绍 Spring Boot 在项目中最常使用的一些功能点，旨在带领学习者快速掌握 Spring Boot 在开发时需要的知识点，能够把 Spring Boot 相关技术运用到实际项目架构中去。该部分以 Spring Boot 框架为主线，内容包括Json数据封装、日志记录、属性配置、MVC支持、在线文档、模板引擎、异常处理、AOP 处理、持久层集成等等。</p><p>进阶篇（11—17课）主要是介绍 Spring Boot 在项目中拔高一些的技术点，包括集成的一些组件，旨在带领学习者在项目中遇到具体的场景时能够快速集成，完成对应的功能。该部分以 Spring Boot 框架为主线，内容包括拦截器、监听器、缓存、安全认证、分词插件、消息队列等等。</p><p>认真读完该系列文章之后，学习者会快速了解并掌握 Spring Boot 在项目中最常用的技术点，作者课程的最后，会基于课程内容搭建一个 Spring Boot 项目的空架构，该架构也是从实际项目中剥离出来，学习者可以运用该架构于实际项目中，具备使用 Spring Boot 进行实际项目开发的能力。</p><p>课程所有源码提供免费下载：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">下载地址</a>。</p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h2 id="4-适合阅读的人群">4. 适合阅读的人群</h2><p>本课程适合以下人群阅读：</p><ul><li>有一定的Java语言基础，了解Spring、Maven的在校学生或自学者</li><li>有传统项目经验，想往微服务方向发展的工作人员</li><li>热衷于新技术并对 Spring Boot 感兴趣的人员</li><li>希望了解 Spring Boot 2.0.3 的研究人员</li></ul><h2 id="5-本课程开发环境和插件">5. 本课程开发环境和插件</h2><p>本课程的开发环境：</p><ul><li>开发工具：IDEA 2017</li><li>JDK版本： JDK 1.8</li><li>Spring Boot版本：2.0.3 RELEASE</li><li>Maven版本：3.5.2</li></ul><p>涉及到的插件：</p><ul><li>FastJson</li><li>Swagger2</li><li>Thymeleaf</li><li>MyBatis</li><li>Redis</li><li>ActiveMQ</li><li>Shiro</li><li>Lucence</li></ul><h2 id="6-课程目录">6. 课程目录</h2><ul><li>导读：课程概览</li><li>第01课：Spring Boot开发环境搭建和项目启动</li><li>第02课：Spring Boot返回Json数据及数据封装</li><li>第03课：Spring Boot使用slf4j进行日志记录</li><li>第04课：Spring Boot中的项目属性配置</li><li>第05课：Spring Boot中的MVC支持</li><li>第06课：Spring Boot集成Swagger2展现在线接口文档</li><li>第07课：Spring Boot集成Thymeleaf模板引擎</li><li>第08课：Spring Boot中的全局异常处理</li><li>第09课：Spring Boot中的切面AOP处理</li><li>第10课：Spring Boot中集成MyBatis</li><li>第11课：Spring Boot事务配置管理</li><li>第12课：Spring Boot中使用监听器</li><li>第13课：Spring Boot中使用拦截器</li><li>第14课：Spring Boot中集成Redis</li><li>第15课：Spring Boot中集成ActiveMQ</li><li>第16课：Spring Boot中集成Shiro</li><li>第17课：Spring Boot中结成Lucence</li><li>第18课：Spring Boot搭建实际项目开发中的架构</li></ul><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第01课：Spring Boot开发环境搭建和项目启动</h1><p>上一节对 SpringBoot 的特性做了一个介绍，本节主要对 <strong>jdk 的配置、Spring Boot工程的构建和项目的启动、Spring Boot 项目工程的结构做一下讲解和分析</strong>。</p><h2 id="1-jdk-的配置">1. jdk 的配置</h2><p>本课程是使用 IDEA 进行开发，在IDEA 中配置 jdk 的方式很简单，打开<code>File-&gt;Project Structure</code>，如下图所：</p><p><img src="http://qnypic.shawncoding.top/blog/faa60319c032339997a3fadcea5895de.png" alt="IDEA中配置jdk"></p><ol><li>选择 SDKs</li><li>在 JDK home path 中选择本地 jdk 的安装目录</li><li>在 Name 中为 jdk 自定义名字</li></ol><p>通过以上三步骤，即可导入本地安装的 jdk。如果是使用 STS 或者 eclipse 的朋友，可以通过两步骤添加：</p><ul><li><code>window-&gt;preference-&gt;java-&gt;Instralled JRES</code>来添加本地 jdk。</li><li><code>window--&gt;preference--&gt;java--&gt;Compiler</code>选择 jre，和 jdk 保持一致。</li></ul><h2 id="2-Spring-Boot-工程的构建">2. Spring Boot 工程的构建</h2><h3 id="2-1-IDEA-快速构建">2.1 IDEA 快速构建</h3><p>IDEA 中可以通过<code>File-&gt;New-&gt;Project</code>来快速构建 Spring Boot 工程。如下，选择 Spring Initializr，在 Project SDK 中选择刚刚我们导入的 jdk，点击 Next，到了项目的配置信息。</p><ul><li>Group：填企业域名，本课程使用com.itcodai</li><li>Artifact：填项目名称，本课程中每一课的工程名以<code>course+课号</code>命令，这里使用 course01</li><li>Dependencies：可以添加我们项目中所需要的依赖信息，根据实际情况来添加，本课程只需要选择 Web 即可。</li></ul><h3 id="2-2-官方构建">2.2 官方构建</h3><p>第二种方式可以通过官方构建，步骤如下：</p><ul><li>访问 <a href="http://start.spring.io/%E3%80%82" target="_blank" rel="noopener">http://start.spring.io/。</a></li><li>在页面上输入相应的 Spring Boot 版本、Group 和 Artifact 信息以及项目依赖，然后创建项目。</li><li><img src="http://qnypic.shawncoding.top/blog/e1376b2acdb7ce97bf68ef6b2843da06.png" alt="创建Spring Boot工程"></li><li>解压后，使用 IDEA 导入该 maven 工程：<code>File-&gt;New-&gt;Model from Existing Source</code>，然后选择解压后的项目文件夹即可。如果是使用 eclipse 的朋友，可以通过<code>Import-&gt;Existing Maven Projects-&gt;Next</code>，然后选择解压后的项目文件夹即可。</li></ul><h3 id="2-3-maven配置">2.3 maven配置</h3><p>创建了 Spring Boot 项目之后，需要进行 maven 配置。打开<code>File-&gt;settings</code>，搜索 maven，配置一下本地的 maven 信息。如下：</p><p><img src="http://qnypic.shawncoding.top/blog/e3a4231c5914b2bf446756c71fceab6e.png" alt="maven配置"></p><p>在 Maven home directory 中选择本地 Maven 的安装路径；在 User settings file 中选择本地 Maven 的配置文件所在路径。在配置文件中，我们配置一下国内阿里的镜像，这样在下载 maven 依赖时，速度很快。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是使用 eclipse 的朋友，可以通过<code>window--&gt;preference--&gt;Maven--&gt;User Settings</code>来配置，配置方式和上面一致。</p><h3 id="2-4-编码配置">2.4 编码配置</h3><p>同样地，新建项目后，我们一般都需要配置编码，这点非常重要，很多初学者都会忘记这一步，所以要养成良好的习惯。</p><p>IDEA 中，仍然是打开<code>File-&gt;settings</code>，搜索 encoding，配置一下本地的编码信息。如下：</p><p><img src="http://qnypic.shawncoding.top/blog/07f9bb8e5d2c42fd5604b810f5a753f8.png" alt="编码配置"></p><p>如果是使用 eclipse 的朋友，有两个地方需要设置一下编码：</p><ul><li>window–&gt; perferences–&gt;General–&gt;Workspace，将Text file encoding改成utf-8</li><li>window–&gt;perferences–&gt;General–&gt;content types，选中Text，将Default encoding填入utf-8</li></ul><p>OK，编码设置完成即可启动项目工程了。</p><h2 id="3-Spring-Boot-项目工程结构">3. Spring Boot 项目工程结构</h2><p>Spring Boot 项目总共有三个模块，如下图所示：</p><p><img src="http://qnypic.shawncoding.top/blog/b573b06a7c19dd1fa6b62487d93c7e32.png" alt="Spring Boot项目工程结构"></p><ul><li>src/main/java路径：主要编写业务程序</li><li>src/main/resources路径：存放静态文件和配置文件</li><li>src/test/java路径：主要编写测试程序</li></ul><p>默认情况下，如上图所示会创建一个启动类 Course01Application，该类上面有个<code>@SpringBootApplication</code>注解，该启动类中有个 main 方法，没错，Spring Boot 启动只要运行该 main 方法即可，非常方便。另外，Spring Boot 内部集成了 tomcat，不需要我们人为手动去配置 tomcat，开发者只需要关注具体的业务逻辑即可。</p><p>到此为止，Spring Boot 就启动成功了，为了比较清楚的看到效果，我们写一个 Controller 来测试一下，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcodai.course01.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/start"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/springboot"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">startSpringBoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to the world of Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新运行 main 方法启动项目，在浏览器中输入 <code>localhost:8080/start/springboot</code>，如果看到 <code>“Welcome to the world of Spring Boot!”</code>，那么恭喜你项目启动成功！Spring Boot 就是这么简单方便！端口号默认是8080，如果想要修改，可以在 application.yml 文件中使用 <code>server.port</code> 来人为指定端口，如8001端口：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br></pre></td></tr></table></figure><h2 id="4-总结">4. 总结</h2><p>本节我们快速学习了如何在 IDEA 中导入 jdk，以及使用 IDEA 如何配置 maven 和编码，如何快速的创建和启动 Spring Boot 工程。IDEA 对 Spring Boot 的支持非常友好，建议大家使用 IDEA 进行 Spring Boot 的开发，从下一课开始，我们真正进入 Spring Boot 的学习中。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第02课：Spring Boot返回Json数据及数据封装</h1><p>在项目开发中，接口与接口之间，前后端之间数据的传输都使用 Json 格式，在 Spring Boot 中，接口返回 Json 格式的数据很简单，在 Controller 中使用<code>@RestController</code>注解即可返回 Json 格式的数据，<code>@RestController</code>也是 Spring Boot 新增的一个注解，我们点进去看一下该注解都包含了哪些东西。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出， <code>@RestController</code> 注解包含了原来的 <code>@Controller</code> 和 <code>@ResponseBody</code> 注解，使用过 Spring 的朋友对 <code>@Controller</code> 注解已经非常了解了，这里不再赘述， <code>@ResponseBody</code> 注解是将返回的数据结构转换为 Json 格式。所以在默认情况下，使用了 <code>@RestController</code> 注解即可将返回的数据结构转换成 Json 格式，Spring Boot 中默认使用的 Json 解析技术框架是 jackson。我们点开 pom.xml 中的 <code>spring-boot-starter-web</code> 依赖，可以看到一个 <code>spring-boot-starter-json</code> 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Boot 中对依赖都做了很好的封装，可以看到很多 <code>spring-boot-starter-xxx</code> 系列的依赖，这是 Spring Boot 的特点之一，不需要人为去引入很多相关的依赖了，starter-xxx 系列直接都包含了所必要的依赖，所以我们再次点进去上面这个 <code>spring-boot-starter-json</code> 依赖，可以看到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jdk8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-module-parameter-names<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到此为止，我们知道了 Spring Boot 中默认使用的 json 解析框架是 jackson。下面我们看一下默认的 jackson 框架对常用数据类型的转 Json 处理。</p><h2 id="1-Spring-Boot-默认对Json的处理">1. Spring Boot 默认对Json的处理</h2><p>在实际项目中，常用的数据结构无非有类对象、List对象、Map对象，我们看一下默认的 jackson 框架对这三个常用的数据结构转成 json 后的格式如何。</p><h3 id="1-1-创建-User-实体类">1.1 创建 User 实体类</h3><p>为了测试，我们需要创建一个实体类，这里我们就用 User 来演示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">/* 省略get、set和带参构造方法 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-创建Controller类">1.2 创建Controller类</h3><p>然后我们创建一个 Controller，分别返回 <code>User</code>对象、<code>List&lt;User&gt;</code> 和 <code>Map&lt;String, Object&gt;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itcodai.course02.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"达人课"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/map"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        map.put(<span class="string">"作者信息"</span>, user);</span><br><span class="line">        map.put(<span class="string">"博客地址"</span>, <span class="string">"http://blog.itcodai.com"</span>);</span><br><span class="line">        map.put(<span class="string">"CSDN地址"</span>, <span class="string">"http://blog.csdn.net/eson_15"</span>);</span><br><span class="line">        map.put(<span class="string">"粉丝数量"</span>, <span class="number">4153</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-测试不同数据类型返回的json">1.3 测试不同数据类型返回的json</h3><p>OK，写好了接口，分别返回了一个 User 对象、一个 List 集合和一个 Map 集合，其中 Map 集合中的 value 存的是不同的数据类型。接下来我们依次来测试一下效果。</p><p>在浏览器中输入：<code>localhost:8080/json/user</code> 返回 json 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"username"</span>:<span class="string">"倪升武"</span>,<span class="attr">"password"</span>:<span class="string">"123456"</span>&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中输入：<code>localhost:8080/json/list</code> 返回 json 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"username"</span>:<span class="string">"倪升武"</span>,<span class="attr">"password"</span>:<span class="string">"123456"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">2</span>,<span class="attr">"username"</span>:<span class="string">"达人课"</span>,<span class="attr">"password"</span>:<span class="string">"123456"</span>&#125;]</span><br></pre></td></tr></table></figure><p>在浏览器中输入：<code>localhost:8080/json/map</code> 返回 json 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"作者信息"</span>:&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"username"</span>:<span class="string">"倪升武"</span>,<span class="attr">"password"</span>:<span class="string">"123456"</span>&#125;,<span class="attr">"CSDN地址"</span>:<span class="string">"http://blog.csdn.net/eson_15"</span>,<span class="attr">"粉丝数量"</span>:<span class="number">4153</span>,<span class="attr">"博客地址"</span>:<span class="string">"http://blog.itcodai.com"</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看出，map 中不管是什么数据类型，都可以转成相应的 json 格式，这样就非常方便。</p><h3 id="1-4-jackson-中对null的处理">1.4 jackson 中对null的处理</h3><p>在实际项目中，我们难免会遇到一些 null 值出现，我们转 json 时，是不希望有这些 null 出现的，比如我们期望所有的 null 在转 json 时都变成 “” 这种空字符串，那怎么做呢？在 Spring Boot 中，我们做一下配置即可，新建一个 jackson 的配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(ObjectMapper<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ObjectMapper</span> <span class="title">jacksonObjectMapper</span>(<span class="title">Jackson2ObjectMapperBuilder</span> <span class="title">builder</span>) </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = builder.createXmlMapper(<span class="keyword">false</span>).build();</span><br><span class="line">        objectMapper.getSerializerProvider().setNullValueSerializer(<span class="keyword">new</span> JsonSerializer&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                jsonGenerator.writeString(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们修改一下上面返回 map 的接口，将几个值改成 null 测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/map"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"倪升武"</span>, <span class="keyword">null</span>);</span><br><span class="line">    map.put(<span class="string">"作者信息"</span>, user);</span><br><span class="line">    map.put(<span class="string">"博客地址"</span>, <span class="string">"http://blog.itcodai.com"</span>);</span><br><span class="line">    map.put(<span class="string">"CSDN地址"</span>, <span class="keyword">null</span>);</span><br><span class="line">    map.put(<span class="string">"粉丝数量"</span>, <span class="number">4153</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，再次输入：<code>localhost:8080/json/map</code>，可以看到 jackson 已经将所有 null 字段转成了空字符串了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"作者信息"</span>:&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"username"</span>:<span class="string">"倪升武"</span>,<span class="attr">"password"</span>:<span class="string">""</span>&#125;,<span class="attr">"CSDN地址"</span>:<span class="string">""</span>,<span class="attr">"粉丝数量"</span>:<span class="number">4153</span>,<span class="attr">"博客地址"</span>:<span class="string">"http://blog.itcodai.com"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="2-使用阿里巴巴FastJson的设置">2. 使用阿里巴巴FastJson的设置</h2><h3 id="2-1-jackson-和-fastJson-的对比">2.1 jackson 和 fastJson 的对比</h3><p>有很多朋友习惯于使用阿里巴巴的 fastJson 来做项目中 json 转换的相关工作，目前我们项目中使用的就是阿里的 fastJson，那么 jackson 和 fastJson 有哪些区别呢？根据网上公开的资料比较得到下表。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">fastJson</th><th style="text-align:center">jackson</th></tr></thead><tbody><tr><td style="text-align:center">上手难易程度</td><td style="text-align:center">容易</td><td style="text-align:center">中等</td></tr><tr><td style="text-align:center">高级特性支持</td><td style="text-align:center">中等</td><td style="text-align:center">丰富</td></tr><tr><td style="text-align:center">官方文档、Example支持</td><td style="text-align:center">中文</td><td style="text-align:center">英文</td></tr><tr><td style="text-align:center">处理json速度</td><td style="text-align:center">略快</td><td style="text-align:center">快</td></tr></tbody></table><p>关于 fastJson 和 jackson 的对比，网上有很多资料可以查看，主要是根据自己实际项目情况来选择合适的框架。从扩展上来看，fastJson 没有 jackson 灵活，从速度或者上手难度来看，fastJson 可以考虑，我们项目中目前使用的是阿里的 fastJson，挺方便的。</p><h3 id="2-2-fastJson依赖导入">2.2 fastJson依赖导入</h3><p>使用 fastJson 需要导入依赖，本课程使用 1.2.35 版本，依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-使用-fastJson-处理-null">2.2 使用 fastJson 处理 null</h3><p>使用 fastJson 时，对 null 的处理和 jackson 有些不同，需要继承  <code>WebMvcConfigurationSupport</code> 类，然后覆盖 <code>configureMessageConverters</code> 方法，在方法中，我们可以选择对要实现 null 转换的场景，配置好即可。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.config.FastJsonConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fastJsonConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用阿里 FastJson 作为JSON MessageConverter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter converter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">        FastJsonConfig config = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        config.setSerializerFeatures(</span><br><span class="line">                <span class="comment">// 保留map空的字段</span></span><br><span class="line">                SerializerFeature.WriteMapNullValue,</span><br><span class="line">                <span class="comment">// 将String类型的null转成""</span></span><br><span class="line">                SerializerFeature.WriteNullStringAsEmpty,</span><br><span class="line">                <span class="comment">// 将Number类型的null转成0</span></span><br><span class="line">                SerializerFeature.WriteNullNumberAsZero,</span><br><span class="line">                <span class="comment">// 将List类型的null转成[]</span></span><br><span class="line">                SerializerFeature.WriteNullListAsEmpty,</span><br><span class="line">                <span class="comment">// 将Boolean类型的null转成false</span></span><br><span class="line">                SerializerFeature.WriteNullBooleanAsFalse,</span><br><span class="line">                <span class="comment">// 避免循环引用</span></span><br><span class="line">                SerializerFeature.DisableCircularReferenceDetect);</span><br><span class="line"></span><br><span class="line">        converter.setFastJsonConfig(config);</span><br><span class="line">        converter.setDefaultCharset(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">        List&lt;MediaType&gt; mediaTypeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 解决中文乱码问题，相当于在Controller上的@RequestMapping中加了个属性produces = "application/json"</span></span><br><span class="line">        mediaTypeList.add(MediaType.APPLICATION_JSON);</span><br><span class="line">        converter.setSupportedMediaTypes(mediaTypeList);</span><br><span class="line">        converters.add(converter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-封装统一返回的数据结构">3. 封装统一返回的数据结构</h2><p>以上是 Spring Boot 返回 json 的几个代表的例子，但是在实际项目中，除了要封装数据之外，我们往往需要在返回的 json 中添加一些其他信息，比如返回一些状态码 code ，返回一些 msg 给调用者，这样调用者可以根据 code 或者 msg 做一些逻辑判断。所以在实际项目中，我们需要封装一个统一的 json 返回结构存储返回信息。</p><h3 id="3-1-定义统一的-json-结构">3.1 定义统一的 json 结构</h3><p>由于封装的 json 数据的类型不确定，所以在定义统一的 json 结构时，我们需要用到泛型。统一的 json 结构中属性包括数据、状态码、提示信息即可，构造方法可以根据实际业务需求做相应的添加即可，一般来说，应该有默认的返回结构，也应该有用户指定的返回结构。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="string">"操作成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若没有数据返回，可以人为指定状态码和提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(String code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有数据返回时，状态码为0，默认提示信息为：操作成功！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="string">"操作成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有数据返回，状态码为0，人为指定提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(T data, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-修改-Controller-中的返回值类型及测试">3.2 修改 Controller 中的返回值类型及测试</h3><p>由于 JsonResult 使用了泛型，所以所有的返回值类型都可以使用该统一结构，在具体的场景将泛型替换成具体的数据类型即可，非常方便，也便于维护。在实际项目中，还可以继续封装，比如状态码和提示信息可以定义一个枚举类型，以后我们只需要维护这个枚举类型中的数据即可（在本课程中就不展开了）。根据以上的 JsonResult，我们改写一下 Controller，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/jsonresult"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonResultController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult&lt;List&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"达人课"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult&lt;&gt;(userList, <span class="string">"获取用户列表成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/map"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult&lt;Map&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"倪升武"</span>, <span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="string">"作者信息"</span>, user);</span><br><span class="line">        map.put(<span class="string">"博客地址"</span>, <span class="string">"http://blog.itcodai.com"</span>);</span><br><span class="line">        map.put(<span class="string">"CSDN地址"</span>, <span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="string">"粉丝数量"</span>, <span class="number">4153</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult&lt;&gt;(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重新在浏览器中输入：<code>localhost:8080/jsonresult/user</code> 返回 json 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"code"</span>:<span class="string">"0"</span>,<span class="attr">"data"</span>:&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"password"</span>:<span class="string">"123456"</span>,<span class="attr">"username"</span>:<span class="string">"倪升武"</span>&#125;,<span class="attr">"msg"</span>:<span class="string">"操作成功！"</span>&#125;</span><br></pre></td></tr></table></figure><p>输入：<code>localhost:8080/jsonresult/list</code>，返回 json 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"code"</span>:<span class="string">"0"</span>,<span class="attr">"data"</span>:[&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"password"</span>:<span class="string">"123456"</span>,<span class="attr">"username"</span>:<span class="string">"倪升武"</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">2</span>,<span class="attr">"password"</span>:<span class="string">"123456"</span>,<span class="attr">"username"</span>:<span class="string">"达人课"</span>&#125;],<span class="attr">"msg"</span>:<span class="string">"获取用户列表成功"</span>&#125;</span><br></pre></td></tr></table></figure><p>输入：<code>localhost:8080/jsonresult/map</code>，返回 json 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"code"</span>:<span class="string">"0"</span>,<span class="attr">"data"</span>:&#123;<span class="attr">"作者信息"</span>:&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"password"</span>:<span class="string">""</span>,<span class="attr">"username"</span>:<span class="string">"倪升武"</span>&#125;,<span class="attr">"CSDN地址"</span>:<span class="literal">null</span>,<span class="attr">"粉丝数量"</span>:<span class="number">4153</span>,<span class="attr">"博客地址"</span>:<span class="string">"http://blog.itcodai.com"</span>&#125;,<span class="attr">"msg"</span>:<span class="string">"操作成功！"</span>&#125;</span><br></pre></td></tr></table></figure><p>通过封装，我们不但将数据通过 json 传给前端或者其他接口，还带上了状态码和提示信息，这在实际项目场景中应用非常广泛。</p><h2 id="4-总结-v2">4. 总结</h2><p>本节主要对 Spring Boot 中 json 数据的返回做了详细的分析，从 Spring Boot 默认的 jackson 框架到阿里巴巴的 fastJson 框架，分别对它们的配置做了相应的讲解。另外，结合实际项目情况，总结了实际项目中使用的 json 封装结构体，加入了状态码和提示信息，使得返回的 json 数据信息更加完整。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第03课：Spring Boot使用slf4j进行日志记录</h1><p>在开发中，我们经常使用 <code>System.out.println()</code> 来打印一些信息，但是这样不好，因为大量的使用 <code>System.out</code> 会增加资源的消耗。我们实际项目中使用的是 slf4j 的 logback 来输出日志，效率挺高的，Spring Boot 提供了一套日志系统，logback 是最优的选择。</p><h2 id="1-slf4j-介绍">1. slf4j 介绍</h2><p>引用百度百科里的一段话：</p><blockquote><p>SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。</p></blockquote><p>这段的大概意思是：你只需要按统一的方式写记录日志的代码，而无需关心日志是通过哪个日志系统，以什么风格输出的。因为它们取决于部署项目时绑定的日志系统。例如，在项目中使用了 slf4j 记录日志，并且绑定了 log4j（即导入相应的依赖），则日志会以 log4j 的风格输出；后期需要改为以 logback 的风格输出日志，只需要将 log4j 替换成 logback 即可，不用修改项目中的代码。这对于第三方组件的引入的不同日志系统来说几乎零学习成本，况且它的优点不仅仅这一个而已，还有简洁的占位符的使用和日志级别的判断。</p><p>正因为 sfl4j 有如此多的优点，阿里巴巴已经将 slf4j 作为他们的日志框架了。在《阿里巴巴Java开发手册(正式版)》中，日志规约一项第一条就强制要求使用 slf4j：</p><blockquote><p>1.【强制】应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架SLF4J中的API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p></blockquote><p>“强制”两个字体现出了 slf4j 的优势，所以建议在实际项目中，使用 slf4j 作为自己的日志框架。使用 slf4j 记录日志非常简单，直接使用  LoggerFactory 创建即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Test<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-application-yml-中对日志的配置">2. application.yml 中对日志的配置</h2><p>Spring Boot 对 slf4j 支持的很好，内部已经集成了 slf4j，一般我们在使用的时候，会对slf4j 做一下配置。<code>application.yml</code> 文件是 Spring Boot 中唯一一个需要配置的文件，一开始创建工程的时候是 <code>application.properties</code> 文件，个人比较细化用 yml 文件，因为 yml 文件的层次感特别好，看起来更直观，但是 yml 文件对格式要求比较高，比如英文冒号后面必须要有个空格，否则项目估计无法启动，而且也不报错。用 properties 还是 yml 视个人习惯而定，都可以。本课程使用 yml。</p><p>我们看一下 application.yml 文件中对日志的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  config: logback.xml</span><br><span class="line">  level:</span><br><span class="line">    com.itcodai.course03.dao: trace</span><br></pre></td></tr></table></figure><p><code>logging.config</code> 是用来指定项目启动的时候，读取哪个配置文件，这里指定的是日志配置文件是根路径下的 <code>logback.xml</code> 文件，关于日志的相关配置信息，都放在 <code>logback.xml</code> 文件中了。<code>logging.level</code> 是用来指定具体的 mapper 中日志的输出级别，上面的配置表示 <code>com.itcodai.course03.dao</code> 包下的所有 mapper 日志输出级别为 trace，会将操作数据库的 sql 打印出来，开发时设置成 trace 方便定位问题，在生产环境上，将这个日志级别再设置成 error 级别即可（本节课不讨论 mapper 层，在后面 Spring Boot 集成 MyBatis 时再详细讨论）。</p><p>常用的日志级别按照从高到低依次为：ERROR、WARN、INFO、DEBUG。</p><h2 id="3-logback-xml-配置文件解析">3. logback.xml 配置文件解析</h2><p>在上面 <code>application.yml</code> 文件中，我们指定了日志配置文件 <code>logback.xml</code>，<code>logback.xml</code> 文件中主要用来做日志的相关配置。在 <code>logback.xml</code> 中，我们可以定义日志输出的格式、路径、控制台输出格式、文件大小、保存时长等等。下面来分析一下：</p><h3 id="3-1-定义日志输出格式和存储路径">3.1 定义日志输出格式和存储路径</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"%date&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_PATH"</span> <span class="attr">value</span>=<span class="string">"D:/logs/course03/demo.%d&#123;yyyy-MM-dd&#125;.%i.log"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们来看一下这个定义的含义：首先定义一个格式，命名为 “LOG_PATTERN”，该格式中 <code>%date</code> 表示日期，<code>%thread</code> 表示线程名，<code>%-5level</code> 表示级别从左显示5个字符宽度，<code>%logger{36}</code>  表示 logger 名字最长36个字符，<code>%msg</code> 表示日志消息，<code>%n</code> 是换行符。</p><p>然后再定义一下名为 “FILE_PATH” 文件路径，日志都会存储在该路径下。<code>%i</code> 表示第 i 个文件，当日志文件达到指定大小时，会将日志生成到新的文件里，这里的 i 就是文件索引，日志文件允许的大小可以设置，下面会讲解。这里需要注意的是，不管是 windows 系统还是 Linux 系统，日志存储的路径必须要是绝对路径。</p><h3 id="3-2-定义控制台输出">3.2 定义控制台输出</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照上面配置的LOG_PATTERN来打印日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>&lt;appender&gt;</code> 节点设置个控制台输出（<code>class=&quot;ch.qos.logback.core.ConsoleAppender&quot;</code>）的配置，定义为 “CONSOLE”。使用上面定义好的输出格式（LOG_PATTERN）来输出，使用 <code>${}</code> 引用进来即可。</p><h3 id="3-3-定义日志文件的相关参数">3.3 定义日志文件的相关参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按照上面配置的FILE_PATH路径来保存日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;FILE_PATH&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志保存15天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单个日志文件的最大，超过则新建日志文件存储 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按照上面配置的LOG_PATTERN来打印日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>&lt;appender&gt;</code> 定义一个名为 “FILE” 的文件配置，主要是配置日志文件保存的时间、单个日志文件存储的大小、以及文件保存的路径和日志的输出格式。</p><h3 id="3-4-定义日志输出级别">3.4 定义日志输出级别</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.test"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">       </span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了上面那些定义后，最后我们使用 <code>&lt;logger&gt;</code> 来定义一下项目中默认的日志输出级别，这里定义级别为 INFO，然后针对 INFO 级别的日志，使用 <code>&lt;root&gt;</code> 引用上面定义好的控制台日志输出和日志文件的参数。这样 logback.xml 文件中的配置就设置完了。</p><h2 id></h2><p>本节课主要对 slf4j 做了一个简单的介绍，并且对 Spring Boot 中如何使用 slf4j 输出日志做了详细的说明，着重分析了 <code>logback.xml</code> 文件中对日志相关信息的配置，包括日志的不同级别。最后针对这些配置，在代码中使用 Logger 打印出一些进行测试。在实际项目中，这些日志都是排查问题的过程中非常重要的资料。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第04课：Spring Boot中的项目属性配置</h1><p>我们知道，在项目中，很多时候需要用到一些配置的信息，这些信息可能在测试环境和生产环境下会有不同的配置，后面根据实际业务情况有可能还会做修改，针对这种情况，我们不能将这些配置在代码中写死，最好就是写到配置文件中。比如可以把这些信息写到 <code>application.yml</code> 文件中。</p><h2 id="1-少量配置信息的情形">1. 少量配置信息的情形</h2><p>举个例子，在微服务架构中，最常见的就是某个服务需要调用其他服务来获取其提供的相关信息，那么在该服务的配置文件中需要配置被调用的服务地址，比如在当前服务里，我们需要调用订单微服务获取订单相关的信息，假设 订单服务的端口号是 8002，那我们可以做如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line"></span><br><span class="line"># 配置微服务的地址</span><br><span class="line">url:</span><br><span class="line">  # 订单微服务的地址</span><br><span class="line">  orderUrl: http://localhost:8002</span><br></pre></td></tr></table></figure><p>然后在业务代码中如何获取到这个配置的订单服务地址呢？我们可以使用 <code>@Value</code> 注解来解决。在对应的类中加上一个属性，在属性上使用 <code>@Value</code> 注解即可获取到配置文件中的配置信息，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ConfigController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;url.orderUrl&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String orderUrl;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/config"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"=====获取的订单服务地址为：&#123;&#125;"</span>, orderUrl);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Value</code> 注解上通过 <code>${key}</code> 即可获取配置文件中和 key 对应的 value 值。我们启动一下项目，在浏览器中输入 <code>localhost:8080/test/config</code> 请求服务后，可以看到控制台会打印出订单服务的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;获取的订单服务地址为：http:&#x2F;&#x2F;localhost:8002</span><br></pre></td></tr></table></figure><p>说明我们成功获取到了配置文件中的订单微服务地址，在实际项目中也是这么用的，后面如果因为服务器部署的原因，需要修改某个服务的地址，那么只要在配置文件中修改即可。</p><h2 id="2-多个配置信息的情形">2. 多个配置信息的情形</h2><p>这里再引申一个问题，随着业务复杂度的增加，一个项目中可能会有越来越多的微服务，某个模块可能需要调用多个微服务获取不同的信息，那么就需要在配置文件中配置多个微服务的地址。可是，在需要调用这些微服务的代码中，如果这样一个个去使用 <code>@Value</code> 注解引入相应的微服务地址的话，太过于繁琐，也不科学。</p><p>所以，在实际项目中，业务繁琐，逻辑复杂的情况下，需要考虑封装一个或多个配置类。举个例子：假如在当前服务中，某个业务需要同时调用订单微服务、用户微服务和购物车微服务，分别获取订单、用户和购物车相关信息，然后对这些信息做一定的逻辑处理。那么在配置文件中，我们需要将这些微服务的地址都配置好：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 配置多个微服务的地址</span><br><span class="line">url:</span><br><span class="line">  # 订单微服务的地址</span><br><span class="line">  orderUrl: http://localhost:8002</span><br><span class="line">  # 用户微服务的地址</span><br><span class="line">  userUrl: http://localhost:8003</span><br><span class="line">  # 购物车微服务的地址</span><br><span class="line">  shoppingUrl: http://localhost:8004</span><br></pre></td></tr></table></figure><p>也许实际业务中，远远不止这三个微服务，甚至十几个都有可能。对于这种情况，我们可以先定义一个 <code>MicroServiceUrl</code> 类来专门保存微服务的 url，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"url"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroServiceUrl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String orderUrl;</span><br><span class="line">    <span class="keyword">private</span> String userUrl;</span><br><span class="line">    <span class="keyword">private</span> String shoppingUrl;</span><br><span class="line">    <span class="comment">// 省去get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细心的朋友应该可以看到，使用 <code>@ConfigurationProperties</code> 注解并且使用 prefix 来指定一个前缀，然后该类中的属性名就是配置中去掉前缀后的名字，一一对应即可。即：前缀名 + 属性名就是配置文件中定义的 key。同时，该类上面需要加上 <code>@Component</code> 注解，把该类作为组件放到Spring容器中，让 Spring 去管理，我们使用的时候直接注入即可。</p><p>需要注意的是，使用 <code>@ConfigurationProperties</code> 注解需要导入它的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>OK，到此为止，我们将配置写好了，接下来写个 Controller 来测试一下。此时，不需要在代码中一个个引入这些微服务的 url 了，直接通过 <code>@Resource</code> 注解将刚刚写好配置类注入进来即可使用了，非常方便。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TestController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MicroServiceUrl microServiceUrl;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/config"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"=====获取的订单服务地址为：&#123;&#125;"</span>, microServiceUrl.getOrderUrl());</span><br><span class="line">        LOGGER.info(<span class="string">"=====获取的用户服务地址为：&#123;&#125;"</span>, microServiceUrl.getUserUrl());</span><br><span class="line">        LOGGER.info(<span class="string">"=====获取的购物车服务地址为：&#123;&#125;"</span>, microServiceUrl.getShoppingUrl());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次启动项目，请求一下可以看到，控制台打印出如下信息，说明配置文件生效，同时正确获取配置文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;获取的订单服务地址为：http:&#x2F;&#x2F;localhost:8002</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;获取的订单服务地址为：http:&#x2F;&#x2F;localhost:8002</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;获取的用户服务地址为：http:&#x2F;&#x2F;localhost:8003</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;获取的购物车服务地址为：http:&#x2F;&#x2F;localhost:8004</span><br></pre></td></tr></table></figure><h2 id="3-指定项目配置文件">3. 指定项目配置文件</h2><p>我们知道，在实际项目中，一般有两个环境：开发环境和生产环境。开发环境中的配置和生产环境中的配置往往不同，比如：环境、端口、数据库、相关地址等等。我们不可能在开发环境调试好之后，部署到生产环境后，又要将配置信息全部修改成生产环境上的配置，这样太麻烦，也不科学。</p><p>最好的解决方法就是开发环境和生产环境都有一套对用的配置信息，然后当我们在开发时，指定读取开发环境的配置，当我们将项目部署到服务器上之后，再指定去读取生产环境的配置。</p><p>我们新建两个配置文件： <code>application-dev.yml</code> 和 <code>application-pro.yml</code>，分别用来对开发环境和生产环境进行相关配置。这里为了方便，我们分别设置两个访问端口号，开发环境用 8001，生产环境用 8002.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 开发环境配置文件</span><br><span class="line">server:</span><br><span class="line">  port: 8001</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 开发环境配置文件</span><br><span class="line">server:</span><br><span class="line">  port: 8002</span><br></pre></td></tr></table></figure><p>然后在 <code>application.yml</code> 文件中指定读取哪个配置文件即可。比如我们在开发环境下，指定读取 <code>applicationn-dev.yml</code> 文件，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active:</span><br><span class="line">    - dev</span><br></pre></td></tr></table></figure><p>这样就可以在开发的时候，指定读取  <code>application-dev.yml</code> 文件，访问的时候使用 8001 端口，部署到服务器后，只需要将 <code>application.yml</code> 中指定的文件改成 <code>application-pro.yml</code> 即可，然后使用 8002 端口访问，非常方便。</p><h2 id="4-总结-v3">4. 总结</h2><p>本节课主要讲解了 Spring Boot 中如何在业务代码中读取相关配置，包括单一配置和多个配置项，在微服务中，这种情况非常常见，往往会有很多其他微服务需要调用，所以封装一个配置类来接收这些配置是个很好的处理方式。除此之外，例如数据库相关的连接参数等等，也可以放到一个配置类中，其他遇到类似的场景，都可以这么处理。最后介绍了开发环境和生产环境配置的快速切换方式，省去了项目部署时，诸多配置信息的修改。<br>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第05课：Spring Boot中的MVC支持</h1><p>Spring Boot 的 MVC 支持主要来介绍实际项目中最常用的几个注解，包括 <code>@RestController</code>、 <code>@RequestMapping</code>、<code>@PathVariable</code>、<code>@RequestParam</code> 以及 <code>@RequestBody</code>。主要介绍这几个注解常用的使用方式和特点。</p><h2 id="1-RestController">1. @RestController</h2><p><code>@RestController</code> 是 Spring Boot 新增的一个注解，我们看一下该注解都包含了哪些东西。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出， <code>@RestController</code> 注解包含了原来的 <code>@Controller</code> 和 <code>@ResponseBody</code> 注解，使用过 Spring 的朋友对 <code>@Controller</code> 注解已经非常了解了，这里不再赘述， <code>@ResponseBody</code> 注解是将返回的数据结构转换为 Json 格式。所以 <code>@RestController</code> 可以看作是 <code>@Controller</code> 和 <code>@ResponseBody</code> 的结合体，相当于偷个懒，我们使用 <code>@RestController</code> 之后就不用再使用 <code>@Controller</code> 了。但是需要注意一个问题：如果是前后端分离，不用模板渲染的话，比如 Thymeleaf，这种情况下是可以直接使用<code>@RestController</code> 将数据以 json 格式传给前端，前端拿到之后解析；但如果不是前后端分离，需要使用模板来渲染的话，一般 Controller 中都会返回到具体的页面，那么此时就不能使用<code>@RestController</code>了，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"user"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实是需要返回到 user.html 页面的，如果使用 <code>@RestController</code> 的话，会将 user 作为字符串返回的，所以这时候我们需要使用 <code>@Controller</code> 注解。这在下一节 Spring Boot 集成 Thymeleaf 模板引擎中会再说明。</p><h2 id="2-RequestMapping">2. @RequestMapping</h2><p><code>@RequestMapping</code> 是一个用来处理请求地址映射的注解，它可以用于类上，也可以用于方法上。在类的级别上的注解会将一个特定请求或者请求模式映射到一个控制器之上，表示类中的所有响应请求的方法都是以该地址作为父路径；在方法的级别表示进一步指定到处理方法的映射关系。</p><p>该注解有6个属性，一般在项目中比较常用的有三个属性：value、method 和 produces。</p><ul><li>value 属性：指定请求的实际地址，value 可以省略不写</li><li>method 属性：指定请求的类型，主要有 GET、PUT、POST、DELETE，默认为 GET</li><li>produces属性：指定返回内容类型，如 produces = “application/json; charset=UTF-8”</li></ul><p><code>@RequestMapping</code> 注解比较简单，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, produces = <span class="string">"application/json; charset=UTF-8"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/get"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个很简单，启动项目在浏览器中输入 <code>localhost:8080/test/get</code> 测试一下即可。</p><p>针对四种不同的请求方式，是有相应注解的，不用每次在 <code>@RequestMapping</code> 注解中加 method 属性来指定，上面的 GET 方式请求可以直接使用 <code>@GetMapping(&quot;/get&quot;)</code> 注解，效果一样。相应地，PUT 方式、POST 方式和 DELETE 方式对应的注解分别为 <code>@PutMapping</code>、<code>@PostMapping</code> 和 <code>DeleteMapping</code>。</p><h2 id="3-PathVariable">3. @PathVariable</h2><p><code>@PathVariable</code> 注解主要是用来获取 url 参数，Spring Boot 支持 restfull 风格的 url，比如一个 GET 请求携带一个参数 id 过来，我们将 id 作为参数接收，可以使用 <code>@PathVariable</code> 注解。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"获取到的id为："</span> + id);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意一个问题，如果想要 url 中占位符中的 id 值直接赋值到参数 id 中，需要保证 url 中的参数和方法接收参数一致，否则就无法接收。如果不一致的话，其实也可以解决，需要用 <code>@PathVariable</code> 中的 value 属性来指定对应关系。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;idd&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable(value = <span class="string">"idd"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"获取到的id为："</span> + id);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于访问的 url，占位符的位置可以在任何位置，不一定非要在最后，比如这样也行：<code>/xxx/{id}/user</code>。另外，url 也支持多个占位符，方法参数使用同样数量的参数来接收，原理和一个参数是一样的，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;idd&#125;/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable(value = <span class="string">"idd"</span>)</span> Integer id, @PathVariable String name) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取到的id为："</span> + id);</span><br><span class="line">        System.out.println(<span class="string">"获取到的name为："</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行项目，在浏览器中请求 <code>localhost:8080/test/user/2/zhangsan</code> 可以看到控制台输出如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取到的id为：2</span><br><span class="line">获取到的name为：zhangsan</span><br></pre></td></tr></table></figure><p>所以支持多个参数的接收。同样地，如果 url 中的参数和方法中的参数名称不同的话，也需要使用 value 属性来绑定两个参数。</p><h2 id="4-RequestParam">4. @RequestParam</h2><p><code>@RequestParam</code> 注解顾名思义，也是获取请求参数的，上面我们介绍了 <code>@PathValiable</code> 注解也是获取请求参数的，那么 <code>@RequestParam</code> 和 <code>@PathVariable</code> 有什么不同呢？主要区别在于： <code>@PathValiable</code> 是从 url 模板中获取参数值， 即这种风格的 url：<code>http://localhost:8080/user/{id}</code> ；而 <code>@RequestParam</code> 是从 request 里面获取参数值，即这种风格的 url：<code>http://localhost:8080/user?id=1</code>  。我们使用该 url 带上参数 id 来测试一下如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(@RequestParam Integer id)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"获取到的id为："</span> + id);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以正常从控制台打印出 id 信息。同样地，url 上面的参数和方法的参数需要一致，如果不一致，也需要使用 value 属性来说明，比如 url 为：<code>http://localhost:8080/user?idd=1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(@RequestParam(value = <span class="string">"idd"</span>, required = <span class="keyword">false</span>)</span> Integer id) </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"获取到的id为："</span> + id);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 value 属性外，还有个两个属性比较常用：</p><ul><li>required 属性：true 表示该参数必须要传，否则就会报 404 错误，false 表示可有可无。</li><li>defaultValue 属性：默认值，表示如果请求中没有同名参数时的默认值。</li></ul><p>从 url 中可以看出，<code>@RequestParam</code> 注解用于 GET 请求上时，接收拼接在 url 中的参数。除此之外，该注解还可以用于 POST 请求，接收前端表单提交的参数，假如前端通过表单提交 username 和 password 两个参数，那我们可以使用 <code>@RequestParam</code> 来接收，用法和上面一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/form1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testForm</span><span class="params">(@RequestParam String username, @RequestParam String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取到的username为："</span> + username);</span><br><span class="line">        System.out.println(<span class="string">"获取到的password为："</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们使用 postman 来模拟一下表单提交，测试一下接口：</p><p><img src="http://qnypic.shawncoding.top/blog/20200215043749282.png" alt="使用postman测试表单提交"></p><p>那么问题来了，如果表单数据很多，我们不可能在后台方法中写上很多参数，每个参数还要 <code>@RequestParam</code> 注解。针对这种情况，我们需要封装一个实体类来接收这些参数，实体中的属性名和表单中的参数名一致即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">// set get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用实体接收的话，我们不能在前面加 <code>@RequestParam</code> 注解了，直接使用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/form2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testForm</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取到的username为："</span> + user.getUsername());</span><br><span class="line">        System.out.println(<span class="string">"获取到的password为："</span> + user.getPassword());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用 postman 再次测试一下表单提交，观察一下返回值和控制台打印出的日志即可。在实际项目中，一般都是封装一个实体类来接收表单数据，因为实际项目中表单数据一般都很多。</p><h2 id="5-RequestBody">5. @RequestBody</h2><p><code>@RequestBody</code> 注解用于接收前端传来的实体，接收参数也是对应的实体，比如前端通过 json 提交传来两个参数 username 和 password，此时我们需要在后端封装一个实体来接收。在传递的参数比较多的情况下，使用 <code>@RequestBody</code> 接收会非常方便。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">// set get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"获取到的username为："</span> + user.getUsername());</span><br><span class="line">System.out.println(<span class="string">"获取到的password为："</span> + user.getPassword());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用 postman 工具来测试一下效果，打开 postman，然后输入请求地址和参数，参数我们用 json 来模拟，如下图所有，调用之后返回 success。</p><p><img src="http://qnypic.shawncoding.top/blog/20200215043853532.png" alt="使用Postman测试requestBody"></p><p>同时看一下后台控制台输出的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取到的username为：倪升武</span><br><span class="line">获取到的password为：123456</span><br></pre></td></tr></table></figure><p>可以看出，<code>@RequestBody</code> 注解用于 POST 请求上，接收 json 实体参数。它和上面我们介绍的表单提交有点类似，只不过参数的格式不同，一个是 json 实体，一个是表单提交。在实际项目中根据具体场景和需要使用对应的注解即可。</p><h2 id="6-总结">6. 总结</h2><p>本节课主要讲解了 Spring Boot 中对 MVC 的支持，分析了 <code>@RestController</code>、 <code>@RequestMapping</code>、<code>@PathVariable</code>、 <code>@RequestParam</code> 和 <code>@RequestBody</code> 四个注解的使用方式，由于 <code>@RestController</code> 中集成了 <code>@ResponseBody</code> 所以对返回 json 的注解不再赘述。以上四个注解是使用频率很高的注解，在所有的实际项目中基本都会遇到，要熟练掌握。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第06课：Spring Boot集成 Swagger2 展现在线接口文档</h1><h2 id="1-Swagger-简介">1. Swagger 简介</h2><h3 id="1-1-解决的问题">1.1 解决的问题</h3><p>随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了前后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。前端和后端的唯一联系，变成了 API 接口，所以 API 文档变成了前后端开发人员联系的纽带，变得越来越重要。</p><p>那么问题来了，随着代码的不断更新，开发人员在开发新的接口或者更新旧的接口后，由于开发任务的繁重，往往文档很难持续跟着更新，Swagger 就是用来解决该问题的一款重要的工具，对使用接口的人来说，开发人员不需要给他们提供文档，只要告诉他们一个 Swagger 地址，即可展示在线的 API 接口文档，除此之外，调用接口的人员还可以在线测试接口数据，同样地，开发人员在开发接口时，同样也可以利用 Swagger 在线接口文档测试接口数据，这给开发人员提供了便利。</p><h3 id="1-2-Swagger-官方">1.2 Swagger 官方</h3><p>我们打开 <a href="https://swagger.io/" target="_blank" rel="noopener">Swagger 官网</a>，官方对 Swagger 的定义为：</p><blockquote><p>The Best APIs are Built with Swagger Tools</p></blockquote><p>翻译成中文是：“最好的 API 是使用 Swagger 工具构建的”。由此可见，Swagger 官方对其功能和所处的地位非常自信，由于其非常好用，所以官方对其定位也合情合理。如下图所示：</p><p><img src="http://qnypic.shawncoding.top/blog/20200215043936444.png" alt="官方对swagger的定位"></p><p>本文主要讲解在 Spring Boot 中如何导入 Swagger2 工具来展现项目中的接口文档。本节课使用的 Swagger 版本为 2.2.2。下面开始进入 Swagger2 之旅。</p><h2 id="2-Swagger2-的-maven-依赖">2. Swagger2 的 maven 依赖</h2><p>使用 Swagger2 工具，必须要导入 maven 依赖，当前官方最高版本是 2.8.0，我尝试了一下，个人感觉页面展示的效果不太好，而且不够紧凑，不利于操作。另外，最新版本并不一定是最稳定版本，当前我们实际项目中使用的是 2.2.2 版本，该版本稳定，界面友好，所以本节课主要围绕着 2.2.2 版本来展开，依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Swagger2-的配置">3. Swagger2 的配置</h2><p>使用 Swagger2 需要进行配置，Spring Boot 中对 Swagger2 的配置非常方便，新建一个配置类，Swagger2 的配置类上除了添加必要的 <code>@Configuration</code> 注解外，还需要添加 <code>@EnableSwagger2</code> 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">// 指定构建api文档的详细信息的方法：apiInfo()</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 指定要生成api接口的包路径，这里把controller作为包路径，生成controller中的所有接口</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.itcodai.course06.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建api文档的详细信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                <span class="comment">// 设置页面标题</span></span><br><span class="line">                .title(<span class="string">"Spring Boot集成Swagger2接口总览"</span>)</span><br><span class="line">                <span class="comment">// 设置接口描述</span></span><br><span class="line">                .description(<span class="string">"跟武哥一起学Spring Boot第06课"</span>)</span><br><span class="line">                <span class="comment">// 设置联系方式</span></span><br><span class="line">                .contact(<span class="string">"倪升武，"</span> + <span class="string">"CSDN：http://blog.csdn.net/eson_15"</span>)</span><br><span class="line">                <span class="comment">// 设置版本</span></span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                <span class="comment">// 构建</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该配置类中，已经使用注释详细解释了每个方法的作用了，在此不再赘述。到此为止，我们已经配置好了 Swagger2 了。现在我们可以测试一下配置有没有生效，启动项目，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code>，即可看到 swagger2 的接口页面，如下图所示，说明Swagger2 集成成功。</p><p><img src="http://qnypic.shawncoding.top/blog/20200215044013383.png" alt="swagger2页面"></p><p>结合该图，对照上面的 Swagger2 配置文件中的配置，可以很明确的知道配置类中每个方法的作用。这样就很容易理解和掌握 Swagger2 中的配置了，也可以看出，其实 Swagger2 配置很简单。</p><p>【友情提示】可能有很多朋友在配置 Swagger 的时候会遇到下面的情况，而且还关不掉的，这是因为浏览器缓存引起的，清空一下浏览器缓存即可解决问题。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-SWRv5YTY-1675176330110)(<a href="http://p99jlm9k5.bkt.clouddn.com/blog/images/1/error.png" target="_blank" rel="noopener">http://p99jlm9k5.bkt.clouddn.com/blog/images/1/error.png</a>)]</p><h2 id="4-Swagger2-的使用">4. Swagger2 的使用</h2><p>上面我们已经配置好了 Swagger2，并且也启动测试了一下，功能正常，下面我们开始使用 Swagger2，主要来介绍 Swagger2 中的几个常用的注解，分别在实体类上、 Controller 类上以及 Controller 中的方法上，最后我们看一下 Swagger2 是如何在页面上呈现在线接口文档的，并且结合 Controller 中的方法在接口中测试一下数据。</p><h3 id="4-1-实体类注解">4.1 实体类注解</h3><p>本节我们建一个 User 实体类，主要介绍一下 Swagger2 中的 <code>@ApiModel</code> 和 <code>@ApiModelProperty</code> 注解，同时为后面的测试做准备。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"用户实体类"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户唯一标识"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户姓名"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户密码"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略set和get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释下 <code>@ApiModel</code> 和 <code>@ApiModelProperty</code> 注解：</p><blockquote><p><code>@ApiModel</code> 注解用于实体类，表示对类进行说明，用于参数用实体类接收。<br><code>@ApiModelProperty</code> 注解用于类中属性，表示对 model 属性的说明或者数据操作更改。</p></blockquote><p>该注解在在线 API 文档中的具体效果在下文说明。</p><h3 id="4-2-Controller-类中相关注解">4.2 Controller 类中相关注解</h3><p>我们写一个 TestController，再写几个接口，然后学习一下 Controller 中和 Swagger2 相关的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itcodai.course06.entiy.JsonResult;</span><br><span class="line"><span class="keyword">import</span> com.itcodai.course06.entiy.User;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/swagger"</span>)</span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"Swagger2 在线接口文档"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"根据用户唯一标识获取用户信息"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title">getUserInfo</span><span class="params">(@PathVariable @ApiParam(value = <span class="string">"用户唯一标识"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟数据库中根据id获取User信息</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(id, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来学习一下 <code>@Api</code> 、 <code>@ApiOperation</code> 和 <code>@ApiParam</code> 注解。</p><blockquote><p><code>@Api</code> 注解用于类上，表示标识这个类是 swagger 的资源。<br><code>@ApiOperation</code> 注解用于方法，表示一个 http 请求的操作。<br><code>@ApiParam</code> 注解用于参数上，用来标明参数信息。</p></blockquote><p>这里返回的是 JsonResult，是第02课中学习返回 json 数据时封装的实体。以上是 Swagger 中最常用的 5 个注解，接下来运行一下项目工程，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code> 看一下 Swagger 页面的接口状态。</p><p><img src="http://qnypic.shawncoding.top/blog/20200215044156305.png" alt="swagger接口展示"></p><p>可以看出，Swagger 页面对该接口的信息展示的非常全面，每个注解的作用以及展示的地方在上图中已经标明，通过页面即可知道该接口的所有信息，那么我们直接在线测试一下该接口返回的信息，输入id为1，看一下返回数据：</p><p><img src="http://qnypic.shawncoding.top/blog/20200215044226292.png" alt="返回数据测试"></p><p>可以看出，直接在页面返回了 json 格式的数据，开发人员可以直接使用该在线接口来测试数据的正确与否，非常方便。上面是对于单个参数的输入，如果输入参数为某个对象这种情况，Swagger 是什么样子呢？我们再写一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"添加用户信息"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title">insertUser</span><span class="params">(@RequestBody @ApiParam(value = <span class="string">"用户信息"</span>)</span> User user) </span>&#123;</span><br><span class="line">        <span class="comment">// 处理添加逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult&lt;&gt;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重启项目，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code> 看一下效果：</p><p><img src="http://qnypic.shawncoding.top/blog/20200215044256579.png" alt="swagger接口展示"></p><h2 id="5-总结">5. 总结</h2><p>OK，本节课详细分析了 Swagger 的优点，以及 Spring Boot 如何集成 Swagger2，包括配置，相关注解的讲解，涉及到了实体类和接口类，以及如何使用。最后通过页面测试，体验了 Swagger 的强大之处，基本上是每个项目组中必备的工具之一，所以要掌握该工具的使用，也不难。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第07课：Spring Boot集成Thymeleaf模板引擎</h1><h2 id="1-Thymeleaf-介绍">1. Thymeleaf 介绍</h2><blockquote><p>Thymeleaf 是适用于 Web 和独立环境的现代服务器端 Java 模板引擎。<br>Thymeleaf 的主要目标是为您的开发工作流程带来优雅的自然模板 - 可以在浏览器中正确显示的HTML，也可以用作静态原型，从而在开发团队中实现更强大的协作。</p></blockquote><p>以上翻译自 Thymeleaf 官方网站。传统的 JSP+JSTL 组合是已经过去了，Thymeleaf 是现代服务端的模板引擎，与传统的 JSP 不同，Thymeleaf 可以使用浏览器直接打开，因为可以忽略掉拓展属性，相当于打开原生页面，给前端人员也带来一定的便利。</p><p>什么意思呢？就是说在本地环境或者有网络的环境下，Thymeleaf 均可运行。由于 thymeleaf 支持 html 原型，也支持在 html 标签里增加额外的属性来达到 “模板+数据” 的展示方式，所以美工可以直接在浏览器中查看页面效果，当服务启动后，也可以让后台开发人员查看带数据的动态页面效果。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui right aligned basic segment"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui orange basic label"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;blog.flag&#125;"</span>&gt;</span>静态原创信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"ui center aligned header"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;blog.title&#125;"</span>&gt;</span>这是静态标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似与上面这样，在静态页面时，会展示静态信息，当服务启动后，动态获取数据库中的数据后，就可以展示动态数据，<code>th:text</code> 标签是用来动态替换文本的，这会在下文说明。该例子说明浏览器解释 html 时会忽略 html 中未定义的标签属性（比如 <code>th:text</code>），所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示数据。</p><h2 id="2-依赖导入">2. 依赖导入</h2><p>在 Spring Boot 中使用 thymeleaf 模板需要引入依赖，可以在创建项目工程时勾选 Thymeleaf，也可以创建之后再手动导入，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外，在 html 页面上如果要使用 thymeleaf 模板，需要在页面标签中引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Thymeleaf相关配置">3. Thymeleaf相关配置</h2><p>因为 Thymeleaf 中已经有默认的配置了，我们不需要再对其做过多的配置，有一个需要注意一下，Thymeleaf 默认是开启页面缓存的，所以在开发的时候，需要关闭这个页面缓存，配置如下。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span> <span class="comment">#关闭缓存</span></span><br></pre></td></tr></table></figure><p>否则会有缓存，导致页面没法及时看到更新后的效果。 比如你修改了一个文件，已经 update 到 tomcat 了，但刷新页面还是之前的页面，就是因为缓存引起的。</p><h2 id="4-Thymeleaf-的使用">4. Thymeleaf 的使用</h2><h3 id="4-1-访问静态页面">4.1 访问静态页面</h3><p>这个和 Thymeleaf 没啥关系，应该说是通用的，我把它一并写到这里的原因是一般我们做网站的时候，都会做一个 404 页面和 500 页面，为了出错时给用户一个友好的展示，而不至于一堆异常信息抛出来。Spring Boot 中会自动识别模板目录（templates/）下的 404.html 和 500.html 文件。我们在 templates/ 目录下新建一个 error 文件夹，专门放置错误的 html 页面，然后分别打印些信息。以 404.html 为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    这是404页面</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们再写一个 controller 来测试一下 404 和 500 页面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test404"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test404</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test500"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test500</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当我们在浏览器中输入 <code>localhost:8080/thymeleaf/test400</code> 时，故意输入错误，找不到对应的方法，就会跳转到 404.html 显示。<br>当我们在浏览器中输入 <code>localhost:8088/thymeleaf/test505</code> 时，会抛出异常，然后会自动跳转到 500.html 显示。</p></blockquote><p>【注】这里有个问题需要注意一下，前面的课程中我们说了微服务中会走向前后端分离，我们在 Controller 层上都是使用的 <code>@RestController</code> 注解，自动会把返回的数据转成 json 格式。但是在使用模板引擎时，Controller 层就不能用 <code>@RestController</code> 注解了，因为在使用 thymeleaf 模板时，返回的是视图文件名，比如上面的 Controller 中是返回到 index.html 页面，如果使用 <code>@RestController</code> 的话，会把 index 当作 String 解析了，直接返回到页面了，而不是去找 index.html 页面，大家可以试一下。所以在使用模板时要用 <code>@Controller</code> 注解。</p><h3 id="4-2-Thymeleaf-中处理对象">4.2 Thymeleaf 中处理对象</h3><p>我们来看一下 thymeleaf 模板中如何处理对象信息，假如我们在做个人博客的时候，需要给前端传博主相关信息来展示，那么我们会封装成一个博主对象，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blogger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pass;</span><br><span class="line"><span class="comment">// 省去set和get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在controller层中初始化一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getBlogger"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBlogger</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">Blogger blogger = <span class="keyword">new</span> Blogger(<span class="number">1L</span>, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">model.addAttribute(<span class="string">"blogger"</span>, blogger);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"blogger"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先初始化一个 Blogger 对象，然后将该对象放到 Model 中，然后返回到 blogger.html 页面去渲染。接下来我们再写一个 blogger.html 来渲染 blogger 信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>博主信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">th:object</span>=<span class="string">"$&#123;blogger&#125;"</span> &gt;</span></span><br><span class="line">    用户编号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;blogger.id&#125;"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;blogger.getName()&#125;"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    登陆密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;pass&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出，在 thymeleaf 模板中，使用 <code>th:object=&quot;${}&quot;</code> 来获取对象信息，然后在表单里面可以有三种方式来获取对象属性。如下：</p><blockquote><p>使用 <code>th:value=&quot;*{属性名}&quot;</code><br>使用 <code>th:value=&quot;${对象.属性名}&quot;</code>，对象指的是上面使用 <code>th:object</code> 获取的对象<br>使用 <code>th:value=&quot;${对象.get方法}&quot;</code>，对象指的是上面使用 <code>th:object</code> 获取的对象</p></blockquote><p>可以看出，在 Thymeleaf 中可以像写 java 一样写代码，很方便。我们在浏览器中输入 <code>localhost:8080/thymeleaf/getBlogger</code> 来测试一下数据：</p><p><img src="http://qnypic.shawncoding.top/blog/20200215044353803.jpg" alt="thymeleaf中处理对象"></p><h3 id="4-3-Thymeleaf-中处理-List">4.3 Thymeleaf 中处理 List</h3><p>处理 List 的话，和处理上面介绍的对象差不多，但是需要在 thymeleaf 中进行遍历。我们先在 Controller 中模拟一个 List。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getList</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    Blogger blogger1 = <span class="keyword">new</span> Blogger(<span class="number">1L</span>, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    Blogger blogger2 = <span class="keyword">new</span> Blogger(<span class="number">2L</span>, <span class="string">"达人课"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    List&lt;Blogger&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(blogger1);</span><br><span class="line">    list.add(blogger2);</span><br><span class="line">    model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们写一个 list.html 来获取该 list 信息，然后在 list.html 中遍历这个list。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>博主信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">th:each</span>=<span class="string">"blogger : $&#123;list&#125;"</span> &gt;</span></span><br><span class="line">    用户编号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;blogger.id&#125;"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;blogger.name&#125;"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    登录密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;blogger.getPass()&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出，其实和处理单个对象信息差不多，Thymeleaf 使用 <code>th:each</code> 进行遍历，<code>${}</code> 取 model 中传过来的参数，然后自定义 list 中取出来的每个对象，这里定义为 blogger。表单里面可以直接使用 <code>${对象.属性名}</code> 来获取 list 中对象的属性值，也可以使用 <code>${对象.get方法}</code> 来获取，这点和上面处理对象信息是一样的，但是不能使用 <code>*{属性名}</code> 来获取对象中的属性，thymeleaf 模板获取不到。</p><h3 id="4-4-其他常用-thymeleaf-操作">4.4 其他常用 thymeleaf 操作</h3><p>我们来总结一下 thymeleaf 中的一些常用的标签操作，如下：</p><table><thead><tr><th>标签</th><th>功能</th><th>例子</th></tr></thead><tbody><tr><td><code>th:value</code></td><td>给属性赋值</td><td><code>&lt;input th:value=&quot;${blog.name}&quot; /&gt; </code></td></tr><tr><td><code>th:style</code></td><td>设置样式</td><td><code>th:style=&quot;'display:'+@{(${sitrue}?'none':'inline-block')} + ''&quot;</code></td></tr><tr><td><code>th:onclick</code></td><td>点击事件</td><td><code>th:onclick=&quot;'getInfo()'&quot;</code></td></tr><tr><td><code>th:if</code></td><td>条件判断</td><td><code>&lt;a th:if=&quot;${userId == collect.userId}&quot; &gt;</code></td></tr><tr><td><code>th:href</code></td><td>超链接</td><td><code>&lt;a th:href=&quot;@{/blogger/login}&quot;&gt;Login&lt;/a&gt; /&gt;</code></td></tr><tr><td><code>th:unless</code></td><td>条件判断和<code>th:if</code>相反</td><td><code>&lt;a th:href=&quot;@{/blogger/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt;</code></td></tr><tr><td><code>th:switch</code></td><td>配合<code>th:case</code></td><td><code>&lt;div th:switch=&quot;${user.role}&quot;&gt;</code></td></tr><tr><td><code>th:case</code></td><td>配合<code>th:switch</code></td><td><code>&lt;p th:case=&quot;'admin'&quot;&gt;administator&lt;/p&gt;</code></td></tr><tr><td><code>th:src</code></td><td>地址引入</td><td><code>&lt;img alt=&quot;csdn logo&quot; th:src=&quot;@{/img/logo.png}&quot; /&gt;</code></td></tr><tr><td><code>th:action</code></td><td>表单提交的地址</td><td><code>&lt;form th:action=&quot;@{/blogger/update}&quot;&gt;</code></td></tr></tbody></table><p>Thymeleaf 还有很多其他用法，这里就不总结了，具体的可以参考Thymeleaf的<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="noopener">官方文档（v3.0）</a>。主要要学会如何在 Spring Boot 中去使用 thymeleaf，遇到对应的标签或者方法，查阅官方文档即可。</p><h2 id="5-总结-v2">5. 总结</h2><p>Thymeleaf 在 Spring Boot 中使用非常广泛，本节课主要分析了 thymeleaf 的优点，以及如何在 Spring Boot 中集成并使用 thymeleaf 模板，包括依赖、配置，相关数据的获取、以及一些注意事项等等。最后列举了一些 thymeleaf 中常用的标签，在实际项目中多使用，多查阅就能熟练掌握，thymeleaf 中的一些标签或者方法不用死记硬背，用到什么去查阅什么，关键是要会在 Spring Boot 中集成，用的多了就熟能生巧。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第08课：Spring Boot中的全局异常处理</h1><p>在项目开发过程中，不管是对底层数据库的操作过程，还是业务层的处理过程，还是控制层的处理过程，都不可避免会遇到各种可预知的、不可预知的异常需要处理。如果对每个过程都单独作异常处理，那系统的代码耦合度会变得很高，此外，开发工作量也会加大而且不好统一，这也增加了代码的维护成本。<br>针对这种实际情况，我们需要将所有类型的异常处理从各处理过程解耦出来，这样既保证了相关处理过程的功能单一，也实现了异常信息的统一处理和维护。同时，我们也不希望直接把异常抛给用户，应该对异常进行处理，对错误信息进行封装，然后返回一个友好的信息给用户。这节主要总结一下项目中如何使用 Spring Boot 如何拦截并处理全局的异常。</p><h2 id="1-定义返回的统一-json-结构">1. 定义返回的统一 json 结构</h2><p>前端或者其他服务请求本服务的接口时，该接口需要返回对应的 json 数据，一般该服务只需要返回请求着需要的参数即可，但是在实际项目中，我们需要封装更多的信息，比如状态码 code、相关信息 msg 等等，这一方面是在项目中可以有个统一的返回结构，整个项目组都适用，另一方面是方便结合全局异常处理信息，因为异常处理信息中一般我们需要把状态码和异常内容反馈给调用方。<br>这个统一的 json 结构这可以参考<a href="https://gitbook.cn/gitchat/column/5b3c9f35a3442272491a176a" target="_blank" rel="noopener">第02课：Spring Boot 返回 JSON 数据及数据封装</a>中封装的统一 json 结构，本节内容我们简化一下，只保留状态码 code 和异常信息 msg即可。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonResult</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="string">"200"</span>;</span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="string">"操作成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(String code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// get set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-处理系统异常">2. 处理系统异常</h2><p>新建一个 GlobalExceptionHandler 全局异常处理类，然后加上 <code>@ControllerAdvice</code> 注解即可拦截项目中抛出的异常，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">// 打印log</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们点开 <code>@ControllerAdvice</code> 注解可以看到，<code>@ControllerAdvice</code> 注解包含了 <code>@Component</code> 注解，说明在 Spring Boot 启动时，也会把该类作为组件交给 Spring 来管理。除此之外，该注解还有个 <code>basePackages</code> 属性，该属性是用来拦截哪个包中的异常信息，一般我们不指定这个属性，我们拦截项目工程中的所有异常。<code>@ResponseBody</code> 注解是为了异常处理完之后给调用方输出一个 json 格式的封装数据。<br>在项目中如何使用呢？Spring Boot 中很简单，在方法上通过 <code>@ExceptionHandler</code> 注解来指定具体的异常，然后在方法中处理该异常信息，最后将结果通过统一的 json 结构体返回给调用者。下面我们举几个例子来说明如何来使用。</p><h3 id="2-1-处理参数缺失异常">2.1 处理参数缺失异常</h3><p>在前后端分离的架构中，前端请求后台的接口都是通过 rest 风格来调用，有时候，比如 POST 请求 需要携带一些参数，但是往往有时候参数会漏掉。另外，在微服务架构中，涉及到多个微服务之间的接口调用时，也可能出现这种情况，此时我们需要定义一个处理参数缺失异常的方法，来给前端或者调用方提示一个友好信息。</p><p>参数缺失的时候，会抛出 <code>HttpMessageNotReadableException</code>，我们可以拦截该异常，做一个友好处理，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 缺少请求参数异常</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ex HttpMessageNotReadableException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(MissingServletRequestParameterException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.BAD_REQUEST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleHttpMessageNotReadableException</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    MissingServletRequestParameterException ex)</span> </span>&#123;</span><br><span class="line">    logger.error(<span class="string">"缺少请求参数，&#123;&#125;"</span>, ex.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(<span class="string">"400"</span>, <span class="string">"缺少必要的请求参数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来写个简单的 Controller 测试一下该异常，通过 POST 请求方式接收两个参数：姓名和密码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/exception"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ExceptionController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">test</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                           @<span class="title">RequestParam</span><span class="params">(<span class="string">"pass"</span>)</span> String pass) </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"name：&#123;&#125;"</span>, name);</span><br><span class="line">        logger.info(<span class="string">"pass：&#123;&#125;"</span>, pass);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用 Postman 来调用一下该接口，调用的时候，只传姓名，不传密码，就会抛缺少参数异常，该异常被捕获之后，就会进入我们写好的逻辑，给调用方返回一个友好信息，如下：</p><p><img src="http://qnypic.shawncoding.top/blog/2020021504443480.png" alt="缺失参数异常"></p><h3 id="2-2-处理空指针异常">2.2 处理空指针异常</h3><p>空指针异常是开发中司空见惯的东西了，一般发生的地方有哪些呢？<br>先来聊一聊一些注意的地方，比如在微服务中，经常会调用其他服务获取数据，这个数据主要是 json 格式的，但是在解析 json 的过程中，可能会有空出现，所以我们在获取某个 jsonObject 时，再通过该 jsonObject 去获取相关信息时，应该要先做非空判断。<br>还有一个很常见的地方就是从数据库中查询的数据，不管是查询一条记录封装在某个对象中，还是查询多条记录封装在一个 List 中，我们接下来都要去处理数据，那么就有可能出现空指针异常，因为谁也不能保证从数据库中查出来的东西就一定不为空，所以在使用数据时一定要先做非空判断。<br>对空指针异常的处理很简单，和上面的逻辑一样，将异常信息换掉即可。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空指针异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex NullPointerException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(NullPointerException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleTypeMismatchException</span><span class="params">(NullPointerException ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"空指针异常，&#123;&#125;"</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(<span class="string">"500"</span>, <span class="string">"空指针异常了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个我就不测试了，代码中 ExceptionController 有个 <code>testNullPointException</code> 方法，模拟了一个空指针异常，我们在浏览器中请求一下对应的 url 即可看到返回的信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"code"</span>:<span class="string">"500"</span>,<span class="attr">"msg"</span>:<span class="string">"空指针异常了"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-一劳永逸？">2.3 一劳永逸？</h3><p>当然了，异常很多，比如还有 RuntimeException，数据库还有一些查询或者操作异常等等。由于 Exception 异常是父类，所有异常都会继承该异常，所以我们可以直接拦截 Exception 异常，一劳永逸：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统异常 预期以外异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleUnexpectedServer</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"系统异常："</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(<span class="string">"500"</span>, <span class="string">"系统发生异常，请联系管理员"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是项目中，我们一般都会比较详细的去拦截一些常见异常，拦截 Exception 虽然可以一劳永逸，但是不利于我们去排查或者定位问题。实际项目中，可以把拦截 Exception 异常写在 GlobalExceptionHandler 最下面，如果都没有找到，最后再拦截一下 Exception 异常，保证输出信息友好。</p><h2 id="3-拦截自定义异常">3. 拦截自定义异常</h2><p>在实际项目中，除了拦截一些系统异常外，在某些业务上，我们需要自定义一些业务异常，比如在微服务中，服务之间的相互调用很平凡，很常见。要处理一个服务的调用时，那么可能会调用失败或者调用超时等等，此时我们需要自定义一个异常，当调用失败时抛出该异常，给 GlobalExceptionHandler 去捕获。</p><h3 id="3-1-定义异常信息">3.1 定义异常信息</h3><p>由于在业务中，有很多异常，针对不同的业务，可能给出的提示信息不同，所以为了方便项目异常信息管理，我们一般会定义一个异常信息枚举类。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务异常提示信息枚举类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BusinessMsgEnum &#123;</span><br><span class="line">    <span class="comment">/** 参数异常 */</span></span><br><span class="line">    PARMETER_EXCEPTION(<span class="string">"102"</span>, <span class="string">"参数异常!"</span>),</span><br><span class="line">    <span class="comment">/** 等待超时 */</span></span><br><span class="line">    SERVICE_TIME_OUT(<span class="string">"103"</span>, <span class="string">"服务调用超时！"</span>),</span><br><span class="line">    <span class="comment">/** 参数过大 */</span></span><br><span class="line">    PARMETER_BIG_EXCEPTION(<span class="string">"102"</span>, <span class="string">"输入的图片数量不能超过50张!"</span>),</span><br><span class="line">    <span class="comment">/** 500 : 一劳永逸的提示也可以在这定义 */</span></span><br><span class="line">    UNEXPECTED_EXCEPTION(<span class="string">"500"</span>, <span class="string">"系统发生异常，请联系管理员！"</span>);</span><br><span class="line">    <span class="comment">// 还可以定义更多的业务异常</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BusinessMsgEnum</span><span class="params">(String code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// set get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-拦截自定义异常">3.2 拦截自定义异常</h3><p>然后我们可以定义一个业务异常，当出现业务异常时，我们就抛这个自定义的业务异常即可。比如我们定义一个 BusinessErrorException 异常，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义业务异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessErrorException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7480022450501760611L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessErrorException</span><span class="params">(BusinessMsgEnum businessMsgEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = businessMsgEnum.code();</span><br><span class="line">        <span class="keyword">this</span>.message = businessMsgEnum.msg();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// get set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造方法中，传入我们上面自定义的异常枚举类，所以在项目中，如果有新的异常信息需要添加，我们直接在枚举类中添加即可，很方便，做到统一维护，然后再拦截该异常时获取即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截业务异常，返回业务异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BusinessErrorException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleBusinessError</span><span class="params">(BusinessErrorException ex)</span> </span>&#123;</span><br><span class="line">        String code = ex.getCode();</span><br><span class="line">        String message = ex.getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(code, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在业务代码中，我们可以直接模拟一下抛出业务异常，测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/exception"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ExceptionController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/business"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">testException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BusinessErrorException(BusinessMsgEnum.UNEXPECTED_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下项目，测试一下，返回 json 如下，说明我们自定义的业务异常捕获成功：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"code"</span>:<span class="string">"500"</span>,<span class="attr">"msg"</span>:<span class="string">"系统发生异常，请联系管理员！"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="4-总结-v4">4. 总结</h2><p>本节课程主要讲解了Spring Boot 的全局异常处理，包括异常信息的封装、异常信息的捕获和处理，以及在实际项目中，我们用到的自定义异常枚举类和业务异常的捕获与处理，在项目中运用的非常广泛，基本上每个项目中都需要做全局异常处理。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第09课：Spring Boot中的切面AOP处理</h1><h2 id="1-什么是AOP">1. 什么是AOP</h2><p>AOP：Aspect Oriented Programming 的缩写，意为：面向切面编程。面向切面编程的目标就是分离关注点。什么是关注点呢？就是关注点，就是你要做的事情。假如你是一位公子哥，没啥人生目标，每天衣来伸手，饭来张口，整天只知道一件事：玩（这就是你的关注点，你只要做这一件事）！但是有个问题，你在玩之前，你还需要起床、穿衣服、穿鞋子、叠被子、做早饭等等等等，但是这些事情你不想关注，也不用关注，你只想想玩，那么怎么办呢？</p><p>对！这些事情通通交给下人去干。你有一个专门的仆人 A 帮你穿衣服，仆人 B 帮你穿鞋子，仆人 C 帮你叠好被子，仆人 D 帮你做饭，然后你就开始吃饭、去玩（这就是你一天的正事），你干完你的正事之后，回来，然后一系列仆人又开始帮你干这个干那个，然后一天就结束了！</p><p>这就是 AOP。AOP 的好处就是你只需要干你的正事，其它事情别人帮你干。也许有一天，你想裸奔，不想穿衣服，那么你把仆人 A 解雇就是了！也许有一天，出门之前你还想带点钱，那么你再雇一个仆人 E 专门帮你干取钱的活！这就是AOP。每个人各司其职，灵活组合，达到一种可配置的、可插拔的程序结构。</p><h2 id="2-Spring-Boot-中的-AOP-处理">2. Spring Boot 中的 AOP 处理</h2><h3 id="2-1-AOP-依赖">2.1 AOP 依赖</h3><p>使用AOP，首先需要引入AOP的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-实现-AOP-切面">2.2 实现 AOP 切面</h3><p>Spring Boot 中使用 AOP 非常简单，假如我们要在项目中打印一些 log，在引入了上面的依赖之后，我们新建一个类 LogAspectHandler，用来定义切面和处理方法。只要在类上加个<code>@Aspect</code>注解即可。<code>@Aspect</code> 注解用来描述一个切面类，定义切面类的时候需要打上这个注解。<code>@Component</code> 注解让该类交给 Spring 来管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要介绍几个常用的注解及使用：</p><blockquote><p>1.@Pointcut：定义一个切面，即上面所描述的关注的某件事入口。<br>2.@Before：在做某件事之前做的事。<br>3.@After：在做某件事之后做的事。<br>4.@AfterReturning：在做某件事之后，对其返回值做增强处理。<br>5.@AfterThrowing：在做某件事抛出异常时，处理。</p></blockquote><h4 id="2-2-1-Pointcut-注解">2.2.1 @Pointcut 注解</h4><p><code>@Pointcut</code> 注解：用来定义一个切面（切入点），即上文中所关注的某件事情的入口。切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切面，拦截com.itcodai.course09.controller包和子包下的所有方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.itcodai.course09.controller..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Pointcut</code> 注解指定一个切面，定义需要拦截的东西，这里介绍两个常用的表达式：一个是使用 <code>execution()</code>，另一个是使用 <code>annotation()</code>。<br>以 <code>execution(* com.itcodai.course09.controller..*.*(..)))</code> 表达式为例，语法如下：</p><blockquote><p><code>execution()</code> 为表达式主体<br>第一个 <code>*</code> 号的位置：表示返回值类型，<code>*</code> 表示所有类型<br>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，<code>com.itcodai.course09.controller</code> 包、子包下所有类的方法<br>第二个 <code>*</code> 号的位置：表示类名，<code>*</code> 表示所有类<br><code>*(..)</code> ：这个星号表示方法名，<code>*</code> 表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数</p></blockquote><p><code>annotation()</code> 方式是针对某个注解来定义切面，比如我们对具有<code>@GetMapping</code>注解的方法做切面，可以如下定义切面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"@annotation(org.springframework.web.bind.annotation.GetMapping)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">annotationCut</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后使用该切面的话，就会切入注解是 <code>@GetMapping</code> 的方法。因为在实际项目中，可能对于不同的注解有不同的逻辑处理，比如 <code>@GetMapping</code>、<code>@PostMapping</code>、<code>@DeleteMapping</code> 等。所以这种按照注解的切入方式在实际项目中也很常用。</p><h4 id="2-2-2-Before-注解">2.2.2 @Before 注解</h4><p><code>@Before</code> 注解指定的方法在切面切入目标方法之前执行，可以做一些 log 处理，也可以做一些信息的统计，比如获取用户的请求 url 以及用户的 ip 地址等等，这个在做个人站点的时候都能用得到，都是常用的方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在上面定义的切面方法之前执行该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint jointPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"====doBefore方法进入了===="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取签名</span></span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        <span class="comment">// 获取切入的包名</span></span><br><span class="line">        String declaringTypeName = signature.getDeclaringTypeName();</span><br><span class="line">        <span class="comment">// 获取即将执行的方法名</span></span><br><span class="line">        String funcName = signature.getName();</span><br><span class="line">        logger.info(<span class="string">"即将执行方法为: &#123;&#125;，属于&#123;&#125;包"</span>, funcName, declaringTypeName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 也可以用来记录一些信息，比如获取请求的url和ip</span></span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        <span class="comment">// 获取请求url</span></span><br><span class="line">        String url = request.getRequestURL().toString();</span><br><span class="line">        <span class="comment">// 获取请求ip</span></span><br><span class="line">        String ip = request.getRemoteAddr();</span><br><span class="line">        logger.info(<span class="string">"用户请求的url为：&#123;&#125;，ip地址为：&#123;&#125;"</span>, url, ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JointPoint 对象很有用，可以用它来获取一个签名，然后利用签名可以获取请求的包名、方法名，包括参数（通过 <code>joinPoint.getArgs()</code> 获取）等等。</p><h4 id="2-2-3-After-注解">2.2.3 @After 注解</h4><p><code>@After</code> 注解和 <code>@Before</code>  注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 log 处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切面，拦截com.itcodai.course09.controller包下的所有方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.itcodai.course09.controller..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在上面定义的切面方法之后执行该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint jointPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"====doAfter方法进入了===="</span>);</span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        String method = signature.getName();</span><br><span class="line">        logger.info(<span class="string">"方法&#123;&#125;已经执行完"</span>, method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们来写一个 Controller 来测试一下执行结果，新建一个 AopController 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/aop"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testAop</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，在浏览器中输入 <code>localhost:8080/aop/CSDN</code>，观察一下控制台的输出信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;doBefore方法进入了&#x3D;&#x3D;&#x3D;&#x3D;  </span><br><span class="line">即将执行方法为: testAop，属于com.itcodai.course09.controller.AopController包  </span><br><span class="line">用户请求的url为：http:&#x2F;&#x2F;localhost:8080&#x2F;aop&#x2F;name，ip地址为：0:0:0:0:0:0:0:1  </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;doAfter方法进入了&#x3D;&#x3D;&#x3D;&#x3D;  </span><br><span class="line">方法testAop已经执行完</span><br></pre></td></tr></table></figure><p>从打印出来的 log 中可以看出程序执行的逻辑与顺序，可以很直观的掌握 <code>@Before</code> 和 <code>@After</code> 两个注解的实际作用。</p><h4 id="2-2-4-AfterReturning-注解">2.2.4 @AfterReturning 注解</h4><p><code>@AfterReturning</code> 注解和 <code>@After</code> 有些类似，区别在于 <code>@AfterReturning</code> 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在上面定义的切面方法返回后执行该方法，可以捕获返回对象或者对返回对象进行增强</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"pointCut()"</span>, returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        String classMethod = signature.getName();</span><br><span class="line">        logger.info(<span class="string">"方法&#123;&#125;执行完毕，返回参数为：&#123;&#125;"</span>, classMethod, result);</span><br><span class="line">        <span class="comment">// 实际项目中可以根据业务做具体的返回值增强</span></span><br><span class="line">        logger.info(<span class="string">"对返回参数进行业务上的增强：&#123;&#125;"</span>, result + <span class="string">"增强版"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：在 <code>@AfterReturning</code>注解 中，属性 <code>returning</code> 的值必须要和参数保持一致，否则会检测不到。该方法中的第二个入参就是被切方法的返回值，在 <code>doAfterReturning</code> 方法中可以对返回值进行增强，可以根据业务需要做相应的封装。我们重启一下服务，再测试一下（多余的 log 我不贴出来了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法testAop执行完毕，返回参数为：Hello CSDN  </span><br><span class="line">对返回参数进行业务上的增强：Hello CSDN增强版</span><br></pre></td></tr></table></figure><h4 id="2-2-5-AfterThrowing-注解">2.2.5 @AfterThrowing 注解</h4><p>顾名思义，<code>@AfterThrowing</code> 注解是当被切方法执行时抛出异常时，会进入 <code>@AfterThrowing</code> 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。要注意的是 <code>throwing</code> 属性的值必须要和参数一致，否则会报错。该方法中的第二个入参即为抛出的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用AOP处理log</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/05/04 20:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在上面定义的切面方法执行抛异常时，执行该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint jointPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex ex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"pointCut()"</span>, throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span> </span>&#123;</span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        String method = signature.getName();</span><br><span class="line">        <span class="comment">// 处理异常的逻辑</span></span><br><span class="line">        logger.info(<span class="string">"执行方法&#123;&#125;出错，异常为：&#123;&#125;"</span>, method, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法我就不测试了，大家可以自行测试一下。</p><h2 id="3-总结">3. 总结</h2><p>本节课针对 Spring Boot 中的切面 AOP 做了详细的讲解，主要介绍了 Spring Boot 中 AOP 的引入，常用注解的使用，参数的使用，以及常用 api 的介绍。AOP 在实际项目中很有用，对切面方法执行前后都可以根据具体的业务，做相应的预处理或者增强处理，同时也可以用作异常捕获处理，可以根据具体业务场景，合理去使用 AOP。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第10课：Spring Boot集成MyBatis</h1><h2 id="1-MyBatis-介绍">1. MyBatis 介绍</h2><p>大家都知道，MyBatis 框架是一个持久层框架，是 Apache 下的顶级项目。Mybatis 可以让开发者的主要精力放在 sql 上，通过 Mybatis 提供的映射方式，自由灵活的生成满足需要的 sql 语句。使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs 映射成数据库中的记录，在国内可谓是占据了半壁江山。本节课程主要通过两种方式来对 Spring Boot 集成 MyBatis 做一讲解。重点讲解一下基于注解的方式。因为实际项目中使用注解的方式更多一点，更简洁一点，省去了很多 xml 配置（这不是绝对的，有些项目组中可能也在使用 xml 的方式）。</p><h2 id="2-MyBatis-的配置">2. MyBatis 的配置</h2><h2 id="2-1-依赖导入">2.1 依赖导入</h2><p>Spring Boot 集成 MyBatis，需要导入 <code>mybatis-spring-boot-starter</code> 和 mysql 的依赖，这里我们使用的版本时 1.3.2，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们点开 <code>mybatis-spring-boot-starter</code> 依赖，可以看到我们之前使用 Spring 时候熟悉的依赖，就像我在课程的一开始介绍的那样，Spring Boot 致力于简化编码，使用 starter 系列将相关依赖集成在一起，开发者不需要关注繁琐的配置，非常方便。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 省去其他 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-properties-yml配置">2.2 properties.yml配置</h2><p>我们再来看一下，集成 MyBatis 时需要在 properties.yml 配置文件中做哪些基本配置呢？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 服务端口号</span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line"># 数据库地址</span><br><span class="line">datasource:</span><br><span class="line">  url: localhost:3306/blog_test</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource: # 数据库配置</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://$&#123;datasource.url&#125;?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;maxReconnects=10</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    hikari:</span><br><span class="line">      maximum-pool-size: 10 # 最大连接池数</span><br><span class="line">      max-lifetime: 1770000</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  # 指定别名设置的包为所有entity</span><br><span class="line">  type-aliases-package: com.itcodai.course10.entity</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true # 驼峰命名规范</span><br><span class="line">  mapper-locations: # mapper映射文件位置</span><br><span class="line">    - classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p>我们来简单介绍一下上面的这些配置：关于数据库的相关配置，我就不详细的解说了，这点相信大家已经非常熟练了，配置一下用户名、密码、数据库连接等等，这里使用的连接池是 Spring Boot 自带的 hikari，感兴趣的朋友可以去百度或者谷歌搜一搜，了解一下。</p><p>这里说明一下 <code>map-underscore-to-camel-case: true</code>， 用来开启驼峰命名规范，这个比较好用，比如数据库中字段名为：<code>user_name</code>， 那么在实体类中可以定义属性为 <code>userName</code> （甚至可以写成 <code>username</code>，也能映射上），会自动匹配到驼峰属性，如果不这样配置的话，针对字段名和属性名不同的情况，会映射不到。</p><h2 id="3-基于-xml-的整合">3. 基于 xml 的整合</h2><p>使用原始的 xml 方式，需要新建 UserMapper.xml 文件，在上面的 application.yml 配置文件中，我们已经定义了 xml 文件的路径：<code>classpath:mapper/*.xml</code>，所以我们在 resources 目录下新建一个 mapper 文件夹，然后创建一个 UserMapper.xml 文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itcodai.course10.dao.UserMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.itcodai.course10.entity.User"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByName"</span> <span class="attr">resultType</span>=<span class="string">"User"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">       select * from user where user_name = #&#123;username&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这和整合 Spring 一样的，namespace 中指定的是对应的 Mapper， <code>&lt;resultMap&gt;</code> 中指定对应的实体类，即 User。然后在内部指定表的字段和实体的属性相对应即可。这里我们写一个根据用户名查询用户的 sql。</p><p>实体类中有 id，username 和 password，我不在这贴代码，大家可以下载源码查看。UserMapper.java 文件中写一个接口即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">getUserByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><p>中间省略 service 的代码，我们写一个 Controller 来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getUserByName/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByName</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，在浏览器中输入：<code>http://localhost:8080/getUserByName/CSDN</code> 即可查询到数据库表中用户名为 CSDN 的用户信息（事先搞两个数据进去即可）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">2</span>,<span class="attr">"username"</span>:<span class="string">"CSDN"</span>,<span class="attr">"password"</span>:<span class="string">"123456"</span>&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意一下：Spring Boot 如何知道这个 Mapper 呢？一种方法是在上面的 mapper 层对应的类上面添加 <code>@Mapper</code> 注解即可，但是这种方法有个弊端，当我们有很多个 mapper 时，那么每一个类上面都得添加 <code>@Mapper</code> 注解。另一种比较简便的方法是在 Spring Boot 启动类上添加<code>@MaperScan</code> 注解，来扫描一个包下的所有 mapper。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.itcodai.course10.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course10Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Course10Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，<code>com.itcodai.course10.dao</code> 包下的所有 mapper 都会被扫描到了。</p><h2 id="4-基于注解的整合">4. 基于注解的整合</h2><p>基于注解的整合就不需要 xml 配置文件了，MyBatis 主要提供了 <code>@Select</code>， <code>@Insert</code>， <code>@Update</code>， <code>Delete</code> 四个注解。这四个注解是用的非常多的，也很简单，注解后面跟上对应的 sql 语句即可，我们举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><p>这跟 xml 文件中写 sql 语句是一样的，这样就不需要 xml 文件了，但是有个问题，有人可能会问，如果是两个参数呢？如果是两个参数，我们需要使用 <code>@Param</code> 注解来指定每一个参数的对应关系，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125; and user_name=#&#123;name&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">getUserByIdAndName</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String username)</span>;</span><br></pre></td></tr></table></figure><p>可以看出，<code>@Param</code> 指定的参数应该要和 sql 中 <code>#{}</code> 取的参数名相同，不同则取不到。可以在 controller 中自行测试一下，接口都在源码中，文章中我就不贴测试代码和结果了。</p><p>有个问题需要注意一下，一般我们在设计表字段后，都会根据自动生成工具生成实体类，这样的话，基本上实体类是能和表字段对应上的，最起码也是驼峰对应的，由于在上面配置文件中开启了驼峰的配置，所以字段都是能对的上的。但是，万一有对不上的呢？我们也有解决办法，使用 <code>@Results</code> 注解来解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"username"</span>, column = <span class="string">"user_name"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"password"</span>, column = <span class="string">"password"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><p><code>@Results</code> 中的 <code>@Result</code> 注解是用来指定每一个属性和字段的对应关系，这样的话就可以解决上面说的这个问题了。</p><p>当然了，我们也可以 xml 和注解相结合使用，目前我们实际的项目中也是采用混用的方式，因为有时候 xml 方便，有时候注解方便，比如就上面这个问题来说，如果我们定义了上面的这个 UserMapper.xml，那么我们完全可以使用 <code>@ResultMap</code> 注解来替代 <code>@Results</code> 注解，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ResultMap</span>(<span class="string">"BaseResultMap"</span>)</span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><p><code>@ResultMap</code> 注解中的值从哪来呢？对应的是 UserMapper.xml 文件中定义的 <code>&lt;resultMap&gt;</code> 时对应的 id 值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.itcodai.course10.entity.User"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种 xml 和注解结合着使用的情况也很常见，而且也减少了大量的代码，因为 xml 文件可以使用自动生成工具去生成，也不需要人为手动敲，所以这种使用方式也很常见。</p><h2 id="5-总结-v3">5. 总结</h2><p>本节课主要系统的讲解了 Spring Boot 集成 MyBatis 的过程，分为基于 xml 形式和基于注解的形式来讲解，通过实际配置手把手讲解了 Spring Boot 中 MyBatis 的使用方式，并针对注解方式，讲解了常见的问题已经解决方式，有很强的实战意义。在实际项目中，建议根据实际情况来确定使用哪种方式，一般 xml 和注解都在用。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第11课：Spring Boot事务配置管理</h1><h2 id="1-事务相关">1. 事务相关</h2><p>场景：我们在开发企业应用时，由于数据操作在顺序执行的过程中，线上可能有各种无法预知的问题，任何一步操作都有可能发生异常，异常则会导致后续的操作无法完成。此时由于业务逻辑并未正确的完成，所以在之前操作过数据库的动作并不可靠，需要在这种情况下进行数据的回滚。</p><p>事务的作用就是为了保证用户的每一个操作都是可靠的，事务中的每一步操作都必须成功执行，只要有发生异常就回退到事务开始未进行操作的状态。这很好理解，转账、购票等等，必须整个事件流程全部执行完才能人为该事件执行成功，不能转钱转到一半，系统死了，转账人钱没了，收款人钱还没到。</p><p>事务管理是 Spring Boot 框架中最为常用的功能之一，我们在实际应用开发时，基本上在 service 层处理业务逻辑的时候都要加上事务，当然了，有时候可能由于场景需要，也不用加事务（比如我们就要往一个表里插数据，相互没有影响，插多少是多少，不能因为某个数据挂了，把之前插的全部回滚）。</p><h2 id="2-Spring-Boot-事务配置">2. Spring Boot 事务配置</h2><h3 id="2-1-依赖导入-v2">2.1 依赖导入</h3><p>在 Spring Boot 中使用事务，需要导入 mysql 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入了 mysql 依赖后，Spring Boot 会自动注入 DataSourceTransactionManager，我们不需要任何其他的配置就可以用 <code>@Transactional</code> 注解进行事务的使用。关于 mybatis 的配置，在上一节课中已经说明了，这里还是使用上一节课中的 mybatis 配置即可。</p><h3 id="2-2-事务的测试">2.2 事务的测试</h3><p>我们首先在数据库表中插入一条数据：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">user_name</th><th style="text-align:center">password</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">倪升武</td><td style="text-align:center">123456</td></tr></tbody></table><p>然后我们写一个插入的 mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user (user_name, password) values (#&#123;username&#125;, #&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function">Integer <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，接下来我们来测试一下 Spring Boot 中的事务处理，在 service 层，我们手动抛出个异常来模拟实际中出现的异常，然后观察一下事务有没有回滚，如果数据库中没有新的记录，则说明事务回滚成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 插入用户信息</span></span><br><span class="line">        userMapper.insertUser(user);</span><br><span class="line">        <span class="comment">// 手动抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/adduser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@RequestBody User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != user) &#123;</span><br><span class="line">            userService.isertUser(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"false"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用 postman 调用一下该接口，因为在程序中抛出了个异常，会造成事务回滚，我们刷新一下数据库，并没有增加一条记录，说明事务生效了。事务很简单，我们平时在使用的时候，一般不会有多少问题，但是并不仅仅如此……</p><h2 id="3-常见问题总结">3. 常见问题总结</h2><p>从上面的内容中可以看出，Spring Boot 中使用事务非常简单，<code>@Transactional</code> 注解即可解决问题，说是这么说，但是在实际项目中，是有很多小坑在等着我们，这些小坑是我们在写代码的时候没有注意到，而且正常情况下不容易发现这些小坑，等项目写大了，某一天突然出问题了，排查问题非常困难，到时候肯定是抓瞎，需要费很大的精力去排查问题。</p><p>这一小节，我专门针对实际项目中经常出现的，和事务相关的细节做一下总结，希望读者在读完之后，能够落实到自己的项目中，能有所受益。</p><h3 id="3-1-异常并没有被-”捕获“-到">3.1 异常并没有被 ”捕获“ 到</h3><p>首先要说的，就是异常并没有被 ”捕获“ 到，导致事务并没有回滚。我们在业务层代码中，也许已经考虑到了异常的存在，或者编辑器已经提示我们需要抛出异常，但是这里面有个需要注意的地方：并不是说我们把异常抛出来了，有异常了事务就会回滚，我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isertUser2</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 插入用户信息</span></span><br><span class="line">        userMapper.insertUser(user);</span><br><span class="line">        <span class="comment">// 手动抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"数据库异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看上面这个代码，其实并没有什么问题，手动抛出一个 <code>SQLException</code> 来模拟实际中操作数据库发生的异常，在这个方法中，既然抛出了异常，那么事务应该回滚，实际却不如此，读者可以使用我源码中 controller 的接口，通过 postman 测试一下，就会发现，仍然是可以插入一条用户数据的。</p><p>那么问题出在哪呢？因为 Spring Boot 默认的事务规则是遇到运行异常（RuntimeException）和程序错误（Error）才会回滚。比如上面我们的例子中抛出的 RuntimeException 就没有问题，但是抛出 SQLException 就无法回滚了。针对非运行时异常，如果要进行事务回滚的话，可以在 <code>@Transactional</code> 注解中使用 <code>rollbackFor</code> 属性来指定异常，比如 <code>@Transactional(rollbackFor = Exception.class)</code>，这样就没有问题了，所以在实际项目中，一定要指定异常。</p><h3 id="3-2-异常被-”吃“-掉">3.2 异常被 ”吃“ 掉</h3><p>这个标题很搞笑，异常怎么会被吃掉呢？还是回归到现实项目中去，我们在处理异常时，有两种方式，要么抛出去，让上一层来捕获处理；要么把异常 try catch 掉，在异常出现的地方给处理掉。就因为有这中 try…catch，所以导致异常被 ”吃“ 掉，事务无法回滚。我们还是看上面那个例子，只不过简单修改一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">isertUser3</span>(<span class="title">User</span> <span class="title">user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 插入用户信息</span></span><br><span class="line">            userMapper.insertUser(user);</span><br><span class="line">            <span class="comment">// 手动抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"数据库异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 异常处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读者可以使用我源码中 controller 的接口，通过 postman 测试一下，就会发现，仍然是可以插入一条用户数据，说明事务并没有因为抛出异常而回滚。这个细节往往比上面那个坑更难以发现，因为我们的思维很容易导致 try…catch 代码的产生，一旦出现这种问题，往往排查起来比较费劲，所以我们平时在写代码时，一定要多思考，多注意这种细节，尽量避免给自己埋坑。</p><p>那这种怎么解决呢？直接往上抛，给上一层来处理即可，千万不要在事务中把异常自己 ”吃“ 掉。</p><h3 id="3-3-事务的范围">3.3 事务的范围</h3><p>事务范围这个东西比上面两个坑埋的更深！我之所以把这个也写上，是因为这是我之前在实际项目中遇到的，该场景在这个课程中我就不模拟了，我写一个 demo 让大家看一下，把这个坑记住即可，以后在写代码时，遇到并发问题，就会注意这个坑了，那么这节课也就有价值了。</p><p>我来写个 demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">synchronized</span> <span class="title">void</span> <span class="title">isertUser4</span>(<span class="title">User</span> <span class="title">user</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 实际中的具体业务……</span></span><br><span class="line">        userMapper.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，因为要考虑并发问题，我在业务层代码的方法上加了个 synchronized 关键字。我举个实际的场景，比如一个数据库中，针对某个用户，只有一条记录，下一个插入动作过来，会先判断该数据库中有没有相同的用户，如果有就不插入，就更新，没有才插入，所以理论上，数据库中永远就一条同一用户信息，不会出现同一数据库中插入了两条相同用户的信息。</p><p>但是在压测时，就会出现上面的问题，数据库中确实有两条同一用户的信息，分析其原因，在于事务的范围和锁的范围问题。</p><p>从上面方法中可以看到，方法上是加了事务的，那么也就是说，在执行该方法开始时，事务启动，执行完了后，事务关闭。但是 synchronized 没有起作用，其实根本原因是因为事务的范围比锁的范围大。也就是说，在加锁的那部分代码执行完之后，锁释放掉了，但是事务还没结束，此时另一个线程进来了，事务没结束的话，第二个线程进来时，数据库的状态和第一个线程刚进来是一样的。即由于mysql Innodb引擎的默认隔离级别是可重复读（在同一个事务里，SELECT的结果是事务开始时时间点的状态），线程二事务开始的时候，线程一还没提交完成，导致读取的数据还没更新。第二个线程也做了插入动作，导致了脏数据。</p><p>这个问题可以避免，第一，把事务去掉即可（不推荐）；第二，在调用该 service 的地方加锁，保证锁的范围比事务的范围大即可。</p><h2 id="4-总结-v5">4. 总结</h2><p>本章主要总结了 Spring Boot 中如何使用事务，只要使用 <code>@Transactional</code> 注解即可使用，非常简单方便。除此之外，重点总结了三个在实际项目中可能遇到的坑点，这非常有意义，因为事务这东西不出问题还好，出了问题比较难以排查，所以总结的这三点注意事项，希望能帮助到开发中的朋友。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第12课：Spring Boot中使用监听器</h1><h2 id="1-监听器介绍">1. 监听器介绍</h2><p>什么是 web 监听器？web 监听器是一种 Servlet 中特殊的类，它们能帮助开发者监听 web 中特定的事件，比如 ServletContext, HttpSession, ServletRequest 的创建和销毁；变量的创建、销毁和修改等。可以在某些动作前后增加处理，实现监控。</p><h2 id="2-Spring-Boot中监听器的使用">2. Spring Boot中监听器的使用</h2><p>web 监听器的使用场景很多，比如监听 servlet 上下文用来初始化一些数据、监听 http session 用来获取当前在线的人数、监听客户端请求的 servlet request 对象来获取用户的访问信息等等。这一节中，我们主要通过这三个实际的使用场景来学习一下 Spring Boot 中监听器的使用。</p><h3 id="2-1-监听Servlet上下文对象">2.1 监听Servlet上下文对象</h3><p>监听 servlet 上下文对象可以用来初始化数据，用于缓存。什么意思呢？我举一个很常见的场景，比如用户在点击某个站点的首页时，一般都会展现出首页的一些信息，而这些信息基本上或者大部分时间都保持不变的，但是这些信息都是来自数据库。如果用户的每次点击，都要从数据库中去获取数据的话，用户量少还可以接受，如果用户量非常大的话，这对数据库也是一笔很大的开销。</p><p>针对这种首页数据，大部分都不常更新的话，我们完全可以把它们缓存起来，每次用户点击的时候，我们都直接从缓存中拿，这样既可以提高首页的访问速度，又可以降低服务器的压力。如果做的更加灵活一点，可以再加个定时器，定期的来更新这个首页缓存。就类似与 CSDN 个人博客首页中排名的变化一样。</p><p>下面我们针对这个功能，来写一个 demo，在实际中，读者可以完全套用该代码，来实现自己项目中的相关逻辑。首先写一个 Service，模拟一下从数据库查询数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实际中会根据具体的业务场景，从数据库中查询对应的信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写一个监听器，实现 <code>ApplicationListener&lt;ContextRefreshedEvent&gt;</code> 接口，重写 <code>onApplicationEvent</code> 方法，将 ContextRefreshedEvent 对象传进去。如果我们想在加载或刷新应用上下文时，也重新刷新下我们预加载的资源，就可以通过监听 ContextRefreshedEvent 来做这样的事情。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用ApplicationListener来初始化一些数据到application域中的监听器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengni ni</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent contextRefreshedEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先获取到application上下文</span></span><br><span class="line">        ApplicationContext applicationContext = contextRefreshedEvent.getApplicationContext();</span><br><span class="line">        <span class="comment">// 获取对应的service</span></span><br><span class="line">        UserService userService = applicationContext.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = userService.getUser();</span><br><span class="line">        <span class="comment">// 获取application域对象，将查到的信息放到application域中</span></span><br><span class="line">        ServletContext application = applicationContext.getBean(ServletContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        application.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如注释中描述的一样，首先通过 contextRefreshedEvent 来获取 application 上下文，再通过 application 上下文来获取 UserService 这个 bean，项目中可以根据实际业务场景，也可以获取其他的 bean，然后再调用自己的业务代码获取相应的数据，最后存储到 application 域中，这样前端在请求相应数据的时候，我们就可以直接从 application 域中获取信息，减少数据库的压力。下面写一个 Controller 直接从 application 域中获取 user 信息来测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/listener"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        ServletContext application = request.getServletContext();</span><br><span class="line">        <span class="keyword">return</span> (User) application.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，在浏览器中输入 <code>http://localhost:8080/listener/user</code> 测试一下即可，如果正常返回 user 信息，那么说明数据已经缓存成功。不过 application 这种是缓存在内存中，对内存会有消耗，后面的课程中我会讲到 redis，到时候再给大家介绍一下 redis 的缓存。</p><h3 id="2-2-监听HTTP会话-Session对象">2.2 监听HTTP会话 Session对象</h3><p>监听器还有一个比较常用的地方就是用来监听 session 对象，来获取在线用户数量，现在有很多开发者都有自己的网站，监听 session 来获取当前在下用户数量是个很常见的使用场景，下面来介绍一下如何来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用HttpSessionListener统计在线用户数的监听器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHttpSessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyHttpSessionListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录在线的用户数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Integer count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"新用户上线了"</span>);</span><br><span class="line">        count++;</span><br><span class="line">        httpSessionEvent.getSession().getServletContext().setAttribute(<span class="string">"count"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"用户下线了"</span>);</span><br><span class="line">        count--;</span><br><span class="line">        httpSessionEvent.getSession().getServletContext().setAttribute(<span class="string">"count"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，首先该监听器需要实现 HttpSessionListener 接口，然后重写 <code>sessionCreated</code> 和 <code>sessionDestroyed</code> 方法，在 <code>sessionCreated</code> 方法中传递一个 HttpSessionEvent 对象，然后将当前 session 中的用户数量加1，<code>sessionDestroyed</code> 方法刚好相反，不再赘述。然后我们写一个 Controller 来测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/listener"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前在线人数，该方法有bug</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/total"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTotalUser</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Integer count = (Integer) request.getSession().getServletContext().getAttribute(<span class="string">"count"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"当前在线人数："</span> + count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该 Controller 中是直接获取当前 session 中的用户数量，启动服务器，在浏览器中输入 <code>localhost:8080/listener/total</code> 可以看到返回的结果是1，再打开一个浏览器，请求相同的地址可以看到 count 是 2 ，这没有问题。但是如果关闭一个浏览器再打开，理论上应该还是2，但是实际测试却是 3。原因是 session 销毁的方法没有执行（可以在后台控制台观察日志打印情况），当重新打开时，服务器找不到用户原来的 session，于是又重新创建了一个 session，那怎么解决该问题呢？我们可以将上面的 Controller 方法改造一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/total2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTotalUser</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    Cookie cookie;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 把sessionId记录在浏览器中</span></span><br><span class="line">        cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>, URLEncoder.encode(request.getSession().getId(), <span class="string">"utf-8"</span>));</span><br><span class="line">        cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">        <span class="comment">//设置cookie有效期为2天，设置长一点</span></span><br><span class="line">        cookie.setMaxAge( <span class="number">48</span>*<span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Integer count = (Integer) request.getSession().getServletContext().getAttribute(<span class="string">"count"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"当前在线人数："</span> + count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，该处理逻辑是让服务器记得原来那个 session，即把原来的 sessionId 记录在浏览器中，下次再打开时，把这个 sessionId 传过去，这样服务器就不会重新再创建了。重启一下服务器，在浏览器中再次测试一下，即可避免上面的问题。</p><h3 id="2-3-监听客户端请求Servlet-Request对象">2.3 监听客户端请求Servlet Request对象</h3><p>使用监听器获取用户的访问信息比较简单，实现 ServletRequestListener 接口即可，然后通过 request 对象获取一些信息。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用ServletRequestListener获取访问信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletRequestListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyServletRequestListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line">        logger.info(<span class="string">"session id为：&#123;&#125;"</span>, request.getRequestedSessionId());</span><br><span class="line">        logger.info(<span class="string">"request url为：&#123;&#125;"</span>, request.getRequestURL());</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">"name"</span>, <span class="string">"倪升武"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"request end"</span>);</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequestEvent.getServletRequest();</span><br><span class="line">        logger.info(<span class="string">"request域中保存的name值为：&#123;&#125;"</span>, request.getAttribute(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个比较简单，不再赘述，接下来写一个 Controller 测试一下即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/request"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRequestInfo</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"requestListener中的初始化的name数据："</span> + request.getAttribute(<span class="string">"name"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Spring-Boot中自定义事件监听">3. Spring Boot中自定义事件监听</h2><p>在实际项目中，我们往往需要自定义一些事件和监听器来满足业务场景，比如在微服务中会有这样的场景：微服务 A 在处理完某个逻辑之后，需要通知微服务 B 去处理另一个逻辑，或者微服务 A 处理完某个逻辑之后，需要将数据同步到微服务 B，这种场景非常普遍，这个时候，我们可以自定义事件以及监听器来监听，一旦监听到微服务 A 中的某事件发生，就去通知微服务 B 处理对应的逻辑。</p><h3 id="3-1-自定义事件">3.1 自定义事件</h3><p>自定义事件需要继承 ApplicationEvent 对象，在事件中定义一个 User 对象来模拟数据，构造方法中将 User 对象传进来初始化。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source, User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省去get、set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-自定义监听器">3.2 自定义监听器</h3><p>接下来，自定义一个监听器来监听上面定义的 MyEvent 事件，自定义监听器需要实现 <code>ApplicationListener</code> 接口即可。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义监听器，监听MyEvent事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent myEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 把事件中的信息获取到</span></span><br><span class="line">        User user = myEvent.getUser();</span><br><span class="line">        <span class="comment">// 处理事件，实际项目中可以通知别的微服务或者处理其他逻辑等等</span></span><br><span class="line">        System.out.println(<span class="string">"用户名："</span> + user.getUsername());</span><br><span class="line">        System.out.println(<span class="string">"密码："</span> + user.getPassword());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重写 <code>onApplicationEvent</code> 方法，将自定义的 MyEvent 事件传进来，因为该事件中，我们定义了 User 对象（该对象在实际中就是需要处理的数据，在下文来模拟），然后就可以使用该对象的信息了。</p><p>OK，定义好了事件和监听器之后，需要手动发布事件，这样监听器才能监听到，这需要根据实际业务场景来触发，针对本文的例子，我写个触发逻辑，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        MyEvent event = <span class="keyword">new</span> MyEvent(<span class="keyword">this</span>, user);</span><br><span class="line">        applicationContext.publishEvent(event);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 service 中注入 ApplicationContext，在业务代码处理完之后，通过 ApplicationContext 对象手动发布 MyEvent 事件，这样我们自定义的监听器就能监听到，然后处理监听器中写好的业务逻辑。</p><p>最后，在 Controller 中写一个接口来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/request"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRequestInfo</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"requestListener中的初始化的name数据："</span> + request.getAttribute(<span class="string">"name"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中输入 <code>http://localhost:8080/listener/publish</code>，然后观察一下控制台打印的用户名和密码，即可说明自定义监听器已经生效。</p><h2 id="4-总结-v6">4. 总结</h2><p>本课系统的介绍了监听器原理，以及在 Spring Boot 中如何使用监听器，列举了监听器的三个常用的案例，有很好的实战意义。最后讲解了项目中如何自定义事件和监听器，并结合微服务中常见的场景，给出具体的代码模型，均能运用到实际项目中去，希望读者认真消化。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第13课：Spring Boot中使用拦截器</h1><p>拦截器的原理很简单，是 AOP 的一种实现，专门拦截对动态资源的后台请求，即拦截对控制层的请求。使用场景比较多的是判断用户是否有权限请求后台，更拔高一层的使用场景也有，比如拦截器可以结合 websocket 一起使用，用来拦截 websocket 请求，然后做相应的处理等等。拦截器不会拦截静态资源，Spring Boot 的默认静态目录为 resources/static，该目录下的静态页面、js、css、图片等等，不会被拦截（也要看如何实现，有些情况也会拦截，我在下文会指出）。</p><h2 id="1-拦截器的快速使用">1. 拦截器的快速使用</h2><p>使用拦截器很简单，只需要两步即可：定义拦截器和配置拦截器。在配置拦截器中，Spring Boot 2.0 以后的版本和之前的版本有所不同，我会重点讲解一下这里可能出现的坑。</p><h3 id="1-1-定义拦截器">1.1 定义拦截器</h3><p>定义拦截器，只需要实现 <code>HandlerInterceptor</code> 接口，<code>HandlerInterceptor</code> 接口是所有自定义拦截器或者 Spring Boot 提供的拦截器的鼻祖，所以，首先来了解下该接口。该接口中有三个方法： <code>preHandle(……)</code>、<code>postHandle(……)</code> 和 <code>afterCompletion(……)</code> 。</p><blockquote><p><code>preHandle(……)</code> 方法：该方法的执行时机是，当某个 url 已经匹配到对应的 Controller 中的某个方法，且在这个方法执行之前。所以 <code>preHandle(……)</code> 方法可以决定是否将请求放行，这是通过返回值来决定的，返回 true 则放行，返回 false 则不会向后执行。<br><code>postHandle(……)</code> 方法：该方法的执行时机是，当某个 url 已经匹配到对应的 Controller 中的某个方法，且在执行完了该方法，但是在 DispatcherServlet 视图渲染之前。所以在这个方法中有个 ModelAndView 参数，可以在此做一些修改动作。<br><code>afterCompletion(……)</code> 方法：顾名思义，该方法是在整个请求处理完成后（包括视图渲染）执行，这时做一些资源的清理工作，这个方法只有在 <code>preHandle(……)</code> 被成功执行后并且返回 true 才会被执行。</p></blockquote><p>了解了该接口，接下来自定义一个拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/08/03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        Method method = handlerMethod.getMethod();</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        logger.info(<span class="string">"====拦截到了方法：&#123;&#125;，在该方法执行之前执行===="</span>, methodName);</span><br><span class="line">        <span class="comment">// 返回true才会继续执行，返回false则取消当前请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，到此为止，拦截器已经定义完成，接下来就是对该拦截器进行拦截配置。</p><h3 id="1-2-配置拦截器">1.2 配置拦截器</h3><p>在 Spring Boot 2.0 之前，我们都是直接继承 WebMvcConfigurerAdapter 类，然后重写 <code>addInterceptors</code> 方法来实现拦截器的配置。但是在 Spring Boot 2.0 之后，该方法已经被废弃了（当然，也可以继续用），取而代之的是 WebMvcConfigurationSupport 方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该配置中重写 <code>addInterceptors</code> 方法，将我们上面自定义的拦截器添加进去，<code>addPathPatterns</code> 方法是添加要拦截的请求，这里我们拦截所有的请求。这样就配置好拦截器了，接下来写一个 Controller 测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/interceptor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让其跳转到 hello.html 页面，直接在 hello.html 中输出 <code>hello interceptor</code> 即可。启动项目，在浏览器中输入 <code>localhost:8080/interceptor/test</code> 看一下控制台的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;拦截到了方法：test，在该方法执行之前执行&#x3D;&#x3D;&#x3D;&#x3D;  </span><br><span class="line">执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染  </span><br><span class="line">整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了</span><br></pre></td></tr></table></figure><p>可以看出拦截器已经生效，并能看出其执行顺序。</p><h3 id="1-3-解决静态资源被拦截问题">1.3 解决静态资源被拦截问题</h3><p>上文中已经介绍了拦截器的定义和配置，但是这样是否就没问题了呢？其实不然，如果使用上面这种配置的话，我们会发现一个缺陷，那就是静态资源被拦截了。可以在 resources/static/ 目录下放置一个图片资源或者 html 文件，然后启动项目直接访问，即可看到无法访问的现象。</p><p>也就是说，虽然 Spring Boot 2.0 废弃了WebMvcConfigurerAdapter，但是 WebMvcConfigurationSupport 又会导致默认的静态资源被拦截，这就需要我们手动将静态资源放开。</p><p>如何放开呢？除了在 MyInterceptorConfig 配置类中重写 <code>addInterceptors</code> 方法外，还需要再重写一个方法：<code>addResourceHandlers</code>，将静态资源放开：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来指定静态资源不被拦截，否则继承WebMvcConfigurationSupport这种方式会导致静态资源无法直接访问</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/static/"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置好之后，重启项目，静态资源也可以正常访问了。如果你是个善于学习或者研究的人，那肯定不会止步于此，没错，上面这种方式的确能解决静态资源无法访问的问题，但是，还有更方便的方式来配置。</p><p>我们不继承 WebMvcConfigurationSupport 类，直接实现 WebMvcConfigurer 接口，然后重写 <code>addInterceptors</code> 方法，将自定义的拦截器添加进去即可，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现WebMvcConfigurer不会导致静态资源被拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就非常方便了，实现 WebMvcConfigure 接口的话，不会拦截 Spring Boot 默认的静态资源。</p><p>这两种方式都可以，具体他们之间的细节，感兴趣的读者可以做进一步的研究，由于这两种方式的不同，继承 WebMvcConfigurationSupport 类的方式可以用在前后端分离的项目中，后台不需要访问静态资源（就不需要放开静态资源了）；实现 WebMvcConfigure 接口的方式可以用在非前后端分离的项目中，因为需要读取一些图片、css、js文件等等。</p><h2 id="2-拦截器使用实例">2. 拦截器使用实例</h2><h3 id="2-1-判断用户有没有登录">2.1 判断用户有没有登录</h3><p>一般用户登录功能我们可以这么做，要么往 session 中写一个 user，要么针对每个 user 生成一个 token，第二种要更好一点，那么针对第二种方式，如果用户登录成功了，每次请求的时候都会带上该用户的 token，如果未登录，则没有该 token，服务端可以检测这个 token 参数的有无来判断用户有没有登录，从而实现拦截功能。我们改造一下 <code>preHandle</code> 方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">    Method method = handlerMethod.getMethod();</span><br><span class="line">    String methodName = method.getName();</span><br><span class="line">    logger.info(<span class="string">"====拦截到了方法：&#123;&#125;，在该方法执行之前执行===="</span>, methodName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断用户有没有登陆，一般登陆之后的用户都有一个对应的token</span></span><br><span class="line">    String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == token || <span class="string">""</span>.equals(token)) &#123;</span><br><span class="line">        logger.info(<span class="string">"用户未登录，没有权限执行……请登录"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回true才会继续执行，返回false则取消当前请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，在浏览器中输入 <code>localhost:8080/interceptor/test</code> 后查看控制台日志，发现被拦截，如果在浏览器中输入 <code>localhost:8080/interceptor/test?token=123</code> 即可正常往下走。</p><h3 id="2-2-取消拦截操作">2.2 取消拦截操作</h3><p>根据上文，如果我要拦截所有 <code>/admin</code> 开头的 url 请求的话，需要在拦截器配置中添加这个前缀，但是在实际项目中，可能会有这种场景出现：某个请求也是 <code>/admin</code> 开头的，但是不能拦截，比如 <code>/admin/login</code> 等等，这样的话又需要去配置。那么，可不可以做成一个类似于开关的东西，哪里不需要拦截，我就在哪里弄个开关上去，做成这种灵活的可插拔的效果呢？</p><p>是可以的，我们可以定义一个注解，该注解专门用来取消拦截操作，如果某个 Controller 中的方法我们不需要拦截掉，即可在该方法上加上我们自定义的注解即可，下面先定义一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该注解用来指定某个方法不用拦截</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UnInterception &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 Controller 中的某个方法上添加该注解，在拦截器处理方法中添加该注解取消拦截的逻辑，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">    Method method = handlerMethod.getMethod();</span><br><span class="line">    String methodName = method.getName();</span><br><span class="line">    logger.info(<span class="string">"====拦截到了方法：&#123;&#125;，在该方法执行之前执行===="</span>, methodName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过方法，可以获取该方法上的自定义注解，然后通过注解来判断该方法是否要被拦截</span></span><br><span class="line">    <span class="comment">// @UnInterception 是我们自定义的注解</span></span><br><span class="line">    UnInterception unInterception = method.getAnnotation(UnInterception<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != unInterception) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回true才会继续执行，返回false则取消当前请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller 中的方法代码可以参见源码，重启项目在浏览器中输入 <code>http://localhost:8080/interceptor/test2?token=123</code> 测试一下，可以看出，加了该注解的方法不会被拦截。</p><h2 id="3-总结-v2">3. 总结</h2><p>本节主要介绍了 Spring Boot 中拦截器的使用，从拦截器的创建、配置，到拦截器对静态资源的影响，都做了详细的分析。Spring Boot 2.0 之后拦截器的配置支持两种方式，可以根据实际情况选择不同的配置方式。最后结合实际中的使用，举了两个常用的场景，希望读者能够认真消化，掌握拦截器的使用。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第14课：Spring Boot 中集成Redis</h1><h2 id="1-Redis-介绍">1. Redis 介绍</h2><p>Redis 是一种非关系型数据库（NoSQL），NoSQL 是以 key-value 的形式存储的，和传统的关系型数据库不一样，不一定遵循传统数据库的一些基本要求，比如说 SQL 标准，ACID 属性，表结构等等，这类数据库主要有以下特点：非关系型的、分布式的、开源的、水平可扩展的。<br>NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。<br>Redis 的 key 可以是字符串、哈希、链表、集合和有序集合。value 类型很多，包括 String、list、set、zset。这些数据类型都支持 push/pop、add/remove、取交集和并集以及更多更丰富的操作，Redis 也支持各种不同方式的排序。为了保证效率，数据都是在缓存在内存中，它也可以周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中。 有了 redis 有哪些好处呢？举个比较简单的例子，看下图：</p><p><img src="http://qnypic.shawncoding.top/blog/645eb739c12750e716bbb2284e5c06a0.jpeg" alt="Redis使用场景"></p><p>Redis 集群和 Mysql 是同步的，首先会从 redis 中获取数据，如果 redis 挂了，再从 mysql 中获取数据，这样网站就不会挂掉。更多关于 redis 的介绍以及使用场景，可以谷歌和百度，在这就不赘述了。</p><h2 id="2-Redis-安装">2. Redis 安装</h2><p>本课程是在 vmvare 虚拟机中来安装的 redis （centos 7），学习的时候如果有自己的阿里云服务器，也可以在阿里云中来安装 redis，都可以。只要能 ping 的通云主机或者虚拟机的 ip，然后在虚拟机或者云主机中放行对应的端口（或者关掉防火墙）即可访问 redis。下面来介绍一下 redis 的安装过程：</p><ul><li>安装 gcc 编译</li></ul><p>因为后面安装redis的时候需要编译，所以事先得先安装gcc编译。阿里云主机已经默认安装了 gcc，如果是自己安装的虚拟机，那么需要先安装一下 gcc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><ul><li>下载 redis</li></ul><p>有两种方式下载安装包，一种是去官网上下载（<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a>），然后将安装包考到 centos 中，另种方法是直接使用 wget 来下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.2.8.tar.gz</span><br></pre></td></tr></table></figure><p>如果没有安装过 wget，可以通过如下命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><ul><li>解压安装</li></ul><p>解压安装包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar –vzxf redis-3.2.8.tar.gz</span><br></pre></td></tr></table></figure><p>然后将解压的文件夹 redis-3.2.8 放到 <code>/usr/local/</code> 下，一般安装软件都放在 <code>/usr/local</code> 下。然后进入 <code>/usr/local/redis-3.2.8/</code> 文件夹下，执行 <code>make</code> 命令即可完成安装。<br>【注】如果 make 失败，可以尝试如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make MALLOC&#x3D;libc</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><p>安装成功之后，需要修改一下配置文件，包括允许接入的 ip，允许后台执行，设置密码等等。<br>打开 redis 配置文件：<code>vi redis.conf</code><br>在命令模式下输入 <code>/bind</code> 来查找 bind 配置，按 n 来查找下一个，找到配置后，将 bind 配置成 0.0.0.0，允许任意服务器来访问 redis，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 0.0.0.0</span><br></pre></td></tr></table></figure><p>使用同样的方法，将 daemonize 改成 yes （默认为 no），允许 redis 在后台执行。<br>将 requirepass 注释打开，并设置密码为 123456（密码自己设置）。</p><ul><li>启动 redis</li></ul><p>在 redis-3.2.8 目录下，指定刚刚修改好的配置文件 redis.conf 来启动 redis：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server .&#x2F;redis.conf</span><br></pre></td></tr></table></figure><p>再启动 redis 客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>由于我们设置了密码，在启动客户端之后，输入 <code>auth 123456</code> 即可登录进入客户端。<br>然后我们来测试一下，往 redis 中插入一个数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set name CSDN</span><br></pre></td></tr></table></figure><p>然后来获取 name</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get name</span><br></pre></td></tr></table></figure><p>如果正常获取到 CSDN，则说明没有问题。</p><h2 id="3-Spring-Boot-集成-Redis">3. Spring Boot 集成 Redis</h2><h3 id="3-1-依赖导入">3.1 依赖导入</h3><p>Spring Boot 集成 redis 很方便，只需要导入一个 redis 的 starter 依赖即可。如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--阿里巴巴fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里也导入阿里巴巴的 fastjson 是为了在后面我们要存一个实体，为了方便把实体转换成 json 字符串存进去。</p><h3 id="3-2-Redis-配置">3.2 Redis 配置</h3><p>导入了依赖之后，我们在 application.yml 文件里配置 redis：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#redis相关配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># 配置redis的主机地址，需要修改成自己的</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.48</span><span class="number">.190</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接，默认值也是8。</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">500</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接，默认值也是0。</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">50</span></span><br><span class="line">        <span class="comment"># 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">1000</span></span><br><span class="line">        <span class="comment"># 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><h3 id="3-3-常用-api-介绍">3.3 常用 api 介绍</h3><p>Spring Boot 对 redis 的支持已经非常完善了，丰富的 api 已经足够我们日常的开发，这里我介绍几个最常用的供大家学习，其他 api 希望大家自己多学习，多研究。用到会去查即可。</p><p>有两个 redis 模板：RedisTemplate 和 StringRedisTemplate。我们不使用 RedisTemplate，RedisTemplate 提供给我们操作对象，操作对象的时候，我们通常是以 json 格式存储，但在存储的时候，会使用 Redis 默认的内部序列化器；导致我们存进里面的是乱码之类的东西。当然了，我们可以自己定义序列化，但是比较麻烦，所以使用 StringRedisTemplate 模板。StringRedisTemplate 主要给我们提供字符串操作，我们可以将实体类等转成 json 字符串即可，在取出来后，也可以转成相应的对象，这就是上面我导入了阿里 fastjson 的原因。</p><h4 id="3-3-1-redis-string-类型">3.3.1 redis:string 类型</h4><p>新建一个 RedisService，注入 StringRedisTemplate，使用 <code>stringRedisTemplate.opsForValue()</code> 可以获取 <code>ValueOperations&lt;String, String&gt;</code> 对象，通过该对象即可读写 redis 数据库了。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set redis: string类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String key, String value)</span></span>&#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; valueOperations = stringRedisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get redis: string类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该对象操作的是 string，我们也可以存实体类，只需要将实体类转换成 json 字符串即可。下面来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Course14ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Course14ApplicationTests<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试redis的string类型</span></span><br><span class="line">        redisService.setString(<span class="string">"weichat"</span>,<span class="string">"程序员私房菜"</span>);</span><br><span class="line">        logger.info(<span class="string">"我的微信公众号为：&#123;&#125;"</span>, redisService.getString(<span class="string">"weichat"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是个实体，我们可以使用json工具转成json字符串，</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"CSDN"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        redisService.setString(<span class="string">"userInfo"</span>, JSON.toJSONString(user));</span><br><span class="line">        logger.info(<span class="string">"用户信息：&#123;&#125;"</span>, redisService.getString(<span class="string">"userInfo"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先启动 redis，然后运行这个测试用例，观察控制台打印的日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我的微信公众号为：程序员私房菜</span><br><span class="line">用户信息：&#123;&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;CSDN&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-redis-hash-类型">3.3.2 redis:hash 类型</h4><p>hash 类型其实原理和 string 一样的，但是有两个 key，使用 <code>stringRedisTemplate.opsForHash()</code> 可以获取 <code>HashOperations&lt;String, Object, Object&gt;</code> 对象。比如我们要存储订单信息，所有订单信息都放在 order 下，针对不同用户的订单实体，可以通过用户的 id 来区分，这就相当于两个 key 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set redis: hash类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filedKey filedkey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHash</span><span class="params">(String key, String filedKey, String value)</span></span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; hashOperations = stringRedisTemplate.opsForHash();</span><br><span class="line">        hashOperations.put(key,filedKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get redis: hash类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filedkey filedkey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHash</span><span class="params">(String key, String filedkey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) stringRedisTemplate.opsForHash().get(key, filedkey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，hash 和 string 没啥两样，只不过多了个参数，Spring Boot 中操作 redis 非常简单方便。来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course14ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Course14ApplicationTests<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试redis的hash类型</span></span><br><span class="line">        redisService.setHash(<span class="string">"user"</span>, <span class="string">"name"</span>, JSON.toJSONString(user));</span><br><span class="line">        logger.info(<span class="string">"用户姓名：&#123;&#125;"</span>, redisService.getHash(<span class="string">"user"</span>,<span class="string">"name"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-redis-list-类型">3.3.3 redis:list 类型</h4><p>使用 <code>stringRedisTemplate.opsForList()</code> 可以获取 <code>ListOperations&lt;String, String&gt; listOperations</code>  redis 列表对象，该列表是个简单的字符串列表，可以支持从左侧添加，也可以支持从右侧添加，一个列表最多包含 2 ^ 32 -1 个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set redis:list类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setList</span><span class="params">(String key, String value)</span></span>&#123;</span><br><span class="line">        ListOperations&lt;String, String&gt; listOperations = stringRedisTemplate.opsForList();</span><br><span class="line">        <span class="keyword">return</span> listOperations.leftPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get redis:list类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，这些 api 都是一样的形式，方便记忆也方便使用。具体的 api 细节我就不展开了，大家可以自己看 api 文档。其实，这些 api 根据参数和返回值也能知道它们是做什么用的。来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Course14ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Course14ApplicationTests<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试redis的list类型</span></span><br><span class="line">        redisService.setList(<span class="string">"list"</span>, <span class="string">"football"</span>);</span><br><span class="line">        redisService.setList(<span class="string">"list"</span>, <span class="string">"basketball"</span>);</span><br><span class="line">        List&lt;String&gt; valList = redisService.getList(<span class="string">"list"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(String value :valList)&#123;</span><br><span class="line">            logger.info(<span class="string">"list中有：&#123;&#125;"</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-总结-v7">4. 总结</h2><p>本节主要介绍了 redis 的使用场景、安装过程，以及 Spring Boot 中集成 redis 的详细步骤。在实际项目中，通常都用 redis 作为缓存，在查询数据库的时候，会先从 redis 中查找，如果有信息，则从 redis 中取；如果没有，则从数据库中查，并且同步到 redis 中，下次 redis 中就有了。更新和删除也是如此，都需要同步到 redis。redis 在高并发场景下运用的很多。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第15课： Spring Boot中集成ActiveMQ</h1><h2 id="1-JMS-和-ActiveMQ-介绍">1. JMS 和 ActiveMQ 介绍</h2><h3 id="1-1-JMS-是啥">1.1 JMS 是啥</h3><p>百度百科的解释：</p><blockquote><p>JMS 即 Java 消息服务（Java Message Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的 API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java 消息服务是一个与具体平台无关的 API，绝大多数 MOM 提供商都对 JMS 提供支持。</p></blockquote><p>JMS 只是接口，不同的提供商或者开源组织对其有不同的实现，ActiveMQ 就是其中之一，它支持JMS，是 Apache 推出的。JMS 中有几个对象模型：</p><blockquote><p>连接工厂：ConnectionFactory<br>JMS连接：Connection<br>JMS会话：Session<br>JMS目的：Destination<br>JMS生产者：Producer<br>JMS消费者：Consumer<br>JMS消息两种类型：点对点和发布/订阅。</p></blockquote><p>可以看出 JMS 实际上和 JDBC 有点类似，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。本文主要使用 ActiveMQ。</p><h3 id="1-2-ActiveMQ">1.2 ActiveMQ</h3><p>ActiveMQ 是 Apache 的一个能力强劲的开源消息总线。ActiveMQ 完全支持JMS1.1和J2EE 1.4规范，尽管 JMS 规范出台已经是很久的事情了，但是 JMS 在当今的 Java EE 应用中间仍然扮演着特殊的地位。ActiveMQ 用在异步消息的处理上，所谓异步消息即消息发送者无需等待消息接收者的处理以及返回，甚至无需关心消息是否发送成功。</p><p>异步消息主要有两种目的地形式，队列（queue）和主题（topic），队列用于点对点形式的消息通信，主题用于发布/订阅式的消息通信。本章节主要来学习一下在 Spring Boot 中如何使用这两种形式的消息。</p><h2 id="2-ActiveMQ安装">2. ActiveMQ安装</h2><p>使用 ActiveMQ 首先需要去官网下载，官网地址为：<a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a><br>本课程使用的版本是 apache-activemq-5.15.3，下载后解压缩会有一个名为 apache-activemq-5.15.3 的文件夹，没错，这就安装好了，非常简单，开箱即用。打开文件夹会看到里面有个 <code>activemq-all-5.15.3.jar</code>，这个 jar 我们是可以加进工程里的，但是使用 maven 的话，这个 jar 我们不需要。</p><p>在使用 ActiveMQ 之前，首先得先启动，刚才解压后的目录中有个 bin 目录，里面有 win32 和 win64 两个目录，根据自己电脑选择其中一个打开运行里面的 activemq.bat 即可启动 ActiveMQ。<br>消息生产者生产消息发布到queue中，然后消息消费者从queue中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue中不再有存储，所以消息消费者不可消费到已经被消费的消息。Queue支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费<br>启动完成后，在浏览器中输入 <code>http://127.0.0.1:8161/admin/</code> 来访问 ActiveMQ 的服务器，用户名和密码是 admin/admin。如下：</p><p><img src="http://qnypic.shawncoding.top/blog/33e0cacd2ab6801400123d2955c0934c.jpeg" alt="activemq"></p><p>我们可以看到有 Queues 和 Topics 这两个选项，这两个选项分别是点对点消息和发布/订阅消息的查看窗口。何为点对点消息和发布/订阅消息呢？</p><p>点对点消息：消息生产者生产消息发布到 queue 中，然后消息消费者从 queue 中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue 中不再有存储，所以消息消费者不可消费到已经被消费的消息。Queue 支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p>发布/订阅消息：消息生产者（发布）将消息发布到 topic 中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到 topic 的消息会被所有订阅者消费。下面分析具体的实现方式。</p><h2 id="3-ActiveMQ集成">3. ActiveMQ集成</h2><h3 id="3-1-依赖导入和配置">3.1 依赖导入和配置</h3><p>在 Spring Boot 中集成 ActiveMQ 需要导入如下 starter 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 application.yml 配置文件中，对 activemq 做一下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">  <span class="comment"># activemq url</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br><span class="line">    <span class="attr">in-memory:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="comment"># 如果此处设置为true，需要添加activemq-pool的依赖包，否则会自动配置失败，无法注入JmsMessagingTemplate</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Queue-和-Topic-的创建">3.2 Queue 和 Topic 的创建</h3><p>首先我们需要创建两种消息 Queue 和 Topic，这两种消息的创建，我们放到 ActiveMqConfig 中来创建，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * activemq的配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布/订阅模式队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME = <span class="string">"activemq.topic"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点对点模式队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"activemq.queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQTopic(TOPIC_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出创建 Queue 和 Topic 两种消息，分别使用 <code>new ActiveMQQueue</code> 和 <code>new ActiveMQTopic</code> 来创建，分别跟上对应消息的名称即可。这样在其他地方就可以直接将这两种消息作为组件注入进来了。</p><h3 id="3-3-消息的发送接口">3.3 消息的发送接口</h3><p>在 Spring Boot 中，我们只要注入 JmsMessagingTemplate 模板即可快速发送消息，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息发送者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Destination destination, String msg)</span> </span>&#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(destination, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>convertAndSend</code> 方法中第一个参数是消息发送的目的地，第二个参数是具体的消息内容。</p><h3 id="3-4-点对点消息生产与消费">3.4 点对点消息生产与消费</h3><h4 id="3-4-1-点对点消息的生产">3.4.1 点对点消息的生产</h4><p>消息的生产，我们放到 Controller 中来做，由于上面已经生成了 Queue 消息的组件，所以在 Controller 中我们直接注入进来即可。然后调用上文的消息发送方法 <code>sendMessage</code> 即可成功生产一条消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveMQ controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/activemq"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ActiveMqController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MsgProducer producer;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Destination queue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/send/queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendQueueMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"===开始发送点对点消息==="</span>);</span><br><span class="line">        producer.sendMessage(queue, <span class="string">"Queue: hello activemq!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-2-点对点消息的消费">3.4.2 点对点消息的消费</h4><p>点对点消息的消费很简单，只要我们指定目的地即可，jms 监听器一直在监听是否有消息过来，如果有，则消费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收点对点消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = ActiveMqConfig.QUEUE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQueueMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到的消息为："</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，使用 <code>@JmsListener</code> 注解来指定要监听的目的地，在消息接收方法内部，我们可以根据具体的业务需求做相应的逻辑处理即可。</p><h4 id="3-4-3-测试一下">3.4.3 测试一下</h4><p>启动项目，在浏览器中输入：<code>http://localhost:8081/activemq/send/queue</code>，观察控制台的输出日志，出现下面的日志说明消息发送和消费成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">收到的消息为：Queue: hello activemq!</span><br></pre></td></tr></table></figure><h3 id="3-5-发布-订阅消息的生产和消费">3.5 发布/订阅消息的生产和消费</h3><h4 id="3-5-1-发布-订阅消息的生产">3.5.1 发布/订阅消息的生产</h4><p>和点对点消息一样，我们注入 topic 并调用 producer 的 <code>sendMessage</code> 方法即可发送订阅消息，如下，不再赘述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/activemq"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ActiveMqController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MsgProducer producer;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Destination topic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/send/topic"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendTopicMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"===开始发送订阅消息==="</span>);</span><br><span class="line">        producer.sendMessage(topic, <span class="string">"Topic: hello activemq!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-2-发布-订阅消息的消费">3.5.2 发布/订阅消息的消费</h4><p>发布/订阅消息的消费和点对点不同，订阅消息支持多个消费者一起消费。其次，Spring Boot 中默认的时点对点消息，所以在使用 topic 时，会不起作用，我们需要在配置文件 application.yml 中添加一个配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>该配置是 false 的话，则为点对点消息，也是 Spring Boot 默认的。这样是可以解决问题，但是如果这样配置的话，上面提到的点对点消息又不能正常消费了。所以二者不可兼得，这并非一个好的解决办法。</p><p>比较好的解决办法是，我们定义一个工厂，<code>@JmsListener</code> 注解默认只接收 queue 消息，如果要接收 topic 消息，需要设置一下 containerFactory。我们还在上面的那个 ActiveMqConfig 配置类中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * activemq的配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JmsListener注解默认只接收queue消息,如果要接收topic消息,需要设置containerFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JmsListenerContainerFactory <span class="title">topicListenerContainer</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        DefaultJmsListenerContainerFactory factory = <span class="keyword">new</span> DefaultJmsListenerContainerFactory();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 相当于在application.yml中配置：spring.jms.pub-sub-domain=true</span></span><br><span class="line">        factory.setPubSubDomain(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过这样的配置之后，我们在消费的时候，在 <code>@JmsListener</code> 注解中指定这个容器工厂即可消费 topic 消息。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Topic消息消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConsumer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收订阅消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = ActiveMqConfig.TOPIC_NAME, containerFactory = <span class="string">"topicListenerContainer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopicMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到的消息为："</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定 containerFactory 属性为上面我们自己配置的 topicListenerContainer 即可。由于 topic 消息可以多个消费，所以该消费的类可以拷贝几个一起测试一下，这里我就不贴代码了，可以参考我的源码测试。</p><h4 id="3-5-3-测试一下">3.5.3 测试一下</h4><p>启动项目，在浏览器中输入：<code>http://localhost:8081/activemq/send/topic</code>，观察控制台的输出日志，出现下面的日志说明消息发送和消费成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">收到的消息为：Topic: hello activemq!</span><br><span class="line">收到的消息为：Topic: hello activemq!</span><br></pre></td></tr></table></figure><h2 id="4-总结-v8">4. 总结</h2><p>本章主要介绍了 jms 和 activemq 的相关概念、activemq 的安装与启动。详细分析了 Spring Boot 中点对点消息和发布/订阅消息两种方式的配置、消息生产和消费方式。ActiveMQ 是能力强劲的开源消息总线，在异步消息的处理上很有用，希望大家好好消化一下。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第16课：Spring Boot中集成 Shiro</h1><p>Shiro 是一个强大、简单易用的 Java 安全框架，主要用来更便捷的认证，授权，加密，会话管等等，可为任何应用提供安全保障。本课程主要来介绍 Shiro 的认证和授权功能。</p><h2 id="1-Shiro-三大核心组件">1. Shiro 三大核心组件</h2><p>Shiro 有三大核心的组件：<code>Subject</code>、<code>SecurityManager</code> 和 <code>Realm</code>。先来看一下它们之间的关系。</p><p><img src="http://qnypic.shawncoding.top/blog/c1dfca09232b37d35c2ef52d765b47f9.jpeg" alt="三大核心组件的关系"></p><ol><li>Subject：认证主体。它包含两个信息：Principals 和 Credentials。看一下这两个信息具体是什么。</li></ol><blockquote><p>Principals：身份。可以是用户名，邮件，手机号码等等，用来标识一个登录主体身份；<br>Credentials：凭证。常见有密码，数字证书等等。</p></blockquote><p>说白了，就是需要认证的东西，最常见的就是用户名密码了，比如用户在登录的时候，Shiro 需要去进行身份认证，就需要 Subject 认证主体。</p><ol start="2"><li><p>SecurityManager：安全管理员。这是 Shiro 架构的核心，它就像 Shiro 内部所有原件的保护伞一样。我们在项目中一般都会配置 SecurityManager，开发人员大部分精力主要是在 Subject 认证主体上面。我们在与 Subject 进行交互的时候，实际上是 SecurityManager 在背后做一些安全操作。</p></li><li><p>Realms：Realms 是一个域，它是连接 Shiro 和具体应用的桥梁，当需要与安全数据交互的时候，比如用户账户、访问控制等，Shiro 就会从一个或多个 Realms 中去查找。我们一般会自己定制 Realm，这在下文会详细说明。</p></li></ol><h2 id="1-Shiro-身份和权限认证">1. Shiro 身份和权限认证</h2><h3 id="1-2-Shiro-身份认证">1.2 Shiro 身份认证</h3><p>我们来分析一下 Shiro 身份认证的过程，看一下官方的一个认证图：</p><p><img src="http://qnypic.shawncoding.top/blog/7658e202f5f035bb3436a1f35e058e60.jpeg" alt="认证过程"></p><p>Step1：应用程序代码在调用 <code>Subject.login(token)</code> 方法后，传入代表最终用户的身份和凭证的 AuthenticationToken 实例 token。</p><p>Step2：将 Subject 实例委托给应用程序的 SecurityManager（Shiro的安全管理）来开始实际的认证工作。这里开始真正的认证工作了。</p><p>Step3，4，5：然后 SecurityManager 就会根据具体的 realm 去进行安全认证了。 从图中可以看出，realm 可以自定义（Custom Realm）。</p><h3 id="1-3-Shiro-权限认证">1.3 Shiro 权限认证</h3><p>权限认证，也就是访问控制，即在应用中控制谁能访问哪些资源。在权限认证中，最核心的三个要素是：权限，角色和用户。</p><blockquote><p>权限（permission）：即操作资源的权利，比如访问某个页面，以及对某个模块的数据的添加，修改，删除，查看的权利；<br>角色（role）：指的是用户担任的的角色，一个角色可以有多个权限；<br>用户（user）：在 Shiro 中，代表访问系统的用户，即上面提到的 Subject 认证主体。</p></blockquote><p>它们之间的的关系可以用下图来表示：</p><p><img src="http://qnypic.shawncoding.top/blog/8fcdf9be7e8b4df5df09b7c4b6aedfce.jpeg" alt="用户、角色和权限的关系"></p><p>一个用户可以有多个角色，而不同的角色可以有不同的权限，也可由有相同的权限。比如说现在有三个角色，1是普通角色，2也是普通角色，3是管理员，角色1只能查看信息，角色2只能添加信息，管理员都可以，而且还可以删除信息，类似于这样。</p><h2 id="2-Spring-Boot-集成-Shiro-过程">2. Spring Boot 集成 Shiro 过程</h2><h3 id="2-1-依赖导入-v3">2.1 依赖导入</h3><p>Spring Boot 2.0.3 集成 Shiro 需要导入如下 starter 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-数据库表数据初始化">2.2 数据库表数据初始化</h3><p>这里主要涉及到三张表：用户表、角色表和权限表，其实在 demo 中，我们完全可以自己模拟一下，不用建表，但是为了更加接近实际情况，我们还是加入 mybatis，来操作数据库。下面是数据库表的脚本。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`rolename`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色名称'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户主键'</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'外键关联role表'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`role_id`</span> (<span class="string">`role_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`t_user_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`role_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_permission`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`permissionname`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'权限名'</span>,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'外键关联role'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`role_id`</span> (<span class="string">`role_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`t_permission_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`role_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>其中，t_user，t_role 和 t_permission，分别存储用户信息，角色信息和权限信息，表建立好了之后，我们往表里插入一些测试数据。<br>t_user 表：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">username</th><th style="text-align:center">password</th><th style="text-align:center">role_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">csdn1</td><td style="text-align:center">123456</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">csdn2</td><td style="text-align:center">123456</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">csdn3</td><td style="text-align:center">123456</td><td style="text-align:center">3</td></tr></tbody></table><p>t_role 表：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">rolename</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">admin</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">teacher</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">student</td></tr></tbody></table><p>t_permission 表：</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">permissionname</th><th style="text-align:center">role_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center"><code>user:*</code></td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center"><code>student:*</code></td><td style="text-align:center">2</td></tr></tbody></table><p>解释一下这里的权限：<code>user:*</code>表示权限可以是 <code>user:create</code> 或者其他，<code>*</code> 处表示一个占位符，我们可以自己定义，具体的会在下文 Shiro 配置那里说明。</p><h3 id="2-2-自定义-Realm">2.2 自定义 Realm</h3><p>有了数据库表和数据之后，我们开始自定义 realm，自定义 realm 需要继承 AuthorizingRealm 类，因为该类封装了很多方法，它也是一步步继承自 Realm 类的，继承了 AuthorizingRealm 类后，需要重写两个方法：</p><blockquote><p><code>doGetAuthenticationInfo()</code> 方法：用来验证当前登录的用户，获取认证信息<br><code>doGetAuthorizationInfo()</code> 方法：用来为当前登陆成功的用户授予权限和角色</p></blockquote><p>具体实现如下，相关的解释我放在代码的注释中，这样更加方便直观：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义realm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取用户名</span></span><br><span class="line">        String username = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">// 给该用户设置角色，角色信息存在t_role表中取</span></span><br><span class="line">        authorizationInfo.setRoles(userService.getRoles(username));</span><br><span class="line">        <span class="comment">// 给该用户设置权限，权限信息存在t_permission表中取</span></span><br><span class="line">        authorizationInfo.setStringPermissions(userService.getPermissions(username));</span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据token获取用户名，如果您不知道该该token怎么来的，先可以不管，下文会解释</span></span><br><span class="line">        String username = (String) authenticationToken.getPrincipal();</span><br><span class="line">        <span class="comment">// 根据用户名从数据库中查询该用户</span></span><br><span class="line">        User user = userService.getByUsername(username);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 把当前用户存到session中</span></span><br><span class="line">            SecurityUtils.getSubject().getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">            <span class="comment">// 传入用户名和密码进行身份认证，并返回认证信息</span></span><br><span class="line">            AuthenticationInfo authcInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), <span class="string">"myRealm"</span>);</span><br><span class="line">            <span class="keyword">return</span> authcInfo;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面两个方法中可以看出：验证身份的时候是根据用户输入的用户名先从数据库中查出该用户名对应的用户，这时候并没有涉及到密码，也就是说到这一步的时候，即使用户输入的密码不对，也是可以查出来该用户的，然后将该用户的正确信息封装到 authcInfo 中返回给 Shiro，接下来就是Shiro的事了，它会根据这里面的真实信息与用户前台输入的用户名和密码进行校验， 这个时候也要校验密码了，如果校验通过就让用户登录，否则跳转到指定页面。同理，权限验证的时候也是先根据用户名从数据库中获取与该用户名有关的角色和权限，然后封装到 authorizationInfo 中返回给 Shiro。</p><h3 id="2-3-Shiro-配置">2.3 Shiro 配置</h3><p>自定义的 realm 写好了，接下来需要对 Shiro 进行配置了。我们主要配置三个东西：自定义 realm、安全管理器 SecurityManager 和 Shiro 过滤器。如下：</p><p>配置自定义 realm：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ShiroConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入自定义的realm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> MyRealm</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyRealm <span class="title">myAuthRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyRealm myRealm = <span class="keyword">new</span> MyRealm();</span><br><span class="line">        logger.info(<span class="string">"====myRealm注册完成====="</span>);</span><br><span class="line">        <span class="keyword">return</span> myRealm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置安全管理器 SecurityManager：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ShiroConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入安全管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecurityManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将自定义realm加进来</span></span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager(myAuthRealm());</span><br><span class="line">        logger.info(<span class="string">"====securityManager注册完成===="</span>);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 SecurityManager 时，需要将上面的自定义 realm 添加进来，这样的话 Shiro 才会走到自定义的 realm 中。</p><p>配置 Shiro 过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ShiroConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入Shiro过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> securityManager 安全管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义shiroFactoryBean</span></span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean=<span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置自定义的securityManager</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认登录的url，身份认证失败会访问该url</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        <span class="comment">// 设置成功之后要跳转的链接</span></span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/success"</span>);</span><br><span class="line">        <span class="comment">// 设置未授权界面，权限认证失败会访问该url</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/unauthorized"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// LinkedHashMap是有序的，进行顺序拦截器配置</span></span><br><span class="line">        Map&lt;String,String&gt; filterChainMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置可以匿名访问的地址，可以根据实际情况自己添加，放行一些静态资源等，anon表示放行</span></span><br><span class="line">        filterChainMap.put(<span class="string">"/css/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/imgs/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/js/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/swagger-*/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/swagger-ui.html/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">// 登录url 放行</span></span><br><span class="line">        filterChainMap.put(<span class="string">"/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// “/user/admin” 开头的需要身份认证，authc表示要身份认证</span></span><br><span class="line">        filterChainMap.put(<span class="string">"/user/admin*"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="comment">// “/user/student” 开头的需要角色认证，是“admin”才允许</span></span><br><span class="line">        filterChainMap.put(<span class="string">"/user/student*/**"</span>, <span class="string">"roles[admin]"</span>);</span><br><span class="line">        <span class="comment">// “/user/teacher” 开头的需要权限认证，是“user:create”才允许</span></span><br><span class="line">        filterChainMap.put(<span class="string">"/user/teacher*/**"</span>, <span class="string">"perms[\"user:create\"]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置logout过滤器</span></span><br><span class="line">        filterChainMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置shiroFilterFactoryBean的FilterChainDefinitionMap</span></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainMap);</span><br><span class="line">        logger.info(<span class="string">"====shiroFilterFactoryBean注册完成===="</span>);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 Shiro 过滤器时会传入一个安全管理器，可以看出，这是一环套一环，reaml -&gt; SecurityManager -&gt; filter。在过滤器中，我们需要定义一个 shiroFactoryBean，然后将 SecurityManager 添加进来，结合上面代码可以看出，要配置的东西主要有：</p><blockquote><p>默认登录的 url：身份认证失败会访问该 url<br>认证成功之后要跳转的 url<br>权限认证失败会访问该 url<br>需要拦截或者放行的 url：这些都放在一个 map 中</p></blockquote><p>从上述代码中可以看出，在 map 中，针对不同的 url，有不同的权限要求，这里总结一下常用的几个权限。</p><table><thead><tr><th style="text-align:center">Filter</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">anon</td><td style="text-align:center">开放权限，可以理解为匿名用户或游客，可以直接访问的</td></tr><tr><td style="text-align:center">authc</td><td style="text-align:center">需要身份认证的</td></tr><tr><td style="text-align:center">logout</td><td style="text-align:center">注销，执行后会直接跳转到 <code>shiroFilterFactoryBean.setLoginUrl();</code> 设置的 url，即登录页面</td></tr><tr><td style="text-align:center">roles[admin]</td><td style="text-align:center">参数可写多个，表示是某个或某些角色才能通过，多个参数时写 roles[“admin，user”]，当有多个参数时必须每个参数都通过才算通过</td></tr><tr><td style="text-align:center">perms[user]</td><td style="text-align:center">参数可写多个，表示需要某个或某些权限才能通过，多个参数时写 perms[“user, admin”]，当有多个参数时必须每个参数都通过才算通过</td></tr></tbody></table><h3 id="2-4-使用-Shiro-进行认证">2.4 使用 Shiro 进行认证</h3><p>到这里，我们对 Shiro 的准备工作都做完了，接下来开始使用 Shiro 进行认证工作。我们首先来设计几个接口：</p><blockquote><p>接口一： 使用 <code>http://localhost:8080/user/admin</code> 来验证身份认证<br>接口二： 使用 <code>http://localhost:8080/user/student</code> 来验证角色认证<br>接口三： 使用 <code>http://localhost:8080/user/teacher</code> 来验证权限认证<br>接口四： 使用 <code>http://localhost:8080/user/login</code> 来实现用户登录</p></blockquote><p>然后来一下认证的流程：</p><blockquote><p>流程一： 直接访问接口一（此时还未登录），认证失败，跳转到 login.html 页面让用户登录，登录会请求接口四，实现用户登录功能，此时 Shiro 已经保存了用户信息了。<br>流程二： 再次访问接口一（此时用户已经登录），认证成功，跳转到 success.html 页面，展示用户信息。<br>流程三： 访问接口二，测试角色认证是否成功。<br>流程四： 访问接口三，测试权限认证是否成功。</p></blockquote><h4 id="2-4-1-身份、角色、权限认证接口">2.4.1 身份、角色、权限认证接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份认证测试接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/admin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 角色认证测试接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/student"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">student</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限认证测试接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/teacher"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">teacher</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这三个接口很简单，直接返回到指定页面展示即可，只要认证成功就会正常跳转，如果认证失败，就会跳转到上文 ShrioConfig 中配置的页面进行展示。</p><h4 id="2-4-2-用户登录接口">2.4.2 用户登录接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据用户名和密码创建token</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(user.getUsername(), user.getPassword());</span><br><span class="line">        <span class="comment">// 获取subject认证主体</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 开始认证，这一步会跳到我们自定义的realm中</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">            request.setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重点分析一下这个登录接口，首先会根据前端传过来的用户名和密码，创建一个 token，然后使用 SecurityUtils 来创建一个认证主体，接下来开始调用 <code>subject.login(token)</code> 开始进行身份认证了，注意这里传了刚刚创建的 token，就如注释中所述，这一步会跳转到我们自定义的 realm 中，进入 <code>doGetAuthenticationInfo</code> 方法，所以到这里，您就会明白该方法中那个参数 token 了。然后就是上文分析的那样，开始进行身份认证。</p><h4 id="2-4-3-测试一下">2.4.3 测试一下</h4><p>最后，启动项目，测试一下：<br>浏览器请求 <code>http://localhost:8080/user/admin</code> 会进行身份认证，因为此时未登录，所以会跳转到 IndexController 中的 <code>/login</code> 接口，然后跳转到 <code>login.html</code> 页面让我们登录，使用用户名密码为 csdn/123456 登录之后，我们在浏览器中请求 <code>http://localhost:8080/user/student</code> 接口，会进行角色认证，因为数据库中 csdn1 的用户角色是 admin，所以和配置中的吻合，认证通过；我们再请求 <code>http://localhost:8080/user/teacher</code> 接口，会进行权限认证，因为数据库中 csdn1 的用户权限为 <code>user:*</code>，满足配置中的 <code>user:create</code>，所以认证通过。</p><p>接下来，我们点退出，系统会注销重新让我们登录，我们使用 csdn2 这个用户来登录，重复上述操作，当在进行角色认证和权限认证这两步时，就认证不通过了，因为数据库中 csdn2 这个用户存的角色和权限与配置中的不同，所以认证不通过。</p><h2 id="3-总结-v3">3. 总结</h2><p>本节主要介绍了 Shiro 安全框架与 Spring Boot 的整合。先介绍了 Shiro 的三大核心组件已经它们的作用；然后介绍了 Shiro 的身份认证、角色认证和权限认证；最后结合代码，详细介绍了 Spring Boot 中是如何整合 Shiro 的，并设计了一套测试流程，逐步分析 Shiro 的工作流程和原理，让读者更直观地体会出 Shiro 的整套工作流程。Shiro 使用的很广泛，希望读者将其掌握，并能运用到实际项目中。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第17课：Spring Boot中集成Lucence</h1><h2 id="1-Lucence-和全文检索">1. Lucence 和全文检索</h2><p>Lucene 是什么？看一下百度百科：</p><blockquote><p>Lucene是一套用于全文检索和搜寻的开源程式库，由 Apache 软件基金会支持和提供。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。——《百度百科》</p></blockquote><h3 id="1-1-全文检索">1.1 全文检索</h3><p>这里提到了全文检索的概念，我们先来分析一下什么是全文检索，理解了全文检索之后，再理解 Lucene 的原理就非常简单了。</p><p>何为全文检索？举个例子，比如现在要在一个文件中查找某个字符串，最直接的想法就是从头开始检索，查到了就OK，这种对于小数据量的文件来说，很实用，但是对于大数据量的文件来说，就有点吃力了。或者说找包含某个字符串的文件，也是这样，如果在一个拥有几十个 G 的硬盘中找那效率可想而知，是很低的。</p><p>文件中的数据是属于非结构化数据，也就是说它没有什么结构可言，要解决上面提到的效率问题，首先我们得将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对这些有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这就叫全文搜索。即先建立索引，再对索引进行搜索的过程。</p><h3 id="1-2-Lucene-建立索引的方式">1.2 Lucene 建立索引的方式</h3><p>那么 Lucene 中是如何建立索引的呢？假设现在有两篇文章，内容如下：</p><blockquote><p>文章1的内容为：Tom lives in Guangzhou, I live in Guangzhou too.<br>文章2的内容为：He once lived in Shanghai.</p></blockquote><p>首先第一步是将文档传给分词组件（Tokenizer），分词组件会将文档分成一个个单词，并去除标点符号和停词。所谓的停词指的是没有特别意义的词，比如英文中的 a，the，too 等。经过分词后，得到词元（Token） 。如下：</p><blockquote><p>文章1经过分词后的结果：<code>[Tom]</code> <code>[lives]</code> <code>[Guangzhou]</code> <code>[I]</code> <code>[live]</code> <code>[Guangzhou]</code><br>文章2经过分词后的结果：<code>[He]</code> <code>[lives]</code> <code>[Shanghai]</code></p></blockquote><p>然后将词元传给语言处理组件（Linguistic Processor），对于英语，语言处理组件一般会将字母变为小写，将单词缩减为词根形式，如 ”lives” 到 ”live” 等，将单词转变为词根形式，如 ”drove” 到 ”drive” 等。然后得到词（Term）。如下：</p><blockquote><p>文章1经过处理后的结果：<code>[tom]</code> <code>[live]</code> <code>[guangzhou]</code> <code>[i]</code> <code>[live]</code> <code>[guangzhou]</code><br>文章2经过处理后的结果：<code>[he]</code> <code>[live]</code> <code>[shanghai]</code></p></blockquote><p>最后将得到的词传给索引组件（Indexer），索引组件经过处理，得到下面的索引结构：</p><table><thead><tr><th style="text-align:center">关键词</th><th style="text-align:center">文章号[出现频率]</th><th style="text-align:center">出现位置</th></tr></thead><tbody><tr><td style="text-align:center">guangzhou</td><td style="text-align:center">1[2]</td><td style="text-align:center">3,6</td></tr><tr><td style="text-align:center">he</td><td style="text-align:center">2[1]</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">i</td><td style="text-align:center">1[1]</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">live</td><td style="text-align:center">1[2],2[1]</td><td style="text-align:center">2,5,2</td></tr><tr><td style="text-align:center">shanghai</td><td style="text-align:center">2[1]</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">tom</td><td style="text-align:center">1[1]</td><td style="text-align:center">1</td></tr></tbody></table><p>以上就是Lucene 索引结构中最核心的部分。它的关键字是按字符顺序排列的，因此 Lucene 可以用二元搜索算法快速定位关键词。实现时 Lucene 将上面三列分别作为词典文件（Term Dictionary）、频率文件（frequencies）和位置文件（positions）保存。其中词典文件不仅保存有每个关键词，还保留了指向频率文件和位置文件的指针，通过指针可以找到该关键字的频率信息和位置信息。<br>搜索的过程是先对词典二元查找、找到该词，通过指向频率文件的指针读出所有文章号，然后返回结果，然后就可以在具体的文章中根据出现位置找到该词了。所以 Lucene 在第一次建立索引的时候可能会比较慢，但是以后就不需要每次都建立索引了，就快了。</p><p>理解了 Lucene 的分词原理，接下来我们在 Spring Boot 中集成 Lucene 并实现索引和搜索的功能。</p><h2 id="2-Spring-Boot-中集成-Lucence">2. Spring Boot 中集成 Lucence</h2><h3 id="2-1-依赖导入-v4">2.1 依赖导入</h3><p>首先需要导入 Lucene 的依赖，它的依赖有好几个，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Lucence核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Lucene查询解析包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 常规的分词（英文） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--支持分词高亮  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-highlighter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--支持中文分词  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-smartcn<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后一个依赖是用来支持中文分词的，因为默认是支持英文的。那个高亮的分词依赖是最后我要做一个搜索，然后将搜到的内容高亮显示，模拟当前互联网上的做法，大家可以运用到实际项目中去。</p><h3 id="2-2-快速入门">2.2 快速入门</h3><p>根据上文的分析，全文检索有两个步骤，先建立索引，再检索。所以为了测试这个过程，我新建两个 java 类，一个用来建立索引的，另一个用来检索。</p><h4 id="2-2-1-建立索引">2.2.1 建立索引</h4><p>我们自己弄几个文件，放到 <code>D:\lucene\data</code> 目录下，新建一个 Indexer 类来实现建立索引功能。首先在构造方法中初始化标准分词器和写索引实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Indexer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写索引实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> IndexWriter writer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，实例化IndexWriter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> indexDir</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Indexer</span><span class="params">(String indexDir)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Directory dir = FSDirectory.open(Paths.get(indexDir));</span><br><span class="line">        <span class="comment">//标准分词器，会自动去掉空格啊，is a the等单词</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">        <span class="comment">//将标准分词器配到写索引的配置中</span></span><br><span class="line">        IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">        <span class="comment">//实例化写索引对象</span></span><br><span class="line">        writer = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造放发中传一个存放索引的文件夹路径，然后构建标准分词器（这是英文的），再使用标准分词器来实例化写索引对象。接下来就开始建立索引了，我将解释放到代码注释里，方便大家跟进。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 索引指定目录下的所有文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dataDir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexAll</span><span class="params">(String dataDir)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获取该路径下的所有文件</span></span><br><span class="line">    File[] files = <span class="keyword">new</span> File(dataDir).listFiles();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != files) &#123;</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">//调用下面的indexFile方法，对每个文件进行索引</span></span><br><span class="line">            indexFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回索引的文件数</span></span><br><span class="line">    <span class="keyword">return</span> writer.numDocs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 索引指定的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">indexFile</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"索引文件的路径："</span> + file.getCanonicalPath());</span><br><span class="line">    <span class="comment">//调用下面的getDocument方法，获取该文件的document</span></span><br><span class="line">    Document doc = getDocument(file);</span><br><span class="line">    <span class="comment">//将doc添加到索引中</span></span><br><span class="line">    writer.addDocument(doc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文档，文档里再设置每个字段，就类似于数据库中的一行记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Document <span class="title">getDocument</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    <span class="comment">//开始添加字段</span></span><br><span class="line">    <span class="comment">//添加内容</span></span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"contents"</span>, <span class="keyword">new</span> FileReader(file)));</span><br><span class="line">    <span class="comment">//添加文件名，并把这个字段存到索引文件里</span></span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"fileName"</span>, file.getName(), Field.Store.YES));</span><br><span class="line">    <span class="comment">//添加文件路径</span></span><br><span class="line">    doc.add(<span class="keyword">new</span> TextField(<span class="string">"fullPath"</span>, file.getCanonicalPath(), Field.Store.YES));</span><br><span class="line">    <span class="keyword">return</span> doc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就建立好索引了，我们在该类中写一个 main 方法测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//索引保存到的路径</span></span><br><span class="line">        String indexDir = <span class="string">"D:\\lucene"</span>;</span><br><span class="line">        <span class="comment">//需要索引的文件数据存放的目录</span></span><br><span class="line">        String dataDir = <span class="string">"D:\\lucene\\data"</span>;</span><br><span class="line">        Indexer indexer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> indexedNum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记录索引开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 开始构建索引</span></span><br><span class="line">            indexer = <span class="keyword">new</span> Indexer(indexDir);</span><br><span class="line">            indexedNum = indexer.indexAll(dataDir);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != indexer) &#123;</span><br><span class="line">                    indexer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录索引结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"索引耗时"</span> + (endTime - startTime) + <span class="string">"毫秒"</span>);</span><br><span class="line">        System.out.println(<span class="string">"共索引了"</span> + indexedNum + <span class="string">"个文件"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我搞了两个 tomcat 相关的文件放到 <code>D:\lucene\data</code> 下了，执行完之后，看到控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">索引文件的路径：D:\lucene\data\catalina.properties</span><br><span class="line">索引文件的路径：D:\lucene\data\logging.properties</span><br><span class="line">索引耗时882毫秒</span><br><span class="line">共索引了2个文件</span><br></pre></td></tr></table></figure><p>然后我们去 <code>D:\lucene\</code> 目录下可以看到一些索引文件，这些文件不能删除，删除了就需要重新构建索引，否则没了索引，就无法去检索内容了。</p><p>####2.2.2 检索内容</p><p>上面把这两个文件的索引建立好了，接下来我们就可以写检索程序了，在这两个文件中查找特定的词。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(String indexDir, String q)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取要查询的路径，也就是索引所在的位置</span></span><br><span class="line">        Directory dir = FSDirectory.open(Paths.get(indexDir));</span><br><span class="line">        IndexReader reader = DirectoryReader.open(dir);</span><br><span class="line">        <span class="comment">//构建IndexSearcher</span></span><br><span class="line">        IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">        <span class="comment">//标准分词器，会自动去掉空格啊，is a the等单词</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">        <span class="comment">//查询解析器</span></span><br><span class="line">        QueryParser parser = <span class="keyword">new</span> QueryParser(<span class="string">"contents"</span>, analyzer);</span><br><span class="line">        <span class="comment">//通过解析要查询的String，获取查询对象，q为传进来的待查的字符串</span></span><br><span class="line">        Query query = parser.parse(q);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录索引开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//开始查询，查询前10条数据，将记录保存在docs中</span></span><br><span class="line">        TopDocs docs = searcher.search(query, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//记录索引结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"匹配"</span> + q + <span class="string">"共耗时"</span> + (endTime-startTime) + <span class="string">"毫秒"</span>);</span><br><span class="line">        System.out.println(<span class="string">"查询到"</span> + docs.totalHits + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出每条查询结果</span></span><br><span class="line">        <span class="keyword">for</span>(ScoreDoc scoreDoc : docs.scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//scoreDoc.doc相当于docID,根据这个docID来获取文档</span></span><br><span class="line">            Document doc = searcher.doc(scoreDoc.doc);</span><br><span class="line">            <span class="comment">//fullPath是刚刚建立索引的时候我们定义的一个字段，表示路径。也可以取其他的内容，只要我们在建立索引时有定义即可。</span></span><br><span class="line">            System.out.println(doc.get(<span class="string">"fullPath"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，这样我们检索的代码就写完了，每一步解释我写在代码中的注释上了，下面写个 main 方法来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String indexDir = <span class="string">"D:\\lucene"</span>;</span><br><span class="line">    <span class="comment">//查询这个字符串</span></span><br><span class="line">    String q = <span class="string">"security"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        search(indexDir, q);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查一下 <code>security</code> 这个字符串，执行一下看控制台打印的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">匹配security共耗时23毫秒</span><br><span class="line">查询到1条记录</span><br><span class="line">D:\lucene\data\catalina.properties</span><br></pre></td></tr></table></figure><p>可以看出，耗时了23毫秒在两个文件中找到了 security 这个字符串，并输出了文件的名称。上面的代码我写的很详细，这个代码已经比较全了，可以用在生产环境上。</p><h3 id="2-3-中文分词检索高亮实战">2.3 中文分词检索高亮实战</h3><p>上文已经写了建立索引和检索的代码，但是在实际项目中，我们往往是结合页面做一些查询结果的展示，比如我要查某个关键字，查到了之后，将相关的信息点展示出来，并将查询的关键字高亮等等。这种需求在实际项目中非常常见，而且大多数网站中都会有这种效果。所以这一小节我们就使用 Lucene 来实现这种效果。</p><h4 id="2-3-1-中文分词">2.3.1 中文分词</h4><p>我们新建一个 ChineseIndexer 类来建立中文索引，建立过程和英文索引一样的，不同的地方在于使用的是中文分词器。除此之外，这里我们不用通过读取文件去建立索引，我们模拟一下用字符串来建立，因为在实际项目中，绝大部分情况是获取到一些文本字符串，然后根据一些关键字去查询相关内容等等。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseIndexer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放索引的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Directory dir;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备一下用来测试的数据</span></span><br><span class="line">    <span class="comment">//用来标识文档</span></span><br><span class="line">    <span class="keyword">private</span> Integer ids[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> String citys[] = &#123;<span class="string">"上海"</span>, <span class="string">"南京"</span>, <span class="string">"青岛"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> String descs[] = &#123;</span><br><span class="line">            <span class="string">"上海是个繁华的城市。"</span>,</span><br><span class="line">            <span class="string">"南京是一个文化的城市南京，简称宁，是江苏省会，地处中国东部地区，长江下游，濒江近海。全市下辖11个区，总面积6597平方公里，2013年建成区面积752.83平方公里，常住人口818.78万，其中城镇人口659.1万人。[1-4] “江南佳丽地，金陵帝王州”，南京拥有着6000多年文明史、近2600年建城史和近500年的建都史，是中国四大古都之一，有“六朝古都”、“十朝都会”之称，是中华文明的重要发祥地，历史上曾数次庇佑华夏之正朔，长期是中国南方的政治、经济、文化中心，拥有厚重的文化底蕴和丰富的历史遗存。[5-7] 南京是国家重要的科教中心，自古以来就是一座崇文重教的城市，有“天下文枢”、“东南第一学”的美誉。截至2013年，南京有高等院校75所，其中211高校8所，仅次于北京上海；国家重点实验室25所、国家重点学科169个、两院院士83人，均居中国第三。[8-10] 。"</span>,</span><br><span class="line">            <span class="string">"青岛是一个美丽的城市。"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> indexDir</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">(String indexDir)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        dir = FSDirectory.open(Paths.get(indexDir));</span><br><span class="line">        <span class="comment">// 先调用 getWriter 获取IndexWriter对象</span></span><br><span class="line">        IndexWriter writer = getWriter();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ids.length; i++) &#123;</span><br><span class="line">            Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">            <span class="comment">// 把上面的数据都生成索引，分别用id、city和desc来标识</span></span><br><span class="line">            doc.add(<span class="keyword">new</span> IntField(<span class="string">"id"</span>, ids[i], Field.Store.YES));</span><br><span class="line">            doc.add(<span class="keyword">new</span> StringField(<span class="string">"city"</span>, citys[i], Field.Store.YES));</span><br><span class="line">            doc.add(<span class="keyword">new</span> TextField(<span class="string">"desc"</span>, descs[i], Field.Store.YES));</span><br><span class="line">            <span class="comment">//添加文档</span></span><br><span class="line">            writer.addDocument(doc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//close了才真正写到文档中</span></span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取IndexWriter实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IndexWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用中文分词器</span></span><br><span class="line">        SmartChineseAnalyzer analyzer = <span class="keyword">new</span> SmartChineseAnalyzer();</span><br><span class="line">        <span class="comment">//将中文分词器配到写索引的配置中</span></span><br><span class="line">        IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(analyzer);</span><br><span class="line">        <span class="comment">//实例化写索引对象</span></span><br><span class="line">        IndexWriter writer = <span class="keyword">new</span> IndexWriter(dir, config);</span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ChineseIndexer().index(<span class="string">"D:\\lucene2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们用 id、city、desc 分别代表 id、城市名称和城市描述，用他们作为关键字来建立索引，后面我们获取内容的时候，主要来获取城市描述。南京的描述我故意写的长一点，因为下文检索的时候，根据不同的关键字会检索到不同部分的信息，有个权重的概念在里面。<br>然后执行一下 main 方法，将索引保存到 <code>D:\lucene2\</code> 中。</p><h4 id="2-3-2-中文分词查询">2.3.2 中文分词查询</h4><p>中文分词查询代码逻辑和默认的查询差不多，有一些区别在于，我们需要将查询出来的关键字标红加粗等需要处理，需要计算出一个得分片段，这是什么意思呢？比如我搜索 “南京文化” 跟搜索 “南京文明”，这两个搜索结果应该根据关键字出现的位置，返回的结果不一样才对，这在下文会测试。我们先看一下代码和注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ChineseSearch<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">search</span><span class="params">(String indexDir, String q)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取要查询的路径，也就是索引所在的位置</span></span><br><span class="line">        Directory dir = FSDirectory.open(Paths.get(indexDir));</span><br><span class="line">        IndexReader reader = DirectoryReader.open(dir);</span><br><span class="line">        IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">        <span class="comment">//使用中文分词器</span></span><br><span class="line">        SmartChineseAnalyzer analyzer = <span class="keyword">new</span> SmartChineseAnalyzer();</span><br><span class="line">        <span class="comment">//由中文分词器初始化查询解析器</span></span><br><span class="line">        QueryParser parser = <span class="keyword">new</span> QueryParser(<span class="string">"desc"</span>, analyzer);</span><br><span class="line">        <span class="comment">//通过解析要查询的String，获取查询对象</span></span><br><span class="line">        Query query = parser.parse(q);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录索引开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//开始查询，查询前10条数据，将记录保存在docs中</span></span><br><span class="line">        TopDocs docs = searcher.search(query, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//记录索引结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">"匹配&#123;&#125;共耗时&#123;&#125;毫秒"</span>, q, (endTime - startTime));</span><br><span class="line">        logger.info(<span class="string">"查询到&#123;&#125;条记录"</span>, docs.totalHits);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不指定参数的话，默认是加粗，即&lt;b&gt;&lt;b/&gt;</span></span><br><span class="line">        SimpleHTMLFormatter simpleHTMLFormatter = <span class="keyword">new</span> SimpleHTMLFormatter(<span class="string">"&lt;b&gt;&lt;font color=red&gt;"</span>,<span class="string">"&lt;/font&gt;&lt;/b&gt;"</span>);</span><br><span class="line">        <span class="comment">//根据查询对象计算得分，会初始化一个查询结果最高的得分</span></span><br><span class="line">        QueryScorer scorer = <span class="keyword">new</span> QueryScorer(query);</span><br><span class="line">        <span class="comment">//根据这个得分计算出一个片段</span></span><br><span class="line">        Fragmenter fragmenter = <span class="keyword">new</span> SimpleSpanFragmenter(scorer);</span><br><span class="line">        <span class="comment">//将这个片段中的关键字用上面初始化好的高亮格式高亮</span></span><br><span class="line">        Highlighter highlighter = <span class="keyword">new</span> Highlighter(simpleHTMLFormatter, scorer);</span><br><span class="line">        <span class="comment">//设置一下要显示的片段</span></span><br><span class="line">        highlighter.setTextFragmenter(fragmenter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出每条查询结果</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(ScoreDoc scoreDoc : docs.scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//scoreDoc.doc相当于docID,根据这个docID来获取文档</span></span><br><span class="line">            Document doc = searcher.doc(scoreDoc.doc);</span><br><span class="line">            logger.info(<span class="string">"city:&#123;&#125;"</span>, doc.get(<span class="string">"city"</span>));</span><br><span class="line">            logger.info(<span class="string">"desc:&#123;&#125;"</span>, doc.get(<span class="string">"desc"</span>));</span><br><span class="line">            String desc = doc.get(<span class="string">"desc"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//显示高亮</span></span><br><span class="line">            <span class="keyword">if</span>(desc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                TokenStream tokenStream = analyzer.tokenStream(<span class="string">"desc"</span>, <span class="keyword">new</span> StringReader(desc));</span><br><span class="line">                String summary = highlighter.getBestFragment(tokenStream, desc);</span><br><span class="line">                logger.info(<span class="string">"高亮后的desc:&#123;&#125;"</span>, summary);</span><br><span class="line">                list.add(summary);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一步的注释我写的很详细，在这就不赘述了。接下来我们来测试一下效果。</p><h4 id="2-3-3-测试一下">2.3.3 测试一下</h4><p>这里我们使用 thymeleaf 来写个简单的页面来展示获取到的数据，并高亮展示。在 controller 中我们指定索引的目录和需要查询的字符串，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/lucene"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 索引所在的目录</span></span><br><span class="line">        String indexDir = <span class="string">"D:\\lucene2"</span>;</span><br><span class="line">        <span class="comment">// 要查询的字符</span></span><br><span class="line"><span class="comment">//        String q = "南京文明";</span></span><br><span class="line">        String q = <span class="string">"南京文化"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; list = ChineseSearch.search(indexDir, q);</span><br><span class="line">            model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接返回到 result.html 页面，该页面主要来展示一下 model 中的数据即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"desc : $&#123;list&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;desc&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里注意一下，不能使用 <code>th:test</code>，否则字符串中的 html 标签都会被转义，不会被渲染到页面。下面启动服务，在浏览器中输入 <code>http://localhost:8080/lucene/test</code>，测试一下效果，我们搜索的是 “南京文化”。</p><p><img src="http://qnypic.shawncoding.top/blog/816e6bb95429247797028f234b4c0b2a.jpeg" alt="南京文化"></p><p>再将 controller 中的搜索关键字改成 “南京文明”，看下命中的效果。</p><p><img src="http://qnypic.shawncoding.top/blog/a3a849c0ed0e0255bf2f6fdb15564e36.jpeg" alt="南京文明"></p><p>可以看出，不同的关键词，它会计算一个得分片段，也就是说不同的关键字会命中不同位置的内容，然后将关键字根据我们自己设定的形式高亮显示。从结果中可以看出，Lucene 也可以很智能的将关键字拆分命中，这在实际项目中会很好用。</p><h2 id="3-总结-v4">3. 总结</h2><p>本节课首先详细的分析了全文检索的理论规则，然后结合 Lucene，系统的讲述了在 Spring Boot 的集成步骤，首先快速带领大家从直观上感受 Lucene 如何建立索引已经如果检索，其次通过中文检索的具体实例，展示了 Lucene 在全文检索中的广泛应用。Lucene 不难，主要就是步骤比较多，代码不用死记硬背，拿到项目中根据实际情况做对应的修改即可。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><blockquote><p>欢迎关注我的为微信公众号：武哥聊编程</p></blockquote><h1>第18课：Spring Boot搭建实际项目开发中的架构</h1><p>前面的课程中，我主要给大家讲解了 Spring Boot 中常用的一些技术点，这些技术点在实际项目中可能不会全部用得到，因为不同的项目可能使用的技术不同，但是希望大家都能掌握如何使用，并能自己根据实际项目中的需求进行相应的扩展。</p><p>不知道大家了不了解单片机，单片机里有个最小系统，这个最小系统搭建好了之后，就可以在此基础上进行人为的扩展。这节课我们要做的就是搭建一个 “Spring Boot 最小系统架构” 。拿着这个架构，可以在此基础上根据实际需求做相应的扩展。</p><p>从零开始搭建一个环境，主要要考虑几点：统一封装的数据结构、可调式的接口、json的处理、模板引擎的使用（本文不写该项，因为现在大部分项目都前后端分离了，但是考虑到也还有非前后端分离的项目，所以我在源代码里也加上了 thymeleaf）、持久层的集成、拦截器（这个也是可选的）和全局异常处理。一般包括这些东西的话，基本上一个 Spring Boot 项目环境就差不多了，然后就是根据具体情况来扩展了。</p><p>结合前面的课程和以上的这些点，本节课手把手带领大家搭建一个实际项目开发中可用的 Spring Boot 架构。整个项目工程如下图所示，学习的时候，可以结合我的源码，这样效果会更好。</p><p><img src="http://qnypic.shawncoding.top/blog/651b62a918a5bc06073d701b8b296aed.jpeg" alt="工程架构"></p><h2 id="1-统一的数据封装">1. 统一的数据封装</h2><p>由于封装的 json 数据的类型不确定，所以在定义统一的 json 结构时，我们需要用到泛型。统一的 json 结构中属性包括数据、状态码、提示信息即可，构造方法可以根据实际业务需求做相应的添加即可，一般来说，应该有默认的返回结构，也应该有用户指定的返回结构。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一返回对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="string">"操作成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若没有数据返回，可以人为指定状态码和提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(String code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有数据返回时，状态码为0，默认提示信息为：操作成功！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="string">"操作成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有数据返回，状态码为0，人为指定提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(T data, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用自定义异常作为参数传递状态码和提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msgEnum</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(BusinessMsgEnum msgEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = msgEnum.code();</span><br><span class="line">        <span class="keyword">this</span>.msg = msgEnum.msg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省去get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以根据自己项目中所需要的一些东西，合理的修改统一结构中的字段信息。</p><h2 id="2-json的处理">2. json的处理</h2><p>Json 处理工具很多，比如阿里巴巴的 fastjson，不过 fastjson 对有些未知类型的 null 无法转成空字符串，这可能是 fastjson 自身的缺陷，可扩展性也不是太好，但是使用起来方便，使用的人也蛮多的。这节课里面我们主要集成 Spring Boot 自带的 jackson。主要是对 jackson 做一下对 null 的配置即可，然后就可以在项目中使用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jacksonConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(ObjectMapper<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ObjectMapper</span> <span class="title">jacksonObjectMapper</span>(<span class="title">Jackson2ObjectMapperBuilder</span> <span class="title">builder</span>) </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = builder.createXmlMapper(<span class="keyword">false</span>).build();</span><br><span class="line">        objectMapper.getSerializerProvider().setNullValueSerializer(<span class="keyword">new</span> JsonSerializer&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                jsonGenerator.writeString(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先不测试，等下面 swagger2 配置好了之后，我们一起来测试一下。</p><h2 id="3-swagger2在线可调式接口">3. swagger2在线可调式接口</h2><p>有了 swagger，开发人员不需要给其他人员提供接口文档，只要告诉他们一个 Swagger 地址，即可展示在线的 API 接口文档，除此之外，调用接口的人员还可以在线测试接口数据，同样地，开发人员在开发接口时，同样也可以利用 Swagger 在线接口文档测试接口数据，这给开发人员提供了便利。使用 swagger 需要对其进行配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * swagger配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">// 指定构建api文档的详细信息的方法：apiInfo()</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 指定要生成api接口的包路径，这里把controller作为包路径，生成controller中的所有接口</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.itcodai.course18.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建api文档的详细信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                <span class="comment">// 设置页面标题</span></span><br><span class="line">                .title(<span class="string">"Spring Boot搭建实际项目中开发的架构"</span>)</span><br><span class="line">                <span class="comment">// 设置接口描述</span></span><br><span class="line">                .description(<span class="string">"跟武哥一起学Spring Boot第18课"</span>)</span><br><span class="line">                <span class="comment">// 设置联系方式</span></span><br><span class="line">                .contact(<span class="string">"倪升武，"</span> + <span class="string">"微信公众号：程序员私房菜"</span>)</span><br><span class="line">                <span class="comment">// 设置版本</span></span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                <span class="comment">// 构建</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，可以先测试一下，写一个 Controller，弄一个静态的接口测试一下上面集成的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"用户信息接口"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getUser/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"根据用户唯一标识获取用户信息"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title">getUserInfo</span><span class="params">(@PathVariable @ApiParam(value = <span class="string">"用户唯一标识"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(id, <span class="string">"倪升武"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动项目，在浏览器中输入 <code>localhost:8080/swagger-ui.html</code> 即可看到 swagger 接口文档页面，调用一下上面这个接口，即可看到返回的 json 数据。</p><h2 id="4-持久层集成">4. 持久层集成</h2><p>每个项目中是必须要有持久层的，与数据库交互，这里我们主要来集成 mybatis，集成 mybatis 首先要在 application.yml 中进行配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">localhost:3306/blog_test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment"># 数据库配置</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;datasource.url&#125;?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;maxReconnects=10</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">10</span> <span class="comment"># 最大连接池数</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">1770000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 指定别名设置的包为所有entity</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itcodai.course18.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment"># 驼峰命名规范</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="comment"># mapper映射文件位置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>配置好了之后，接下来我们来写一下 dao 层，实际中我们使用注解比较多，因为比较方便，当然也可以使用 xml 的方式，甚至两种同时使用都行，这里我们主要使用注解的方式来集成，关于 xml 的方式，大家可以查看前面课程，实际中根据项目情况来定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"username"</span>, column = <span class="string">"user_name"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"password"</span>, column = <span class="string">"password"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125; and user_name=#&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserByIdAndName</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 service 层我就不在文章中写代码了，大家可以结合我的源代码学习，这一节主要带领大家来搭建一个 Spring Boot 空架构。最后别忘了在启动类上添加注解扫描 <code>@MapperScan(&quot;com.itcodai.course18.dao&quot;)</code></p><h2 id="5-拦截器">5. 拦截器</h2><p>拦截器在项目中使用的是非常多的（但不是绝对的），比如拦截一些置顶的 url，做一些判断和处理等等。除此之外，还需要将常用的静态页面或者 swagger 页面放行，不能将这些静态资源给拦截了。首先先自定义一个拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"执行方法之前执行(Controller方法调用之前)"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将自定义的拦截器加入到拦截器配置中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现WebMvcConfigurer不会导致静态资源被拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor())</span><br><span class="line">                <span class="comment">// 拦截所有url</span></span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                <span class="comment">// 放行swagger</span></span><br><span class="line">                .excludePathPatterns(<span class="string">"/swagger-resources/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring Boot 中，我们通常会在如下目录里存放一些静态资源：</p><blockquote><p>classpath:/static<br>classpath:/public<br>classpath:/resources<br>classpath:/META-INF/resources</p></blockquote><p>上面代码中配置的 <code>/**</code> 是对所有 url 都进行了拦截，但我们实现了 WebMvcConfigurer 接口，不会导致 Spring Boot 对上面这些目录下的静态资源实施拦截。但是我们平时访问的 swagger 会被拦截，所以要将其放行。swagger 页面在 swagger-resources 目录下，放行该目录下所有文件即可。</p><p>然后在浏览器中输入一下 swagger 页面，若能正常显示 swagger，说明放行成功。同时可以根据后台打印的日志判断代码执行的顺序。</p><h2 id="6-全局异常处理">6. 全局异常处理</h2><p>全局异常处理是每个项目中必须用到的东西，在具体的异常中，我们可能会做具体的处理，但是对于没有处理的异常，一般会有一个统一的全局异常处理。在异常处理之前，最好维护一个异常提示信息枚举类，专门用来保存异常提示信息的。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BusinessMsgEnum &#123;</span><br><span class="line">    <span class="comment">/** 参数异常 */</span></span><br><span class="line">    PARMETER_EXCEPTION(<span class="string">"102"</span>, <span class="string">"参数异常!"</span>),</span><br><span class="line">    <span class="comment">/** 等待超时 */</span></span><br><span class="line">    SERVICE_TIME_OUT(<span class="string">"103"</span>, <span class="string">"服务调用超时！"</span>),</span><br><span class="line">    <span class="comment">/** 参数过大 */</span></span><br><span class="line">    PARMETER_BIG_EXCEPTION(<span class="string">"102"</span>, <span class="string">"输入的图片数量不能超过50张!"</span>),</span><br><span class="line">    <span class="comment">/** 500 : 发生异常 */</span></span><br><span class="line">    UNEXPECTED_EXCEPTION(<span class="string">"500"</span>, <span class="string">"系统发生异常，请联系管理员！"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BusinessMsgEnum</span><span class="params">(String code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在全局统一异常处理类中，我们一般会对自定义的业务异常最先处理，然后去处理一些常见的系统异常，最后会来一个一劳永逸（Exception 异常）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截业务异常，返回业务异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BusinessErrorException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleBusinessError</span><span class="params">(BusinessErrorException ex)</span> </span>&#123;</span><br><span class="line">        String code = ex.getCode();</span><br><span class="line">        String message = ex.getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(code, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空指针异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex NullPointerException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(NullPointerException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleTypeMismatchException</span><span class="params">(NullPointerException ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"空指针异常，&#123;&#125;"</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(<span class="string">"500"</span>, <span class="string">"空指针异常了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统异常 预期以外异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleUnexpectedServer</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"系统异常："</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(BusinessMsgEnum.UNEXPECTED_EXCEPTION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，BusinessErrorException 是自定义的业务异常，继承一下 RuntimeException 即可，具体可以看我的源代码，文章中就不贴代码了。<br>在 UserController 中有个 testException 方法，用来测试全局异常的，打开 swagger 页面，调用一下该接口，可以看出返回用户提示信息：”系统发生异常，请联系管理员！“。当然了，实际情况中，需要根据不同的业务提示不同的信息。</p><h2 id="7-总结">7. 总结</h2><p>本文主要手把手带领大家快速搭建一个项目中可以使用的 Spring Boot 空架构，主要从统一封装的数据结构、可调式的接口、json的处理、模板引擎的使用（代码中体现）、持久层的集成、拦截器和全局异常处理。一般包括这些东西的话，基本上一个 Spring Boot 项目环境就差不多了，然后就是根据具体情况来扩展了。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p><p>tAll();<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">关于 service 层我就不在文章中写代码了，大家可以结合我的源代码学习，这一节主要带领大家来搭建一个 Spring Boot 空架构。最后别忘了在启动类上添加注解扫描 &#96;@MapperScan(&quot;com.itcodai.course18.dao&quot;)&#96;</span><br><span class="line"></span><br><span class="line">## 5. 拦截器</span><br><span class="line"></span><br><span class="line">拦截器在项目中使用的是非常多的（但不是绝对的），比如拦截一些置顶的 url，做一些判断和处理等等。除此之外，还需要将常用的静态页面或者 swagger 页面放行，不能将这些静态资源给拦截了。首先先自定义一个拦截器。</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class MyInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger logger &#x3D; LoggerFactory.getLogger(MyInterceptor.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;执行方法之前执行(Controller方法调用之前)&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        logger.info(&quot;整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将自定义的拦截器加入到拦截器配置中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现WebMvcConfigurer不会导致静态资源被拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor())</span><br><span class="line">                <span class="comment">// 拦截所有url</span></span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                <span class="comment">// 放行swagger</span></span><br><span class="line">                .excludePathPatterns(<span class="string">"/swagger-resources/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring Boot 中，我们通常会在如下目录里存放一些静态资源：</p><blockquote><p>classpath:/static<br>classpath:/public<br>classpath:/resources<br>classpath:/META-INF/resources</p></blockquote><p>上面代码中配置的 <code>/**</code> 是对所有 url 都进行了拦截，但我们实现了 WebMvcConfigurer 接口，不会导致 Spring Boot 对上面这些目录下的静态资源实施拦截。但是我们平时访问的 swagger 会被拦截，所以要将其放行。swagger 页面在 swagger-resources 目录下，放行该目录下所有文件即可。</p><p>然后在浏览器中输入一下 swagger 页面，若能正常显示 swagger，说明放行成功。同时可以根据后台打印的日志判断代码执行的顺序。</p><h2 id="6-全局异常处理-v2">6. 全局异常处理</h2><p>全局异常处理是每个项目中必须用到的东西，在具体的异常中，我们可能会做具体的处理，但是对于没有处理的异常，一般会有一个统一的全局异常处理。在异常处理之前，最好维护一个异常提示信息枚举类，专门用来保存异常提示信息的。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BusinessMsgEnum &#123;</span><br><span class="line">    <span class="comment">/** 参数异常 */</span></span><br><span class="line">    PARMETER_EXCEPTION(<span class="string">"102"</span>, <span class="string">"参数异常!"</span>),</span><br><span class="line">    <span class="comment">/** 等待超时 */</span></span><br><span class="line">    SERVICE_TIME_OUT(<span class="string">"103"</span>, <span class="string">"服务调用超时！"</span>),</span><br><span class="line">    <span class="comment">/** 参数过大 */</span></span><br><span class="line">    PARMETER_BIG_EXCEPTION(<span class="string">"102"</span>, <span class="string">"输入的图片数量不能超过50张!"</span>),</span><br><span class="line">    <span class="comment">/** 500 : 发生异常 */</span></span><br><span class="line">    UNEXPECTED_EXCEPTION(<span class="string">"500"</span>, <span class="string">"系统发生异常，请联系管理员！"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BusinessMsgEnum</span><span class="params">(String code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在全局统一异常处理类中，我们一般会对自定义的业务异常最先处理，然后去处理一些常见的系统异常，最后会来一个一劳永逸（Exception 异常）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截业务异常，返回业务异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BusinessErrorException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleBusinessError</span><span class="params">(BusinessErrorException ex)</span> </span>&#123;</span><br><span class="line">        String code = ex.getCode();</span><br><span class="line">        String message = ex.getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(code, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空指针异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex NullPointerException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(NullPointerException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleTypeMismatchException</span><span class="params">(NullPointerException ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"空指针异常，&#123;&#125;"</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(<span class="string">"500"</span>, <span class="string">"空指针异常了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统异常 预期以外异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">value</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleUnexpectedServer</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"系统异常："</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(BusinessMsgEnum.UNEXPECTED_EXCEPTION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，BusinessErrorException 是自定义的业务异常，继承一下 RuntimeException 即可，具体可以看我的源代码，文章中就不贴代码了。<br>在 UserController 中有个 testException 方法，用来测试全局异常的，打开 swagger 页面，调用一下该接口，可以看出返回用户提示信息：”系统发生异常，请联系管理员！“。当然了，实际情况中，需要根据不同的业务提示不同的信息。</p><h2 id="7-总结-v2">7. 总结</h2><p>本文主要手把手带领大家快速搭建一个项目中可以使用的 Spring Boot 空架构，主要从统一封装的数据结构、可调式的接口、json的处理、模板引擎的使用（代码中体现）、持久层的集成、拦截器和全局异常处理。一般包括这些东西的话，基本上一个 Spring Boot 项目环境就差不多了，然后就是根据具体情况来扩展了。</p><p>课程源代码下载地址：<a href="https://gitee.com/eson15/springboot_study" target="_blank" rel="noopener">戳我下载</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;导读：课程概览&lt;/h1&gt;
&lt;h2 id=&quot;1-Spring-Boot是什么&quot;&gt;1. Spring Boot是什么&lt;/h2&gt;
&lt;p&gt;我们知道，从 2002 年开始，Spring 一直在飞速的发展，如今已经成为了在Java EE（Java Enterprise Edition）开发中真正意义上的标准，但是随着技术的发展，Java EE使用 Spring 逐渐变得笨重起来，大量的 XML 文件存在于项目之中。&lt;strong&gt;繁琐的配置，整合第三方框架的配置问题，导致了开发和部署效率的降低&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://blog.shawncoding.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Shiro1.9学习笔记</title>
    <link href="https://blog.shawncoding.top/posts/8b3a3556.html"/>
    <id>https://blog.shawncoding.top/posts/8b3a3556.html</id>
    <published>2023-03-05T16:17:57.000Z</published>
    <updated>2023-03-17T05:46:03.827Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Shiro概述</h1><h2 id="1、Shiro简介">1、Shiro简介</h2><h3 id="1-1-介绍">1.1 介绍</h3><blockquote><p>官网：<a href="https://shiro.apache.org/" target="_blank" rel="noopener" title="https://shiro.apache.org/">https://shiro.apache.org/</a></p></blockquote><p>Apache Shiro 是一个功能强大且易于使用的 Java 安全(权限)框架。Shiro 可以完成：认证、授权、加密、会话管理、与 Web 集成、缓存 等。借助 Shiro 您可以快速轻松地保护任何应用程序——从最小的移动应用程序到最大的 Web 和企业应用程序。</p><a id="more"></a><h3 id="1-2-Shiro特点">1.2 Shiro特点</h3><ul><li>易于使用：使用 Shiro 构建系统安全框架非常简单。就算第一次接触也可以快速掌握</li><li>全面：Shiro 包含系统安全框架需要的功能，满足安全需求的“一站式服务”</li><li>灵活：Shiro 可以在任何应用程序环境中工作。虽然它可以在 Web、EJB 和 IoC 环境中工作，但不需要依赖它们。Shiro 也没有强制要求任何规范，甚至没有很多依赖项</li><li>强力支持 Web：Shiro 具有出色的 Web 应用程序支持，可以基于应用程序 URL 和 Web 协议（例如 REST）创建灵活的安全策略，同时还提供一组 JSP 库来控制页面输出</li><li>兼容性强：Shiro 的设计模式使其易于与其他框架和应用程序集成。Shiro 与 Spring、Grails、Wicket、Tapestry、Mule、Apache Camel、Vaadin 等框架无缝集成</li><li>社区支持：Shiro 是 Apache 软件基金会的一个开源项目，有完备的社区支持，文档支持。如果需要，像 Katasoft 这样的商业公司也会提供专业的支持和服务</li></ul><h2 id="2、Shiro与SpringSecurity的对比">2、Shiro与SpringSecurity的对比</h2><blockquote><p>SpringSecurity参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124675493" target="_blank" rel="noopener" title="Spring Security学习笔记">Spring Security学习笔记</a></p></blockquote><ul><li>Spring Security 基于 Spring 开发，项目若使用 Spring 作为基础，配合 Spring Security 做权限更加方便，而 Shiro 需要和 Spring 进行整合开发；</li><li>Spring Security 功能比 Shiro 更加丰富些，例如安全维护方面；</li><li>Spring Security 社区资源相对比 Shiro 更加丰富；</li><li>Shiro 的配置和使用比较简单，Spring Security 上手复杂些；</li><li>Shiro 依赖性低，不需要任何框架和容器，可以独立运行。Spring Security 依赖 Spring 容器；</li><li>shiro 不仅仅可以使用在 web 中，它可以工作在任何应用环境中。在集群会话时 Shiro 最重要的一个好处或许就是它的会话是独立于容器的</li></ul><h2 id="3、Shiro基本功能">3、Shiro基本功能</h2><p><img src="http://qnypic.shawncoding.top/blog/b6bdec1b05374474af540cb7f2b46c26.png" alt="在这里插入图片描述"></p><ul><li><strong>Authentication</strong>：身份认证/登录，验证用户是不是拥有相应的身份；</li><li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用 户是否能进行什么操作，如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户 对某个资源是否具有某个权限；</li><li>Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境，也可以是 Web 环境的；</li><li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li>Web Support：Web 支持，可以非常容易的集成到 Web 环境；</li><li>Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</li><li>Concurrency：Shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li>Testing：提供测试支持；</li><li>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</li></ul><h2 id="4、Shiro原理">4、Shiro原理</h2><h3 id="4-1-Shiro-架构-外部">4.1 Shiro 架构(外部)</h3><p>从外部来看 Shiro ，即从应用程序角度的来观察如何使用Shiro 完成工作</p><p><img src="http://qnypic.shawncoding.top/blog/841908a9635940fbad8820c8cc41b28f.png" alt="在这里插入图片描述"></p><ul><li><code>Subject</code>：应用代码直接交互的对象是 Subject，也就是说 Shiro 的对外 API 核心 就是 Subject。Subject 代表了当前“用户”， 这个用户不一定 是一个具体的人，与当前应用交互的任何东西都是 Subject，如网络爬虫， 机器人等；与 Subject 的所有交互都会委托给 SecurityManager； Subject 其实是一个门面，SecurityManager 才是实际的执行者；</li><li><code>SecurityManager</code>：安全管理器；即所有与安全有关的操作都会与 SecurityManager交互；且其管理着所有 Subject；可以看出它是** Shiro 的核心**，它负责与 Shiro 的其他组件进行交互，它相当于 SpringMVC 中 DispatcherServlet 的角色</li><li><code>Realm</code>：Shiro 从 Realm 获取安全数据（如用户、角色、权限），就是说SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户 进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色/ 权限进行验证用户是否能进行操作；<strong>可以把 Realm 看成 DataSource</strong></li></ul><h3 id="4-2-shiro架构-内部">4.2 shiro架构(内部)</h3><p><img src="http://qnypic.shawncoding.top/blog/da93879df56a448bb5550e68f364739f.png" alt="在这里插入图片描述"></p><ul><li><code>Subject</code>：任何可以与应用交互的“用户”；</li><li><code>SecurityManager</code> ：相当于 SpringMVC 中的 DispatcherServlet；是 Shiro 的心脏； 所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进 行认证、授权、会话及缓存的管理。</li><li><code>Authenticator</code>：负责 Subject 认证，是一个扩展点，可以自定义实现；可以使用认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li><li><code>Authorizer</code>：授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li><code>Realm</code>：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的 Realm；</li><li><code>SessionManager</code>：管理 Session 生命周期的组件；而 Shiro 并不仅仅可以用在 Web环境，也可以用在如普通的 JavaSE 环境</li><li><code>CacheManager</code>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据 基本上很少改变，放到缓存中后可以提高访问的性能</li><li><code>Cryptography</code>：密码模块，Shiro 提高了一些常见的加密组件用于如密码加密/解密。</li></ul><h1>二、Shiro基本使用</h1><h2 id="1、环境准备">1、环境准备</h2><p>引入shiro依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建ini文件，因为Shiro获取权限相关信息可以通过数据库获取，也可以通过ini配置文件获取，后期放数据库</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">shawn</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">leo</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="2、登录认证">2、登录认证</h2><h3 id="2-1-登录认证概念">2.1 登录认证概念</h3><ul><li>身份验证：一般需要提供如身份ID等一些标识信息来表明登录者的身份，如提供email，用户名/密码来证明</li><li>在shiro中，用户需要提供**principals（身份）**和credentials（证明）给shiro，从而应用能验证用户身份</li><li>principals：身份，即主体的标识属性，可以是任何属性，如用户名、邮箱等，唯一即可。一个主体可以有多个principals，但<strong>只有一个Primary principals</strong>，一般是用户名/邮箱/手机号</li><li>credentials：证明/凭证，即只有主体知道的安全值，如密码/数字证书等。</li><li>最常见的principals和credentials组合就是用户名/密码</li></ul><h3 id="2-2-登录认证基本流程">2.2 登录认证基本流程</h3><ul><li>收集用户身份/凭证，即如用户名/密码</li><li>调用 <code>Subject.login</code> 进行登录，如果失败将得到相应 的 <code>AuthenticationException</code>异常，根据异常提示用户错误信息；否则登录成功</li><li>创建自定义的 <code>Realm</code>类，继承 <code>org.apache.shiro.realm.AuthenticatingRealm</code>类,实现 <code>doGetAuthenticationInfo()</code> 方法</li></ul><h3 id="2-3-登录认证实例">2.3 登录认证实例</h3><ul><li>初始化获取SecurityManager</li><li>获取subject对象</li><li>创建token对象，web应用用户名密码从页面传递</li><li>完成登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//1初始化获取SecurityManager</span></span><br><span class="line">       Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">       SecurityManager securityManager = factory.getInstance();</span><br><span class="line">       SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">       <span class="comment">//2获取Subject对象</span></span><br><span class="line">       Subject subject = SecurityUtils.getSubject();</span><br><span class="line">       <span class="comment">//3创建token对象，web应用用户名密码从页面传递</span></span><br><span class="line">       AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"shawn"</span>,<span class="string">"123456"</span>);</span><br><span class="line">       <span class="comment">//4完成登录</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           subject.login(token);</span><br><span class="line">           System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           System.out.println(<span class="string">"用户不存在"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           System.out.println(<span class="string">"密码错误"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-身份认证源码流程">2.4 身份认证源码流程</h3><ul><li>首先调用 <code>Subject.login(token) </code>进行登录，其会自动委托给 <code>SecurityManager</code></li><li><code>SecurityManager</code>负责真正的身份验证逻辑；它会委托给 <code>Authenticator</code>进行身份验证</li><li><strong>Authenticator 才是真正的身份验证者</strong>，Shiro API 中核心的身份 认证入口点，此处可以自定义插入自己的实现；</li><li>Authenticator 可能会委托给相应的 <code>AuthenticationStrategy </code>进 行多 Realm 身份验证，默认 <code>ModularRealmAuthenticator</code>会调用 <code>AuthenticationStrategy</code>进行多 Realm 身份验证；</li><li><strong>Authenticator 会把相应的 token 传入 Realm</strong>，从 Realm 获取 身份验证信息，如果没有返回/抛出异常表示身份验证失败了。此处可以配置多个Realm，将按照相应的顺序及策略进行访问。</li></ul><h2 id="3、角色与授权">3、角色与授权</h2><h3 id="3-1-授权概念">3.1 授权概念</h3><ul><li><strong>授权</strong>，也叫访问控制，即在应用中控制谁访问哪些资源（如访问页面/编辑数据/页面 操作等）。在授权中需了解的几个关键对象：<code>主体（Subject）</code>、<code>资源（Resource）</code>、<code>权限 （Permission）</code>、<code>角色（Role）</code></li><li><strong>主体(Subject)</strong>：访问应用的用户，在 Shiro 中使用 Subject 代表该用户。用户只有授权 后才允许访问相应的资源</li><li><strong>资源(Resource)</strong>：在应用中用户可以访问的 URL，比如访问 JSP 页面、查看/编辑 某些 数据、访问某个业务方法、打印文本等等都是资源。用户只要授权后才能访问</li><li><strong>权限(Permission)</strong>：安全策略中的原子授权单位，通过权限我们可以表示在应用中用户 有没有操作某个资源的权力。即权限表示在应用中用户能不能访问某个资源，如：访问用 户列表页面查看/新增/修改/删除用户数据（即很多时候都是CRUD（增查改删）式权限控 制）等。权限代表了用户有没有操作某个资源的权利，即反映在某个资源上的操作允不允 许。</li><li><strong>Shiro 支持粗粒度权限</strong>（如用户模块的所有权限）和细粒度权限（操作某个用户的权限， 即实例级别的）</li><li><strong>角色(Role)</strong>：<code>权限的集合</code>，一般情况下会赋予用户角色而不是权限，即这样用户可以拥有 一组权限，赋予权限时比较方便。典型的如：项目经理、技术总监、CTO、开发工程师等 都是角色，不同的角色拥有一组不同的权限</li></ul><h3 id="3-2-授权方式">3.2 授权方式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编程式</span></span><br><span class="line">subject.hasRole(<span class="string">"admin"</span>)</span><br><span class="line"><span class="comment">//注解式</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</span><br><span class="line"><span class="comment">// JSP/GSP 标签</span></span><br><span class="line">&lt;shiro:hasRole name=<span class="string">"admin"</span>&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-授权流程">3.3 授权流程</h3><ul><li>首先调用Subject.isPermitted的<code>/hasRole</code>接口，其会委托给<code>SecurityManager</code>，而SecurityManager接着会委托给 Authorizer；</li><li><strong>Authorizer是真正的授权者</strong>，如果调用如isPermitted(“user:view”)，其首先会通过PermissionResolver把字符串转换成相应的Permission实例；</li><li>在进行授权之前，其会调用相应的Realm获取Subject相应的角色/权限用于匹配传入的角色/权限；</li><li>Authorizer会判断Realm的角色/权限是否和传入的匹配，如果有多个Realm，会委托给ModularRealmAuthorizer进行循环判断，如果匹配如isPermitted<code>/hasRole</code> 会返回 true，否则返回false表示授权失败</li></ul><h3 id="3-4-代码实例">3.4 代码实例</h3><p>首先修改resource下的<code>shiro.ini</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">zhangsan</span>=<span class="number">7174</span>f64b13022acd3c56e2781e098a5f</span><br><span class="line"><span class="attr">shawn</span>=<span class="number">123456</span>,role1,role2</span><br><span class="line"></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">role1</span>=user:insert,user:select</span><br></pre></td></tr></table></figure><p>修改主函数进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1初始化获取SecurityManager</span></span><br><span class="line">    DefaultSecurityManager securityManager=<span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">    IniRealm iniRealm=<span class="keyword">new</span> IniRealm(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">    securityManager.setRealm(iniRealm);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其中 shiro.ini 在 resources 的根目录下，此方法已经过期</span></span><br><span class="line">    <span class="comment">// Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory("classpath:shiro.ini");</span></span><br><span class="line">    <span class="comment">// SecurityManager securityManager = factory.getInstance();</span></span><br><span class="line">    SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">    <span class="comment">//2获取Subject对象</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//3创建token对象，web应用用户名密码从页面传递</span></span><br><span class="line">    AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"shawn"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">//4完成登录</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">        <span class="comment">//5判断角色</span></span><br><span class="line">        <span class="keyword">boolean</span> hasRole = subject.hasRole(<span class="string">"role1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否拥有此角色 = "</span> + hasRole);</span><br><span class="line">        <span class="comment">//6判断权限</span></span><br><span class="line">        <span class="keyword">boolean</span> permitted = subject.isPermitted(<span class="string">"user:insert1111"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否拥有此权限 = "</span> + permitted);</span><br><span class="line">        <span class="comment">//也可以用checkPermission方法，但没有返回值，没权限抛AuthenticationException</span></span><br><span class="line">        subject.checkPermission(<span class="string">"user:select1111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"用户不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"密码错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、Shiro加密">4、Shiro加密</h2><p>实际系统开发中，一些敏感信息需要进行加密，比如说用户的密码。Shiro 内嵌很多 常用的加密算法，比如 MD5 加密。Shiro 可以很简单的使用信息加密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//密码明文</span></span><br><span class="line">    String password = <span class="string">"shawn"</span>;</span><br><span class="line">    <span class="comment">//使用md5加密</span></span><br><span class="line">    Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(password);</span><br><span class="line">    System.out.println(<span class="string">"md5加密 = "</span> + md5Hash.toHex());</span><br><span class="line">    <span class="comment">//带盐的md5加密，盐就是在密码明文后拼接新字符串，然后再进行加密</span></span><br><span class="line">    Md5Hash md5Hash2 = <span class="keyword">new</span> Md5Hash(password,<span class="string">"salt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"带盐的md5加密 = "</span> + md5Hash2.toHex());</span><br><span class="line">    <span class="comment">//为了保证安全，避免被破解还可以多次迭代加密，保证数据安全</span></span><br><span class="line">    Md5Hash md5Hash3 = <span class="keyword">new</span> Md5Hash(password,<span class="string">"salt"</span>,<span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">"md5带盐的3次加密 = "</span> + md5Hash3.toHex());</span><br><span class="line">    <span class="comment">//使用父类进行加密</span></span><br><span class="line">    SimpleHash simpleHash = <span class="keyword">new</span> SimpleHash(</span><br><span class="line">            <span class="string">"MD5"</span>,password,<span class="string">"salt"</span>,<span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">"父类带盐的3次加密 = "</span> + simpleHash.toHex());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、自定义登陆认证">5、自定义登陆认证</h2><p>Shiro 默认的登录认证是不带加密的，如果想要实现加密认证需要自定义登录认证， 自定义 Realm；首先是创建自定义Realm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自定义登录认证方法，shiro的login方法底层会调用该类的认证方法进行认证</span></span><br><span class="line">    <span class="comment">//需要配置自定义的realm生效，在ini文件中配置，在Springboot中配置</span></span><br><span class="line">    <span class="comment">//该方法只是获取进行对比的信息，认证逻辑还是按照shiro底层认证逻辑完成</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//1获取身份信息</span></span><br><span class="line">        String principal = authenticationToken.getPrincipal().toString();</span><br><span class="line">        <span class="comment">//2获取凭证信息</span></span><br><span class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[])authenticationToken.getCredentials());</span><br><span class="line">        System.out.println(<span class="string">"认证用户信息："</span>+principal+<span class="string">"---"</span>+password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3获取数据库中存储的用户信息</span></span><br><span class="line">        <span class="keyword">if</span>(principal.equals(<span class="string">"shawn"</span>))&#123;</span><br><span class="line">            <span class="comment">//3.1数据库中存储的加盐3次迭代的密码</span></span><br><span class="line">            <span class="comment">// 第二种方法密码，需要自己进行加密</span></span><br><span class="line"><span class="comment">//            String pwdInfo = "123456 ";</span></span><br><span class="line">            <span class="comment">// 第一种方法</span></span><br><span class="line">            String pwdInfo = <span class="string">"d1b129656359e35e95ebd56a63d7b9e0"</span>;</span><br><span class="line">            <span class="comment">//4创建封装校验逻辑对象，封装数据返回</span></span><br><span class="line">            AuthenticationInfo info = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                    authenticationToken.getPrincipal(),</span><br><span class="line">                    pwdInfo,</span><br><span class="line">                    ByteSource.Util.bytes(<span class="string">"salt"</span>),</span><br><span class="line">                    authenticationToken.getPrincipal().toString()</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1初始化获取SecurityManager</span></span><br><span class="line">    Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">    SecurityManager securityManager = factory.getInstance();</span><br><span class="line">    SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">    <span class="comment">//2获取Subject对象</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//3创建token对象，web应用用户名密码从页面传递</span></span><br><span class="line">    AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"shawn"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">//4完成登录</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">        <span class="comment">//5判断角色</span></span><br><span class="line">        <span class="keyword">boolean</span> hasRole = subject.hasRole(<span class="string">"role1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否拥有此角色 = "</span> + hasRole);</span><br><span class="line">        <span class="comment">//6判断权限</span></span><br><span class="line">        <span class="keyword">boolean</span> permitted = subject.isPermitted(<span class="string">"user:insert1111"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否拥有此权限 = "</span> + permitted);</span><br><span class="line">        <span class="comment">//也可以用checkPermission方法，但没有返回值，没权限抛AuthenticationException</span></span><br><span class="line">        subject.checkPermission(<span class="string">"user:select1111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"用户不存在"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"密码错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在Ini文件添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="attr">md5CredentialsMatcher</span>=org.apache.shiro.authc.credential.Md5CredentialsMatcher</span><br><span class="line"><span class="attr">md5CredentialsMatcher.hashIterations</span>=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">myrealm</span>=com.atguigu.shirotest.MyRealm</span><br><span class="line"><span class="attr">myrealm.credentialsMatcher</span>=<span class="variable">$md5CredentialsMatcher</span></span><br><span class="line"><span class="attr">securityManager.realms</span>=<span class="variable">$myrealm</span></span><br></pre></td></tr></table></figure><p>第二种方法，新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1初始化获取SecurityManager</span></span><br><span class="line">    DefaultSecurityManager securityManager=<span class="keyword">new</span> DefaultSecurityManager(<span class="keyword">new</span> MyRealm());</span><br><span class="line">    SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">    <span class="comment">//2获取Subject对象</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//3创建token对象，web应用用户名密码从页面传递</span></span><br><span class="line">    AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"shawn"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    <span class="comment">//4完成登录</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">        <span class="comment">//5判断角色</span></span><br><span class="line">        <span class="keyword">boolean</span> hasRole = subject.hasRole(<span class="string">"role1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否拥有此角色 = "</span> + hasRole);</span><br><span class="line">        <span class="comment">//6判断权限</span></span><br><span class="line">        <span class="keyword">boolean</span> permitted = subject.isPermitted(<span class="string">"user:insert1111"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否拥有此权限 = "</span> + permitted);</span><br><span class="line">        <span class="comment">//也可以用checkPermission方法，但没有返回值，没权限抛AuthenticationException</span></span><br><span class="line">        subject.checkPermission(<span class="string">"user:select1111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"用户不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"密码错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、Shiro整合Springboot</h1><h2 id="1、登录认证准备">1、登录认证准备</h2><h3 id="1-1-环境准备">1.1 环境准备</h3><p>首先创建SpringBoot脚手架项目，导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置Thymeleaf与Shrio的整合依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Shiro整合EhCache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mysql脚本，配置好mysql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`shirodb`</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br><span class="line"><span class="keyword">USE</span> <span class="string">`shirodb`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'编号'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`rid`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色编号'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>) </span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> AUTO_INCREMENT = <span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="keyword">COMMENT</span> = <span class="string">'用户表'</span>;</span><br></pre></td></tr></table></figure><p>配置application.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shirodb?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line"><span class="comment"># 未认证的请求重定向地址</span></span><br><span class="line"><span class="attr">shiro:</span></span><br><span class="line">  <span class="attr">loginUrl:</span> <span class="string">/myController/login</span></span><br></pre></td></tr></table></figure><h3 id="1-2-后端整合">1.2 后端整合</h3><p>创建各个模块和类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> Integer rid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapper层</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层，接口类自己定义(方法抽取一下即可)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserInfoByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">"name"</span>,name);</span><br><span class="line">        User user = userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller层</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"myController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"userLogin"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 默认30分钟过期</span></span><br><span class="line">        <span class="comment">//永不过期,在登陆最开始加上</span></span><br><span class="line">        <span class="comment">//SecurityUtils.getSubject().getSession().setTimeout(-1000L);</span></span><br><span class="line">        <span class="comment">//其他时间 单位毫秒</span></span><br><span class="line">        <span class="comment">//SecurityUtils.getSubject().getSession().setTimeout(1800000);</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            subject.login(usernamePasswordToken);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建自定义realm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principals 权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> AuthorizationInfo&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义身份验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> AuthenticationInfo&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException 身份验证异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取用户身份信息</span></span><br><span class="line">        String name = token.getPrincipal().toString();</span><br><span class="line">        <span class="comment">//2. 调用业务层获取用户信息</span></span><br><span class="line">        User user = userService.getUserInfoByName(name);</span><br><span class="line">        <span class="comment">//3. 非空判断,将数据封装返回</span></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                    token.getPrincipal(),</span><br><span class="line">                    user.getPwd(),</span><br><span class="line">                    ByteSource.Util.bytes(<span class="string">"salt"</span>),</span><br><span class="line">                    name</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyRealm myRealm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置SecurityManager</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultWebSecurityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1创建defaultWebSecurityManager 对象</span></span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//2创建加密对象，设置相关属性</span></span><br><span class="line">        HashedCredentialsMatcher matcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">//2.1采用md5加密</span></span><br><span class="line">        matcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line">        <span class="comment">//2.2迭代加密次数</span></span><br><span class="line">        matcher.setHashIterations(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//3将加密对象存储到myRealm中</span></span><br><span class="line">        myRealm.setCredentialsMatcher(matcher);</span><br><span class="line">        <span class="comment">//4将myRealm存入defaultWebSecurityManager 对象</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(myRealm);</span><br><span class="line">        <span class="comment">//5返回</span></span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Shiro内置过滤器拦截范围</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultShiroFilterChainDefinition definition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">        <span class="comment">//设置不认证可以访问的资源</span></span><br><span class="line">        definition.addPathDefinition(<span class="string">"/myController/userLogin"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        definition.addPathDefinition(<span class="string">"/myController/login"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//设置需要进行登录认证的拦截范围</span></span><br><span class="line">        definition.addPathDefinition(<span class="string">"/**"</span>,<span class="string">"authc"</span>);</span><br><span class="line">        <span class="keyword">return</span>  definition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-前端thymeleaf整合">1.3 前端thymeleaf整合</h3><p>引入thymeleaf依赖后，在<code>resource/templares</code>创建<code>login.html</code>和<code>main.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--login.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shiro 登录认证<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/myController/userLogin"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--main.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Shiro 登录认证后主页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    登录用户为： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改造controller，让其返回走视图处理器，去除@ResponseBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"myController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳转登录页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"userLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//1 获取  Subject 对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//2 封装请求数据到 token 对象中</span></span><br><span class="line">        AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(username,password);</span><br><span class="line">        <span class="comment">//3 调用  login 方法进行登录认证</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            session.setAttribute(<span class="string">"user"</span>,token.getPrincipal().toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"登录失败"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"登录失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、多-realm-认证策略">2、多 realm 认证策略</h2><h3 id="2-1-实现原理">2.1 实现原理</h3><p>当应用程序配置多个 Realm 时，例如：<strong>用户名密码校验、手机号验证码校验等等</strong>。 Shiro 的 <code>ModularRealmAuthenticator </code>会使用内部的<code>AuthenticationStrategy </code>组件判断认证是成功还是失败。  </p><p><code>AuthenticationStrategy </code>是一个无状态的组件，它在身份验证尝试中被询问 4 次（这 4 次交互所需的任何必要的状态将被作为方法参数）：</p><ul><li>在所有 Realm 被调用之前</li><li>在调用 Realm 的 getAuthenticationInfo 方法之前</li><li>在调用 Realm 的 getAuthenticationInfo 方法之后</li><li>在所有 Realm 被调用之后</li></ul><p>认证策略的另外一项工作就是聚合所有 Realm 的结果信息封装至一个AuthenticationInfo 实例中，并将此信息返回，以此作为 Subject 的身份信息。Shiro 中定义了 3 种认证策略的实现：</p><table><thead><tr><th><strong>认证策略类</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>AtLeastOneSuccessfulStrategy</td><td>只要有一个（或更多）的 Realm 验证成功，那么认证将视为成功</td></tr><tr><td>FirstSuccessfulStrategy</td><td>第一个 Realm 验证成功，整体认证将视为成功，且后续 Realm 将被忽略</td></tr><tr><td>AllSuccessfulStrategy</td><td>所有 Realm 成功，认证才视为成功</td></tr></tbody></table><p><code>ModularRealmAuthenticator</code> 内置的认证策略默认实现是 <code>AtLeastOneSuccessfulStrategy</code> 方式。可以通过配置修改策略</p><h3 id="2-2-配置修改">2.2 配置修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultWebSecurityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1 创建  defaultWebSecurityManager 对象</span></span><br><span class="line">    DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    <span class="comment">//2 创建认证对象，并设置认证策略</span></span><br><span class="line">    ModularRealmAuthenticator modularRealmAuthenticator = <span class="keyword">new</span> ModularRealmAuthenticator();</span><br><span class="line">    modularRealmAuthenticator.setAuthenticationStrategy(<span class="keyword">new</span> AllSuccessfulStrategy());</span><br><span class="line">    defaultWebSecurityManager.setAuthenticator(modularRealmAuthenticator);</span><br><span class="line">    <span class="comment">//3 封装  myRealm 集合</span></span><br><span class="line">    List&lt;Realm&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(myRealm);</span><br><span class="line">    list.add(myRealm2);</span><br><span class="line">    <span class="comment">//4 将 myRealm 存入 defaultWebSecurityManager 对象</span></span><br><span class="line">    defaultWebSecurityManager.setRealms(list);</span><br><span class="line">    <span class="comment">//5 返回</span></span><br><span class="line">    <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、remember-me">3、remember me</h2><h3 id="3-1-实现原理">3.1 实现原理</h3><p>Shiro 提供了记住我（RememberMe）的功能，比如访问一些网站时，关闭了浏览器， 下次再打开时还是能记住你是谁， 下次访问时无需再登录即可访问。</p><p><strong>基本流程</strong></p><ul><li>首先在登录页面选中 RememberMe 然后登录成功；如果是浏览器登录，一般会 把 RememberMe 的 Cookie 写到客户端并保存下来；</li><li>关闭浏览器再重新打开；会发现浏览器还是记住你的；</li><li>访问一般的网页服务器端，仍然知道你是谁，且能正常访问；</li><li>但是，如果我们访问电商平台时，如果要查看我的订单或进行支付时，此时还是需要再进行身份认证的，以确保当前用户还是你。</li></ul><h3 id="3-2-代码实现">3.2 代码实现</h3><blockquote><p>过滤器可以参考：<a href="https://blog.csdn.net/m0_67266787/article/details/123792654" target="_blank" rel="noopener" title="Shiro学习之过滤器详解">Shiro学习之过滤器详解</a></p></blockquote><p>修改配置类，注意未认证的重定向在yml中进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyRealm myRealm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置 SecurityManager</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultWebSecurityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 创建  defaultWebSecurityManager 对象</span></span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//2 创建加密对象，并设置相关属性</span></span><br><span class="line">        HashedCredentialsMatcher matcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">//2.1 采用  md5 加密</span></span><br><span class="line">        matcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line">        <span class="comment">//2.2 迭代加密次数</span></span><br><span class="line">        matcher.setHashIterations(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//3 将加密对象存储到  myRealm 中</span></span><br><span class="line">        myRealm.setCredentialsMatcher(matcher);</span><br><span class="line">        <span class="comment">//4 将  myRealm 存入 defaultWebSecurityManager 对象</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(myRealm);</span><br><span class="line">        <span class="comment">//4.5 设置  rememberMe</span></span><br><span class="line">        defaultWebSecurityManager.setRememberMeManager(rememberMeManager());</span><br><span class="line">        <span class="comment">//5 返回</span></span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cookie 属性设置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">rememberMeCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleCookie cookie = <span class="keyword">new</span> SimpleCookie(<span class="string">"rememberMe"</span>);</span><br><span class="line">        <span class="comment">//设置跨域</span></span><br><span class="line">        <span class="comment">//cookie.setDomain(domain);</span></span><br><span class="line">        cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">        cookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">        cookie.setMaxAge(<span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> cookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Shiro 的  cookie 管理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CookieRememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line">        cookieRememberMeManager.setCookie(rememberMeCookie());</span><br><span class="line">        cookieRememberMeManager.setCipherKey(<span class="string">"1234567890987654"</span>.getBytes());</span><br><span class="line">        <span class="keyword">return</span> cookieRememberMeManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置 Shiro 内置过滤器拦截范围</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultShiroFilterChainDefinition definition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">        <span class="comment">//设置不认证可以访问的资源</span></span><br><span class="line">        definition.addPathDefinition(<span class="string">"/myController/userLogin"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        definition.addPathDefinition(<span class="string">"/myController/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//设置需要进行登录认证的拦截范围</span></span><br><span class="line">        definition.addPathDefinition(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="comment">//添加存在用户的过滤器（rememberMe）</span></span><br><span class="line">        definition.addPathDefinition(<span class="string">"/**"</span>, <span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span> definition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"myController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳转登录页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"userLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userLogin</span><span class="params">(String name, String pwd,</span></span></span><br><span class="line"><span class="function"><span class="params">                            @RequestParam(defaultValue = <span class="string">"false"</span>)</span><span class="keyword">boolean</span> rememberMe,</span></span><br><span class="line"><span class="function">                            HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//1获取subject对象</span></span><br><span class="line">        Subject subject  = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//2封装请求数据到token</span></span><br><span class="line">        AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(name,pwd,rememberMe);</span><br><span class="line">        <span class="comment">//3调用login方法进行登录认证</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="comment">//return "登录成功";</span></span><br><span class="line">            session.setAttribute(<span class="string">"user"</span>,token.getPrincipal().toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"登录失败"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"登录失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录认证验证rememberMe</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"userLoginRm"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userLogin</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">        session.setAttribute(<span class="string">"user"</span>,<span class="string">"rememberMe"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造login页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shiro 登录认证<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/myController/userLogin"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>记住用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"rememberMe"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、用户注销">4、用户注销</h2><p>用户登录后，配套的有登出操作。直接通过Shiro过滤器即可实现登出，首先修改main.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shiro 登录认证后主页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">登录用户为：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout"</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置类中添加logout过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span></span>&#123; </span><br><span class="line">    DefaultShiroFilterChainDefinition definition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">    <span class="comment">//设置不认证可以访问的资源</span></span><br><span class="line">    definition.addPathDefinition(<span class="string">"/myController/userLogin"</span>,<span class="string">"anon"</span>); </span><br><span class="line">    definition.addPathDefinition(<span class="string">"/myController/login"</span>,<span class="string">"anon"</span>); </span><br><span class="line">    <span class="comment">//配置登出过滤器</span></span><br><span class="line">    definition.addPathDefinition(<span class="string">"/logout"</span>,<span class="string">"logout"</span>); </span><br><span class="line">    <span class="comment">//设置需要进行登录认证的拦截范围</span></span><br><span class="line">    definition.addPathDefinition(<span class="string">"/**"</span>,<span class="string">"authc"</span>); </span><br><span class="line">    <span class="comment">//添加存在用户的过滤器（rememberMe） </span></span><br><span class="line">    definition.addPathDefinition(<span class="string">"/**"</span>,<span class="string">"user"</span>); </span><br><span class="line">    <span class="keyword">return</span>  definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、授权、角色认证">5、授权、角色认证</h2><p>用户登录后，需要验证是否具有指定角色指定权限。Shiro也提供了方便的工具进行判断。这个工具就是<strong>Realm的doGetAuthorizationInfo方法</strong>进行判断，触发权限判断的有两种方式</p><ul><li>在页面中通过<strong>shiro:属性判断</strong></li><li><strong>在接口服务中通过注解@Requires</strong>进行判断</li></ul><h3 id="5-1-后端接口服务注解">5.1 后端接口服务注解</h3><p>通过给接口服务方法添加注解可以实现权限校验，<strong>可以加在控制器方法上，也可以加<br>在业务方法上</strong>，一般加在控制器方法上。常用注解如下：</p><ul><li><p><code>@RequiresAuthentication</code>  </p><p>验证用户是否登录，等同于方法<strong>subject.isAuthenticated()</strong></p><p><code>@RequiresUser</code>  </p><p>验证用户是否被记忆：  登录认证成功<strong>subject.isAuthenticated()为true</strong> ；登录后被记忆<strong>subject.isRemembered()为true</strong></p></li><li><p><code>@RequiresGuest</code>  </p><p>验证是否是一个guest的请求，是否是游客的请求 ，此时<strong>subject.getPrincipal()为null</strong></p></li><li><p><code>@RequiresRoles</code>  </p><p>验证subject是否有相应角色，有角色访问方法，没有则会抛出异常 <code>AuthorizationException</code>。例如：<code>@RequiresRoles(&quot;aRoleName&quot;)  void someMethod();</code>  只有subject有aRoleName角色才能访问方法someMethod()</p></li><li><p><code>@RequiresPermissions</code>  </p><p>验证subject是否有相应权限，有权限访问方法，没有则会抛出异常 <code>AuthorizationException</code>。  </p><p>例如：<code>@RequiresPermissions (&quot;file:read&quot;,&quot;wite:aFile.txt&quot;) void someMethod();</code>subject必须同时含有file:read和wite:aFile.txt权限才能访问方someMethod()</p></li></ul><h3 id="5-2-授权验证-获取角色验证">5.2 授权验证-获取角色验证</h3><p>首先添加数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'编号'</span>, </span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色名'</span>,</span><br><span class="line">  <span class="string">`desc`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>,</span><br><span class="line">  <span class="string">`realname`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色显示名'</span>, </span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'角色表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`role_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'编号'</span>, </span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户  id'</span>,</span><br><span class="line">  <span class="string">`rid`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色  id'</span>, </span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'角色用户映射表'</span>;</span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT NAME FROM role WHERE id IN (SELECT rid FROM role_user WHERE uid=(SELECT id FROM USER WHERE NAME=#&#123;principal&#125;))"</span>)</span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getUserRoleInfoMapper</span><span class="params">(@Param(<span class="string">"principal"</span>)</span> String principal)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service服务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUserRoleInfo</span><span class="params">(String principal)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> userMapper.getUserRoleInfoMapper(principal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyRealm 授权认证方法改造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"进入自定义授权方法"</span>); </span><br><span class="line">    <span class="comment">//获取当前用户身份信息</span></span><br><span class="line">    String principal = principalCollection.getPrimaryPrincipal().toString();</span><br><span class="line">    <span class="comment">//调用接口方法获取用户的角色信息</span></span><br><span class="line">    List&lt;String&gt; roles = userService.getUserRoleInfo(principal); </span><br><span class="line">    System.out.println(<span class="string">"当前用户角色信息："</span>+roles);</span><br><span class="line">    <span class="comment">//创建对象，存储当前登录的用户的权限和角色</span></span><br><span class="line">    SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo(); </span><br><span class="line">    <span class="comment">//存储角色,测试的话可以直接塞String的角色</span></span><br><span class="line">    info.addRoles(roles);</span><br><span class="line">    <span class="comment">//返回 </span></span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后controller添加授权方法，在mian.html添加<code>&lt;a href=&quot;/myController/userLoginRoles&quot;&gt;测试授权-角色验证&lt;/a&gt;</code>测试链接即可进行测试(数据库数据自行添加)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录认证验证角色</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"userLoginRoles"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userLoginRoles</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"登录认证验证角色"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"验证角色成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-授权验证-获取权限验证">5.3 授权验证-获取权限验证</h3><p>创建权限数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`permissions`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'编号'</span>, </span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'权限名'</span>,</span><br><span class="line">  <span class="string">`info`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'权限信息'</span>, </span><br><span class="line">  <span class="string">`desc`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>, </span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'权限表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`role_ps`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'编号'</span>, </span><br><span class="line">  <span class="string">`rid`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色  id'</span>,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'权限  id'</span>, </span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'角色权限映射表'</span>;</span><br></pre></td></tr></table></figure><p>创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mapper类</span></span><br><span class="line"><span class="meta">@Select</span>(&#123;</span><br><span class="line">        <span class="string">"&lt;script&gt;"</span>,</span><br><span class="line">        <span class="string">"select info FROM permissions WHERE id IN "</span>,</span><br><span class="line">        <span class="string">"(SELECT pid FROM role_ps WHERE rid IN ("</span>,</span><br><span class="line">        <span class="string">"SELECT id FROM role WHERE NAME IN "</span>,</span><br><span class="line">        <span class="string">"&lt;foreach collection='roles' item='name' open='(' separator=',' close=')'&gt;"</span>,</span><br><span class="line">        <span class="string">"#&#123;name&#125;"</span>,</span><br><span class="line">        <span class="string">"&lt;/foreach&gt;"</span>,</span><br><span class="line">        <span class="string">"))"</span>,</span><br><span class="line">        <span class="string">"&lt;/script&gt;"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">getUserPermissionInfoMapper</span><span class="params">(@Param(<span class="string">"roles"</span>)</span>List&lt;String&gt; roles)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Service层</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUserPermissionInfo</span><span class="params">(List&lt;String&gt; roles)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> userMapper.getUserPermissionInfoMapper(roles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改MyRealm配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义授权方法：获取当前登录用户权限信息，返回给 Shiro 用来进行授权对比</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"进入自定义授权方法"</span>);</span><br><span class="line">    <span class="comment">//获取当前用户身份信息</span></span><br><span class="line">    String principal = principalCollection.getPrimaryPrincipal().toString();</span><br><span class="line">    <span class="comment">//调用接口方法获取用户的角色信息</span></span><br><span class="line">    List&lt;String&gt; roles = userService.getUserRoleInfo(principal);</span><br><span class="line">    System.out.println(<span class="string">"当前用户角色信息："</span>+roles);</span><br><span class="line">    <span class="comment">//调用接口方法获取用户角色的权限信息</span></span><br><span class="line">    List&lt;String&gt; permissions = userService.getUserPermissionInfo(roles);</span><br><span class="line">    System.out.println(<span class="string">"当前用户权限信息："</span>+permissions);</span><br><span class="line">    <span class="comment">//创建对象，存储当前登录的用户的权限和角色</span></span><br><span class="line">    SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">    <span class="comment">//存储角色</span></span><br><span class="line">    info.addRoles(roles);</span><br><span class="line">    <span class="comment">//存储权限信息</span></span><br><span class="line">    info.addStringPermissions(permissions);</span><br><span class="line">    <span class="comment">//返回 </span></span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录认证验证权限</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"user:delete"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"userPermissions"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userLoginPermissions</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"登录认证验证权限"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"验证权限成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改main.html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shiro 登录认证后主页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">登录用户为：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout"</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/myController/userLoginRoles"</span>&gt;</span>测试授权-角色验证<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/myController/userPermissions"</span>&gt;</span>测试授权-权限验证<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-权限验证异常处理类">5.4 权限验证异常处理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionsException</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UnauthorizedException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">unauthorizedException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"无权限"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(AuthorizationException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">authorizationException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"权限认证失败"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-前端页面授权验证">5.5 前端页面授权验证</h3><p>前端可以根据不同的权限显示不同的信息，首先添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置类，用于解析 thymeleaf 中的 shiro:相关属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Thymeleaf 中常用的 shiro:属性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--guest 标签：用户没有身份验证时显示相应信息，即游客访问信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:guest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:guest</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--user标签：用户已经身份验证/记住我登录后显示相应的信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:user</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--authenticated 标签：用户已经身份验证通过，即 Subject.login 登录成功，不是记住我登录的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:authenticated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:authenticated</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--notAuthenticated 标签：用户已经身份验证通过，即没有调用 Subject.login 进行登录，包括记住我自动登录的</span></span><br><span class="line"><span class="comment">也属于未进行身份验证--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:notAuthenticated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:notAuthenticated</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--principal 标签：当于((User)Subject.getPrincipals()).getUsername()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:</span> <span class="attr">principal</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:principal</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--lacksPermission 标签：如果当前 Subject 没有权限将显示 body 体内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:lacksPermission</span> <span class="attr">name</span>=<span class="string">"org:create"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:lacksPermission</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--hasRole标签：如果当前 Subject 有角色将显示 body 体内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"admin"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--hasAnyRoles 标签标签：如果当前 Subject 有任意一个角色（或的关系）将显示 body 体内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:hasAnyRoles</span> <span class="attr">name</span>=<span class="string">"admin,user"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:hasAnyRoles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--lacksRole标签：如果当前 Subject 没有角色将显示 body 体内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:lacksRole</span> <span class="attr">name</span>=<span class="string">"abc"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:lacksRole</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--lacksPermission 标签：如果当前 Subject 有权限将显示 body 体内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"user:create"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、缓存管理">6、缓存管理</h2><h3 id="6-1-缓存工具EhCache">6.1 缓存工具EhCache</h3><p>EhCache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存，Java EE和轻量级容器。可以和大部分Java项目无缝整合，例如：Hibernate中的缓存就是基于EhCache实现的。<strong>EhCache支持内存和磁盘存储，默认存储在内存中</strong>，如内存不够时把缓存数据同步到磁盘中。EhCache支持基于Filter的Cache实现，也支持Gzip压缩算法。</p><p>EhCache直接在JVM虚拟机中缓存，速度快，效率高；EhCache缺点是缓存共享麻烦，集群分布式应用使用不方便</p><h3 id="6-2-Ehcache简单搭建">6.2 Ehcache简单搭建</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--磁盘的缓存位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/ehcache"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxEntriesLocalDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--helloworld缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"HelloWorldCache"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统宕机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取编译目录下的资源的流对象</span></span><br><span class="line">    InputStream input = TestEH.class.getClassLoader().getResourceAsStream("ehcache.xml");</span><br><span class="line">    <span class="comment">//获取EhCache的缓存管理对象</span></span><br><span class="line">    CacheManager cacheManager = <span class="keyword">new</span> CacheManager(input);</span><br><span class="line">    <span class="comment">//获取缓存对象</span></span><br><span class="line">    Cache cache = cacheManager.getCache(<span class="string">"HelloWorldCache"</span>);</span><br><span class="line">    <span class="comment">//创建缓存数据</span></span><br><span class="line">    Element element = <span class="keyword">new</span> Element(<span class="string">"name"</span>,<span class="string">"shawn"</span>);</span><br><span class="line">    <span class="comment">//存入缓存</span></span><br><span class="line">    cache.put(element);</span><br><span class="line">    <span class="comment">//从缓存中取出数据输出</span></span><br><span class="line">    Element element1 = cache.get(<span class="string">"name"</span>);</span><br><span class="line">    System.out.println(<span class="string">"缓存中数据 = "</span> + element1.getObjectValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-Shiro整合EhCache">6.3 Shiro整合EhCache</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Shiro整合EhCache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在resources下添加配置文件<code>ehcache/ehcache-shiro.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">name</span>=<span class="string">"ehcache"</span> <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span> <span class="comment">&lt;!--磁盘的缓存位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span>/&gt;</span> <span class="comment">&lt;!--默认缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span> <span class="comment">&lt;!--登录认证信息缓存：缓存用户角色权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"loginRolePsCache"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">statistics</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后修改Shiro配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyRealm myRealm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置SecurityManager</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultWebSecurityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1创建defaultWebSecurityManager 对象</span></span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//2创建加密对象，设置相关属性</span></span><br><span class="line">        HashedCredentialsMatcher matcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">//2.1采用md5加密</span></span><br><span class="line">        matcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line">        <span class="comment">//2.2迭代加密次数</span></span><br><span class="line">        matcher.setHashIterations(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//3将加密对象存储到myRealm中</span></span><br><span class="line">        myRealm.setCredentialsMatcher(matcher);</span><br><span class="line">        <span class="comment">//4将myRealm存入defaultWebSecurityManager 对象</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(myRealm);</span><br><span class="line">        <span class="comment">//4.5设置rememberMe</span></span><br><span class="line">        defaultWebSecurityManager.setRememberMeManager(rememberMeManager());</span><br><span class="line">        <span class="comment">//4.6设置缓存管理器</span></span><br><span class="line">        defaultWebSecurityManager.setCacheManager(getEhCacheManager());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5返回</span></span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存管理器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EhCacheManager <span class="title">getEhCacheManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EhCacheManager ehCacheManager = <span class="keyword">new</span> EhCacheManager();</span><br><span class="line">        InputStream is =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = ResourceUtils.getInputStreamForPath(<span class="string">"classpath:ehcache/ehcache-shiro.xml"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        CacheManager cacheManager = <span class="keyword">new</span> CacheManager(is);</span><br><span class="line">        ehCacheManager.setCacheManager(cacheManager);</span><br><span class="line">        <span class="keyword">return</span> ehCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cookie 属性设置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">rememberMeCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleCookie cookie = <span class="keyword">new</span> SimpleCookie(<span class="string">"rememberMe"</span>);</span><br><span class="line">        <span class="comment">//设置跨域</span></span><br><span class="line">        <span class="comment">//cookie.setDomain(domain);</span></span><br><span class="line">        cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">        cookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">        cookie.setMaxAge(<span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> cookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Shiro 的  cookie 管理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CookieRememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line">        cookieRememberMeManager.setCookie(rememberMeCookie());</span><br><span class="line">        cookieRememberMeManager.setCipherKey(<span class="string">"1234567890987654"</span>.getBytes());</span><br><span class="line">        <span class="keyword">return</span> cookieRememberMeManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置 Shiro 内置过滤器拦截范围</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultShiroFilterChainDefinition definition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line">        <span class="comment">//设置不认证可以访问的资源</span></span><br><span class="line">        definition.addPathDefinition(<span class="string">"/myController/userLogin"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        definition.addPathDefinition(<span class="string">"/myController/login"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//配置登出过滤器</span></span><br><span class="line">        definition.addPathDefinition(<span class="string">"/logout"</span>,<span class="string">"logout"</span>);</span><br><span class="line">        <span class="comment">//设置需要进行登录认证的拦截范围</span></span><br><span class="line">        definition.addPathDefinition(<span class="string">"/**"</span>,<span class="string">"authc"</span>);</span><br><span class="line">        <span class="comment">//添加存在用户的过滤器（rememberMe）</span></span><br><span class="line">        definition.addPathDefinition(<span class="string">"/**"</span>,<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span>  definition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后访问权限测试，发现其成功缓存</p><h2 id="7、会话管理">7、会话管理</h2><h3 id="7-1-SessionManager">7.1 SessionManager</h3><p>会话管理器，负责创建和管理用户的会话（Session）生命周期，它能够在任何环境中在本地管理用户会话，即使没有Web/Servlet/EJB容器，也一样可以保存会话。默认情况下，Shiro会检测当前环境中现有的会话机制（比如Servlet容器）进行适配，如果没有（比如独立应用程序或者非Web环境），它将会使用内置的企业会话管理器来提供相应的会话管理服务，其中还涉及一个名为SessionDAO的对象。SessionDAO负责Session的持久化操作（CRUD），允许Session数据写入到后端持久化数据库</p><h3 id="7-2-会话管理实现">7.2 会话管理实现</h3><p>SessionManager由SecurityManager管理。Shiro提供了三种实现</p><ul><li>DefaultSessionManager：用于JavaSE环境</li><li>ServletContainerSessionManager：用于web环境，直接使用Servlet容器的会话</li><li>DefaultWebSessionManager：用于web环境，自己维护会话（不使用Servlet容器的会话管理）</li></ul><h3 id="7-3-获得session方式">7.3 获得session方式</h3><ul><li><strong>实现</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Session session = SecurityUtils.getSubject().getSession();</span><br><span class="line">session.setAttribute(<span class="string">"key"</span>,<span class="string">"value"</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>说明</strong></p><p> Controller中的request，在shiro过滤器中的doFilerInternal方法，被包装成ShiroHttpServletRequest。</p><p>SecurityManager和SessionManager会话管理器决定session来源于ServletRequest还是由Shiro管理的会话。 无论是通过request.getSession或subject.getSession获取到session，操作session，两者都是等价的。</p></li></ul><hr><p>参考：</p><p><a href="https://blog.csdn.net/m0_67401920/article/details/124022820" target="_blank" rel="noopener" title="shiro框架如何保持登录状态">shiro框架如何保持登录状态</a></p><p><a href="https://www.bilibili.com/video/BV11e4y1n7BH" target="_blank" rel="noopener" title="https://www.bilibili.com/video/BV11e4y1n7BH">https://www.bilibili.com/video/BV11e4y1n7BH</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Shiro概述&lt;/h1&gt;
&lt;h2 id=&quot;1、Shiro简介&quot;&gt;1、Shiro简介&lt;/h2&gt;
&lt;h3 id=&quot;1-1-介绍&quot;&gt;1.1 介绍&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://shiro.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://shiro.apache.org/&quot;&gt;https://shiro.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apache Shiro 是一个功能强大且易于使用的 Java 安全(权限)框架。Shiro 可以完成：认证、授权、加密、会话管理、与 Web 集成、缓存 等。借助 Shiro 您可以快速轻松地保护任何应用程序——从最小的移动应用程序到最大的 Web 和企业应用程序。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://blog.shawncoding.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Nginx自动封禁可疑Ip</title>
    <link href="https://blog.shawncoding.top/posts/4efc0d8e.html"/>
    <id>https://blog.shawncoding.top/posts/4efc0d8e.html</id>
    <published>2023-03-05T16:17:49.000Z</published>
    <updated>2023-03-05T16:39:55.189Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Nginx封禁ip</h1><h2 id="1、简介">1、简介</h2><p>在网站维护过程中，有时候我们需要对一些IP地址或是一些IP段进行封锁拉黑，使其不能访问网站。 如果你的网站服务器的网站运行环境是由nginx搭建的，那么nginx中禁止ip的方法可以有效的防止网站被黑。</p><a id="more"></a><h2 id="2、nignx-禁止IP访问">2、nignx 禁止IP访问</h2><h3 id="2-1-方法一">2.1 方法一</h3><ul><li>在 nginx 的安装目录中(一般在<code>/etc/nginx/</code>)，找到 nginx.conf 文件(可以看一下<code>access.log</code>日志在哪，后面脚本要用)，并在当前目录创建 <code>blocksip.conf</code> 文件</li><li>编辑 <code>blocksip.conf</code> 文件，并加入以下代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deny 127.0.0.1;</span><br><span class="line"><span class="comment"># 127.0.0.1 为要封禁的 IP 地址</span></span><br></pre></td></tr></table></figure><ul><li>编辑 nginx.conf 文件，在ngnix的HTTP的配置中添加如下内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据自己实际需求修改实际路径，这里暂时是当前目录</span></span><br><span class="line">include blocksip.conf;</span><br></pre></td></tr></table></figure><ul><li>重启 nginx 即可，然后你就会看到IP被封禁了，喜提403</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="2-2-方法二">2.2 方法二</h3><p>编辑 配置目录下的 <code>nginx.conf</code> 文件，在** http{} 或 server{}** 中添加以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deny 127.0.0.1;</span><br><span class="line"><span class="comment"># 127.0.0.1：为要封禁的 IP 地址</span></span><br><span class="line"><span class="comment"># 单个网站屏蔽IP的方法，放到网址对应的server&#123;&#125;模块</span></span><br><span class="line"><span class="comment"># 所有网站屏蔽IP的方法，放到http &#123;&#125;模块</span></span><br></pre></td></tr></table></figure><p>最后重启 nginx 即可</p><h2 id="3、关于-deny-的使用">3、关于 deny 的使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx封锁禁止单个IP</span></span><br><span class="line">deny 127.0.0.1;</span><br><span class="line"><span class="comment"># nginx 封锁禁止多个IP,多个IP地址由空格分开</span></span><br><span class="line">deny 127.0.0.1 196.0.0.1;</span><br><span class="line"><span class="comment"># nginx封整个段即从127.0.0.1到127.255.255.254的命令</span></span><br><span class="line">deny 127.0.0.0/8;</span><br><span class="line"><span class="comment"># nginx 封IP段即从127.255.0.1到127.255.255.254的命令</span></span><br><span class="line">deny 127.255.0.0/16</span><br><span class="line"><span class="comment"># nginx 封IP段即从127.255.255.1到127.255.255.254的命令是</span></span><br><span class="line">deny 127.255.255.0/24</span><br><span class="line"><span class="comment"># 屏蔽所有ip访问</span></span><br><span class="line">deny all;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许单个ip访问,和上面同理</span></span><br><span class="line">allow IP; </span><br><span class="line"><span class="comment"># 允许所有ip访问</span></span><br><span class="line">allow all;</span><br></pre></td></tr></table></figure><h1>二、脚本自动封禁Ip</h1><h2 id="1、流程介绍">1、流程介绍</h2><ul><li>AWK统计<code>access.log</code>(/var/log/nginx/)，记录每分钟访问超过60次的ip，然后配合nginx进行封禁</li><li>编写shell脚本</li><li>crontab定时跑脚本</li></ul><h2 id="2、脚本实战">2、脚本实战</h2><h3 id="2-1-核心脚本解释">2.1 核心脚本解释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $1&#125;'</span> access.log | sort | uniq -<span class="built_in">cd</span> | awk <span class="string">'&#123;if($1&gt;60)print $0&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>AWK统计<code>access.log</code>，记录每分钟访问超过60次的ip</li><li><code>awk '{print $1}' access.log</code>  取出access.log的第一列即为ip</li><li><code>sort | uniq -cd</code> 去重和排序</li><li><code>awk '{if($1&gt;60)print $0}'</code> 判断重复的数量是否超过60个，超过60个就展示出来</li></ul><h3 id="2-2-编写shell脚本">2.2 编写shell脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不能把别人IP一直封着吧，这里就清除掉了</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt; /usr/<span class="built_in">local</span>/nginx/conf/blockip.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#前面最开始编写的统计数据功能</span></span><br><span class="line">ip_list=$(awk <span class="string">'&#123;print $1&#125;'</span> access.log | sort | uniq -<span class="built_in">cd</span> | awk <span class="string">'&#123;if($1&gt;60)print $0&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断这个变量是否为空</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">"<span class="variable">$ip_list</span>"</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="comment">#为空写入 11.log中，并重新启动ngnix</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"为空"</span>  &gt;&gt; /usr/<span class="built_in">local</span>/nginx/logs/11.log</span><br><span class="line">        /usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="comment">#如果不为空 前面加上 deny格式和ip写入blockip.conf中</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"deny"</span> <span class="variable">$ip_list</span> &gt; /usr/<span class="built_in">local</span>/nginx/conf/blockip.conf</span><br><span class="line">   </span><br><span class="line">        <span class="comment">#因为前面携带了行数，所有我们需要去除掉前面的行数，写入后在读取一次</span></span><br><span class="line">        ip_list2=$(awk <span class="string">'&#123;print $3&#125;'</span> /usr/<span class="built_in">local</span>/nginx/conf/blockip.conf)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#最后再把读取出来的值，在次写入到blockip.conf中</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"deny"</span> <span class="variable">$ip_list2</span><span class="string">";"</span>&gt; /usr/<span class="built_in">local</span>/nginx/conf/blockip.conf</span><br><span class="line"></span><br><span class="line">        <span class="comment">#重启ngnix</span></span><br><span class="line">        /usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line">        <span class="comment">#清空之前的日志，从最新的开始截取</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">""</span> &gt; /usr/<span class="built_in">local</span>/nginx/logs/access.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="2-3-crontab定时">2.3 crontab定时</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crontab -e </span><br><span class="line">* * * * * <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/logs/ &amp;&amp; sh ip_test.sh  <span class="comment">#每一分钟运行一次</span></span><br><span class="line">systemctl restart crond.service <span class="comment">#重启一下配置既可</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Nginx封禁ip&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;在网站维护过程中，有时候我们需要对一些IP地址或是一些IP段进行封锁拉黑，使其不能访问网站。 如果你的网站服务器的网站运行环境是由nginx搭建的，那么nginx中禁止ip的方法可以有效的防止网站被黑。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.shawncoding.top/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://blog.shawncoding.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
</feed>
