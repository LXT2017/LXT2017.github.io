<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星的猫(&gt;^ω^&lt;)喵</title>
  
  
  <link href="https://www.shawn22.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.shawn22.xyz/"/>
  <updated>2022-07-11T12:11:48.625Z</updated>
  <id>https://www.shawn22.xyz/</id>
  
  <author>
    <name>Shawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java打印文件</title>
    <link href="https://www.shawn22.xyz/posts/70045a4c.html"/>
    <id>https://www.shawn22.xyz/posts/70045a4c.html</id>
    <published>2022-07-11T12:05:54.000Z</published>
    <updated>2022-07-11T12:11:48.625Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><p>在我们的实际工作中，经常需要实现打印功能。但由于历史原因，Java 提供的打印功能一直都比较弱。实际上最初的 jdk 根本不支持打印，直到 jdk1.1 才引入了很轻量的打印支持。实际上，SUN 公司也一直致力于 Java 打印功能的完善，而 Java2 平台则终于有了一个健壮的打印模式的开端， jdk1.4 则提供了一套完整的&quot;Java 打印服务 API&quot; （Java Print Service API），它对已有的打印功能是积极的补充。</p><a id="more"></a><p>这里打印对象主要是图片和pdf文件两种常见形式，其他office文件可以通过相应程序转成pdf进行打印，比如<strong>aspose(收费，需要破解)/openoffice(需要先搭建本地服务)/Jacob(只有windows)</strong></p><h1>二、打印实践</h1><p>首先要保证电脑GUI打印能正常运行，否则连打印机都没有连接，那怎么打印？</p><h2 id="1、JPG图片打印">1、JPG图片打印</h2><p>打印JPG图片格式的文件，本次采用的Java原生的打印方式。jdk1.4之后对打印功能有了很好的支持。Java 的打印 API 主要存在于<code> java.awt.print</code> 包中。而 jdk1.4 新增的类则主要存在于 javax.print 包及其相应的子包 <code>javax.print.event </code>和 <code>javax.print.attribute</code> 中。其中** javax.print 包中主要包含打印服务的相关类，而 javax.print.event 则包含打印事件的相关定义，javax.print.attribute 则包括打印服务的可用属性列表等**。可以很好的解决打印JPG图片格式的需求。</p><ul><li><p>优点：jdk的原生支持的打印功能，可直接使用，支持设置各项打印参数。</p></li><li><p>缺点：局限性较大，只能打印一些图片和文本格式的文件。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> printerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> PrintException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JPGPrint</span><span class="params">(File file,String printerName)</span> <span class="keyword">throws</span> PrintException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="keyword">null</span>||printerName==<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"缺少打印文件或者缺少打印机参数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        InputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置打印格式，如果未确定类型，可选择autosense</span></span><br><span class="line">            <span class="comment">// 设置为jpg格式</span></span><br><span class="line">            DocFlavor flavor = DocFlavor.INPUT_STREAM.JPEG;</span><br><span class="line">            <span class="comment">// 设置打印参数</span></span><br><span class="line">            PrintRequestAttributeSet hashset = <span class="keyword">new</span> HashPrintRequestAttributeSet();</span><br><span class="line">            <span class="comment">//份数</span></span><br><span class="line">            hashset.add(<span class="keyword">new</span> Copies(<span class="number">1</span>));</span><br><span class="line">            <span class="comment">//装订</span></span><br><span class="line">            <span class="comment">//hashset.add(Finishings.STAPLE);</span></span><br><span class="line">            <span class="comment">//单双面</span></span><br><span class="line">            hashset.add(Sides.DUPLEX);</span><br><span class="line">            <span class="comment">// 颜色</span></span><br><span class="line">            hashset.add(Chromaticity.COLOR);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 定位打印服务</span></span><br><span class="line">            PrintService printService = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (printerName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//获得本台电脑连接的所有打印机</span></span><br><span class="line">                PrintService[] printServices = PrinterJob.lookupPrintServices();</span><br><span class="line">                <span class="keyword">if</span>(printServices == <span class="keyword">null</span> || printServices.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">"打印失败，未找到可用打印机，请检查。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//匹配指定打印机</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; printServices.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (printServices[i].getName().contains(printerName)) &#123;</span><br><span class="line">                        printService = printServices[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(printService==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.print(<span class="string">"打印失败，未找到名称为"</span> + printerName + <span class="string">"的打印机，请检查。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 构造待打印的文件流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            Doc doc = <span class="keyword">new</span> SimpleDoc(fis, flavor, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 创建打印作业</span></span><br><span class="line">            DocPrintJob job = printService.createPrintJob();</span><br><span class="line">            job.print(doc, hashset);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e1) &#123;</span><br><span class="line">            System.err.println(<span class="string">"文件未找到"</span>);</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭打印的文件流</span></span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JPGPrint(<span class="keyword">new</span> File(<span class="string">"D:\\share\\111.jpg"</span>),<span class="string">"MI"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、图片-pdf原生打印">2、图片/pdf原生打印</h2><p>这里pdf打印可能和硬件有关系，需要安装Adobe Reader，而且现在pdf也不使用此方法打印，可以用作借鉴</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> printerName 打印机名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 打印份数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">paperPrint</span><span class="params">(File file, String printerName, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建打印请求属性集</span></span><br><span class="line">        DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;</span><br><span class="line">        <span class="comment">// 设置打印格式</span></span><br><span class="line">        PrintRequestAttributeSet pras = <span class="keyword">new</span> HashPrintRequestAttributeSet();</span><br><span class="line">        <span class="comment">// 查找所有的打印服务</span></span><br><span class="line">        PrintService[] printServices = PrintServiceLookup.lookupPrintServices(flavor, pras);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印服务</span></span><br><span class="line">        PrintService printService = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (PrintService ps : printServices) &#123;</span><br><span class="line">            String psName = ps.toString();</span><br><span class="line">            <span class="comment">// 选用指定打印机，需要精确查询打印机就用equals，模糊查询用contains，这里使用了模糊查找</span></span><br><span class="line">            <span class="keyword">if</span> (psName.contains(printerName)) &#123;</span><br><span class="line">                printService=ps;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果找不到打印机</span></span><br><span class="line">        <span class="keyword">if</span>(printService == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"找不到打印机"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 文件不存在</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists() || !file.isFile()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"文件不存在"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String fileName = file.getName();</span><br><span class="line">        <span class="comment">// 获取图片后缀名，设置打印文件格式</span></span><br><span class="line">        String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">switch</span> (suffix) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"jpg"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"jpeg"</span>:</span><br><span class="line">                flavor = DocFlavor.INPUT_STREAM.JPEG;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"png"</span>:</span><br><span class="line">                flavor = DocFlavor.INPUT_STREAM.PNG;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"pdf"</span>:</span><br><span class="line">                flavor = DocFlavor.INPUT_STREAM.PDF;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"gif"</span>:</span><br><span class="line">                flavor = DocFlavor.INPUT_STREAM.GIF;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.err.println(<span class="string">"其他类别文件不支持打印"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置打印文件名</span></span><br><span class="line">        pras.add(<span class="keyword">new</span> JobName(fileName, Locale.CHINA));</span><br><span class="line">        <span class="comment">// 设置打印方向</span></span><br><span class="line">        pras.add(OrientationRequested.LANDSCAPE);</span><br><span class="line">        <span class="comment">// 设置打印区域</span></span><br><span class="line">        <span class="comment">//MediaPrintableArea mp = new MediaPrintableArea(0, 100, 230, 203, Size2DSyntax.MM);</span></span><br><span class="line">        <span class="comment">//pras.add(mp);</span></span><br><span class="line">        <span class="comment">// 设置彩打或者黑白打印</span></span><br><span class="line">        pras.add(Chromaticity.MONOCHROME);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            HashDocAttributeSet das = <span class="keyword">new</span> HashDocAttributeSet();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">                <span class="comment">// 使用打印服务生成打印任务</span></span><br><span class="line">                DocPrintJob job = printService.createPrintJob();</span><br><span class="line">                <span class="comment">// 获取需要打印的文档类doc</span></span><br><span class="line">                SimpleDoc doc = <span class="keyword">new</span> SimpleDoc(fis, flavor, das);</span><br><span class="line">                <span class="comment">// 监听打印任务</span></span><br><span class="line">                job.addPrintJobListener(<span class="keyword">new</span> PrintJobListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDataTransferCompleted</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"成功发送任务："</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobCompleted</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"打印任务完成！"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobFailed</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"打印任务失败："</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobCanceled</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"取消打印任务！"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobNoMoreEvents</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"没有更多方法提供打印机调用！"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobRequiresAttention</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"纸张已用完"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                job.print(doc, pras);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrintException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        paperPrint(<span class="keyword">new</span> File(<span class="string">"D:\\share\\111.png"</span>),<span class="string">"MI"</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//paperPrint(new File("D:\\share\\123.pdf"),"MI",1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、PDF文件格式打印实现">3、PDF文件格式打印实现</h2><p>这里使用Apache <strong>PDFbox</strong>来实现进行PDF文件格式的打印。Apache PDFbox是一个开源的、基于Java的、支持PDF文档生成的工具库，它可以用于创建新的PDF文档，修改现有的PDF文档，还可以从PDF文档中提取所需的内容。Apache PDFBox还包含了数个命令行工具。在此，我们只研究打印功能。</p><ul><li>优点：功能强大，开源软件，较完美的解决了PDF格式文件的一系列处理，使用方便</li></ul><p>首先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrinterJob <span class="title">getPrintServiceByName</span><span class="params">(String printerName)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        PrinterJob job = PrinterJob.getPrinterJob();</span><br><span class="line">        <span class="comment">// 遍历查询打印机名称</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (PrintService ps : PrinterJob.lookupPrintServices()) &#123;</span><br><span class="line">            String psName = ps.toString();</span><br><span class="line">            <span class="comment">// 选用指定打印机，需要精确查询打印机就用equals，模糊查询用contains，这里使用了模糊查找</span></span><br><span class="line">            <span class="keyword">if</span> (psName.contains(printerName)) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                job.setPrintService(ps);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            System.err.println(<span class="string">"未找到打印机"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"打印失败，未找到名称为"</span> + printerName + <span class="string">"的打印机，请检查你的打印机名字"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取打印纸的大小范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Paper <span class="title">getPaper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Paper paper = <span class="keyword">new</span> Paper();</span><br><span class="line">        <span class="comment">// 默认为A4纸张，对应像素宽和高分别为 595, 842</span></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">595</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">842</span>;</span><br><span class="line">        <span class="comment">// 设置边距，单位是像素，10mm边距，对应 28px</span></span><br><span class="line">        <span class="keyword">int</span> marginLeft = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> marginRight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> marginTop = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> marginBottom = <span class="number">0</span>;</span><br><span class="line">        paper.setSize(width, height);</span><br><span class="line">        <span class="comment">// 下面一行代码，解决了打印内容为空的问题</span></span><br><span class="line">        paper.setImageableArea(marginLeft, marginRight, width - (marginLeft + marginRight), height - (marginTop + marginBottom));</span><br><span class="line">        <span class="keyword">return</span> paper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置打印属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">paperPDFPrint</span><span class="params">(PDDocument document, PrinterJob job)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置纸张及缩放</span></span><br><span class="line">            PDFPrintable pdfPrintable = <span class="keyword">new</span> PDFPrintable(document, Scaling.ACTUAL_SIZE);</span><br><span class="line">            <span class="comment">// 设置多页打印</span></span><br><span class="line">            Book book = <span class="keyword">new</span> Book();</span><br><span class="line">            <span class="comment">// 设置打印格式</span></span><br><span class="line">            PageFormat pageFormat = <span class="keyword">new</span> PageFormat();</span><br><span class="line">            <span class="comment">//设置纸张</span></span><br><span class="line">            pageFormat.setPaper(getPaper());</span><br><span class="line">            <span class="comment">// 设置打印纸的方向,这是纵向</span></span><br><span class="line">            pageFormat.setOrientation(PageFormat.PORTRAIT);</span><br><span class="line">            <span class="comment">// 设置一些属性 是否缩放 打印张数等</span></span><br><span class="line">            book.append(pdfPrintable, pageFormat, document.getNumberOfPages());</span><br><span class="line">            job.setPageable(book);</span><br><span class="line">            <span class="comment">// 设置打印份数</span></span><br><span class="line">            job.setCopies(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//添加打印属性</span></span><br><span class="line">            HashPrintRequestAttributeSet pars = <span class="keyword">new</span> HashPrintRequestAttributeSet();</span><br><span class="line">            <span class="comment">// 设置单双页</span></span><br><span class="line">            pars.add(Sides.ONE_SIDED);</span><br><span class="line">            <span class="comment">// 设置彩打或者黑白打印</span></span><br><span class="line">            pars.add(Chromaticity.MONOCHROME);</span><br><span class="line">            <span class="comment">// 打印质量</span></span><br><span class="line">            pars.add(PrintQuality.NORMAL);</span><br><span class="line">            <span class="comment">// 这是直接打印</span></span><br><span class="line">            job.print(pars);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrinterException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"未正常连接打印机"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.err.println(<span class="string">"打印机打印异常"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印pdf文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> printerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PDDocument <span class="title">printPdf</span><span class="params">(String pdfPath, String printerName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(pdfPath);</span><br><span class="line">        PDDocument document = PDDocument.load(file);</span><br><span class="line">        PrinterJob job = getPrintServiceByName(printerName);</span><br><span class="line">        paperPDFPrint(document, job);</span><br><span class="line">        <span class="keyword">return</span> document;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          printPdf(<span class="string">"D:\\share\\123.pdf"</span>,<span class="string">"MI"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/vatxiongxiaohui/article/details/83985896" target="_blank" rel="noopener" title="https://blog.csdn.net/vatxiongxiaohui/article/details/83985896">https://blog.csdn.net/vatxiongxiaohui/article/details/83985896</a></p><p><a href="https://blog.csdn.net/weixin_45944086/article/details/108148264" target="_blank" rel="noopener" title="https://blog.csdn.net/weixin_45944086/article/details/108148264">https://blog.csdn.net/weixin_45944086/article/details/108148264</a></p><p><a href="https://blog.csdn.net/weixin_46031754/article/details/121670267" target="_blank" rel="noopener" title="https://blog.csdn.net/weixin_46031754/article/details/121670267">https://blog.csdn.net/weixin_46031754/article/details/121670267</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;p&gt;在我们的实际工作中，经常需要实现打印功能。但由于历史原因，Java 提供的打印功能一直都比较弱。实际上最初的 jdk 根本不支持打印，直到 jdk1.1 才引入了很轻量的打印支持。实际上，SUN 公司也一直致力于 Java 打印功能的完善，而 Java2 平台则终于有了一个健壮的打印模式的开端， jdk1.4 则提供了一套完整的&amp;quot;Java 打印服务 API&amp;quot; （Java Print Service API），它对已有的打印功能是积极的补充。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://www.shawn22.xyz/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合office转换与预览</title>
    <link href="https://www.shawn22.xyz/posts/a7f4aa25.html"/>
    <id>https://www.shawn22.xyz/posts/a7f4aa25.html</id>
    <published>2022-07-11T11:59:32.000Z</published>
    <updated>2022-07-11T12:12:30.160Z</updated>
    
    <content type="html"><![CDATA[<h1>一、介绍</h1><h2 id="1、简介">1、简介</h2><p>有时候我们需要在程序中使用到office的转换和预览功能，本文就针对这个需求记录了两种较为简单的office转换和功能：aspose和jodconverter。当然还有其他开源第三方(<a href="https://kkfileview.keking.cn/zh-cn/index.html" target="_blank" rel="noopener" title="kkfileview">kkfileview</a>)</p><a id="more"></a><h2 id="2、aspose简介">2、aspose简介</h2><p>Aspose.Total是Aspose公司旗下的最全的一套office文档管理方案，主要提供.net跟java两个开发语言的控件套包，通过它，可以有计划地操纵一些商业中最流行的<a href="https://baike.so.com/doc/146245-154529.html" target="_blank" rel="noopener" title="文件格式">文件格式</a>：Word, Excel, PowerPoint, Project,等office文档以及PDF文档。</p><p>但是不足的是aspose包是收费的，并且单独收费，网上有很多资料和程序可以参考下载，这里提供一个下载地址<a href="https://download.csdn.net/download/lemon_TT/85099711" target="_blank" rel="noopener" title="aspose相关jar包下载">aspose相关jar包下载</a>；</p><h2 id="3、jodconverter简介">3、jodconverter简介</h2><p>JODConverter是 Java OpenDocument 转换器，可在不同办公格式之间转换文档。它利用Apache OpenOffice或LibreOffice，它们为当今可用的 OpenDocument 和 Microsoft Office 格式提供可以说是最好的免费导入/导出过滤器。<strong>JODConverter自动执行 OpenOffice/LibreOffice 支持的所有转换</strong>。但要求在本机率先安装好相应的程序，目标是完成<strong>office文档-&gt;pdf</strong></p><p>但是其优点是免费，可以在win/linux上使用，这里更加推荐libreoffice</p><ul><li><p><a href="https://zh-cn.libreoffice.org/download/libreoffice/" target="_blank" rel="noopener" title="libreoffice官网下载地址">libreoffice官网下载地址</a></p></li><li><p><a href="https://www.openoffice.org/zh-cn/download/" target="_blank" rel="noopener" title="openoffice官网下载地址">openoffice官网下载地址</a></p></li></ul><h1>二、springboot整合aspose实战</h1><h2 id="1、前期依赖准备">1、前期依赖准备</h2><h3 id="1-1-介绍">1.1 介绍</h3><p>下载好相关依赖包后，就需要在springboot项目里引入相关jar包还有<code>License.xml</code>文件，<code>License.xml</code>文件就放在<strong>reseources</strong>目录下，这里有两种方式引入jar包，项目直接引入以及在maven添加本地包，其中<code>License.xml</code>文件内容如下，word,excel转pdf可共用一个license.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">License</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Products</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Product</span>&gt;</span>Aspose.Total for Java<span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Product</span>&gt;</span>Aspose.Excel for Java<span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Products</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditionType</span>&gt;</span>Enterprise<span class="tag">&lt;/<span class="name">EditionType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SubscriptionExpiry</span>&gt;</span>20991231<span class="tag">&lt;/<span class="name">SubscriptionExpiry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LicenseExpiry</span>&gt;</span>20991231<span class="tag">&lt;/<span class="name">LicenseExpiry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SerialNumber</span>&gt;</span>8bfe198c-7f0c-4ef8-8ff0-acc3237bf0d7<span class="tag">&lt;/<span class="name">SerialNumber</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Signature</span>&gt;</span>sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=<span class="tag">&lt;/<span class="name">Signature</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">License</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-项目直接引入jar包">1.2 项目直接引入jar包</h3><p>其他三个包同理<br><img src="https://img-blog.csdnimg.cn/1d7b401bc8a4493b9d3a0531c1579023.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加本地的jacob.jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aspose<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="comment">&lt;!--自定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspose-slides<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="comment">&lt;!--自定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>15.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  <span class="comment">&lt;!--自定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/lib/aspose.slides-15.9.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果把lib放在和pom.xml同级目录下--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;systemPath&gt;$&#123;pom.basedir&#125;/lib/aspose.slides-15.9.0.jar&lt;/systemPath&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后在pom.xml引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-maven添加本地包">1.3 maven添加本地包</h3><p>其他三个包同理，直接在命令行添加安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file  -Dfile=D:\share\aspose\jar\aspose-words-14.9.0-jdk16.jar -DgroupId=com.aspose -DartifactId=aspose-words -Dversion=14.9.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure><p>其次在pom.xml文件上直接使用即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aspose<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspose-words<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>14.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、office转pdf实现">2、office转pdf实现</h2><p>这里主要介绍word/ppt/excel转pdf以及其在线预览，另外还有pdf转png/jpg</p><blockquote><p>文件上传可以参考<a href="https://blog.csdn.net/lemon_TT/article/details/121688406" target="_blank" rel="noopener" title="SpringBoot文件上传与校验">SpringBoot文件上传与校验</a></p></blockquote><h3 id="2-1-word转pdf">2.1 word转pdf</h3><p>这里还可以控制生成水印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aspose.words.*;</span><br><span class="line"><span class="keyword">import</span> com.aspose.words.Shape;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * word转pdf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordToPdfUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  word转pdf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inPath word文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outPath 输出路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doc2pdf</span><span class="params">(String inPath, String outPath)</span> </span>&#123;</span><br><span class="line">        String str =<span class="string">"sdojfiosdjoifjiosiojsdf"</span>;</span><br><span class="line">        FileOutputStream os =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 新建一个空白pdf文档</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(outPath);</span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="comment">// Address是将要被转化的word文档</span></span><br><span class="line">            Document doc = <span class="keyword">new</span> Document(inPath);</span><br><span class="line">            <span class="comment">//添加水印</span></span><br><span class="line">            insertWatermarkText(doc,str);</span><br><span class="line">            <span class="comment">//保存pdf文件</span></span><br><span class="line">            <span class="comment">//全面支持DOC, DOCX, OOXML, RTF HTML, OpenDocument, PDF, EPUB, XPS, SWF 相互转换</span></span><br><span class="line">            doc.save(os, SaveFormat.PDF);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: PDF生成水印</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertWatermarkText</span><span class="params">(Document doc, String watermarkText)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!watermarkText.equals(<span class="string">""</span>)&amp;&amp;<span class="keyword">null</span>!=watermarkText)&#123;</span><br><span class="line">            Shape watermark = <span class="keyword">new</span> Shape(doc, ShapeType.TEXT_PLAIN_TEXT);</span><br><span class="line">            <span class="comment">//水印内容</span></span><br><span class="line">            watermark.getTextPath().setText(watermarkText);</span><br><span class="line">            <span class="comment">//水印字体</span></span><br><span class="line">            watermark.getTextPath().setFontFamily(<span class="string">"宋体"</span>);</span><br><span class="line">            <span class="comment">//水印宽度</span></span><br><span class="line">            watermark.setWidth(<span class="number">400</span>);</span><br><span class="line">            <span class="comment">//水印高度</span></span><br><span class="line">            watermark.setHeight(<span class="number">100</span>);</span><br><span class="line">            <span class="comment">//旋转水印</span></span><br><span class="line">            watermark.setRotation(-<span class="number">30</span>);</span><br><span class="line">            <span class="comment">//水印颜色</span></span><br><span class="line">            watermark.getFill().setColor(Color.lightGray);</span><br><span class="line">            watermark.setStrokeColor(Color.lightGray);</span><br><span class="line">            watermark.setRelativeHorizontalPosition(RelativeHorizontalPosition.PAGE);</span><br><span class="line">            watermark.setRelativeVerticalPosition(RelativeVerticalPosition.PAGE);</span><br><span class="line">            watermark.setWrapType(WrapType.NONE);</span><br><span class="line">            watermark.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">            watermark.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            Paragraph watermarkPara = <span class="keyword">new</span> Paragraph(doc);</span><br><span class="line">            watermarkPara.appendChild(watermark);</span><br><span class="line">            <span class="keyword">for</span> (Section sect : doc.getSections())</span><br><span class="line">            &#123;</span><br><span class="line">                insertWatermarkIntoHeader(watermarkPara, sect, HeaderFooterType.HEADER_PRIMARY);</span><br><span class="line">                insertWatermarkIntoHeader(watermarkPara, sect, HeaderFooterType.HEADER_FIRST);</span><br><span class="line">                insertWatermarkIntoHeader(watermarkPara, sect, HeaderFooterType.HEADER_EVEN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertWatermarkIntoHeader</span><span class="params">(Paragraph watermarkPara, Section sect, <span class="keyword">int</span> headerType)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HeaderFooter header = sect.getHeadersFooters().getByHeaderFooterType(headerType);</span><br><span class="line">        <span class="keyword">if</span> (header == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            header = <span class="keyword">new</span> HeaderFooter(sect.getDocument(), headerType);</span><br><span class="line">            sect.getHeadersFooters().add(header);</span><br><span class="line">        &#125;</span><br><span class="line">        header.appendChild(watermarkPara.deepClone(<span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        doc2pdf(<span class="string">"D:\\share\\1234.doc"</span>,<span class="string">"D:\\share\\1234.pdf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Excel转pdf">2.2 Excel转pdf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aspose.cells.License;</span><br><span class="line"><span class="keyword">import</span> com.aspose.cells.PdfSaveOptions;</span><br><span class="line"><span class="keyword">import</span> com.aspose.cells.SaveFormat;</span><br><span class="line"><span class="keyword">import</span> com.aspose.cells.Workbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel转pdf帮助类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelToPdfUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * excel转pdf方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Address 原路径excel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> putPath 转换pdf后的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">excel2pdf</span><span class="params">(String Address, String putPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 验证License 若不验证则转化出的pdf文档会有水印产生</span></span><br><span class="line">        <span class="keyword">if</span> (!getLicense()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOS=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 原始excel路径</span></span><br><span class="line">            Workbook wb = <span class="keyword">new</span> Workbook(Address);</span><br><span class="line"></span><br><span class="line">            fileOS = <span class="keyword">new</span> FileOutputStream(putPath);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] autoDrawSheets=&#123;<span class="number">3</span>&#125;;</span><br><span class="line">            <span class="comment">//当excel中对应的sheet页宽度太大时，在PDF中会拆断并分页。此处等比缩放。</span></span><br><span class="line">            autoDraw(wb,autoDrawSheets);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] showSheets=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="comment">//隐藏workbook中不需要的sheet页。</span></span><br><span class="line">            printSheetPage(wb,showSheets);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置一页，即长页</span></span><br><span class="line">            <span class="comment">// PdfSaveOptions pdfSaveOptions = new PdfSaveOptions();</span></span><br><span class="line">            <span class="comment">// pdfSaveOptions.setOnePagePerSheet(true);</span></span><br><span class="line">            <span class="comment">// wb.save(fileOS, pdfSaveOptions);</span></span><br><span class="line"></span><br><span class="line">            wb.save(fileOS,SaveFormat.PDF);</span><br><span class="line">            fileOS.flush();</span><br><span class="line">            fileOS.close();</span><br><span class="line">            System.out.println(<span class="string">"转换完毕"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            fileOS.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置打印的sheet 自动拉伸比例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wb</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 自动拉伸的页的sheet数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">autoDraw</span><span class="params">(Workbook wb,<span class="keyword">int</span>[] page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=page&amp;&amp;page.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; page.length; i++) &#123;</span><br><span class="line">                wb.getWorksheets().get(i).getHorizontalPageBreaks().clear();</span><br><span class="line">                wb.getWorksheets().get(i).getVerticalPageBreaks().clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 隐藏workbook中不需要的sheet页。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wb</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 显示页的sheet数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSheetPage</span><span class="params">(Workbook wb,<span class="keyword">int</span>[] page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">1</span>; i &lt; wb.getWorksheets().getCount(); i++)  &#123;</span><br><span class="line">            wb.getWorksheets().get(i).setVisible(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==page||page.length==<span class="number">0</span>)&#123;</span><br><span class="line">            wb.getWorksheets().get(<span class="number">0</span>).setVisible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; page.length; i++) &#123;</span><br><span class="line">                wb.getWorksheets().get(i).setVisible(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLicense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = ExcelToPdfUtils<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">                            .<span class="title">getClassLoader</span>()</span></span><br><span class="line">                            .getResourceAsStream("license.xml");</span><br><span class="line">            <span class="comment">// license.xml这个文件你放在静态文件资源目录下就行了</span></span><br><span class="line">            License aposeLic = <span class="keyword">new</span> License();</span><br><span class="line">            aposeLic.setLicense(is);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        excel2pdf(<span class="string">"D:\\share\\excel.xlsx"</span>,<span class="string">"D:\\share\\excel.pdf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-ppt转pdf">2.3 ppt转pdf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aspose.slides.License;</span><br><span class="line"><span class="keyword">import</span> com.aspose.slides.Presentation;</span><br><span class="line"><span class="keyword">import</span> com.aspose.slides.SaveFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ppt 转pdf  帮助类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PptToPdfUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取license</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLicense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// license路径</span></span><br><span class="line">            InputStream license = PptToPdfUtils.class.getClassLoader().getResourceAsStream("license.xml");</span><br><span class="line">            License aposeLic = <span class="keyword">new</span> License();</span><br><span class="line">            aposeLic.setLicense(license);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ppt 转pdf 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Address ppt原路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outPath pdf转出路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ppt2pdf</span><span class="params">(String Address,String outPath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 验证License</span></span><br><span class="line">        <span class="keyword">if</span> (!getLicense()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 输出pdf路径</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(outPath);</span><br><span class="line">            <span class="comment">//输入ppt路径</span></span><br><span class="line">            Presentation pres = <span class="keyword">new</span> Presentation(Address);</span><br><span class="line">            FileOutputStream fileOS = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            pres.save(fileOS, SaveFormat.Pdf);</span><br><span class="line">            fileOS.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ppt2pdf(<span class="string">"D:\\share\\ppt.pptx"</span>,<span class="string">"D:\\share\\ppt.pdf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-pdf转图片">2.4 pdf转图片</h3><p>首先需要在pom.xml中引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工具类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.PDDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.PDPageTree;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.rendering.PDFRenderer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pdf 转图片 帮助类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PdftoImageUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  pdf 转图片方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address pdf原文件地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toImagepath  转换后图片存放地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>   图片地址集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">pdfToImageFile</span><span class="params">(String address, String toImagepath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PDDocument doc = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        InputStream stream = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// pdf路径</span></span><br><span class="line">            stream = <span class="keyword">new</span> FileInputStream(address);</span><br><span class="line">            <span class="comment">// 加载解析PDF文件</span></span><br><span class="line">            doc = PDDocument.load(stream);</span><br><span class="line">            PDFRenderer pdfRenderer = <span class="keyword">new</span> PDFRenderer(doc);</span><br><span class="line">            PDPageTree pages = doc.getPages();</span><br><span class="line">            <span class="keyword">int</span> pageCount = pages.getCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageCount; i++) &#123;</span><br><span class="line">                BufferedImage bim = pdfRenderer.renderImageWithDPI(i, <span class="number">200</span>);</span><br><span class="line">                os = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                ImageIO.write(bim, <span class="string">"jpg"</span>, os);</span><br><span class="line">                <span class="keyword">byte</span>[] dataList = os.toByteArray();</span><br><span class="line">                <span class="comment">//获取当前时间  保存图片规则</span></span><br><span class="line">                Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                <span class="comment">//可以方便地修改日期格式</span></span><br><span class="line">                SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>);</span><br><span class="line">                String format = dateFormat.format(date).replace(<span class="string">":"</span>,<span class="string">"/"</span>);</span><br><span class="line">                <span class="comment">//随机数</span></span><br><span class="line">                <span class="keyword">int</span> anInt = <span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>);</span><br><span class="line">                String imageAddress=toImagepath+<span class="string">"/"</span>+format+<span class="string">"/hello_"</span> + anInt + <span class="string">".jpg"</span>;</span><br><span class="line">                strings.add(imageAddress);</span><br><span class="line">                <span class="comment">// jpg文件转出路径</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(imageAddress);</span><br><span class="line">                <span class="keyword">if</span> (!file.getParentFile().exists()) &#123;</span><br><span class="line">                    <span class="comment">// 不存在则创建父目录及子文件</span></span><br><span class="line">                    file.getParentFile().mkdirs();</span><br><span class="line">                    file.createNewFile();</span><br><span class="line">                &#125;</span><br><span class="line">                out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                out.write(dataList);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> strings;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (doc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                doc.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        pdfToImageFile(<span class="string">"D:\\share\\菜单.pdf"</span>,<span class="string">"D:\\share\\菜单.jpg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-pdf添加水印">2.5 pdf添加水印</h3><p>首先添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itextpdf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext-asian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工具包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itextpdf.text.DocumentException;</span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.Element;</span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.Rectangle;</span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.pdf.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给pdf添加水印工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PdfWithWatermarkUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * pdf添加水印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputFile 需要添加水印的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile 添加完水印的文件存放路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cover 是否覆盖</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">addwaterMark</span><span class="params">(String inputFile, String outputFile,<span class="keyword">boolean</span> cover)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String waterMarkName = <span class="string">"测试水印"</span>;</span><br><span class="line">        <span class="comment">//水印字体透明度</span></span><br><span class="line">        <span class="keyword">float</span> opacity = <span class="number">0.3f</span>;</span><br><span class="line">        <span class="comment">//水印字体大小</span></span><br><span class="line">        <span class="keyword">int</span> fontsize = <span class="number">30</span>;</span><br><span class="line">        <span class="comment">//水印倾斜角度（0-360）</span></span><br><span class="line">        <span class="keyword">int</span> angle = <span class="number">30</span>;</span><br><span class="line">        <span class="comment">//数值越大每页竖向水印越少</span></span><br><span class="line">        <span class="keyword">int</span> heightdensity = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//数值越大每页横向水印越少</span></span><br><span class="line">        <span class="keyword">int</span> widthdensity = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!cover)&#123;</span><br><span class="line">            File file=<span class="keyword">new</span> File(outputFile);</span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        File file=<span class="keyword">new</span> File(inputFile);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PdfReader reader = <span class="keyword">null</span>;</span><br><span class="line">        PdfStamper stamper = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> interval = -<span class="number">5</span>;</span><br><span class="line">            reader = <span class="keyword">new</span> PdfReader(inputFile);</span><br><span class="line">            stamper = <span class="keyword">new</span> PdfStamper(reader, <span class="keyword">new</span> FileOutputStream(outputFile));</span><br><span class="line">            BaseFont base = BaseFont.createFont(<span class="string">"STSong-Light"</span>, <span class="string">"UniGB-UCS2-H"</span>, BaseFont.EMBEDDED);</span><br><span class="line">            Rectangle pageRect = <span class="keyword">null</span>;</span><br><span class="line">            PdfGState gs = <span class="keyword">new</span> PdfGState();</span><br><span class="line">            <span class="comment">//这里是透明度设置</span></span><br><span class="line">            gs.setFillOpacity(opacity);</span><br><span class="line">            <span class="comment">//这里是条纹不透明度</span></span><br><span class="line">            gs.setStrokeOpacity(<span class="number">0.2f</span>);</span><br><span class="line">            <span class="keyword">int</span> total = reader.getNumberOfPages() + <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Pdf页数："</span> + reader.getNumberOfPages());</span><br><span class="line">            JLabel label = <span class="keyword">new</span> JLabel();</span><br><span class="line">            FontMetrics metrics;</span><br><span class="line">            <span class="keyword">int</span> textH = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> textW = <span class="number">0</span>;</span><br><span class="line">            label.setText(waterMarkName);</span><br><span class="line">            metrics = label.getFontMetrics(label.getFont());</span><br><span class="line">            <span class="comment">//字符串的高,   只和字体有关</span></span><br><span class="line">            textH = metrics.getHeight();</span><br><span class="line">            <span class="comment">//字符串的宽</span></span><br><span class="line">            textW = metrics.stringWidth(label.getText());</span><br><span class="line">            PdfContentByte under;</span><br><span class="line">            <span class="comment">//这个循环是确保每一张PDF都加上水印</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; total; i++) &#123;</span><br><span class="line">                pageRect = reader.getPageSizeWithRotation(i);</span><br><span class="line">                under = stamper.getOverContent(i);  <span class="comment">//在内容上方添加水印</span></span><br><span class="line">                <span class="comment">//under = stamper.getUnderContent(i);  //在内容下方添加水印</span></span><br><span class="line">                under.saveState();</span><br><span class="line">                under.setGState(gs);</span><br><span class="line">                under.beginText();</span><br><span class="line">                <span class="comment">//under.setColorFill(BaseColor.PINK);  //添加文字颜色  不能动态改变 放弃使用</span></span><br><span class="line">                under.setFontAndSize(base, fontsize); <span class="comment">//这里是水印字体大小</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> height = textH; height &lt; pageRect.getHeight() * <span class="number">2</span>; height = height + textH * heightdensity) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> width = textW; width &lt; pageRect.getWidth() * <span class="number">1.5</span> + textW; width = width + textW * widthdensity) &#123;</span><br><span class="line">                        <span class="comment">// rotation:倾斜角度</span></span><br><span class="line">                        under.showTextAligned(Element.ALIGN_LEFT, waterMarkName, width - textW, height - textH, angle);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//添加水印文字</span></span><br><span class="line">                under.endText();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"添加水印成功！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加水印失败！错误信息为: "</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加水印失败！错误信息为: "</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">if</span> (stamper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stamper.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、office在线预览-简单版">3、office在线预览(简单版)</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">upload:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\\share\\</span></span><br></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 查看对应的.pdf文件是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2021/3/12</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkFileExist</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="comment">// 文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;<span class="comment">//文件是否存在</span></span><br><span class="line">            file.delete();<span class="comment">//删除文件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> WXK</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 返回预览pdf流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2021/3/11</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">previewFile</span><span class="params">(String filePath, HttpServletResponse res)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 发送给客户端的数据</span></span><br><span class="line">        OutputStream outputStream = res.getOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 读取filename</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(filePath));</span><br><span class="line">            <span class="keyword">int</span> i = bis.read(buff);</span><br><span class="line">            <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buff, <span class="number">0</span>, buff.length);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">                i = bis.read(buff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller层，启动后访问接口即可成功在线预览，还可以直接下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.mx80.utils.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;upload.path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String path;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"preview"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">previewFile</span><span class="params">(String fileName, HttpServletResponse response)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//response.setContentType("text/html;charset=UTF-8");</span></span><br><span class="line">            String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"PDF"</span>.equalsIgnoreCase(suffix))&#123;</span><br><span class="line">                String newFileName = <span class="keyword">new</span> String(fileName.getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1);</span><br><span class="line">                <span class="comment">// 设置扩展头，当Content-Type 的类型为要下载的类型时 , 这个信息头会告诉浏览器这个文件的名字和类型。</span></span><br><span class="line">                <span class="comment">//response.setHeader("Content-Disposition", "attachment;filename=" + newFileName);</span></span><br><span class="line">                <span class="keyword">if</span>(FileUtil.checkFileExist(path + fileName))&#123;</span><br><span class="line">                    FileUtil.previewFile(path + fileName,response);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String oldPath = path + fileName;</span><br><span class="line">            String filePath = path + fileName.substring(<span class="number">0</span>,fileName.lastIndexOf(<span class="string">"."</span>)) + <span class="string">".pdf"</span>;</span><br><span class="line">            <span class="keyword">if</span>( FileUtil.checkFileExist(filePath))&#123;</span><br><span class="line">                FileUtil.previewFile(filePath,response);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"XLSX"</span>.equalsIgnoreCase(suffix) || <span class="string">"XLS"</span>.equalsIgnoreCase(suffix))&#123;</span><br><span class="line">                    ExcelToPdfUtils.excel2pdf(oldPath,filePath);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"PPT"</span>.equalsIgnoreCase(suffix)||<span class="string">"pptx"</span>.equalsIgnoreCase(suffix))&#123;</span><br><span class="line">                    PptToPdfUtils.ppt2pdf(oldPath,filePath);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//DOC, DOCX, OOXML, RTF HTML, OpenDocument, PDF, EPUB, XPS, SWF</span></span><br><span class="line">                    WordToPdfUtils.doc2pdf(oldPath,filePath);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(FileUtil.checkFileExist(filePath))&#123;</span><br><span class="line">                    FileUtil.previewFile(filePath,response);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 转换完毕删除文件</span></span><br><span class="line">                <span class="comment">//FileUtil.deleteFile(filePath);</span></span><br><span class="line">                System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"previewPdf"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">previewPdf</span><span class="params">(String fileName, HttpServletResponse response)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//response.setContentType("text/html;charset=UTF-8");</span></span><br><span class="line">            String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"PDF"</span>.equalsIgnoreCase(suffix))&#123;</span><br><span class="line">                String realFileName = fileName.substring(<span class="number">0</span>,fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">                String inPath = path + fileName;</span><br><span class="line">                String outPath = path + realFileName + <span class="string">"(水印).pdf"</span>;</span><br><span class="line">                String newFileName = <span class="keyword">new</span> String(fileName.getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1);</span><br><span class="line">                <span class="comment">// 设置扩展头，当Content-Type 的类型为要下载的类型时 , 这个信息头会告诉浏览器这个文件的名字和类型。</span></span><br><span class="line">                <span class="comment">//response.setHeader("Content-Disposition", "attachment;filename=" + newFileName);</span></span><br><span class="line">                PdfWithWatermarkUtils.addwaterMark(inPath,outPath,<span class="keyword">true</span>);</span><br><span class="line">                FileUtil.previewFile(outPath,response);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 转换完毕删除文件</span></span><br><span class="line">                <span class="comment">//FileUtil.deleteFile(outPath);</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">"文件不是pdf"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、SpringBoot集成jodconverter实战</h1><h2 id="1、前期依赖准备-v2">1、前期依赖准备</h2><p>首先下载好OpenOffice或LibreOffice，并在<code>pom.xml</code>引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--转换工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jodconverter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jodconverter-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jodconverter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jodconverter-local<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jodconverter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jodconverter-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其次在<code>application.yml</code>设置相关参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># word 转 pdf 相关配置</span></span><br><span class="line"><span class="attr">jodconverter:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="comment"># 嵌入式调用</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># libreOffice根目录</span></span><br><span class="line">    <span class="comment">#    office-home: /opt/libreoffice7.2</span></span><br><span class="line">    <span class="attr">officeHome:</span> <span class="string">C:\Program</span> <span class="string">Files\LibreOffice</span></span><br><span class="line">    <span class="comment"># 任务执行的超时时间 默认120000 毫秒</span></span><br><span class="line">    <span class="attr">taskExecutionTimeout:</span> <span class="number">12000</span></span><br><span class="line">    <span class="comment"># 任务队列的超时时间 默认30000 毫秒</span></span><br><span class="line">    <span class="attr">taskQueueTimeout:</span> <span class="number">120000</span></span><br><span class="line">    <span class="comment"># 端口（线程）</span></span><br><span class="line">    <span class="attr">portNumbers:</span> <span class="string">[</span> <span class="number">2002</span><span class="string">,</span> <span class="number">2003</span><span class="string">,</span> <span class="number">2004</span><span class="string">,</span> <span class="number">2005</span> <span class="string">]</span></span><br><span class="line">    <span class="comment"># 一个进程的超时时间 默认120000 毫秒</span></span><br><span class="line">    <span class="attr">processTimeout:</span> <span class="number">120000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 文件上传限制大小</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">10MB</span></span><br></pre></td></tr></table></figure><h2 id="2、office转pdf实战">2、office转pdf实战</h2><p>这里是我的controller类，可以简单参考，这里只做了文件上传和下载，预览和下载其实一个道理，可以参考上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JodService jodService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/upload"</span>, consumes = <span class="string">"multipart/*"</span>, headers = <span class="string">"content-type=multipart/form-data"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">uploadPolicy</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过request拿到上传文件的用户的用户名</span></span><br><span class="line">        HttpServletRequest request =</span><br><span class="line">                ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">        Principal userPrincipal = request.getUserPrincipal();</span><br><span class="line">        String s = jodService.uploadPolicy(file);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/codpreview"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;InputStreamSource&gt; <span class="title">previewPolicy</span><span class="params">(HttpServletResponse response, @RequestParam(<span class="string">"file"</span>)</span> String filePreName) <span class="keyword">throws</span>  UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file = jodService.downloadFile(filePreName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">        String fileName = filePreName+ <span class="string">".pdf"</span>;</span><br><span class="line">        <span class="comment">// 如果文件存在</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            FileSystemResource resource = <span class="keyword">new</span> FileSystemResource(file);</span><br><span class="line">            HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">            headers.add(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + <span class="keyword">new</span> String(fileName.getBytes(StandardCharsets.UTF_8), <span class="string">"ISO8859-1"</span>));</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                    <span class="comment">// 指定文件的contentType</span></span><br><span class="line">                    .contentType(MediaType.APPLICATION_OCTET_STREAM)</span><br><span class="line">                    .headers(headers)</span><br><span class="line">                    .body(resource);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果文件不存在，返回404响应</span></span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的service类，包含下载和文件转换，这里我把文件都保存在了<code>target/classes/static/docs</code>下面了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JodService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FILE_SUFFIX = <span class="string">".doc.docx.pdf.xlsx"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FILE_PATH = <span class="string">"/static/docs/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 传入的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> policy_id 文件主键，如果为小于0，插入失败；如果大于0，插入成功。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadPolicy</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//文件为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件为空"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">assert</span> fileName != <span class="keyword">null</span>;</span><br><span class="line">        String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">'.'</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (!FILE_SUFFIX.contains(suffix)) &#123;</span><br><span class="line">            <span class="comment">//文件未命名</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件未命名"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String filePrefix = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd-HHmmssS"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">            String newFileName = filePrefix + <span class="string">"."</span> + suffix;</span><br><span class="line">            File path = <span class="keyword">new</span> File(ResourceUtils.getURL(<span class="string">"classpath:"</span>).getPath());</span><br><span class="line">            <span class="keyword">if</span> (!path.exists()) &#123;</span><br><span class="line">                path = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            File upload = <span class="keyword">new</span> File(path.getAbsolutePath(), FILE_PATH + newFileName);</span><br><span class="line">            <span class="keyword">if</span> (!upload.exists()) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> b = upload.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            file.transferTo(upload);</span><br><span class="line">            <span class="keyword">if</span> (!suffix.contains(<span class="string">"pdf"</span>)) &#123;</span><br><span class="line">                <span class="comment">// 异步转换</span></span><br><span class="line">                <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                    convertPdf(filePrefix, suffix);</span><br><span class="line">                &#125;).start();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> filePrefix;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 保存文件失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件保存失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    DocumentConverter converter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 需要在启动类上加<span class="doctag">@EnableAsync</span>才可以生效</span></span><br><span class="line"><span class="comment">    * 文件转换类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertPdf</span><span class="params">(String filePrefix, String fileType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File rootPath = <span class="keyword">new</span> File(ResourceUtils.getURL(<span class="string">"classpath:"</span>).getPath());</span><br><span class="line">            File sourceFile = <span class="keyword">new</span> File(rootPath.getAbsolutePath(), FILE_PATH + filePrefix + <span class="string">"."</span> + fileType);</span><br><span class="line">            String sourceFilePath = sourceFile.getAbsolutePath();</span><br><span class="line">            File newFile = <span class="keyword">new</span> File(sourceFilePath.substring(<span class="number">0</span>, sourceFilePath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">".pdf"</span>);</span><br><span class="line">            <span class="comment">// convert方法指定源文件对象/输入流</span></span><br><span class="line">            <span class="comment">// to方法指定目标文件对象/输出流(源文件可以不存在，如果不存在则会创建)</span></span><br><span class="line">            <span class="comment">// todo: 目标文件的后缀要和即将转换的文件类型一致，否则会造成文件损坏</span></span><br><span class="line">            <span class="comment">// todo: as方法接受的时DocumentFormat对象，我们可以使用默认注册完的DocumentFormat对象，</span></span><br><span class="line">            <span class="comment">// execute方法是执行转换的方法，方法没有返回值，是同步执行</span></span><br><span class="line">            converter.convert(sourceFile).to(newFile).as(DefaultDocumentFormatRegistry.PDF).execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OfficeException | FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载pdf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePreName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">downloadFile</span><span class="params">(String filePreName)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(</span><br><span class="line">                <span class="keyword">new</span> File(ResourceUtils.getURL(<span class="string">"classpath:"</span>).getPath()).getAbsolutePath(),</span><br><span class="line">                FILE_PATH + filePreName + <span class="string">".pdf"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p><p><a href="https://blog.csdn.net/WXk_wer/article/details/116977449" target="_blank" rel="noopener" title="https://blog.csdn.net/WXk_wer/article/details/116977449">https://blog.csdn.net/WXk_wer/article/details/116977449</a></p><p><a href="https://blog.csdn.net/weixin_46031754/article/details/121670267" target="_blank" rel="noopener" title="https://blog.csdn.net/weixin_46031754/article/details/121670267">https://blog.csdn.net/weixin_46031754/article/details/121670267</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;有时候我们需要在程序中使用到office的转换和预览功能，本文就针对这个需求记录了两种较为简单的office转换和功能：aspose和jodconverter。当然还有其他开源第三方(&lt;a href=&quot;https://kkfileview.keking.cn/zh-cn/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;kkfileview&quot;&gt;kkfileview&lt;/a&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot接口加密与解密</title>
    <link href="https://www.shawn22.xyz/posts/1f359a4a.html"/>
    <id>https://www.shawn22.xyz/posts/1f359a4a.html</id>
    <published>2022-07-11T11:58:59.000Z</published>
    <updated>2022-07-11T12:11:59.670Z</updated>
    
    <content type="html"><![CDATA[<h1>一、对称/非对称加密</h1><h2 id="1、简介">1、简介</h2><p><strong>对称加密</strong>只有一个秘钥，加密和解密都是用同一个秘钥，所以叫做对称加密。</p><p><strong>非对称加密</strong>有两个秘钥，一个是公钥，一个是私钥。非对称的特点在于，公钥加密的私钥可以解密，但私钥加密的，公钥解不出来，只能验证是否由私钥进行加密</p><p>目前常见的加密方式是有两种，一种是<strong>对称加密(AES为代表）</strong>，一种是<strong>非对称加密（RSA为代表）</strong></p><a id="more"></a><h2 id="2、RSA和AES介绍">2、RSA和AES介绍</h2><h3 id="2-1-RSA">2.1 RSA</h3><p><strong>特点</strong>：只需交换公钥；公/秘钥机制，公钥加密，私钥解密(或者私钥加密，公钥解密)；公钥负责加密，私钥负责解密；私钥负责签名，公钥负责验证</p><p><strong>缺点</strong>：加解密速度慢，特别是解密</p><h3 id="2-2-AES">2.2 AES</h3><p><strong>特点</strong>：加解密用同一秘钥</p><p><strong>优点</strong>：速度快，效率高；</p><p><strong>缺点</strong>：秘钥交换问题</p><h2 id="3、RSA-AES组合">3、RSA/AES组合</h2><p><strong>对称加密（AES）的优势在于加密较快，<strong>但</strong>劣势</strong>在于秘钥一旦给出去就<strong>不安全</strong>了。<strong>非对称加密（RSA）的优势在于安全</strong>，就算提供公钥出去，别人也解密不了数据，但<strong>劣势是加密速度较慢</strong></p><p>实际使用的过程中常常将<strong>两者组合使用（AES+RSA）</strong>，这样可以安全的传输AES秘钥，避免了RSA加密的慢速度</p><ul><li><p>生成一个随机AES秘钥字符串</p></li><li><p>使用RSA公钥加密AES秘钥，然后再用AES秘钥加密真正的内容</p></li><li><p>把skey=加密的AES秘钥，body=AES秘钥加密的内容传过去</p></li><li><p>对面使用RSA私钥解密AES秘钥，然后用AES秘钥解密出内容</p></li></ul><h2 id="4、Base64编码的作用">4、Base64编码的作用</h2><p><strong>加密后的数据可能不具备可读性</strong>，因此我们一般需要对加密后的数据再使用 Base64 算法进行编码，<strong>获取可读字符串</strong>。换言之，AES 或者RSA加密方法的返回值是一个 Base64 编码之后的字符串，AES或者RSA 解密方法的参数也是一个 Base64 编码之后的字符串，先对该字符串进行解码，然后再解密。</p><h1>二、Java实现加解密/加验签</h1><h2 id="1、全局Config">1、全局Config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AES_ALGORITHM = <span class="string">"AES/CBC/PKCS5Padding"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RSA_ALGORITHM = <span class="string">"RSA/ECB/OAEPWithSHA-256AndMGF1Padding"</span>;</span><br><span class="line">    <span class="comment">//必须是PKCS8格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_PRIVATE_KEY = <span class="string">"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAO/8ucCgOTJ7DCPC"</span> +</span><br><span class="line">            <span class="string">"rCCL1VKDnUX61QnxwbAvpGp1/lletEIcjUouM7F0VvMHzViNLvpw7N7NBHPa+5gO"</span> +</span><br><span class="line">            <span class="string">"js68t9hKMUh+a6RTE34SWIqSDRPCzDKVWugsFb04o3vRl3rZ1z6B+QDdW7xwOhEr"</span> +</span><br><span class="line">            <span class="string">"PPoEqmjjIOjQPcU6xs0SPzSimOa1AgMBAAECgYAO5m0OBaSnerZNPhf7yVLMVbmd"</span> +</span><br><span class="line">            <span class="string">"D67MeEMjUkHuDjdlixi8BhPLqESzXtrLKg/Y0KM7D2nVh3sgSldWoIjDUzpCx8Z2"</span> +</span><br><span class="line">            <span class="string">"yHLU1K2wakMdBgEF3xeJPxxZRpP+earl0SyLTA4hMxl48uAjn/mkPgzoMgQkqyQz"</span> +</span><br><span class="line">            <span class="string">"5HOWjjsCLJFyEvqmoQJBAP5cBk0KXpHnCMgOupbi/pXDyaF1o+dCE97GaEdrV/0P"</span> +</span><br><span class="line">            <span class="string">"uwDfYDYfY3wzd1QM7C4b4MmE+SNVpC0W9PyaMONJlN0CQQDxiPiGdwX9actMNJea"</span> +</span><br><span class="line">            <span class="string">"JZ+k3BjCN+mM6Px7j/mtYcXWNZkyCXSXUBI62drZ0htenrh2qwichMlMgNJClvG6"</span> +</span><br><span class="line">            <span class="string">"Gu+5AkEA30R7q2gstrkrNh/nnMZHXcJr3DPc2QNhWayin/4TT+hc51krpJZMxxqN"</span> +</span><br><span class="line">            <span class="string">"5dMqBRcnavwzi9aCs6lxBcF6pCdUaQJANhd7uPls4PzRZ6abkQz9/LjB3rUQ29rN"</span> +</span><br><span class="line">            <span class="string">"uIpc2yR7XuawAVG2x7BJ9N4XMhLoyD75hrH1AsCGKFjtPbZ6OjiQGQJAF2DbIodC"</span> +</span><br><span class="line">            <span class="string">"uYb6eMZ8ux1Ab0wBEWWc5+iGgEVBNh22uZ/klE1/C0+KKzZhqgzaA/vPapq6dhuJ"</span> +</span><br><span class="line">            <span class="string">"sNXlJia10PwYrQ=="</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_PUBLIC_KEY = <span class="string">"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDv/LnAoDkyewwjwqwgi9VSg51F"</span> +</span><br><span class="line">            <span class="string">"+tUJ8cGwL6Rqdf5ZXrRCHI1KLjOxdFbzB81YjS76cOzezQRz2vuYDo7OvLfYSjFI"</span> +</span><br><span class="line">            <span class="string">"fmukUxN+EliKkg0TwswylVroLBW9OKN70Zd62dc+gfkA3Vu8cDoRKzz6BKpo4yDo"</span> +</span><br><span class="line">            <span class="string">"0D3FOsbNEj80opjmtQIDAQAB"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_PRIVATE_KEY = <span class="string">"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAPGkxlAJPKR3BRxT"</span> +</span><br><span class="line">            <span class="string">"PIeB3pDv117j8XbpuEik5UIOlY3GUtAV1sad5NNDUAnP/DB80yAQ8ycm9Xdkutuo"</span> +</span><br><span class="line">            <span class="string">"f25Xlb7w0bRQNpfJlijx9eF8PsB6t63r8KAfWJlqbNHgN8AMK9P5XzVyN4YiEnUl"</span> +</span><br><span class="line">            <span class="string">"Jh/EYiwLiYzflNnmnnfRrI4nUo8fAgMBAAECgYEAvwTxm81heeV4Tcbi33/jUBG4"</span> +</span><br><span class="line">            <span class="string">"4BMzCzyA6DQp4wkiYju3tTS+Xq3seLEKcWdPxYi3YO7lODsM6j/fksrlSXXFMe1i"</span> +</span><br><span class="line">            <span class="string">"ZAF3FNuDVZPz2zdFYS8vh6kdlDHMJAUnU/POMMWJ880MQDtkwTuzH8Tao8OKcAP4"</span> +</span><br><span class="line">            <span class="string">"kc0QuG00wOrmuE+5gZECQQD9bqZkJsN+tj3+pxs57azy6B6gOqgm54/ujB+u63XU"</span> +</span><br><span class="line">            <span class="string">"rO9Sf57asgF4OfUFltaVhjlUMSrWcgp6f4HSy7hBSKJpAkEA9BeML5iDIHOgTIws"</span> +</span><br><span class="line">            <span class="string">"+ID55ELbzO7A/YtcYnUU09mkKCdonMXbXke+EhLApf5vX9ZmreoEfJCdsTnMEcQi"</span> +</span><br><span class="line">            <span class="string">"fkjkRwJBALpf2TXl2/cfhs/zjG45f+rTEVK8UFTsDklb+yDkQC87TnTZLbWfGr2T"</span> +</span><br><span class="line">            <span class="string">"wcFugDhOEXL9BYfXLiWQB6VB9Crug6ECQGEmTiFTbj0oSBCvaeauTsdO5PS3whAn"</span> +</span><br><span class="line">            <span class="string">"u2lkeBmpcfCZXsWm6hyoKTpARHTMw789Mjjd/1Mkq96xxkr76U6h7FkCQHRc2elg"</span> +</span><br><span class="line">            <span class="string">"Dh84wqHIptwa+moosVvd7aSzktuOB4CQRO10qKkSHVFuI+sl47A4KGzH/nX9ydUm"</span> +</span><br><span class="line">            <span class="string">"tpsTnQAlXwBczd4="</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_PUBLIC_KEY = <span class="string">"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDxpMZQCTykdwUcUzyHgd6Q79de"</span> +</span><br><span class="line">            <span class="string">"4/F26bhIpOVCDpWNxlLQFdbGneTTQ1AJz/wwfNMgEPMnJvV3ZLrbqH9uV5W+8NG0"</span> +</span><br><span class="line">            <span class="string">"UDaXyZYo8fXhfD7Aeret6/CgH1iZamzR4DfADCvT+V81cjeGIhJ1JSYfxGIsC4mM"</span> +</span><br><span class="line">            <span class="string">"35TZ5p530ayOJ1KPHwIDAQAB"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、RSA非对称加密">2、RSA非对称加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.OAEPParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.PSource;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.MGF1ParameterSpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Base64Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSACipher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥字符串（经过base64编码）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title">getPublicKey</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 按照X.509标准对其进行编码的密钥</span></span><br><span class="line">        X509EncodedKeySpec keySpec = <span class="keyword">new</span> X509EncodedKeySpec(Base64Utils.decode(key.getBytes()));</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="comment">// 生成公钥</span></span><br><span class="line">        PublicKey publicKey = keyFactory.generatePublic(keySpec);</span><br><span class="line">        <span class="keyword">return</span> publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥字符串（经过base64编码）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title">getPrivateKey</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 按照PKCS8格式标准对其进行编码的密钥，首先要将key进行base64解码</span></span><br><span class="line">        PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(Base64Utils.decode(key.getBytes()));</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="comment">// 生成私钥</span></span><br><span class="line">        PrivateKey privateKey = keyFactory.generatePrivate(keySpec);</span><br><span class="line">        <span class="keyword">return</span> privateKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> raw       待加密明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密后的密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(String publicKey, <span class="keyword">byte</span>[] raw) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Key key = getPublicKey(publicKey);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(Config.RSA_ALGORITHM);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key, <span class="keyword">new</span> OAEPParameterSpec(<span class="string">"SHA-256"</span>, <span class="string">"MGF1"</span>, MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT));</span><br><span class="line">        <span class="keyword">byte</span>[] encryption = cipher.doFinal(raw);</span><br><span class="line">        <span class="comment">// 最后将加密后的数据进行base64编码</span></span><br><span class="line">        <span class="keyword">return</span> Base64Utils.encode(encryption);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> enc  待解密密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的明文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(String privateKey, <span class="keyword">byte</span>[] enc) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Key key = getPrivateKey(privateKey);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(Config.RSA_ALGORITHM);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, key, <span class="keyword">new</span> OAEPParameterSpec(<span class="string">"SHA-256"</span>, <span class="string">"MGF1"</span>, MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT));</span><br><span class="line">        <span class="comment">// 先进行base64解密，然后解码</span></span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(Base64Utils.decode(enc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content    要进行签名的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String privateKey, <span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// privateKey进行base64编码，然后生成PKCS8格式私钥</span></span><br><span class="line">            PKCS8EncodedKeySpec priPKCS8 = <span class="keyword">new</span> PKCS8EncodedKeySpec(Base64Utils.decode(privateKey.getBytes()));</span><br><span class="line">            KeyFactory key = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            PrivateKey priKey = key.generatePrivate(priPKCS8);</span><br><span class="line">            <span class="comment">// 签名摘要算法</span></span><br><span class="line">            Signature signature = Signature.getInstance(<span class="string">"SHA256WithRSA"</span>);</span><br><span class="line">            <span class="comment">// 用私钥初始化此对象以进行签名</span></span><br><span class="line">            signature.initSign(priKey);</span><br><span class="line">            <span class="comment">// 使用指定的字节数组更新签名或验证</span></span><br><span class="line">            signature.update(content);</span><br><span class="line">            <span class="comment">// 获得签名字节</span></span><br><span class="line">            <span class="keyword">byte</span>[] signed = signature.sign();</span><br><span class="line">            <span class="comment">// 进行base64编码返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(Base64Utils.encode(signed));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content   要验签的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign      签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验签结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSign</span><span class="params">(String publicKey, <span class="keyword">byte</span>[] content, String sign)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="comment">// 进行base64解码</span></span><br><span class="line">            <span class="keyword">byte</span>[] encodedKey = Base64Utils.decodeFromString(publicKey);</span><br><span class="line">            <span class="comment">// 生成公钥</span></span><br><span class="line">            PublicKey pubKey = keyFactory.generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(encodedKey));</span><br><span class="line">            <span class="comment">// 签名摘要算法</span></span><br><span class="line">            Signature signature = Signature.getInstance(<span class="string">"SHA256WithRSA"</span>);</span><br><span class="line">            <span class="comment">// 用公钥初始化签名</span></span><br><span class="line">            signature.initVerify(pubKey);</span><br><span class="line">            <span class="comment">// 使用指定的字节数组更新签名或验证</span></span><br><span class="line">            signature.update(content);</span><br><span class="line">            <span class="comment">// base64解码后进行验证</span></span><br><span class="line">            <span class="keyword">return</span> signature.verify(Base64Utils.decodeFromString(sign));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//客户端代码</span></span><br><span class="line">        String text = <span class="string">"hello"</span>;</span><br><span class="line">        <span class="comment">//使用服务端公钥加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] encryptText = RSACipher.encrypt(Config.SERVER_PUBLIC_KEY, text.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"加密后:\n"</span> + <span class="keyword">new</span> String(encryptText));</span><br><span class="line">        <span class="comment">//使用客户端私钥签名</span></span><br><span class="line">        String signature = RSACipher.sign(Config.CLIENT_PRIVATE_KEY, encryptText);</span><br><span class="line">        System.out.println(<span class="string">"签名:\n"</span> + signature);</span><br><span class="line">        <span class="comment">//服务端代码</span></span><br><span class="line">        <span class="comment">//使用客户端公钥验签</span></span><br><span class="line">        <span class="keyword">boolean</span> result = RSACipher.checkSign(Config.CLIENT_PUBLIC_KEY, encryptText, signature);</span><br><span class="line">        System.out.println(<span class="string">"验签:\n"</span> + result);</span><br><span class="line">        <span class="comment">//使用服务端私钥解密</span></span><br><span class="line">        <span class="keyword">byte</span>[] decryptText = RSACipher.decrypt(Config.SERVER_PRIVATE_KEY, encryptText);</span><br><span class="line">        System.out.println(<span class="string">"解密后:\n"</span> + <span class="keyword">new</span> String(decryptText));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">加密后:</span><br><span class="line">ODdEkwo1RgRW8UMoHXPKe9Gwcp6lTCkg4P/Ra3gfkrO+Fw6pSgo0H54nMC5sYSsoUVy1wy2/QXeLSwR6Obfl7SU7DeW+XdGee83O2kgdsDQPbYFwlPYTd0cdOmWwZxtgEOIB9d5G75Iut4kci15vrhXZVtku92U+<span class="number">7</span>aNwtYimSDQ=</span><br><span class="line">签名:</span><br><span class="line">RL1qIScizRyu79/y+r2TN2FL/bSQDxnDj4JlDwSZM6XZR7CL7u5ZjLNHbsSYpHaCv9qKMS4ump50LyF+go05dsPjWZOvFNkgcm9LepkDP1qm8AzKdTGwlzhdBmy2397Ed8uBrQocFGj/<span class="number">721</span>Y2xM/Db0nt7r54zKZkDXbMMlsd9k=</span><br><span class="line">验签:</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">解密后:</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="3、AES对称加密">3、AES对称加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.Base64Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESCipher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecureRandom random = <span class="keyword">new</span> SecureRandom();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机16位key，key必须要是10的整数倍，否则会出错</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandom</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        StringBuilder ret = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 输出字母还是数字</span></span><br><span class="line">            <span class="keyword">boolean</span> isChar = (random.nextInt(<span class="number">2</span>) % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 字符串</span></span><br><span class="line">            <span class="keyword">if</span> (isChar) &#123;</span><br><span class="line">                <span class="comment">// 取得大写字母还是小写字母</span></span><br><span class="line">                <span class="keyword">int</span> choice = random.nextInt(<span class="number">2</span>) % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">65</span> : <span class="number">97</span>;</span><br><span class="line">                ret.append((<span class="keyword">char</span>) (choice + random.nextInt(<span class="number">26</span>)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 数字</span></span><br><span class="line">                ret.append(random.nextInt(<span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密方法，使用key充当向量iv，增加加密算法的强度</span></span><br><span class="line"><span class="comment">     * 更加安全</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> raw 需要加密的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(<span class="keyword">byte</span>[] key, String raw)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 第一次加密</span></span><br><span class="line">        SecretKeySpec secretKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">        <span class="comment">// 获取二次加密的key</span></span><br><span class="line">        SecretKeySpec secondSecretKey = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, <span class="string">"AES"</span>);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(Config.AES_ALGORITHM);</span><br><span class="line">        <span class="comment">// 向量iv，增加加密算法的强度</span></span><br><span class="line">        IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(key);</span><br><span class="line">        <span class="comment">// 初始化加密器</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, secondSecretKey, iv);</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] result = cipher.doFinal(raw.getBytes());</span><br><span class="line">        <span class="comment">// 进行base64编码</span></span><br><span class="line">        <span class="keyword">return</span> Base64Utils.encodeToString(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密方法，使用key充当向量iv，增加加密算法的强度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> enc 待解密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] key, String enc)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SecretKeySpec secretKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">        <span class="comment">// 二次加密</span></span><br><span class="line">        SecretKeySpec secondSecretKey = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, <span class="string">"AES"</span>);</span><br><span class="line"></span><br><span class="line">        Cipher cipher = Cipher.getInstance(Config.AES_ALGORITHM);</span><br><span class="line">        IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(key);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, secondSecretKey, iv);</span><br><span class="line">        <span class="comment">// 首先进行base64解码</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Base64Utils.decodeFromString(enc);</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        <span class="keyword">byte</span>[] result = cipher.doFinal(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端代码</span></span><br><span class="line">        String text = <span class="string">"hello"</span>;</span><br><span class="line">        <span class="comment">//随机生成16位aes密钥，也可以自己指定16位</span></span><br><span class="line">        <span class="keyword">byte</span>[] aesKey = getRandom(<span class="number">16</span>).getBytes();</span><br><span class="line"></span><br><span class="line">        String encryptText = AESCipher.encrypt(aesKey, text);</span><br><span class="line">        System.out.println(<span class="string">"加密后:\n"</span> + encryptText);</span><br><span class="line">        String decryptText = AESCipher.decrypt(aesKey, encryptText);</span><br><span class="line">        System.out.println(<span class="string">"解密后:\n"</span> + decryptText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加密后:</span><br><span class="line">hwkYAF9eXj/dytmDBD30xg==</span><br><span class="line">解密后:</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h1>三、加解密 starter实战</h1><h2 id="1、介绍">1、介绍</h2><p>加密解密本身并不是难事，问题是在何时去处理？定义一个过滤器，将请求和响应分别拦截下来进行处理也是一个办法，这种方式虽然粗暴，但是灵活，因为可以拿到一手的请求参数和响应数据。不过 SpringMVC 中给我们提供了 <code>ResponseBodyAdvice</code>和 <code>RequestBodyAdvice</code>，利用这两个工具可以对请求和响应进行预处理，非常方便。</p><blockquote><p>参考：<br><a href="https://blog.csdn.net/qq_34975710/article/details/116450371" target="_blank" rel="noopener" title="RSA+AES混合加密-JavaWeb">RSA+AES混合加密-JavaWeb</a><a href="https://blog.csdn.net/lemon_TT/article/details/113345061" target="_blank" rel="noopener" title="SpringBoot自定义starter">SpringBoot自定义starter</a></p></blockquote><h2 id="2、前期准备">2、前期准备</h2><h3 id="2-1-引入依赖">2.1 引入依赖</h3><p>因为我们这个工具是为 Web 项目开发的，以后必然使用在 Web 环境中，所以这里添加依赖时 scope 设置为 provided</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>scope几个属性介绍</strong></p><ul><li><p>compile：默认值 他表示被依赖项目需要参与当前项目的编译，还有后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去</p></li><li><p>test：依赖项目仅仅参与测试相关的工作，包括测试代码的编译和执行，不会被打包，例如：junit</p></li><li><p>runtime：表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过了编译而已。例如JDBC驱动，适用运行和测试阶段</p></li><li><p>provided：打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作</p></li><li><p>system：从参与度来说，和provided相同，不过被依赖项不会从maven仓库下载，而是从本地文件系统拿。需要添加systemPath的属性来定义路径</p></li></ul><h3 id="2-2-封装公共相应类">2.2 封装公共相应类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">ok</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean(<span class="number">200</span>, msg, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">ok</span><span class="params">(String msg, Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean(<span class="number">200</span>, msg, obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">error</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean(<span class="number">500</span>, msg, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">error</span><span class="params">(String msg, Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean(<span class="number">500</span>, msg, obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RespBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RespBean</span><span class="params">(Integer status, String msg, Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">setObj</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-定义加解密工具类">2.3 定义加解密工具类</h3><p>加密这块有多种方案可以选择，对称加密、非对称加密，其中对称加密又可以使用 AES、DES、3DES 等不同算法，这里我们使用 Java 自带的 Cipher 来实现对称加密，使用 AES 算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AES_ALGORITHM = <span class="string">"AES/ECB/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 cipher</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Cipher <span class="title">getCipher</span><span class="params">(<span class="keyword">byte</span>[] key, <span class="keyword">int</span> model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(AES_ALGORITHM);</span><br><span class="line">        cipher.init(model, secretKeySpec);</span><br><span class="line">        <span class="keyword">return</span> cipher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES加密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Cipher cipher = getCipher(key, Cipher.ENCRYPT_MODE);</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(cipher.doFinal(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cipher cipher = getCipher(key, Cipher.DECRYPT_MODE);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(Base64.getDecoder().decode(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-定义两个注解">2.4 定义两个注解</h3><p>接下来我们定义两个注解 <code>@Decrypt</code> 和 <code>@Encrypt</code>。在以后使用的过程中，哪个接口方法添加了 @Encrypt 注解就对哪个接口的数据加密返回，哪个接口/参数添加了 @Decrypt 注解就对哪个接口/参数进行解密。另外就是 <code>@Decrypt</code> 可以用在参数上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Decrypt &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Encrypt &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-设置自定义key">2.5 设置自定义key</h3><p>定义一个 EncryptProperties 类来读取用户配置的 key，这样就可以自定义key。这里设置了默认值，以后如果用户想自己配置 key，只需要在 application.properties 中配置 <code>spring.encrypt.key=xxx</code> 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.encrypt"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这一块一定要16位或者整数倍，最多256</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DEFAULT_KEY = <span class="string">"www.shawn222.com"</span>;</span><br><span class="line">    <span class="keyword">private</span> String key = DEFAULT_KEY;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、接口加密与解密">3、接口加密与解密</h2><h3 id="3-1-介绍">3.1 介绍</h3><p><code>ResponseBodyAdvice</code> 在你使用了 <code>@ResponseBody</code> 注解的时候才会生效，<code>RequestBodyAdvice</code> 在你使用了 <code>@RequestBody</code> 注解的时候才会生效，换言之，前后端都是 JSON 交互的时候，这两个才有用</p><h3 id="3-2-接口加密">3.2 接口加密</h3><p>我们自定义 <code>EncryptResponse </code>类实现 <code>ResponseBodyAdvice</code>接口，泛型表示接口的返回类型，这里一共要实现两个方法</p><ul><li><p><strong>supports</strong>：这个方法用来判断什么样的接口需要加密，参数 returnType 表示返回类型，我们这里的判断逻辑就是方法是否含有 <code>@Encrypt</code> 注解，如果有，表示该接口需要加密处理，如果没有，表示该接口不需要加密处理。</p></li><li><p><strong>beforeBodyWrite</strong>：这个方法会在数据响应之前执行，也就是我们先对响应数据进行二次处理，处理完成后，才会转成 json 返回。我们这里的处理方式很简单，RespBean 中的 status 是状态码就不用加密了，另外两个字段重新加密后重新设置值即可。</p></li></ul><p>另外需要注意，自定义的 ResponseBodyAdvice 需要用 <code>@ControllerAdvice</code> 注解来标记。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(EncryptProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ControllerAdvice</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EncryptResponse</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">RespBean</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EncryptProperties encryptProperties;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> returnType.hasMethodAnnotation(Encrypt<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">beforeBodyWrite</span><span class="params">(RespBean body, MethodParameter returnType, MediaType selectedContentType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = encryptProperties.getKey().getBytes();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (body.getMsg()!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                body.setMsg(AESUtils.encrypt(body.getMsg().getBytes(),keyBytes));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (body.getObj() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                body.setObj(AESUtils.encrypt(om.writeValueAsBytes(body.getObj()), keyBytes));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-接口解密">3.3 接口解密</h3><p>首先大家注意，DecryptRequest 类我们没有直接实现 <code>RequestBodyAdvice</code> 接口，而是继承自 RequestBodyAdviceAdapter 类，该类是 RequestBodyAdvice 接口的子类，并且实现了接口中的一些方法，这样当我们继承自 RequestBodyAdviceAdapter 时，就只需要根据自己实际需求实现某几个方法即可。</p><ul><li><p><strong>supports</strong>：该方法用来判断哪些接口需要处理接口解密，我们这里的判断逻辑是方法上或者参数上含有 <code>@Decrypt</code> 注解的接口，处理解密问题。</p></li><li><p><strong>beforeBodyRead</strong>：这个方法会在参数转换成具体的对象之前执行，我们先从流中加载到数据，然后对数据进行解密，解密完成后再重新构造 HttpInputMessage 对象返回。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(EncryptProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ControllerAdvice</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DecryptRequest</span> <span class="keyword">extends</span> <span class="title">RequestBodyAdviceAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EncryptProperties encryptProperties;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter methodParameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> methodParameter.hasMethodAnnotation(Decrypt<span class="class">.<span class="keyword">class</span>) || <span class="title">methodParameter</span>.<span class="title">hasParameterAnnotation</span>(<span class="title">Decrypt</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpInputMessage <span class="title">beforeBodyRead</span><span class="params">(<span class="keyword">final</span> HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] body = <span class="keyword">new</span> <span class="keyword">byte</span>[inputMessage.getBody().available()];</span><br><span class="line">        inputMessage.getBody().read(body);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] decrypt = AESUtils.decrypt(body, encryptProperties.getKey().getBytes());</span><br><span class="line">            <span class="keyword">final</span> ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(decrypt);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HttpInputMessage() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> bais;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> inputMessage.getHeaders();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.beforeBodyRead(inputMessage, parameter, targetType, converterType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、打包发布starter">4、打包发布starter</h2><h3 id="4-1-定义自动化配置类">4.1 定义自动化配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 换成自己的包路径</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.example.encryption"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，<code>resources </code>目录下定义 <code>META</code>-INF，然后再定义 <code>spring.factories</code> 文件，这样当项目启动时，就会自动加载该配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.encryption.EncryptAutoConfiguration</span><br></pre></td></tr></table></figure><p>安装到本地仓库比较简单，直接 <code>mvn install</code>，或者在 IDEA 中，点击右边的 Maven，然后双击 install</p><h3 id="4-2-发布线上使用">4.2 发布线上使用</h3><p>发不到线上我们可以使用 <a href="https://jitpack.io/" target="_blank" rel="noopener" title="JitPack">JitPack</a>来做。首先我们在 GitHub 上创建一个仓库，将我们的代码上传上去，上传成功后，点击右边的 <code>Create a new release</code> 按钮，发布一个正式版</p><p>发布成功后，打开 <strong>jitpack</strong>，输入仓库的完整路径，点击 lookup 按钮，查找到之后，再点击 <code>Get it</code> 按钮完成构建，构建成功后，JitPack 上会给出项目引用方式，新建项目时引入即可</p><h2 id="5、新项目使用">5、新项目使用</h2><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类，第一个接口使用了 <code>@Encrypt</code> 注解，所以会对该接口的数据进行加密（如果不使用该注解就不加密），第二个接口使用了 <code>@Decrypt</code> 所以会对上传的参数进行解密，注意 <code>@Decrypt</code> 注解既可以放在方法上也可以放在参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@Encrypt</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId((<span class="keyword">long</span>) <span class="number">99</span>);</span><br><span class="line">        user.setUsername(<span class="string">"javaboy"</span>);</span><br><span class="line">        <span class="keyword">return</span> RespBean.ok(<span class="string">"ok"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">addUser</span><span class="params">(@RequestBody @Decrypt User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"user = "</span> + user);</span><br><span class="line">        <span class="keyword">return</span> RespBean.ok(<span class="string">"ok"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p><p><a href="https://mp.weixin.qq.com/s/Upa9UIqB32ssujigewygZA" target="_blank" rel="noopener" title="如何优雅的实现 SpringBoot 接口参数加密解密？">如何优雅的实现 SpringBoot 接口参数加密解密？</a></p><p><a href="https://bigzuo.github.io/2019/03/27/java-cipher-tutorial/" target="_blank" rel="noopener" title="为什么使用 Java Cipher 要指定转换模式？">为什么使用 Java Cipher 要指定转换模式？</a></p><p><a href="https://www.hutool.cn/docs/#/crypto/%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener" title="Hutool加密解密">Hutool加密解密</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、对称/非对称加密&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;对称加密&lt;/strong&gt;只有一个秘钥，加密和解密都是用同一个秘钥，所以叫做对称加密。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非对称加密&lt;/strong&gt;有两个秘钥，一个是公钥，一个是私钥。非对称的特点在于，公钥加密的私钥可以解密，但私钥加密的，公钥解不出来，只能验证是否由私钥进行加密&lt;/p&gt;
&lt;p&gt;目前常见的加密方式是有两种，一种是&lt;strong&gt;对称加密(AES为代表）&lt;/strong&gt;，一种是&lt;strong&gt;非对称加密（RSA为代表）&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Redis键通知相关小记(EVENT NOTIFICATION)</title>
    <link href="https://www.shawn22.xyz/posts/15b88caa.html"/>
    <id>https://www.shawn22.xyz/posts/15b88caa.html</id>
    <published>2022-07-11T11:58:49.000Z</published>
    <updated>2022-07-11T12:13:09.111Z</updated>
    
    <content type="html"><![CDATA[<h1>一、事件通知介绍</h1><h2 id="1、前言">1、前言</h2><blockquote><p>官方参考文档：<a href="https://redis.io/docs/manual/keyspace-notifications/" target="_blank" rel="noopener" title="https://redis.io/docs/manual/keyspace-notifications/">https://redis.io/docs/manual/keyspace-notifications/</a></p></blockquote><p>从Redis 2.8.0开始，Redis加入了<strong>发布/订阅模式</strong>以及<strong>键空间消息提醒（keyspace notification）功能</strong>。键空间消息提醒提供了允许客户端通过订阅指定信道获取Redis数据变化的能力。需要注意的是，<strong>键空间消息提醒并非可靠的</strong>，它不会对订阅端是否接收到消息进行确认。例如某个订阅的客户端暂时断开连接，在其直到恢复连接期间发生的事件将无法再次获得。</p><a id="more"></a><h2 id="2、配置详解">2、配置详解</h2><blockquote><p>各版本Redis配置文件：<a href="https://redis.io/docs/manual/config/" target="_blank" rel="noopener" title="https://redis.io/docs/manual/config/">https://redis.io/docs/manual/config/</a></p></blockquote><p>可以通过对redis的<code>redis.conf</code>文件中配置<code>notify-keyspace-events</code>参数可以指定服务器发送哪种类型的通知。下面对于一些参数的描述。默认情况下此功能是关闭的。</p><table><thead><tr><th>字符</th><th>通知</th></tr></thead><tbody><tr><td>K</td><td>键空间通知，所有通知以 <strong>keyspace@</strong> 为前缀</td></tr><tr><td>E</td><td>键事件通知，所有通知以 <strong>keyevent@</strong> 为前缀</td></tr><tr><td>g</td><td>DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</td></tr><tr><td>$</td><td>字符串命令的通知</td></tr><tr><td>l</td><td>列表命令的通知</td></tr><tr><td>s</td><td>集合命令的通知</td></tr><tr><td>h</td><td>哈希命令的通知</td></tr><tr><td>z</td><td>有序集合命令的通知</td></tr><tr><td>x</td><td>过期事件：每当有过期键被删除时发送</td></tr><tr><td>e</td><td>驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</td></tr><tr><td>A</td><td>参数 g$lshzxe 的别名</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; CONFIG GET notify-keyspace-events</span><br><span class="line">1) <span class="string">"notify-keyspace-events"</span></span><br><span class="line">2) <span class="string">""</span></span><br><span class="line">redis&gt; CONFIG SET notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line">redis&gt; CONFIG GET notify-keyspace-events</span><br><span class="line">1) <span class="string">"notify-keyspace-events"</span></span><br><span class="line">2) <span class="string">"AKE"</span></span><br></pre></td></tr></table></figure><p>在上述示例中将<code>notify-keyspace-events</code>配置为<code>KEA</code>，代表除未命中外的所有事件。其中，<code>K</code>与<code>E</code>代表事件的两种类型——<code>Keyspace</code>与<code>Keyevent</code>。</p><p><code>Keyspace</code>代表与事件名称相关的消息，例如订阅对指定键进行的操作事件；<code>Keyevent</code>代表与键名称相关的消息，例如订阅发生键过期事件的相关键名称。</p><h2 id="3、订阅指定事件">3、订阅指定事件</h2><p>在完成配置后，可通过<code>SUBSCRIBE</code>命令订阅指定信道实现对一个或多个指定事件的订阅。例如通过订阅<code>__keyevent@0__:expired</code>实现订阅数据库0中的键过期事件</p><p>订阅的信道的格式为<code>__&lt;type&gt;@&lt;db&gt;__:&lt;event&gt;</code>，其包括了事件类型（<code>keyspace</code>或<code>keyevent</code>）、数据库（例如数据库<code>0</code>）以及事件（例如<code>expired</code>）三部分组成。另外，也可以通过<code>PSUBSCRIBE</code>命令订阅一个或多个复合正则表达式匹配的信道。例如通过订阅<code>__key*@*__:*</code>订阅Redis中所有数据库中的所有事件。</p><h2 id="4、命令事件">4、命令事件</h2><p>Redis为许多命令提供了不同的事件，在本文中将选择其中部分命令及其对应的事件进行介绍：</p><ul><li><p><code>DEL</code>：在某个键被删除时产生<code>del</code>事件</p></li><li><p><code>EXPIRE</code>、<code>PEXPIRE</code>、<code>EXPIREAT</code>以及<code>PEXPIREAT</code>：当设置正数过期时间或未来时间的时间戳，则产生<code>expire</code>事件，否则产生<code>del</code>事件（将立即被删除）</p></li><li><p><code>SET</code>以及同类的<code>SETEX</code>、<code>SETNX</code>、<code>GETSET</code>：产生<code>set</code>事件，若使用<code>SETEX</code>则也会产生<code>expire</code>事件</p></li><li><p><code>MSET</code>：将会为每个键都产生一个<code>set</code>事件</p></li><li><p><code>LPUSH</code>、<code>LPUSHX</code>与<code>RPUSH</code>、<code>RPUSHX</code>：根据插入的方向分别产生<code>lpush</code>或<code>rpush</code>事件</p></li><li><p><code>RPOP</code>、<code>LPOP</code>：分别产生<code>rpop</code>与<code>lpop</code>事件，若移出的是列表中的最后一个元素，将会同时产生<code>del</code>事件</p></li><li><p><code>LSET</code>：产生<code>lset</code>事件</p></li><li><p><code>LREM</code>：产生<code>lrem</code>事件，同样若移除的元素为列表中的最后一个元素时将同时产生<code>del</code>事件</p></li><li><p><code>HSET</code>、<code>HSETNX</code>以及<code>HMSET</code>：产生一个<code>hset</code>事件</p></li><li><p><code>HDEL</code>：产生一个<code>hdel</code>事件，且在移除后哈希表为空的情况下产生<code>del</code>事件</p></li><li><p><code>SADD</code>：产生一个<code>sadd</code>事件</p></li><li><p><code>SREM</code>：产生一个<code>srem</code>事件，且在移除后集合为空的情况下产生<code>del</code>事件</p></li><li><p><code>SMOVE</code>：原键中产生<code>srem</code>事件且在目标键中产生<code>sadd</code>事件</p></li><li><p><code>SINTERSTORE</code>、<code>SUNIONSTORE</code>、<code>SDIFFSTORE</code>：分别产生<code>sinterstore</code>、<code>sunionstore</code>以及<code>sdiffstore</code>事件，且在结果为空集且目标键存在的情况下，将会产生<code>del</code>事件</p></li><li><p><code>ZADD</code>：无论添加几个元素都只产生一个<code>zadd</code>事件</p></li><li><p><code>ZREM</code>：无论移除几个元素都只产生一个<code>zrem</code>事件，当移除后有序集合为空时产生<code>del</code>事件</p></li><li><p><code>XADD</code>：产生<code>xadd</code>事件，若使用<code>MAXLEN</code>子命令可能会同时产生<code>xtrim</code>事件</p></li><li><p><code>XDEL</code>：产生<code>xdel</code>事件</p></li><li><p><code>PERSIST</code>：如果对应的键所关联的过期事件成功被移除，则产生<code>persist</code>事件</p></li><li><p>在键发生过期时产生<code>expired</code>事件</p></li><li><p>在达到<code>maxmemory</code>设定的内存值后发生键淘汰时产生<code>evicted</code>事件</p></li><li><p>……</p></li></ul><p>关于更多的命令相关事件，请参考<a href="https://redis.io/topics/notifications" target="_blank" rel="noopener" title="keyspace notification相关文档">keyspace notification相关文档</a></p><h2 id="5、一些示例">5、一些示例</h2><p>订阅键过期事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis1&gt; SUBSCRIBE __keyevent@0__:expired</span><br><span class="line">1) <span class="string">"subscribe"</span></span><br><span class="line">2) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># redis2&gt; SETEX greeting 1 "hello world"</span></span><br><span class="line"><span class="comment"># 等待1秒后：</span></span><br><span class="line">1) <span class="string">"message"</span></span><br><span class="line">2) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line">3) <span class="string">"greeting"</span></span><br></pre></td></tr></table></figure><p>订阅所有事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis1&gt; PSUBSCRIBE __key*@*__:*</span><br><span class="line">1) <span class="string">"psubscribe"</span></span><br><span class="line">2) <span class="string">"__key*@*__:*"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># redis2&gt; SET greeting "hello world"</span></span><br><span class="line">1) <span class="string">"pmessage"</span></span><br><span class="line">2) <span class="string">"__key*@*__:*"</span></span><br><span class="line">3) <span class="string">"__keyspace@0__:greeting"</span></span><br><span class="line">4) <span class="string">"set"</span></span><br><span class="line">1) <span class="string">"pmessage"</span></span><br><span class="line">2) <span class="string">"__key*@*__:*"</span></span><br><span class="line">3) <span class="string">"__keyevent@0__:set"</span></span><br><span class="line">4) <span class="string">"greeting"</span></span><br></pre></td></tr></table></figure><h1>二、SpringBoot实现Redis失效监听事件</h1><h2 id="1、场景说明">1、场景说明</h2><p>基于Redis的主动事件的处理，比如：当用户购买了会员卡十分钟内没有付款，需要通过小程序或者APP向用户主动推送购买会员卡的优势，引导用户继续完成支付并购买等，类似的场景需要用户在<strong>指定的时间点后</strong>主动通知或者继续引导，使用 <strong>Redis过期键Event</strong>优雅、快捷的实现。</p><p>因为Redis的订阅/发布是<strong>没有ACK确认机制</strong>的，因此可能会丢失消息，如果要保证消息可靠，应该选择MQ消息队列实现，</p><h2 id="2、代码实现-Redis单机版">2、代码实现(Redis单机版)</h2><h3 id="2-1-环境准备">2.1 环境准备</h3><p>引入对应redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置<code>application.yml</code>连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">20000</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">50</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>最后更改<code>redis.conf</code> 配置 <code>notify-keyspace-events</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认</span></span><br><span class="line">notify-keyspace-events <span class="string">""</span> </span><br><span class="line"><span class="comment"># 更改为</span></span><br><span class="line">notify-keyspace-events Ex</span><br></pre></td></tr></table></figure><h3 id="2-2-配置监听Bean">2.2 配置监听Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key过期事件订阅需要</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(RedisMessageListenerContainer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">RedisMessageListenerContainer</span> <span class="title">container</span>(<span class="title">RedisConnectionFactory</span> <span class="title">connectionFactory</span>) </span>&#123;</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        <span class="comment">//连接池的设置</span></span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-配置监听key">2.3 配置监听key</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyExpirationListener</span> <span class="keyword">extends</span> <span class="title">KeyExpirationEventMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SET_NX = <span class="string">"setnx:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer database = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisKeyExpirationListener</span><span class="params">(RedisMessageListenerContainer listenerContainer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(listenerContainer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(RedisMessageListenerContainer listenerContainer)</span> </span>&#123;</span><br><span class="line">        String topic = <span class="string">"__keyevent@"</span>+database+<span class="string">"__:expired"</span>;</span><br><span class="line">        log.info(<span class="string">"配置监听哪个频道:"</span>+topic);</span><br><span class="line">        PatternTopic patternTopic = <span class="keyword">new</span> PatternTopic(topic);</span><br><span class="line">        <span class="comment">// 频道可以是多，多个传list</span></span><br><span class="line">        listenerContainer.addMessageListener(<span class="keyword">this</span>,patternTopic);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取过期的key,可以做自己的业务</span></span><br><span class="line">        String expiredKey = message.toString();</span><br><span class="line">        <span class="comment">// 寻找需要的key前缀</span></span><br><span class="line">        <span class="keyword">if</span>(!expiredKey.startsWith(<span class="string">"test"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 利用redis setIfAbsent命令,如果为空set返回true,如果不为空返回false,类似setnx加锁操作</span></span><br><span class="line">        Boolean aBoolean = stringRedisTemplate.opsForValue().setIfAbsent(SET_NX + expiredKey, String.valueOf(System.currentTimeMillis()),<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (aBoolean)&#123;</span><br><span class="line">            <span class="comment">// 避免多个服务监听情况下重复消费，也可以加锁与解锁</span></span><br><span class="line">            <span class="comment">// 注意：只能获取失效的key值，不能获取key对应的value值</span></span><br><span class="line">            System.out.println(expiredKey);</span><br><span class="line">            <span class="comment">// 这里可以进行相应的业务代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Redis集群事件监听">3、Redis集群事件监听</h2><p>这里就简单说一下思路，因为不能监听集群，那就建立多个redis连接，分别对每个redis的key过期进行监听，相当于注册多个监听器，最后进行过期key的筛选即可</p><h1>三、一些问题</h1><blockquote><p>参考：<a href="https://www.cnblogs.com/Finley/p/16395466.html" target="_blank" rel="noopener" title="领导：谁再用 Redis 过期监听实现关闭订单，立马滚蛋！">领导：谁再用 Redis 过期监听实现关闭订单，立马滚蛋！</a></p></blockquote><p>对于延时任务一般实现的方法有几种：</p><ol><li><p>使用 rocketmq、rabbitmq、pulsar 等消息队列的延时投递功能</p></li><li><p>使用 redisson 提供的 DelayedQueue</p></li></ol><p>有一些方案虽然广为流传但存在着致命缺陷，不要用来实现延时任务</p><ol><li><p>使用 redis 的过期监听</p></li><li><p>使用 rabbitmq 的死信队列</p></li><li><p>使用非持久化的时间轮</p></li></ol><p><a href="https://blog.csdn.net/lemon_TT/article/details/117711682" target="_blank" rel="noopener" title="Redis6.0学习笔记">Redis6.0学习笔记</a></p><p><a href="https://www.jianshu.com/p/0a081dc2f4a2" target="_blank" rel="noopener" title="Redis过期监听机制实现订单超时处理">Redis过期监听机制实现订单超时处理</a></p><p><a href="https://blog.csdn.net/z69183787/article/details/106664711" target="_blank" rel="noopener" title="Redis集群下过期key监听">Redis集群下过期key监听</a></p><p><a href="https://www.jianshu.com/p/50247eef431c" target="_blank" rel="noopener" title="SpringBoot监听redis过期key">SpringBoot监听redis过期key</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、事件通知介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、前言&quot;&gt;1、前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;官方参考文档：&lt;a href=&quot;https://redis.io/docs/manual/keyspace-notifications/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://redis.io/docs/manual/keyspace-notifications/&quot;&gt;https://redis.io/docs/manual/keyspace-notifications/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从Redis 2.8.0开始，Redis加入了&lt;strong&gt;发布/订阅模式&lt;/strong&gt;以及&lt;strong&gt;键空间消息提醒（keyspace notification）功能&lt;/strong&gt;。键空间消息提醒提供了允许客户端通过订阅指定信道获取Redis数据变化的能力。需要注意的是，&lt;strong&gt;键空间消息提醒并非可靠的&lt;/strong&gt;，它不会对订阅端是否接收到消息进行确认。例如某个订阅的客户端暂时断开连接，在其直到恢复连接期间发生的事件将无法再次获得。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 热搜与不雅文字过滤</title>
    <link href="https://www.shawn22.xyz/posts/f64f2ae1.html"/>
    <id>https://www.shawn22.xyz/posts/f64f2ae1.html</id>
    <published>2022-07-11T11:58:38.000Z</published>
    <updated>2022-07-11T12:15:45.515Z</updated>
    
    <content type="html"><![CDATA[<h1>一、前言</h1><p>这里主要讲springboot整合redis的个人搜索记录与热搜、敏感词过滤与替换两个功能，下面进行环境准备，引入相关maven依赖</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>配置为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment">#数据库索引</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.28</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment">#最大连接数</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment">#最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment">#最大空闲</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment">#最小空闲</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="comment">#连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>最后敏感词文本文件放在<code>resources/static</code>目录下，取名为<code>word.txt</code>，敏感词文本网上很多，这里就随便贴一个：<a href="https://github.com/lining0806/TextFilter/blob/master/%E6%95%8F%E6%84%9F%E8%AF%8D%E5%BA%93%E5%A4%A7%E5%85%A8.txt" target="_blank" rel="noopener" title="github敏感词">github敏感词</a></p><h1>二、不雅文字过滤</h1><h2 id="1、实现原理">1、实现原理</h2><blockquote><p>参考：<a href="https://blog.csdn.net/lemon_TT/article/details/122196833" target="_blank" rel="noopener" title="Spring开发社交模块小记">Spring开发社交模块小记</a></p></blockquote><p>简单原理如下图所示，使用了<strong>DFA算法</strong>，创建结点类，里面包含是否是敏感词结束符，以及一个HashMap，哈希里key值存储的是敏感词的一个词，value指向下一个结点（即指向下一个词），一个哈希表中可以存放多个值，比如赌博、赌黄这两个都是敏感词。</p><p><img src="https://img-blog.csdnimg.cn/ead7106ebdd54b96882a08241c4f688c.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、实现方法">2、实现方法</h2><h3 id="2-1-敏感词库初始化">2.1 敏感词库初始化</h3><p>敏感词库的初始化，这里主要工作是读取敏感词文件，在内存中构建好敏感词的Map节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shawn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SensitiveWordInit</span></span><br><span class="line"><span class="comment"> * Description:屏蔽一些无关紧要的警告。使开发者能看到一些他们真正关心的警告。从而提高开发者的效率</span></span><br><span class="line"><span class="comment"> * 屏蔽敏感词初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/22 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordInit</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 字符编码</span></span><br><span class="line">    <span class="keyword">private</span> String ENCODING = <span class="string">"UTF-8"</span>;</span><br><span class="line">    <span class="comment">// 初始化敏感字库</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">initKeyWord</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 读取敏感词库 ,存入Set中</span></span><br><span class="line">        Set&lt;String&gt; wordSet = readSensitiveWordFile();</span><br><span class="line">        <span class="comment">// 将敏感词库加入到HashMap中//确定有穷自动机DFA</span></span><br><span class="line">        <span class="keyword">return</span> addSensitiveWordToHashMap(wordSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取敏感词库 ,存入HashMap中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">readSensitiveWordFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Set&lt;String&gt; wordSet = <span class="keyword">null</span>;</span><br><span class="line">        ClassPathResource classPathResource = <span class="keyword">new</span> ClassPathResource(<span class="string">"static/word.txt"</span>);</span><br><span class="line">        InputStream inputStream = classPathResource.getInputStream();</span><br><span class="line">        <span class="comment">//敏感词库</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取文件输入流</span></span><br><span class="line">            InputStreamReader read = <span class="keyword">new</span> InputStreamReader(inputStream, ENCODING);</span><br><span class="line">            <span class="comment">// 文件是否是文件 和 是否存在</span></span><br><span class="line">            wordSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">            <span class="comment">// StringBuffer sb = new StringBuffer();</span></span><br><span class="line">            <span class="comment">// BufferedReader是包装类，先把字符读到缓存里，到缓存满了，再读入内存，提高了读的效率。</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(read);</span><br><span class="line">            String txt = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 读取文件，将文件内容放入到set中</span></span><br><span class="line">            <span class="keyword">while</span> ((txt = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                wordSet.add(txt);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            <span class="comment">// 关闭文件流</span></span><br><span class="line">            read.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wordSet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将HashSet中的敏感词,存入HashMap中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map <span class="title">addSensitiveWordToHashMap</span><span class="params">(Set&lt;String&gt; wordSet)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化敏感词容器，减少扩容操作</span></span><br><span class="line">        Map wordMap = <span class="keyword">new</span> HashMap(wordSet.size());</span><br><span class="line">        <span class="keyword">for</span> (String word : wordSet) &#123;</span><br><span class="line">            Map nowMap = wordMap;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="comment">// 转换成char型</span></span><br><span class="line">                <span class="keyword">char</span> keyChar = word.charAt(i);</span><br><span class="line">                <span class="comment">// 获取</span></span><br><span class="line">                Object tempMap = nowMap.get(keyChar);</span><br><span class="line">                <span class="comment">// 如果存在该key，直接赋值</span></span><br><span class="line">                <span class="keyword">if</span> (tempMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    nowMap = (Map) tempMap;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 不存在则，则构建一个map，同时将isEnd设置为0，因为他不是最后一个</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 设置标志位</span></span><br><span class="line">                    Map&lt;String, String&gt; newMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">                    newMap.put(<span class="string">"isEnd"</span>, <span class="string">"0"</span>);</span><br><span class="line">                    <span class="comment">// 添加到集合</span></span><br><span class="line">                    nowMap.put(keyChar, newMap);</span><br><span class="line">                    nowMap = newMap;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 最后一个</span></span><br><span class="line">                <span class="keyword">if</span> (i == word.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                    nowMap.put(<span class="string">"isEnd"</span>, <span class="string">"1"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wordMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-敏感词过滤器">2.2 敏感词过滤器</h3><p>敏感词过滤器，主要功能是初始化敏感词库，敏感词的过滤以及替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shawn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SensitiveFilter</span></span><br><span class="line"><span class="comment"> * Description:敏感词过滤器：利用DFA算法  进行敏感词过滤</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/22 18:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 敏感词过滤器：利用DFA算法  进行敏感词过滤</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Map sensitiveWordMap = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最小匹配规则，如：敏感词库["中国","中国人"]，语句："我是中国人"，匹配结果：我是[中国]人</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> minMatchType = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大匹配规则，如：敏感词库["中国","中国人"]，语句："我是中国人"，匹配结果：我是[中国人]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> maxMatchType = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 敏感词替换词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String placeHolder = <span class="string">"**"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SensitiveFilter instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化敏感词库</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SensitiveFilter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sensitiveWordMap = <span class="keyword">new</span> SensitiveWordInit().initKeyWord();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SensitiveFilter <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SensitiveFilter();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文字中的敏感词</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSensitiveWord</span><span class="params">(String txt, <span class="keyword">int</span> matchType)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; sensitiveWordList = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; txt.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 判断是否包含敏感字符</span></span><br><span class="line">            <span class="keyword">int</span> length = CheckSensitiveWord(txt, i, matchType);</span><br><span class="line">            <span class="comment">// 存在,加入list中</span></span><br><span class="line">            <span class="keyword">if</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sensitiveWordList.add(txt.substring(i, i + length));</span><br><span class="line">                <span class="comment">// 减1的原因，是因为for会自增</span></span><br><span class="line">                i = i + length - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sensitiveWordList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换敏感字字符,使用了默认的替换符合，默认最小匹配规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSensitiveWord</span><span class="params">(String txt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> replaceSensitiveWord(txt, minMatchType ,placeHolder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换敏感字字符,使用了默认的替换符合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSensitiveWord</span><span class="params">(String txt, <span class="keyword">int</span> matchType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> replaceSensitiveWord(txt, matchType,placeHolder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换敏感字字符</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSensitiveWord</span><span class="params">(String txt, <span class="keyword">int</span> matchType,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       String replaceChar)</span> </span>&#123;</span><br><span class="line">        String resultTxt = txt;</span><br><span class="line">        <span class="comment">// 获取所有的敏感词</span></span><br><span class="line">        Set&lt;String&gt; set = getSensitiveWord(txt, matchType);</span><br><span class="line">        Iterator&lt;String&gt; iterator = set.iterator();</span><br><span class="line">        String word = <span class="keyword">null</span>;</span><br><span class="line">        String replaceString = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            word = iterator.next();</span><br><span class="line">            replaceString = getReplaceChars(replaceChar, word.length());</span><br><span class="line">            resultTxt = resultTxt.replaceAll(word, replaceString);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultTxt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取替换字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getReplaceChars</span><span class="params">(String replaceChar, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        StringBuilder resultReplace = <span class="keyword">new</span> StringBuilder(replaceChar);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            resultReplace.append(replaceChar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultReplace.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查文字中是否包含敏感字符，检查规则如下：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 如果存在，则返回敏感词字符的长度，不存在返回0</span></span><br><span class="line"><span class="comment">     * 核心</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CheckSensitiveWord</span><span class="params">(String txt, <span class="keyword">int</span> beginIndex, <span class="keyword">int</span> matchType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 敏感词结束标识位：用于敏感词只有1的情况结束</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 匹配标识数默认为0</span></span><br><span class="line">        <span class="keyword">int</span> matchFlag = <span class="number">0</span>;</span><br><span class="line">        Map nowMap = sensitiveWordMap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = beginIndex; i &lt; txt.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> word = txt.charAt(i);</span><br><span class="line">            <span class="comment">// 获取指定key</span></span><br><span class="line">            nowMap = (Map) nowMap.get(word);</span><br><span class="line">            <span class="comment">// 存在，则判断是否为最后一个</span></span><br><span class="line">            <span class="keyword">if</span> (nowMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 找到相应key，匹配标识+1</span></span><br><span class="line">                matchFlag++;</span><br><span class="line">                <span class="comment">// 如果为最后一个匹配规则,结束循环，返回匹配标识数</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"1"</span>.equals(nowMap.get(<span class="string">"isEnd"</span>))) &#123;</span><br><span class="line">                    <span class="comment">// 结束标志位为true</span></span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">// 最小规则，直接返回,最大规则还需继续查找</span></span><br><span class="line">                    <span class="keyword">if</span> (SensitiveFilter.minMatchType == matchType) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不存在，直接返回</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配长度如果匹配上了最小匹配长度或者最大匹配长度</span></span><br><span class="line">        <span class="keyword">if</span> (SensitiveFilter.maxMatchType == matchType || SensitiveFilter.minMatchType == matchType)&#123;</span><br><span class="line">            <span class="comment">//长度必须大于等于1，为词，或者敏感词库还没有结束(匹配了一半)，flag为false</span></span><br><span class="line">            <span class="keyword">if</span>(matchFlag &lt; <span class="number">2</span> || !flag)&#123;</span><br><span class="line">                matchFlag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matchFlag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-测试使用">2.3 测试使用</h3><p>最后进行测试，这里有两种方式可以获取，因为容器初始化时会默认执行无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(SensitiveController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SensitiveFilter sensitiveFilter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sensitive"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sensitive</span><span class="params">(String keyword)</span></span>&#123;</span><br><span class="line">        String s = sensitiveFilter.replaceSensitiveWord(keyword);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两种方式都可以</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String searchKey = <span class="string">"傻逼h"</span>;</span><br><span class="line">        String placeholder = <span class="string">"***"</span>;</span><br><span class="line">        <span class="comment">//非法敏感词汇判断</span></span><br><span class="line">        SensitiveFilter filter = SensitiveFilter.getInstance();</span><br><span class="line">        String s = filter.replaceSensitiveWord(searchKey, <span class="number">1</span>, placeholder);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="keyword">int</span> n = filter.CheckSensitiveWord(searchKey,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//存在非法字符</span></span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            logger.info(<span class="string">"这个人输入了非法字符--&gt; &#123;&#125;,不知道他到底要查什么~ userid--&gt; &#123;&#125;"</span>,searchKey,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、Redis搜索栏热搜</h1><h2 id="1、前言">1、前言</h2><p><strong>使用java和redis实现一个简单的热搜功能，具备以下功能：</strong></p><ol><li><p>搜索栏展示当前登陆的个人用户的搜索历史记录，删除个人历史记录</p></li><li><p>用户在搜索栏输入某字符，则将该字符记录下来 以zset格式存储的redis中，记录该字符被搜索的个数以及当前的时间戳 （用了<strong>DFA算法</strong>）</p></li><li><p>每当用户查询了已在redis存在了的字符时，则直接累加个数， 用来获取平台上最热查询的十条数据。（可以自己写接口或者直接在redis中添加一些预备好的关键词）</p></li><li><p>最后还要做不雅文字过滤功能。</p></li></ol><p><strong>代码实现热搜与个人搜索记录功能，主要controller层下几个方法就行了 ：</strong></p><ol><li><p>向redis 添加热搜词汇(添加的时候使用下面不雅文字过滤的方法来过滤下这个词汇，合法再去存储</p></li><li><p>每次点击给相关词热度 +1</p></li><li><p>根据key搜索相关最热的前十名</p></li><li><p>插入个人搜索记录</p></li><li><p>查询个人搜索记录</p></li></ol><h2 id="2、代码实现">2、代码实现</h2><h3 id="2-1-创建RedisKeyUtils-工具类">2.1 创建RedisKeyUtils 工具类</h3><p>管理redis的键，防止太乱了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分隔符号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPLIT = <span class="string">":"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEARCH = <span class="string">"search"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEARCH_HISTORY = <span class="string">"search-history"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOT_SEARCH = <span class="string">"hot-search"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEARCH_TIME = <span class="string">"search-time"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个用户的个人搜索记录hash</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSearchHistoryKey</span><span class="params">(String userId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SEARCH + SPLIT + SEARCH_HISTORY + SPLIT + userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总的热搜zset</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHotSearchKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SEARCH + SPLIT + HOT_SEARCH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个搜索记录的时间戳记录：key-value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSearchTimeKey</span><span class="params">(String searchKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SEARCH + SPLIT + SEARCH_TIME + SPLIT + searchKey;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-核心搜索文件">2.2 核心搜索文件</h3><p>两个文件是一起的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"redisService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(RedisService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取热搜前几名返回</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer HOT_SEARCH_NUMBER = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多少时间内的搜索记录胃热搜</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long HOT_SEARCH_TIME = <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60L</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisSearchTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增一条该userid用户在搜索栏的历史记录</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">addSearchHistoryByUserId</span><span class="params">(String userId, String searchKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String redisKey = RedisKeyUtils.getSearchHistoryKey(userId);</span><br><span class="line">            <span class="comment">// 如果存在这个key</span></span><br><span class="line">            <span class="keyword">boolean</span> b = Boolean.TRUE.equals(redisSearchTemplate.hasKey(redisKey));</span><br><span class="line">            <span class="keyword">if</span> (b) &#123;</span><br><span class="line">                <span class="comment">// 获取这个关键词hash的值，有就返回，没有就新增</span></span><br><span class="line">                Object hk = redisSearchTemplate.opsForHash().get(redisKey, searchKey);</span><br><span class="line">                <span class="keyword">if</span> (hk != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1L</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    redisSearchTemplate.opsForHash().put(redisKey, searchKey, <span class="string">"1"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 没有这个关键词就新增</span></span><br><span class="line">                redisSearchTemplate.opsForHash().put(redisKey, searchKey, <span class="string">"1"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1L</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis发生异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除个人历史数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">delSearchHistoryByUserId</span><span class="params">(String userId, String searchKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String redisKey = RedisKeyUtils.getSearchHistoryKey(userId);</span><br><span class="line">            <span class="comment">// 删除这个用户的关键词记录</span></span><br><span class="line">            <span class="keyword">return</span> redisSearchTemplate.opsForHash().delete(redisKey, searchKey);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis发生异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取个人历史数据列表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getSearchHistoryByUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            List&lt;String&gt; stringList = <span class="keyword">null</span>;</span><br><span class="line">            String redisKey = RedisKeyUtils.getSearchHistoryKey(userId);</span><br><span class="line">            <span class="comment">// 判断存不存在</span></span><br><span class="line">            <span class="keyword">boolean</span> b = Boolean.TRUE.equals(redisSearchTemplate.hasKey(redisKey));</span><br><span class="line">            <span class="keyword">if</span>(b)&#123;</span><br><span class="line">                stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">// 逐个扫描，ScanOptions.NONE为获取全部键对，ScanOptions.scanOptions().match("map1").build() 匹配获取键位map1的键值对,不能模糊匹配</span></span><br><span class="line">                Cursor&lt;Map.Entry&lt;Object, Object&gt;&gt; cursor = redisSearchTemplate.opsForHash().scan(redisKey, ScanOptions.NONE);</span><br><span class="line">                <span class="keyword">while</span> (cursor.hasNext()) &#123;</span><br><span class="line">                    Map.Entry&lt;Object, Object&gt; map = cursor.next();</span><br><span class="line">                    String key = map.getKey().toString();</span><br><span class="line">                    stringList.add(key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> stringList;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis发生异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据searchKey搜索其相关最热的前十名 (如果searchKey为null空，则返回redis存储的前十最热词条)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHotList</span><span class="params">(String searchKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long now = System.currentTimeMillis();</span><br><span class="line">            List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            ZSetOperations&lt;String, String&gt; zSetOperations = redisSearchTemplate.opsForZSet();</span><br><span class="line">            ValueOperations&lt;String, String&gt; valueOperations = redisSearchTemplate.opsForValue();</span><br><span class="line">            Set&lt;String&gt; value = zSetOperations.reverseRangeByScore(RedisKeyUtils.getHotSearchKey(), <span class="number">0</span>, Double.MAX_VALUE);</span><br><span class="line">            <span class="comment">//key不为空的时候 推荐相关的最热前十名</span></span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotEmpty(searchKey))&#123;</span><br><span class="line">                <span class="keyword">for</span> (String val : value) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.containsIgnoreCase(val, searchKey)) &#123;</span><br><span class="line">                        <span class="comment">//只返回最热的前十名</span></span><br><span class="line">                        <span class="keyword">if</span> (result.size() &gt; HOT_SEARCH_NUMBER) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        Long time = Long.valueOf(Objects.requireNonNull(valueOperations.get(val)));</span><br><span class="line">                        <span class="comment">//返回最近一个月的数据</span></span><br><span class="line">                        <span class="keyword">if</span> ((now - time) &lt; HOT_SEARCH_TIME) &#123;</span><br><span class="line">                            result.add(val);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;<span class="comment">//时间超过一个月没搜索就把这个词热度归0</span></span><br><span class="line">                            zSetOperations.add(RedisKeyUtils.getHotSearchKey(), val, <span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (String val : value) &#123;</span><br><span class="line">                    <span class="comment">//只返回最热的前十名</span></span><br><span class="line">                    <span class="keyword">if</span> (result.size() &gt; HOT_SEARCH_NUMBER) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Long time = Long.valueOf(Objects.requireNonNull(valueOperations.get(val)));</span><br><span class="line">                    <span class="comment">//返回最近一个月的数据</span></span><br><span class="line">                    <span class="keyword">if</span> ((now - time) &lt; HOT_SEARCH_TIME) &#123;</span><br><span class="line">                        result.add(val);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//时间超过一个月没搜索就把这个词热度归0</span></span><br><span class="line">                        zSetOperations.add(RedisKeyUtils.getHotSearchKey(), val, <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis发生异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接上一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"redisService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(RedisService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisSearchTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增一条热词搜索记录，将用户输入的热词存储下来</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">incrementScoreByUserId</span><span class="params">(String searchKey)</span> </span>&#123;</span><br><span class="line">        Long now = System.currentTimeMillis();</span><br><span class="line">        ZSetOperations&lt;String, String&gt; zSetOperations = redisSearchTemplate.opsForZSet();</span><br><span class="line">        ValueOperations&lt;String, String&gt; valueOperations = redisSearchTemplate.opsForValue();</span><br><span class="line">        List&lt;String&gt; title = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        title.add(searchKey);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, length = title.size(); i &lt; length; i++) &#123;</span><br><span class="line">            String tle = title.get(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (zSetOperations.score(RedisKeyUtils.getHotSearchKey(), tle) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    zSetOperations.add(RedisKeyUtils.getHotSearchKey(), tle, <span class="number">0</span>);</span><br><span class="line">                    valueOperations.set(RedisKeyUtils.getSearchTimeKey(tle), String.valueOf(now));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                zSetOperations.add(RedisKeyUtils.getHotSearchKey(), tle, <span class="number">0</span>);</span><br><span class="line">                valueOperations.set(RedisKeyUtils.getSearchTimeKey(tle), String.valueOf(now));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次点击给相关词searchKey热度 +1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">incrementScore</span><span class="params">(String searchKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Long now = System.currentTimeMillis();</span><br><span class="line">            ZSetOperations&lt;String, String&gt; zSetOperations = redisSearchTemplate.opsForZSet();</span><br><span class="line">            ValueOperations&lt;String, String&gt; valueOperations = redisSearchTemplate.opsForValue();</span><br><span class="line">            <span class="comment">// 没有的话就插入，有的话的直接更新；add是有就覆盖，没有就插入</span></span><br><span class="line">            zSetOperations.incrementScore(RedisKeyUtils.getHotSearchKey(), searchKey, <span class="number">1</span>);</span><br><span class="line">            valueOperations.getAndSet(RedisKeyUtils.getSearchTimeKey(searchKey), String.valueOf(now));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1L</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis发生异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-测试使用-v2">2.3 测试使用</h3><p>以下只是简单的测试，上面的核心函数可以自己组合，一般组合加上敏感词过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchHistoryController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisService redisService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addSearchHistoryByUserId</span><span class="params">(String userId, String searchKey)</span> </span>&#123;</span><br><span class="line">        redisService.addSearchHistoryByUserId(userId, searchKey);</span><br><span class="line">        redisService.incrementScore(searchKey);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除个人历史数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/del"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">delSearchHistoryByUserId</span><span class="params">(String userId, String searchKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisService.delSearchHistoryByUserId(userId, searchKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取个人历史数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getSearchHistoryByUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisService.getSearchHistoryByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据searchKey搜索其相关最热的前十名 (如果searchKey为null空，则返回redis存储的前十最热词条)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getHot"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHotList</span><span class="params">(String searchKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisService.getHotList(searchKey);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p><p><a href="https://blog.csdn.net/lemon_TT/article/details/117711682" target="_blank" rel="noopener" title="Redis6.0学习笔记">Redis6.0学习笔记</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、前言&lt;/h1&gt;
&lt;p&gt;这里主要讲springboot整合redis的个人搜索记录与热搜、敏感词过滤与替换两个功能，下面进行环境准备，引入相关maven依赖&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring代码性能优化</title>
    <link href="https://www.shawn22.xyz/posts/9af9fa7c.html"/>
    <id>https://www.shawn22.xyz/posts/9af9fa7c.html</id>
    <published>2022-07-11T11:45:37.000Z</published>
    <updated>2022-07-11T12:14:18.044Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Java性能优化</h1><p><strong>1、使用单例</strong></p><p>使用单例可以减轻加载的负担，缩短加载的时间，提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：</p><ul><li><p>控制资源的使用，通过线程同步来控制资源的并发访问；</p></li><li><p>控制实例的产生，以达到节约资源的目的；</p></li><li><p>控制数据共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信。</p></li></ul><a id="more"></a><p>2、避免随意使用静态变量**</p><p>当某个对象被定义为static变量所引用，那么GC通常是不会回收这个对象所占有的内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此时静态变量b的生命周期与A类同步，如果A类不会卸载，那么b对象会常驻内存，直到程序终止。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> B b = <span class="keyword">new</span> B();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、</strong> ​<strong>避免过多创建Java对象</strong></p><p>在我们可以控制的范围内，最大限度地重用对象，最好能用基本的数据类型或数组来替代对象。</p><p><strong>4、尽量使用final修饰符</strong></p><p>带有final修饰符的类是不可派生的。java编译器会寻找机会内联（inline）所有的final方法（这和具体的编译器实现有关），此举能够使性能平均提高50%。</p><p><strong>5、尽量使用局部变量</strong></p><p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈（Stack）中，速度较快；其他变量，如静态变量、实例变量等，都在堆（Heap）中创建，速度较慢。</p><p><strong>6. 尽量处理好包装类型和基本类型两者的使用场所</strong></p><p>虽然包装类型和基本类型在使用过程中是可以相互转换，但它们两者所产生的内存区域是完全不同的，基本类型数据产生和处理都在栈中处理，包装类型是对象，是在堆中产生实例。在集合类对象，有对象方面需要的处理适用包装类型，其他的处理提倡使用基本类型。</p><p><strong>7. 慎用synchronized，尽量减小synchronize的方法</strong></p><p>实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。<strong>synchronize方法被调用时，直接会把当前对象锁</strong>了，在方法执行完之前其他线程无法调用当前对象的其他方法。所以，synchronize的方法尽量减小，并且应尽量使用方法同步代替代码块同步。</p><p><strong>9. 尽量不要使用finalize方法</strong></p><p>实际上，将资源清理放在finalize方法中完成是非常不好的选择，由于GC的工作量很大，尤其是回收Young代内存时，大都会引起应用程序暂停，所以再选择使用finalize方法进行资源清理，会导致GC负担更大，程序运行效率更差。</p><p><strong>10. 尽量使用基本数据类型代替对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种方式会创建一个“hello”字符串，而且JVM的字符缓存池还会缓存这个字符串；</span></span><br><span class="line">String str = <span class="string">"hello"</span>; </span><br><span class="line"><span class="comment">//程序除创建字符串外，str所引用的String对象底层还包含一个char[]数组，这个char[]数组依次存放了h,e,l,l,o</span></span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p><strong>11. 多线程在未发生线程安全前提下应尽量使用HashMap、ArrayList</strong></p><p>HashTable、Vector等使用了同步机制，降低了性能。</p><p><strong>12. 尽量合理的创建HashMap</strong></p><p>当你要创建一个比较大的hashMap时，充分利用这个构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span></span>;</span><br></pre></td></tr></table></figure><p>避免HashMap多次进行了hash重构,扩容是一件很耗费性能的事，在默认中initialCapacity只有16，而loadFactor是 0.75，需要多大的容量，你最好能准确的估计你所需要的最佳大小，同样的Hashtable，Vectors也是一样的道理。</p><p><strong>13. 尽量减少对变量的重复计算</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)  </span><br><span class="line"><span class="comment">//应该改为：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,len=list.size();i&lt;len;i++)</span><br></pre></td></tr></table></figure><p>并且在循环中应该避免使用复杂的表达式，在循环中，循环条件会被反复计算，如果不使用复杂表达式，而使循环条件值不变的话，程序将会运行的更快。</p><p><strong>14. 尽量避免不必要的创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> A();  </span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;  </span><br><span class="line">list.add(a);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//应该改为：  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;  </span><br><span class="line">A a = <span class="keyword">new</span> A();  </span><br><span class="line">list.add(a);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>15. 尽量在finally块中释放资源</strong></p><p>程序中使用到的资源应当被释放，以避免资源泄漏，这最好在finally块中去做。不管程序执行的结果如何，finally块总是会执行的，以确保资源的正确关闭。</p><p><strong>16. 尽量使用移位来代替’a/b’的操作</strong></p><p>&quot;/&quot;是一个代价很高的操作，使用移位的操作将会更快和更有效。但注意的是使用移位应添加注释，因为移位操作不直观，比较难理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = a / <span class="number">4</span>;  </span><br><span class="line"><span class="keyword">int</span> num = a / <span class="number">8</span>;  </span><br><span class="line"><span class="comment">//应该改为：</span></span><br><span class="line"><span class="keyword">int</span> num = a &gt;&gt; <span class="number">2</span>;  </span><br><span class="line"><span class="keyword">int</span> num = a &gt;&gt; <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><strong>17.尽量使用移位来代替’a*b’的操作</strong></p><p>对于’ *'操作，使用移位的操作将会更快和更有效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = a * <span class="number">4</span>;  </span><br><span class="line"><span class="keyword">int</span> num = a * <span class="number">8</span>;  </span><br><span class="line"><span class="comment">//应该改为：</span></span><br><span class="line"><span class="keyword">int</span> num = a &lt;&lt; <span class="number">2</span>;  </span><br><span class="line"><span class="keyword">int</span> num = a &lt;&lt; <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><strong>18. 尽量确定StringBuffer的容量</strong></p><p>StringBuffer的默认容量为16，当StringBuffer的容量达到最大容量时，它会将自身容量增加到当前的2倍+2，也就是2*n+2。无论何时，只要StringBuffer到达它的最大容量，它就不得不创建一个新的对象数组，然后复制旧的对象数组，这会浪费很多时间。所以给StringBuffer设置一个合理的初始化容量值，是很有必要的！</p><p><strong>19. 尽量早释放无用对象的引用</strong></p><p>大部分时，方法局部引用变量所引用的对象会随着方法结束而变成垃圾，因此，大部分时候程序无需将局部，引用变量显式设为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;  </span><br><span class="line">Object obj = <span class="keyword">new</span> Object();  </span><br><span class="line">……  </span><br><span class="line">Obj=<span class="keyword">null</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//上面这个就没必要了，随着方法test()的执行完成，程序中obj引用变量的作用域就结束了。但是如果是改成下面：</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;  </span><br><span class="line">Object obj = <span class="keyword">new</span> Object();  </span><br><span class="line">……  </span><br><span class="line">Obj=<span class="keyword">null</span>;  </span><br><span class="line"><span class="comment">//执行耗时，耗内存操作；或调用耗时，耗内存的方法  </span></span><br><span class="line">……  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候就有必要将obj赋值为null，可以尽早的释放对Object对象的引用。</p><p><strong>20. 尽量避免使用二维数组</strong></p><p>二维数据占用的内存空间比一维数组多得多，大概10倍以上。</p><p><strong>21. 尽量避免使用split</strong></p><p>除非是必须的，否则应该避免使用split，split由于支持正则表达式，所以效率比较低，如果是频繁的几十，几百万的调用将会耗费大量资源，如果确实需要频繁的调用split，可以考虑使用apache的StringUtils.split(string,char)，频繁split的可以缓存结果。</p><p><strong>22. ArrayList &amp; LinkedList</strong>  </p><p>一个是线性表，一个是链表，一句话，随机查询尽量使用ArrayList，ArrayList优于LinkedList，LinkedList还要移动指针，添加删除的操作LinkedList优于ArrayList，ArrayList还要移动数据，不过这是理论性分析，事实未必如此，重要的是理解好2者得数据结构，对症下药。</p><p><strong>23. 尽量使用System.arraycopy ()代替通过来循环复制数组</strong></p><p>System.arraycopy() 要比通过循环来复制数组快的多。</p><p><strong>24. 尽量缓存经常使用的对象</strong>  </p><p>尽可能将经常使用的对象进行缓存，可以使用数组，或HashMap的容器来进行缓存，但这种方式可能导致系统占用过多的缓存，性能下降，推荐可以使用一些第三方的开源工具，如EhCache，Oscache进行缓存，他们基本都实现了FIFO/FLU等缓存算法。</p><p><strong>25. 尽量避免非常大的内存分配</strong></p><p>有时候问题不是由当时的堆状态造成的，而是因为分配失败造成的。分配的内存块都必须是连续的，而随着堆越来越满，找到较大的连续块越来越困难。</p><p><strong>26. 慎用异常</strong></p><p>当创建一个异常时，需要收集一个栈跟踪(stack track)，这个栈跟踪用于描述异常是在何处创建的。构建这些栈跟踪时需要为运行时栈做一份快照，正是这一部分开销很大。当需要创建一个 Exception 时，JVM 不得不说：先别动，我想就您现在的样子存一份快照，所以暂时停止入栈和出栈操作。栈跟踪不只包含运行时栈中的一两个元素，而是包含这个栈中的每一个元素。</p><p>如果您创建一个 Exception ，就得付出代价，好在捕获异常开销不大，因此可以使用 try-catch 将核心内容包起来。从技术上讲，你甚至可以随意地抛出异常，而不用花费很大的代价。招致性能损失的并不是 throw 操作——尽管在没有预先创建异常的情况下就抛出异常是有点不寻常。真正要花代价的是创建异常，幸运的是，好的编程习惯已教会我们，不应该不管三七二十一就抛出异常。异常是为异常的情况而设计的，使用时也应该牢记这一原则。</p><p><strong>27. 尽量重用对象</strong></p><p>特别是String对象的使用中，出现字符串连接情况时应使用StringBuffer代替，由于系统不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理。因此生成过多的对象将会给程序的性能带来很大的影响。</p><p><strong>28. 不要重复初始化变量</strong></p><p>默认情况下，调用类的构造函数时，java会把变量初始化成确定的值，所有的对象被设置成null，整数变量设置成0，float和double变量设置成0.0，逻辑值设置成false。当一个类从另一个类派生时，这一点尤其应该注意，因为用new关键字创建一个对象时，构造函数链中的所有构造函数都会被自动调用。</p><p>这里有个注意，给成员变量设置初始值但需要调用其他方法的时候，最好放在一个方法。比如initXXX()中，因为直接调用某方法赋值可能会因为类尚未初始化而抛空指针异常，如：public int state = this.getState()。</p><p><strong>java开发时一些小tips</strong></p><ul><li><p>在java+Oracle的应用系统开发中，java中内嵌的SQL语言应尽量使用大写形式，以减少Oracle解析器的解析负担。</p></li><li><p>在java编程过程中，进行数据库连接，I/O流操作，在使用完毕后，及时关闭以释放资源。因为对这些大对象的操作会造成系统大的开销。</p></li><li><p>过分的创建对象会消耗系统的大量内存，严重时，会导致内存泄漏，因此，保证过期的对象的及时回收具有重要意义。JVM的GC并非十分智能，因此建议在对象使用完毕后，手动设置成null。</p></li><li><p>在使用同步机制时，应尽量使用方法同步代替代码块同步。</p></li><li><p>不要在循环中使用Try/Catch语句，应把Try/Catch放在循环最外层</p></li><li><p>Error是获取系统错误的类，或者说是虚拟机错误的类。不是所有的错误Exception都能获取到的，虚拟机报错Exception就获取不到，必须用Error获取。</p></li></ul><p><strong>30. 合理使用java.util.Vector</strong></p><p>Vector与StringBuffer类似，每次扩展容量时，所有现有元素都要赋值到新的存储空间中。Vector的默认存储能力为10个元素，扩容加倍。</p><p><strong>31. 不用new关键字创建对象的实例</strong></p><p>用new关键词创建类的实例时，构造函数链中的所有构造函数都会被自动调用。但如果一个对象实现了Cloneable接口，我们可以调用它的clone()方法。clone()方法不会调用任何类构造函数。</p><p><strong>32. 不要将数组声明为：public static final</strong></p><p><strong>33. HaspMap的遍历：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String[]&gt; paraMap = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;();  </span><br><span class="line"><span class="keyword">for</span>( Entry&lt;String, String[]&gt; entry : paraMap.entrySet() )  </span><br><span class="line">&#123;  </span><br><span class="line">  String appFieldDefId = entry.getKey();  </span><br><span class="line">  String[] values = entry.getValue();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用散列值取出相应的Entry做比较得到结果，取得entry的值之后直接取key和value。</p><p><strong>34. array(数组)和ArrayList的使用</strong></p><p>array 数组效率最高，但容量固定，无法动态改变，ArrayList容量可以动态增长，但牺牲了效率。</p><p><strong>35. 单线程应尽量使用 HashMap, ArrayList,除非必要，否则不推荐使用HashTable,Vector，它们使用了同步机制，而降低了性能。</strong></p><p><strong>36. StringBuffer，StringBuilder的区别</strong></p><p>java.lang.StringBuffer 线程安全的可变字符序列。一个类似于String的字符串缓冲区，但不能修改。StringBuilder与该类相比，通常应该优先使用StringBuilder类，因为它支持所有相同的操作，但由于它不执行同步，所以速度更快。相同情况下，使用StringBuilder比使用StringBuffer仅能获得10%~15%的性能提升，但却要冒多线程不安全的风险。综合考虑还是建议使用StringBuffer。</p><p><strong>37. 考虑使用静态方法</strong></p><p>如果你没有必要去访问对象的外部，那么就使你的方法成为静态方法。它会被更快地调用，因为它不需要一个虚拟函数导向表。这同时也是一个很好的实践，因为它告诉你如何区分方法的性质，调用这个方法不会改变对象的状态。</p><p><strong>38. 应尽可能避免使用内在的GET,SET方法。</strong></p><p><strong>39.避免枚举，浮点数的使用。</strong></p><p><strong>40.在字符串相加的时候，使用 ’ ’ 代替 &quot; &quot;，如果该字符串只有一个字符的话</strong></p><h1>二、SpringBoot性能优化</h1><h2 id="1、异步执行">1、异步执行</h2><blockquote><p>可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/121561663" target="_blank" rel="noopener" title="Java8异步编程">Java8异步编程</a></p></blockquote><ul><li><p>使用异步注解 @aysnc、启动类：添加 @EnableAsync 注解</p></li><li><p>JDK 8 本身有一个非常好用的 Future 类——CompletableFuture</p></li></ul><p><code>CompletableFuture.supplyAsync()</code> 方法构造一个 CompletableFuture 实例，在 supplyAsync() 方法中，它会在一个新线程中，执行传入的参数。在这里它会执行 calc() 方法，这个方法可能是比较慢的，但这并不影响 CompletableFuture 实例的构造速度，<code>supplyAsync() </code>会立即返回。而返回的 CompletableFuture 实例就可以作为这次调用的契约，在将来任何场合，用于获得最终的计算结果。</p><p><strong>supplyAsync 用于提供返回值的情况</strong>，CompletableFuture 还有一个不需要返回值的异步调用方法 <code>runAsync(Runnable runnable)</code>，一般我们在优化 Controller 时，使用这个方法比较多。</p><p>这两个方法如果在不指定线程池的情况下，都是在 ForkJoinPool.common 线程池中执行，而这个线程池中的所有线程都是 Daemon（守护）线程，所以当主线程结束时，这些线程无论执行完毕都会退出系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 我们用休眠 1 秒来模拟一个长时间的计算过程，</span></span><br><span class="line"><span class="comment">* 并将计算结果告诉 future 执行结果，AskThread 线程将会继续执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">calc</span><span class="params">(Integer para)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//模拟一个长时间的执行</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> para * para;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CompletableFuture&lt;Void&gt; future = CompletableFuture.supplyAsync(() -&gt; calc(<span class="number">50</span>))</span><br><span class="line">                .thenApply((i) -&gt; Integer.toString(i))</span><br><span class="line">                .thenApply((str) -&gt; <span class="string">"\""</span> + str + <span class="string">"\""</span>)</span><br><span class="line">                .thenAccept(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">"率先执行"</span>);</span><br><span class="line">        future.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步调用使用 Callable 来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HelloController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/helloworld"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorldController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步调用restful</span></span><br><span class="line"><span class="comment">     * 当controller返回值是Callable的时候，springmvc就会启动一个线程将Callable交给TaskExecutor去处理</span></span><br><span class="line"><span class="comment">     * 然后DispatcherServlet还有所有的spring拦截器都退出主线程，然后把response保持打开的状态</span></span><br><span class="line"><span class="comment">     * 当Callable执行结束之后，springmvc就会重新启动分配一个request请求，然后DispatcherServlet就重新</span></span><br><span class="line"><span class="comment">     * 调用和处理Callable异步执行的返回结果， 然后返回视图</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">helloController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">" 进入helloController方法"</span>);</span><br><span class="line">        Callable&lt;String&gt; callable = <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">" 进入call方法"</span>);</span><br><span class="line">                String say = <span class="string">"hello world"</span>;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">" 从helloService方法返回"</span>);</span><br><span class="line">                <span class="keyword">return</span> say;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">" 从helloController方法返回"</span>);</span><br><span class="line">        <span class="keyword">return</span> callable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步调用的方式 WebAsyncTask：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HelloController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带超时时间的异步请求 通过WebAsyncTask自定义客户端超时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/world"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebAsyncTask&lt;String&gt; <span class="title">worldController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">" 进入helloController方法"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3s钟没返回，则认为超时</span></span><br><span class="line">        WebAsyncTask&lt;String&gt; webAsyncTask = <span class="keyword">new</span> WebAsyncTask&lt;&gt;(<span class="number">3000</span>, <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">" 进入call方法"</span>);</span><br><span class="line">                String say = <span class="string">"hello world"</span>;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">" 从helloService方法返回"</span>);</span><br><span class="line">                <span class="keyword">return</span> say;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">" 从helloController方法返回"</span>);</span><br><span class="line"></span><br><span class="line">        webAsyncTask.onCompletion(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">" 执行完毕"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        webAsyncTask.onTimeout(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">" onTimeout"</span>);</span><br><span class="line">                <span class="comment">// 超时的时候，直接抛异常，让外层统一处理超时异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">"调用超时"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> webAsyncTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步调用，异常处理，详细的处理流程见MyExceptionHandler类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/exception"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebAsyncTask&lt;String&gt; <span class="title">exceptionController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">" 进入helloController方法"</span>);</span><br><span class="line">        Callable&lt;String&gt; callable = <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">" 进入call方法"</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">"调用超时!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">" 从helloController方法返回"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebAsyncTask&lt;&gt;(<span class="number">20000</span>, callable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、增加内嵌-Tomcat-的最大连接数">2、增加内嵌 Tomcat 的最大连接数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurableServletWebServerFactory <span class="title">webServerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory tomcatFactory = <span class="keyword">new</span> TomcatServletWebServerFactory();</span><br><span class="line">        tomcatFactory.addConnectorCustomizers(<span class="keyword">new</span> MyTomcatConnectorCustomizer());</span><br><span class="line">        tomcatFactory.setPort(<span class="number">8005</span>);</span><br><span class="line">        tomcatFactory.setContextPath(<span class="string">"/api-s"</span>);</span><br><span class="line">        <span class="keyword">return</span> tomcatFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyTomcatConnectorCustomizer</span> <span class="keyword">implements</span> <span class="title">TomcatConnectorCustomizer</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Connector connector)</span> </span>&#123;</span><br><span class="line">            Http11NioProtocol protocol = (Http11NioProtocol) connector.getProtocolHandler();</span><br><span class="line">            <span class="comment">//设置最大连接数</span></span><br><span class="line">            protocol.setMaxConnections(<span class="number">20000</span>);</span><br><span class="line">            <span class="comment">//设置最大线程数</span></span><br><span class="line">            protocol.setMaxThreads(<span class="number">2000</span>);</span><br><span class="line">            protocol.setConnectionTimeout(<span class="number">30000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、使用-ComponentScan">3、使用 @ComponentScan()</h2><p>使用 @ComponentScan() 定位扫包比 @SpringBootApplication 扫包更快。</p><h2 id="4、默认-Tomcat-容器改为-Undertow">4、默认 Tomcat 容器改为 Undertow</h2><p>默认 Tomcat 容器改为 Undertow（Jboss 下的服务器，Tomcat 吞吐量 5000，Undertow 吞吐量 8000）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 移除嵌入式tomcat插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、使用-BufferedWriter-进行缓冲">5、使用 BufferedWriter 进行缓冲</h2><h2 id="6、Deferred-方式实现异步调用">6、Deferred 方式实现异步调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncDeferredController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LongTimeTask taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncDeferredController</span><span class="params">(LongTimeTask taskService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskService = taskService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/deferred"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">executeSlowTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">"进入executeSlowTask方法"</span>);</span><br><span class="line">        DeferredResult&lt;String&gt; deferredResult = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line">        <span class="comment">// 调用长时间执行任务</span></span><br><span class="line">        taskService.execute(deferredResult);</span><br><span class="line">        <span class="comment">// 当长时间任务中使用deferred.setResult("world");这个方法时，会从长时间任务中返回，继续controller里面的流程</span></span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">"从executeSlowTask方法返回"</span>);</span><br><span class="line">        <span class="comment">// 超时的回调方法</span></span><br><span class="line">        deferredResult.onTimeout(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">" onTimeout"</span>);</span><br><span class="line">                <span class="comment">// 返回超时信息</span></span><br><span class="line">                deferredResult.setErrorResult(<span class="string">"time out!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理完成的回调方法，无论是超时还是处理成功，都会进入这个回调方法</span></span><br><span class="line">        deferredResult.onCompletion(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                logger.info(Thread.currentThread().getName() + <span class="string">" onCompletion"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> deferredResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、异步调用使用-AsyncHandlerInterceptor-进行拦截">7、异步调用使用 AsyncHandlerInterceptor 进行拦截</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">AsyncHandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyAsyncHandlerInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                           ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// HandlerMethod handlerMethod = (HandlerMethod) handler;</span></span><br><span class="line">        logger.info(Thread.currentThread().getName()+ <span class="string">"服务调用完成，返回结果给客户端"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != ex)&#123;</span><br><span class="line">            System.out.println(<span class="string">"发生异常:"</span>+ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截之后，重新写回数据，将原来的hello world换成如下字符串</span></span><br><span class="line">        String resp = <span class="string">"my name is chhliu!"</span>;</span><br><span class="line">        response.setContentLength(resp.length());</span><br><span class="line">        response.getOutputStream().write(resp.getBytes());</span><br><span class="line"></span><br><span class="line">        logger.info(Thread.currentThread().getName() + <span class="string">" 进入afterConcurrentHandlingStarted方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p><p><a href="https://mp.weixin.qq.com/s/CLwe5tPof5HzJAN5vsTBCA" target="_blank" rel="noopener" title="Java性能优化的50个细节，记得收藏 ！">Java性能优化的50个细节，记得收藏 ！</a></p><p><a href="https://mp.weixin.qq.com/s/ld89Lk3BSjxr2efq-9WAjw" target="_blank" rel="noopener" title="Spring Boot性能太差，教你几招轻松搞定">Spring Boot性能太差，教你几招轻松搞定</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Java性能优化&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;1、使用单例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用单例可以减轻加载的负担，缩短加载的时间，提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;控制资源的使用，通过线程同步来控制资源的并发访问；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制实例的产生，以达到节约资源的目的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制数据共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Spring基础" scheme="https://www.shawn22.xyz/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBean的一些总结</title>
    <link href="https://www.shawn22.xyz/posts/ad1c29e.html"/>
    <id>https://www.shawn22.xyz/posts/ad1c29e.html</id>
    <published>2022-07-11T11:45:25.000Z</published>
    <updated>2022-07-11T12:09:38.786Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Spring配置类的实现</h1><h2 id="1、基本介绍">1、基本介绍</h2><p>Spring Boot 推荐使用 java 配置完全代替 XML 配置，java 配置是通过 <code>@Configration</code>和 <code>@Bean</code>注解实现的，二者作用如下：</p><ul><li><code>@Configration </code>注解：声明当前类是一个配置类，相当于 <strong>Spring 中的一个 XML 文件</strong></li><li><code>@Bean</code> 注解：作用在方法上，<strong>声明当前方法的返回值是一个 Bean</strong></li></ul><a id="more"></a><p>下面是最简单的一个示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**==============调用==============*/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    String hello;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、-Bean-注解详解">2、@Bean 注解详解</h2><h3 id="2-1-使用说明">2.1 使用说明</h3><ul><li><p><code>@Bean</code> 注解作用在方法上</p></li><li><p><code>@Bean</code> 指示一个方法返回一个 Spring 容器管理的 Bean</p></li><li><p><code>@Bean</code> 方法名与返回类名一致，首字母小写</p></li><li><p><code>@Bean</code> 一般和 <code>@Component</code> 或者 <code>@Configuration</code> 一起使用</p></li><li><p><code>@Bean</code> 注解默认作用域为单例 singleton 作用域，可通过 <code>@Scope(&quot;prototype&quot;)</code> 设置为原型作用域</p></li></ul><h3 id="2-2-Bean名称">2.2 Bean名称</h3><p>1、默认情况下 Bean 名称就是方法名，比如下面 Bean 名称便是 myBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 @Bean 注解支持设置别名。比如下面除了主名称 myBean 外，还有个别名 myBean1（两个都可以使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(<span class="string">"myBean1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、@Bean 注解可以接受一个 String 数组设置多个别名。比如下面除了主名称 myBean 外，还有别名 myBean1、myBean2（三个都可以使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(&#123;<span class="string">"myBean1"</span>, <span class="string">"myBean2"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Bean-与其他注解一起使用">2.3 @Bean 与其他注解一起使用</h3><p>@Bean 注解常常与 <code>@Scope、@Lazy，@DependsOn 和 @link Primary </code>注解一起使用：  </p><ul><li><p><code>@Profile</code> 注解：为在不同环境下使用不同的配置提供了支持，如开发环境和生产环境的数据库配置是不同的</p></li><li><p><code>@Scope</code> 注解：将 Bean 的作用域从单例改变为指定的作用域</p></li><li><p><code>@Lazy</code>注解：只有在默认单例作用域的情况下才有实际效果</p></li><li><p><code>@DependsOn</code> 注解：表示在当前 Bean 创建之前需要先创建特定的其他 Bean</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Bean(initMethod="init", destroyMethod="destroy") 可以调用初始化和销毁的方法</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//  @Scope 注解将其改成 prototype 原型模式（每次获取 Bean 的时候会有一个新的实例）</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、-Configration-注解详解">3、@Configration 注解详解</h2><h3 id="3-1-使用说明">3.1 使用说明</h3><ul><li><p><code>@Configration </code>注解作用在类、接口（包含注解）上</p></li><li><p><code>@Configuration</code> 用于定义配置类，可替换 xml 配置文件</p></li><li><p><code>@Configration</code> 注解类中可以声明一个或多个 @Bean 方法</p></li><li><p><code>@Configration</code> 注解作用的类不能是 final 类型</p></li><li><p>嵌套的 <code>@Configration</code> 类必须是 static 的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBeanApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context</span><br><span class="line">                = SpringApplication.run(SpringBeanApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        String myBean = (String) context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(myBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-Bean与-Condition的组合">3.2 @Bean与@Condition的组合</h3><p><img src="https://img-blog.csdnimg.cn/612de45a92024349b828f0030a685f6f.png#pic_center" alt="在这里插入图片描述"></p><h1>二、Bean注入的一些总结</h1><h2 id="1、多Bean注入">1、多Bean注入</h2><h3 id="1-1-简介">1.1 简介</h3><p><code>@Resource</code>默认是按照名字注入，<code>@Autowired</code>默认是按照类型注入，当一个容器内只有一个名字或者类型时，直接走默认就可以，Spring会自动帮我们注入；同时当只；有一个bean时，变量名取任何合法名字都可以。</p><p>但是当有多个相同类型的bean时，变量名必须根据注入Bean类名字获取，或者使用<code>@Qualifier</code>注解指定某个Bean</p><h3 id="1-2-代码详解">1.2 代码详解</h3><p>创建User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"age='"</span> + age + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建config类，bean注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"18"</span>, <span class="string">"shawn"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"19"</span>, <span class="string">"shawn1"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"20"</span>, <span class="string">"shawn2"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认按照类型或者注入，下面两种都可以，当只有一个bean时，变量名取任何合法名字都可以</span></span><br><span class="line">    <span class="comment">//@Resource</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Resource指定</span></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"user1"</span>)</span><br><span class="line">    User user11;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"user2"</span>)</span><br><span class="line">    User user22;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(user11);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Spring容器有参与无参构造">2、Spring容器有参与无参构造</h2><ul><li><p>一般一个类他会<strong>自带一个默认的无参构造方法</strong>，如果你在其中写入了有参构造，在没有重新写入无参构造的情况下，该无参构造方法就不存在了</p></li><li><p>在使用spring框架时，在使用一个类的时候，spring容器会自动对该类进行实例化，但是该类必须时无参构造的，相当于spring的默认设置</p></li><li><p>如果在使用spring框架时，实体类的初始化方法是有参构造，那么需要在配置文件中进行配置（即.xml文件）或者<strong>注入相应的bean</strong>之后spring容器才能对该类进行实例化，否则会报错</p></li><li><p>当一个类存在有参和无参构造函数时，默认为无参，如果要执行有参构造，可以在构造函数上加<code>@Autowired</code>注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"18"</span>, <span class="string">"shawn"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**=====================分割线==============*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认无参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserService空构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@Autowired 会执行有参，多个bean的话注意对应方法名 </span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user=user;</span><br><span class="line">        System.out.println(<span class="string">"UserService非空构造函数"</span>+ user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取到的User为"</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、-Bean-与-Component">3、@Bean 与 @Component</h2><h3 id="3-1-简介">3.1 简介</h3><p>当@Bean 与 @Component 同时作用同一个类时，Spring容器种到底有几个 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**==========================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认无参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserService空构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user=user;</span><br><span class="line">        System.out.println(<span class="string">"UserService非空构造函数"</span>+ user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取到的User为"</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-解释说明">3.2 解释说明</h3><blockquote><p>具体的源码参考：<a href="https://cloud.tencent.com/developer/article/1886414" target="_blank" rel="noopener" title="https://cloud.tencent.com/developer/article/1886414">https://cloud.tencent.com/developer/article/1886414</a></p></blockquote><p> <code>@Configuration</code> 包含了 <code>@Component</code> ，在Spring扫描过程中，<code>@Configuration+@Bean</code>方式会覆盖先创建的<code>@Service</code>的Bean</p><p>但在 Spring 5.1.2.RELEASE （Spring Boot 则是 2.1.0.RELEASE ）后，新增了配置项<strong>allowBeanDefinitionOverriding</strong> 来控制是否允许 BeanDefinition 覆盖，默认情况下是不允许的。我们可以在配置文件中配置：<strong>spring.main.allow-bean-definition-overriding=true</strong> ，允许 BeanDefinition 覆盖</p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Spring配置类的实现&lt;/h1&gt;
&lt;h2 id=&quot;1、基本介绍&quot;&gt;1、基本介绍&lt;/h2&gt;
&lt;p&gt;Spring Boot 推荐使用 java 配置完全代替 XML 配置，java 配置是通过 &lt;code&gt;@Configration&lt;/code&gt;和 &lt;code&gt;@Bean&lt;/code&gt;注解实现的，二者作用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Configration &lt;/code&gt;注解：声明当前类是一个配置类，相当于 &lt;strong&gt;Spring 中的一个 XML 文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Bean&lt;/code&gt; 注解：作用在方法上，&lt;strong&gt;声明当前方法的返回值是一个 Bean&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Spring基础" scheme="https://www.shawn22.xyz/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Nginx二次开发</title>
    <link href="https://www.shawn22.xyz/posts/3789f784.html"/>
    <id>https://www.shawn22.xyz/posts/3789f784.html</id>
    <published>2022-07-11T11:33:52.000Z</published>
    <updated>2022-07-11T12:06:49.310Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Lua语言基础</h1><h2 id="1、-介绍">1、 介绍</h2><blockquote><p>Lua 是由巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于1993年开发的一种轻量、小巧的脚本语言，用标准 C 语言编写，其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。<br>lua官网：<a href="http://www.lua.org/" target="_blank" rel="noopener">http://www.lua.org/</a></p></blockquote><p>Lua/luajit/nginx/openresty关系，lua是脚本语言，luajit是lua的功能包与解析器（相当于java对应的jdk）,nginx可以内嵌luajit（承载的容器），openresty把额外扩展包集成到nginx里（相当于spring脚手架）</p><a id="more"></a><h2 id="2、IDE">2、IDE</h2><p><strong>windows版lua下载</strong><br><a href="http://joedf.ahkscript.org/LuaBuilds/" target="_blank" rel="noopener">http://joedf.ahkscript.org/LuaBuilds/</a><br><a href="http://luabinaries.sourceforge.net/" target="_blank" rel="noopener">http://luabinaries.sourceforge.net/</a><br><strong>EmmyLua插件</strong><br><a href="https://github.com/EmmyLua/IntelliJ-EmmyLua" target="_blank" rel="noopener">https://github.com/EmmyLua/IntelliJ-EmmyLua</a><br><a href="https://emmylua.github.io/zh_CN/" target="_blank" rel="noopener">https://emmylua.github.io/zh_CN/</a><br><strong>LDT 基于eclipse</strong><br><a href="https://www.eclipse.org/ldt/" target="_blank" rel="noopener">https://www.eclipse.org/ldt/</a></p><h2 id="3、Lua基础语法">3、Lua基础语法</h2><h3 id="3-1-保留关键字和注释">3.1 保留关键字和注释</h3><p><strong>保留关键字</strong><br><code>and/break/do/else/elseif/end/false/for/function if/in/local/nil/not/or/repeat/return/then/true/until/while</code><br><strong>注释</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 两个减号是行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment"> 这是块注释</span></span><br><span class="line"><span class="comment"> 这是块注释.</span></span><br><span class="line"><span class="comment"> --]]</span></span><br></pre></td></tr></table></figure><h3 id="3-2-变量">3.2 变量</h3><h4 id="1-数字类型">1. 数字类型</h4><p>Lua的数字只有double型，64bits</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可以以如下的方式表示数字</span></span><br><span class="line">num = <span class="number">1024</span></span><br><span class="line">num = <span class="number">3.0</span></span><br><span class="line">num = <span class="number">3.1416</span></span><br><span class="line">num = <span class="number">314.16e-2</span></span><br><span class="line">num = <span class="number">0.31416E1</span></span><br><span class="line">num = <span class="number">0xff</span></span><br><span class="line">num = <span class="number">0x56</span></span><br></pre></td></tr></table></figure><h4 id="2-字符串">2. 字符串</h4><p>可以用单引号，也可以用双引号，也可以使用转义字符’\n’(换行)，’\r’(回车)， ‘\t’ (横向制表)，’\v’(纵向制表)，’’(反斜杠)，’&quot;’(双引号)， 以及’’’(单引号)等等<br>下面的四种方式定义了完全相同的字符串（其中的两个中括号可以用于定义有换行的字符串）</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[ 输出alo</span></span><br><span class="line"><span class="comment">123"]]</span></span><br><span class="line">a = <span class="string">'alo\n123"'</span></span><br><span class="line">a = <span class="string">"alo\n123\""</span></span><br><span class="line">a = <span class="string">'\97lo\10\04923"'</span></span><br><span class="line">a = <span class="string">[[alo</span></span><br><span class="line"><span class="string">123"]]</span></span><br></pre></td></tr></table></figure><h4 id="3-空值">3. 空值</h4><p>C语言中的NULL在Lua中是nil，比如你访问一个没有声明过的变量，就是nil</p><h4 id="4-布尔类型">4. 布尔类型</h4><p>只有nil和false是 false；数字0，’’ 空字符串（’\0’）都是true</p><h4 id="5-作用域">5. 作用域</h4><p>lua中的变量如果没有特殊说明，全是全局变量，那怕是语句块或是函数里。<br>变量前加local关键字的是局部变量</p><h3 id="3-3-控制语句">3.3 控制语句</h3><h4 id="1-while循环">1. while循环</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">max</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="built_in">max</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">i = i +<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="2-if-else">2. if-else</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> age = <span class="number">140</span></span><br><span class="line"><span class="keyword">local</span> sex = <span class="string">'Male'</span></span><br><span class="line">  <span class="keyword">if</span> age == <span class="number">40</span> <span class="keyword">and</span> sex ==<span class="string">"Male"</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">" 男人四十一枝花 "</span>)</span><br><span class="line">  <span class="keyword">elseif</span> age &gt; <span class="number">60</span> <span class="keyword">and</span> sex ~=<span class="string">"Female"</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"old man!!"</span>)</span><br><span class="line">  <span class="keyword">elseif</span> age &lt; <span class="number">20</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"too young, too simple!\n"</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Your age is "</span>..age)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="3-for循环">3. for循环</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">100</span>, <span class="number">1</span>, <span class="number">-2</span> <span class="keyword">do</span></span><br><span class="line">sum = sum + i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="4-函数">4. 函数</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ==========================第一个=============</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPower</span><span class="params">(x,y)</span></span></span><br><span class="line">    <span class="keyword">return</span> y+x</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">power2 = myPower(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(power2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ==========================第二个=============</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newCounter</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>     <span class="comment">-- anonymous function</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">c1 = newCounter()</span><br><span class="line"><span class="built_in">print</span>(c1())  <span class="comment">--&gt; 1</span></span><br><span class="line"><span class="built_in">print</span>(c1())  <span class="comment">--&gt; 2</span></span><br><span class="line"><span class="built_in">print</span>(c1())</span><br></pre></td></tr></table></figure><h3 id="3-4-返回值">3.4 返回值</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name, age,bGay = <span class="string">"shawn"</span>, <span class="number">37</span>, <span class="literal">false</span>, <span class="string">"shawn@hotmail.com"</span></span><br><span class="line"><span class="built_in">print</span>(name,age,bGay)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMyGirl</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="keyword">return</span> name == <span class="string">'lucy'</span> , name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> bol,name = isMyGirl(<span class="string">'lucy'</span>)</span><br><span class="line"><span class="comment">-- lucytrue</span></span><br><span class="line"><span class="built_in">print</span>(name,bol)</span><br></pre></td></tr></table></figure><h3 id="3-5-Table">3.5 Table</h3><p>key，value的键值对 类似 map</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">    dog = &#123;name=<span class="string">'shawn'</span>,age=<span class="number">18</span>,height=<span class="number">165.5</span>&#125;</span><br><span class="line">    dog.age=<span class="number">22</span></span><br><span class="line">    <span class="built_in">print</span>(dog.name,dog.age,dog.height)</span><br><span class="line">    <span class="built_in">print</span>(dog)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="3-6-数组">3.6 数组</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">    arr = &#123;<span class="string">"string"</span>, <span class="number">100</span>, <span class="string">"dog"</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="built_in">print</span>(<span class="string">"wangwang!"</span>) <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">end</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(arr[<span class="number">4</span>]())</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(arr) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="3-7-成员函数">3.7 成员函数</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">person = &#123;name=<span class="string">'旺财'</span>,age = <span class="number">18</span>&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span>  <span class="title">person.eat</span><span class="params">(food)</span></span></span><br><span class="line">    <span class="built_in">print</span>(person.name ..<span class="string">" eating "</span>..food)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">person.eat(<span class="string">"骨头"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1>二、Openresty Nginx + Lua</h1><h2 id="1、openresty简介与安装">1、openresty简介与安装</h2><h3 id="1-1-openresty简介">1.1 openresty简介</h3><blockquote><p>OpenResty通过汇聚各种设计精良的Nginx模块（主要由OpenResty团队自主开发）将Nginx变成一个强大的通用Web应用平台。这样，Web开发人员和系统工程师可以使用Lua脚本语言调动Nginx支持的各种C以及Lua模块，快速构造出足以胜任10KB乃至1000KB以上单机并发连接的高性能Web应用系统。<br>OpenResty的目标是让Web服务直接跑在Nginx服务内部，充分利用Nginx的非阻塞I/O模型，不仅对HTTP客户端请求，甚至对远程后端（如MySQL、PostgreSQL、Memcached以及Redis等）都进行一致的高性能响应。<br>参考：<a href="https://blog.csdn.net/m0_63437643/article/details/122474633" target="_blank" rel="noopener">一文带你详解Nginx/OpenResty</a></p></blockquote><p><strong>执行原理</strong><br>OpenResty中，每个Worker进程使用一个Lua VM（Lua虚拟机），当请求被分配到Worker时，将在这个Lua VM中创建一个协程，协程之间数据隔离，每个协程都具有独立的全局变量。<br>ngx_lua是将Lua嵌入Nginx，让Nginx执行Lua脚本，并且高并发、非阻塞地处理各种请求。Lua内置协程可以很好地将异步回调转换成顺序调用的形式。ngx_lua在Lua中进行的IO操作都会委托给Nginx的事件模型，从而实现非阻塞调用。开发者可以采用串行的方式编写程序，ngx_lua会在进行阻塞的IO操作时自动中断，保存上下文，然后将IO操作委托给Nginx事件处理机制，在IO操作完成后，ngx_lua会恢复上下文，程序继续执行，这些操作对用户程序都是透明的。<br>每个Nginx的Worker进程持有一个Lua解释器或LuaJIT实例，被这个Worker处理的所有请求共享这个实例。每个请求的context上下文会被Lua轻量级的协程分隔，从而保证各个请求是独立的</p><h3 id="1-2-openresty安装">1.2 openresty安装</h3><p><strong>预编译安装</strong><br><a href="http://openresty.org/cn/linux-packages.html" target="_blank" rel="noopener">http://openresty.org/cn/linux-packages.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务命令</span></span><br><span class="line">service openresty start</span><br><span class="line">service openresty stop</span><br><span class="line">nginx -t</span><br><span class="line">service openresty reload</span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p><strong>源码编译安装</strong><br><a href="http://openresty.org/cn/download.html" target="_blank" rel="noopener">http://openresty.org/cn/download.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最小版本基于nginx1.21</span></span><br><span class="line">wget https://openresty.org/download/openresty-1.21.4.1.tar.gz</span><br><span class="line"><span class="comment"># 该包包含有gcc，g ++ 和 make</span></span><br><span class="line">apt install build-essential</span><br><span class="line"></span><br><span class="line">tar -zxvf openresty-1.21.4.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openresty-1.21.4.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Centos</span></span><br><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class="line"><span class="comment"># ubuntu </span></span><br><span class="line">sudo apt install zlib1g</span><br><span class="line">sudo apt install zlib1g-dev</span><br><span class="line">sudo apt-get install libpcre3-dev</span><br><span class="line">sudo apt-get install libssl-dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认, --prefix=/usr/local/openresty 程序会被安装到usr/local/openresty目录</span></span><br><span class="line">./configure</span><br><span class="line"><span class="comment"># 可以指定各种选项</span></span><br><span class="line">./configure --prefix=/opt/openresty \</span><br><span class="line">            --with-luajit \</span><br><span class="line">            --without-http_redis2_module \</span><br><span class="line">            --with-http_iconv_module \</span><br><span class="line">            --with-http_postgres_module</span><br><span class="line"><span class="comment"># 帮助     </span></span><br><span class="line">./configure --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 编译与安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>测试lua脚本</strong><br>此时的nginx和配置文件都是openresty包提供的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Nginx.conf 中写入</span></span><br><span class="line">location /lua &#123;</span><br><span class="line"></span><br><span class="line">  default_type text/html;</span><br><span class="line">  content_by_lua <span class="string">'ngx.say("&lt;p&gt;Hello, World!&lt;/p&gt;")'</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location /lua &#123;</span><br><span class="line"></span><br><span class="line">  default_type text/html;</span><br><span class="line">  <span class="comment"># 创建外部脚本，脚本内容ngx.say("&lt;p&gt;Hello, World!&lt;/p&gt;")</span></span><br><span class="line">  content_by_lua_file conf/lua/hello.lua;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、lua-nginx模块">2、lua-nginx模块</h2><blockquote><p>github官方文档：<a href="https://github.com/openresty/lua-nginx-module#readme" target="_blank" rel="noopener">https://github.com/openresty/lua-nginx-module#readme</a><br>wiki文档：<a href="https://www.nginx.com/resources/wiki/modules/lua/" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/modules/lua/</a><br>文档：<a href="https://openresty-reference.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://openresty-reference.readthedocs.io/en/latest/</a></p></blockquote><h3 id="2-1-热部署与lua配置文件">2.1 热部署与lua配置文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置包含的lua文件块</span></span><br><span class="line"><span class="attribute">include</span> /etc/nginx/conf.d/lua.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lua.conf配置文件</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> /lua &#123;</span><br><span class="line">    <span class="comment"># 热部署，hello.lua改变即可实时刷新，无需重启</span></span><br><span class="line">    <span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> /etc/nginx/conf.d/hello.lua;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-lua处理http请求相关操作">2.2 lua处理http请求相关操作</h3><ul><li>set_by_lua</li></ul><p>修改nginx变量</p><ul><li>rewrite_by_lua</li></ul><p>修改uri</p><ul><li>access_by_lua</li></ul><p>访问控制</p><ul><li>header_filter_by_lua</li></ul><p>修改响应头</p><ul><li>boy_filter_by_lua</li></ul><p>修改响应体</p><ul><li>log_by_lua</li></ul><p>日志</p><h3 id="2-3-获取Nginx-uri中的所有变量">2.3 获取Nginx uri中的所有变量</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args()  </span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(uri_args) <span class="keyword">do</span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">"table"</span> <span class="keyword">then</span>  </span><br><span class="line">        ngx.say(k, <span class="string">" : "</span>, <span class="built_in">table</span>.<span class="built_in">concat</span>(v, <span class="string">", "</span>), <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        ngx.say(k, <span class="string">": "</span>, v, <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="2-4-获取Nginx请求头信息">2.4 获取Nginx请求头信息</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> headers = ngx.req.get_headers()                         </span><br><span class="line">ngx.say(<span class="string">"Host : "</span>, headers[<span class="string">"Host"</span>], <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">ngx.say(<span class="string">"user-agent : "</span>, headers[<span class="string">"user-agent"</span>], <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">ngx.say(<span class="string">"user-agent : "</span>, headers.user_agent, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(headers) <span class="keyword">do</span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">"table"</span> <span class="keyword">then</span>  </span><br><span class="line">        ngx.say(k, <span class="string">" : "</span>, <span class="built_in">table</span>.<span class="built_in">concat</span>(v, <span class="string">","</span>), <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        ngx.say(k, <span class="string">" : "</span>, v, <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="2-5-获取post请求参数">2.5 获取post请求参数</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ngx.req.read_body()  </span><br><span class="line">ngx.say(<span class="string">"post args begin"</span>, <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line"><span class="keyword">local</span> post_args = ngx.req.get_post_args()  </span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(post_args) <span class="keyword">do</span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">"table"</span> <span class="keyword">then</span>  </span><br><span class="line">        ngx.say(k, <span class="string">" : "</span>, <span class="built_in">table</span>.<span class="built_in">concat</span>(v, <span class="string">", "</span>), <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        ngx.say(k, <span class="string">": "</span>, v, <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="2-6-其他信息">2.6 其他信息</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- http协议版本</span></span><br><span class="line">ngx.say(<span class="string">"ngx.req.http_version : "</span>, ngx.req.http_version(), <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line"><span class="comment">-- 请求方法</span></span><br><span class="line">ngx.say(<span class="string">"ngx.req.get_method : "</span>, ngx.req.get_method(), <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line"><span class="comment">-- 原始的请求头内容  </span></span><br><span class="line">ngx.say(<span class="string">"ngx.req.raw_header : "</span>,  ngx.req.raw_header(), <span class="string">"&lt;br/&gt;"</span>) </span><br><span class="line"><span class="comment">-- body内容体</span></span><br><span class="line">ngx.say(<span class="string">"ngx.req.get_body_data() : "</span>, ngx.req.get_body_data(), <span class="string">"&lt;br/&gt;"</span>)</span><br></pre></td></tr></table></figure><h3 id="2-7-常用参数与示例">2.7 常用参数与示例</h3><blockquote><p>ngx常用用法，例如<code>say</code> print可以作为content返回，<code>redirect</code>可以实现跳转，<code>ngx.location.capture</code>可以请求一个url，一般是内部url。<code>exit</code>可以返回状态码，<code>shared</code>可以作为一个所有进程共享的缓存kv池。</p></blockquote><p><strong>log</strong><br>ngx.log(<a href="http://ngx.INFO" target="_blank" rel="noopener">ngx.INFO</a>, “日志内容”) 。级别有ngx.STDERR/ngx.EMERG /ngx.ALERT/ ngx.CRIT /ngx.ERR /ngx.WARN/ ngx.NOTICE/ <a href="http://ngx.INFO" target="_blank" rel="noopener">ngx.INFO</a> /ngx.DEBUG<br><strong>var与ctx</strong><br><code>ngx.var</code>可以获取或者修改nginx上下文的$xx变量，包括内置的变量，和在location范围内set的变量。nginx上下文的变量<a href="https://www.jianshu.com/p/a4f76500a0ac" target="_blank" rel="noopener">参考</a><br>一个request上下文的ngx.ctx是一个table可以自由的赋值和获取。例如rewrite_by_lua中ngx.ctx.a=10, content_by_lua中能拿到ngx.ctx.a<br><strong>location.capture</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">local</span> res = ngx.location.capture(<span class="string">'/foo?a=1&amp;b=3&amp;c=%3a'</span>) -- get请求, res有status body header和truncated属性</span><br><span class="line"></span><br><span class="line">ngx.req.set_header(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">ngx.location.capture(<span class="string">'/foo/bar'</span>,&#123; <span class="attribute">method</span> = ngx.HTTP_POST, body = cjson.encode(&#123;<span class="attribute">a</span> = <span class="string">'hello, world'</span> &#125;)) --post</span><br></pre></td></tr></table></figure><p><strong>req</strong></p><ul><li>ngx.req.get_method() 返回大写的字符串GET</li><li>ngx.req.get_headers() 返回 kv table</li><li>ngx.req.set_header(k, v)</li><li>ngx.req.get_body_data() 返回是string</li><li>ngx.req.get_uri_args() get查询参数，返回table</li><li>ngx.req.get_post_args() form类型的post，返回table,err</li></ul><p><strong>hash与编码</strong></p><ul><li>newstr = ngx.encode_base64(str, no_padding?)</li><li>newstr = ngx.decode_base64(str)</li><li>digest = ngx.md5(str)</li><li>str = ngx.encode_args(table)</li><li>table = ngx.decode_args(str, max_args?)</li><li>newstr = ngx.escape_uri(str)</li><li>newstr = ngx.unescape_uri(str)</li></ul><p><strong>re正则</strong></p><ul><li>local m, err = ngx.re.match(“hello, 1234”, “[0-9]{3}”) – m[0] == “123” 这个正则比lua自带的正则强一点</li><li>local from, to, err = ngx.re.find(s, “([0-9]+)”, “jo”)</li><li>local iterator, err = ngx.re.gmatch(“hello, world!”, “([a-z]+)”, “i”)</li><li>local newstr, n, err = ngx.re.sub(“hello, 1234”, “([0-9])[0-9]”, “[$0][$1]”)</li></ul><p><strong>os相关的</strong></p><ul><li>ngx.sleep(n) 单位是s</li><li>ngx.time() ngx.utctime()ngx.now() ngx.today()… 时间相关的</li><li>ngx.exec(“shell”)</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中#注释掉的可以在需要的时候开启并修改，没有注释掉的（除了下面location示例）不要删掉，基本都是必须的配置项。</span></span><br><span class="line"><span class="comment">###############################第一部分 全局配置############################</span></span><br><span class="line"><span class="comment">#user  nobody;                        指定启动进程的用户，默认不用指定即可。</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;           配置日志输出，虽然叫error_log但是可以定义输出的级别，默认不写是ERROR级别</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;   </span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;           记录pid的文件，默认就是放到这个位置，可以修改。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只启动一个进程，nginx是多进程单线程模型，但是使用了epoll sendfile 非阻塞io</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="comment">###############################第二部分 event配置############################</span></span><br><span class="line"><span class="comment">#主要是网络连接相关的配置</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="comment"># 每个worker能连接1024个链接</span></span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">  <span class="comment">#use epoll; 事件驱动模型select|poll|kqueue|epoll|resig</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">###############################第三部分 http配置############################</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span>       mime.types;  <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">  <span class="attribute">default_type</span>  text/html;   <span class="comment">#默认的返回类型，可以在server.location里面改</span></span><br><span class="line">  <span class="attribute">sendfile</span>        <span class="literal">on</span>;        <span class="comment">#开启sendfile系统调用</span></span><br><span class="line">  <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;     <span class="comment">#连接超时时间65s</span></span><br><span class="line">  </span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="comment"># 下面展示多个demo，demo之间互相没有依赖关系，可以单独配置来进行测试。</span></span><br><span class="line">    <span class="comment"># 其中demo1到demo6 是nginx相关的。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">## demo1 展示location路径的不同写法优先级 #################</span></span><br><span class="line">    <span class="comment"># =最高优先级 表示路径完全等于，可以匹配/demo1/a/b的请求</span></span><br><span class="line">    <span class="attribute">location</span> =/demo1/a/b &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">"=/demo1/a/b"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment"># ^~第二高  表示startsWith，可以匹配/demo1/a/b/c和/demo1/abc请求</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/demo1/a</span> &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">"^~/demo1/a"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ~等四个符号第三高  表示正则，如果要用&#123;&#125;是特殊符号，需要整个加引号，建议直接加双引号，防止出错，可以匹配/demo1/bcd</span></span><br><span class="line">    <span class="comment"># 其他三个：~*不区分大小写正则，!~正则不匹配的，!~*不分大小写的正则不匹配</span></span><br><span class="line">    <span class="attribute">location</span> <span class="string">"~/demo1/\w&#123;3&#125;$"</span> &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">"regex"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 最低 没有前置符号 /demo1 /demo111 /demo1/b/c 不符合上面三种，就会匹配到这</span></span><br><span class="line">    <span class="attribute">location</span> /demo1&#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">"/demo1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### demo2 展示serve静态文件夹 ###############</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">       <span class="attribute">root</span>   html;                 <span class="comment"># root就是根目录是当前html目录</span></span><br><span class="line">       <span class="attribute">index</span>  index.html index.htm; <span class="comment"># index表示默认不写的时候转到的文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## demo3 指定错误文件 ###############</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">       <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## demo4 rewrite重写url rewrite也可以是server级别 ####################</span></span><br><span class="line">    <span class="attribute">location</span> /demo4 &#123;</span><br><span class="line">      <span class="comment"># 一般放到最后一行</span></span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /<span class="variable">$1</span>/api <span class="literal">permanent</span>; <span class="comment"># permanent301, redirect302, break不在匹配后面rewrite规则，last继续向下匹配。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">##### demo5 demo6 proxy_pass反向代理 ####################</span></span><br><span class="line">    <span class="comment"># /demo5 =&gt; baidu.com/demo5</span></span><br><span class="line">    <span class="comment"># /demo5/a/b =&gt; baidu.com/demo5/a/b</span></span><br><span class="line">    <span class="attribute">location</span> /demo5 &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span>  https://www.baidu.com;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># /demo6 =&gt; baidu.com</span></span><br><span class="line">    <span class="comment"># /demo6/a/b =&gt; baidu.com/a/b</span></span><br><span class="line">    <span class="attribute">location</span> /demo6 &#123;</span><br><span class="line">      <span class="comment"># proxy_set_header Host $http_host; 如果有请求头改动的需求可以搜索proxy_set_header去了解</span></span><br><span class="line">      <span class="attribute">proxy_pass</span>  https://www.baidu.com/;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 下面demo7到demo11是openresty lua的一些配置demo</span></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">###### demo7 init_by_lua_block 用来加载经常用到的库 或者 用来对多进程shared变量赋值 ####################</span></span><br><span class="line">    <span class="section">init_by_lua_block</span> &#123;</span><br><span class="line">      <span class="attribute">cjson</span> = require(<span class="string">"cjson"</span>)       --后续的lua流程中可以直接使用cjson</span><br><span class="line">      local myname = ngx.shared.<span class="literal">info</span> --可以认为是静态变量，通过<span class="literal">info</span>:get获取变量值</span><br><span class="line">      <span class="literal">info</span>:set(<span class="string">"name"</span>, <span class="string">"frank"</span>)</span><br><span class="line">      <span class="literal">info</span>:set(<span class="string">"age"</span>, <span class="number">77</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##### demo8 demo9 rewrite_by_lua_block 配合ngx.redirect用来替换rewrite指令 ####################</span></span><br><span class="line">    <span class="comment"># 注意rewrite_by_lua和因为作用阶段是nginx原生rewrite之后，所以容易和原生一起用的时候出错，最好的方式就是只用lua的不要用nginx的了。</span></span><br><span class="line">    location /demo8 &#123;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$a</span> <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$b</span> <span class="string">""</span>;</span><br><span class="line">      <span class="section">rewrite_by_lua_block</span> &#123;</span><br><span class="line">        ngx.var.b = tonumber(ngx.var.a) + 1</span><br><span class="line">        <span class="attribute">if</span> tonumber(ngx.var.b) == <span class="number">2</span> then</span><br><span class="line">          return ngx.<span class="literal">redirect</span>(<span class="string">"/demo9"</span>) --默认是<span class="number">302</span>，如果要<span class="number">301</span>或<span class="number">307</span>可以再加一个第二参数即可</span><br><span class="line">        end</span><br><span class="line">      &#125;</span><br><span class="line">      echo <span class="string">"demo8"</span>; <span class="comment"># 注意echo是content阶段的，rewrite阶段重定向了请求，就走不到这里了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /demo9 &#123;</span><br><span class="line">      <span class="attribute">echo</span> <span class="string">"demo9"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">##### demo10 access_by_lua_block 用来做一些加载内容前的准备工作例如访问redis看看用户身份是不是合法 ip是不是合法等 ####################</span></span><br><span class="line">    <span class="attribute">location</span> /demo10 &#123;</span><br><span class="line">      <span class="section">access_by_lua_block</span> &#123;</span><br><span class="line">        <span class="attribute">local</span> res = ngx.location.capture(<span class="string">"/auth"</span>) -- ngx.location.capture是作为客户端发起http请求拿到结果</span><br><span class="line">        if res.status == ngx.HTTP_OK then</span><br><span class="line">          return  -- 正常return就能走到content阶段</span><br><span class="line">        end</span><br><span class="line">        if res.status == ngx.HTTP_FORBIDDEN then</span><br><span class="line">          ngx.exit(res.status) -- exit + 状态码 就直接返回状态码了</span><br><span class="line">        end</span><br><span class="line">        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)</span><br><span class="line">      &#125;</span><br><span class="line">      echo <span class="string">"demo10"</span>; <span class="comment"># 如果合法的话就返回demo10字样</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /auth &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span>; <span class="comment"># 换成403 or 500试试</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#### demo10 content_by_lua_block 用来作为content阶段的脚本，一般测试用的多 ####################</span></span><br><span class="line">    <span class="comment">#不要和 echo proxy_pass等content阶段指令一起用</span></span><br><span class="line">    <span class="attribute">location</span> /demo10 &#123;</span><br><span class="line">      content_by_lua_block&#123;</span><br><span class="line">        ngx.say("/demo10");</span><br><span class="line">        ngx.say("/demo11"); -- 和外部用俩echo效果类似。ngx.say ngx.print区别是前者会多个回车在最后</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"># echo "echo10";   如果外面用了echo，则只有echo的效果</span></span><br><span class="line">      <span class="comment"># proxy_pass http://www.baidu.com; 如果外面用了proxy_pass也是只有proxy_pass效果了，因为都是content阶段，content只能一个生效。</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##### demo11 rewrite_by_lua与proxy_pass配合 根据参数进行转发 ####################</span></span><br><span class="line">    <span class="attribute">location</span> /demo11 &#123;</span><br><span class="line">  <span class="attribute">default_type</span> text/html;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$proxy</span> <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">rewrite_by_lua</span> <span class="string">'            # 千万别用content，因为content和proxy_pass阶段犯冲</span></span><br><span class="line"><span class="string">local h = ngx.var.host    # 这里从host中提出第一个.之前的部分看是不是a来决定转发到哪</span></span><br><span class="line"><span class="string">local dot = h:find("%.")</span></span><br><span class="line"><span class="string">local prefix = h:sub(1,dot-1)</span></span><br><span class="line"><span class="string">if prefix == "a" then</span></span><br><span class="line"><span class="string">ngx.var.proxy="127.0.0.1:3000"</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">ngx.var.proxy="127.0.0.1:5500"</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">      '</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://<span class="variable">$proxy</span><span class="variable">$uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Nginx常用模块–数据缓存">3、Nginx常用模块–数据缓存</h2><h3 id="3-1-nginx全局缓存">3.1 nginx全局缓存</h3><p><code>lua_shared_dict shared_data 1m;</code>该配置文件配置在nginx.conf下的http模块，全局共享，会产生锁，是线程安全的</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> shared_data = ngx.shared.shared_data  </span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> i = shared_data:get(<span class="string">"i"</span>)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">then</span>  </span><br><span class="line">    i = <span class="number">1</span>  </span><br><span class="line">    shared_data:set(<span class="string">"i"</span>, i)  </span><br><span class="line">    ngx.say(<span class="string">"lazy set i "</span>, i, <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"> </span><br><span class="line">i = shared_data:incr(<span class="string">"i"</span>, <span class="number">1</span>)  </span><br><span class="line">ngx.say(<span class="string">"i="</span>, i, <span class="string">"&lt;br/&gt;"</span>)</span><br></pre></td></tr></table></figure><h3 id="3-2-lua-resty-lrucache">3.2 lua-resty-lrucache</h3><blockquote><p>Lua 实现的一个简单的 LRU 缓存，适合在 Lua 空间里直接缓存较为复杂的 Lua 数据结构：它相比 ngx_lua 共享内存字典可以省去较昂贵的序列化操作，相比 memcached 这样的外部服务又能省去较昂贵的 socket 操作<br>官方文档：<a href="https://github.com/openresty/lua-resty-lrucache" target="_blank" rel="noopener">https://github.com/openresty/lua-resty-lrucache</a></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引用lua文件，会调用cache.lua</span></span><br><span class="line"><span class="comment"># 需要关闭热部署</span></span><br><span class="line"><span class="section">content_by_lua_block</span> &#123;</span><br><span class="line">  require("my/cache").go()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义函数，放在lualib/my/cache.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> _M = &#123;&#125;</span><br><span class="line"><span class="comment">-- 这是默认存在的工具包</span></span><br><span class="line">lrucache = <span class="built_in">require</span> <span class="string">"resty.lrucache"</span></span><br><span class="line"><span class="comment">-- 需要关闭热部署，这行代码只能执行一次</span></span><br><span class="line">c, err = lrucache.new(<span class="number">200</span>)  <span class="comment">-- allow up to 200 items in the cache</span></span><br><span class="line">ngx.say(<span class="string">"count=init"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">error</span>(<span class="string">"failed to create the cache: "</span> .. (err <span class="keyword">or</span> <span class="string">"unknown"</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.go</span><span class="params">()</span></span></span><br><span class="line">    count = c:get(<span class="string">"count"</span>)</span><br><span class="line">    c:set(<span class="string">"count"</span>,<span class="number">100</span>)</span><br><span class="line">    ngx.say(<span class="string">"count="</span>, count, <span class="string">" --&lt;br/&gt;"</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> count <span class="keyword">then</span>  </span><br><span class="line">        c:set(<span class="string">"count"</span>,<span class="number">1</span>)</span><br><span class="line">        ngx.say(<span class="string">"lazy set count "</span>, c:get(<span class="string">"count"</span>), <span class="string">"&lt;br/&gt;"</span>)  </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        c:set(<span class="string">"count"</span>,count+<span class="number">1</span>)</span><br><span class="line">        ngx.say(<span class="string">"count="</span>, count, <span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> _M</span><br></pre></td></tr></table></figure><h3 id="3-3-lua-resty-redis">3.3 lua-resty-redis</h3><blockquote><p>参考文档：<a href="https://github.com/openresty/lua-resty-redis" target="_blank" rel="noopener">https://github.com/openresty/lua-resty-redis</a></p></blockquote><p>使用和<a href="https://github.com/openresty/redis2-nginx-module" target="_blank" rel="noopener">redis2-nginx-module</a>差不多，一个是通过lua直接操作</p><h3 id="3-4-lua-resty-mysql">3.4 lua-resty-mysql</h3><blockquote><p>参考文档：<a href="https://github.com/openresty/lua-resty-mysql" target="_blank" rel="noopener">https://github.com/openresty/lua-resty-mysql</a></p></blockquote><p>不推荐带参数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> mysql = <span class="built_in">require</span> <span class="string">"resty.mysql"</span></span><br><span class="line"><span class="keyword">local</span> db, err = mysql:new()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> db <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"failed to instantiate mysql: "</span>, err)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">db:set_timeout(<span class="number">1000</span>) <span class="comment">-- 1 sec</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ok, err, errcode, sqlstate = db:connect&#123;</span><br><span class="line">  host = <span class="string">"192.168.44.211"</span>,</span><br><span class="line">  port = <span class="number">3306</span>,</span><br><span class="line">  database = <span class="string">"test"</span>,</span><br><span class="line">  user = <span class="string">"root"</span>,</span><br><span class="line">  password = <span class="string">"root"</span>,</span><br><span class="line">  charset = <span class="string">"utf8"</span>,</span><br><span class="line">  max_packet_size = <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">"connected to mysql.&lt;br&gt;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> res, err, errcode, sqlstate = db:query(<span class="string">"drop table if exists cats"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"bad result: "</span>, err, <span class="string">": "</span>, errcode, <span class="string">": "</span>, sqlstate, <span class="string">"."</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res, err, errcode, sqlstate =</span><br><span class="line">db:query(<span class="string">"create table cats "</span></span><br><span class="line">  .. <span class="string">"(id serial primary key, "</span></span><br><span class="line">  .. <span class="string">"name varchar(5))"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"bad result: "</span>, err, <span class="string">": "</span>, errcode, <span class="string">": "</span>, sqlstate, <span class="string">"."</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">"table cats created."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res, err, errcode, sqlstate =</span><br><span class="line">db:query(<span class="string">"select * from t_emp"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"bad result: "</span>, err, <span class="string">": "</span>, errcode, <span class="string">": "</span>, sqlstate, <span class="string">"."</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">"cjson"</span></span><br><span class="line">ngx.say(<span class="string">"result: "</span>, cjson.encode(res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ok, err = db:set_keepalive(<span class="number">10000</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"failed to set keepalive: "</span>, err)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="4、模板引擎">4、模板引擎</h2><h3 id="4-1-简介">4.1 简介</h3><blockquote><p>参考文档：<a href="https://github.com/bungle/lua-resty-template" target="_blank" rel="noopener">https://github.com/bungle/lua-resty-template</a></p></blockquote><p>lua-resty-template模板引擎可以认为是JSP，其最终会被翻译成Lua代码，然后通过ngx.print输出。<br>安装的话首先需要下载包，然后将里面的<code>template.lua</code>和<code>template</code>放在<code>lualib/resty</code>下<br><strong>基础语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;(include_file)&#125;：包含另一个模板文件；</span><br><span class="line">&#123;* var *&#125;：变量输出；</span><br><span class="line">&#123;&#123; var &#125;&#125;：变量转义输出；</span><br><span class="line">&#123;% code %&#125;：代码片段；</span><br><span class="line">&#123;<span class="comment"># comment #&#125;：注释；</span></span><br><span class="line">&#123;-raw-&#125;：中间的内容不会解析，作为纯文本输出；</span><br></pre></td></tr></table></figure><h3 id="4-2-简单示例">4.2 简单示例</h3><p>nginx.conf进行配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> /lua &#123;</span><br><span class="line">    <span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="comment"># 模板文件存放位置</span></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$template_root</span> /etc/nginx/conf.d/template;</span><br><span class="line">    <span class="comment"># lua文件保存位置</span></span><br><span class="line">    <span class="attribute">content_by_lua_file</span> /etc/nginx/conf.d/hello.lua;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>name:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>age:&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>lua文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">"resty.template"</span>)</span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">    name = <span class="string">"lucy"</span>,</span><br><span class="line">    age = <span class="number">50</span>,</span><br><span class="line">&#125;</span><br><span class="line">template.render(<span class="string">"view.html"</span>, context)</span><br></pre></td></tr></table></figure><h3 id="4-3-复杂示例">4.3 复杂示例</h3><p>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以引入其他html文件--&gt;</span></span><br><span class="line">&#123;(header.html)&#125;  </span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">      &#123;# 不转义变量输出 #&#125;  </span><br><span class="line">      姓名：&#123;* string.upper(name) *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">      &#123;# 转义变量输出 #&#125;  </span><br><span class="line">      简介：&#123;&#123;description&#125;&#125;</span><br><span class="line">           简介：&#123;* description *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">      &#123;# 可以做一些运算 #&#125;  </span><br><span class="line">      年龄: &#123;* age + 10 *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">      &#123;# 循环输出 #&#125;  </span><br><span class="line">      爱好：  </span><br><span class="line">      &#123;% for i, v in ipairs(hobby) do %&#125;  </span><br><span class="line">         &#123;% if v == '电影' then  %&#125; - xxoo</span><br><span class="line">            </span><br><span class="line">              &#123;%else%&#125;  - &#123;* v *&#125; </span><br><span class="line">&#123;% end %&#125;  </span><br><span class="line">         </span><br><span class="line">      &#123;% end %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">      成绩：  </span><br><span class="line">      &#123;% local i = 1; %&#125;  </span><br><span class="line">      &#123;% for k, v in pairs(score) do %&#125;  </span><br><span class="line">         &#123;% if i &gt; 1 then %&#125;，&#123;% end %&#125;  </span><br><span class="line">         &#123;* k *&#125; = &#123;* v *&#125;  </span><br><span class="line">         &#123;% i = i + 1 %&#125;  </span><br><span class="line">      &#123;% end %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">      成绩2：  </span><br><span class="line">      &#123;% for i = 1, #score2 do local t = score2[i] %&#125;  </span><br><span class="line">         &#123;% if i &gt; 1 then %&#125;，&#123;% end %&#125;  </span><br><span class="line">          &#123;* t.name *&#125; = &#123;* t.score *&#125;  </span><br><span class="line">      &#123;% end %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">      &#123;# 中间内容不解析 #&#125;  </span><br><span class="line">      &#123;-raw-&#125;&#123;(file)&#125;&#123;-raw-&#125;  </span><br><span class="line">&#123;(footer.html)&#125;</span><br></pre></td></tr></table></figure><p>lua文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">"resty.template"</span>)</span><br><span class="line">template.caching(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">    title = <span class="string">"测试"</span>,</span><br><span class="line">    name = <span class="string">"lucy"</span>,</span><br><span class="line">    description = <span class="string">"&lt;script&gt;alert(1);&lt;/script&gt;"</span>,</span><br><span class="line">    age = <span class="number">40</span>,</span><br><span class="line">    hobby = &#123;<span class="string">"电影"</span>, <span class="string">"音乐"</span>, <span class="string">"阅读"</span>&#125;,</span><br><span class="line">    score = &#123;语文 = <span class="number">90</span>, 数学 = <span class="number">80</span>, 英语 = <span class="number">70</span>&#125;,</span><br><span class="line">    score2 = &#123;</span><br><span class="line">        &#123;name = <span class="string">"语文"</span>, score = <span class="number">90</span>&#125;,</span><br><span class="line">        &#123;name = <span class="string">"数学"</span>, score = <span class="number">80</span>&#125;,</span><br><span class="line">        &#123;name = <span class="string">"英语"</span>, score = <span class="number">70</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template.render(<span class="string">"view.html"</span>, context)</span><br></pre></td></tr></table></figure><h3 id="4-4-模板管理与缓存">4.4 模板管理与缓存</h3><p>模板缓存：默认开启，开发环境可以手动关闭<code>template.caching(true)</code><br>模板文件需要业务系统更新与维护，当模板文件更新后，可以通过模板版本号或消息通知Openresty清空缓存重载模板到内存中<code>template.cache = {}</code></p><h3 id="4-5-Redis缓存-mysql-模板输出">4.5 Redis缓存+mysql+模板输出</h3><p>模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;(header.html)&#125;  </span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">      &#123;# 不转义变量输出 #&#125;  </span><br><span class="line">      姓名：&#123;* string.upper(name) *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">      &#123;# 转义变量输出 #&#125;  </span><br><span class="line"></span><br><span class="line">      年龄: &#123;* age + 10 *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">      &#123;# 循环输出 #&#125;  </span><br><span class="line">      爱好：  </span><br><span class="line">      &#123;% for i, v in ipairs(hobby) do %&#125;  </span><br><span class="line">         &#123;% if v == '电影' then  %&#125; - xxoo</span><br><span class="line">            </span><br><span class="line">              &#123;%else%&#125;  - &#123;* v *&#125; </span><br><span class="line">&#123;% end %&#125;  </span><br><span class="line">         </span><br><span class="line">      &#123;% end %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">      成绩：  </span><br><span class="line">      &#123;% local i = 1; %&#125;  </span><br><span class="line">      &#123;% for k, v in pairs(score) do %&#125;  </span><br><span class="line">         &#123;% if i &gt; 1 then %&#125;，&#123;% end %&#125;  </span><br><span class="line">         &#123;* k *&#125; = &#123;* v *&#125;  </span><br><span class="line">         &#123;% i = i + 1 %&#125;  </span><br><span class="line">      &#123;% end %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">      成绩2：  </span><br><span class="line">      &#123;% for i = 1, #score2 do local t = score2[i] %&#125;  </span><br><span class="line">         &#123;% if i &gt; 1 then %&#125;，&#123;% end %&#125;  </span><br><span class="line">          &#123;* t.name *&#125; = &#123;* t.score *&#125;  </span><br><span class="line">      &#123;% end %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">      &#123;# 中间内容不解析 #&#125;  </span><br><span class="line">      &#123;-raw-&#125;&#123;(file)&#125;&#123;-raw-&#125;  </span><br><span class="line"></span><br><span class="line">掌门：</span><br><span class="line">&#123;* zhangmen *&#125;</span><br><span class="line"></span><br><span class="line">   &#123;% for i = 1, #zhangmen do local z = zhangmen[i] %&#125;  </span><br><span class="line">         &#123;* z.deptId *&#125;,&#123;* z.age *&#125;,&#123;* z.name *&#125;,&#123;* z.empno *&#125;,<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      &#123;% end %&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line"></span><br><span class="line">&#123;(footer.html)&#125;</span><br></pre></td></tr></table></figure><p>lua文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">cjson = <span class="built_in">require</span> <span class="string">"cjson"</span></span><br><span class="line">sql=<span class="string">"select * from t_emp"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span> <span class="string">"resty.redis"</span></span><br><span class="line"><span class="keyword">local</span> red = redis:new()</span><br><span class="line"></span><br><span class="line">red:set_timeouts(<span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>) <span class="comment">-- 1 sec</span></span><br><span class="line"><span class="keyword">local</span> ok, err = red:connect(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"failed to connect: "</span>, err)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> res, err = red:get(sql)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"failed to get sql: "</span>, err)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res == ngx.null <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"sql"</span>..sql..<span class="string">" not found."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">--mysql查询</span></span><br><span class="line">  <span class="keyword">local</span> mysql = <span class="built_in">require</span> <span class="string">"resty.mysql"</span></span><br><span class="line">  <span class="keyword">local</span> db, err = mysql:new()</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> db <span class="keyword">then</span></span><br><span class="line">    ngx.say(<span class="string">"failed to instantiate mysql: "</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  db:set_timeout(<span class="number">1000</span>) <span class="comment">-- 1 sec</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> ok, err, errcode, sqlstate = db:connect&#123;</span><br><span class="line">    host = <span class="string">"192.168.44.211"</span>,</span><br><span class="line">    port = <span class="number">3306</span>,</span><br><span class="line">    database = <span class="string">"zhangmen"</span>,</span><br><span class="line">    user = <span class="string">"root"</span>,</span><br><span class="line">    password = <span class="string">"111111"</span>,</span><br><span class="line">    charset = <span class="string">"utf8"</span>,</span><br><span class="line">    max_packet_size = <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ngx.say(<span class="string">"connected to mysql.&lt;br&gt;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  res, err, errcode, sqlstate =</span><br><span class="line">  db:query(sql)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">    ngx.say(<span class="string">"bad result: "</span>, err, <span class="string">": "</span>, errcode, <span class="string">": "</span>, sqlstate, <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">--ngx.say("result: ", cjson.encode(res))</span></span><br><span class="line"></span><br><span class="line">  ok, err = red:set(sql, cjson.encode(res))</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">    ngx.say(<span class="string">"failed to set sql: "</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  ngx.say(<span class="string">"set result: "</span>, ok)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">"resty.template"</span>)</span><br><span class="line">template.caching(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">    title = <span class="string">"测试"</span>,</span><br><span class="line">    name = <span class="string">"lucy"</span>,</span><br><span class="line">    description = <span class="string">"&lt;script&gt;alert(1);&lt;/script&gt;"</span>,</span><br><span class="line">    age = <span class="number">40</span>,</span><br><span class="line">    hobby = &#123;<span class="string">"电影"</span>, <span class="string">"音乐"</span>, <span class="string">"阅读"</span>&#125;,</span><br><span class="line">    score = &#123;语文 = <span class="number">90</span>, 数学 = <span class="number">80</span>, 英语 = <span class="number">70</span>&#125;,</span><br><span class="line">    score2 = &#123;</span><br><span class="line">        &#123;name = <span class="string">"语文"</span>, score = <span class="number">90</span>&#125;,</span><br><span class="line">        &#123;name = <span class="string">"数学"</span>, score = <span class="number">80</span>&#125;,</span><br><span class="line">        &#123;name = <span class="string">"英语"</span>, score = <span class="number">70</span>&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">zhangmen=cjson.decode(res)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template.render(<span class="string">"view.html"</span>, context)</span><br></pre></td></tr></table></figure><h1>三、Lua开源项目</h1><h2 id="1、WAF">1、WAF</h2><blockquote><p><a href="https://github.com/unixhot/waf" target="_blank" rel="noopener">https://github.com/unixhot/waf</a><br><a href="https://github.com/loveshell/ngx_lua_waf" target="_blank" rel="noopener">https://github.com/loveshell/ngx_lua_waf</a></p></blockquote><p><strong>优势</strong><br>防止 SQL 注入，本地包含，部分溢出，fuzzing 测试，XSS/SSRF 等 Web 攻击<br>防止 Apache Bench 之类压力测试工具的攻击<br>屏蔽常见的扫描黑客工具，扫描器<br>屏蔽图片附件类目录执行权限、防止 webshell 上传<br>支持 IP 白名单和黑名单功能，直接将黑名单的 IP 访问拒绝<br>支持 URL 白名单，将不需要过滤的 URL 进行定义<br>支持 User-Agent 的过滤、支持 CC 攻击防护、限制单个 URL 指定时间的访问次数<br>支持支持 Cookie 过滤，URL 与 URL 参数过滤<br>支持日志记录，将所有拒绝的操作，记录到日志中去</p><h2 id="2、Kong-基于Openresty的流量网关">2、Kong 基于Openresty的流量网关</h2><h3 id="2-1-介绍">2.1 介绍</h3><blockquote><p><a href="https://konghq.com/" target="_blank" rel="noopener">https://konghq.com/</a><br><a href="https://github.com/kong/kong" target="_blank" rel="noopener">https://github.com/kong/kong</a></p></blockquote><p>Kong 基于 OpenResty，是一个云原生、快速、可扩展、分布式的微服务抽象层（Microservice Abstraction Layer），也叫 API 网关（API Gateway），在 Service Mesh 里也叫 API 中间件（API Middleware）。Kong 开源于 2015 年，核心价值在于高性能和扩展性。从全球 5000 强的组织统计数据来看，Kong 是现在依然在维护的，在生产环境使用最广泛的 API 网关。Kong 宣称自己是世界上最流行的开源微服务 API 网关（The World’s Most Popular Open Source Microservice API Gateway）。</p><h3 id="2-2-核心优势">2.2 核心优势</h3><p>可扩展：可以方便的通过添加节点水平扩展，这意味着可以在很低的延迟下支持很大的系统负载。<br>模块化：可以通过添加新的插件来扩展 Kong 的能力，这些插件可以通过 RESTful Admin API 来安装和配置。<br>在任何基础架构上运行：Kong 可以在任何地方都能运行，比如在云或混合环境中部署 Kong，单个或全球的数据中心。</p><h2 id="3、APISIX-ABTestingGateway">3、APISIX|ABTestingGateway</h2><h3 id="3-1-介绍">3.1 介绍</h3><blockquote><p><a href="https://github.com/CNSRE/ABTestingGateway" target="_blank" rel="noopener">https://github.com/CNSRE/ABTestingGateway</a></p></blockquote><p>ABTestingGateway 是一个可以动态设置分流策略的网关，关注与灰度发布相关领域，基于 Nginx 和 ngx-lua 开发，使用 Redis 作为分流策略数据库，可以实现动态调度功能。<br>ABTestingGateway 是新浪微博内部的动态路由系统 dygateway 的一部分，目前已经开源。在以往的基于 Nginx 实现的灰度系统中，分流逻辑往往通过 rewrite 阶段的 if 和 rewrite 指令等实现，优点是性能较高，缺点是功能受限、容易出错，以及转发规则固定，只能静态分流。ABTestingGateway 则采用 ngx-lua，通过启用 lua-shared-dict 和 lua-resty-lock 作为系统缓存和缓存锁，系统获得了较为接近原生 Nginx 转发的性能。</p><h3 id="3-2-优势">3.2 优势</h3><p>支持多种分流方式，目前包括 iprange、uidrange、uid 尾数和指定uid分流<br>支持多级分流，动态设置分流策略，即时生效，无需重启<br>可扩展性，提供了开发框架，开发者可以灵活添加新的分流方式，实现二次开发<br>高性能，压测数据接近原生 Nginx 转发<br>灰度系统配置写在 Nginx 配置文件中，方便管理员配置<br>适用于多种场景：灰度发布、AB 测试和负载均衡等</p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Lua语言基础&lt;/h1&gt;
&lt;h2 id=&quot;1、-介绍&quot;&gt;1、 介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Lua 是由巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于1993年开发的一种轻量、小巧的脚本语言，用标准 C 语言编写，其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。&lt;br&gt;
lua官网：&lt;a href=&quot;http://www.lua.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.lua.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lua/luajit/nginx/openresty关系，lua是脚本语言，luajit是lua的功能包与解析器（相当于java对应的jdk）,nginx可以内嵌luajit（承载的容器），openresty把额外扩展包集成到nginx里（相当于spring脚手架）&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://www.shawn22.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Nginx高级篇</title>
    <link href="https://www.shawn22.xyz/posts/b02fb7f9.html"/>
    <id>https://www.shawn22.xyz/posts/b02fb7f9.html</id>
    <published>2022-07-11T11:28:10.000Z</published>
    <updated>2022-07-11T12:08:48.706Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Nginx扩容</h1><h2 id="1、前言">1、前言</h2><p>扩容包括<strong>单机垂直扩容</strong>和<strong>水平扩展</strong></p><h2 id="2、单机垂直扩容：硬件资源增加">2、单机垂直扩容：硬件资源增加</h2><ul><li>云服务资源增加</li><li>整机：IBM、浪潮、DELL、HP等</li><li>CPU/主板：更新到主流</li><li>网卡：10G/40G网卡</li><li>磁盘：SAS(SCSI) HDD（机械）、HHD（混合）、SATA SSD、PCI-e SSD、 MVMe SSD</li><li>SSD</li><li>多副本机制</li><li>系统盘/热点数据/数据库存储</li><li>HDD</li><li>冷数据存储</li></ul><a id="more"></a><h2 id="3、水平扩展：集群化">3、水平扩展：集群化</h2><h2 id="4、Nginx模块升级">4、Nginx模块升级</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx下载地址</span></span><br><span class="line">http://nginx.org/en/download.html</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.23.0.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf nginx-1.23.0.tar.gz</span><br><span class="line"><span class="comment"># 进入目录进行解压，选择自己的模块就行</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx/ --with-stream</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 最后把编译好的目标文件替换即可，不要make install</span></span><br><span class="line"><span class="comment"># 查看编译的模块</span></span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure><h1>二、Nginx高级配置介绍</h1><h2 id="1、会话管理与sticky模块">1、会话管理与sticky模块</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> httpds &#123;</span><br><span class="line">  <span class="comment"># ip_hash</span></span><br><span class="line">  <span class="comment"># hash $cookie_jsessionid;</span></span><br><span class="line">  <span class="comment"># hash $request_uri;</span></span><br><span class="line">  <span class="comment"># 使用lua逻辑定向分发</span></span><br><span class="line">  ip_hash;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.44.102</span> ;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.44.103</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  localhost;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://httpds;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># root   html;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> ~*/(css|img|js) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span>   /usr/local/nginx/html;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-介绍">1.1 介绍</h3><p>Sticky是nginx的一个模块，它是基于cookie的一种nginx的负载均衡解决方案，通过分发和识别cookie，来使同一个客户端的请求落在同一台服务器上，默认标识名为route</p><blockquote><p>使用参考**：**<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#sticky" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_upstream_module.html#sticky</a><br>tengine中有session_sticky模块我们通过第三方的方式安装在开源版本中。sticky是第三方模块，需要重新编译Nginx,他可以对Nginx这种静态文件服务器使用基于cookie的负载均衡</p></blockquote><h3 id="1-2-下载与安装">1.2 下载与安装</h3><blockquote><p>项目官网：<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/src/master/" target="_blank" rel="noopener">https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/src/master/</a><br>下载：<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/1.2.6.zip" target="_blank" rel="noopener">https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/1.2.6.zip</a></p></blockquote><p>上传解压到服务器，然后重新编译Nginx，依赖openssl-devel，<strong>进到源码目录重新编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重新编译</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --add-module=/root/nginx-goodies-nginx-sticky-module-ng-c78b7dd79d0d</span><br><span class="line"><span class="comment"># 此时不要执行 make install，要不然就会覆盖原来的版本产生诸多问题。</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>配置方法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> httpget &#123;</span><br><span class="line"><span class="comment"># 直接这样也行</span></span><br><span class="line"><span class="comment"># sticky;</span></span><br><span class="line"><span class="attribute">sticky</span> name=route expires=<span class="number">6h</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.44.102</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.44.103</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-错误处理">1.3 错误处理</h3><p>如果遇到以下错误，可能是版本问题<br><img src="https://img-blog.csdnimg.cn/7d09c174a0c14defb77a8c51585583fc.png" alt="在这里插入图片描述"></p><p>打开 ngx_http_sticky_misc.c文件，在12行添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="tag">&lt;<span class="name">openssl</span>/<span class="attr">sha.h</span>&gt;</span></span><br><span class="line">#include <span class="tag">&lt;<span class="name">openssl</span>/<span class="attr">md5.h</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>备份之前的程序</strong><code>mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</code><br><strong>把编译好的Nginx程序替换到原来的目录里(平滑升级也是如此)</strong><code>cp objs/nginx /usr/local/nginx/sbin/</code><br><strong>升级检测</strong><code>make upgrade</code><br><strong>检查程序中是否包含新模块</strong><code>nginx -V</code></p><h2 id="2、KeepAlive">2、KeepAlive</h2><h3 id="2-1-介绍">2.1 介绍</h3><blockquote><p>官网：<a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive" target="_blank" rel="noopener">https://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive</a></p></blockquote><p>在http协议header中可以看到当前连接状态，使用<strong>KeepAlive可以在有效期内复用Tcp连接</strong>。举个例子，当进行TCP连接后，如果在 65s 内没有活动，则关闭长连接，即在点击一个链接后，在65s内没有点击另一个链接，则会关闭当前TCP连接，如果在65s内点击了其它链接，则会复用当前的TCP连接，不用进行三次握手。<br><strong>什么时候使用</strong></p><ul><li>明显的预知用户会在当前连接上有下一步操作</li><li>复用连接，有效减少握手次数，尤其是https建立一次连接开销会更大</li></ul><p><strong>什么时候不用</strong></p><ul><li>访问内联资源一般用缓存，不需要keepalive</li><li>长时间的tcp连接容易导致系统资源无效占用</li></ul><p><img src="https://img-blog.csdnimg.cn/64d55fd5628e4f1b86d88642ad341cf3.png" alt="在这里插入图片描述"></p><h3 id="2-2-测试工具charles">2.2 测试工具charles</h3><p>抓包工具，可以查看传输次数，模拟重放等</p><blockquote><p>下载地址：<a href="https://www.charlesproxy.com/assets/release/4.6.2/charles-proxy-4.6.2-win64.msi?k=fc1457e312" target="_blank" rel="noopener">https://www.charlesproxy.com/assets/release/4.6.2/charles-proxy-4.6.2-win64.msi?k=fc1457e312</a><br>官网：<a href="https://www.charlesproxy.com" target="_blank" rel="noopener">https://www.charlesproxy.com</a></p></blockquote><h3 id="2-3-KeepAlive使用">2.3 KeepAlive使用</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用于开启文件高效传输模式</span></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 下面是默认值</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 限制keepalive保持连接的最大时间</span></span><br><span class="line">    <span class="comment"># 超过这个时间 没有活动，会让keepalive失效</span></span><br><span class="line">    <span class="comment"># 两个65 在浏览器显示两条，为了兼容http1.0</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span> <span class="number">65</span>; </span><br><span class="line">    <span class="comment"># 用于设置Nginx服务器与客户端保持连接的超时时间</span></span><br><span class="line">    <span class="attribute">keepalive_time</span> <span class="number">1h</span>; <span class="comment"># 一个tcp连接总时长，超过之后 强制失效</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 默认60s  此处有坑！！ 系统中 若有耗时操作，超过 send_timeout 强制断开连接。 </span></span><br><span class="line">    <span class="comment"># 注意：准备过程中，不是传输过程</span></span><br><span class="line">    <span class="attribute">send_timeout</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#一个tcp复用中 可以并发接收的请求个数</span></span><br><span class="line">    <span class="attribute">keepalive_requests</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><h3 id="2-4-对上游服务器使用keepalive">2.4 对上游服务器使用keepalive</h3><p>首先需要配置使用http1.1协议。以便建立更高效的传输，默认使用http1.0，在http1.0中需要配置header才可以。在Upstream中所配置的<strong>上游服务器(即Tomcat)默认都是用短连接</strong>，即每次请求都会在完成之后断开，因此需要请求复用</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> tomcat-web &#123;</span><br><span class="line">   <span class="comment"># 连接保留时间</span></span><br><span class="line">   <span class="attribute">keepalive_timeout</span> <span class="number">1000</span>;</span><br><span class="line">   <span class="comment"># 向上游服务器的保留连接数</span></span><br><span class="line">   <span class="attribute">keepalive</span> <span class="number">100</span>;</span><br><span class="line">   <span class="comment"># 一个tcp复用中 可以并发接收的请求个数</span></span><br><span class="line">   <span class="attribute">keepalive_requests</span> <span class="number">100</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="attribute">server</span> tomcat01:<span class="number">8080</span>  weight=<span class="number">100</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">15</span>;</span><br><span class="line">   <span class="attribute">server</span> tomcat02:<span class="number">8080</span>  weight=<span class="number">100</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="comment">#  root   /usr/share/nginx/html;</span></span><br><span class="line">       <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">       <span class="comment">#配置http版本号</span></span><br><span class="line">       <span class="comment">#默认使用http1.0协议，需要在request中增加”Connection： keep-alive“ header才能够支持，而#HTTP1.1默认支持。</span></span><br><span class="line">       <span class="attribute">proxy_set_header</span> Connection <span class="string">""</span>;</span><br><span class="line">       <span class="attribute">proxy_pass</span> http://tomcat-web;</span><br><span class="line">     <span class="attribute">root</span> html;</span><br><span class="line">       <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">       <span class="comment"># proxy_set_header host $host;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-AB压测">2.5 AB压测</h3><blockquote><p>ab 是 ApacheBench 命令的缩写。会创建多个并发线程访问,模拟多个访问者同时对某一 URL 地址进行访问。它的测试目标是基于 URL 的,因此,它既可以用来测试 apache 的负载压力,也可以测 试nginx、lighthttp、tomcat、IIS 等其它 Web 服务器的压力</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux安装</span></span><br><span class="line">apt-get install apache2-utils</span><br><span class="line"><span class="comment"># Centos安装</span></span><br><span class="line">yum install httpd-tools</span><br><span class="line"><span class="comment"># 常用的测试</span></span><br><span class="line">ab -n 100 -c 10 http://sewise.21321.com/redistest/RedisSaveToMysqlJson</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>-n 即requests，用于指定压力测试总共的执行次数</li><li>-c 即concurrency，用于指定的并发数</li><li>-t 即timelimit，等待响应的最大时间(单位：秒)</li><li>-b 即windowsize，TCP发送/接收的缓冲大小(单位：字节)</li><li>-p 即postfile，发送POST请求时需要上传的文件，此外还必须设置-T参数</li><li>-u 即putfile，发送PUT请求时需要上传的文件，此外还必须设置-T参数</li><li>-T 即content-type，用于设置Content-Type请求头信息，例如：application/x-www-form-urlencoded，默认值为text/plain</li><li>-v 即verbosity，指定打印帮助信息的冗余级别</li><li>-w 以HTML表格形式打印结果</li><li>-i 使用HEAD请求代替GET请求</li><li>-x 插入字符串作为table标签的属性</li><li>-y 插入字符串作为tr标签的属性</li><li>-z 插入字符串作为td标签的属性</li><li>-C 添加cookie信息，例如：“Apache=1234”(可以重复该参数选项以添加多个)</li><li>-H 添加任意的请求头，例如：“Accept-Encoding: gzip”，请求头将会添加在现有的多个请求头之后(可以重复该参数选项以添加多个)</li><li>-A 添加一个基本的网络认证信息，用户名和密码之间用英文冒号隔开</li><li>-P 添加一个基本的代理认证信息，用户名和密码之间用英文冒号隔开</li><li>-X 指定使用的和端口号，例如:“126.10.10.3:88”</li><li>-V 打印版本号并退出</li><li>-k 使用HTTP的KeepAlive特性</li><li>-d 不显示百分比</li><li>-S 不显示预估和警告信息</li><li>-g 输出结果信息到gnuplot格式的文件中</li><li>-e 输出结果信息到CSV格式的文件中</li><li>-r 指定接收到错误信息时不退出程序</li><li>-h 显示用法信息，其实就是ab -help</li></ul><h2 id="3、反向代理核心流程">3、反向代理核心流程</h2><blockquote><p>参考：<a href="https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html" target="_blank" rel="noopener">https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html</a></p></blockquote><h3 id="3-1-UpStream工作流程">3.1 UpStream工作流程</h3><p>proxy_pass 向上游服务器请求数据共有6个阶段</p><ul><li>初始化</li><li>与上游服务器建立连接</li><li>向上游服务器发送请求</li><li>处理响应头</li><li>处理响应体</li><li>结束</li></ul><h3 id="3-2-服务端和客户端的限制">3.2 服务端和客户端的限制</h3><p>针对上游服务端的限制，可以在<strong>http/server/location配置，<strong>一般在</strong>location</strong>里进行配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置header</span></span><br><span class="line">proxy_set_header</span><br><span class="line"><span class="comment"># 设置用户真是ip</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与上游服务器连接超时时间、快速失败</span></span><br><span class="line">proxy_connect_timeout</span><br><span class="line"><span class="comment"># 定义nginx向后端服务发送请求的间隔时间(不是耗时)。默认60秒，超过这个时间会关闭连接</span></span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">60</span>;</span><br><span class="line"><span class="comment"># 后端服务给nginx响应的时间，规定时间内后端服务没有给nginx响应，连接会被关闭，</span></span><br><span class="line"><span class="comment"># nginx返回504 Gateway Time-out。默认60秒</span></span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端或代理服务器连接上两次连续的读取或写入操作之间的超时（timeout）。</span></span><br><span class="line"><span class="comment"># 如果在此时间内没有数据传输，则连接将关闭</span></span><br><span class="line">proxy_timeout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓冲区，针对上游服务器返回的数据</span></span><br><span class="line"><span class="comment">#缓冲解决的是客户端与上游服务器的网络传输差距</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否完全读到请求体之后再向上游服务器发送请求，默认开启</span></span><br><span class="line"><span class="attribute">proxy_requset_buffering</span> <span class="literal">on</span>;</span><br><span class="line"><span class="comment"># 是否缓冲上游服务器数据</span></span><br><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line"><span class="comment"># header缓冲区大小</span></span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line"><span class="comment"># 缓冲区大小 32个 64k大小内存缓冲块</span></span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">32</span> <span class="number">128k</span>;</span><br><span class="line"><span class="attribute">proxy_busy_buffers_size</span> <span class="number">8k</span>;</span><br><span class="line"><span class="comment"># proxy_pass读到向磁盘写入的最大值</span></span><br><span class="line"><span class="attribute">proxy_max_temp_file_size</span> <span class="number">1024m</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当启用从代理服务器到临时文件的响应的缓冲时，一次限制写入临时文件的数据的大小。</span></span><br><span class="line"><span class="comment"># 默认情况下，大小由proxy_buffer_size和proxy_buffers指令设置的两个缓冲区限制。</span></span><br><span class="line"><span class="comment"># 临时文件的最大大小由proxy_max_temp_file_size指令设置</span></span><br><span class="line"><span class="attribute">proxy_temp_file_write_size</span> <span class="number">8k</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时文件最大值</span></span><br><span class="line"><span class="attribute">proxy_max_temp_file_size</span> <span class="number">1024m</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时缓冲存放位置，1 2指的是层级</span></span><br><span class="line">proxy_temp_path</span><br><span class="line"><span class="attribute">proxy_temp_path</span> /spool/nginx/proxy_temp <span class="number">1</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当后端服务器返回指定的错误时，将请求传递到其他服务器，5xx不会进行重试</span></span><br><span class="line"><span class="comment"># 其默认值是proxy_next_upstream error timeout</span></span><br><span class="line">proxy_next_upstream</span><br></pre></td></tr></table></figure><p>针对客户端的限制，可以在<strong>http/server/location</strong>中进行配置，可以针对不同请求分别进行配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对客户端请求中的body缓冲区大小。默认32位8k 64位16k</span></span><br><span class="line"><span class="comment"># 如果请求体大于配置，则写入临时文件</span></span><br><span class="line">client_body_buffer_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置读取客户端请求体的缓冲区大小。 如果请求体大于缓冲区，则将整个请求体或仅将其部分写入临时文件 </span></span><br><span class="line"><span class="comment"># 32位8K，64位平台16K。  </span></span><br><span class="line"><span class="comment"># 如果一个请求行或者一个请求头字段不能放入这个缓冲区，那么就会使用large_client_header_buffers</span></span><br><span class="line">client_header_buffer_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认8k</span></span><br><span class="line">large_client_header_buffers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认1m，如果一个请求的大小超过配置的值，会返回413 (request Entity Too Large)错误给客户端</span></span><br><span class="line"><span class="comment"># size设置为0将禁用对客户端请求正文大小的检查。</span></span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">1000M</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定客户端与服务端建立连接后发送 request body 的超时时间</span></span><br><span class="line"><span class="comment"># 如果客户端在指定时间内没有发送任何内容，Nginx 返回 HTTP 408（Request Timed Out）</span></span><br><span class="line">client_body_timeout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端向服务端发送一个完整的 request header 的超时时间</span></span><br><span class="line"><span class="comment"># 如果客户端在指定时间内没有发送一个完整的 request header，Nginx 返回 HTTP 408（Request Timed Out）</span></span><br><span class="line">client_header_timeout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在磁盘上客户端的body临时缓冲区位置</span></span><br><span class="line"><span class="attribute">client_body_temp_path</span> path [level1 [level2 [level3]]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把body写入磁盘文件，请求结束也不会删除，线上不要用</span></span><br><span class="line">client_body_in_file_only <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尽量缓冲body的时候在内存中使用连续单一缓冲区，在二次开发时使用`$request_body`读取数据时性能会有所提高</span></span><br><span class="line">client_body_in_single_buffer</span><br></pre></td></tr></table></figure><h3 id="3-3-重试机制">3.3 重试机制</h3><blockquote><p>参考文档：<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream</a></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> tomcat-web &#123;</span><br><span class="line">   <span class="attribute">keepalive_timeout</span> <span class="number">1000</span>;</span><br><span class="line">   <span class="attribute">keepalive</span> <span class="number">100</span>;</span><br><span class="line">   <span class="attribute">keepalive_requests</span> <span class="number">100</span>;</span><br><span class="line">   <span class="comment"># 这是单台上游服务器的限制，下面是整个上游服务器</span></span><br><span class="line">   <span class="comment"># max_fails表示最大失败次数，0为标记一直可用，不检查健康状态</span></span><br><span class="line">   <span class="comment"># fail_timeout表示失败时间，当fail_timeout时间内失败了max_fails次，标记服务不可用，fail_timeout时间后会再次激活次服务</span></span><br><span class="line">   <span class="attribute">server</span> tomcat01:<span class="number">8080</span>  weight=<span class="number">100</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">15</span>;</span><br><span class="line">   <span class="attribute">server</span> tomcat02:<span class="number">8080</span>  weight=<span class="number">100</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    </span><br><span class="line">       <span class="comment"># 这是与上游服务器的重试</span></span><br><span class="line">       <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout;</span><br><span class="line">       <span class="comment"># 重试最大超时时间</span></span><br><span class="line">       <span class="comment"># proxy_next_upstream_timeout时间内允许proxy_next_upstream_tries次重试</span></span><br><span class="line">       <span class="attribute">proxy_next_upstream_timeout</span> <span class="number">5s</span>;</span><br><span class="line">       <span class="comment"># 重试次数，包括第一次</span></span><br><span class="line">       <span class="attribute">proxy_next_upstream_tries</span> <span class="number">3</span>;</span><br><span class="line">       <span class="attribute">proxy_pass</span> http://tomcat-web;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-上游服务器健康检查">3.4 上游服务器健康检查</h3><blockquote><p>tengine版：<a href="https://github.com/yaoweibin/nginx_upstream_check_module" target="_blank" rel="noopener">https://github.com/yaoweibin/nginx_upstream_check_module</a><br>nginx商业版：<a href="http://nginx.org/en/docs/http/ngx_http_upstream_hc_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_upstream_hc_module.html</a></p></blockquote><p>tengine需要版本匹配，具体可以上网找，在nginx目录<code>patch -p1 &lt; /home/nginx_upstream_check_module-master/check_1.20.1+.patch </code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">  <span class="comment">#   server 192.168.44.102 weight=8 down;</span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.44.104:8080</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.44.105:8080</span>;</span><br><span class="line">  <span class="comment"># 3s检查一次，rise请求几次表示正常，fall表示几次表示失败</span></span><br><span class="line">  <span class="attribute">check</span> interval=<span class="number">3000</span> rise=<span class="number">2</span> fall=<span class="number">5</span> timeout=<span class="number">1000</span> type=http;</span><br><span class="line">  <span class="attribute">check_http_send</span> <span class="string">"HEAD / HTTP/1.0\r\n\r\n"</span>;</span><br><span class="line">  <span class="attribute">check_http_expect_alive</span> http_2xx http_3xx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /status &#123;</span><br><span class="line">  check_status;</span><br><span class="line">  <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">  <span class="attribute">root</span>   html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、资源压缩">4、资源压缩</h2><h3 id="4-1-gzip动态压缩">4.1 gzip动态压缩</h3><blockquote><p>参考：<a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html" target="_blank" rel="noopener">https://nginx.org/en/docs/http/ngx_http_gzip_module.html</a></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开关，默认关闭  </span></span><br><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"><span class="comment"># 缓冲区大小</span></span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">32</span> <span class="number">4k</span>|<span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="comment"># 压缩等级 1-9，数字越大压缩比越高</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="comment"># 使用gzip的最小版本</span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="comment"># 设置将被gzip压缩的响应的最小长度。 长度仅由“Content-Length”响应报头字段确定</span></span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line"><span class="comment"># 可以多选</span></span><br><span class="line"><span class="attribute">gzip_proxied</span> any;</span><br><span class="line"><span class="comment">#off 为不做限制</span></span><br><span class="line"><span class="comment">#作为反向代理时，针对上游服务器返回的头信息进行压缩</span></span><br><span class="line"><span class="comment">#expired - 启用压缩，如果header头中包含 "Expires" 头信息</span></span><br><span class="line"><span class="comment">#no-cache - 启用压缩，如果header头中包含 "Cache-Control:no-cache" 头信息</span></span><br><span class="line"><span class="comment">#no-store - 启用压缩，如果header头中包含 "Cache-Control:no-store" 头信息</span></span><br><span class="line"><span class="comment">#private - 启用压缩，如果header头中包含 "Cache-Control:private" 头信息</span></span><br><span class="line"><span class="comment">#no_last_modified - 启用压缩,如果header头中不包含 "Last-Modified" 头信息</span></span><br><span class="line"><span class="comment">#no_etag - 启用压缩 ,如果header头中不包含 "ETag" 头信息</span></span><br><span class="line"><span class="comment">#auth - 启用压缩 , 如果header头中包含 "Authorization" 头信息</span></span><br><span class="line"><span class="comment">#any - 无条件启用压缩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个header，适配老的浏览器 `Vary: Accept-Encoding`</span></span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"><span class="comment"># 哪些mime类型的文件进行压缩</span></span><br><span class="line"><span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml;</span><br><span class="line"><span class="comment"># 根据自己情况配置</span></span><br><span class="line">gzip_types</span><br><span class="line">  text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml</span><br><span class="line">  text/javascript application/javascript application/x-javascript</span><br><span class="line">  text/x-json application/json application/x-web-app-manifest+json</span><br><span class="line">  text/css text/plain text/x-component</span><br><span class="line">  font/opentype application/x-font-ttf application/vnd.ms-fontobject</span><br><span class="line">  image/x-icon;</span><br><span class="line"><span class="comment"># 禁止某些浏览器使用gzip，建议开启，正则消耗资源</span></span><br><span class="line"><span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\.(?!.*SV1)"</span>;</span><br></pre></td></tr></table></figure><h3 id="4-2-gzip静态压缩">4.2 gzip静态压缩</h3><blockquote><p>参考：<a href="https://nginx.org/en/docs/http/ngx_http_gunzip_module.html" target="_blank" rel="noopener">https://nginx.org/en/docs/http/ngx_http_gunzip_module.html</a><br><a href="https://nginx.org/en/docs/http/ngx_http_gunzip_module.html" target="_blank" rel="noopener">https://nginx.org/en/docs/http/ngx_http_gunzip_module.html</a></p></blockquote><p><code>ngx_http_gzip_static_module</code>模块允许发送带有“ .gz”文件扩展名的预压缩文件；<code>ngx_http_gunzip_module</code>帮助不支持gzip的客户端解压本地文件（帮助节省磁盘空间），也可以直接传输事先在本地压缩好的文件，需要重新编译nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_gzip_static_module \</span><br><span class="line">            --with-http_gunzip_module</span><br></pre></td></tr></table></figure><p>一般和gunzip配合使用，这样就不需要在客户端进行解压；</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和下面always配合</span></span><br><span class="line"><span class="attribute">gunzip</span> <span class="literal">on</span>;</span><br><span class="line"><span class="comment"># 默认off,always是总是发送压缩包，on检查客户端是不是支持，不支持就不发送</span></span><br><span class="line"><span class="attribute">gzip_static</span> <span class="literal">on</span> | <span class="literal">off</span> | always;</span><br></pre></td></tr></table></figure><h3 id="4-3-Brotli压缩">4.3 Brotli压缩</h3><blockquote><p>Brotli 是 Google 开发的一种压缩格式，它通过内置分析大量网页得出的字典，实现了更高的压缩比率，同时几乎不影响压缩 / 解压速度。它可以和nginx本身的gzip共存<br>官网：<a href="https://github.com/google/ngx_brotli" target="_blank" rel="noopener">https://github.com/google/ngx_brotli</a> / <a href="https://github.com/google/brotli" target="_blank" rel="noopener">https://github.com/google/brotli</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载两个项目，然后解压</span></span><br><span class="line"><span class="comment"># 模块化编译</span></span><br><span class="line">./configure --with-compat --add-dynamic-module=/root/ngx_brotli-1.0.0rc --prefix=/usr/<span class="built_in">local</span>/nginx/</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">--add-dynamic-module=brotli目录</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ngx_http_brotli_filter_module.so ngx_http_brotli_static_module.so拷贝到/usr/local/nginx/modules/</span></span><br><span class="line"><span class="comment"># 复制nginx主程序</span></span><br><span class="line"><span class="comment"># 配置文件中添加</span></span><br><span class="line">load_module <span class="string">"/usr/local/nginx/modules/ngx_http_brotli_filter_module.so"</span>;</span><br><span class="line">load_module <span class="string">"/usr/local/nginx/modules/ngx_http_brotli_static_module.so"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx 配置文件</span></span><br><span class="line">brotli on;</span><br><span class="line">brotli_static on;</span><br><span class="line">brotli_comp_level 6;</span><br><span class="line">brotli_buffers 16 8k;</span><br><span class="line">brotli_min_length 20;</span><br><span class="line">brotli_types text/plain text/css text/javascript application/javascript text/xml application/xml application/xml+rss application/json image/jpeg image/gif image/png;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试，默认http协议是没有br的，https使用</span></span><br><span class="line"><span class="comment"># 要发送到服务端的自定义请求头 (H)；仅显示响应文档头（I）</span></span><br><span class="line">curl -H <span class="string">'Accept-Encoding: gzip'</span> -I http://localhost</span><br></pre></td></tr></table></figure><h2 id="5、Nginx并发限制">5、Nginx并发限制</h2><blockquote><p>官方文档：<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_limit_req_module.html</a><br>测试工具：<a href="https://jmeter.apache.org/" target="_blank" rel="noopener">https://jmeter.apache.org/</a></p></blockquote><h3 id="5-1-漏桶算法限制">5.1 <strong>漏桶算法限制</strong></h3><p>配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 漏桶算法</span></span><br><span class="line"><span class="comment"># 在http模块下，$binary_remote_add表示ip地址(原始数据，也可以直接remote_addr)，test是名称，</span></span><br><span class="line"><span class="comment"># 10m为内存空间，rate表示速率，r是request（这个并不算真正的桶，超过限制会返回失败）</span></span><br><span class="line"><span class="attribute">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone=test:<span class="number">10m</span> rate=15r/s;</span><br><span class="line"><span class="comment"># burst表示桶大小，nodelay表示快速失败,超过桶大小请求会进入队列状态，nodelay超过桶范围直接报错</span></span><br><span class="line"><span class="attribute">limit_req</span> zone=req_zone_wl burst=<span class="number">20</span> nodelay;</span><br><span class="line"></span><br><span class="line"><span class="attribute">localtion</span> /&#123;</span><br><span class="line">   <span class="attribute">limit_req</span> zone=test;</span><br><span class="line">   <span class="attribute">root</span> html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-令牌桶限制带宽">5.2 <strong>令牌桶限制带宽</strong></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">localtion</span> /&#123;</span><br><span class="line">   <span class="attribute">limit_req</span> zone=test;</span><br><span class="line">   <span class="comment"># 限制带宽</span></span><br><span class="line">   <span class="attribute">limit_rate</span> <span class="number">1k</span>;</span><br><span class="line">   <span class="comment"># 下载多少之后开始限速</span></span><br><span class="line">   <span class="attribute">limit_rate_after</span> <span class="number">1m</span>;</span><br><span class="line">   <span class="attribute">root</span> html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-计数器算法限制并发数">5.3 <strong>计数器算法限制并发数</strong></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计数器算法</span></span><br><span class="line"><span class="attribute">limit_conn_zone</span> <span class="variable">$binary_remote_addr</span> zone=test2:<span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">localtion</span> /&#123;</span><br><span class="line">   <span class="comment"># 并发数限制，只有1，超过需要排队</span></span><br><span class="line">   <span class="attribute">limit_conn</span> test2 <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">root</span> html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Nginx日志">6、Nginx日志</h2><h3 id="6-1-ngx-http-empty-gif-module">6.1 ngx_http_empty_gif_module</h3><blockquote><p>参考文档：<a href="http://nginx.org/en/docs/http/ngx_http_empty_gif_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_empty_gif_module.html</a></p></blockquote><p>该模块返回的是一个像素点的图片，一般嵌入到前端，用来收集用户操作信息等</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = /_.gif &#123;</span><br><span class="line">    empty_gif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-ngx-http-log-module">6.2 ngx_http_log_module</h3><blockquote><p>参考文档：<a href="http://nginx.org/en/docs/http/ngx_http_log_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_log_module.html</a><br>errorlog：<a href="http://nginx.org/en/docs/ngx_core_module.html#error_log" target="_blank" rel="noopener">http://nginx.org/en/docs/ngx_core_module.html#error_log</a></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在http模块，默认开启</span></span><br><span class="line"><span class="comment"># 日志格式定义</span></span><br><span class="line"><span class="attribute">log_format</span> compression <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] '</span></span><br><span class="line">                       <span class="string">'"<span class="variable">$request</span>" <span class="variable">$status</span> <span class="variable">$bytes_sent</span> '</span></span><br><span class="line">                       <span class="string">'"<span class="variable">$http_referer</span>" "<span class="variable">$http_user_agent</span>" "<span class="variable">$gzip_ratio</span>"'</span>;</span><br><span class="line"><span class="comment"># 可以控制刷写时间等</span></span><br><span class="line"><span class="comment"># access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]</span></span><br><span class="line"><span class="comment"># 加了buffer表示在这个存储内不会立刻写到文件，关机等操作也会刷写,加了flush就强制刷新</span></span><br><span class="line"><span class="comment"># gzip默认为1，内存直接追加到压缩包，9表示压缩比最高速度最慢</span></span><br><span class="line"><span class="attribute">access_log</span> /spool/logs/nginx-access.log compression buffer=<span class="number">32k</span> flush=<span class="number">1m</span> gzip=<span class="number">5</span>;</span><br><span class="line"><span class="comment"># 文件打开缓存</span></span><br><span class="line"><span class="attribute">open_log_file_cache</span> max=N [inactive=time] [min_uses=N] [valid=time];</span><br><span class="line"><span class="comment"># /var/log/nginx/</span></span><br><span class="line"><span class="comment"># error_log也同理，也是默认开启</span></span><br><span class="line"><span class="comment"># error_log file [level];</span></span><br><span class="line"><span class="attribute">error_log</span> logs/error.log <span class="literal">error</span>;</span><br></pre></td></tr></table></figure><h3 id="6-3-Json日志格式举例">6.3 Json日志格式举例</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span>  ngxlog json <span class="string">'&#123;"timestamp":"<span class="variable">$time_iso8601</span>",'</span></span><br><span class="line">                    <span class="string">'"source":"<span class="variable">$server_addr</span>",'</span></span><br><span class="line">                    <span class="string">'"hostname":"<span class="variable">$hostname</span>",'</span></span><br><span class="line">                    <span class="string">'"remote_user":"<span class="variable">$remote_user</span>",'</span></span><br><span class="line">                    <span class="string">'"ip":"<span class="variable">$http_x_forwarded_for</span>",'</span></span><br><span class="line">                    <span class="string">'"client":"<span class="variable">$remote_addr</span>",'</span></span><br><span class="line">                    <span class="string">'"request_method":"<span class="variable">$request_method</span>",'</span></span><br><span class="line">                    <span class="string">'"scheme":"<span class="variable">$scheme</span>",'</span></span><br><span class="line">                    <span class="string">'"domain":"<span class="variable">$server_name</span>",'</span></span><br><span class="line">                    <span class="string">'"referer":"<span class="variable">$http_referer</span>",'</span></span><br><span class="line">                    <span class="string">'"request":"<span class="variable">$request_uri</span>",'</span></span><br><span class="line">                    <span class="string">'"requesturl":"<span class="variable">$request</span>",'</span></span><br><span class="line">                    <span class="string">'"args":"<span class="variable">$args</span>",'</span></span><br><span class="line">                    <span class="string">'"size":<span class="variable">$body_bytes_sent</span>,'</span></span><br><span class="line">                    <span class="string">'"status": <span class="variable">$status</span>,'</span></span><br><span class="line">                    <span class="string">'"responsetime":<span class="variable">$request_time</span>,'</span></span><br><span class="line">                    <span class="string">'"upstreamtime":"<span class="variable">$upstream_response_time</span>",'</span></span><br><span class="line">                    <span class="string">'"upstreamaddr":"<span class="variable">$upstream_addr</span>",'</span></span><br><span class="line">                    <span class="string">'"http_user_agent":"<span class="variable">$http_user_agent</span>",'</span></span><br><span class="line">                    <span class="string">'"http_cookie":"<span class="variable">$http_cookie</span>",'</span></span><br><span class="line">                    <span class="string">'"https":"<span class="variable">$https</span>"'</span></span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br></pre></td></tr></table></figure><h3 id="6-4-日志分隔">6.4 日志分隔</h3><ul><li><strong>脚本分隔</strong></li><li>**logrotate **</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般都会有安装，vim /etc/logrotate.d/nginx</span></span><br><span class="line">/var/<span class="built_in">log</span>/nginx/*.<span class="built_in">log</span> &#123;</span><br><span class="line">        daily</span><br><span class="line">        missingok</span><br><span class="line">        rotate 52</span><br><span class="line">        compress</span><br><span class="line">        delaycompress</span><br><span class="line">        notifempty</span><br><span class="line">        create 640 nginx adm</span><br><span class="line">        sharedscripts</span><br><span class="line">        postrotate</span><br><span class="line">                <span class="keyword">if</span> [ -f /var/run/nginx.pid ]; <span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">kill</span> -USR1 `cat /var/run/nginx.pid`</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Concat请求合并与资源静态化">6、Concat请求合并与资源静态化</h2><h3 id="6-1-请求合并">6.1 请求合并</h3><blockquote><p><a href="http://tengine.taobao.org/" target="_blank" rel="noopener">Tengine</a>是由淘宝网发起的Web服务器项目。ngx_http_concat模块就是其中之一，作用为在同一个请求里返回多个文件拼接，使用??表示，js/??a.js,b.js,c.js<br>Nginx官方介绍：<a href="https://www.nginx.com/resources/wiki/modules/concat/" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/modules/concat/</a><br>git地址：<a href="https://github.com/alibaba/nginx-http-concat" target="_blank" rel="noopener">https://github.com/alibaba/nginx-http-concat</a></p></blockquote><p>下载源码解压缩编译安装，下面是配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /static/css/ &#123;</span><br><span class="line">    <span class="attribute">concat</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">concat_max_files</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">#concat_types 参数很重要，因为默认对js的mime类型是application/x-javascript，导致无法返回js</span></span><br><span class="line">    <span class="attribute">concat_types</span> concat_types: text/css text/javascript application/javascript;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-资源静态化">6.2 资源静态化</h3><p><strong>解决的方法</strong></p><ul><li>高并发系统资源静态化方案</li><li>一致性问题</li><li>合并文件输出</li><li>集群文件同步</li></ul><p><strong>SSI模块合并资源静态化</strong></p><blockquote><p>利用SSI就可以解决，在静态页面中嵌入个人信息的动态页，由于是服务器端的嵌入，所以用户浏览的时候都是一个嵌入后的页面<br>官方文档：<a href="http://nginx.org/en/docs/http/ngx_http_ssi_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_ssi_module.html</a></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否打开ssi，默认是关闭</span></span><br><span class="line"><span class="attribute">ssi</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置存储在磁盘上的响应部分的最小大小，和sendfile on 配合</span></span><br><span class="line">ssi_min_file_chunk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否保留lastmodified，允许在SSI处理期间保留原始响应的Last-Modified报头字段，以方便响应缓存，默认关闭</span></span><br><span class="line">ssi_last_modified</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不显示逻辑错误，自动屏蔽，默认关闭</span></span><br><span class="line">ssi_silent_errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制脚本参数最大长度</span></span><br><span class="line">ssi_value_length</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认text/html;如果需要其他mime类型 需要设置</span></span><br><span class="line">ssi_types</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#=================SSI Commands================</span></span><br><span class="line"><span class="comment"># 静态文件直接引用</span></span><br><span class="line">&lt;!--# include file="footer.html" --&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以指向location，而不一定是具体文件</span></span><br><span class="line"><span class="attribute">include</span> virtual</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阻塞请求</span></span><br><span class="line">include wait</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在virtual基础上设置变量</span></span><br><span class="line">include set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置临时变量</span></span><br><span class="line">set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以声明一个ssi的命令块，里面可以包裹其他命令</span></span><br><span class="line">block</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在模板中配置报错情况</span></span><br><span class="line">config errmsg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期格式化</span></span><br><span class="line">config timefmt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接输出变量</span></span><br><span class="line"><span class="comment"># - var变量名称</span></span><br><span class="line"><span class="comment"># - encoding 是否使用特殊编码格式</span></span><br><span class="line"><span class="comment"># - default 变量没有值的时候使用默认值</span></span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑判断</span></span><br><span class="line">if</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例==============================</span></span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.hello.com</span><br><span class="line"><span class="comment"># 配置SSL</span></span><br><span class="line">ssi <span class="literal">on</span>; <span class="comment"># 开启SSI支持</span></span><br><span class="line"><span class="attribute">ssi_silent_errors</span> <span class="literal">on</span>; <span class="comment"># 默认为off，设置为on则在处理SSI文件出错时不输出错误信息</span></span><br><span class="line"><span class="attribute">ssi_types</span> text/html; <span class="comment"># 需要支持的shtml 默认是 text/html</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="comment"># 也可以写在这里</span></span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line"><span class="attribute">index</span> index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 界面</span></span><br><span class="line">&lt;h1&gt;我是html3&lt;/h1&gt;</span><br><span class="line">&lt;# include file="html1.html"&gt;</span><br><span class="line">&lt;# include file="html2.html"&gt;</span><br></pre></td></tr></table></figure><h3 id="6-3-Rsync静态文件同步方案">6.3 Rsync静态文件同步方案</h3><h4 id="1-rsync介绍">1. rsync介绍</h4><blockquote><p><strong>remote synchronize</strong>是一个远程数据同步工具，可通过 LAN/WAN 快速同步多台主机之间的文件。也可以使用 rsync 同步本地硬盘中的不同目录。<strong>rsync 是用于替代 rcp 的一个工具</strong>，rsync 使用所谓的 rsync算法 进行数据同步，这种算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。rsync 基于inotify 开发<br>rsync官方文档：<a href="https://www.samba.org/ftp/rsync/rsync.html" target="_blank" rel="noopener">https://www.samba.org/ftp/rsync/rsync.html</a></p></blockquote><p>Rsync有三种模式：</p><ul><li>本地模式（类似于cp命令）</li><li>远程模式（类似于scp命令）</li><li>守护进程（socket进程：是rsync的重要功能）</li></ul><table><thead><tr><th><strong>选项</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>-a</td><td>包含-rtplgoD</td></tr><tr><td>-r</td><td>同步目录时要加上，类似cp时的-r选项</td></tr><tr><td>-v</td><td>同步时显示一些信息，让我们知道同步的过程</td></tr><tr><td>-l</td><td>保留软连接</td></tr><tr><td>-L</td><td>加上该选项后，同步软链接时会把源文件给同步</td></tr><tr><td>-p</td><td>保持文件的权限属性</td></tr><tr><td>-o</td><td>保持文件的属主</td></tr><tr><td>-g</td><td>保持文件的属组</td></tr><tr><td>-D</td><td>保持设备文件信息</td></tr><tr><td>-t</td><td>保持文件的时间属性</td></tr><tr><td>–delete</td><td>删除DEST中SRC没有的文件</td></tr><tr><td>–exclude</td><td>过滤指定文件，如–exclude “logs”会把文件名包含logs的文件或者目录过滤掉，不同步</td></tr><tr><td>-P</td><td>显示同步过程，比如速率，比-v更加详细</td></tr><tr><td>-u</td><td>加上该选项后，如果DEST中的文件比SRC新，则不同步</td></tr><tr><td>-z</td><td>传输时压缩</td></tr></tbody></table><h4 id="2-rsync安装与启动-无权限认证">2. rsync安装与启动(无权限认证)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意该软件传输的两台机器都需要安装</span></span><br><span class="line"><span class="comment"># ubuntu的安装，但是一般都自带了</span></span><br><span class="line">sudo apt-get install rsync</span><br><span class="line"><span class="comment"># Centos安装</span></span><br><span class="line">yum install -y rsync</span><br></pre></td></tr></table></figure><p>配置文件可能不会生成，需要我们手动生成，<code>sudo vim /etc/rsyncd.conf</code>添加配置文件，然后在需要同步的机器上启动(默认rsync是不启动的，同时关闭需要kill)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/rsyncd: configuration file for rsync daemon mode</span></span><br><span class="line"><span class="comment"># See rsyncd.conf man page for more options.</span></span><br><span class="line"><span class="comment"># configuration example:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定自己的组和用户，否则推会发生问题</span></span><br><span class="line"><span class="comment"># uid = nobody</span></span><br><span class="line"><span class="comment"># gid = nobody</span></span><br><span class="line"><span class="comment"># 推的时候用到</span></span><br><span class="line"><span class="attribute">read</span> only = <span class="literal">no</span></span><br><span class="line"><span class="comment"># use chroot = yes</span></span><br><span class="line"><span class="comment"># max connections = 4</span></span><br><span class="line"><span class="comment"># pid file = /var/run/rsyncd.pid</span></span><br><span class="line"><span class="comment"># exclude = lost+found/</span></span><br><span class="line"><span class="comment"># transfer logging = yes</span></span><br><span class="line"><span class="comment"># timeout = 900</span></span><br><span class="line"><span class="comment"># ignore nonreadable = yes</span></span><br><span class="line"><span class="comment"># dont compress = *.gz *.tgz *.zip *.z*.Z *.rpm *.deb *.bz2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ftp]</span><br><span class="line">  path = /home/shawn/test</span><br></pre></td></tr></table></figure><p>运行命令，<strong>注意rsync服务器需要开启873端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在需要同步的机器运行,可自定义端口</span></span><br><span class="line">sudo rsync --daemon [--port=3189]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在另一台机器运行==========</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看这个模块下的查看远程目录</span></span><br><span class="line">rsync --list-only 你的ip::ftp/</span><br><span class="line">rsync -avz rsync://你的ip:873/ftp <span class="built_in">test</span></span><br><span class="line">rsync -avz --delete 你的ip::ftp/ <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 使用SSH方式，本机向同步机器发送</span></span><br><span class="line">rsync -avzP hello.log  shawn@你的ip:<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="3-带权限认证的同步传输">3. 带权限认证的同步传输</h4><p>首先创建用户密码对，<code>sudo echo &quot;shawn:www&quot; &gt;&gt; /etc/rsyncd.pwd</code>，同时设置权限为600，<code>sudo chmod 600 /etc/rsyncd.pwd</code>，然后修改配置。修改完成后kill进程然后启动</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">secrets</span> file = /etc/rsyncd.pwd</span><br><span class="line">auth users = shawn</span><br><span class="line"></span><br><span class="line">[ftp]</span><br><span class="line">  path = /home/shawn/test</span><br></pre></td></tr></table></figure><p>在被同步的机器访问<code>rsync --list-only shawn@xx::ftp</code>，加上用户名和密码即可。当时可以进行免密操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存入密码</span></span><br><span class="line">ehco <span class="string">"shawn"</span> &gt;&gt; /etc/rsyncd.pwd.client</span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line">chmod 600 /etc/rsync.pwd.client</span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">rsync --list-only --password-file=/etc/rsync.pwd.client shawn@ip::ftp</span><br></pre></td></tr></table></figure><h4 id="4-实时监控与推送">4. 实时监控与推送</h4><p>推送端安装<strong>inotify</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编码编译安装，需要gcc,make相关依赖</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码包</span></span><br><span class="line">wget http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz</span><br><span class="line"><span class="comment"># 解压到指定目录</span></span><br><span class="line">tar zxvf /inotify-tools-3.14.tar.gz -C /usr/<span class="built_in">local</span>/inotify</span><br><span class="line"><span class="comment"># 到指定目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/inotify</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/inotify</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行，当监控的目录发送改变时，会发生变化</span></span><br><span class="line">/usr/<span class="built_in">local</span>/inotify/bin/inotifywait -mrq --timefmt <span class="string">'%Y-%m-%d %H:%M:%S'</span> --format <span class="string">'%T %w%f %e'</span> -e close_write,modify,delete,create,attrib,move /home/shawn/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>这里可以写个自动化脚本，一个目录一旦发送变化，就进行同步推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/<span class="built_in">local</span>/inotify/bin/inotifywait -mrq --timefmt <span class="string">'%Y-%m-%d %H:%M:%S'</span> --format <span class="string">'%T %w%f %e'</span> -e close_write,modify,delete,create,attrib,move /home/shawn/<span class="built_in">test</span>| <span class="keyword">while</span> <span class="built_in">read</span> file</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">       rsync -az --delete --password-file=/etc/rsync.pwd.client  <span class="built_in">test</span> shawn@ip::<span class="built_in">test</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>inotify常用参数</strong></p><table><thead><tr><th>参数</th><th>说明</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>–recursive</td><td>递归查询目录</td></tr><tr><td>-q</td><td>–quiet</td><td>打印很少的信息，仅仅打印监控事件信息</td></tr><tr><td>-m</td><td>–monitor</td><td>始终保持事件监听状态</td></tr><tr><td>–excludei</td><td></td><td>排除文件或目录时，不区分大小写</td></tr><tr><td>–timefmt</td><td></td><td>指定事件输出格式</td></tr><tr><td>–format</td><td></td><td>#打印使用指定的输出类似格式字符串</td></tr><tr><td>-e</td><td>–event[ -e|–event … ]accessmodifyattribcloseopenmove_tomove createdeleteumount</td><td>#通过此参数可以指定要监控的事件 #文件或目录被读取#文件或目录的内容被修改#文件或目录属性被改变#文件或目录封闭，无论读/写模式#文件或目录被打开#文件或目录被移动至另外一个目录#文件或目录被移动另一个目录或从另一个目录移动至当前目录#文件或目录被创建在当前目录#文件或目录被删除#文件系统被卸载</td></tr></tbody></table><h4 id="5-rsync配置文件详解">5. rsync配置文件详解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sample rsyncd.conf configuration file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GLOBAL OPTIONS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#motd file=/etc/motd #登录欢迎信息</span></span><br><span class="line"><span class="comment">#log file=/var/log/rsyncd #日志文件</span></span><br><span class="line"><span class="comment"># for pid file, do not use /var/run/rsync.pid if</span></span><br><span class="line"><span class="comment"># you are going to run rsync out of the init.d script.</span></span><br><span class="line">pid file=/var/run/rsyncd.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定rsync发送日志消息给syslog时的消息级别，常见的消息级别是：uth, authpriv, cron, daemon, ftp, kern, lpr, mail, news, security, sys-log, user, uucp, local0, local1, local2, local3,local4, local5, local6和local7。默认值是daemon。</span></span><br><span class="line"><span class="comment">#syslog facility=daemon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义tcp选项，默认是关闭的</span></span><br><span class="line"><span class="comment">#socket options=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是模块信息，我们可以创建多个模块</span></span><br><span class="line"><span class="comment"># MODULE OPTIONS</span></span><br><span class="line"></span><br><span class="line">[ftp]</span><br><span class="line"></span><br><span class="line">        comment = public archive <span class="comment">#模块描述</span></span><br><span class="line">        path = /var/www/pub <span class="comment">#需要同步的路径</span></span><br><span class="line">        use chroot = yes <span class="comment">#默认是yes|true，如果为true，那么在rsync在传输文件以前首先chroot到path参数指定的目录下。这样做的原因是实现额外的安全防护，但是缺点是需要root权限，并且不能备份指向外部的符号连接指向的目录文件。</span></span><br><span class="line"><span class="comment">#       max connections=10 #最大连接数</span></span><br><span class="line">        lock file = /var/lock/rsyncd <span class="comment">#指定支持max connections参数的锁文件。</span></span><br><span class="line"><span class="comment"># the default for read only is yes...</span></span><br><span class="line">        <span class="built_in">read</span> only = yes <span class="comment">#只读选项</span></span><br><span class="line">        list = yes <span class="comment">#客户请求时可用模块时是否列出该模块</span></span><br><span class="line">        uid = nobody <span class="comment">#设定该模块传输文件时守护进程应该具有的uid</span></span><br><span class="line">        gid = nogroup <span class="comment">#设定该模块传输文件时守护进程应具有的gid，此项与uid配合可以确定文件的访问权限</span></span><br><span class="line"><span class="comment">#       exclude = #用来指定多个由空格隔开的多个模式列表，并将其添加到exclude列表中。这等同于在客户端命令中使用--exclude来指定模式，不过配置文件中指定的exlude模式不会传递给客户端，而仅仅应用于服务器。一个模块只能指定一个exlude选项，但是可以在模式前面使用"-"和"+"来指定是exclude还是include    #这个我的理解是排除目录中不需同步的文件</span></span><br><span class="line"><span class="comment">#       exclude from = #可以指定一个包含exclude模式定义的文件名</span></span><br><span class="line"><span class="comment">#       include = #与exclude相似</span></span><br><span class="line"><span class="comment">#       include from = #可以指定一个包含include模式定义的文件名</span></span><br><span class="line"><span class="comment">#       auth users = #该选项指定由空格或逗号分隔的用户名列表，只有这些用户才允许连接该模块。这里的用户和系统用户没有任何关系。如果"auth users"被设置，那么客户端发出对该模块的连接请求以后会被rsync请求challenged进行验证身份这里使用的 challenge/response认证协议。用户的名和密码以明文方式存放在"secrets file"选项指定的文件中。默认情况下无需密码就可以连接模块(也就是匿名方式)</span></span><br><span class="line"><span class="comment">#       secrets file = /etc/rsyncd.secrets #该文件每行包含一个username:password对，以明文方式存储，只有在auth users被定义时，此选项才生效。同时我们需要将此文件权限设置为0600</span></span><br><span class="line">        strict modes = yes <span class="comment">#该选项指定是否监测密码文件的权限，如果该选项值为true那么密码文件只能被rsync服务器运行身份的用户访问，其他任何用户不可以访问该文件。默认值为true</span></span><br><span class="line"><span class="comment">#       hosts allow = #允许的主机</span></span><br><span class="line"><span class="comment">#       hosts deny = #拒绝访问的主机</span></span><br><span class="line">        ignore errors = no <span class="comment">#设定rsync服务器在运行delete操作时是否忽略I/O错误</span></span><br><span class="line">        ignore nonreadable = yes <span class="comment">#设定rysnc服务器忽略那些没有访问文件权限的用户</span></span><br><span class="line">        transfer logging = no <span class="comment">#使rsync服务器使用ftp格式的文件来记录下载和上载操作在自己单独的日志中</span></span><br><span class="line"><span class="comment">#       log format = %t: host %h (%a) %o %f (%l bytes). Total %b bytes. #设定日志格式</span></span><br><span class="line">        timeout = 600 <span class="comment">#超时设置(秒)</span></span><br><span class="line">        refuse options = checksum dry-run <span class="comment">#定义一些不允许客户对该模块使用的命令选项列表</span></span><br><span class="line">        dont compress = *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz <span class="comment">#告诉rysnc那些文件在传输前不用压缩，默认已设定压缩包不再进行压缩</span></span><br></pre></td></tr></table></figure><h1>三、多级缓存</h1><h2 id="1、浏览器缓存">1、浏览器缓存</h2><p>进入开发者模式，刷新即可看见，点击disable_cache即可不使用本地缓存</p><ul><li><strong>memorycache</strong></li></ul><p>字面理解是从内存中，其实也是字面的含义，这个资源是直接从内存中拿到的，<strong>不会请求服务器</strong>一般已经加载过该资源且缓存在了内存当中，当关闭该页面时，此资源就被内存释放掉了，再次重新打开相同页面时不会出现from memory cache的情况</p><ul><li><strong>diskcache</strong></li></ul><p>是从磁盘当中取出的，也是在已经在之前的某个时间加载过该资源，<strong>不会请求服务器</strong>但是此资源不会随着该页面的关闭而释放掉，因为是存在硬盘当中的，下次打开仍会from disk cache</p><ul><li><strong>Age</strong></li></ul><p>是CDN添加的属性表示在CDN中缓存了多少秒</p><ul><li><strong>via</strong></li></ul><p>用来标识CDN缓存经历了哪些服务器，缓存是否命中，使用的协议</p><h2 id="2、协商缓存">2、协商缓存</h2><blockquote><p>发送请求header中携带Last-Modified，服务器可能会返回304 Not Modified</p></blockquote><p>Nginx配置对应<strong>Last-Modified</strong>和<strong>ETag。<strong>http1.1支持，在HTTP协议中</strong>If-Modified-Since</strong>和<strong>If-None-Match</strong>分别对应<strong>Last-Modified</strong>和<strong>ETag</strong>（last-modified 与ssi会发生冲突）<br>Entity Tag 的缩写，中文译过来就是实体标签的意思。HTTP中并没有指定如何生成ETag，哈希是比较理想的选择。在计算Etag的时候，会产生CPU的耗费，所以也可以用时间戳，但这样直接使用Last-Modified即可。ETag 用来校验用户请求的资源是否有变化，作用和lastmodified很像，区别是lastmodified精确到秒，ETag可以用hash算法来生成更精确的比对内容。<strong>当用户首次请求资源的时候返回给用户数据和200状态码并生成ETag，再次请求的时候服务器比对ETag，没有发生变化的话返回304</strong></p><h2 id="3、浏览器强制缓存">3、浏览器强制缓存</h2><blockquote><p>直接从本机读取，不请求服务器，http1.1的规范，使用max-age表示文件可以在浏览器中缓存的时间以秒为单位，在浏览器和服务器端验证文件是否过期的时候，浏览器在二次请求的时候会携带IF-Modified-Since属性</p></blockquote><p>Cache-Control直接是通过不请求来实现，而ETag是会发请求的，只不过服务器根据请求的东西的内容有无变化来判断是否返回请求的资源</p><table><thead><tr><th>标记</th><th>类型</th><th>功能</th></tr></thead><tbody><tr><td>public</td><td>响应头</td><td>响应的数据可以被缓存，客户端和代理层都可以缓存</td></tr><tr><td>private</td><td>响应头</td><td>可私有缓存，客户端可以缓存，代理层不能缓存（CDN，proxy_pass）</td></tr><tr><td>no-cache</td><td>请求头</td><td>可以使用本地缓存，但是必须发送请求到服务器回源验证</td></tr><tr><td>no-store</td><td>请求和响应</td><td>应禁用缓存</td></tr><tr><td>max-age</td><td>请求和响应</td><td>文件可以在浏览器中缓存的时间以秒为单位</td></tr><tr><td>s-maxage</td><td>请求和响应</td><td>用户代理层缓存，CDN下发，当客户端数据过期时会重新校验</td></tr><tr><td>max-stale</td><td>请求和响应</td><td>缓存最大使用时间，如果缓存过期，但还在这个时间范围内则可以使用缓存数据</td></tr><tr><td>min-fresh</td><td>请求和响应</td><td>缓存最小使用时间，</td></tr><tr><td>must-revalidate</td><td>请求和响应</td><td>当缓存过期后，必须回源重新请求资源。比no-cache更严格。因为HTTP 规范是允许客户端在某些特殊情况下直接使用过期缓存的，比如校验请求发送失败的时候。那么带有must-revalidate的缓存必须校验，其他条件全部失效。</td></tr><tr><td>proxy-revalidate</td><td>请求和响应</td><td>和must-revalidate类似，只对CDN这种代理服务器有效，客户端遇到此头，需要回源验证</td></tr><tr><td>stale-while-revalidate</td><td>响应</td><td>表示在指定时间内可以先使用本地缓存，后台进行异步校验</td></tr><tr><td>stale-if-error</td><td>响应</td><td>在指定时间内，重新验证时返回状态码为5XX的时候，可以用本地缓存</td></tr><tr><td>only-if-cached</td><td>响应</td><td>那么只使用缓存内容，如果没有缓存 则504 getway timeout</td></tr></tbody></table><p>Expires过期时间，现在一般用<strong>Cache-Control</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">expires</span> <span class="number">30s</span>;   <span class="comment">#缓存30秒</span></span><br><span class="line"><span class="attribute">expires</span> <span class="number">30m</span>;   <span class="comment">#缓存30分钟   </span></span><br><span class="line"><span class="attribute">expires</span> <span class="number">2h</span>;     <span class="comment">#缓存2小时</span></span><br><span class="line"><span class="attribute">expires</span> <span class="number">30d</span>;    <span class="comment">#缓存30天</span></span><br></pre></td></tr></table></figure><p><strong>强制缓存与协商缓存总结</strong></p><ul><li>cache-control expires 强制缓存</li></ul><p>页面首次打开，直接读取缓存数据，刷新，会向服务器发起请求</p><ul><li>etag lastmodify  协商缓存</li></ul><p>没发生变化 返回304 不发送数据<br>![](<a href="https://img-blog.csdnimg.cn/img_convert/6dd67074c2f952344611a882fc53fa86.jpeg#clientId=ubd9e63cc-9837-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uf9446d2a&amp;margin=" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/img_convert/6dd67074c2f952344611a882fc53fa86.jpeg#clientId=ubd9e63cc-9837-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uf9446d2a&amp;margin=</a>[object Object]&amp;originHeight=476&amp;originWidth=500&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u736da398-3ade-49b1-a9a4-c2c97ac46d2&amp;title=)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="comment"># 协商缓存</span></span><br><span class="line">  <span class="comment"># 关掉etag校验</span></span><br><span class="line">  <span class="comment"># etag off;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 设置下面的每次就会刷新</span></span><br><span class="line">  <span class="comment"># if_modified_since off;</span></span><br><span class="line">  <span class="comment"># add_header Last-Modified "";</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 强制缓存</span></span><br><span class="line">  <span class="comment"># expires 30s;</span></span><br><span class="line">  <span class="comment"># add_header cache-control "max-age:300";</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、浏览器缓存原则">4、浏览器缓存原则</h2><ul><li>多级集群负载时last-modified必须保持一致</li><li>还有一些场景下我们希望禁用浏览器缓存。比如轮训api上报数据数据</li><li>浏览器缓存很难彻底禁用，大家的做法是加版本号，随机数等方法。</li><li>只缓存200响应头的数据，像3XX这类跳转的页面不需要缓存。</li><li>对于js，css这类可以缓存很久的数据，可以通过加版本号的方式更新内容</li><li>不需要强一致性的数据，可以缓存几秒</li><li>异步加载的接口数据，可以使用ETag来校验。</li><li>在服务器添加Server头，有利于排查错误</li><li>分为手机APP和Client以及是否遵循http协议</li><li>在没有联网的状态下可以展示数据</li><li>流量消耗过多</li><li>提前下发  避免秒杀时同时下发数据造成流量短时间暴增</li><li>兜底数据 在服务器崩溃和网络不可用的时候展示</li><li>临时缓存  退出即清理</li><li>固定缓存  展示框架这种，可能很长时间不会更新，可用随客户端下发</li><li><strong>首页</strong>有的时候可以看做是框架 应该禁用缓存，以保证加载的资源都是最新的</li><li>父子连接 页面跳转时有一部分内容不需要重新加载，可用从父菜单带过来</li><li>预加载     某些逻辑可用判定用户接下来的操作，那么可用异步加载那些资源</li><li>漂亮的加载过程 异步加载 先展示框架，然后异步加载内容，避免主线程阻塞</li></ul><h2 id="5、GEOip">5、GEOip</h2><blockquote><p>Geo是geographic的缩写，意思是地理的，GeoIP即为IP地理位置数据库，可以根据IP获得地理位置信息，这样就可以进一步加快用户的访问速度。（现在不怎么使用，现在可以使用DNS配置）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网需注册登录</span></span><br><span class="line"><span class="comment"># 下载数据库</span></span><br><span class="line">maxmind.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">https://github.com/maxmind/libmaxminddb</span><br><span class="line"><span class="comment"># 下载后执行编译安装之后</span></span><br><span class="line"><span class="built_in">echo</span> /usr/<span class="built_in">local</span>/lib  &gt;&gt; /etc/ld.so.conf.d/local.conf </span><br><span class="line">ldconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx模块</span></span><br><span class="line">https://github.com/leev/ngx_http_geoip2_module</span><br><span class="line"><span class="comment"># 更完整的配置可参考官方文档</span></span><br><span class="line">http://nginx.org/en/docs/http/ngx_http_geoip_module.html<span class="comment">#geoip_proxy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx配置</span></span><br><span class="line">geoip2 /root/GeoLite2-ASN_20220524/GeoLite2-ASN.mmdb &#123;</span><br><span class="line">    <span class="variable">$geoip2_country_code</span> country iso_code;</span><br><span class="line">&#125;</span><br><span class="line">add_header country <span class="variable">$geoip2_country_code</span>;</span><br></pre></td></tr></table></figure><h2 id="6、正向代理">6、正向代理</h2><blockquote><p>基于nginx的正向代理，在服务器A搭建一个代理服务器，使得BC可以通过服务器A的nginx 代理进行访问外网<br>代理https请求需要第三方模块：<a href="https://github.com/chobits/ngx_http_proxy_connect_module" target="_blank" rel="noopener">https://github.com/chobits/ngx_http_proxy_connect_module</a></p></blockquote><p>http正向代理配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_pass</span> <span class="variable">$scheme</span>://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line"><span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;</span><br></pre></td></tr></table></figure><p>https正向代理配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>                         <span class="number">3128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># dns resolver used by forward proxying</span></span><br><span class="line">    <span class="attribute">resolver</span>                       <span class="number">8.8.8.8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># forward proxy for CONNECT request</span></span><br><span class="line">    proxy_connect;</span><br><span class="line">    <span class="attribute">proxy_connect_allow</span>            <span class="number">443</span> <span class="number">563</span>;</span><br><span class="line">    <span class="attribute">proxy_connect_connect_timeout</span>  <span class="number">10s</span>;</span><br><span class="line">    <span class="attribute">proxy_connect_read_timeout</span>     <span class="number">10s</span>;</span><br><span class="line">    <span class="attribute">proxy_connect_send_timeout</span>     <span class="number">10s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># forward proxy for non-CONNECT request</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://<span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、反向代理缓存">7、反向代理缓存</h2><h3 id="7-1-proxy缓存">7.1 proxy缓存</h3><blockquote><p>官方文档：<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache</a></p></blockquote><p>反向代理和正向代理都可以使用缓存，但是使用这个缓存后就不会在去访问上游服务器，因此要考虑好缓存与更新的问题</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#http模块</span></span><br><span class="line"><span class="comment"># /ngx_tmp表示目录，levels代表层级，keys_zone表示缓存名称（100m表示在内存中的哈希索引，加速访问）</span></span><br><span class="line"><span class="comment"># inactive表示存储时间，max_size表示存储大小</span></span><br><span class="line"><span class="attribute">proxy_cache_path</span> /ngx_tmp levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=test_cache:<span class="number">100m</span> inactive=<span class="number">1d</span> max_size=<span class="number">10g</span> ;</span><br><span class="line"><span class="comment">#location模块：</span></span><br><span class="line"><span class="comment"># 表示缓存有没有命中</span></span><br><span class="line"><span class="attribute">add_header</span>  Nginx-Cache <span class="string">"<span class="variable">$upstream_cache_status</span>"</span>;</span><br><span class="line"><span class="attribute">proxy_cache</span> test_cache;</span><br><span class="line"><span class="comment"># 请求过期时间，没有这个每次都会请求</span></span><br><span class="line"><span class="attribute">proxy_cache_valid</span> <span class="number">1h</span>;</span><br></pre></td></tr></table></figure><h3 id="7-2-缓存的清理">7.2 缓存的清理</h3><blockquote><p><strong>purger</strong>需要第三方模块支持：<a href="https://github.com/FRiCKLE/ngx_cache_purge" target="_blank" rel="noopener">https://github.com/FRiCKLE/ngx_cache_purge</a></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /purge(/.*)</span> &#123;</span><br><span class="line">  <span class="comment"># 这是之前的cache $1是uri</span></span><br><span class="line">  <span class="attribute">proxy_cache_purge</span>  test_cache  <span class="variable">$1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 自定义cachekey</span></span><br><span class="line"><span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>proxy_cache_key</strong></li></ul><p>默认<code>$scheme$proxy_host$request_uri</code>；缓存的key</p><ul><li><strong>proxy_cache_revalidate</strong></li></ul><p>如果缓存过期了，向上游服务器发送“If-Modified-Since” and “If-None-Match来验证是否改变，如果没有就不需要重新下载资源了</p><ul><li><strong>proxy_cache_valid</strong></li></ul><p>可以针对不容http状态码设置缓存过期时间；不设置状态码会默认200, 301, 302</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_valid 200 302 10m;</span><br><span class="line">proxy_cache_valid 301      1h;</span><br><span class="line"><span class="comment"># any指其他任意状态码</span></span><br><span class="line">proxy_cache_valid any      1m;</span><br></pre></td></tr></table></figure><h3 id="7-3-断点续传缓存-range">7.3 断点续传缓存 range</h3><p>在Headers里添加<code>Range bytes=0-10</code>可以截取部分数据，返回206。当有完整的content-length之后即可断点续传，在反向代理服务器中需向后传递header</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># proxy_cache_key中增加range</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Range <span class="variable">$http_range</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># range最大值，超过之后不做缓存，默认情况下 不需要对单文件较大的资源做缓存</span></span><br><span class="line">proxy_cache_max_range_offset</span><br></pre></td></tr></table></figure><h3 id="7-4-一些功能参数">7.4 一些功能参数</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认 head get</span></span><br><span class="line">proxy_cache_methods</span><br><span class="line"><span class="comment"># 默认1，被请求多少次之后才做缓存</span></span><br><span class="line">proxy_cache_min_uses</span><br><span class="line"><span class="comment"># path 指定存储目录，以cache_key取md5值</span></span><br><span class="line">proxy_cache_path</span><br><span class="line"><span class="comment"># 目录层级数及目录名称位数,取mdb5后几位</span></span><br><span class="line">levels=1:2</span><br><span class="line"><span class="comment">#默认创建缓存文件时，先向缓冲区创建临时文件，再移动到缓存目录,是否使用缓冲区</span></span><br><span class="line">use_temp_path</span><br><span class="line"><span class="comment"># 指定时间内未被访问过的缓存将被删除</span></span><br><span class="line">inactive</span><br></pre></td></tr></table></figure><ul><li><strong>proxy_cache_use_stale</strong></li></ul><p>默认off，在什么时候可以使用过期缓存<br>可选<code>error</code> | <code>timeout</code> | <code>invalid_header</code> | <code>updating</code> | <code>http_500</code> | <code>http_502</code> | <code>http_503</code> | <code>http_504</code> | <code>http_403</code> | <code>http_404</code> | <code>http_429</code> | <code>off</code></p><ul><li><strong>proxy_cache_background_update</strong></li></ul><p>默认off，运行开启子请求更新过期的内容。同时会把过期的内容返回给客户端</p><ul><li><strong>proxy_no_cache</strong>  <strong>proxy_cache_bypass</strong></li></ul><p>指定什么时候不使用缓存而直接请求上游服务器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_no_cache</span> <span class="variable">$cookie_nocache</span> <span class="variable">$arg_nocache</span><span class="variable">$arg_comment</span>;</span><br><span class="line"><span class="attribute">proxy_no_cache</span> <span class="variable">$http_pragma</span>    <span class="variable">$http_authorization</span>;</span><br></pre></td></tr></table></figure><p>如果这些变量如果存在的话不为空或者不等于0，则不使用缓存</p><ul><li><strong>proxy_cache_convert_head</strong></li></ul><p>默认 on，是否把head请求转换成get请求后再发送给上游服务器 以便缓存body里的内容。如果关闭 需要在 cache key 中添加 $request_method 以便区分缓存内容</p><ul><li><strong>proxy_cache_lock</strong></li></ul><p>默认off，缓存更新锁</p><ul><li><strong>proxy_cache_lock_age</strong></li></ul><p>默认5s，缓存锁超时时间</p><h2 id="8、其他">8、其他</h2><ul><li>Nginx内存缓存</li><li>外置内存缓存</li><li>上游服务器应用缓存</li></ul><h1>四、Nginx其他缓存</h1><h2 id="1、Nginx-文件元数据缓存">1、Nginx 文件元数据缓存</h2><h3 id="1-1-Strace内核执行过程追踪">1.1  Strace内核执行过程追踪</h3><p>strace一般应用为静态文件元数据信息缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找nginx进程</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"><span class="comment"># 找到work进程进行监听</span></span><br><span class="line">strace -p [worker进程号]</span><br></pre></td></tr></table></figure><p>sendfile执行过程结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[&#123;EPOLLIN, &#123;u32=2648526864, u64=139941272965136&#125;&#125;], 512, -1) = 1</span><br><span class="line">accept4(7, &#123;sa_family=AF_INET, sin_port=htons(8163), sin_addr=inet_addr(<span class="string">"221.12.170.99"</span>)&#125;, [112-&gt;16], SOCK_NONBLOCK) = 9</span><br><span class="line">epoll_ctl(11, EPOLL_CTL_ADD, 9, &#123;EPOLLIN|EPOLLRDHUP|EPOLLET, &#123;u32=2648527345, u64=139941272965617&#125;&#125;) = 0</span><br><span class="line">epoll_wait(11, [&#123;EPOLLIN, &#123;u32=2648527345, u64=139941272965617&#125;&#125;], 512, 60000) = 1</span><br><span class="line">recvfrom(9, <span class="string">"GET / HTTP/1.1\r\nHost: 121.199.16"</span>..., 1024, 0, NULL, NULL) = 542</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">"/etc/nginx/html/index.html"</span>, &#123;st_mode=S_IFREG|0644, st_size=292, ...&#125;) = 0</span><br><span class="line">openat(AT_FDCWD, <span class="string">"/etc/nginx/html/index.html"</span>, O_RDONLY|O_NONBLOCK) = 14</span><br><span class="line">fstat(14, &#123;st_mode=S_IFREG|0644, st_size=292, ...&#125;) = 0</span><br><span class="line">writev(9, [&#123;iov_base=<span class="string">"HTTP/1.1 200 OK\r\nServer: nginx/1"</span>..., iov_len=233&#125;], 1) = 233</span><br><span class="line">sendfile(9, 14, [0] =&gt; [292], 292)      = 292</span><br><span class="line">write(6, <span class="string">"221.12.170.99 - - [08/Jul/2022:0"</span>..., 194) = 194</span><br><span class="line">close(14)                               = 0</span><br><span class="line">close(9)                                = 0</span><br><span class="line">epoll_wait(11,</span><br></pre></td></tr></table></figure><h3 id="1-2-open-file-cache配置优化">1.2  open_file_cache配置优化</h3><p><strong>sendfile = off <strong>时，应用程序读取磁盘中的文件以字节流的形式从磁盘中加载文件，然后再将文件以字节流的形式复制到内核中。内核在把文件推送到NC；<br><strong>sendfile = on</strong> 时，应用程序直接向内核发送指令，让内核去读文件。读完文件内核直接推送给NC。只有一次复制操作，实现异步网络IO形式。因此，性能会有很大的提升。具体还要根据实际使用情况来配置sendfile。当读取服务不能解析大量的文件时。还是建议将sendfile配置为off。<strong>open_file_cache</strong>需要和</strong>sendfile</strong>配合使用，他会告诉 Nginx 去缓存打开的文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打开零拷贝，位置可以在http/server/location</span></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">  </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">      <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="attribute">location</span> / &#123;</span><br><span class="line">      </span><br><span class="line">          <span class="comment"># max缓存最大数量，超过数量后会使用LRU淘汰；inactive指定时间内未被访问过的缓存将被删除</span></span><br><span class="line">          <span class="attribute">open_file_cache</span> max=<span class="number">500</span> inactive=<span class="number">60s</span></span><br><span class="line">          <span class="comment"># 被访问到多少次后会开始缓存</span></span><br><span class="line">          open_file_cache_min_uses <span class="number">1</span>; </span><br><span class="line">          <span class="comment"># 间隔多长时间去检查文件是否有变化</span></span><br><span class="line">          <span class="attribute">open_file_cache_valid</span> <span class="number">60s</span>; </span><br><span class="line">          <span class="comment"># 对错误信息是否缓存</span></span><br><span class="line">          <span class="attribute">open_file_cache_errors</span> <span class="literal">on</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Nginx外置缓存">2、Nginx外置缓存</h2><h3 id="2-1-error-page错误码">2.1  error_page错误码</h3><p>nginx的error_page的作用是当发生错误的时候能够显示一个预定义的uri</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 放在server里</span></span><br><span class="line"><span class="comment"># 指定状态码，注意空格</span></span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> =<span class="number">302</span> http://www.shawn22.xyz;</span><br><span class="line"><span class="comment"># 默认指向location</span></span><br><span class="line"><span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line"><span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">  <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-匿名location">2.2 匿名location</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> = <span class="variable">@anonymous</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="variable">@anonymous</span>&#123;</span><br><span class="line">  <span class="comment"># 告诉浏览器是文本，显示出来，不加就变成文件了</span></span><br><span class="line">  <span class="attribute">add_header</span> content-type <span class="string">"text/html"</span>;</span><br><span class="line">  <span class="comment"># 返回200，返回文本</span></span><br><span class="line">  <span class="attribute">return</span> <span class="number">200</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-nginx-memcached">2.3 nginx + memcached</h3><p>参考文档：<a href="http://nginx.org/en/docs/http/ngx_http_memcached_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_memcached_module.html</a></p><blockquote><p>nginx的memcached_module模块可以直接从memcached服务器中读取内容后输出，后续的请求不再经过应用程序处理，如php-fpm、django，大大的提升动态页面的速度。nginx只负责从memcached服务器中读取数据，要往memcached写入数据丕得需要后台的应用程序来完成，主动的将要缓存的页面缓存到memcached中，可以通过404重定向到后端去处理的。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5751be2c4eb041c68961eb685fbb95a9.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu安装</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install memcached libmemcached-tools</span><br><span class="line"></span><br><span class="line">sudo systemctl status memcached</span><br><span class="line">sudo nano /etc/memcached.conf</span><br><span class="line">sudo systemctl restart memcached</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos安装</span></span><br><span class="line">yum -y install memcached</span><br><span class="line"><span class="comment"># 默认配置文件在/etc/sysconfig/memcached</span></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">memcached-tool 127.0.0.1:11211  stats</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">telnet 127.0.0.1 11211</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">stats</span><br><span class="line"><span class="comment"># key 元数据 过期时间 字节数</span></span><br><span class="line"><span class="built_in">set</span> name 0 0 3</span><br><span class="line">get name</span><br></pre></td></tr></table></figure><p>nginx配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> tomcat-web &#123;</span><br><span class="line">   <span class="attribute">keepalive_timeout</span> <span class="number">1000</span>;</span><br><span class="line">   <span class="attribute">keepalive</span> <span class="number">100</span>;</span><br><span class="line">   <span class="attribute">keepalive_requests</span> <span class="number">100</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="attribute">server</span> tomcat01:<span class="number">8080</span>  weight=<span class="number">100</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">15</span>;</span><br><span class="line">   <span class="attribute">server</span> tomcat02:<span class="number">8080</span>  weight=<span class="number">100</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">set</span> <span class="variable">$memcached_key</span> <span class="variable">$uri</span>;</span><br><span class="line">      <span class="attribute">memcached_pass</span> <span class="number">127.0.0.1:11211</span>;</span><br><span class="line">      <span class="attribute">add_header</span> X-Cache-Satus HIT;</span><br><span class="line">      <span class="attribute">add_header</span> Content-Type <span class="string">'text/html; charset=utf-8'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> = <span class="variable">@fallback</span>;</span><br><span class="line"><span class="attribute">location</span> <span class="variable">@fallback</span>&#123;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> content-type <span class="string">"text/html"</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://tomcat-web;</span><br><span class="line"><span class="comment">#return 200 "hello world";</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Nginx-Redis">2.4 Nginx+Redis</h3><p>参考文档（很详细）：<a href="https://www.nginx.com/resources/wiki/modules/redis2/" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/modules/redis2/</a></p><blockquote><p>redis2-nginx-module是一个支持 Redis 2.0 协议的 Nginx upstream 模块，它可以让 Nginx 以非阻塞方式直接防问远方的 Redis 服务，同时支持 TCP 协议和 Unix Domain Socket 模式，并且可以启用强大的 Redis 连接池功能，需要添加编译<br><a href="https://github.com/openresty/redis2-nginx-module" target="_blank" rel="noopener">https://github.com/openresty/redis2-nginx-module</a></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 具体的可以看文档，很详细</span></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line"><span class="attribute">location</span> = /foo &#123;</span><br><span class="line"><span class="attribute">default_type</span> text/html;</span><br><span class="line">     <span class="attribute">redis2_query</span> auth <span class="number">123123</span>;</span><br><span class="line">     <span class="attribute">set</span> <span class="variable">$value</span> <span class="string">'first'</span>;</span><br><span class="line">     <span class="attribute">redis2_query</span> set one <span class="variable">$value</span>;</span><br><span class="line">     <span class="attribute">redis2_pass</span> <span class="number">192.168.199.161:6379</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># get</span></span><br><span class="line"><span class="attribute">location</span> = /get &#123;</span><br><span class="line"><span class="attribute">default_type</span> text/html;</span><br><span class="line">     <span class="attribute">redis2_pass</span> <span class="number">192.168.199.161:6379</span>;</span><br><span class="line">     <span class="attribute">redis2_query</span> auth <span class="number">123123</span>;</span><br><span class="line">     <span class="attribute">set_unescape_uri</span> <span class="variable">$key</span> <span class="variable">$arg_key</span>;  <span class="comment"># this requires ngx_set_misc</span></span><br><span class="line">     <span class="attribute">redis2_query</span> get <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># GET /set?key=one&amp;val=first%20value</span></span><br><span class="line"><span class="attribute">location</span> = /set &#123;</span><br><span class="line">     <span class="attribute">default_type</span> text/html;</span><br><span class="line">     <span class="attribute">redis2_pass</span> <span class="number">192.168.199.161:6379</span>;</span><br><span class="line">     <span class="attribute">redis2_query</span> auth <span class="number">123123</span>;</span><br><span class="line">     <span class="attribute">set_unescape_uri</span> <span class="variable">$key</span> <span class="variable">$arg_key</span>;  <span class="comment"># this requires ngx_set_misc</span></span><br><span class="line">     <span class="attribute">set_unescape_uri</span> <span class="variable">$val</span> <span class="variable">$arg_val</span>;  <span class="comment"># this requires ngx_set_misc</span></span><br><span class="line">     <span class="attribute">redis2_query</span> set <span class="variable">$key</span> <span class="variable">$val</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># pipeline</span></span><br><span class="line"><span class="attribute">location</span> = /set &#123;</span><br><span class="line">     <span class="attribute">set</span> <span class="variable">$value</span> <span class="string">'first'</span>;</span><br><span class="line">     <span class="attribute">redis2_query</span> set one <span class="variable">$value</span>;</span><br><span class="line">     <span class="attribute">redis2_query</span> get one;</span><br><span class="line">     <span class="attribute">redis2_query</span> set one two;</span><br><span class="line">     <span class="attribute">redis2_query</span> get one;</span><br><span class="line">     <span class="attribute">redis2_query</span> del key1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群</span></span><br><span class="line"><span class="attribute">upstream</span> redis_cluster &#123;</span><br><span class="line">     <span class="attribute">server</span> <span class="number">192.168.199.161:6379</span>;</span><br><span class="line">     <span class="attribute">server</span> <span class="number">192.168.199.161:6379</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="attribute">location</span> = /redis &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">default_type</span> text/html;</span><br><span class="line">      <span class="attribute">redis2_next_upstream</span> <span class="literal">error</span> timeout invalid_response;</span><br><span class="line">      <span class="attribute">redis2_query</span> get foo;</span><br><span class="line">      <span class="attribute">redis2_pass</span> redis_cluster;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Stream模块">3、Stream模块</h2><blockquote><p>参考文档：<a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/stream/ngx_stream_core_module.html</a><br>nginx支持了四层代理，即传输层，就是我们常说的TCP/UDP层，没有协议解析，就是简单的TCP/UDP转发，该功能依赖于<code>ngx_http_upstream_module</code>和<code>ngx_stream_upstream_module</code>，互联网公司将其作为入口代理来工作</p></blockquote><h3 id="3-1-Nginx配置Mysql负载均衡">3.1 Nginx配置Mysql负载均衡</h3><p>Mysql集群跨域通过Mycat代理，也可以通过Nginx代理 ，Mysql透明化多主高可用，负载均衡，这样应用就无法感知服务端机器数量，首先要编译Stream模块</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和http块同级</span></span><br><span class="line">stream&#123;</span><br><span class="line"> <span class="attribute">upstream</span> mysql&#123;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.1.10:3306</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.1.11:3306</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  server&#123;</span><br><span class="line">   <span class="attribute">listen</span> <span class="number">3306</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> mysql;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Nginx扩容&lt;/h1&gt;
&lt;h2 id=&quot;1、前言&quot;&gt;1、前言&lt;/h2&gt;
&lt;p&gt;扩容包括&lt;strong&gt;单机垂直扩容&lt;/strong&gt;和&lt;strong&gt;水平扩展&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;2、单机垂直扩容：硬件资源增加&quot;&gt;2、单机垂直扩容：硬件资源增加&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;云服务资源增加&lt;/li&gt;
&lt;li&gt;整机：IBM、浪潮、DELL、HP等&lt;/li&gt;
&lt;li&gt;CPU/主板：更新到主流&lt;/li&gt;
&lt;li&gt;网卡：10G/40G网卡&lt;/li&gt;
&lt;li&gt;磁盘：SAS(SCSI) HDD（机械）、HHD（混合）、SATA SSD、PCI-e SSD、 MVMe SSD&lt;/li&gt;
&lt;li&gt;SSD&lt;/li&gt;
&lt;li&gt;多副本机制&lt;/li&gt;
&lt;li&gt;系统盘/热点数据/数据库存储&lt;/li&gt;
&lt;li&gt;HDD&lt;/li&gt;
&lt;li&gt;冷数据存储&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://www.shawn22.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySql8.0阻塞报错Too many connections及连接超时</title>
    <link href="https://www.shawn22.xyz/posts/8b59da55.html"/>
    <id>https://www.shawn22.xyz/posts/8b59da55.html</id>
    <published>2022-06-28T13:22:18.000Z</published>
    <updated>2022-07-11T12:06:49.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、问题描述">1、问题描述</h2><p>公网Ubuntu服务器运行Mysql服务，打算跑Web服务，一段时间后，发现Spring后端报错<strong>Data source rejected establishment of connection,  message from server: “Too many connections”</strong>，并且无法返回数据库信息</p><a id="more"></a><h2 id="2、原因分析">2、原因分析</h2><p>默认的mysql没有进行过优化，默认超时时间是28800秒，即8小时，而mysql的最大连接数默认是151个(上限为1000)，当<strong>查询数量大于其最大连接数且没有超过默认时间</strong>时，后面的请求将无法响应，即会返回<strong>Too many connections</strong>错误信息，此时查询数据库<code>show full processlist;</code>可以发现大量的连接处于sleep状态</p><p><img src="https://img-blog.csdnimg.cn/8f851d2de74b42beaf999998c12f1639.png" alt="请添加图片描述"></p><p><strong>sleep休眠状态的连接过多，则应该从两方面注意:</strong></p><ul><li><p><code>wait_timeout</code>：mysql在关闭一个非交互的连接(通过jdbc连接数据库是非交互式连接 )之前要等待的秒数 , 默认是28800s , 设置过大有弊端，其体现就是MySQL里大量的SLEEP进程无法及时释放，拖累系统性能。如果设置过小，可能会遭遇到“MySQL has gone away”之类的问题</p></li><li><p><code>interactive_timeout</code>：交互超时时间（通过mysql客户端连接数据库是交互式连接）</p></li></ul><p><strong>max_connections最大连接数也需要注意</strong>：</p><ul><li><p>对于mysql服务器最大连接数值的设置范围比较理想的是：服务器使用的最大连接数值占服务器上限连接数值的比例值在10%以上，如果在10%以下，说明mysql服务器最大连接上限值设置过高。</p></li><li><p>max_used_connections / max_connections * 100% （理想值≈ 85%） </p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看mysql当前连接信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> <span class="keyword">PROCESSLIST</span></span><br><span class="line"><span class="comment">-- 查看有关timeout的变量</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"%timeout%"</span>;</span><br><span class="line"><span class="comment">-- 查看有关最大连接数的变量</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%max_connections%'</span>;</span><br><span class="line"><span class="comment">-- 查看当前最大连接使用数</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Max_used_connections'</span>;</span><br></pre></td></tr></table></figure><h2 id="3、解决方法">3、解决方法</h2><ul><li><p><strong>全局变量修改(修改的是内存配置，重启后会失效)</strong></p></li><li><p><strong>配置文件修改(要重启mysql，是永久修改)</strong></p></li></ul><h3 id="3-1-全局变量修改">3.1 全局变量修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> interactive_timeout=<span class="number">15</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> wait_timeout=<span class="number">15</span>;</span><br><span class="line"><span class="keyword">set</span> max_connections=<span class="number">1000</span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-配置文件修改">3.2 配置文件修改</h3><p>第一种传统方式进行修改(还是比较推荐的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改文件内容，没有的话就添加</span></span><br><span class="line">max_connections=1000</span><br><span class="line">interactive_timeout=15</span><br><span class="line">wait_timeout=15</span><br><span class="line"></span><br><span class="line"><span class="comment">#最后重启服务，发现成功修改</span></span><br><span class="line">systemctl restart mysql.service</span><br></pre></td></tr></table></figure><p>第二种是Mysql8新方法，对于持久化变量的值，可以通过命令行的方式持久化，这种方式保存的配置文件信息默认存放在<code>/var/lib/mysql/mysqld-auto.cnf</code>。</p><p>set global，set persist更改运行时变量值，但也将变量设置写入<code>mysqld-auto.cnf</code>数据目录中指定的选项文件。数据库启动时，会首先读取其它配置文件，最后才读取<code>mysqld-auto.cnf</code>文件。所以不建议手动修改该文件，其有可能导致数据库在启动过程中因解析错误而失败。如果出现这种情况，可手动删除<code>mysqld-auto.cnf</code>文件或将<code>persisted_globals_load</code>变量设置为off来避免该文件的加载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> persist max_connections=500 ;</span><br><span class="line"><span class="comment">#persist 不仅修改了内存中的值，还会持久化到配置⽂件中</span></span><br><span class="line"><span class="built_in">set</span> @@persist.max_connections=500 ;</span><br><span class="line"><span class="comment">#效果同上</span></span><br><span class="line"><span class="built_in">set</span> persist max_connections=default ;</span><br><span class="line"><span class="comment">#可以设置为变量为默认值</span></span><br><span class="line"><span class="built_in">set</span> persist_only back_log=500 ;</span><br><span class="line"><span class="comment">#persist_only 只会将全局变量持久化到配置文件中，不会修改内存中的值</span></span><br><span class="line"><span class="built_in">set</span> @@persist_only.back_log=500 ;</span><br><span class="line"><span class="comment">#效果同上</span></span><br><span class="line"><span class="built_in">set</span> persist_only back_log=1000 ,persist max_connections=2000 ;</span><br><span class="line"><span class="comment">#同时设置多个变量的值</span></span><br><span class="line">select * from performances_chema.persisted_variables ;</span><br><span class="line"><span class="comment">#查看已持久化的参数</span></span><br><span class="line">reset persist back_log ;</span><br><span class="line"><span class="comment">#清除指定的已持久化的变量</span></span><br><span class="line">reset persist <span class="keyword">if</span> exists back_log ;</span><br><span class="line"><span class="comment">#清除指定的变量，如果变量没在持久化配置文件里，那么就会告警，而不是报错（幂等操作）</span></span><br><span class="line">reset persist ;</span><br><span class="line"><span class="comment">#清除所有的已持久化的变量</span></span><br></pre></td></tr></table></figure><p>参考</p><hr><p><a href="https://segmentfault.com/a/1190000022974316" target="_blank" rel="noopener" title="https://segmentfault.com/a/1190000022974316">https://segmentfault.com/a/1190000022974316</a></p><p><a href="https://blog.csdn.net/qq_31459039/article/details/117935325" target="_blank" rel="noopener" title="https://blog.csdn.net/qq_31459039/article/details/117935325">https://blog.csdn.net/qq_31459039/article/details/117935325</a></p><p><a href="https://www.4spaces.org/how-to-set-max-connections-in-mysql/" target="_blank" rel="noopener" title="https://www.4spaces.org/how-to-set-max-connections-in-mysql/">https://www.4spaces.org/how-to-set-max-connections-in-mysql/</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、问题描述&quot;&gt;1、问题描述&lt;/h2&gt;
&lt;p&gt;公网Ubuntu服务器运行Mysql服务，打算跑Web服务，一段时间后，发现Spring后端报错&lt;strong&gt;Data source rejected establishment of connection,  message from server: “Too many connections”&lt;/strong&gt;，并且无法返回数据库信息&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SQL" scheme="https://www.shawn22.xyz/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j图数据库入门笔记</title>
    <link href="https://www.shawn22.xyz/posts/c22ab4c6.html"/>
    <id>https://www.shawn22.xyz/posts/c22ab4c6.html</id>
    <published>2022-06-28T13:20:38.000Z</published>
    <updated>2022-07-11T12:06:49.313Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Neo4j介绍</h1><h2 id="1、图数据库介绍">1、图数据库介绍</h2><h3 id="1-1-简介">1.1 简介</h3><blockquote><p>随着社交、电商、金融、零售、物联网等行业的快速发展，现实社会织起了了一张庞大而复杂的关系网，传统数据库很难处理关系运算。大数据行业需要处理的数据之间的关系随数据量呈几何级数增长，急需一种支持海量复杂数据关系运算的数据库，图数据库应运而生</p></blockquote><p>图数据库是基于图论实现的一种NoSQL数据库，其数据存储结构和数据查询方式都是以图论为基础的，图数据库主要用于存储更多的连接数据。</p><a id="more"></a><h3 id="1-2-对比关系型数据库">1.2 对比关系型数据库</h3><table><thead><tr><th><strong>关系型数据库（RDBMS）</strong></th><th><strong>图数据库</strong></th></tr></thead><tbody><tr><td>表</td><td>图</td></tr><tr><td>行</td><td>节点</td></tr><tr><td>列和数据</td><td>属性和数据</td></tr><tr><td>约束</td><td>关系</td></tr></tbody></table><h3 id="1-3-对比其他NoSQL数据库">1.3 对比其他NoSQL数据库</h3><table><thead><tr><th><strong>分类</strong></th><th><strong>数据模型</strong></th><th><strong>优势</strong></th><th><strong>劣势</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>键值数据库</td><td>哈希表</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td><td>Redis</td></tr><tr><td>列存储数据库</td><td>列式数据存储</td><td>查找速度快；支持分布横向扩展；数据压缩率高</td><td>功能相对受限</td><td>HBase</td></tr><tr><td>文档型数据库</td><td>键值对扩展</td><td>数据结构要求不严格；表结构可变；不需要预先定义表结构</td><td>查询性能不高，缺乏统一的查询语法</td><td>MongoDB</td></tr><tr><td>图数据库</td><td>节点和关系组成的图</td><td>利用图结构相关算法(最短路径、节点度关系查找等)</td><td>可能需要对整个图做计算，不利于图数据分布存储</td><td>Neo4j、JanusGraph</td></tr></tbody></table><h2 id="2、Neo4j简介">2、Neo4j简介</h2><blockquote><p>Neo4j是一个开源的NoSQL图形数据库，2003 年开始开发，使用 scala和java 语言，2007年开始发布。是世界上最先进的图数据库之一，提供原生的图数据存储，检索和处理；采用属性图模型（Property graph model），极大的完善和丰富图数据模型；专属查询语言 Cypher，直观，高效；官网：<a href="https://neo4j.com/" target="_blank" rel="noopener" title="https://neo4j.com/">https://neo4j.com/</a></p></blockquote><p><strong>Neo4j的特性</strong></p><ul><li><p>SQL就像简单的查询语言Neo4j CQL</p></li><li><p>遵循属性图数据模型</p></li><li><p>通过使用Apache Lucence支持索引</p></li><li><p>支持UNIQUE约束</p></li><li><p>包含一个用于执行CQL命令的UI：Neo4j数据浏览器</p></li><li><p>支持完整的ACID（原子性，一致性，隔离性和持久性）规则</p></li><li><p>采用原生图形库与本地GPE（图形处理引擎）</p></li><li><p>支持查询的数据导出到JSON和XLS格式</p></li><li><p>提供了REST API，可以被任何编程语言（如Java，Spring，Scala等）访问</p></li><li><p>提供了可以通过任何UI MVC框架（如Node JS）访问的Java脚本</p></li><li><p>支持两种Java API：Cypher API和Native Java API来开发Java应用程序</p></li></ul><p><strong>Neo4j的优点</strong></p><ul><li><p>很容易表示连接的数据</p></li><li><p>检索/遍历/导航更多的连接数据是非常容易和快速的</p></li><li><p>非常容易地表示半结构化数据</p></li><li><p>Neo4j CQL查询语言命令是人性化的可读格式，非常容易学习</p></li><li><p>使用简单而强大的数据模型</p></li><li><p>不需要复杂的连接来检索连接的/相关的数据，因为它很容易检索它的相邻节点或关系细节没有连接或索引</p></li></ul><h2 id="3、Neo4j构建元素">3、Neo4j构建元素</h2><h3 id="3-1-节点">3.1 节点</h3><p>节点（Node)是图数据库中的一个基本元素，用来表示一个实体记录，就像关系数据库中的一条记录一样。在Neo4j中节点可以包含多个<strong>属性(Property)<strong>和</strong>多个标签(Label)</strong>。</p><ul><li><p>节点是主要的数据元素</p></li><li><p>节点通过关系连接到其他节点</p></li><li><p>节点可以具有一个或多个属性（即，存储为键/值对的属性）</p></li><li><p>节点有一个或多个标签，用于描述其在图表中的作用</p></li></ul><h3 id="3-2-属性">3.2 属性</h3><p>属性（Property）是用于描述图节点和关系的键值对。其中Key是一个字符串，值可以通过使用任何Neo4j数据类型来表示</p><ul><li><p>属性是命名值，其中名称（或键）是字符串</p></li><li><p>属性可以被索引和约束</p></li><li><p>可以从多个属性创建复合索引</p></li></ul><h3 id="3-3-关系">3.3 关系</h3><p>关系（Relationship）同样是图数据库的基本元素。当数据库中已经存在节点后，需要将节点连接起来构成图。关系就是用来连接两个节点，关系也称为图论的边(Edge) ,其始端和末端都必须是节点，关系不能指向空也不能从空发起。关系和节点一样可以包含多个属性，但关系只能有一个类型(Type) 。</p><ul><li><p>关系连接两个节点</p></li><li><p>关系是方向性的</p></li><li><p>节点可以有多个甚至递归的关系</p></li><li><p>关系可以有一个或多个属性（即存储为键/值对的属性）</p></li></ul><p>基于方向性，Neo4j关系被分为两种主要类型：</p><ul><li><p>单向关系</p></li><li><p>双向关系</p></li></ul><h3 id="3-4-标签">3.4 标签</h3><p>标签（Label）将一个公共名称与一组节点或关系相关联， 节点或关系可以包含一个或多个标签。 我们可以为现有节点或关系创建新标签， 我们可以从现有节点或关系中删除标签。标签用于将节点分组</p><ul><li><p>一个节点可以具有多个标签</p></li><li><p>对标签进行索引以加速在图中查找节点</p></li><li><p>本机标签索引针对速度进行了优化</p></li></ul><h2 id="4、使用场景">4、使用场景</h2><ul><li><p>欺诈检测</p></li><li><p>实时推荐引擎</p></li><li><p>知识图谱</p></li><li><p>反洗钱</p></li><li><p>主数据管理</p></li><li><p>供应链管理</p></li><li><p>增强网络和IT运营管理能力</p></li><li><p>数据谱系</p></li><li><p>身份和访问管理</p></li><li><p>材料清单</p></li><li><p>社交网络</p></li></ul><h1>二、Neo4j环境安装</h1><h2 id="1、直接安装Neo4j-Server">1、直接安装Neo4j Server</h2><blockquote><p>下载地址：<a href="https://neo4j.com/download-center/" target="_blank" rel="noopener" title="https://neo4j.com/download-center/">https://neo4j.com/download-center/</a><br>注意最新版4.x对应的是jdk11，jdk8的可以安装3.x，这里使用社区版(free)；另外推荐安装desktop版本</p></blockquote><p>下载完成后解压到新目录，注意不要有中文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将Neo4j作为控制台应用程序运行</span></span><br><span class="line">&lt;NEO4J_HOME&gt;\bin\neo4j console</span><br><span class="line"><span class="comment"># 将Neo4j作为服务使用进行安装</span></span><br><span class="line">&lt;NEO4J_HOME&gt;\bin\neo4j install-service</span><br><span class="line"></span><br><span class="line"><span class="comment">#console: 直接启动 neo4j 服务器</span></span><br><span class="line"><span class="comment">#install-service | uninstall-service | update-service ： 安装/卸载/更新 neo4j 服务start/stop/restart/status: 启动/停止/重启/状态</span></span><br><span class="line"><span class="comment">#-V 输出更多信息</span></span><br></pre></td></tr></table></figure><p>浏览器中访问<code>http://localhost:7474</code>。使用用户名neo4j和默认密码neo4j进行连接，然后会提示更改密码。Neo4j Browser是开发人员用来探索Neo4j数据库、执行Cypher查询并以表格或图形形式查看结果的工具。</p><h2 id="2、docker安装Neo4j-Server">2、docker安装Neo4j Server</h2><p>首先要注意端口的暴露</p><ul><li><p>HTTP：7474</p></li><li><p>HTTPS：7473</p></li><li><p>Bolt：7687</p></li></ul><p>普通docker部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name container_name \  //-d表示容器后台运行 --name指定容器名字</span><br><span class="line">  -p 7474:7474 -p 7687:7687 \  //映射容器的端口号到宿主机的端口号</span><br><span class="line">  -v /home/neo4j/data:/data \  //把容器内的数据目录挂载到宿主机的对应目录下</span><br><span class="line">  -v /home/neo4j/logs:/logs \  //挂载日志目录</span><br><span class="line">  -v /home/neo4j/conf:/var/lib/neo4j/conf   //挂载配置目录</span><br><span class="line">  -v /home/neo4j/import:/var/lib/neo4j/import \  //挂载数据导入目录</span><br><span class="line">  --env NEO4J_AUTH=neo4j/password \  //设定数据库的名字的访问密码</span><br><span class="line">  neo4j //指定使用的镜像</span><br></pre></td></tr></table></figure><p>docker-compose启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">neo4j:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">neo4j</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">neo4j:4.4.6-community</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'7474:7474'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'7687:7687'</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/neo4j/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/var/lib/neo4j/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf:/var/lib/neo4j/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mnt:/var/lib/neo4j/import</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">"json-file"</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">"50M"</span></span><br><span class="line">        <span class="attr">max-file:</span> <span class="string">"10"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NEO4J_AUTH=neo4j/123456</span></span><br></pre></td></tr></table></figure><h1>三、Neo4j - CQL使用</h1><h2 id="1、CQL简介">1、CQL简介</h2><blockquote><p>常用命令：<a href="https://neo4j.com/docs/cypher-manual/current/clauses/" target="_blank" rel="noopener" title="https://neo4j.com/docs/cypher-manual/current/clauses/">https://neo4j.com/docs/cypher-manual/current/clauses/</a></p></blockquote><p>Neo4j的Cypher语言是为处理图形数据而构建的，CQL代表Cypher查询语言。像Oracle数据库具有查询语言SQL，Neo4j具有CQL作为查询语言</p><ul><li><p>是Neo4j图形数据库的查询语言</p></li><li><p>是一种声明性模式匹配语言</p></li><li><p>遵循SQL语法</p></li><li><p>语法是非常简单且人性化、可读的格式</p></li></ul><table><thead><tr><th><strong>CQL命令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>CREATE</td><td>创建节点，关系和属性</td></tr><tr><td>MATCH</td><td>检索有关节点，关系和属性数据</td></tr><tr><td>RETURN</td><td>返回查询结果</td></tr><tr><td>WHERE</td><td>提供条件过滤检索数据</td></tr><tr><td>DELETE</td><td>删除节点和关系</td></tr><tr><td>REMOVE</td><td>删除节点和关系的属性</td></tr><tr><td>ORDER BY</td><td>排序检索数据</td></tr><tr><td>SET</td><td>添加或更新标签</td></tr></tbody></table><h2 id="2、CQL常用命令">2、CQL常用命令 </h2><p>首先初始化一个库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> (老九门:teleplay &#123;<span class="keyword">name</span>:<span class="string">'老九门'</span>,author:<span class="string">"南派三叔"</span>,bron:<span class="number">2016</span>&#125;)</span><br><span class="line"><span class="keyword">create</span> (盗墓笔记:teleplay &#123;<span class="keyword">name</span>:<span class="string">'盗墓笔记'</span>,author:<span class="string">"南派三叔"</span>,bron:<span class="number">2016</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (张启山:person &#123;<span class="keyword">name</span>:<span class="string">'张启山'</span>,actor:<span class="string">'陈伟霆'</span>,<span class="keyword">level</span>:<span class="string">'上三门'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (二月红:person &#123;<span class="keyword">name</span>:<span class="string">'二月红'</span>,actor:<span class="string">'张艺兴'</span>,<span class="keyword">level</span>:<span class="string">'上三门'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (半截李:person &#123;<span class="keyword">name</span>:<span class="string">'半截李'</span>,actor:<span class="string">'李乃文'</span>,<span class="keyword">level</span>:<span class="string">'上三门'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (陈皮阿四:person &#123;<span class="keyword">name</span>:<span class="string">'陈皮阿四'</span>,actor:<span class="string">'胡耘豪'</span>,<span class="keyword">level</span>:<span class="string">'平三门'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (吴老狗:person &#123;<span class="keyword">name</span>:<span class="string">'吴老狗'</span>,actor:<span class="string">'张鲁一'</span>,<span class="keyword">level</span>:<span class="string">'平三门'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (黑背老六:person &#123;<span class="keyword">name</span>:<span class="string">'黑背老六'</span>,actor:<span class="string">'李宗翰'</span>,<span class="keyword">level</span>:<span class="string">'平三门'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (解九爷:person &#123;<span class="keyword">name</span>:<span class="string">'解九爷'</span>,actor:<span class="string">'杨紫茳'</span>,<span class="keyword">level</span>:<span class="string">'下三门'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (霍锦惜:person &#123;<span class="keyword">name</span>:<span class="string">'霍锦惜'</span>,actor:<span class="string">'王美人'</span>,<span class="keyword">level</span>:<span class="string">'下三门'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (齐铁嘴:person &#123;<span class="keyword">name</span>:<span class="string">'齐铁嘴'</span>,actor:<span class="string">'应昊茗'</span>,<span class="keyword">level</span>:<span class="string">'下三门'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (尹新月:person &#123;<span class="keyword">name</span>:<span class="string">'尹新月'</span>,actor:<span class="string">'赵丽颖'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (张副官:person &#123;<span class="keyword">name</span>:<span class="string">'张副官'</span>,actor:<span class="string">'张铭恩'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (丫头:person &#123;<span class="keyword">name</span>:<span class="string">'丫头'</span>,actor:<span class="string">'袁冰妍'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (李四地:person &#123;<span class="keyword">name</span>:<span class="string">'李四地'</span>,actor:<span class="string">'吴懿涛'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (陈文锦:person &#123;<span class="keyword">name</span>:<span class="string">'陈文锦'</span>,actor:<span class="string">'陶珞依'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (陈皮奶奶:person &#123;<span class="keyword">name</span>:<span class="string">'陈皮奶奶'</span>,actor:<span class="string">'童晓梅'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (吴一穷:person &#123;<span class="keyword">name</span>:<span class="string">'吴一穷'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (吴二白:person &#123;<span class="keyword">name</span>:<span class="string">'吴二白'</span>,actor:<span class="string">'王劲松'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (吴三省:person &#123;<span class="keyword">name</span>:<span class="string">'吴三省'</span>,actor:<span class="string">'张智尧'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (解连环:person &#123;<span class="keyword">name</span>:<span class="string">'解连环'</span>,actor:<span class="string">'姚奕辰'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (霍仙姑:person &#123;<span class="keyword">name</span>:<span class="string">'霍仙姑'</span>,actor:<span class="string">'刘雪华'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (齐羽:person &#123;<span class="keyword">name</span>:<span class="string">'齐羽'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (张起灵:person &#123;<span class="keyword">name</span>:<span class="string">'张起灵'</span>,actor:<span class="string">'杨洋'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (吴邪:person &#123;<span class="keyword">name</span>:<span class="string">'吴邪'</span>,actor:<span class="string">'李易峰'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (解雨臣:person &#123;<span class="keyword">name</span>:<span class="string">'解雨臣'</span>,actor:<span class="string">'乔振宇'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (霍玲:person &#123;<span class="keyword">name</span>:<span class="string">'霍玲'</span>,actor:<span class="string">'洛晨舒'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (王胖子:person &#123;<span class="keyword">name</span>:<span class="string">'王胖子'</span>,actor:<span class="string">'刘天佐'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> (霍秀秀:person &#123;<span class="keyword">name</span>:<span class="string">'霍秀秀'</span>,actor:<span class="string">'刘若嫣'</span>&#125;)</span><br><span class="line"><span class="keyword">CREATE</span> </span><br><span class="line">(老九门)-[:角色]-&gt;(张启山),</span><br><span class="line">(老九门)-[:角色]-&gt;(二月红),</span><br><span class="line">(老九门)-[:角色]-&gt;(半截李),</span><br><span class="line">(老九门)-[:角色]-&gt;(陈皮阿四),</span><br><span class="line">(老九门)-[:角色]-&gt;(吴老狗),</span><br><span class="line">(老九门)-[:角色]-&gt;(黑背老六),</span><br><span class="line">(老九门)-[:角色]-&gt;(解九爷),</span><br><span class="line">(老九门)-[:角色]-&gt;(霍锦惜),</span><br><span class="line">(老九门)-[:角色]-&gt;(齐铁嘴),</span><br><span class="line">(老九门)-[:角色]-&gt;(尹新月),</span><br><span class="line">(老九门)-[:角色]-&gt;(张副官),</span><br><span class="line">(老九门)-[:角色]-&gt;(丫头),</span><br><span class="line">(老九门)-[:角色]-&gt;(陈皮奶奶),</span><br><span class="line">(盗墓笔记)-[:角色]-&gt;(吴邪),</span><br><span class="line">(盗墓笔记)-[:角色]-&gt;(解雨臣),</span><br><span class="line">(盗墓笔记)-[:角色]-&gt;(张起灵),</span><br><span class="line">(盗墓笔记)-[:角色]-&gt;(王胖子),</span><br><span class="line">(张启山)-[:患难之交]-&gt;(二月红),</span><br><span class="line">(张启山)-[:夫妻]-&gt;(尹新月),</span><br><span class="line">(张副官)-[:副官]-&gt;(张启山),</span><br><span class="line">(张启山)-[:张氏家族]-&gt;(张起灵),</span><br><span class="line">(二月红)-[:夫妻]-&gt;(丫头),</span><br><span class="line">(二月红)-[:师父]-&gt;(陈皮阿四),</span><br><span class="line">(半截李)-[:未知]-&gt;(李四地),</span><br><span class="line">(陈皮阿四)-[:未知]-&gt;(陈文锦),</span><br><span class="line">(吴老狗)-[:父子]-&gt;(吴一穷),</span><br><span class="line">(吴老狗)-[:父子]-&gt;(吴二白),</span><br><span class="line">(吴老狗)-[:父子]-&gt;(吴三省),</span><br><span class="line">(吴一穷)-[:父子]-&gt;(吴邪),</span><br><span class="line">(吴三省)-[:情人]-&gt;(陈文锦),</span><br><span class="line">(吴老狗)-[:媒人]-&gt;(解九爷),</span><br><span class="line">(解九爷)-[:父子]-&gt;(解连环),</span><br><span class="line">(解连环)-[:养父子]-&gt;(解雨臣),</span><br><span class="line">(二月红)-[:师父]-&gt;(解雨臣),</span><br><span class="line">(霍锦惜)-[:单恋]-&gt;(二月红),</span><br><span class="line">(霍锦惜)-[:姨侄]-&gt;(霍仙姑),</span><br><span class="line">(霍仙姑)-[:母女]-&gt;(霍玲),</span><br><span class="line">(霍玲)-[:姑侄]-&gt;(霍秀秀),</span><br><span class="line">(霍仙姑)-[:老情人]-&gt;(吴老狗),</span><br><span class="line">(吴邪)-[:铁三角]-&gt;(张起灵),</span><br><span class="line">(吴邪)-[:铁三角]-&gt;(王胖子),</span><br><span class="line">(张起灵)-[:铁三角]-&gt;(吴邪),</span><br><span class="line">(张起灵)-[:铁三角]-&gt;(王胖子),</span><br><span class="line">(王胖子)-[:铁三角]-&gt;(张起灵),</span><br><span class="line">(王胖子)-[:铁三角]-&gt;(吴邪),</span><br><span class="line">(齐铁嘴)-[:未知]-&gt;(齐羽),</span><br><span class="line">(陈皮阿四)-[:孙子]-&gt;(陈皮奶奶)</span><br></pre></td></tr></table></figure><p>当然也可以文件导入，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将csv拷贝到 %NEO4J_HOME%\import目录</span></span><br><span class="line"><span class="keyword">load</span> csv <span class="keyword">from</span> <span class="string">'file:///test.csv'</span> <span class="keyword">as</span> line</span><br><span class="line"><span class="keyword">create</span> (:<span class="keyword">test</span> &#123;<span class="keyword">name</span>:line[<span class="number">0</span>],tail:line[<span class="number">1</span>],label:line[<span class="number">3</span>]&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-1-CREATE创建">2.1 CREATE创建</h3><p>create语句是创建模型语句，用来创建数据模型，类似于数据库insert</p><p><strong>创建节点</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建简单节点</span></span><br><span class="line"><span class="keyword">create</span> (n);</span><br><span class="line"><span class="comment">#创建多个节点</span></span><br><span class="line"><span class="keyword">create</span> (n),(m);</span><br><span class="line"><span class="comment">#创建带标签和属性的节点并返回节点</span></span><br><span class="line"><span class="keyword">create</span> (n:teleplay &#123;<span class="keyword">name</span>:<span class="string">'老九门del'</span>,bron:<span class="number">2016</span>&#125;) <span class="keyword">return</span> n;</span><br></pre></td></tr></table></figure><p><strong>创建关系</strong></p><p>Neo4j关系被分为两种主要类型</p><ul><li><p>单向关系 </p></li><li><p>双向关系</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用新节点创建关系并展示关系</span></span><br><span class="line"><span class="keyword">CREATE</span> (n:person &#123;<span class="keyword">name</span>:<span class="string">'二月红del'</span>&#125;)-[r:患难之交]-&gt;(m:person &#123;<span class="keyword">name</span>:<span class="string">'张启山del'</span>&#125;) <span class="keyword">RETURN</span> n,r,m</span><br><span class="line"><span class="comment">#使用已知节点创建带属性的关系</span></span><br><span class="line"><span class="keyword">MATCH</span> (n:person &#123;<span class="keyword">name</span>:<span class="string">'张启山del'</span>&#125;),(m:person&#123;<span class="keyword">name</span>:<span class="string">'二月红del'</span>&#125;) <span class="keyword">CREATE</span> (n)-[r:患难之交&#123;relation:<span class="string">'铁哥们'</span>&#125;]-&gt;(m) <span class="keyword">RETURN</span> n,r,m;</span><br><span class="line"><span class="comment">#检索关系节点的详细信息</span></span><br><span class="line"><span class="keyword">CREATE</span> (n:person)-[r]-(m:person) <span class="keyword">RETURN</span> n,m</span><br><span class="line"><span class="comment">#Merge的用处就是如果已经创建了就不会重复在创建</span></span><br><span class="line"><span class="keyword">MERGE</span> (n:person)-[r]-(m:person) <span class="keyword">RETURN</span> n,m</span><br></pre></td></tr></table></figure><p><strong>创建全路径</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> p=(:person&#123;<span class="keyword">name</span>:<span class="string">'尹新月del'</span>&#125;)-[:夫妻]-&gt;(:person&#123;<span class="keyword">name</span>:<span class="string">'张启山del'</span>&#125;)&lt;-[:副官]-(:person &#123;<span class="keyword">name</span>:<span class="string">'张副官del'</span>&#125;) <span class="keyword">RETURN</span> p</span><br></pre></td></tr></table></figure><h3 id="2-2-MATCH查询">2.2 MATCH查询</h3><ul><li><p>从数据库获取有关节点和属性的数据 </p></li><li><p>从数据库获取有关节点，关系和属性的数据类似于数据库<code>select</code></p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分页查询25个节点</span></span><br><span class="line">MATCH (n) RETURN n LIMIT 25</span><br><span class="line"><span class="comment"># 查询上三门人物</span></span><br><span class="line">MATCH (n:person&#123;level:"上三门"&#125;) RETURN n</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">MATCH (m&#123;level:"上三门"&#125;) RETURN m</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">MATCH (m:person) where m.level="上三门"  RETURN m</span><br><span class="line"><span class="comment"># 查询张启山的关系网</span></span><br><span class="line">match (n)-[*]-&gt;(m:person&#123;name:"张启山"&#125;)-[*]-&gt;(l) return n,m,l</span><br></pre></td></tr></table></figure><h3 id="2-3-RETURN返回">2.3 RETURN返回</h3><ul><li><p>检索节点的某些属性 </p></li><li><p>检索节点的所有属性 </p></li><li><p>检索节点和关联关系的某些属性 </p></li><li><p>检索节点和关联关系的所有属性</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询患难之交</span></span><br><span class="line">match (n)-[r:患难之交]-&gt;(m) return n,r,m</span><br><span class="line"><span class="comment"># 查询盗墓笔记作者及角色</span></span><br><span class="line">match (n:teleplay&#123;name:"盗墓笔记"&#125;)-[r:角色]-&gt;(m) return n.author,m.name</span><br></pre></td></tr></table></figure><h3 id="2-4-DELETE删除">2.4 DELETE删除</h3><ul><li><p>删除节点 </p></li><li><p>删除节点及相关节点和关系</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除节点 （前提：节点不存在关系）</span></span><br><span class="line">MATCH (n:teleplay&#123;name:"老九门del"&#125;) delete n</span><br><span class="line"><span class="comment"># 删除关系</span></span><br><span class="line">MATCH (n:person&#123;name:"二月红del"&#125;)&lt;-[r]-(m) delete r return type(r)</span><br></pre></td></tr></table></figure><h3 id="2-5-REMOVE删除">2.5 REMOVE删除</h3><ul><li><p>删除节点或关系的标签 </p></li><li><p>删除节点或关系的属性</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除属性</span></span><br><span class="line">MATCH (n:person &#123;name:"张副官del"&#125;) remove n.name return n</span><br><span class="line"><span class="comment">#创建节点</span></span><br><span class="line"><span class="keyword">CREATE</span> (m:<span class="keyword">role</span>:person &#123;<span class="keyword">name</span>:<span class="string">"二月红del"</span>&#125;)</span><br><span class="line"><span class="comment">#删除标签</span></span><br><span class="line"><span class="keyword">match</span> (m:<span class="keyword">role</span>:person &#123;<span class="keyword">name</span>:<span class="string">"二月红del"</span>&#125;) remove m:person <span class="keyword">return</span> m</span><br><span class="line"><span class="comment">#清空库</span></span><br><span class="line"><span class="keyword">match</span> (n) OPTIONAL <span class="keyword">MATCH</span> (n)-[r]-() <span class="keyword">delete</span> n, r</span><br></pre></td></tr></table></figure><h3 id="2-6-SET子句">2.6 SET子句</h3><ul><li><p>向现有节点或关系添加新属性 </p></li><li><p>添加或更新属性值</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加或改变张启山del年龄为26</span></span><br><span class="line">MATCH (n:person &#123;name:"张启山del"&#125;) set n.age=26 return n</span><br></pre></td></tr></table></figure><h3 id="2-7-ORDER-BY排序">2.7 ORDER BY排序</h3><p>ORDER BY命令用于对MATCH查询返回的结果进行排序。可以按升序或降序对行进行排序。默认情况下为升序对行进行排序， 如果要按降序对结果进行排序，需要使用DESC子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按id降序</span></span><br><span class="line">MATCH (n:person) RETURN id(n),n.name order by id(n) desc</span><br></pre></td></tr></table></figure><h3 id="2-8-UNION子句">2.8 UNION子句</h3><p>与SQL一样，Neo4j CQL有两个子句，将两个不同的结果合并成一组结果</p><ul><li><p>UNION：将两组结果中的公共行组合并返回到一组结果中。 它不从两个节点返回重复的行<br>限制：结果列类型和来自两组结果的名称必须匹配，这意味着列名称应该相同，列的数据类型应该相同</p></li><li><p>UNION ALL：它结合并返回两个结果集的所有行成一个单一的结果集。它还返回由两个节点重复行<br>限制：结果列类型，并从两个结果集的名字必须匹配，这意味着列名称应该是相同的，列的数据类型应该是相同的</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># UNION</span></span><br><span class="line">MATCH (n:role) RETURN n.name as name UNION MATCH (m:person) RETURN m.name as name</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNION ALL</span></span><br><span class="line">MATCH (n:role) RETURN n.name as name UNION all MATCH (m:person) RETURN m.name as name</span><br></pre></td></tr></table></figure><h3 id="2-9-LIMIT和SKIP子句">2.9 LIMIT和SKIP子句</h3><p>CQL提供LIMIT子句和SKIP来过滤或限制查询返回的行数  </p><ul><li><p>LIMIT：返回前几行  </p></li><li><p>SKIP：忽略前几行</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回前10行</span></span><br><span class="line">MATCH (n:person) RETURN n LIMIT 10</span><br><span class="line"><span class="comment"># 忽略前5行</span></span><br><span class="line">MATCH (n:person) RETURN n SKIP 5</span><br></pre></td></tr></table></figure><h3 id="2-10-NULL值">2.10 NULL值</h3><p>Neo4j CQL将空值视为对节点或关系的属性的缺失值或未定义值，当创建一个具有现有节点标签名称但未指定其属性值的节点时，它将创建一个具有NULL属性值的新节点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match (n:person) where n.name is null return id(n),n.name</span><br></pre></td></tr></table></figure><h3 id="2-11-IN操作符">2.11 IN操作符</h3><p>IN用于提供值的集合，类似于SQL中的in</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match (n:person) where n.name in['张启山','二月红'] return id(n),n.name</span><br></pre></td></tr></table></figure><h3 id="2-12-INDEX索引">2.12 INDEX索引</h3><blockquote><p>Neo4j SQL支持节点或关系属性上的索引，以提高应用程序的性能。可以为具有相同标签名称的所有节点的属性创建索引，然后在MATCH或WHERE或IN运算符上使用这些索引列来改进CQL命令的执行</p></blockquote><p><strong>索引操作：</strong></p><ul><li><p>CREATE INDEX创建索引</p></li><li><p>DROP INDEX丢弃索引</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> <span class="keyword">on</span> :person (<span class="keyword">name</span>)</span><br><span class="line"><span class="comment"># 删除索引</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">on</span> :person (<span class="keyword">name</span>)</span><br></pre></td></tr></table></figure><h3 id="2-13-UNIQUE约束">2.13 UNIQUE约束</h3><p>UNIQUE约束的作用：</p><ul><li><p>避免重复记录（唯一约束） </p></li><li><p> 强制执行数据完整性规则</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建唯一约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">constraint</span> <span class="keyword">on</span> (n:teleplay) assert n.name <span class="keyword">is</span> <span class="keyword">unique</span></span><br><span class="line"><span class="comment">#删除唯一约束</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">constraint</span> <span class="keyword">on</span> (n:teleplay) assert n.name <span class="keyword">is</span> <span class="keyword">unique</span></span><br></pre></td></tr></table></figure><h3 id="2-14-DISTINCT">2.14 DISTINCT</h3><p>像SQL中的distinct关键字，返回的是所有不同值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match (n:person) return distinct(n.name)</span><br></pre></td></tr></table></figure><h2 id="3、常用函数">3、常用函数</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>String 字符串</td><td>用于使用String字面量</td></tr><tr><td>Aggregation 聚合</td><td>用于对CQL查询结果执行一些聚合操作</td></tr><tr><td>Relationship 关系</td><td>用于获取关系的细节，如startnode，endnode等</td></tr></tbody></table><h3 id="字符串函数">字符串函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>UPPER</td><td>用于将所有字母更改为大写字母</td></tr><tr><td>LOWER</td><td>用于将所有字母改为小写字母</td></tr><tr><td>SUBSTRING</td><td>用于获取给定String的子字符串</td></tr><tr><td>REPLACE</td><td>用于替换一个字符串的子字符串</td></tr></tbody></table><p><code>MATCH (n) RETURN id(n),n.name,substring(n.name,0,2)</code></p><h3 id="AGGREGATION聚合">AGGREGATION聚合</h3><blockquote><p>在RETURN子句中使用的聚合函数，类似于SQL中的GROUP BY子句。可以使用MATCH命令中的RETURN + 聚合函数来处理一组节点并返回一些聚合值</p></blockquote><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>COUNT</td><td>返回由MATCH命令返回的行数</td></tr><tr><td>MAX</td><td>从MATCH命令返回的一组行返回最大值</td></tr><tr><td>MIN</td><td>返回由MATCH命令返回的一组行的最小值</td></tr><tr><td>SUM</td><td>返回由MATCH命令返回的所有行的求和值</td></tr><tr><td>AVG</td><td>返回由MATCH命令返回的所有行的平均值</td></tr></tbody></table><p><code>MATCH (n) RETURN count(n)</code></p><h3 id="关系函数">关系函数</h3><blockquote><p>在获取开始节点，结束节点等细节时知道关系的细节</p></blockquote><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>STARTNODE</td><td>用于知道关系的开始节点</td></tr><tr><td>ENDNODE</td><td>用于知道关系的结束节点</td></tr><tr><td>ID</td><td>用于知道关系的ID</td></tr><tr><td>TYPE</td><td>用于知道字符串表示中的一个关系的TYPE</td></tr></tbody></table><p><code>match (m)-[r] -&gt;(n) return id(r),type(r)</code></p><h2 id="4、neo4j-admin使用-对于直接安装server使用">4、neo4j-admin使用(对于直接安装server使用)</h2><h3 id="数据库备份">数据库备份</h3><blockquote><p>对Neo4j数据进行备份、还原、迁移的操作时，要关闭neo4j</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭 neo4j</span></span><br><span class="line">neo4j stop</span><br><span class="line"><span class="comment">#备份  graph.db为备份数据库，d:/graph_backup.dump为备份地址</span></span><br><span class="line">neo4j-admin dump --database=graph.db --to=d:/graph_backup.dump</span><br></pre></td></tr></table></figure><h3 id="数据库恢复">数据库恢复</h3><blockquote><p>对Neo4j进行还原、迁移之前，要关闭neo4j服务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据导入</span></span><br><span class="line">neo4j-admin load --from=d:/graph_backup.dump --database=graph.db --force</span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">neo4j start</span><br></pre></td></tr></table></figure><h2 id="5、利用CQL构建明星关系图谱">5、利用CQL构建明星关系图谱</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入明星数据</span></span><br><span class="line"><span class="keyword">load</span> csv <span class="keyword">from</span> <span class="string">'file:///明星1.csv'</span> <span class="keyword">as</span> line <span class="keyword">create</span> (:star &#123;<span class="keyword">num</span>:line[<span class="number">0</span>],<span class="keyword">name</span>:line[<span class="number">1</span>]&#125;)</span><br><span class="line"><span class="keyword">load</span> csv <span class="keyword">from</span> <span class="string">'file:///明星关系数据1.csv'</span> <span class="keyword">as</span> line <span class="keyword">create</span> (:starRelation</span><br><span class="line">&#123;<span class="keyword">from</span>:line[<span class="number">0</span>],subject:line[<span class="number">1</span>],<span class="keyword">to</span>:line[<span class="number">2</span>],<span class="keyword">object</span>:line[<span class="number">3</span>],relation:line[<span class="number">4</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询明星关系</span></span><br><span class="line"><span class="keyword">match</span> (n:star),(m:starRelation),(s:star) <span class="keyword">where</span> n.name=<span class="string">'刘烨'</span> <span class="keyword">and</span> m.subject=<span class="string">'刘烨'</span> <span class="keyword">and</span> s.name=m.object</span><br><span class="line"><span class="keyword">return</span> n.name,m.relation,s.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建关系 构建明星关系图谱</span></span><br><span class="line"><span class="keyword">match</span> (n:star),(m:starRelation),(s:star) <span class="keyword">where</span> n.name=<span class="string">'刘烨'</span> <span class="keyword">and</span> m.subject=<span class="string">'刘烨'</span> <span class="keyword">and</span> s.name=m.object</span><br><span class="line"><span class="keyword">create</span> (n)-[r:关系&#123;relation:m.relation&#125;]-&gt;(s) <span class="keyword">return</span> n.name,m.relation,s.name</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看明星关系</span></span><br><span class="line"><span class="keyword">MATCH</span> p=(n:star&#123;<span class="keyword">name</span>:<span class="string">'刘烨'</span>&#125;)-[r:<span class="string">`关系`</span>]-&gt;() <span class="keyword">RETURN</span> p</span><br></pre></td></tr></table></figure><h1>四、SpringBoot整合Neo4j</h1><h2 id="1、环境与相关配置">1、环境与相关配置</h2><blockquote><p><a href="https://neo4j.com/" target="_blank" rel="noopener" title="neo4j官网">neo4j官网</a><br><a href="https://spring.io/projects/spring-data-neo4j#overview" target="_blank" rel="noopener" title="Spring Data Neo4j">Spring Data Neo4j</a></p></blockquote><p>首先添加依赖，这里我的springboot版本是2.6.x，Neo4j版本为6.x，不同版本之间差距很大</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-neo4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">neo4j:</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">bolt://localhost:7687</span></span><br><span class="line">    <span class="attr">authentication:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">neo4j</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="2、整合Neo4j测试">2、整合Neo4j测试</h2><p>首先创建Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Node</span>(labels = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Property</span>(<span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Property</span></span><br><span class="line">    <span class="keyword">private</span> String actor;</span><br><span class="line">    <span class="meta">@Property</span></span><br><span class="line">    <span class="keyword">private</span> String level;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * type可以修改，这个可以形成关系，这里我们用另一种方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Relationship(type = "角色",direction = Relationship.Direction.OUTGOING)</span></span><br><span class="line"><span class="comment">//    private Person start;</span></span><br><span class="line"><span class="comment">//    @Relationship(type = "角色",direction = Relationship.Direction.INCOMING)</span></span><br><span class="line"><span class="comment">//    private Person end;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>PersonRepository</code>接口，继承Neo4jRepository接口后里面实现了很多常用方法，类似与MYSQL，这里我们也可以自定义CQL进行编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Neo4jRepository</span>&lt;<span class="title">Person</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"Match (n:person &#123;name:$from&#125;),(m:person &#123;name:$to&#125;) "</span> +</span><br><span class="line">            <span class="string">"create (n)-[:西游人物 &#123;relation:$relation&#125;]-&gt;(m)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createRelation</span><span class="params">(String from,String relation,String to)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"match (n:person&#123;name:$name&#125;) return n"</span>)</span><br><span class="line">    <span class="function">Person <span class="title">selectPerson</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">    person1.setName(<span class="string">"shawn"</span>);</span><br><span class="line">    person1.setLevel(<span class="string">"玉天大帝"</span>);</span><br><span class="line"></span><br><span class="line">    Person person2 = <span class="keyword">new</span> Person();</span><br><span class="line">    person2.setName(<span class="string">"leo"</span>);</span><br><span class="line">    person2.setLevel(<span class="string">"土地爷"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        person1.setStart(person2);</span></span><br><span class="line">    personRepository.save(person1);</span><br><span class="line"></span><br><span class="line">    personRepository.createRelation(<span class="string">"shawn"</span>,<span class="string">"妻子"</span>,<span class="string">"leo"</span>);</span><br><span class="line"></span><br><span class="line">    Person person = personRepository.selectPerson(<span class="string">"shawn"</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Neo4j介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、图数据库介绍&quot;&gt;1、图数据库介绍&lt;/h2&gt;
&lt;h3 id=&quot;1-1-简介&quot;&gt;1.1 简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;随着社交、电商、金融、零售、物联网等行业的快速发展，现实社会织起了了一张庞大而复杂的关系网，传统数据库很难处理关系运算。大数据行业需要处理的数据之间的关系随数据量呈几何级数增长，急需一种支持海量复杂数据关系运算的数据库，图数据库应运而生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;图数据库是基于图论实现的一种NoSQL数据库，其数据存储结构和数据查询方式都是以图论为基础的，图数据库主要用于存储更多的连接数据。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SQL" scheme="https://www.shawn22.xyz/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Java之BigDeciaml小记</title>
    <link href="https://www.shawn22.xyz/posts/c7525ce2.html"/>
    <id>https://www.shawn22.xyz/posts/c7525ce2.html</id>
    <published>2022-05-30T12:49:01.000Z</published>
    <updated>2022-07-11T12:06:49.302Z</updated>
    
    <content type="html"><![CDATA[<h1>一、BigDecimal概述</h1><p>Java在<code>java.math</code>包中提供的API类<code>BigDecimal</code>，用来对超过16位有效位的数进行精确的运算。<strong>双精度浮点型变量double可以处理16位有效数</strong>，但在实际应用中，可能需要对更大或者更小的数进行运算和处理。</p><p>一般情况下，对于那些不需要准确计算精度的数字，我们可以直接使用Float和Double处理，但是<strong>Double.valueOf(String) 和Float.valueOf(String)会丢失精度</strong>。所以开发中，如果我们需要精确计算的结果，则必须使用<code>BigDecimal</code>类来操作。</p><p>BigDecimal所创建的是对象，故我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。<strong>构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象</strong>。</p><a id="more"></a><h1>二、BigDecimal常用构造函数</h1><h2 id="1、常用构造函数">1、常用构造函数</h2><ul><li><strong>BigDecimal(int)</strong></li></ul><p>创建一个具有参数所指定整数值的对象</p><ul><li><strong>BigDecimal(double)</strong></li></ul><p>创建一个具有参数所指定双精度值的对象</p><ul><li><strong>BigDecimal(long)</strong></li></ul><p>创建一个具有参数所指定长整数值的对象</p><ul><li><strong>BigDecimal(String)</strong></li></ul><p>创建一个具有参数所指定以字符串表示的数值的对象</p><h2 id="2、使用问题分析">2、使用问题分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a =<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>);</span><br><span class="line">System.out.println(<span class="string">"a values is:"</span>+a);</span><br><span class="line">System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">BigDecimal b =<span class="keyword">new</span> BigDecimal(<span class="string">"0.1"</span>);</span><br><span class="line">System.out.println(<span class="string">"b values is:"</span>+b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* a values is:0.1000000000000000055511151231257827021181583404541015625</span></span><br><span class="line"><span class="comment">* =====================</span></span><br><span class="line"><span class="comment">* b values is:0.1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>原因分析</strong></p><ul><li>参数类型为double的构造方法的结果有一定的不可预知性。有人可能认为在Java中写入<code>newBigDecimal(0.1)</code>所创建的BigDecimal正好等于 0.1（非标度值 1，其标度为 1），但是它实际上等于<code>0.1000000000000000055511151231257827021181583404541015625</code>。这是因为0.1无法准确地表示为 double（或者说对于该情况，不能表示为任何有限长度的二进制小数）。这样，传入到构造方法的值不会正好等于 0.1（虽然表面上等于该值）。</li><li><strong>String 构造方法是完全可预知的</strong>：写入 newBigDecimal(“0.1”) 将创建一个 BigDecimal，它正好等于预期的 0.1。因此，比较而言， 通常<strong>建议优先使用String构造方法</strong>。</li><li>当double必须用作BigDecimal的源时，请注意，此构造方法提供了一个准确转换；它不提供与以下操作相同的结果：<strong>先使用Double.toString(double)方法，然后使用BigDecimal(String)构造方法</strong>，将double转换为String。要获取该结果，请使用<code>static valueOf(double)</code>方法。</li></ul><h1>三、BigDecimal常用方法详解</h1><h2 id="1、常用方法">1、常用方法</h2><ul><li><strong>add(BigDecimal)</strong></li></ul><p>BigDecimal对象中的值相加，返回BigDecimal对象</p><ul><li><strong>subtract(BigDecimal)</strong></li></ul><p>BigDecimal对象中的值相减，返回BigDecimal对象</p><ul><li><strong>multiply(BigDecimal)</strong></li></ul><p>BigDecimal对象中的值相乘，返回BigDecimal对象</p><ul><li><strong>divide(BigDecimal)</strong></li></ul><p>BigDecimal对象中的值相除，返回BigDecimal对象</p><ul><li><strong>toString()</strong></li></ul><p>将BigDecimal对象中的值转换成字符串</p><ul><li><strong>doubleValue()</strong></li></ul><p>将BigDecimal对象中的值转换成双精度数</p><ul><li><strong>floatValue()</strong></li></ul><p>将BigDecimal对象中的值转换成单精度数</p><ul><li><strong>longValue()</strong></li></ul><p>将BigDecimal对象中的值转换成长整数</p><ul><li><strong>intValue()</strong></li></ul><p>将BigDecimal对象中的值转换成整数</p><h2 id="2、BigDecimal大小比较">2、BigDecimal大小比较</h2><p>BigDecimal比较大小一般用的是bigdemical的<code>compareTo()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//比较大小</span></span><br><span class="line">    BigDecimal a =<span class="keyword">new</span> BigDecimal(<span class="number">0.1</span>);</span><br><span class="line">    BigDecimal b =<span class="keyword">new</span> BigDecimal(<span class="string">"0.1"</span>);</span><br><span class="line">    <span class="comment">//结果为1</span></span><br><span class="line">    System.out.println(a.compareTo(b));</span><br><span class="line">    <span class="comment">//结果为-1,表示a小于b；</span></span><br><span class="line">    <span class="comment">//结果为0,表示a等于b；</span></span><br><span class="line">    <span class="comment">//结果为1,表示a大于b；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>四、BigDecimal格式化</h1><p>由于<code>NumberFormat</code>类的<code>format()</code>方法可以使用BigDecimal对象作为其参数，可以利用<code>BigDecimal</code>对超出16位有效数字的货币值，百分值，以及一般数值进行格式化控制。以利用<code>BigDecimal</code>对货币和百分比格式化为例。首先，创建BigDecimal对象，进行BigDecimal的算术运算后，分别建立对货币和百分比格式化的引用，最后利用<code>BigDecimal</code>对象作为<code>format()</code>方法的参数，输出其格式化的货币值和百分比。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//建立货币格式化引用</span></span><br><span class="line">    NumberFormat currency = NumberFormat.getCurrencyInstance();</span><br><span class="line">    <span class="comment">//建立百分比格式化引用</span></span><br><span class="line">    NumberFormat percent = NumberFormat.getPercentInstance();</span><br><span class="line">    <span class="comment">//百分比小数点最多3位</span></span><br><span class="line">    percent.setMaximumFractionDigits(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//贷款金额</span></span><br><span class="line">    BigDecimal loanAmount = <span class="keyword">new</span> BigDecimal(<span class="string">"15000.48"</span>);</span><br><span class="line">    <span class="comment">//利率</span></span><br><span class="line">    BigDecimal interestRate = <span class="keyword">new</span> BigDecimal(<span class="string">"0.008"</span>);</span><br><span class="line">    <span class="comment">//相乘</span></span><br><span class="line">    BigDecimal interest = loanAmount.multiply(interestRate);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"贷款金额:\t"</span> + currency.format(loanAmount));</span><br><span class="line">    System.out.println(<span class="string">"利率:\t"</span> + percent.format(interestRate));</span><br><span class="line">    System.out.println(<span class="string">"利息:\t"</span> + currency.format(interest));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 贷款金额:  ￥15,000.48</span></span><br><span class="line"><span class="comment">* 利率:  0.8%</span></span><br><span class="line"><span class="comment">* 利息:  ￥120.00</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>BigDecimal格式化保留2为小数，不足则补0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] s)</span></span>&#123;</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> BigDecimal(<span class="string">"3.435"</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> BigDecimal(<span class="number">0</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> BigDecimal(<span class="string">"0.00"</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> BigDecimal(<span class="string">"0.001"</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> BigDecimal(<span class="string">"0.006"</span>)));</span><br><span class="line">        System.out.println(formatToNumber(<span class="keyword">new</span> BigDecimal(<span class="string">"0.206"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 1.0~1之间的BigDecimal小数，格式化后失去前面的0,则前面直接加上0。</span></span><br><span class="line"><span class="comment">     * 2.传入的参数等于0，则直接返回字符串"0.00"</span></span><br><span class="line"><span class="comment">     * 3.大于1的小数，直接格式化返回字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj传入的小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatToNumber</span><span class="params">(BigDecimal obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//#没有就为空，0的话没有就为0</span></span><br><span class="line">        DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.00"</span>);</span><br><span class="line">        <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0.00"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)&gt;<span class="number">0</span>&amp;&amp;obj.compareTo(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>+df.format(obj).toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> df.format(obj).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1>五、BigDecimal常见异常</h1><p><strong>原因分析</strong></p><p>通过<code>BigDecimal</code>的<code>divide</code>方法进行除法时当不整除，出现无限循环小数时，就会抛异常：<code>java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result</code></p><p><strong>解决方法</strong></p><p><code>divide</code>方法设置精确的小数点，如：<code>divide(xxxxx,2)</code></p><h1>六、BigDecimal总结</h1><h2 id="1、总结">1、总结</h2><p>在需要精确的小数计算时再使用<code>BigDecimal</code>，<strong>BigDecimal的性能比double和float差</strong>，在处理庞大，复杂的运算时尤为明显。故一般精度的计算没必要使用BigDecimal。尽量使用参数类型为String的构造函数。<strong>BigDecimal都是不可变的（immutable）的</strong>， 在进行每一次四则运算时，都会产生一个新的对象 ，所以在做加减乘除运算时要记得要保存操作后的值。</p><h2 id="2、工具类">2、工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于高精确处理常用的数学运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认除法运算精度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEF_DIV_SCALE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">add</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">add</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"The scale must be a positive integer or zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">sub</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sub</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"The scale must be a positive integer or zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">mul</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> round(b1.multiply(b2).doubleValue(), scale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">mul</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"The scale must be a positive integer or zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到</span></span><br><span class="line"><span class="comment">     * 小数点以后10位，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> div(v1, v2, DEF_DIV_SCALE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示表示需要精确到小数点以后几位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The scale must be a positive integer or zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示需要精确到小数点以后几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">div</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The scale must be a positive integer or zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> v, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The scale must be a positive integer or zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(Double.toString(v));</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">round</span><span class="params">(String v, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"The scale must be a positive integer or zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(v);</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">remainder</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"The scale must be a positive integer or zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数  BigDecimal</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">remainder</span><span class="params">(BigDecimal v1, BigDecimal v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"The scale must be a positive integer or zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果v1 大于v2 则 返回true 否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">int</span> bj = b1.compareTo(b2);</span><br><span class="line">        <span class="keyword">boolean</span> res;</span><br><span class="line">        <span class="keyword">if</span> (bj &gt; <span class="number">0</span>)</span><br><span class="line">            res = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考转载文章</p><p><a href="https://www.cnblogs.com/zhangyinhua/p/11545305.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangyinhua/p/11545305.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、BigDecimal概述&lt;/h1&gt;
&lt;p&gt;Java在&lt;code&gt;java.math&lt;/code&gt;包中提供的API类&lt;code&gt;BigDecimal&lt;/code&gt;，用来对超过16位有效位的数进行精确的运算。&lt;strong&gt;双精度浮点型变量double可以处理16位有效数&lt;/strong&gt;，但在实际应用中，可能需要对更大或者更小的数进行运算和处理。&lt;/p&gt;
&lt;p&gt;一般情况下，对于那些不需要准确计算精度的数字，我们可以直接使用Float和Double处理，但是&lt;strong&gt;Double.valueOf(String) 和Float.valueOf(String)会丢失精度&lt;/strong&gt;。所以开发中，如果我们需要精确计算的结果，则必须使用&lt;code&gt;BigDecimal&lt;/code&gt;类来操作。&lt;/p&gt;
&lt;p&gt;BigDecimal所创建的是对象，故我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。&lt;strong&gt;构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://www.shawn22.xyz/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot实现扫码登录</title>
    <link href="https://www.shawn22.xyz/posts/d9197020.html"/>
    <id>https://www.shawn22.xyz/posts/d9197020.html</id>
    <published>2022-05-30T12:48:47.000Z</published>
    <updated>2022-07-11T12:06:49.306Z</updated>
    
    <content type="html"><![CDATA[<h1>一、概述</h1><h2 id="1、扫码登录介绍">1、扫码登录介绍</h2><blockquote><p><a href="https://juejin.cn/post/6844904111398191117?utm_source=gold_browser_extension" target="_blank" rel="noopener">二维码扫描登录原理</a></p></blockquote><p>二维码登录本质上也是一种登录认证方式。既然是登录认证，要做的也就两件事情：告诉系统我是谁，以及向系统证明我是谁。</p><p>比如账号密码登录，账号就是告诉系统我是谁， 密码就是向系统证明我是谁; 比如手机验证码登录，手机号就是告诉系统我是谁，验证码就是向系统证明我是谁;</p><a id="more"></a><h2 id="2、扫码登录原理">2、扫码登录原理</h2><ul><li>PC 端发送 “扫码登录” 请求，服务端生成二维码 id，并存储二维码的过期时间、状态等信息</li><li>PC 端获取二维码并显示</li><li>PC 端开始轮询检查二维码的状态，二维码最初为 &quot;待扫描&quot;状态</li><li>手机端扫描二维码，获取二维码 id</li><li>手机端向服务端发送 “扫码” 请求，请求中携带二维码 id、手机端 token 以及设备信息</li><li>服务端验证手机端用户的合法性，验证通过后将二维码状态置为 “待确认”，并将用户信息与二维码关联在一起，之后为手机端生成一个一次性 token，该 token 用作确认登录的凭证</li><li>PC 端轮询时检测到二维码状态为 “待确认”</li><li>手机端向服务端发送 “确认登录” 请求，请求中携带着二维码 id、一次性 token 以及设备信息</li><li>服务端验证一次性 token，验证通过后将二维码状态置为 “已确认”，并为 PC 端生成 PC 端 token</li><li>PC 端轮询时检测到二维码状态为 “已确认”，并获取到了 PC 端 token，之后 PC 端不再轮询</li><li>PC 端通过 PC 端 token 访问服务端</li></ul><p><img src="https://img-blog.csdnimg.cn/a002886504324fdca2a9dc68707f94c3.png" alt></p><h1>二、扫码登录实战(轮询版)</h1><h2 id="1、环境准备">1、环境准备</h2><ul><li>SpringBoot</li><li>Lombok</li><li>Redis</li></ul><h2 id="2、RedisTemplate序列化">2、RedisTemplate序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化RedisTemplate</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编写自己的RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        <span class="comment">// 序列化时会自动增加类类型，否则无法反序列化</span></span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash采用String序列方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Token工具类">3、Token工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token的工具类</span></span><br><span class="line"><span class="comment"> * 使用jwt生成/验证token（jwt JSON Web Token）</span></span><br><span class="line"><span class="comment"> * jwt由三部分组成: 头部（header).载荷（payload).签证（signature)</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1.header头部承载两部分信息：</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   “type”: “JWT”, 声明类型，这里是jwt</span></span><br><span class="line"><span class="comment"> *   “alg”: “HS256” 声明加密的算法 通常直接使用 HMAC SHA256</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 将头部进行base64加密, 构成了第一部分</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2.payload载荷就是存放有效信息的地方</span></span><br><span class="line"><span class="comment"> *  (1).标准中注册的声明</span></span><br><span class="line"><span class="comment"> *  (2).公共的声明 （一般不建议存放敏感信息）</span></span><br><span class="line"><span class="comment"> *  (3).私有的声明 （一般不建议存放敏感信息）</span></span><br><span class="line"><span class="comment"> * 将其进行base64加密，得到Jwt的第二部分</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 3.signature签证信息由三部分组成：</span></span><br><span class="line"><span class="comment"> * (1).header (base64后的)</span></span><br><span class="line"><span class="comment"> * (2).payload (base64后的)</span></span><br><span class="line"><span class="comment"> * (3).secret</span></span><br><span class="line"><span class="comment"> * 需要base64加密后的header和base64加密后的payload连接组成的字符串，</span></span><br><span class="line"><span class="comment"> * 然后通过header中声明的加密方式进行加盐secret组合加密，构成了jwt的第三部分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token的失效时间:25天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> TIME_OUT = <span class="number">25</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> *<span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token的密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SECRET = <span class="string">"shawn222"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">token</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        String token = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date = <span class="keyword">new</span> Date(System.currentTimeMillis() + TIME_OUT);</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(SECRET);</span><br><span class="line">            Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            headers.put(<span class="string">"type"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">            headers.put(<span class="string">"alg"</span>, <span class="string">"HS256"</span>);</span><br><span class="line">            token = JWT.create()</span><br><span class="line">                    .withClaim(<span class="string">"account"</span>, userId)</span><br><span class="line">                    .withExpiresAt(date)</span><br><span class="line">                    .withHeader(headers)</span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException | JWTCreationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(SECRET);</span><br><span class="line">            JWTVerifier jwtVerifier = JWT.require(algorithm).build();</span><br><span class="line">            DecodedJWT decodedJWT = jwtVerifier.verify(token);</span><br><span class="line">            <span class="comment">// 客户端可以解密 所以一般不建议存放敏感信息</span></span><br><span class="line">            log.info(<span class="string">"account:"</span> + decodedJWT.getClaim(<span class="string">"account"</span>).asString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException | JWTVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4、定义扫码状态">4、定义扫码状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CodeStatus &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EXPIRE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未使用的二维码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UNUSED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已扫码, 等待确认</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CONFIRMING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认登录成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CONFIRMED</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、定义返回类">5、定义返回类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二维码状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> CodeStatus codeStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正式 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeVO</span><span class="params">(CodeStatus codeStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.codeStatus = codeStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeVO</span><span class="params">(CodeStatus codeStatus,String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.codeStatus = codeStatus;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeVO</span><span class="params">(CodeStatus codeStatus,String message,T token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.codeStatus = codeStatus;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.token=token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、定义二维码工具类">6、定义二维码工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二维码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期二维码存储信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 二维码值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CodeVO <span class="title">getExpireCodeInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CodeVO(CodeStatus.EXPIRE,<span class="string">"二维码已更新"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取未使用二维码存储信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 二维码值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CodeVO <span class="title">getUnusedCodeInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CodeVO(CodeStatus.UNUSED,<span class="string">"二维码等待扫描"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取已扫码二维码存储信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CodeVO <span class="title">getConfirmingCodeInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CodeVO(CodeStatus.CONFIRMING,<span class="string">"二维码扫描成功，等待确认"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取已扫码确认二维码存储信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 二维码值对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CodeVO <span class="title">getConfirmedCodeInfo</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CodeVO(CodeStatus.CONFIRMED, <span class="string">"二维码已确认"</span>,token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、编写相应方法">7、编写相应方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成uuid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;String&gt; <span class="title">generateUUID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String uuid = UUID.randomUUID().toString();</span><br><span class="line">            redisTemplate.opsForValue().set(RedisKeyUtil.getScanUUID(uuid),</span><br><span class="line">                    CodeUtil.getUnusedCodeInfo(),RedisKeyUtil.getTimeOut(), TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(uuid);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.warn(<span class="string">"redis二维码生成异常&#123;&#125;"</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="string">"二维码异常，请重新扫描"</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * uuid状态信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;CodeVO&gt; <span class="title">getInfoUUID</span><span class="params">(String uuid)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object object = redisTemplate.opsForValue().get(RedisKeyUtil.getScanUUID(uuid));</span><br><span class="line">        <span class="keyword">if</span>(object==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="string">"二维码不存在或者已过期"</span>,<span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;((CodeVO)object);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描登录，去确认二维码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">scanQrLogin</span><span class="params">(String uuid, String account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object o = redisTemplate.opsForValue().get(RedisKeyUtil.getScanUUID(uuid));</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>==o)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="string">"二维码异常，请重新扫描"</span>,<span class="number">400</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            CodeVO codeVO = (CodeVO) o;</span><br><span class="line">            <span class="comment">//获取状态</span></span><br><span class="line">            CodeStatus codeStatus = codeVO.getCodeStatus();</span><br><span class="line">            <span class="comment">// 如果未使用</span></span><br><span class="line">            <span class="keyword">if</span>(codeStatus==CodeStatus.UNUSED)&#123;</span><br><span class="line">                redisTemplate.opsForValue().set(RedisKeyUtil.getScanUUID(uuid),</span><br><span class="line">                        CodeUtil.getConfirmingCodeInfo(),RedisKeyUtil.getTimeOut(), TimeUnit.MINUTES);</span><br><span class="line">                <span class="comment">//你的逻辑</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="string">"请确认登录"</span>,<span class="number">200</span>,<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.warn(<span class="string">"二维码异常&#123;&#125;"</span>,e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="string">"内部错误"</span>,<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="string">"二维码异常，请重新扫描"</span>,<span class="number">400</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认登录，返回学生token以及对应信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uuid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 学生id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">confirmQrLogin</span><span class="params">(String uuid, String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            CodeVO codeVO = (CodeVO) redisTemplate.opsForValue().get(RedisKeyUtil.getScanUUID(uuid));</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>==codeVO)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="string">"二维码已经失效，请重新扫描"</span>,<span class="number">400</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取状态</span></span><br><span class="line">            CodeStatus codeStatus = codeVO.getCodeStatus();</span><br><span class="line">            <span class="comment">// 如果正在确认中,查询学生信息</span></span><br><span class="line">            <span class="keyword">if</span>(codeStatus==CodeStatus.CONFIRMING)&#123;</span><br><span class="line">                <span class="comment">//你的逻辑</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 生成token</span></span><br><span class="line">                String token = TokenUtil.token(studentLoginVO.getAccount());</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//redis二维码状态修改，PC可以获取到</span></span><br><span class="line">                redisTemplate.opsForValue().set(RedisKeyUtil.getScanUUID(uuid),</span><br><span class="line">                        CodeUtil.getConfirmedCodeInfo(token),RedisKeyUtil.getTimeOut(), TimeUnit.MINUTES);</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="string">"登陆成功"</span>,<span class="number">200</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="string">"二维码异常，请重新扫描"</span>,<span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"确认二维码异常&#123;&#125;"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="string">"内部错误"</span>,<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、扫码登录(长连接版)</h1><p>当然不仅仅包括短轮训，还有SSE(Server-Send Events，可以用WebFlux实现)以及WebSocket长连接实现，可以参考：<a href="https://mp.weixin.qq.com/s/aSFHjWAO_X46rm1Nk6Bpog" target="_blank" rel="noopener">Spring Boot + Web Socket 实现扫码登录</a></p><hr><p>参考文章：</p><p><a href="%5Bhttps://blog.csdn.net/weixin_68188085/article/details/124508045%5D(https://blog.csdn.net/weixin_68188085/article/details/124508045)">Java 语言实现简易版扫码登录</a></p><p><a href="https://www.jianshu.com/p/f9457d670e47" target="_blank" rel="noopener">Java实现二维码扫描登录</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、概述&lt;/h1&gt;
&lt;h2 id=&quot;1、扫码登录介绍&quot;&gt;1、扫码登录介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844904111398191117?utm_source=gold_browser_extension&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二维码扫描登录原理&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二维码登录本质上也是一种登录认证方式。既然是登录认证，要做的也就两件事情：告诉系统我是谁，以及向系统证明我是谁。&lt;/p&gt;
&lt;p&gt;比如账号密码登录，账号就是告诉系统我是谁， 密码就是向系统证明我是谁; 比如手机验证码登录，手机号就是告诉系统我是谁，验证码就是向系统证明我是谁;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Linux开发运维常用命令</title>
    <link href="https://www.shawn22.xyz/posts/6d622f28.html"/>
    <id>https://www.shawn22.xyz/posts/6d622f28.html</id>
    <published>2022-05-30T12:48:30.000Z</published>
    <updated>2022-07-11T12:06:49.315Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Java开发常用命令</h1><h2 id="1、前言">1、前言</h2><p>一般java开发者来说，或多或少都会接触到linux，因为许多服务都需要部署等，因此一些java常用的linux命令需要每一个java开发者都了解。这里总结一波，方便后期查找。入门级常用linux命令可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/114846900" target="_blank" rel="noopener">Linux常用命令操作</a></p><a id="more"></a><h2 id="2、常用命令简介">2、常用命令简介</h2><ul><li>Linux关机,重启</li><li>查看系统,CPU信息</li><li>建立软连接</li><li>rpm相关</li><li>sshkey</li><li>命令重命名</li><li>同步服务器时间</li><li>后台运行命令</li><li>强制活动用户退出</li><li>查看命令路径</li><li>查看进程所有打开最大fd数</li><li>配置dns</li><li>nslookup,查看域名路由表</li><li>last, 最近登录信息列表</li><li>设置固定ip</li><li>查看进程内加载的环境变量</li><li>查看进程树找到服务器进程</li><li>查看进程启动路径</li><li>添加用户, 配置sudo权限</li><li>强制关闭进程名包含xxx的所有进程</li><li>vim操作</li><li>打开只读文件,修改后需要保存时(不用切换用户即可保存的方式)</li><li>查看磁盘, 文件目录基本信息</li><li>wc命令</li><li>常用压缩, 解压缩命令</li><li>压缩命令</li><li>解压缩命令</li><li>变更文件所属用户, 用户组</li><li>cp, scp, mkdir</li><li>比较两个文件</li><li>日志输出的字节数,可以用作性能测试</li><li>查看, 去除特殊字符</li><li>处理因系统原因引起的文件中特殊字符的问题</li><li>tee, 重定向的同时输出到屏幕</li><li>grep</li><li>awk</li><li>find检索命令</li><li>查看什么进程使用了该端口</li><li>获取本机ip地址</li><li>iptables</li><li>nc命令, tcp调试利器</li><li>tcpdump</li><li>跟踪网络路由路径</li><li>ss</li><li>netstat</li><li>top</li><li>dmesg,查看系统日志</li><li>iostat,磁盘IO情况监控</li><li>free,内存使用情况</li><li>sar,查看网络吞吐状态</li><li>vmstat, 给定时间监控CPU使用率, 内存使用, 虚拟内存交互, IO读写</li></ul><h2 id="3、常用命令详解">3、常用命令详解</h2><h3 id="3-1-基础命令">3.1 基础命令</h3><p><strong>Linux关机,重启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关机</span></span><br><span class="line">shutdown -h now</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><p><strong>查看系统,CPU信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统内核信息</span></span><br><span class="line">uname -a</span><br><span class="line"><span class="comment"># 查看系统内核版本</span></span><br><span class="line">cat /proc/version</span><br><span class="line"><span class="comment"># 查看当前用户环境变量</span></span><br><span class="line">env</span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line"><span class="comment"># 查看有几个逻辑cpu, 包括cpu型号</span></span><br><span class="line">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br><span class="line"><span class="comment"># 查看有几颗cpu,每颗分别是几核</span></span><br><span class="line">cat /proc/cpuinfo | grep physical | uniq -c</span><br><span class="line"><span class="comment"># 查看当前CPU运行在32bit还是64bit模式下, 如果是运行在32bit下也不代表CPU不支持64bit</span></span><br><span class="line">getconf LONG_BIT</span><br><span class="line"><span class="comment"># 结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit</span></span><br><span class="line">cat /proc/cpuinfo | grep flags | grep <span class="string">' lm '</span> | wc -l</span><br></pre></td></tr></table></figure><p><strong>建立软连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/jdk1.8/ jdk</span><br></pre></td></tr></table></figure><p><strong>rpm相关</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否通过rpm安装了该软件</span></span><br><span class="line">rpm -qa | grep 软件名</span><br></pre></td></tr></table></figure><p><strong>sshkey</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建sshkey</span></span><br><span class="line">ssh-keygen -t rsa -C your_email@example.com</span><br><span class="line"><span class="comment">#id_rsa.pub 的内容拷贝到要控制的服务器的 home/username/.ssh/authorized_keys 中,如果没有则新建(.ssh权限为700, authorized_keys权限为600)</span></span><br></pre></td></tr></table></figure><p><strong>命令重命名</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在各个用户的.bash_profile中添加重命名配置</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -alF'</span></span><br></pre></td></tr></table></figure><p><strong>同步服务器时间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前时间</span></span><br><span class="line">date</span><br><span class="line"><span class="comment">#查看当前时区</span></span><br><span class="line">date -R</span><br><span class="line"><span class="comment">#同步网络时间</span></span><br><span class="line">sudo ntpdate -u ntp.api.bz</span><br></pre></td></tr></table></figure><p><strong>后台运行命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台运行,并且有nohup.out输出</span></span><br><span class="line">nohup xxx &amp;</span><br><span class="line"><span class="comment"># 后台运行, 不输出任何日志</span></span><br><span class="line">nohup xxx &gt; /dev/null &amp;</span><br><span class="line"><span class="comment"># 后台运行, 并将错误信息做标准输出到日志中 </span></span><br><span class="line">nohup xxx &gt;out.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><strong>强制活动用户退出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令来完成强制活动用户退出.其中TTY表示终端名称</span></span><br><span class="line">pkill -<span class="built_in">kill</span> -t [TTY]</span><br></pre></td></tr></table></figure><p><strong>查看命令路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> &lt;命令&gt;</span><br></pre></td></tr></table></figure><p><strong>查看进程所有打开最大fd数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n</span><br></pre></td></tr></table></figure><p><strong>配置dns</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure><p><strong>nslookup,查看域名路由表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup google.com</span><br></pre></td></tr></table></figure><p><strong>last最近登录信息列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最近登录的5个账号</span></span><br><span class="line">last -n 5</span><br></pre></td></tr></table></figure><p><strong>设置固定ip</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig em1  192.168.5.177 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><p><strong>查看进程内加载的环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以去 cd /proc 目录下, 查看进程内存中加载的东西</span></span><br><span class="line">ps eww -p  XXXXX(进程号)</span><br></pre></td></tr></table></figure><p><strong>查看进程树找到服务器进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps auwxf</span><br></pre></td></tr></table></figure><p><strong>查看进程启动路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /proc/xxx(进程号)</span><br><span class="line">ls -all</span><br><span class="line"><span class="comment"># cwd对应的是启动路径</span></span><br></pre></td></tr></table></figure><p><strong>添加用户, 配置sudo权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增用户</span></span><br><span class="line">useradd 用户名</span><br><span class="line">passwd 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加sudo权限</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># 修改文件里面的</span></span><br><span class="line"><span class="comment"># root    ALL=(ALL)       ALL</span></span><br><span class="line"><span class="comment"># 用户名 ALL=(ALL)       ALL</span></span><br></pre></td></tr></table></figure><p><strong>强制关闭进程名包含xxx的所有进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep xxx | grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure><h3 id="3-2-磁盘-文件-目录相关操作">3.2 磁盘,文件,目录相关操作</h3><p><strong>vim操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#normal模式下 g表示全局, x表示查找的内容, y表示替换后的内容</span></span><br><span class="line">:%s/x/y/g</span><br><span class="line"> </span><br><span class="line"><span class="comment">#normal模式下</span></span><br><span class="line">0  <span class="comment"># 光标移到行首(数字0)</span></span><br><span class="line">$  <span class="comment"># 光标移至行尾</span></span><br><span class="line"><span class="built_in">shift</span> + g <span class="comment"># 跳到文件最后</span></span><br><span class="line">gg <span class="comment"># 跳到文件头</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示行号</span></span><br><span class="line">:<span class="built_in">set</span> nu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除行号</span></span><br><span class="line">:<span class="built_in">set</span> nonu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检索</span></span><br><span class="line">/xxx(检索内容)  <span class="comment"># 从头检索, 按n查找下一个</span></span><br><span class="line">?xxx(检索内容)  <span class="comment"># 从尾部检索</span></span><br></pre></td></tr></table></figure><p><strong>打开只读文件,修改后需要保存时(不用切换用户即可保存的方式)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在normal模式下</span></span><br><span class="line">:w !sudo tee %</span><br></pre></td></tr></table></figure><p><strong>查看磁盘, 文件目录基本信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看磁盘挂载情况</span></span><br><span class="line">mount</span><br><span class="line"><span class="comment"># 查看磁盘分区信息</span></span><br><span class="line">df</span><br><span class="line"><span class="comment"># 查看目录及子目录大小</span></span><br><span class="line">du -H -h</span><br><span class="line"><span class="comment"># 查看当前目录下各个文件, 文件夹占了多少空间, 不会递归</span></span><br><span class="line">du -sh *</span><br></pre></td></tr></table></figure><p><strong>wc命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看文件里有多少行</span></span><br><span class="line">wc -l filename</span><br><span class="line"><span class="comment"># 看文件里有多少个word</span></span><br><span class="line">wc -w filename</span><br><span class="line"><span class="comment"># 文件里最长的那一行是多少个字</span></span><br><span class="line">wc -L filename</span><br><span class="line"><span class="comment"># 统计字节数</span></span><br><span class="line">wc -c</span><br></pre></td></tr></table></figure><p><strong>压缩命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar czvf xxx.tar 压缩目录</span><br><span class="line">zip -r xxx.zip 压缩目录</span><br></pre></td></tr></table></figure><p><strong>解压缩命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf xxx.tar</span><br><span class="line"><span class="comment"># 解压到指定文件夹</span></span><br><span class="line">tar zxvf xxx.tar -C /xxx/yyy/</span><br><span class="line">unzip xxx.zip</span><br></pre></td></tr></table></figure><p><strong>变更文件所属用户, 用户组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown shawn:shawn xxx.log</span><br></pre></td></tr></table></figure><p><strong>cp, scp, mkdir</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制</span></span><br><span class="line">cp xxx.log</span><br><span class="line"><span class="comment"># 复制并强制覆盖同名文件</span></span><br><span class="line">cp -f xxx.log</span><br><span class="line"><span class="comment"># 复制文件夹</span></span><br><span class="line">cp -r xxx(源文件夹) yyy(目标文件夹)</span><br><span class="line"><span class="comment"># 远程复制</span></span><br><span class="line">scp -P ssh端口 username@10.10.10.101:/home/username/xxx /home/xxx</span><br><span class="line"><span class="comment"># 级联创建目录</span></span><br><span class="line">mkdir -p /xxx/yyy/zzz</span><br><span class="line"><span class="comment"># 批量创建文件夹, 会在test,main下都创建java, resources文件夹</span></span><br><span class="line">mkdir -p src/&#123;<span class="built_in">test</span>,main&#125;/&#123;java,resources&#125;</span><br></pre></td></tr></table></figure><p><strong>比较两个文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -u 1.txt 2.txt</span><br></pre></td></tr></table></figure><p><strong>日志输出的字节数,可以用作性能测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果做性能测试, 可以每执行一次, 往日志里面输出 “.” , 这样日志中的字节数就是实际的性能测试运行的次数, 还可以看见实时速率.</span></span><br><span class="line">tail -f xxx.log | pv -bt</span><br></pre></td></tr></table></figure><p><strong>查看, 去除特殊字符</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看特殊字符</span></span><br><span class="line">cat -v xxx.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除特殊字符</span></span><br><span class="line">sed -i <span class="string">'s/^M//g’ env.sh  去除文件的特殊字符, 比如^M:  需要这样输入: ctrl+v+enter</span></span><br></pre></td></tr></table></figure><p><strong>处理因系统原因引起的文件中特殊字符的问题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以转换为该系统下的文件格式</span></span><br><span class="line">cat file.sh &gt; file.sh_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先将file.sh中文件内容复制下来然后运行, 然后粘贴内容, 最后ctrl + d 保存退出</span></span><br><span class="line">cat &gt; file1.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在vim中通过如下设置文件编码和文件格式</span></span><br><span class="line">:<span class="built_in">set</span> fileencodings=utf-8 ，然后 w （存盘）一下即可转化为 utf8 格式，</span><br><span class="line">:<span class="built_in">set</span> fileformat=unix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在mac下使用dos2unix进行文件格式化</span></span><br><span class="line">find . -name <span class="string">"*.sh"</span> | xargs dos2unix</span><br></pre></td></tr></table></figure><p><strong>tee重定向的同时输出到屏幕</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $0&#125;'</span> xxx.log | tee test.log</span><br></pre></td></tr></table></figure><h3 id="3-3-检索相关">3.3 检索相关</h3><p><strong>grep</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向匹配, 查找不包含xxx的内容</span></span><br><span class="line">grep -v xxx</span><br><span class="line"><span class="comment"># 排除所有空行</span></span><br><span class="line">grep -v <span class="string">'^$'</span></span><br><span class="line"><span class="comment"># 返回结果 2,则说明第二行是空行</span></span><br><span class="line">grep -n “^$” 111.txt    </span><br><span class="line"><span class="comment"># 查询以abc开头的行</span></span><br><span class="line">grep -n “^abc” 111.txt </span><br><span class="line"><span class="comment"># 同时列出该词语出现在文章的第几行</span></span><br><span class="line">grep <span class="string">'xxx'</span> -n xxx.log</span><br><span class="line"><span class="comment"># 计算一下该字串出现的次数</span></span><br><span class="line">grep <span class="string">'xxx'</span> -c xxx.log</span><br><span class="line"><span class="comment"># 比对的时候，不计较大小写的不同</span></span><br><span class="line">grep <span class="string">'xxx'</span> -i xxx.log</span><br></pre></td></tr></table></figure><p><strong>awk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以':' 为分隔符,如果第五域有user则输出该行</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;if ($5 ~ /user/) print $0&#125;'</span> /etc/passwd </span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计单个文件中某个字符（串）(中文无效)出现的次数</span></span><br><span class="line">awk -v RS=<span class="string">'character'</span> <span class="string">'END &#123;print --NR&#125;'</span> xxx.txt</span><br></pre></td></tr></table></figure><p><strong>find检索命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在目录下找后缀是.mysql的文件</span></span><br><span class="line">find /home/eagleye -name <span class="string">'*.mysql'</span> -<span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会从 /usr 目录开始往下找，找最近3天之内存取过的文件。</span></span><br><span class="line">find /usr -atime 3 –<span class="built_in">print</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 会从 /usr 目录开始往下找，找最近5天之内修改过的文件。</span></span><br><span class="line">find /usr -ctime 5 –<span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会从 /doc 目录开始往下找，找jacky 的、文件名开头是 j的文件。  </span></span><br><span class="line">find /doc -user jacky -name <span class="string">'j*'</span> –<span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会从 /doc 目录开始往下找，找寻文件名是 ja 开头或者 ma开头的文件。</span></span><br><span class="line">find /doc \( -name <span class="string">'ja*'</span> -o- -name <span class="string">'ma*'</span> \) –<span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  会从 /doc 目录开始往下找，找到凡是文件名结尾为 bak的文件，把它删除掉。-exec 选项是执行的意思，rm 是删除命令，&#123; &#125; 表示文件名，“\;”是规定的命令结尾。 </span></span><br><span class="line">find /doc -name <span class="string">'*bak'</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><h3 id="3-4-网络相关">3.4 网络相关</h3><p><strong>查看什么进程使用了该端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:port</span><br></pre></td></tr></table></figure><p><strong>获取本机ip地址</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk <span class="string">'&#123;print $2&#125;'</span>|tr -d <span class="string">"addr:"</span></span><br></pre></td></tr></table></figure><p><strong>iptables</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看iptables状态</span></span><br><span class="line">service iptables status</span><br><span class="line"><span class="comment"># 要封停一个ip</span></span><br><span class="line">iptables -I INPUT -s ***.***.***.*** -j DROP</span><br><span class="line"><span class="comment"># 要解封一个IP，使用下面这条命令：</span></span><br><span class="line">iptables -D INPUT -s ***.***.***.*** -j DROP</span><br><span class="line"><span class="comment">#备注: 参数-I是表示Insert（添加），-D表示Delete（删除）。后面跟的是规则，INPUT表示入站，***.***.***.***表示要封停的IP，DROP表示放弃连接。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启9090端口的访问</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 9090 -j ACCEPT </span><br><span class="line"></span><br><span class="line"><span class="comment"># 防火墙开启、关闭、重启</span></span><br><span class="line">/etc/init.d/iptables status</span><br><span class="line">/etc/init.d/iptables start</span><br><span class="line">/etc/init.d/iptables stop</span><br><span class="line">/etc/init.d/iptables restart</span><br></pre></td></tr></table></figure><p><strong>nc命令, tcp调试利器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#给某一个endpoint发送TCP请求,就将data的内容发送到对端</span></span><br><span class="line">nc 192.168.0.11 8000 &lt; data.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#nc可以当做服务器，监听某个端口号,把某一次请求的内容存储到received_data里</span></span><br><span class="line">nc -l 8000 &gt; received_data</span><br><span class="line"></span><br><span class="line"><span class="comment">#上边只监听一次，如果多次可以加上-k参数</span></span><br><span class="line">nc -lk 8000</span><br></pre></td></tr></table></figure><p><strong>tcpdump</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dump出本机12301端口的tcp包</span></span><br><span class="line">tcpdump -i em1 tcp port 12301 -s 1500 -w abc.pcap</span><br></pre></td></tr></table></figure><p><strong>跟踪网络路由路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># traceroute默认使用udp方式, 如果是-I则改成icmp方式</span></span><br><span class="line">traceroute -I www.163.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从ttl第3跳跟踪</span></span><br><span class="line">traceroute -M 3 www.163.com  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上端口跟踪</span></span><br><span class="line">traceroute -p 8080 192.168.10.11</span><br></pre></td></tr></table></figure><p><strong>ss</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示本地打开的所有端口</span></span><br><span class="line">ss -l </span><br><span class="line"><span class="comment"># 显示每个进程具体打开的socket</span></span><br><span class="line">ss -pl </span><br><span class="line"><span class="comment"># 显示所有tcp socket</span></span><br><span class="line">ss -t -a </span><br><span class="line"><span class="comment"># 显示所有的UDP Socekt</span></span><br><span class="line">ss -u -a </span><br><span class="line"><span class="comment"># 显示所有已建立的SMTP连接</span></span><br><span class="line">ss -o state established <span class="string">'( dport = :smtp or sport = :smtp )'</span>  </span><br><span class="line"><span class="comment"># 显示所有已建立的HTTP连接 </span></span><br><span class="line">ss -o state established <span class="string">'( dport = :http or sport = :http )'</span>  </span><br><span class="line"><span class="comment"># 找出所有连接X服务器的进程</span></span><br><span class="line">ss -x src /tmp/.X11-unix/*  </span><br><span class="line"><span class="comment"># 列出当前socket统计信息</span></span><br><span class="line">ss -s </span><br><span class="line"> </span><br><span class="line"><span class="comment">#解释：netstat是遍历/proc下面每个PID目录，ss直接读/proc/net下面的统计信息。所以ss执行的时候消耗资源以及消耗的时间都比netstat少很多</span></span><br></pre></td></tr></table></figure><p><strong>netstat</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出每个ip的连接数，以及总的各个状态的连接数</span></span><br><span class="line">netstat -n | awk <span class="string">'/^tcp/ &#123;n=split($(NF-1),array,":");if(n&lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf("%-20s %s\n", a, S[a]);++I&#125;printf("%-20s %s\n","TOTAL_IP",I);for(a in s) printf("%-20s %s\n",a, s[a]);printf("%-20s %s\n","TOTAL_LINK",N);&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计所有连接状态, </span></span><br><span class="line"><span class="comment"># CLOSED：无连接是活动的或正在进行</span></span><br><span class="line"><span class="comment"># LISTEN：服务器在等待进入呼叫</span></span><br><span class="line"><span class="comment"># SYN_RECV：一个连接请求已经到达，等待确认</span></span><br><span class="line"><span class="comment"># SYN_SENT：应用已经开始，打开一个连接</span></span><br><span class="line"><span class="comment"># ESTABLISHED：正常数据传输状态</span></span><br><span class="line"><span class="comment"># FIN_WAIT1：应用说它已经完成</span></span><br><span class="line"><span class="comment"># FIN_WAIT2：另一边已同意释放</span></span><br><span class="line"><span class="comment"># ITMED_WAIT：等待所有分组死掉</span></span><br><span class="line"><span class="comment"># CLOSING：两边同时尝试关闭</span></span><br><span class="line"><span class="comment"># TIME_WAIT：主动关闭连接一端还没有等到另一端反馈期间的状态</span></span><br><span class="line"><span class="comment"># LAST_ACK：等待所有分组死掉</span></span><br><span class="line">netstat -n | awk <span class="string">'/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,"\t",state[key]&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找较多time_wait连接</span></span><br><span class="line">netstat -n|grep TIME_WAIT|awk <span class="string">'&#123;print $5&#125;'</span>|sort|uniq -c|sort -rn|head -n20</span><br></pre></td></tr></table></figure><h3 id="3-5-监控linux性能命令">3.5 监控linux性能命令</h3><p><strong>top</strong></p><blockquote><p>按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序, 然后回车。而大写的 R 键可以将当前的排序倒转</p></blockquote><table><thead><tr><th style="text-align:left">列名</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">PID</td><td style="text-align:left">进程id</td></tr><tr><td style="text-align:left">PPID</td><td style="text-align:left">父进程id</td></tr><tr><td style="text-align:left">RUSER</td><td style="text-align:left">Real user name</td></tr><tr><td style="text-align:left">UID</td><td style="text-align:left">进程所有者的用户id</td></tr><tr><td style="text-align:left">USER</td><td style="text-align:left">进程所有者的用户名</td></tr><tr><td style="text-align:left">GROUP</td><td style="text-align:left">进程所有者的组名</td></tr><tr><td style="text-align:left">TTY</td><td style="text-align:left">启动进程的终端名。不是从终端启动的进程则显示为 ?</td></tr><tr><td style="text-align:left">PR</td><td style="text-align:left">优先级</td></tr><tr><td style="text-align:left">NI</td><td style="text-align:left">nice值。负值表示高优先级，正值表示低优先级</td></tr><tr><td style="text-align:left">P</td><td style="text-align:left">最后使用的CPU，仅在多CPU环境下有意义</td></tr><tr><td style="text-align:left">%CPU</td><td style="text-align:left">上次更新到现在的CPU时间占用百分比</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">进程使用的CPU时间总计，单位秒</td></tr><tr><td style="text-align:left">TIME+</td><td style="text-align:left">进程使用的CPU时间总计，单位1/100秒</td></tr><tr><td style="text-align:left">%MEM</td><td style="text-align:left">进程使用的物理内存百分比</td></tr><tr><td style="text-align:left">VIRT</td><td style="text-align:left">进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</td></tr><tr><td style="text-align:left">SWAP</td><td style="text-align:left">进程使用的虚拟内存中，被换出的大小，单位kb。</td></tr><tr><td style="text-align:left">RES</td><td style="text-align:left">进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</td></tr><tr><td style="text-align:left">CODE</td><td style="text-align:left">可执行代码占用的物理内存大小，单位kb</td></tr><tr><td style="text-align:left">DATA</td><td style="text-align:left">可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</td></tr><tr><td style="text-align:left">SHR</td><td style="text-align:left">共享内存大小，单位kb</td></tr><tr><td style="text-align:left">nFLT</td><td style="text-align:left">页面错误次数</td></tr><tr><td style="text-align:left">nDRT</td><td style="text-align:left">最后一次写入到现在，被修改过的页面数。</td></tr><tr><td style="text-align:left">S</td><td style="text-align:left">进程状态。D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程</td></tr><tr><td style="text-align:left">COMMAND</td><td style="text-align:left">命令名/命令行</td></tr><tr><td style="text-align:left">WCHAN</td><td style="text-align:left">若该进程在睡眠，则显示睡眠中的系统函数名</td></tr><tr><td style="text-align:left">Flags</td><td style="text-align:left">任务标志，参考 sched.h</td></tr></tbody></table><p><strong>dmesg,查看系统日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg</span><br></pre></td></tr></table></figure><p><strong>iostat,磁盘IO情况监控</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iostat -xz 1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。</span></span><br><span class="line"><span class="comment"># await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。</span></span><br><span class="line"><span class="comment"># avgqu-sz：向设备发出的请求平均数量。如果这个数值大于1，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。</span></span><br><span class="line"><span class="comment"># %util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。</span></span><br><span class="line"><span class="comment"># 如果显示的是逻辑设备的数据，那么设备利用率不代表后端实际的硬件设备已经饱和。值得注意的是，即使IO性能不理想，也不一定意味这应用程序性能会不好，可以利用诸如预读取、写缓存等策略提升应用性能。</span></span><br></pre></td></tr></table></figure><p><strong>free,内存使用情况</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br><span class="line"></span><br><span class="line"><span class="comment">#====结果====</span></span><br><span class="line">total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          1002        769        232          0         62        421</span><br><span class="line">-/+ buffers/cache:          286        715</span><br><span class="line">Swap:          1153          0       1153</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#====解释=====</span></span><br><span class="line"><span class="comment">#第一部分Mem行:</span></span><br><span class="line"><span class="comment">#total 内存总数: 1002M</span></span><br><span class="line"><span class="comment">#used 已经使用的内存数: 769M</span></span><br><span class="line"><span class="comment">#free 空闲的内存数: 232M</span></span><br><span class="line"><span class="comment">#shared 当前已经废弃不用,总是0</span></span><br><span class="line"><span class="comment">#buffers Buffer 缓存内存数: 62M</span></span><br><span class="line"><span class="comment">#cached Page 缓存内存数:421M</span></span><br><span class="line"><span class="comment">#关系：total(1002M) = used(769M) + free(232M)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二部分(-/+ buffers/cache):</span></span><br><span class="line"><span class="comment">#(-buffers/cache) used内存数：286M (指的第一部分Mem行中的used – buffers – cached)</span></span><br><span class="line"><span class="comment">#(+buffers/cache) free内存数: 715M (指的第一部分Mem行中的free + buffers + cached)</span></span><br><span class="line"><span class="comment">#可见-buffers/cache反映的是被程序实实在在吃掉的内存,而+buffers/cache反映的是可以挪用的内存总数.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第三部分是指交换分区</span></span><br></pre></td></tr></table></figure><p><strong>sar,查看网络吞吐状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sar命令在这里可以查看网络设备的吞吐率。在排查性能问题时，可以通过网络设备的吞吐量，判断网络设备是否已经饱和</span></span><br><span class="line">sar -n DEV 1</span><br><span class="line"> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sar命令在这里用于查看TCP连接状态，其中包括：</span></span><br><span class="line"><span class="comment"># active/s：每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接；</span></span><br><span class="line"><span class="comment"># passive/s：每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接；</span></span><br><span class="line"><span class="comment"># retrans/s：每秒TCP重传数量；</span></span><br><span class="line"><span class="comment"># TCP连接数可以用来判断性能问题是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包</span></span><br><span class="line">sar -n TCP,ETCP 1</span><br></pre></td></tr></table></figure><p><strong>vmstat, 给定时间监控CPU使用率, 内存使用, 虚拟内存交互, IO读写</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2表示每2秒采集一次状态信息, 1表示只采集一次(忽略既是一直采集)</span></span><br><span class="line">vmstat 2 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#===举例====</span></span><br><span class="line">r b swpd free buff cache si so bi bo <span class="keyword">in</span> cs us sy id wa</span><br><span class="line">1 0 0 3499840 315836 3819660 0 0 0 1 2 0 0 0 100 0</span><br><span class="line">0 0 0 3499584 315836 3819660 0 0 0 0 88 158 0 0 100 0</span><br><span class="line">0 0 0 3499708 315836 3819660 0 0 0 2 86 162 0 0 100 0</span><br><span class="line">0 0 0 3499708 315836 3819660 0 0 0 10 81 151 0 0 100 0</span><br><span class="line">1 0 0 3499732 315836 3819660 0 0 0 2 83 154 0 0 100 0</span><br></pre></td></tr></table></figure><ul><li><strong>r</strong> 表示运行队列(就是说多少个进程真的分配到CPU)，我测试的服务器目前CPU比较空闲，没什么程序在跑，当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。</li><li><strong>b</strong> 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。</li><li><strong>swpd</strong> 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。</li><li><strong>free</strong> 空闲的物理内存的大小，我的机器内存总共8G，剩余3415M。</li><li><strong>buff</strong> Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用300多M</li><li><strong>cache</strong> cache直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用300多M(这里是Linux/Unix的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)</li><li><strong>si</strong> 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。</li><li><strong>so</strong> 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。</li><li><strong>bi</strong> 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte，我本机上没什么IO操作，所以一直是0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到140000/s，磁盘写入速度差不多140M每秒</li><li><strong>bo</strong> 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。</li><li><strong>in</strong> 每秒CPU的中断次数，包括时间中断</li><li><strong>cs</strong> 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。</li><li><strong>us</strong> 用户CPU时间，我曾经在一个做加密解密很频繁的服务器上，可以看到us接近100,r运行队列达到80(机器在做压力测试，性能表现不佳)。</li><li><strong>sy</strong> 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。</li><li><strong>id</strong> 空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。</li><li><strong>wt</strong> 等待IO CPU时间。</li></ul><h1>二、Linux必备150个命令大全</h1><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">功能说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>线上查询及帮助命令 (2 个)</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>man</strong></td><td style="text-align:left">查看命令帮助，命令的词典，更复杂的还有 info，但不常用。</td></tr><tr><td style="text-align:left"><strong>help</strong></td><td style="text-align:left">查看 Linux 内置命令的帮助，比如 cd 命令。</td></tr><tr><td style="text-align:left"><strong>文件和目录操作命令 (18 个)</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>ls</strong></td><td style="text-align:left">全拼 list，功能是列出目录的内容及其内容属性信息。</td></tr><tr><td style="text-align:left"><strong>cd</strong></td><td style="text-align:left">全拼 change directory，功能是从当前工作目录切换到指定的工作目录。</td></tr><tr><td style="text-align:left"><strong>cp</strong></td><td style="text-align:left">全拼 copy，其功能为复制文件或目录。</td></tr><tr><td style="text-align:left"><strong>find</strong></td><td style="text-align:left">查找的意思，用于查找目录及目录下的文件。</td></tr><tr><td style="text-align:left"><strong>mkdir</strong></td><td style="text-align:left">全拼 make directories，其功能是创建目录。</td></tr><tr><td style="text-align:left"><strong>mv</strong></td><td style="text-align:left">全拼 move，其功能是移动或重命名文件。</td></tr><tr><td style="text-align:left"><strong>pwd</strong></td><td style="text-align:left">全拼 print working directory，其功能是显示当前工作目录的绝对路径。</td></tr><tr><td style="text-align:left"><strong>rename</strong></td><td style="text-align:left">用于重命名文件。</td></tr><tr><td style="text-align:left"><strong>rm</strong></td><td style="text-align:left">全拼 remove，其功能是删除一个或多个文件或目录。</td></tr><tr><td style="text-align:left"><strong>rmdir</strong></td><td style="text-align:left">全拼 remove empty directories，功能是删除空目录。</td></tr><tr><td style="text-align:left"><strong>touch</strong></td><td style="text-align:left">创建新的空文件，改变已有文件的时间戳属性。</td></tr><tr><td style="text-align:left"><strong>tree</strong></td><td style="text-align:left">功能是以树形结构显示目录下的内容。</td></tr><tr><td style="text-align:left"><strong>basename</strong></td><td style="text-align:left">显示文件名或目录名。</td></tr><tr><td style="text-align:left"><strong>dirname</strong></td><td style="text-align:left">显示文件或目录路径。</td></tr><tr><td style="text-align:left"><strong>chattr</strong></td><td style="text-align:left">改变文件的扩展属性。</td></tr><tr><td style="text-align:left"><strong>lsattr</strong></td><td style="text-align:left">查看文件扩展属性。</td></tr><tr><td style="text-align:left"><strong>file</strong></td><td style="text-align:left">显示文件的类型。</td></tr><tr><td style="text-align:left"><strong>md5sum</strong></td><td style="text-align:left">计算和校验文件的 MD5 值。</td></tr><tr><td style="text-align:left"><strong>查看文件及内容处理命令（21 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>cat</strong></td><td style="text-align:left">全拼 concatenate，功能是用于连接多个文件并且打印到屏幕输出或重定向到指定文件中。</td></tr><tr><td style="text-align:left"><strong>tac</strong></td><td style="text-align:left">tac 是 cat 的反向拼写，因此命令的功能为反向显示文件内容。</td></tr><tr><td style="text-align:left"><strong>more</strong></td><td style="text-align:left">分页显示文件内容。</td></tr><tr><td style="text-align:left"><strong>less</strong></td><td style="text-align:left">分页显示文件内容，more 命令的相反用法。</td></tr><tr><td style="text-align:left"><strong>head</strong></td><td style="text-align:left">显示文件内容的头部。</td></tr><tr><td style="text-align:left"><strong>tail</strong></td><td style="text-align:left">显示文件内容的尾部。</td></tr><tr><td style="text-align:left"><strong>cut</strong></td><td style="text-align:left">将文件的每一行按指定分隔符分割并输出。</td></tr><tr><td style="text-align:left"><strong>split</strong></td><td style="text-align:left">分割文件为不同的小片段。</td></tr><tr><td style="text-align:left"><strong>paste</strong></td><td style="text-align:left">按行合并文件内容。</td></tr><tr><td style="text-align:left"><strong>sort</strong></td><td style="text-align:left">对文件的文本内容排序。</td></tr><tr><td style="text-align:left"><strong>uniq</strong></td><td style="text-align:left">去除重复行。oldboy</td></tr><tr><td style="text-align:left"><strong>wc</strong></td><td style="text-align:left">统计文件的行数、单词数或字节数。</td></tr><tr><td style="text-align:left"><strong>iconv</strong></td><td style="text-align:left">转换文件的编码格式。</td></tr><tr><td style="text-align:left"><strong>dos2unix</strong></td><td style="text-align:left">将 DOS 格式文件转换成 UNIX 格式。</td></tr><tr><td style="text-align:left"><strong>diff</strong></td><td style="text-align:left">全拼 difference，比较文件的差异，常用于文本文件。</td></tr><tr><td style="text-align:left"><strong>vimdiff</strong></td><td style="text-align:left">命令行可视化文件比较工具，常用于文本文件。</td></tr><tr><td style="text-align:left"><strong>rev</strong></td><td style="text-align:left">反向输出文件内容。</td></tr><tr><td style="text-align:left"><strong>grep/egrep</strong></td><td style="text-align:left">过滤字符串，三剑客老三。</td></tr><tr><td style="text-align:left"><strong>join</strong></td><td style="text-align:left">按两个文件的相同字段合并。</td></tr><tr><td style="text-align:left"><strong>tr</strong></td><td style="text-align:left">替换或删除字符。</td></tr><tr><td style="text-align:left"><strong>vi/vim</strong></td><td style="text-align:left">命令行文本编辑器。</td></tr><tr><td style="text-align:left"><strong>文件压缩及解压缩命令（4 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>tar</strong></td><td style="text-align:left">打包压缩。oldboy</td></tr><tr><td style="text-align:left"><strong>unzip</strong></td><td style="text-align:left">解压文件。</td></tr><tr><td style="text-align:left"><strong>gzip</strong></td><td style="text-align:left">gzip 压缩工具。</td></tr><tr><td style="text-align:left"><strong>zip</strong></td><td style="text-align:left">压缩工具。</td></tr><tr><td style="text-align:left"><strong>信息显示命令（11 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>uname</strong></td><td style="text-align:left">显示操作系统相关信息的命令。</td></tr><tr><td style="text-align:left"><strong>hostname</strong></td><td style="text-align:left">显示或者设置当前系统的主机名。</td></tr><tr><td style="text-align:left"><strong>dmesg</strong></td><td style="text-align:left">显示开机信息，用于诊断系统故障。</td></tr><tr><td style="text-align:left"><strong>uptime</strong></td><td style="text-align:left">显示系统运行时间及负载。</td></tr><tr><td style="text-align:left"><strong>stat</strong></td><td style="text-align:left">显示文件或文件系统的状态。</td></tr><tr><td style="text-align:left"><strong>du</strong></td><td style="text-align:left">计算磁盘空间使用情况。</td></tr><tr><td style="text-align:left"><strong>df</strong></td><td style="text-align:left">报告文件系统磁盘空间的使用情况。</td></tr><tr><td style="text-align:left"><strong>top</strong></td><td style="text-align:left">实时显示系统资源使用情况。</td></tr><tr><td style="text-align:left"><strong>free</strong></td><td style="text-align:left">查看系统内存。</td></tr><tr><td style="text-align:left"><strong>date</strong></td><td style="text-align:left">显示与设置系统时间。</td></tr><tr><td style="text-align:left"><strong>cal</strong></td><td style="text-align:left">查看日历等时间信息。</td></tr><tr><td style="text-align:left"><strong>搜索文件命令（4 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>which</strong></td><td style="text-align:left">查找二进制命令，按环境变量 PATH 路径查找。</td></tr><tr><td style="text-align:left"><strong>find</strong></td><td style="text-align:left">从磁盘遍历查找文件或目录。</td></tr><tr><td style="text-align:left"><strong>whereis</strong></td><td style="text-align:left">查找二进制命令，按环境变量 PATH 路径查找。</td></tr><tr><td style="text-align:left"><strong>locate</strong></td><td style="text-align:left">从数据库 (/var/lib/mlocate/mlocate.db) 查找命令，使用 updatedb 更新库。</td></tr><tr><td style="text-align:left"><strong>用户管理命令（10 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>useradd</strong></td><td style="text-align:left">添加用户。</td></tr><tr><td style="text-align:left"><strong>usermod</strong></td><td style="text-align:left">修改系统已经存在的用户属性。</td></tr><tr><td style="text-align:left"><strong>userdel</strong></td><td style="text-align:left">删除用户。</td></tr><tr><td style="text-align:left"><strong>groupadd</strong></td><td style="text-align:left">添加用户组。</td></tr><tr><td style="text-align:left"><strong>passwd</strong></td><td style="text-align:left">修改用户密码。</td></tr><tr><td style="text-align:left"><strong>chage</strong></td><td style="text-align:left">修改用户密码有效期限。</td></tr><tr><td style="text-align:left"><strong>id</strong></td><td style="text-align:left">查看用户的 uid,gid 及归属的用户组。</td></tr><tr><td style="text-align:left"><strong>su</strong></td><td style="text-align:left">切换用户身份。</td></tr><tr><td style="text-align:left"><strong>visudo</strong></td><td style="text-align:left">编辑 / etc/sudoers 文件的专属命令。</td></tr><tr><td style="text-align:left"><strong>sudo</strong></td><td style="text-align:left">以另外一个用户身份（默认 root 用户）执行事先在 sudoers 文件允许的命令。</td></tr><tr><td style="text-align:left"><strong>基础网络操作命令（11 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>telnet</strong></td><td style="text-align:left">使用 TELNET 协议远程登录。</td></tr><tr><td style="text-align:left"><strong>ssh</strong></td><td style="text-align:left">使用 SSH 加密协议远程登录。</td></tr><tr><td style="text-align:left"><strong>scp</strong></td><td style="text-align:left">全拼 secure copy，用于不同主机之间复制文件。</td></tr><tr><td style="text-align:left"><strong>wget</strong></td><td style="text-align:left">命令行下载文件。</td></tr><tr><td style="text-align:left"><strong>ping</strong></td><td style="text-align:left">测试主机之间网络的连通性。</td></tr><tr><td style="text-align:left"><strong>route</strong></td><td style="text-align:left">显示和设置 linux 系统的路由表。</td></tr><tr><td style="text-align:left"><strong>ifconfig</strong></td><td style="text-align:left">查看、配置、启用或禁用网络接口的命令。</td></tr><tr><td style="text-align:left"><strong>ifup</strong></td><td style="text-align:left">启动网卡。</td></tr><tr><td style="text-align:left"><strong>ifdown</strong></td><td style="text-align:left">关闭网卡。</td></tr><tr><td style="text-align:left"><strong>netstat</strong></td><td style="text-align:left">查看网络状态。</td></tr><tr><td style="text-align:left"><strong>ss</strong></td><td style="text-align:left">查看网络状态。</td></tr><tr><td style="text-align:left"><strong>深入网络操作命令（9 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>nmap</strong></td><td style="text-align:left">网络扫描命令。</td></tr><tr><td style="text-align:left"><strong>lsof</strong></td><td style="text-align:left">全名 list open files，也就是列举系统中已经被打开的文件。</td></tr><tr><td style="text-align:left"><strong>mail</strong></td><td style="text-align:left">发送和接收邮件。</td></tr><tr><td style="text-align:left"><strong>mutt</strong></td><td style="text-align:left">邮件管理命令。</td></tr><tr><td style="text-align:left"><strong>nslookup</strong></td><td style="text-align:left">交互式查询互联网 DNS 服务器的命令。</td></tr><tr><td style="text-align:left"><strong>dig</strong></td><td style="text-align:left">查找 DNS 解析过程。</td></tr><tr><td style="text-align:left"><strong>host</strong></td><td style="text-align:left">查询 DNS 的命令。</td></tr><tr><td style="text-align:left"><strong>traceroute</strong></td><td style="text-align:left">追踪数据传输路由状况。</td></tr><tr><td style="text-align:left"><strong>tcpdump</strong></td><td style="text-align:left">命令行的抓包工具。</td></tr><tr><td style="text-align:left"><strong>有关磁盘与文件系统的命令（16 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>mount</strong></td><td style="text-align:left">挂载文件系统。</td></tr><tr><td style="text-align:left"><strong>umount</strong></td><td style="text-align:left">卸载文件系统。</td></tr><tr><td style="text-align:left"><strong>fsck</strong></td><td style="text-align:left">检查并修复 Linux 文件系统。</td></tr><tr><td style="text-align:left"><strong>dd</strong></td><td style="text-align:left">转换或复制文件。</td></tr><tr><td style="text-align:left"><strong>dumpe2fs</strong></td><td style="text-align:left">导出 ext2/ext3/ext4 文件系统信息。</td></tr><tr><td style="text-align:left"><strong>dump</strong></td><td style="text-align:left">ext2/3/4 文件系统备份工具。</td></tr><tr><td style="text-align:left"><strong>fdisk</strong></td><td style="text-align:left">磁盘分区命令，适用于 2TB 以下磁盘分区。</td></tr><tr><td style="text-align:left"><strong>parted</strong></td><td style="text-align:left">磁盘分区命令，没有磁盘大小限制，常用于 2TB 以下磁盘分区。</td></tr><tr><td style="text-align:left"><strong>mkfs</strong></td><td style="text-align:left">格式化创建 Linux 文件系统。</td></tr><tr><td style="text-align:left"><strong>partprobe</strong></td><td style="text-align:left">更新内核的硬盘分区表信息。</td></tr><tr><td style="text-align:left"><strong>e2fsck</strong></td><td style="text-align:left">检查 ext2/ext3/ext4 类型文件系统。</td></tr><tr><td style="text-align:left"><strong>mkswap</strong></td><td style="text-align:left">创建 Linux 交换分区。</td></tr><tr><td style="text-align:left"><strong>swapon</strong></td><td style="text-align:left">启用交换分区。</td></tr><tr><td style="text-align:left"><strong>swapoff</strong></td><td style="text-align:left">关闭交换分区。</td></tr><tr><td style="text-align:left"><strong>sync</strong></td><td style="text-align:left">将内存缓冲区内的数据写入磁盘。</td></tr><tr><td style="text-align:left"><strong>resize2fs</strong></td><td style="text-align:left">调整 ext2/ext3/ext4 文件系统大小。</td></tr><tr><td style="text-align:left"><strong>系统权限及用户授权相关命令（4 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>chmod</strong></td><td style="text-align:left">改变文件或目录权限。</td></tr><tr><td style="text-align:left"><strong>chown</strong></td><td style="text-align:left">改变文件或目录的属主和属组。</td></tr><tr><td style="text-align:left"><strong>chgrp</strong></td><td style="text-align:left">更改文件用户组。</td></tr><tr><td style="text-align:left"><strong>umask</strong></td><td style="text-align:left">显示或设置权限掩码。</td></tr><tr><td style="text-align:left"><strong>查看系统用户登陆信息的命令（7 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>whoami</strong></td><td style="text-align:left">显示当前有效的用户名称，相当于执行 id -un 命令。</td></tr><tr><td style="text-align:left"><strong>who</strong></td><td style="text-align:left">显示目前登录系统的用户信息。</td></tr><tr><td style="text-align:left"><strong>w</strong></td><td style="text-align:left">显示已经登陆系统的用户列表，并显示用户正在执行的指令。</td></tr><tr><td style="text-align:left"><strong>last</strong></td><td style="text-align:left">显示登入系统的用户。</td></tr><tr><td style="text-align:left"><strong>lastlog</strong></td><td style="text-align:left">显示系统中所有用户最近一次登录信息。</td></tr><tr><td style="text-align:left"><strong>users</strong></td><td style="text-align:left">显示当前登录系统的所有用户的用户列表。</td></tr><tr><td style="text-align:left"><strong>finger</strong></td><td style="text-align:left">查找并显示用户信息。</td></tr><tr><td style="text-align:left"><strong>内置命令及其它（19 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>echo</strong></td><td style="text-align:left">打印变量，或直接输出指定的字符串</td></tr><tr><td style="text-align:left"><strong>printf</strong></td><td style="text-align:left">将结果格式化输出到标准输出。</td></tr><tr><td style="text-align:left"><strong>rpm</strong></td><td style="text-align:left">管理 rpm 包的命令。</td></tr><tr><td style="text-align:left"><strong>yum</strong></td><td style="text-align:left">自动化简单化地管理 rpm 包的命令。</td></tr><tr><td style="text-align:left"><strong>watch</strong></td><td style="text-align:left">周期性的执行给定的命令，并将命令的输出以全屏方式显示。</td></tr><tr><td style="text-align:left"><strong>alias</strong></td><td style="text-align:left">设置系统别名。</td></tr><tr><td style="text-align:left"><strong>unalias</strong></td><td style="text-align:left">取消系统别名。</td></tr><tr><td style="text-align:left"><strong>date</strong></td><td style="text-align:left">查看或设置系统时间。</td></tr><tr><td style="text-align:left"><strong>clear</strong></td><td style="text-align:left">清除屏幕，简称清屏。</td></tr><tr><td style="text-align:left"><strong>history</strong></td><td style="text-align:left">查看命令执行的历史纪录。</td></tr><tr><td style="text-align:left"><strong>eject</strong></td><td style="text-align:left">弹出光驱。</td></tr><tr><td style="text-align:left"><strong>time</strong></td><td style="text-align:left">计算命令执行时间。</td></tr><tr><td style="text-align:left"><strong>nc</strong></td><td style="text-align:left">功能强大的网络工具。</td></tr><tr><td style="text-align:left"><strong>xargs</strong></td><td style="text-align:left">将标准输入转换成命令行参数。</td></tr><tr><td style="text-align:left"><strong>exec</strong></td><td style="text-align:left">调用并执行指令的命令。</td></tr><tr><td style="text-align:left"><strong>export</strong></td><td style="text-align:left">设置或者显示环境变量。</td></tr><tr><td style="text-align:left"><strong>unset</strong></td><td style="text-align:left">删除变量或函数。</td></tr><tr><td style="text-align:left"><strong>type</strong></td><td style="text-align:left">用于判断另外一个命令是否是内置命令。</td></tr><tr><td style="text-align:left"><strong>bc</strong></td><td style="text-align:left">命令行科学计算器</td></tr><tr><td style="text-align:left"><strong>系统管理与性能监视命令 (9 个)</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>chkconfig</strong></td><td style="text-align:left">管理 Linux 系统开机启动项。</td></tr><tr><td style="text-align:left"><strong>vmstat</strong></td><td style="text-align:left">虚拟内存统计。</td></tr><tr><td style="text-align:left"><strong>mpstat</strong></td><td style="text-align:left">显示各个可用 CPU 的状态统计。</td></tr><tr><td style="text-align:left"><strong>iostat</strong></td><td style="text-align:left">统计系统 IO。</td></tr><tr><td style="text-align:left"><strong>sar</strong></td><td style="text-align:left">全面地获取系统的 CPU、运行队列、磁盘 I/O、分页（交换区）、内存、 CPU 中断和网络等性能数据。</td></tr><tr><td style="text-align:left"><strong>ipcs</strong></td><td style="text-align:left">用于报告 Linux 中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。</td></tr><tr><td style="text-align:left"><strong>ipcrm</strong></td><td style="text-align:left">用来删除一个或更多的消息队列、信号量集或者共享内存标识。</td></tr><tr><td style="text-align:left"><strong>strace</strong></td><td style="text-align:left">用于诊断、调试 Linux 用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。</td></tr><tr><td style="text-align:left"><strong>ltrace</strong></td><td style="text-align:left">命令会跟踪进程的库函数调用, 它会显现出哪个库函数被调用。</td></tr><tr><td style="text-align:left"><strong>关机 / 重启 / 注销和查看系统信息的命令（6 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>shutdown</strong></td><td style="text-align:left">关机。</td></tr><tr><td style="text-align:left"><strong>halt</strong></td><td style="text-align:left">关机。</td></tr><tr><td style="text-align:left"><strong>poweroff</strong></td><td style="text-align:left">关闭电源。</td></tr><tr><td style="text-align:left"><strong>logout</strong></td><td style="text-align:left">退出当前登录的 Shell。</td></tr><tr><td style="text-align:left"><strong>exit</strong></td><td style="text-align:left">退出当前登录的 Shell。</td></tr><tr><td style="text-align:left"><strong>Ctrl+d</strong></td><td style="text-align:left">退出当前登录的 Shell 的快捷键。</td></tr><tr><td style="text-align:left"><strong>进程管理相关命令（15 个）</strong></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>bg</strong></td><td style="text-align:left">将一个在后台暂停的命令，变成继续执行 （在后台执行）。</td></tr><tr><td style="text-align:left"><strong>fg</strong></td><td style="text-align:left">将后台中的命令调至前台继续运行。</td></tr><tr><td style="text-align:left"><strong>jobs</strong></td><td style="text-align:left">查看当前有多少在后台运行的命令。</td></tr><tr><td style="text-align:left"><strong>kill</strong></td><td style="text-align:left">终止进程。</td></tr><tr><td style="text-align:left"><strong>killall</strong></td><td style="text-align:left">通过进程名终止进程。</td></tr><tr><td style="text-align:left"><strong>pkill</strong></td><td style="text-align:left">通过进程名终止进程。</td></tr><tr><td style="text-align:left"><strong>crontab</strong></td><td style="text-align:left">定时任务命令。</td></tr><tr><td style="text-align:left"><strong>ps</strong></td><td style="text-align:left">显示进程的快照。</td></tr><tr><td style="text-align:left"><strong>pstree</strong></td><td style="text-align:left">树形显示进程。</td></tr><tr><td style="text-align:left"><strong>nice/renice</strong></td><td style="text-align:left">调整程序运行的优先级。</td></tr><tr><td style="text-align:left"><strong>nohup</strong></td><td style="text-align:left">忽略挂起信号运行指定的命令。</td></tr><tr><td style="text-align:left"><strong>pgrep</strong></td><td style="text-align:left">查找匹配条件的进程。</td></tr><tr><td style="text-align:left"><strong>runlevel</strong></td><td style="text-align:left">查看系统当前运行级别。</td></tr><tr><td style="text-align:left"><strong>init</strong></td><td style="text-align:left">切换运行级别。</td></tr><tr><td style="text-align:left"><strong>service</strong></td><td style="text-align:left">启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</td></tr></tbody></table><hr><p>参考文章：</p><p><a href="http://siye1982.github.io/2016/02/25/linux-list/" target="_blank" rel="noopener">http://siye1982.github.io/2016/02/25/linux-list/</a></p><p><a href="https://mp.weixin.qq.com/s/_y11v2aiRxOjR5Gw0q0Lcw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/_y11v2aiRxOjR5Gw0q0Lcw</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Java开发常用命令&lt;/h1&gt;
&lt;h2 id=&quot;1、前言&quot;&gt;1、前言&lt;/h2&gt;
&lt;p&gt;一般java开发者来说，或多或少都会接触到linux，因为许多服务都需要部署等，因此一些java常用的linux命令需要每一个java开发者都了解。这里总结一波，方便后期查找。入门级常用linux命令可以参考：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/114846900&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux常用命令操作&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://www.shawn22.xyz/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA(2021) 常用设置与快捷键</title>
    <link href="https://www.shawn22.xyz/posts/d0c0a46e.html"/>
    <id>https://www.shawn22.xyz/posts/d0c0a46e.html</id>
    <published>2022-05-16T11:31:56.000Z</published>
    <updated>2022-07-11T12:16:53.003Z</updated>
    
    <content type="html"><![CDATA[<h1>一、常用设置</h1><h2 id="1、显示工具条">1、显示工具条</h2><p>View–&gt;Appearance-&gt;Toolbar<br><img src="https://img-blog.csdnimg.cn/8d17b67dd7544c87a830d33f28380b1b.png" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="2、鼠标悬浮提示">2、鼠标悬浮提示</h2><p>File–&gt;settings–&gt;Editor–&gt;Code Editing–&gt;勾选Show quick documentation on hover<br><img src="https://img-blog.csdnimg.cn/89cd7149077e4dbb94c91c7d69a4ec02.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c27fe7f003ef432193a5ca23ef5a30cb.png" alt="在这里插入图片描述"></p><h2 id="3、显示方法分隔符">3、显示方法分隔符</h2><blockquote><p>每个方法之间会有一条细线来进行分隔</p></blockquote><p>File–&gt;settings–&gt;Editor–&gt;Appearance–&gt;勾选Show method separators<br><img src="https://img-blog.csdnimg.cn/841f050b1e8a4f80ac90a6d38b3b4f9a.png" alt="在这里插入图片描述"></p><h2 id="4、忽略大小写提示">4、忽略大小写提示</h2><blockquote><p>idea的默认设置是严格区分大小写提示的，例如输入string不会提示String，不方便编码</p></blockquote><p>File–&gt;settings–&gt;Editor–&gt;General --&gt;Code Completion</p><p><img src="https://img-blog.csdnimg.cn/e770e54842324ac38c4bf7c79b9836e0.png" alt="在这里插入图片描述"></p><h2 id="5、主题设置">5、主题设置</h2><blockquote><p>主题颜色，字体，背景图等设置</p></blockquote><p>File–&gt;Appearance &amp; Behavior-&gt;Apperance<br><img src="https://img-blog.csdnimg.cn/d621e272f0ba43f187acfa72aaa9224d.png" alt="在这里插入图片描述"></p><h2 id="6、自动导入-去除包">6、自动导入/去除包</h2><blockquote><p>默认情况是需要手动导入包的，比如我们需要导入Map类，那么需要手动导入，如果不需要使用了，删除了Map的实例，导入的包也需要手动删除</p></blockquote><p>File–&gt;settings–&gt;Editor–&gt;general–&gt;Auto Import<br><img src="https://img-blog.csdnimg.cn/686ea0640bd8469d9a077ae42af01b58.png" alt="在这里插入图片描述"></p><h2 id="7、单行显示多个Tabs">7、单行显示多个Tabs</h2><blockquote><p>默认是显示单排的Tabs</p></blockquote><p>File–&gt;settings–&gt;Editor–&gt;General --&gt;Editor Tabs–&gt;去掉√<br><img src="https://img-blog.csdnimg.cn/3d67090895c54803b0217a60da932a0d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/607c3d0196f04d9799480d18861abaf4.png" alt="在这里插入图片描述"></p><h2 id="8、配置类文档注释信息和方法注释模版">8、配置类文档注释信息和方法注释模版</h2><h3 id="8-1-类注释">8.1 类注释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author  shawn</span><br><span class="line"> * @ClassName <span class="variable">$&#123;NAME&#125;</span></span><br><span class="line"> * Description:</span><br><span class="line"> * @date  <span class="variable">$&#123;DATE&#125;</span> <span class="variable">$&#123;TIME&#125;</span></span><br><span class="line"> * @version 1.0</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a8cedfccd77c449eb96318b6e297e9a1.png" alt="在这里插入图片描述"></p><h3 id="8-2-方法注释">8.2 方法注释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line"> * Description:</span><br><span class="line"> * @date  <span class="variable">$DATE</span>$ <span class="variable">$TIME</span>$</span><br><span class="line"> * @Param <span class="variable">$param</span>$</span><br><span class="line"> * @<span class="built_in">return</span> <span class="variable">$return</span>$</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/53b388ab78d247a4a91ac080eeca6647.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/03b382e076294991b803b87360b758d9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/64b61e84a0f9489fb2d61433562e0fbf.png" alt="在这里插入图片描述"></p><h2 id="9、注释字体-斜体-加粗">9、注释字体(斜体/加粗)</h2><p>File–&gt;settings–&gt;Editor<br><img src="https://img-blog.csdnimg.cn/308657efaa204235b43f405cb62f183e.png" alt="在这里插入图片描述"></p><h1>二、IDEA常用快捷键</h1><blockquote><p>IntelliJ IDEA快捷键大全 + 动图演示：<a href="https://mp.weixin.qq.com/s/IDgMCAEr7gPthMa6sQr9Zg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/IDgMCAEr7gPthMa6sQr9Zg</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、常用设置&lt;/h1&gt;
&lt;h2 id=&quot;1、显示工具条&quot;&gt;1、显示工具条&lt;/h2&gt;
&lt;p&gt;View–&amp;gt;Appearance-&amp;gt;Toolbar&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/8d17b67dd7544c87a830d33f28380b1b.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="IDETools" scheme="https://www.shawn22.xyz/tags/IDETools/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透工具</title>
    <link href="https://www.shawn22.xyz/posts/60728e79.html"/>
    <id>https://www.shawn22.xyz/posts/60728e79.html</id>
    <published>2022-05-09T13:30:01.000Z</published>
    <updated>2022-05-16T13:25:18.416Z</updated>
    
    <content type="html"><![CDATA[<h1>一、frp和RDClient</h1><h2 id="1、简介">1、简介</h2><h3 id="1-1-frp简介">1.1 frp简介</h3><blockquote><p>官网介绍：<a href="https://gofrp.org/docs/overview/" target="_blank" rel="noopener" title="https://gofrp.org/docs/overview/">https://gofrp.org/docs/overview/</a><br>下载：<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener" title="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p></blockquote><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。它有以下几点特征</p><a id="more"></a><ul><li><p>客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。</p></li><li><p>端口复用，多个服务通过同一个服务端端口暴露。</p></li><li><p>跨平台，但是支持的比nps少一点</p></li><li><p>多种插件，提供很多功能</p></li></ul><p><img src="https://img-blog.csdnimg.cn/61c82ca5b4504de89391cb6e6e7bc9dd.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-2-RDClient简介">1.2 RDClient简介</h3><blockquote><p>官网地址：<a href="https://docs.microsoft.com/zh-cn/windows-server/remote/remote-desktop-services/clients/remote-desktop-clients" target="_blank" rel="noopener" title="RDClient">RDClient</a></p></blockquote><p>RDClient其实是windows自带的远程桌面连接软件，这样就不需要下载其他软件，可以访问远程电脑上的资源。而且在局域网内连接很方便，只需要输入客户端的ip地址、用户名和密码，就能轻松连接，并且延迟很低。</p><h2 id="2、frp使用方法">2、frp使用方法</h2><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000021876836" target="_blank" rel="noopener" title="https://segmentfault.com/a/1190000021876836">https://segmentfault.com/a/1190000021876836</a></p></blockquote><p>做具体的配置前，根据对应的操作系统及架构，从 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener" title="Release">Release</a> 页面下载最新版本的程序。并将 <strong>frps</strong> 及 <strong>frps.ini</strong> 放到具有<strong>公网 IP</strong>的机器上。<strong>请注意配置防火墙或云服务器安全组放过配置文件中使用的端口。</strong> 最后根据不同系统和架构将<strong>frpc</strong> 及 <strong>frpc.ini</strong> 放到处于内网环境的机器上。</p><h3 id="2-1-frps服务器端">2.1 frps服务器端</h3><p>编辑<code>frps.ini</code>里的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"><span class="comment">#设置监听端口</span></span><br><span class="line">bind_port = 7000</span><br><span class="line"><span class="comment">#设置连接服务器的授权码，客户端需要用</span></span><br><span class="line">token = shawn</span><br><span class="line"><span class="comment">#设置frp服务器的控制页面端口,ip:端口就可以访问监控</span></span><br><span class="line">dashboard_port = 7500</span><br><span class="line"><span class="comment">#frp服务器控制页面的用户名和密码，这个是可选的</span></span><br><span class="line">dashboard_user = abc</span><br><span class="line">dashboard_pws = 1234567</span><br></pre></td></tr></table></figure><p>打开好端口号和安全组后，即可成功运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这是我存放frp的路径/usr/local/frp，前台启动</span></span><br><span class="line">./frps -c frps.ini</span><br><span class="line"><span class="comment">#后台启动</span></span><br><span class="line">nohup ./frps -c frps.ini &gt; frp.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><strong>frp后台运行并自启动</strong></p><p>为了可以让frp在服务器后台自动启动运行，先停止运行当前的frps，后进入system文件夹里，创建一个frp.service文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/systemd/system</span><br><span class="line">vim frp.service</span><br></pre></td></tr></table></figure><p>frp.service文件内容，其中ExecStart里的路径是上面加压缩后frp文件夹的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frp service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/frp/frps -c /usr/<span class="built_in">local</span>/frp/frps.ini</span><br><span class="line">Restart=on-failure <span class="comment"># or always, on-abort, etc</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>系统启停命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> frp     <span class="comment">#下次开机后，自动启动frp</span></span><br><span class="line">systemctl start frp      <span class="comment">#开启运行frp</span></span><br><span class="line">systemctl status frp     <span class="comment">#查看frp状态</span></span><br><span class="line"></span><br><span class="line">systemctl restart frp    <span class="comment">#如果修改了frp配置后，使用此命令重启frp</span></span><br></pre></td></tr></table></figure><h3 id="2-2-通过rdp-访问内网机器">2.2 通过rdp 访问内网机器</h3><p>下载好对应系统的frp文件，解压修改 <code>frpc.ini </code>文件，最后和服务端一样运行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"><span class="comment">#你的服务器ip</span></span><br><span class="line">server_addr = xx.xx.xx.xx</span><br><span class="line"><span class="comment">#你的服务器之前设置的端口号</span></span><br><span class="line">server_port = 7000</span><br><span class="line"><span class="comment">#服务器端frps.ini里的token，要一致</span></span><br><span class="line">token = shawn</span><br><span class="line"></span><br><span class="line"><span class="comment">#[]随意取名，3389是windows远程控制的端口</span></span><br><span class="line">[rdclient]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 3389</span><br><span class="line">remote_port = 3389</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是根据需要可选的</span></span><br><span class="line"><span class="comment">#配置网络文件共享系统</span></span><br><span class="line">[smb]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 445</span><br><span class="line">remote_port = 6001</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过ssh远程连接</span></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure><p><strong>windows开机自启方式一</strong></p><p>针对 Windows 系统，为了便于使用，可以配置一下开机的时候静默启动。</p><ol><li><p>在 frpc.exe 的同级目录创建一个 start_frpc.vbs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'start_frpc.vbs</span></span><br><span class="line"><span class="string">'</span>请根据实际情况修改路径</span><br><span class="line">CreateObject(<span class="string">"WScript.Shell"</span>).Run <span class="string">""</span><span class="string">"D:\Program Files\frp_windows_amd64\frpc.exe"</span><span class="string">""</span> &amp; <span class="string">"-c"</span> &amp; <span class="string">""</span><span class="string">"D:\Program Files\frp_windows_amd64\frpc.ini"</span><span class="string">""</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>复制 start_frpc.vbs 文件，打开以下目录，注意将 <code>&lt;USER_NAME&gt;</code> 改为你的用户名：</p><p><code>C:\Users&lt;USER_NAME&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p></li><li><p>鼠标右击，粘贴为快捷方式即可</p></li></ol><p><strong>windows开机自启方式二</strong></p><p>这里用winsw程序把frp变成系统服务。[<a href="https://github.com/winsw/winsw/releases" target="_blank" rel="noopener" title="winsw下载地址">winsw下载地址</a>]，下载完成后，把exe文件放在frp文件夹目录下面并改名<code>winsw.exe</code>，创建一个<code>winsw.xml</code>文件并编辑</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>frp<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>frp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>用frp内网穿透<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executable</span>&gt;</span>frpc<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-c frpc.ini<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logmode</span>&gt;</span>reset<span class="tag">&lt;/<span class="name">logmode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样在此目录下打开windows terminal（powershell），输入以下命令<code>.\winsw.exe install</code>。接着win+R打开运行对话框，输入<code>service.msc</code>(或者搜索服务)命令打开本地服务管理，找到frp服务并打开属性并配置启动即可</p><h3 id="2-3-简单的文件访问服务">2.3 简单的文件访问服务</h3><p>通过 <code>static_file</code> 插件可以对外提供一个简单的基于 HTTP 的文件访问服务。</p><p>frps 的部署步骤同上。</p><ol><li><p>启动 frpc，启用 <code>static_file</code> 插件，配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 7000</span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span></span><br><span class="line">token = abcdefgh</span><br><span class="line"></span><br><span class="line">[test_static_file]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = 6000</span><br><span class="line">plugin = static_file</span><br><span class="line"><span class="comment"># 要对外暴露的文件目录</span></span><br><span class="line">plugin_local_path = /tmp/file</span><br><span class="line"><span class="comment"># 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径</span></span><br><span class="line">plugin_strip_prefix = static</span><br><span class="line">plugin_http_user = abc</span><br><span class="line">plugin_http_passwd = abc</span><br></pre></td></tr></table></figure></li><li><p>通过浏览器访问 <code>http://x.x.x.x:6000/static/</code> 来查看位于 <code>/tmp/file</code> 目录下的文件，会要求输入已设置好的用户名和密码。</p></li></ol><h3 id="2-4-通过自定义域名访问部署于内网的-Web-服务">2.4 通过自定义域名访问部署于内网的 Web 服务</h3><p>有时想要让其他人通过域名访问或者测试我们在本地搭建的 Web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过 frp 就可以实现这一功能，以下示例为 http 服务，https 服务配置方法相同，<code> vhost_http_port </code>替换为 <code>vhost_https_port</code>，type 设置为 https 即可</p><ol><li><p>修改 frps.ini 文件，设置 http 访问端口为 8080</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8080</span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span></span><br><span class="line">token = abcdefgh</span><br></pre></td></tr></table></figure></li><li><p>启动 frps：</p><p><code>./frps -c ./frps.ini</code></p></li><li><p>修改 frpc.ini 文件，假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 Web 服务对应的端口， 绑定自定义域名 <code>www.yourdomain.com</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 7000</span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致</span></span><br><span class="line">token = abcdefgh</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line"><span class="built_in">type</span> = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = www.yourdomain.com</span><br></pre></td></tr></table></figure></li><li><p>启动 frpc</p><p><code>./frpc -c ./frpc.ini</code></p></li><li><p>将 <code>www.yourdomain.com</code> 的域名 A 记录解析到 IP <code>x.x.x.x</code>，如果服务器已经有对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。</p></li><li><p>通过浏览器访问 <code>http://www.yourdomain.com:8080</code> 即可访问到处于内网机器上的 Web 服务。</p></li></ol><h2 id="3、其他高级功能">3、其他高级功能</h2><h3 id="3-1-加密与压缩">3.1 加密与压缩</h3><p>这两个功能默认是不开启的，需要在 frpc.ini 中通过配置来为指定的代理启用加密与压缩的功能，压缩算法使用 snappy：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#frpc.ini</span></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line">use_encryption = <span class="literal">true</span></span><br><span class="line">use_compression = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 SSH 协议等，通过设置 <code>use_encryption = true</code>，将 frpc 与 frps 之间的通信内容加密传输，将会有效防止流量被拦截。</p><p>如果传输的报文长度较长，通过设置 <code>use_compression = true</code> 对传输内容进行压缩，可以有效减小 frpc 与 frps 之间的网络流量，加快流量转发速度，但是会额外消耗一些 CPU 资源。</p><h3 id="3-2-TLS">3.2 TLS</h3><p>从 v0.25.0 版本开始 frpc 和 frps 之间支持通过 TLS 协议加密传输。通过在 <code>frpc.ini</code> 的 <code>common</code> 中配置 <code>tls_enable = true</code> 来启用此功能，安全性更高。为了端口复用，frp 建立 TLS 连接的第一个字节为 0x17。<strong>注意： 启用此功能后除 xtcp 外，不需要再设置 use_encryption。</strong></p><h3 id="3-3-代理限速">3.3 代理限速</h3><p>目前支持在客户端的代理配置中设置代理级别的限速，限制单个 proxy 可以占用的带宽。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line">bandwidth_limit = 1MB</span><br></pre></td></tr></table></figure><p>在代理配置中增加 <code>bandwidth_limit</code> 字段启用此功能，目前仅支持 <code>MB</code> 和 <code>KB</code> 单位。</p><h3 id="3-4-范围端口映射">3.4 范围端口映射</h3><p>在 frpc 的配置文件中可以指定映射多个端口，目前只支持 tcp 和 udp 的类型。这一功能通过 <code>range:</code> 段落标记来实现，客户端会解析这个标记中的配置，将其拆分成多个 proxy，每一个 proxy 以数字为后缀命名。例如要映射本地 6000-6005, 6007 这 6 个端口，主要配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line">[range:test_tcp]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 6000-6006,6007</span><br><span class="line">remote_port = 6000-6006,6007</span><br></pre></td></tr></table></figure><p>实际连接成功后会创建 8 个 proxy，命名为 <code>test_tcp_0, test_tcp_1 ... test_tcp_7</code>。</p><p><a href="https://github.com/fatedier/frp/blob/master/conf/frps_full.ini" target="_blank" rel="noopener" title="frps完整配置文件">frps完整配置文件</a></p><p><a href="https://github.com/fatedier/frp/blob/master/conf/frpc_full.ini" target="_blank" rel="noopener" title="frpc完整配置文件">frpc完整配置文件</a></p><h1>二、NPS-NPC</h1><h2 id="1、简介-v2">1、简介</h2><blockquote><p>nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并<strong>带有功能强大的web管理端</strong>。</p></blockquote><ul><li><p>一台有公网IP的服务器（VPS）运行服务端（NPS）</p></li><li><p>一个或多个运行在内网的服务器或者PC运行客户端（NPC）</p></li></ul><p><a href="https://ehang-io.github.io/nps/#/?id=nps" target="_blank" rel="noopener" title="文档资料">文档资料</a></p><p><a href="https://github.com/ehang-io/nps/releases" target="_blank" rel="noopener" title="github仓库下载地址">github仓库下载地址</a></p><h2 id="2、NPS下载与安装">2、NPS下载与安装</h2><p>下载服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir nps</span><br><span class="line"><span class="built_in">cd</span> nps</span><br><span class="line">wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_server.tar.gz</span><br><span class="line">tar -zxvf linux_amd64_server.tar.gz</span><br><span class="line"><span class="comment">#将相关配置安装到/etc/nps下</span></span><br><span class="line">sudo ./nps install</span><br></pre></td></tr></table></figure><p>直接进入<code>/etc/nps</code>下，配置文件<code>vim conf/nps.conf</code>，如果启动失败就关闭http代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端连接需要的vkey，这里建议设置复杂点</span></span><br><span class="line">public_vkey=123</span><br><span class="line"></span><br><span class="line">web_host= 服务器IP或者域名</span><br><span class="line">web_username= admin（登录用户名）</span><br><span class="line">web_password= 你的密码</span><br><span class="line">web_port=8080（web管理端口）` </span><br><span class="line"></span><br><span class="line"><span class="comment">#bridge可以更改 NPC的连接端口。</span></span><br><span class="line">bridge_type=tcp</span><br><span class="line"><span class="comment"># 修改连接端口</span></span><br><span class="line">bridge_port=8024     </span><br><span class="line">bridge_ip=0.0.0.0</span><br></pre></td></tr></table></figure><p>最后启动<code>sudo nps start|stop|restart</code>，它会自动寻找配置文件。这里需要主要的是服务端端口的开放</p><p><img src="https://img-blog.csdnimg.cn/e5295784d71548c5a1e3fc062a5b637f.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3、NPC下载与安装">3、NPC下载与安装</h2><h3 id="3-1-客户端下载">3.1 客户端下载</h3><p>首先从<a href="https://github.com/ehang-io/nps/releases" target="_blank" rel="noopener" title="github仓库下载地址">github仓库下载地址</a>下载对应平台的客户端并解压，详情可以查看<a href="https://ehang-io.github.io/nps/#/use" target="_blank" rel="noopener" title="npc具体使用">npc具体使用</a></p><h3 id="3-2-服务注册">3.2 服务注册</h3><p>对于windows，使用管理员身份运行cmd，最后可以在服务里查找到该服务</p><ul><li><p>注册：<code>npc.exe install 其他参数（例如-server=xx -vkey=xx或者-config=xxx）</code></p></li><li><p>启动：<code>npc.exe start</code></p></li><li><p>停止：<code>npc.exe stop</code></p></li><li><p>如果需要更换命令内容需要先卸载<code>npc.exe uninstall</code>，再重新注册</p></li></ul><h3 id="3-3-无配置文件模式">3.3 无配置文件模式</h3><p>此模式的各种配置<strong>在服务端web管理中完成</strong>，需要先在web端创建好客户端，客户端除运行一条命令外无需任何其他设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./npc -server=ip:port -vkey=web界面中显示的密钥</span><br></pre></td></tr></table></figure><h3 id="3-4-配置文件模式">3.4 配置文件模式</h3><p>此模式使用nps的公钥或者客户端私钥验证，各种配置在客户端完成，同时服务端web也可以进行管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr=xxx:8024</span><br><span class="line">conn_type=tcp</span><br><span class="line">vkey=123</span><br><span class="line">username=shawn</span><br><span class="line">password=shawn</span><br><span class="line">compress=<span class="literal">true</span></span><br><span class="line">crypt=<span class="literal">true</span></span><br><span class="line">rate_limit=10000</span><br><span class="line">flow_limit=100</span><br><span class="line">remark=<span class="built_in">test</span></span><br><span class="line">max_conn=10</span><br><span class="line"><span class="comment">#pprof_addr=0.0.0.0:9999</span></span><br><span class="line"></span><br><span class="line">[tcp]</span><br><span class="line">mode=tcp</span><br><span class="line"><span class="comment"># 这里我代理了我的数据库</span></span><br><span class="line">target_addr=127.0.0.1:3306</span><br><span class="line"><span class="comment"># 服务端需要开放的端口，一个代理机器一个端口</span></span><br><span class="line">server_port=9001</span><br></pre></td></tr></table></figure><p>最后启动<code> ./npc -config=npc配置文件路径</code></p><h2 id="4、其他">4、其他</h2><p>sockes5代理可以使用Proxifier软件，其他高级功能和frp类似，可以查看文档</p><h1>三、Ngrok</h1><h2 id="1、简介-v3">1、简介</h2><blockquote><p>ngrok 是一个反向代理，通过在公共端点和本地运行的 Web 服务器之间建立一个安全的通道，实现内网主机的服务可以暴露给外网。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放，所以ngrok可以很方便地协助服务端程序测试。</p></blockquote><p>官网地址：<a href="https://ngrok.com/" target="_blank" rel="noopener" title="https://ngrok.com/">https://ngrok.com/</a></p><h2 id="2、使用方法">2、使用方法</h2><ol><li><p>进入ngrok官网（<a href="https://ngrok.com/%EF%BC%89%EF%BC%8C%E6%B3%A8%E5%86%8Cngrok%E8%B4%A6%E5%8F%B7%E5%B9%B6%E4%B8%8B%E8%BD%BDngrok" target="_blank" rel="noopener" title="https://ngrok.com">https://ngrok.com</a>），注册ngrok账号并下载ngrok</p></li><li><p>根据官网给定的授权码，运行如下授权命令，<code>ngrok config add-authtoken 2451IuLJezJ91DT9i4qBjhjg8Fv_***</code>，若是windows运行就不需要<code>./</code>，运行后会在相应的文件下生成<code>ngrok.yml</code>文件</p></li><li><p><code>ngrok http 80</code>即可将机器的80端口http服务暴露到公网，并且会提供一个公网域名。</p></li></ol><h2 id="3、其他">3、其他</h2><p>这里每次启动软件其隧道地址都会发生变化，还可以通过一些命令将内网的文件和其他TCP服务 暴露到公网中。</p><ul><li><p>有授权的设置文件共享<code>ngrok http -auth=&quot;user:password&quot; file:///Users/alan/share</code></p></li><li><p>无授权的设置文件共享<code>ngrok http &quot;file:///C:\Users\alan\Public Folder&quot;</code></p></li><li><p>将主机的3389的TCP端口暴露到公网<code>ngrok tcp 3389</code></p></li></ul><p>更多使用方法参考：<a href="https://ngrok.com/docs" target="_blank" rel="noopener" title="https://ngrok.com/docs">https://ngrok.com/docs</a></p><h1>四、其他内网穿透工具</h1><ul><li>Zerotier是目前免费最好用的虚拟局域网，不同内网主机可以加入到组的虚拟局域网中，可以实现信息互通，<code>ZeroTier One</code>本身的服务器都在国外访问速度很慢，可以通过搭建国内<code>Moon</code>服务加速解决连接慢的问题。<a href="https://www.zerotier.com/" target="_blank" rel="noopener">ZeroTier官网</a></li><li>蒲公英、Teamview、花生壳</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、frp和RDClient&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;h3 id=&quot;1-1-frp简介&quot;&gt;1.1 frp简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;官网介绍：&lt;a href=&quot;https://gofrp.org/docs/overview/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://gofrp.org/docs/overview/&quot;&gt;https://gofrp.org/docs/overview/&lt;/a&gt;&lt;br&gt;
下载：&lt;a href=&quot;https://github.com/fatedier/frp/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://github.com/fatedier/frp/releases&quot;&gt;https://github.com/fatedier/frp/releases&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。它有以下几点特征&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://www.shawn22.xyz/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Gateway 详解</title>
    <link href="https://www.shawn22.xyz/posts/4fc38b79.html"/>
    <id>https://www.shawn22.xyz/posts/4fc38b79.html</id>
    <published>2022-05-09T13:29:50.000Z</published>
    <updated>2022-05-09T13:33:12.670Z</updated>
    
    <content type="html"><![CDATA[<h1>一、网关简介</h1><h2 id="1、服务网关介绍">1、服务网关介绍</h2><h3 id="1-1-API网关介绍">1.1 API网关介绍</h3><p><strong>API网关是一个服务器，是系统的唯一入口。</strong> 从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、协议转换、限流熔断、静态响应处理。</p><p><strong>API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务</strong>，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。</p><a id="more"></a><h3 id="1-2-网关主要功能">1.2 网关主要功能</h3><p>微服务网关作为微服务后端服务的统一入口，它可以统筹管理后端服务，主要分为数据平面和控制平面：</p><ul><li><p>数据平面主要功能是接入用户的HTTP请求和微服务被拆分后的聚合。使用微服务网关统一对外暴露后端服务的API和契约，路由和过滤功能正是网关的核心能力模块。另外，微服务网关可以实现拦截机制和专注跨横切面的功能，包括协议转换、安全认证、熔断限流、灰度发布、日志管理、流量监控等。</p></li><li><p>控制平面主要功能是对后端服务做统一的管控和配置管理。例如，可以控制网关的弹性伸缩；可以统一下发配置；可以对网关服务添加标签；可以在微服务网关上通过配置Swagger功能统一将后端服务的API契约暴露给使用方，完成文档服务，提高工作效率和降低沟通成本。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/adcf45b32e664518aa20104da4bd1e14.png#pic_center" alt="在这里插入图片描述"></p><ul><li><p><strong>路由功能</strong>：路由是微服务网关的核心能力。通过路由功能微服务网关可以将请求转发到目标微服务。在微服务架构中，网关可以结合注册中心的动态服务发现，实现对后端服务的发现，调用方只需要知道网关对外暴露的服务API就可以透明地访问后端微服务。</p></li><li><p><strong>负载均衡</strong>：API网关结合负载均衡技术，利用Eureka或者Consul等服务发现工具，通过轮询、指定权重、IP地址哈希等机制实现下游服务的负载均衡。</p></li><li><p><strong>统一鉴权</strong>：一般而言，无论对内网还是外网的接口都需要做用户身份认证，而用户认证在一些规模较大的系统中都会采用统一的单点登录（Single Sign On）系统，如果每个微服务都要对接单点登录系统，那么显然比较浪费资源且开发效率低。API网关是统一管理安全性的绝佳场所，可以将认证的部分抽取到网关层，微服务系统无须关注认证的逻辑，只关注自身业务即可。</p></li><li><p><strong>协议转换</strong>：API网关的一大作用在于构建异构系统，API网关作为单一入口，通过协议转换整合后台基于REST、AMQP、Dubbo等不同风格和实现技术的微服务，面向Web Mobile、开放平台等特定客户端提供统一服务。</p></li><li><p><strong>指标监控</strong>：网关可以统计后端服务的请求次数，并且可以实时地更新当前的流量健康状态，可以对URL粒度的服务进行延迟统计，也可以使用Hystrix Dashboard查看后端服务的流量状态及是否有熔断发生。</p></li><li><p><strong>限流熔断</strong>：在某些场景下需要控制客户端的访问次数和访问频率，一些高并发系统有时还会有限流的需求。在网关上可以配置一个阈值，当请求数超过阈值时就直接返回错误而不继续访问后台服务。当出现流量洪峰或者后端服务出现延迟或故障时，网关能够主动进行熔断，保护后端服务，并保持前端用户体验良好。</p></li><li><p><strong>黑白名单</strong>：微服务网关可以使用系统黑名单，过滤HTTP请求特征，拦截异常客户端的请求，例如DDoS攻击等侵蚀带宽或资源迫使服务中断等行为，可以在网关层面进行拦截过滤。比较常见的拦截策略是根据IP地址增加黑名单。在存在鉴权管理的路由服务中可以通过设置白名单跳过鉴权管理而直接访问后端服务资源。</p></li><li><p><strong>灰度发布</strong>：微服务网关可以根据HTTP请求中的特殊标记和后端服务列表元数据标识进行流量控制，实现在用户无感知的情况下完成灰度发布。</p></li><li><p><strong>流量染色</strong>：和灰度发布的原理相似，网关可以根据HTTP请求的Host、Head、Agent等标识对请求进行染色，有了网关的流量染色功能，我们可以对服务后续的调用链路进行跟踪，对服务延迟及服务运行状况进行进一步的链路分析。</p></li><li><p><strong>文档中心</strong>：网关结合Swagger，可以将后端的微服务暴露给网关，网关作为统一的入口给接口的使用方提供查看后端服务的API规范，不需要知道每一个后端微服务的Swagger地址，这样网关起到了对后端API聚合的效果。</p></li><li><p><strong>日志审计</strong>：微服务网关可以作为统一的日志记录和收集器，对服务URL粒度的日志请求信息和响应信息进行拦截。</p></li></ul><h2 id="2、常用网关介绍">2、常用网关介绍</h2><h3 id="2-1-Nginx-Lua">2.1 Nginx+Lua</h3><p>Nginx是一个高性能的HTTP和反向代理服务器。<strong>Nginx一方面可以做反向代理，另外一方面可以做静态资源服务器，接口使用Lua动态语言可以完成灵活的定制功能。</strong></p><ul><li><p>Nginx适合做<strong>门户网关</strong>，是作为整个全局的网关，对外的处于最外层的那种;而Gateway属于业务网关，主要用来对应不同的客户端提供服务，用于聚合业务。各个微服务独立部署，职责单一，对外提供服务的时候需要有一个东西把业务聚合起来。</p></li><li><p>Gateway可以实现<strong>熔断、重试</strong>等功能，这是 Nginx不具备的。</p></li></ul><h3 id="2-2-Kong">2.2 Kong</h3><p>Kong是一款基于OpenResty（Nginx + Lua模块）编写的高可用、易扩展的，由Mashape公司开源的API Gateway项目。<strong>Kong是基于NGINX和Apache Cassandra或PostgreSQL构建的</strong>，能提供易于使用的RESTful API来操作和配置API管理系统，所以它可以水平扩展多个Kong服务器，通过前置的负载均衡配置把请求均匀地分发到各个Server，来应对大批量的网络请求。</p><ul><li><p><strong>优点</strong>:基于Nginx所以在性能和稳定性上都没有问题。Kong作为一款商业软件，在Ngin上做了很扩展工作，而且还有很多付费的商业插件。Kong本身也有付费的企业版，其中包括技术支持、使用培训服务以及API分析插件。</p></li><li><p><strong>缺点</strong>:如果你使用Spring Cloud，Kong如何结合目前已有的服务治理体系?</p></li></ul><h3 id="2-3-Traefik">2.3 Traefik</h3><p>Traefik 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。</p><ul><li>相对Spring Cloud和 Kubernetes而言，目前比较适合Kubernetes。</li></ul><h3 id="2-4-Zuul">2.4 Zuul</h3><p>Zuul 是 Netflix 开源的一个API网关组件，它可以和 Eureka、Ribbon、Hystrix 等组件配合使用。社区活跃，融合于 SpringCloud 完整生态，是构建微服务体系前置网关服务的最佳选型之一（不过2.0已经闭源）</p><h1>二、SpringCloud Gateway介绍</h1><h2 id="1、GateWay模型">1、GateWay模型</h2><blockquote><p>官网地址：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/" target="_blank" rel="noopener" title="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/</a></p></blockquote><p>传统的Web框架，比如说: Struts2，SpringMVC等都是基于Servlet APl与Servlet容器基础之上运行的。但是在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程(Spring 5必须让你使用Java 8)。</p><p>Spring WebFlux是Spring 5.0 引入的新的响应式框架，区别于Spring MVC，它不需要依赖Servlet APl，它是完全异步非阻塞的，并且基于Reactor来实现响应式流规范。</p><h2 id="2、SPringCloud-Gateway特征">2、SPringCloud Gateway特征</h2><ul><li><p>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0</p></li><li><p>集成断路器</p></li><li><p>集成 Spring Cloud DiscoveryClient</p></li><li><p>Predicates 和 Filters 作用于特定路由，易于编写的 Predicates 和 Filters</p></li><li><p>具备一些网关的高级功能：动态路由、限流、路径重写</p></li><li><p>路径重写</p></li><li><p>限流</p></li><li><p>动态路由</p></li></ul><h2 id="3、三大核心概念">3、三大核心概念</h2><ul><li><p><strong>路由（Route）</strong></p><p>路由是网关最基础的部分，它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。</p></li><li><p><strong>断言（Predicate）</strong></p><p>Java8 中的断言函数。Spring Cloud Gateway 中的断言函数输入类型是 Spring 5.0 框架中 的 ServerWebExchange。Spring Cloud Gateway 中的断言函数允许开发者去定义匹配来自于 Http Request 中的任 何信息，比如请求头和参数等。</p></li><li><p><strong>过滤器（Filter）</strong></p><p>一个标准的 Spring Web Filter。Spring Cloud Gateway 中的 Filter 分为两种类型，分别是 Gateway Filter 和 Global Filter。过滤器将会对请求和响应进行处理。</p></li></ul><h2 id="4、工作流程">4、工作流程</h2><p>客户端向<code>Spring Cloud Gateway</code>发出请求。然后在<code>Gateway Handler Mapping</code> 中找到与请求相匹配的路由，将其发送到<code>GatewayWeb Handler</code>。Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。</p><p>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前(“<strong>pre</strong>”)或之后(“<strong>post</strong>”）执行业务逻辑。Filter在&quot;<strong>pre</strong>&quot;类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在&quot;<strong>post</strong>&quot;类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><ul><li>核心逻辑：<strong>路由转发 + 执行过滤器链</strong>。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/c85e85b93f482fd314f98412ea308f6b.png" alt></p><h1>三、环境搭建初体验、</h1><h2 id="1、简介">1、简介</h2><blockquote><p>可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/119653418" target="_blank" rel="noopener" title="SpringCloud-2020.0.3版本简单入门">SpringCloud-2020.0.3版本简单入门</a></p></blockquote><p>这里我注册中心使用了<a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener" title="Nacos">Nacos</a>，需要自行下载并启动，默认端口号是8848，网关使用springcloud gateway。搭建聚合模块demo，一个消费者模块和一个网关模块，请求开源从网关转发到消费者模块。多模块搭建开源参考<a href="https://blog.csdn.net/lemon_TT/article/details/119654251" target="_blank" rel="noopener" title="SpringBoot聚合项目创建、打包与多环境">SpringBoot聚合项目创建、打包与多环境</a></p><h2 id="2、模块搭建">2、模块搭建</h2><h3 id="2-1-搭建父模块">2.1 搭建父模块</h3><p>创建springboot项目，保留<code>pom.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>cloud-gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>cloud-gateway<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.80<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-创建消费者子模块">2.2 创建消费者子模块</h3><p>新建springboot项目，引入依赖，这里注意控制网关和nacos版本，很容易因为版本不对而冲突</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   引入alibaba Nacos     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置application.yml文件</p><p>配置application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><p>最后编写简单的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-创建网关子模块">2.3 创建网关子模块</h3><p>新建springboot项目，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-gateway --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   引入alibaba Nacos     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8889</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">hello</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/**</span>    <span class="comment"># 断言：路径相匹配的进行路由</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><h3 id="2-4-启动体验">2.4 启动体验</h3><p>启动后发现浏览器访问<code>http://localhost:8888/hello</code>和<code>http://localhost:8889/hello</code>，都能成功访问，即代表网关搭建成功</p><h1>四、Gateway配置详解</h1><h2 id="1、路由规则">1、路由规则</h2><h3 id="1-1-介绍">1.1 介绍</h3><p><code>Spring Cloud Gateway</code> 是通过 <code>Spring WebFlux</code>的 <code>HandlerMapping</code> 做为底层支持来匹配到转发路由，<code>Spring Cloud Gateway</code> 内置了很多 <code>Predicates</code> 工厂，这些 <code>Predicates</code> 工厂通过不同的 HTTP 请求参数来匹配，多个 <code>Predicates</code> 工厂可以组合使用。<code>Predicate</code> 来源于 Java 8，是 Java 8 中引入的一个函数，<code>Predicate</code> 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 <code>Predicate</code> 组合成其他复杂的逻辑（比如：与，或，非）。可以用于接口请求参数校验、判断新老数据是否有变化需要进行更新操作。</p><p><img src="https://img-blog.csdnimg.cn/684c10454a5a472685a2beffa5890d92.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-2-Datetime">1.2 Datetime</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">hello</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">After=2021-02-23T14:20:00.000+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="comment">#            - Before=2021-02-23T14:20:00.000+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="comment">#            - Between=2021-02-23T14:20:00.000+08:00[Asia/Shanghai], 2021-02-24T14:20:00.000+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><h3 id="1-3-Cookie">1.3 Cookie</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定Cookie正则匹配指定值</span></span><br><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Cookie=cookie,china</span></span><br></pre></td></tr></table></figure><h3 id="1-4-Header">1.4 Header</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定Header正则匹配指定值，内容必须是数字</span></span><br><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Header=X-Request-Id,\d+</span></span><br><span class="line"><span class="comment">#  - Header=X-Request-Id</span></span><br></pre></td></tr></table></figure><h3 id="1-5-Host">1.5 Host</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求Host匹配指定值</span></span><br><span class="line"><span class="attr">predicates:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Host=**.somehost.org,**.anotherhost.org</span></span><br></pre></td></tr></table></figure><h3 id="1-6-Method">1.6 Method</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求Method匹配指定请求方式</span></span><br><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br></pre></td></tr></table></figure><h3 id="1-7-Query">1.7 Query</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line"><span class="comment">#请求包含某参数</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Query=green</span></span><br><span class="line"><span class="comment">#请求包含某参数并且参数值匹配正则表达式</span></span><br><span class="line"><span class="comment"># - Query=red, gree.</span></span><br></pre></td></tr></table></figure><h3 id="1-8-RemoteAddr">1.8 RemoteAddr</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#远程地址匹配</span></span><br><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure><h3 id="1-9-Path">1.9 Path</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 断言：路径相匹配的进行路由</span></span><br><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/system/**</span></span><br></pre></td></tr></table></figure><h3 id="1-10-Weight">1.10 Weight</h3><p>在开发或者测试的时候，或者线上发布，线上服务多版本控制的时候，需要对服务提供权重路由，最常见的使用就是，一个服务有两个版本，旧版本V1，新版本v2。在线上灰度的时候，需要通过网关动态实时推送，路由权重信息。比如80%的流量走服务v1版本，20%的流量走服务v2版本。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="2、配置路由的几种方式">2、配置路由的几种方式</h2><h3 id="2-1-yml配置文件路由">2.1 yml配置文件路由</h3><p>在yml配置文件说明，访问<code>http://localhost:8889/hello</code>即可转发</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一种：ws(websocket)方式: uri: ws://localhost:8888</span></span><br><span class="line"><span class="comment">#第二种：http方式: uri: http://localhost:8888/</span></span><br><span class="line"><span class="comment">#第三种：lb(注册中心中服务名字)方式: uri: lb://consumer</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">         <span class="comment"># 路由id,没有固定规则，建议配合服务名</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">consumer</span></span><br><span class="line">          <span class="comment"># 匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="comment"># 需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri。</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment"># 断言：路径相匹配的进行路由</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/**</span></span><br></pre></td></tr></table></figure><h3 id="2-2-通过bean进行配置">2.2 通过bean进行配置</h3><p>注入RouteLocator的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customerRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span> </span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line">        <span class="comment">// 第一个参数是路由的唯一id</span></span><br><span class="line">        routes.route(<span class="string">"consumer"</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">"/hello"</span>)</span><br><span class="line">                        .uri(<span class="string">"http://localhost:8888/hello"</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-动态路由">2.3 动态路由</h3><p>可以通过服务名进行转发，无需配置routes也可以转发，访问<code>http://localhost:8889/consumer/hello</code>即可转发</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment">#开启根据微服务名称自动转发</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment">#小写</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3、Cloud内置过滤器">3、Cloud内置过滤器</h2><h3 id="3-1-介绍">3.1 介绍</h3><p><strong>Spring Cloud Gateway</strong>根据作用范围划分为<code>GatewayFilter</code>和<code>GlobalFilter</code>，二者区别如下</p><ul><li><p>**GatewayFilter **:网关过滤器，需要通过<code>spring.cloud.routes.filters</code>配置在具体路由下，只作用在当前路由上或通过<code>spring.cloud.default-filters</code> 配置在全局，作用在所有路由上。</p></li><li><p>**GlobalFilter **:全局过滤器，不需要在配置文件中配置，作用在所有的路由上，最终通过<code>GatewayFilterAdapter</code>包装成<code>GatewayFilterChain</code>可识别的过滤器，它为请求业务以及路由的URI转换为真实业务服务请求地址的核心过滤器，不需要配置系统初始化时加载，并作用在每个路由上。</p></li></ul><h3 id="3-2-网关过滤器-GatewayFilter">3.2 网关过滤器(GatewayFilter)</h3><blockquote><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories" target="_blank" rel="noopener" title="网关过滤器官网详解">网关过滤器官网详解</a></p></blockquote><p>网关过滤器用于拦截并链式处理 Web 请求，可以实现横切与应用无关的需求，比如：安全、访问超时的设置等。修改传入的 HTTP 请求或传出 HTTP 响应。SpringCloud Gateway 包含许多内置的网关过滤器工厂一共有 22 个，包括头部过滤器、 路径类过滤器、Hystrix 过滤器和重写请求 URL 的过滤器， 还有参数和状态码等其他类型的过滤器。根据过滤器工厂的用途来划分，可以分为以下几种：<strong>Header、Parameter、Path、Body、Status、Session、Redirect、Retry、RateLimiter 和Hystrix</strong>。</p><p><img src="https://img-blog.csdnimg.cn/b3d5db347bfc45a9a4970ebe1ae4b2ab.png#pic_center" alt="在这里插入图片描述"></p><ul><li><strong>RewritePath GatewayFilter Factory</strong></li></ul><p>RewritePath 网关过滤器工厂采用路径正则表达式参数和替换参数，使用Java 正则表达式来灵活地重写请求路径。下面将<code>http://localhost:8889/hello1/hello</code>重写为<code>http://localhost:8888/hello</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">http://localhost:8888</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Path=/hello1/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">After=2021-02-23T14:20:00.000+08:00[Asia/Shanghai]</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RewritePath=/hello1/?(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>PrefixPath GatewayFilter Factory</strong></li></ul><p>PrefixPath 网关过滤器工厂为匹配的URI添加指定前缀，即在uri路径前加上我们自己的路径然后请求给下游服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">PrefixPath=/mypath</span></span><br></pre></td></tr></table></figure><ul><li><strong>StripPrefix GatewayFilter Factory</strong></li></ul><p>StripPrefix网关过滤器工厂采用一个参数 StripPrefix，该参数表示在将请求发送到下游之前从请求中剥离的路径个数，比如下面<code>http://localhost:8889/hello1/test/hello1/hello</code>请求将变成<code>http://localhost:8888/hello</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">http://localhost:8888</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Path=/hello1/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">After=2021-02-23T14:20:00.000+08:00[Asia/Shanghai]</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RewritePath=/hello1/?(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>SetPath GatewayFilter Factory</strong></li></ul><p>SetPath网关过滤器工厂采用路径模板参数。它提供了一种通过允许模板化路径段来操作请求路径的简单方法，使用了SpringFramework 中的uri模板，允许多个匹配段。下面<code>http://localhost:8889/hello1/hello</code>请求将变成<code>http://localhost:8888/hello</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">http://localhost:8888</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Path=/hello1/&#123;segment&#125;</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SetPath=/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>AddRequestParameter GatewayFilter Factory</strong></li></ul><p>AddRequestParameter网关过滤器工厂会将指定参数添加至匹配到的下游请求中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求添加red=blue给下游</span></span><br><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestParameter=red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure><ul><li><strong>SetStatus GatewayFilter Factory</strong></li></ul><p>SetStatus网关过滤器工厂采用单个状态参数，它必须是有效的Spring HttpStatus。它可以是整数404或枚举NOT_FOUND的字符串表示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line"><span class="comment">#任何情况下，响应的HTTP状态都将设置为401</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SetStatus=401</span></span><br></pre></td></tr></table></figure><h3 id="3-3-全局过滤器">3.3 全局过滤器</h3><p>全局过滤器不需要在配置文件中配置，作用在所有的路由上，最终通过<code>GatewayFilterAdapter</code> 包装成 <code>GatewayFilterChain </code>可识别的过滤器，它是请求业务以及路由的 URI 转换为真实业务服务请求地址的核心过滤器，不需要配置系统初始化时加载，并作用在每个路由上。</p><p><img src="https://img-blog.csdnimg.cn/9c509882c2fb4eeb94025a06d6ae5b9c.png#pic_center" alt="在这里插入图片描述"></p><h2 id="4、自定义过滤器">4、自定义过滤器</h2><blockquote><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#writing-custom-route-predicate-factories" target="_blank" rel="noopener" title="官网自定义过滤器">官网自定义过滤器</a></p></blockquote><h3 id="4-1-自定义网关过滤器">4.1 自定义网关过滤器</h3><p>这里有两种方式配置，一种是实现<code>GatewayFilter</code> 接口，一种是继承<code>AbstractGatewayFilterFactory</code>，分别作用于<strong>路由bean类配置</strong>和<strong>yml配置</strong>上</p><ul><li><strong>通过bean注册路由</strong></li></ul><p>这种自定义网关过滤器需要实现以下两个接口 ： <code>GatewayFilter</code> ， <code>Ordered</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGatewayFilter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是我自定义的局部过滤器"</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在路由bean类上添加filter，最后访问即可通过我们自己实现的过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customerRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span> </span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line">        <span class="comment">// 第一个参数是路由的唯一id</span></span><br><span class="line">        <span class="comment">// http://localhost:9527/guonei  =&gt;  http://news.baidu.com/guonei</span></span><br><span class="line">        routes.route(<span class="string">"consumer"</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">"/hello"</span>)</span><br><span class="line">                        .uri(<span class="string">"http://localhost:8888/hello"</span>)</span><br><span class="line">                        .filter(<span class="keyword">new</span> CustomGatewayFilter()))</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>yml配置实现路由</strong></li></ul><p>这里演示一个黑白名单过滤</p><p>首先创建<code>IgnoreWhiteProperties</code>白名单配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态刷新类</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ignore"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IgnoreWhiteProperties</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放行白名单配置，网关不校验此处的白名单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; whites = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getWhites</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> whites;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWhites</span><span class="params">(List&lt;String&gt; whites)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.whites = whites;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置自定义局部过滤器<code>BlackListUrlFilter</code>，主要是继承<code>AbstractGatewayFilterFactory</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListUrlFilter</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">BlackListUrlFilter</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IgnoreWhiteProperties ignoreWhiteProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是我自定义的局部过滤器"</span>);</span><br><span class="line">        System.out.println(config);</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            String url = exchange.getRequest().getURI().getPath();</span><br><span class="line">            <span class="comment">// 跳过不需要验证的路径，即白名单</span></span><br><span class="line"></span><br><span class="line">            PathMatcher pathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">            <span class="keyword">for</span> (String s:ignoreWhiteProperties.getWhites()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pathMatcher.match(s,url)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (config.matchBlacklist(url)) &#123;</span><br><span class="line">                ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">                response.getHeaders().add(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">                <span class="keyword">return</span> exchange.getResponse().writeWith(</span><br><span class="line">                        Mono.just(response.bufferFactory().wrap(JSON.toJSONBytes(<span class="string">"请求地址不允许访问"</span>))));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlackListUrlFilter</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; blacklistUrl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Pattern&gt; blacklistUrlPattern = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matchBlacklist</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !blacklistUrlPattern.isEmpty() &amp;&amp; blacklistUrlPattern.stream().anyMatch(p -&gt; p.matcher(url).find());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getBlacklistUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> blacklistUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBlacklistUrl</span><span class="params">(List&lt;String&gt; blacklistUrl)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.blacklistUrl = blacklistUrl;</span><br><span class="line">            <span class="keyword">this</span>.blacklistUrlPattern.clear();</span><br><span class="line">            <span class="keyword">this</span>.blacklistUrl.forEach(url -&gt; &#123;</span><br><span class="line">                <span class="comment">// 取消正则的贪婪模式</span></span><br><span class="line">                <span class="keyword">this</span>.blacklistUrlPattern.add(Pattern.compile(url.replaceAll(<span class="string">"\\*\\*"</span>, <span class="string">"(.*?)"</span>), Pattern.CASE_INSENSITIVE));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后配置一下配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不校验白名单</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line">  <span class="attr">whites:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/hello1/*</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/auth/login</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/*/v2/api-docs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment">#开启根据微服务名称自动转发</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#注意这里的过滤器有先后顺序</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">hello</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8888</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/hello1/&#123;segment&#125;</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment"># 也可以简写，但必须要带有xxxGatewayFilterFactory，比如RSAGatewayFilterFactory，只需要写RSA</span></span><br><span class="line">            <span class="comment">#- RSA  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetPath=/&#123;segment&#125;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">BlackListUrlFilter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">blacklistUrl:</span></span><br><span class="line">                  <span class="comment"># 黑名单</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">/user/list</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8881</span></span><br></pre></td></tr></table></figure><h3 id="4-2-自定义全局过滤器">4.2 自定义全局过滤器</h3><p>自定义网关过滤器需要实现以下两个接口: <code>GatewayFilter </code>, <code>Ordered</code>，配置完后全局生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器执行业务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"custom global filter"</span>);</span><br><span class="line">        <span class="comment">// 继续向下执行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器执行顺序，数值越小，优先级越高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例<strong>网关鉴权</strong>，这里可以增加jwt校验，如果通过就继续，否则不让请求通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(AuthFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain</span></span></span><br><span class="line"><span class="function"><span class="params">            chain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String url = exchange.getRequest().getURI().getPath();</span></span><br><span class="line">        <span class="comment">//忽略以下url请求</span></span><br><span class="line">        <span class="comment">//if(url.indexOf("/login") &gt;= 0)&#123;</span></span><br><span class="line">        <span class="comment">// return chain.filter(exchange);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            logger.info( <span class="string">"token is empty ..."</span> );</span><br><span class="line">            ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">            <span class="comment">// 响应类型</span></span><br><span class="line">            response.getHeaders().add(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">            <span class="comment">// 响应状态码，HTTP 401 错误代表用户没有访问权限</span></span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 响应内容</span></span><br><span class="line">            <span class="comment">// 可以自定义全局返回类</span></span><br><span class="line">            <span class="comment">// String message = JSON.toJSONString(xxx);</span></span><br><span class="line">            String message = <span class="string">"&#123;\"message\":\""</span> + HttpStatus.UNAUTHORIZED.getReasonPhrase() + <span class="string">"\"&#125;"</span>;</span><br><span class="line">            DataBuffer buffer = response.bufferFactory().wrap(message.getBytes());</span><br><span class="line">            <span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br><span class="line">            <span class="comment">// 也可以直接简单点返回，这样就没有返回消息</span></span><br><span class="line">            <span class="comment">// exchange.getResponse().setStatusCode( HttpStatus.UNAUTHORIZED );</span></span><br><span class="line">            <span class="comment">// return exchange.getResponse().setComplete();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、跨域问题">5、跨域问题</h2><p>配置网关跨域，当然如果使用了 <code>nginx</code> 等配置代理来解决跨域，则可以不需要添加跨域支持</p><h3 id="5-1-yml方式配置">5.1 yml方式配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">'[/**]'</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOriginPatterns:</span> <span class="string">"*"</span></span><br><span class="line">            <span class="attr">allowed-methods:</span> <span class="string">"*"</span></span><br><span class="line">            <span class="attr">allowed-headers:</span> <span class="string">"*"</span></span><br><span class="line">            <span class="attr">allow-credentials:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">exposedHeaders:</span> <span class="string">"Content-Disposition,Content-Type,Cache-Control"</span></span><br></pre></td></tr></table></figure><h3 id="5-2-java方式配置">5.2 java方式配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource(<span class="keyword">new</span> PathPatternParser());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>五、网关限流</h1><h2 id="1、简介-v2">1、简介</h2><p>顾名思义，限流就是限制流量，就像你宽带包有 1 个 G 的流量，用完了就没了。通过限流，我们可以很好地控制系统的 QPS，从而达到保护系统的目的。比如 Web 服务、对外 API，这种类型的服务有以下几种可能导致机器被拖垮：</p><ul><li><p>用户增长过快（好事）</p></li><li><p>因为某个热点事件（微博热搜）</p></li><li><p>竞争对象爬虫</p></li><li><p>恶意的请求</p></li></ul><p><strong>常见的限流算法</strong>有：</p><ul><li><p>计数器算法</p></li><li><p>漏桶（Leaky Bucket）算法</p></li><li><p>令牌桶（Token Bucket）算法</p></li></ul><h2 id="2、常见限流算法介绍">2、常见限流算法介绍</h2><h3 id="2-1-计数器算法">2.1 计数器算法</h3><p>计数器算法是限流算法里最简单也是最容易实现的一种算法。比如我们规定，对于A接口来说，我们1分钟的访问次数不能超过100个。那么我们可以这么做:在一开始的时候，我们可以设置一个计数器counter，每当一个请求过来的时候，counter就加1，如果counter 的值大于100并且该请求与第一个请求的间隔时间还在1分钟之内，触发限流;如果该请求与第一个请求的间隔时间大于1分钟，重置counter重新计数。</p><p>但是计数器算法存在资源浪费问题，并不是最优算法</p><h3 id="2-2-漏桶算法">2.2 漏桶算法</h3><p>漏桶算法其实也很简单，可以粗略的认为就是注水漏水的过程，往桶中以任意速率流入水，以一定速率流出水，当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率。<br><img src="https://img-blog.csdnimg.cn/91f4e456e6d8470c9c7212f5c773eb1f.png#pic_center" alt="在这里插入图片描述"></p><p>漏桶算法主要用途在于保护它人(服务），假设入水量很大，而出水量较慢，则会造成网关的资源堆积可能导致网关瘫痪。而目标服务可能是可以处理大量请求的，但是漏桶算法出水量缓慢反而造成服务那边的资源浪费。漏桶算法无法应对突发调用。不管上面流量多大，下面流出的速度始终保持不变。因为处理的速度是固定的，请求进来的速度是未知的，可能突然进来很多请求，没来得及处理的请求就先放在桶里，既然是个桶，肯定是有容量上限，如果桶满了，那么新进来的请求就会丢弃。</p><h3 id="2-3-令牌桶算法">2.3 令牌桶算法</h3><p>令牌桶算法是对漏桶算法的一种改进，<strong>漏桶算法能够限制请求调用的速率</strong>，而<strong>令牌桶算法能够在限制调用的平均速率的同时还允许一定程度的突发调用</strong>。在令牌桶算法中，存在一个桶，用来存放固定数量的令牌。算法中存在一种机制，以一定的速率往桶中放令牌。每次请求调用需要先获取令牌，只有拿到令牌，才有机会继续执行，否则选择选择等待可用的令牌、或者直接拒绝。放令牌这个动作是持续不断的进行，如果桶中令牌数达到上限，就丢弃令牌。</p><p>Spring Cloud Gateway 内部使用的就是该算法，大概描述如下：</p><ul><li><p>所有的请求在处理之前都需要拿到一个可用的令牌才会被处理；</p></li><li><p>根据限流大小，设置按照一定的速率往桶里添加令牌；</p></li><li><p>桶设置最大的放置令牌限制，当桶满时、新添加的令牌就被丢弃或者拒绝；</p></li><li><p>请求到达后首先要获取令牌桶中的令牌，拿着令牌才可以进行其他的业务逻辑，处理完业务逻辑之后，将令牌直接删除；</p></li><li><p>令牌桶有最低限额，当桶中的令牌达到最低限额的时候，请求处理完之后将不会删除令牌，以此保证足够的限流。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/fc381dce16974a7ea3407cfc0fc11063.png#pic_center" alt="在这里插入图片描述"></p><p>漏桶算法主要用途在于保护它人，而令牌桶算法主要目的在于保护自己，将请求压力交由目标服务处理。假设突然进来很多请求，只要拿到令牌这些请求会瞬时被处理调用目标服务</p><h2 id="3、Gateway限流">3、Gateway限流</h2><h3 id="3-1-介绍-v2">3.1 介绍</h3><blockquote><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-requestratelimiter-gatewayfilter-factory" target="_blank" rel="noopener" title="限流官网文档">限流官网文档</a></p></blockquote><p>Spring Cloud Gateway 官方提供了<code>RequestRateLimiterGatewayFilterFactory</code> 过滤器工厂，使用 Redis 和Lua 脚本实现了令牌桶的方式。 具体实现逻辑在<code>RequestRateLimiterGatewayFilterFactory</code> 类中， Lua 脚本在gateway依赖中</p><h3 id="3-2-添加依赖">3.2 添加依赖</h3><p>首先需要配置好redis环境，然后在pom.xml中添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新版可能有bean冲突，需要除去 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-pool2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置application.yml，添加相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment">#开启根据微服务名称自动转发</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">hello</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8888</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/hello1/&#123;segment&#125;</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetPath=/&#123;segment&#125;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span>   <span class="comment"># 令牌桶每秒填充速率</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span>   <span class="comment"># 令牌桶总容量</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">"#&#123;@pathKeyResolver&#125;"</span>   <span class="comment"># 使用 SpEL 表达式按名称引用 bean</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment">#连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">10000</span></span><br><span class="line">    <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment">#Redis服务器端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment">#Redis服务器密码</span></span><br><span class="line">    <span class="attr">password :</span> </span><br><span class="line">    <span class="comment">#选择哪个库,默认0库</span></span><br><span class="line">    <span class="attr">database :</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment">#最大连接数,默认8</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">1024</span></span><br><span class="line">        <span class="comment"># 最大连接阻塞等待时间,单位豪秒,默认-1</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">10000</span></span><br><span class="line">        <span class="comment">#最大空闲连接,默认8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">200</span></span><br><span class="line">        <span class="comment">#最小空闲连接,默认0</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="3-3-三种限流规则">3.3 三种限流规则</h3><ul><li><p><strong>URI限流</strong></p><p>配置限流过滤器和限流过滤器引用的 bean 对象</p></li><li><p><strong>参数限流</strong></p><p>配置限流过滤器和限流过滤器引用的 bean 对象</p></li><li><p><strong>IP 限流</strong></p><p>配置限流过滤器和限流过滤器引用的 bean 对象</p></li></ul><p>三种限流方式不能同时存在，选定一种，并在yml配置文件配置好<code>key-resolver</code>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyResolverConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据路径限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">pathKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getURI().getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">parameterKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt;</span><br><span class="line">                Mono.just(exchange.getRequest().getQueryParams().getFirst(<span class="string">"userId"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 IP 限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt;</span><br><span class="line">                Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>六、sentinel限流</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81" target="_blank" rel="noopener" title="网关限流介绍文档">网关限流介绍文档</a></p></blockquote><p>Sentinel 支持对 Spring Cloud Gateway、Zuul 等主流的 API Gateway 进行限流。注意：被调用的微服务必须接入sentinel。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/13150f10f8f1c0d1f247c227484e9070.png" alt></p><p>Sentinel 1.6.0 引入了 Sentinel API Gateway Adapter Common 模块，此模块中包含网关限流的规则和自定义 API 的实体和管理逻辑：</p><ul><li><p><code>GatewayFlowRule</code>：网关限流规则，针对 API Gateway 的场景定制的限流规则，可以针对不同 route 或自定义的 API 分组进行限流，支持针对请求中的参数、Header、来源 IP 等进行定制化的限流。</p></li><li><p><code>ApiDefinition</code>：用户自定义的 API 定义分组，可以看做是一些 URL 匹配的组合。比如我们可以定义一个 API 叫 <code>my_api</code>，请求 path 模式为 <code>/foo/**</code> 和 <code>/baz/**</code> 的都归到 <code>my_api</code> 这个 API 分组下面。限流的时候可以针对这个自定义的 API 分组维度进行限流。</p></li></ul><h2 id="2、快速入门">2、快速入门</h2><ul><li><p>单独使用添加 <code>sentinel gateway adapter </code>依赖即可。</p></li><li><p>若想跟 Sentinel Starter 配合使用，需要加上<code> spring-cloud-alibaba-sentinel-gateway </code>依赖来让 <code>spring-cloud-alibaba-sentinel-gateway</code> 模块里的 <code>Spring Cloud Gateway</code> 自动化配置类生效。同时请将<code> spring.cloud.sentinel.filter.enabled</code> 配置项置为 false（若网关流控控制台上看到了 URL 资源，就是此配置项没有置为 false）。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        与 Sentinel Starter 配合使用--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;2021.1&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-alibaba-sentinel-gateway&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;2021.1&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 单独使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8889</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">consumer</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8888</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/hello1/&#123;segment&#125;</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetPath=/&#123;segment&#125;</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8881</span></span><br></pre></td></tr></table></figure><p>最后使用时只需注入对应的 <code>SentinelGatewayFilter</code> 实例以及 <code>SentinelGatewayBlockExceptionHandler</code> 实例即可，用户还可以通过 <code>GatewayRuleManager.loadRules(rules)</code> 手动加载网关规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 限流规则配置类 */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器 ** <span class="doctag">@param</span> viewResolversProvider * <span class="doctag">@param</span> serverCodecConfigurer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayConfiguration</span><span class="params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider, ServerCodecConfigurer serverCodecConfigurer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</span><br><span class="line">        <span class="keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*** 限流异常处理器 ** <span class="doctag">@return</span> */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Register the block exception handler for Spring Cloud Gateway.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*** 限流过滤器 ** <span class="doctag">@return</span> */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">sentinelGatewayFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化自定义的API</span></span><br><span class="line">        initCustomizedApis();</span><br><span class="line">        <span class="comment">//初始化网关限流规则（代码中配置流控规则，一般在控制台配置）</span></span><br><span class="line">        initGatewayRules();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这个api分组一定要配置，否则限流不起效果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCustomizedApis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;ApiDefinition&gt; definitions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置资源保护名</span></span><br><span class="line">        ApiDefinition api = <span class="keyword">new</span> ApiDefinition(<span class="string">"consumer-service-api"</span>)</span><br><span class="line">                .setPredicateItems(<span class="keyword">new</span> HashSet&lt;ApiPredicateItem&gt;() &#123;&#123;</span><br><span class="line">                    <span class="comment">// 设置匹配路径，只有配置了的路径才能出发限流</span></span><br><span class="line">                    add(<span class="keyword">new</span> ApiPathPredicateItem().setPattern(<span class="string">"/hello1/**"</span>)</span><br><span class="line">                            .setMatchStrategy(SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));</span><br><span class="line">                &#125;&#125;);</span><br><span class="line">        definitions.add(api);</span><br><span class="line">        GatewayApiDefinitionManager.loadApiDefinitions(definitions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initGatewayRules</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//resource：资源名称，可以是网关中的 route 名称或者用户自定义的 API 分组名称。</span></span><br><span class="line">        <span class="comment">//count：限流阈值</span></span><br><span class="line">        <span class="comment">//intervalSec：统计时间窗口，单位是秒，默认是 1 秒,这里是60s内最多只接受2个请求</span></span><br><span class="line">        rules.add(<span class="keyword">new</span> GatewayFlowRule(<span class="string">"consumer-service-api"</span>)</span><br><span class="line">                .setCount(<span class="number">2</span>)</span><br><span class="line">                .setIntervalSec(<span class="number">60</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载网关规则</span></span><br><span class="line">        GatewayRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动成功后访问几次页面即可发现<code>Blocked by Sentinel: ParamFlowException</code>，同时我们还可以在 <code>cmd</code> 下执行这个命令来查看实时的统计信息<code>curl http://localhost:8719/cnode?id=gateway</code></p><ul><li><p>thread： 代表当前处理该资源的线程数；</p></li><li><p>pass： 代表一秒内到来到的请求；</p></li><li><p>blocked： 代表一秒内被流量控制的请求数量；</p></li><li><p>success： 代表一秒内成功处理完的请求；</p></li><li><p>total： 代表到一秒内到来的请求以及被阻止的请求总和；</p></li><li><p>RT： 代表一秒内该资源的平均响应时间；</p></li><li><p>1m-pass： 则是一分钟内到来的请求；</p></li><li><p>1m-block： 则是一分钟内被阻止的请求；</p></li><li><p>1m-all： 则是一分钟内到来的请求和被阻止的请求的总和；</p></li><li><p>exception： 则是一秒内业务本身异常的总和。</p></li></ul><p>除此之外，无论触发了限流、熔断降级还是系统保护，它们的秒级拦截详情日志都在 <code>${user_home}/logs/csp/sentinel-block.log</code>里。如果没有发生拦截，则该日志不会出现。日志格式如下:</p><h2 id="3、自定义异常处理器">3、自定义异常处理器</h2><h3 id="3-1-第一种方式">3.1 第一种方式</h3><p>新建文件<code>SentinelFallbackHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelFallbackHandler</span> <span class="keyword">implements</span> <span class="title">WebExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title">writeResponse</span><span class="params">(ServerResponse response, ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">        ServerHttpResponse serverHttpResponse = exchange.getResponse();</span><br><span class="line">        serverHttpResponse.getHeaders().add(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] datas = <span class="string">"&#123;\"code\":429, \"msg\":\"请求超过最大数，请稍后再试\"&#125;"</span>.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        DataBuffer buffer = serverHttpResponse.bufferFactory().wrap(datas);</span><br><span class="line">        <span class="keyword">return</span> serverHttpResponse.writeWith(Mono.just(buffer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange exchange, Throwable ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exchange.getResponse().isCommitted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.error(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!BlockException.isBlockException(ex)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.error(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> handleBlockedRequest(exchange, ex).flatMap(response -&gt; writeResponse(response, exchange));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Mono&lt;ServerResponse&gt; <span class="title">handleBlockedRequest</span><span class="params">(ServerWebExchange exchange, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GatewayCallbackManager.getBlockHandler().handleRequest(exchange, throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在<code>GatewayConfiguration</code>配置好自定义的 <code>SentinelFallbackHandler</code> 注入到 <code>GatewayConfiguration</code>中，注意要<strong>注释掉默认的限流异常处理器</strong>，或者放在其上面位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SentinelFallbackHandler <span class="title">sentinelGatewayExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SentinelFallbackHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-第二种方式">3.2 第二种方式</h3><p>直接在<code>GatewayConfiguration</code>类中定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化自定义的API</span></span><br><span class="line">    initCustomizedApis();</span><br><span class="line">    <span class="comment">//初始化网关限流规则（代码中配置流控规则，一般在控制台配置）</span></span><br><span class="line">    initGatewayRules();</span><br><span class="line">    <span class="comment">//自定义限流异常处理器</span></span><br><span class="line">    initBlockRequestHandler();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBlockRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      BlockRequestHandler blockRequestHandler = <span class="keyword">new</span> BlockRequestHandler() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">handleRequest</span><span class="params">(ServerWebExchange exchange, Throwable t)</span> </span>&#123;</span><br><span class="line">              HashMap&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">              result.put(<span class="string">"code"</span>,String.valueOf(HttpStatus.TOO_MANY_REQUESTS.value()));</span><br><span class="line">              result.put(<span class="string">"msg"</span>, HttpStatus.TOO_MANY_REQUESTS.getReasonPhrase());</span><br><span class="line"></span><br><span class="line">              <span class="keyword">return</span> ServerResponse.status(HttpStatus.TOO_MANY_REQUESTS)</span><br><span class="line">                      .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                      .body(BodyInserters.fromValue(result));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">//设置自定义异常处理器</span></span><br><span class="line">      GatewayCallbackManager.setBlockHandler(blockRequestHandler);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="4、网关流控控制台">4、网关流控控制台</h2><p>Sentinel 1.6.3 引入了网关流控控制台的支持，用户可以直接在 Sentinel 控制台上查看 API Gateway 实时的 route 和自定义 API 分组监控，管理网关规则和 API 分组配置。在 API Gateway 端，用户只需要在原有启动参数的基础上添加如下启动参数即可标记应用为 API Gateway 类型</p><blockquote><p>注：通过 Spring Cloud Alibaba Sentinel 自动接入的 API Gateway 整合则无需此参数(在VM option添加，不过测试发现这个版本需要添加)<br>-Dcsp.sentinel.app.type=1</p></blockquote><p>流控原理如下</p><p><img src="https://img-blog.csdnimg.cn/c3c1090ed91a4830b30c0c2299a4ff12.png#pic_center" alt="在这里插入图片描述"></p><p>首先需要换依赖，同时启动sentinel的jar包以及nacos</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        与 Sentinel Starter 配合使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--      单独使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;sentinel-spring-cloud-gateway-adapter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;1.8.0&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>其次修改相应配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">      <span class="comment"># 如果需要配置Sentinel全局异常处理，可以添加以下配置</span></span><br><span class="line">      <span class="attr">scg:</span></span><br><span class="line">        <span class="attr">fallback:</span></span><br><span class="line">          <span class="attr">mode:</span> <span class="string">response</span> <span class="comment"># 重定向（redirect） 或者 响应（response）</span></span><br><span class="line">          <span class="comment"># redirect: # mode 为 redirect 时，设置重定向URL</span></span><br><span class="line">          <span class="attr">response-status:</span> <span class="number">200</span> <span class="comment"># 响应状态码</span></span><br><span class="line">          <span class="attr">response-body:</span> <span class="string">"&#123;code: 500, msg: '服务器压力山大，请稍后再试！'&#125;"</span> <span class="comment"># 响应内容体</span></span><br></pre></td></tr></table></figure><p>最后我们访问sentinel：<code>http://localhost:8080/#/dashboard</code>，即可在网页设置限流等规则，还可以<strong>自定义 API 分组的监控</strong>(推荐)</p><h2 id="5、网关高可用">5、网关高可用</h2><p>一个请求过来，首先经过 Nginx 的一层负载，到达网关，然后由网关负载到真实后端，若后端有问题，网关会进行重试访问，多次访问后仍返回失败，可以通过熔断或服务降级立即返回结果。而且，由于是负载均衡，网关重试时不一定会访问到出错的后端。</p><hr><p>参考文章：</p><p><a href="https://mp.weixin.qq.com/s/f2hepLraaqUgRKqq9ZKKsQ" target="_blank" rel="noopener" title="微服务网关选型：5种主流 API 网关">微服务网关选型：5种主流 API 网关</a></p><p><a href="https://blog.csdn.net/qq_43631716/article/details/122127837" target="_blank" rel="noopener" title="GateWay实战">GateWay实战</a></p><p><a href="https://juejin.cn/post/7042933266059362312" target="_blank" rel="noopener" title="微服务系列：服务网关 Spring Cloud Gateway 入门">微服务系列：服务网关 Spring Cloud Gateway 入门</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、网关简介&lt;/h1&gt;
&lt;h2 id=&quot;1、服务网关介绍&quot;&gt;1、服务网关介绍&lt;/h2&gt;
&lt;h3 id=&quot;1-1-API网关介绍&quot;&gt;1.1 API网关介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;API网关是一个服务器，是系统的唯一入口。&lt;/strong&gt; 从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、协议转换、限流熔断、静态响应处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务&lt;/strong&gt;，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringCloud" scheme="https://www.shawn22.xyz/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>python selenium自动打卡</title>
    <link href="https://www.shawn22.xyz/posts/bc63ec89.html"/>
    <id>https://www.shawn22.xyz/posts/bc63ec89.html</id>
    <published>2022-05-09T13:29:39.000Z</published>
    <updated>2022-05-09T13:33:12.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、安装谷歌浏览器">1、安装谷歌浏览器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载包</span></span><br><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line"><span class="comment">#安装包，用deb方式安装</span></span><br><span class="line">sudo dpkg -i --force-depends google-chrome-stable_current_amd64.deb</span><br><span class="line"><span class="comment">#######################分割###############################</span></span><br><span class="line"><span class="comment">#若出现Packet xxx is not installed，代表依赖出现问题执行以下命令</span></span><br><span class="line">apt-get install -f</span><br><span class="line"><span class="comment">#重新执行一遍</span></span><br><span class="line">sudo dpkg -i --force-depends google-chrome-stable_current_amd64.deb</span><br><span class="line"><span class="comment">#######################分割##############################</span></span><br><span class="line"><span class="comment">#为了让其能够无界面运行</span></span><br><span class="line">sudo apt-get install xvfb</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2、安装浏览器驱动">2、安装浏览器驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先获取chromedriver的最新版本信息</span></span><br><span class="line">LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)</span><br><span class="line"><span class="comment">#下载  </span></span><br><span class="line">wget http://chromedriver.storage.googleapis.com/<span class="variable">$LATEST</span>/chromedriver_linux64.zip  </span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">unzip chromedriver_linux64.zip  </span><br><span class="line"><span class="comment">#如果没有安装unzip就运行 apt install unzip</span></span><br><span class="line"><span class="comment">#权限配置</span></span><br><span class="line">chmod +x chromedriver  </span><br><span class="line"><span class="comment">#移动到bin目录下</span></span><br><span class="line">sudo mv chromedriver /usr/bin/</span><br></pre></td></tr></table></figure><h2 id="3、安装selenium">3、安装selenium</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#看自己系统是不是pip3,-i表示用什么源下载</span></span><br><span class="line">pip3 install selenium -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="4、简单测试">4、简单测试</h2><p>首先创建test.py文件，之后执行<code>python3 test.py</code>，查看效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_opt = Options()  <span class="comment"># 创建参数设置对象.</span></span><br><span class="line">chrome_opt.add_argument(<span class="string">'--headless'</span>)  <span class="comment"># 无界面化.</span></span><br><span class="line">chrome_opt.add_argument(<span class="string">'--disable-gpu'</span>)  <span class="comment"># 配合上面的无界面化.</span></span><br><span class="line">chrome_opt.add_argument(<span class="string">'--window-size=1366,768'</span>)  <span class="comment"># 设置窗口大小, 窗口大小会有影响.</span></span><br><span class="line">chrome_opt.add_argument(<span class="string">"--no-sandbox"</span>) <span class="comment">#使用沙盒模式运行</span></span><br><span class="line"><span class="comment"># 创建Chrome对象并传入设置信息.</span></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_opt)</span><br><span class="line">url = <span class="string">"https://www.baidu.com/"</span></span><br><span class="line">browser.get(url)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h2 id="5、打卡程序">5、打卡程序</h2><p>这里我先用浏览器插件的Selenium先点击好导出python文件进行修改。程序需要创建<code>data.csv</code>文件，并在其中写入账号密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by Selenium IDE</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据函数</span></span><br><span class="line">userList = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readData</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">"data.csv"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> lines <span class="keyword">in</span> f.readlines():</span><br><span class="line">      data = lines.strip().split(<span class="string">","</span>)</span><br><span class="line">      userList.append(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printLog</span><span class="params">(info)</span>:</span></span><br><span class="line">  print(<span class="string">'&#123;0&#125;   &#123;1&#125;'</span>.format(time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time())),info))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打卡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">  <span class="comment"># 初始化浏览器</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 添加 Chrome 相关配置</span></span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    <span class="comment"># 指定设备名称即可</span></span><br><span class="line">    options.add_experimental_option(<span class="string">'mobileEmulation'</span>, &#123;<span class="string">'deviceName'</span>: <span class="string">'iPhone X'</span>&#125;)</span><br><span class="line">    options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">    options.add_argument(<span class="string">'--disable-dev-shm-usage'</span>)</span><br><span class="line">    <span class="comment"># options.add_argument('--headless')</span></span><br><span class="line">    self.driver = webdriver.Chrome(chrome_options=options)  <span class="comment"># =&gt; 打开浏览器时加入配置</span></span><br><span class="line">    printLog(<span class="string">"浏览器初始化完成"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 正式打卡</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">signIn</span><span class="params">(self,username,password)</span>:</span></span><br><span class="line">    printLog(<span class="string">"正在打开网页"</span>)</span><br><span class="line">    self.driver.get(<span class="string">"http://stu.zstu.edu.cn/webroot/decision/url/mobile?origin=53fd9573-139e-4e3b-9357-4d791849ad58#/login"</span>)</span><br><span class="line">    <span class="comment"># 睡眠控制速度</span></span><br><span class="line">    <span class="comment"># 刷新页面</span></span><br><span class="line">    self.driver.refresh()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    self.driver.set_window_size(<span class="number">800</span>, <span class="number">824</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//*[@id='app']/div/div[1]/div/div/div/div/div/div/div/div[2]/div[2]/div[1]/div/input"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//*[@id='app']/div/div[1]/div/div/div/div/div/div/div/div[2]/div[2]/div[1]/div/input"</span>).send_keys(username)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//input[@type=\'password\']"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//input[@type=\'password\']"</span>).send_keys(password)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    self.driver.find_element(By.CSS_SELECTOR,<span class="string">".r-1loqt21:nth-child(4)"</span>).click()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    printLog(<span class="string">"登录成功"</span>)</span><br><span class="line">    <span class="comment"># 寻找打卡功能模块</span></span><br><span class="line">    self.driver.find_element(By.CSS_SELECTOR,<span class="string">".r-1loqt21:nth-child(2)"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printLog(<span class="string">"开始打卡"</span>)</span><br><span class="line">    self.driver.find_element(By.CSS_SELECTOR, <span class="string">"#col_3_row_6 .css-901oao"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[34]/div/div/div/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.CSS_SELECTOR, <span class="string">"#col_4_row_6 &gt; div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[2]/div/div[2]/div/div/div/div/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.CSS_SELECTOR, <span class="string">"#col_5_row_6 &gt; div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[2]/div/div[6]/div/div/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.CSS_SELECTOR, <span class="string">"#col_3_row_7 .css-1cwyjr8"</span>).click()</span><br><span class="line">    self.driver.find_element(By.CSS_SELECTOR, <span class="string">"#col_3_row_7 .css-1cwyjr8"</span>).send_keys(<span class="string">"浙江理工大学"</span>)</span><br><span class="line">    printLog(<span class="string">"打卡进行中"</span>)</span><br><span class="line">    <span class="comment">#选项，不知道为什么css定位不能用</span></span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[10]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[12]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[13]/div/div/div/div/div/div/div[2]"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[17]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[18]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[19]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[20]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[21]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[23]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[25]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[26]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[28]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[30]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#提交</span></span><br><span class="line">    self.driver.find_element(By.CSS_SELECTOR, <span class="string">"#col_1_row_39"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    printLog(<span class="string">"本次打卡成功"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.driver.quit()</span><br><span class="line">    printLog(<span class="string">"浏览器退出"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  test = Test()</span><br><span class="line">  readData()</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(userList)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      test.signIn(userList[i][<span class="number">0</span>],userList[i][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      printLog(<span class="string">"打卡成功或者系统bug，正在进行下一个"</span>)</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">  test.quit()</span><br><span class="line">  printLog(<span class="string">"今日打卡任务完成"</span>)</span><br><span class="line">  sys.exit()</span><br></pre></td></tr></table></figure><h2 id="6、linux设置定时任务">6、linux设置定时任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传代码后，设置定时</span></span><br><span class="line">crontab -e </span><br><span class="line"><span class="comment">#打开后添加以下记录，代表每天3点执行</span></span><br><span class="line">0 3 * * * /usr/bin/python3 /home/shawn/ezl/sign.py &gt; /home/shawn/ezl/elog.log 2&gt;&amp;1</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">systemctl restart cron.service</span><br></pre></td></tr></table></figure><h2 id="7、其他">7、其他</h2><p>上面部分为研究生打开，下面为本科生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by Selenium IDE</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据函数</span></span><br><span class="line">userList = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readData</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">"data.csv"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> lines <span class="keyword">in</span> f.readlines():</span><br><span class="line">      data = lines.strip().split(<span class="string">","</span>)</span><br><span class="line">      userList.append(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printLog</span><span class="params">(info)</span>:</span></span><br><span class="line">  print(<span class="string">'&#123;0&#125;   &#123;1&#125;'</span>.format(time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time())),info))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打卡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">  <span class="comment"># 初始化浏览器</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 添加 Chrome 相关配置</span></span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    <span class="comment"># 指定设备名称即可</span></span><br><span class="line">    options.add_experimental_option(<span class="string">'mobileEmulation'</span>, &#123;<span class="string">'deviceName'</span>: <span class="string">'iPhone X'</span>&#125;)</span><br><span class="line">    options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">    options.add_argument(<span class="string">'--disable-dev-shm-usage'</span>)</span><br><span class="line">    options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">    self.driver = webdriver.Chrome(chrome_options=options)  <span class="comment"># =&gt; 打开浏览器时加入配置</span></span><br><span class="line">    printLog(<span class="string">"浏览器初始化完成"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 正式打卡</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">signIn</span><span class="params">(self,username,password)</span>:</span></span><br><span class="line">    printLog(<span class="string">"正在打开网页"</span>)</span><br><span class="line">    self.driver.get(<span class="string">"http://stu.zstu.edu.cn/webroot/decision/url/mobile?origin=53fd9573-139e-4e3b-9357-4d791849ad58#/login"</span>)</span><br><span class="line">    <span class="comment"># 睡眠控制速度</span></span><br><span class="line">    <span class="comment"># 刷新页面</span></span><br><span class="line">    self.driver.refresh()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    self.driver.set_window_size(<span class="number">800</span>, <span class="number">824</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//*[@id='app']/div/div[1]/div/div/div/div/div/div/div/div[2]/div[2]/div[1]/div/input"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//*[@id='app']/div/div[1]/div/div/div/div/div/div/div/div[2]/div[2]/div[1]/div/input"</span>).send_keys(username)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//input[@type=\'password\']"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//input[@type=\'password\']"</span>).send_keys(password)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    self.driver.find_element(By.CSS_SELECTOR,<span class="string">".r-1loqt21:nth-child(4)"</span>).click()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    printLog(<span class="string">"登录成功"</span>)</span><br><span class="line">    <span class="comment"># 寻找打卡功能模块</span></span><br><span class="line">    <span class="comment"># self.driver.find_element(By.CSS_SELECTOR,".r-1loqt21:nth-child(2)").click()</span></span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//*[@id='app']/div/div[1]/div/div/div/div[1]/div/div/div/div/div/div[1]/div/div/div/div[2]/div/div/div[3]/div/div/div[5]/div/div/div[3]"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printLog(<span class="string">"开始打卡"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># self.driver.find_element(By.CSS_SELECTOR, "#col_3_row_6 .css-901oao").click()</span></span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//*[@id='col_1_row_11']/span"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[2]/div/div/div/div/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[34]/div/div/div/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[2]/div/div/div/div/div/div/div/div/div/div[2]/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[2]/div/div[2]/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[3]/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[6]/div/div/div/div"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//input"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//input"</span>).send_keys(<span class="string">"浙江理工大学"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    printLog(<span class="string">"打卡进行中"</span>)</span><br><span class="line">    <span class="comment">#选项，不知道为什么css定位不能用</span></span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[11]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[13]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[14]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[18]/div/div/div/div/div/div/div[2]"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[19]/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[19]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[20]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[21]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[22]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[24]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[26]/div/div/div/div/div/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[27]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[29]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//div[31]/div/div/div/div/div[2]/div/div"</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#提交</span></span><br><span class="line">    self.driver.find_element(By.XPATH, <span class="string">"//*[@id='col_0_row_40']/div/div/div/div"</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># self.driver.find_element(By.CSS_SELECTOR, "#col_0_row_40 .r-1loqt21 &gt; .css-1dbjc4n").click()</span></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    printLog(<span class="string">"本次打卡成功"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.driver.quit()</span><br><span class="line">    printLog(<span class="string">"浏览器退出"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  test = Test()</span><br><span class="line">  readData()</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(userList)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      test.signIn(userList[i][<span class="number">0</span>],userList[i][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      printLog(<span class="string">"打卡成功或者系统bug，正在进行下一个"</span>)</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">  test.quit()</span><br><span class="line">  printLog(<span class="string">"今日打卡任务完成"</span>)</span><br><span class="line">  sys.exit()</span><br></pre></td></tr></table></figure><p>=====已经失效，仅做参考=====</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、安装谷歌浏览器&quot;&gt;1、安装谷歌浏览器&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#下载包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#安装包，用deb方式安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo dpkg -i --force-depends google-chrome-stable_current_amd64.deb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#######################分割###############################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#若出现Packet xxx is not installed，代表依赖出现问题执行以下命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-get install -f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#重新执行一遍&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo dpkg -i --force-depends google-chrome-stable_current_amd64.deb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#######################分割##############################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#为了让其能够无界面运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install xvfb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://www.shawn22.xyz/categories/Python/"/>
    
    
    <category term="python基础" scheme="https://www.shawn22.xyz/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>MinIO分布式文件服务器搭建与入门</title>
    <link href="https://www.shawn22.xyz/posts/fdfea979.html"/>
    <id>https://www.shawn22.xyz/posts/fdfea979.html</id>
    <published>2022-05-09T13:26:18.000Z</published>
    <updated>2022-05-09T13:33:12.665Z</updated>
    
    <content type="html"><![CDATA[<h1>一、介绍</h1><h2 id="1、对象存储和分布式文件简介">1、对象存储和分布式文件简介</h2><blockquote><p>阿里云OSS对象存储：<a href="https://help.aliyun.com/product/31815.html" target="_blank" rel="noopener" title="https://help.aliyun.com/product/31815.html">https://help.aliyun.com/product/31815.html</a></p></blockquote><p>对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可靠的云存储服务，<strong>适合存放任意类型的文件</strong>。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成本。对象存储最大的优势就在于它可以存储大容量的非结构化数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等。对于大多数的企业来说，这可以说是最为理想的存储媒介了</p><p>分布式文件系统是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连</p><a id="more"></a><h2 id="2、MinIO简介">2、MinIO简介</h2><blockquote><p>MinIO 是一个基于 Go 实现的高性能、兼容 S3 协议的对象存储。它采用 GNU AGPL v3 开源协议，项目地址是 <a href="https://github.com/minio/minio" target="_blank" rel="noopener" title="https://github.com/minio/minio">https://github.com/minio/minio</a>，官网是 <a href="https://min.io" target="_blank" rel="noopener" title="https://min.io">https://min.io</a>，中文官网是<a href="www.minio.org.cn/" title="www.minio.org.cn">www.minio.org.cn</a><br>它适合存储海量的非结构化的数据，例如说图片、音频、视频等常见文件，备份数据、容器、虚拟机镜像等等，小到 1 KB，大到 5 TB 都可以支持。</p></blockquote><h2 id="3、MinIO特点">3、MinIO特点</h2><blockquote><p><a href="https://www.jianshu.com/p/c2b43ff67df0" target="_blank" rel="noopener" title="minio原理和使用">minio原理和使用</a></p></blockquote><ul><li><p>高性能：作为高性能对象存储，在标准硬件条件下它能达到55GB/s的读、35GG/s的写速率</p></li><li><p>可扩容：不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并跨越多个数据中心</p></li><li><p>云原生：容器化、基于K8S的编排、多租户支持</p></li><li><p>Amazon S3兼容：Minio使用Amazon S3 v2 / v4 API。可以使用Minio SDK，Minio Client，AWS SDK和AWS CLI访问Minio服务器。</p></li><li><p>可对接后端存储: 除了Minio自己的文件系统，还支持DAS、 JBODs、NAS、Google云存储和Azure Blob存储。</p></li><li><p>SDK支持: 基于Minio轻量的特点，它得到类似Java、Python或Go等语言的sdk支持</p></li><li><p>Lambda计算: Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库。</p></li><li><p>有操作页面</p></li><li><p>功能简单: 这一设计原则让MinIO不容易出错、更快启动</p></li><li><p>支持纠删码：MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据</p><p>纠删码是一种用来重建丢失或损坏数据的数学算法。MinIO 使用 Reed-Solomon 码将需要存储的对象切分为可变数据块和奇偶校验块。例如，在由 12 个驱动器构成的存储架构中，对象分片范围可以是 6 个数据块、6 个奇偶校验块到 10 个数据块、2 个奇偶校验块。</p></li></ul><h1>二、MinIO安装入门</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p>中文开发文档：<a href="http://docs.minio.org.cn/docs/" target="_blank" rel="noopener" title="http://docs.minio.org.cn/docs/">http://docs.minio.org.cn/docs/</a></p></blockquote><p>由于 MinIO 是 Go 写的，所以就一个运行程序，因此安装部署 MinIO 就非常简单。在文档 <a href="https://min.io/download" target="_blank" rel="noopener" title="https://min.io/download">https://min.io/download</a> 中，有 Windows、Linux、MacOS、Docker、Kubernetes、Source 六种安装方式。</p><h2 id="2、快速安装">2、快速安装</h2><h3 id="2-1-Windows">2.1 Windows</h3><p>需要在 Windows PowerShell 中执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 国外资源，龟速下载,建议科学上网</span></span><br><span class="line">setx MINIO_ROOT_USER admin</span><br><span class="line">Invoke-WebRequest -Uri <span class="string">"https://dl.min.io/server/minio/release/windows-amd64/minio.exe"</span> -OutFile <span class="string">"C:\minio.exe"</span> </span><br><span class="line">setx MINIO_ROOT_PASSWORD password</span><br><span class="line">C:\minio.exe server F:\Data --console-address <span class="string">":9001"</span> <span class="comment">## F:\Data 存储目录；--console-address 是 UI 界面的端口</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Linux">2.2 Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 国外资源，龟速下载</span></span><br><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio </span><br><span class="line">chmod +x minio</span><br><span class="line">MINIO_ROOT_USER=admin MINIO_ROOT_PASSWORD=password ./minio server ./minio --console-address <span class="string">":9001"</span> <span class="comment">## /Users/yunai/minio 存储目录；--console-address 是 UI 界面的端口</span></span><br></pre></td></tr></table></figure><h3 id="2-3-MacOS">2.3 MacOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 国外资源，龟速下载</span></span><br><span class="line">wget https://dl.min.io/server/minio/release/darwin-amd64/minio </span><br><span class="line">chmod +x minio</span><br><span class="line">MINIO_ROOT_USER=admin MINIO_ROOT_PASSWORD=password ./minio server F:\Data --console-address <span class="string">":9001"</span> <span class="comment">## F:\Data 存储目录；--console-address 是 UI 界面的端口</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Docker-推荐">2.4 Docker(推荐)</h3><p>linux单个docker启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br><span class="line"><span class="comment"># --console-address 是 UI 界面的端口</span></span><br><span class="line">docker run --name minio -p 9000:9000 -p 9001:9001 -d --restart=always -e <span class="string">"MINIO_ACCESS_KEY=admin"</span> -e <span class="string">"MINIO_SECRET_KEY=password"</span> -v <span class="string">"~/minio/data"</span>:<span class="string">"/data"</span> -v <span class="string">"~/minio/config"</span>:<span class="string">"/root/.minio"</span> minio/minio server /data --console-address <span class="string">":9001"</span></span><br></pre></td></tr></table></figure><p>linux docker-compose启动(推荐)，首先编写<code>docker-compose.yml</code>文件，最后在该目录下<code>docker-compose up -d</code>成功启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">"minio"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9000:9000"</span> <span class="comment"># api 端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9001:9001"</span> <span class="comment"># 控制台端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ACCESS_KEY:</span> <span class="string">admin</span>    <span class="comment">#管理后台用户名</span></span><br><span class="line">      <span class="attr">MINIO_SECRET_KEY:</span> <span class="string">password</span> <span class="comment">#管理后台密码，最小8个字符</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/deepsoft/minio/data:/data</span>               <span class="comment">#映射当前目录下的data目录至容器内/data目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/deepsoft/minio/config:/root/.minio/</span>     <span class="comment">#映射配置目录</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">--console-address</span> <span class="string">':9001'</span> <span class="string">/data</span>  <span class="comment">#指定容器中的目录 /data</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">"50M"</span> <span class="comment"># 最大文件上传限制</span></span><br><span class="line">        <span class="attr">max-file:</span> <span class="string">"10"</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">json-file</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">minio</span></span><br></pre></td></tr></table></figure><p>启动成功后打开防火墙，浏览<code>http://localhost:9001</code>即可进入可视化页面</p><h2 id="3、UI界面界面简单使用">3、UI界面界面简单使用</h2><blockquote><p><a href="https://docs.min.io/minio/baremetal/console/minio-console.html#" target="_blank" rel="noopener" title="https://docs.min.io/minio/baremetal/console/minio-console.html#">https://docs.min.io/minio/baremetal/console/minio-console.html#</a></p></blockquote><h3 id="3-1-新建存储桶">3.1 新建存储桶</h3><p>首先登录<code>http://localhost:9001</code>，点击 <strong>[Create Bucket]</strong> 按钮，新建一个 Bucket 存储桶，用于稍后文件的上传</p><p><img src="https://img-blog.csdnimg.cn/16478b069b9445e695212b5b39c4f282.png#pic_center" alt="在这里插入图片描述"></p><p>这里存储桶名称长度必须⾄少为3且不超过63个字符，不得包含⼤写字符或下划线，必须以⼩写字母或数字开头。</p><p><img src="https://img-blog.csdnimg.cn/9ae020ab6bb84cccac4f676630ea5c73.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-2-添加访问规则">3.2 添加访问规则</h3><p>默认配置下，访问存储桶是需要请求授权的。但是在实际场景下，我们往往希望允许直接访问，此时就需要添加一条 readonly 或readwrite访问规则；或者直接在[Access Policy]直接设置public(不安全)</p><p>① 点击右上角的 [Manage] 设置图标，然后选择 [Access Rules] 菜单。</p><p><img src="https://img-blog.csdnimg.cn/18da4584abeb48a0893e2a5ca05b06b4.png#pic_center" alt="在这里插入图片描述"></p><p>② 点击 [Add Access Rule] 按钮，添加一条 Prefix 为 <code>/</code>或者<code>*</code> ，Access 为 <code>readwrite</code>的规则。</p><p><img src="https://img-blog.csdnimg.cn/5700b56ee50746b98e6baf7d386c569e.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-3-上传文件">3.3 上传文件</h3><p>点击 [Upload] 按钮，点击 [Upload File] 选项，选择一个文件上传</p><p><img src="https://img-blog.csdnimg.cn/b1162f1136f34cf38a414c00e08eea98.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-4-访问文件">3.4 访问文件</h3><p>文件的访问地址的格式为 <code>&lt;http://127.0.0.1:9000/{bucket}/{name}&gt;</code>，注意是 9000 端口。比如我的是<code>http://192.168.31.34:9000/textbook/yuanshen.png</code></p><h1>三、SpringBoot整合MinIO</h1><h2 id="1、引入项目依赖">1、引入项目依赖</h2><p>注意7.x和8.x版本有一定差异，这里在<code>pom.xml</code>引入最新版</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、配置文件设置">2、配置文件设置</h2><p>在<code>application.yml</code>中设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tomcat</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置文件上传大小限制</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">100MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">100MB</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># Minio配置</span></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://localhost:9000</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">bucketName:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h2 id="3、配置类设置">3、配置类设置</h2><p>读取配置文件的信息，这里的存储桶名称可以设置多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"minio"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储桶名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String TextBookBucketName;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MinioClient <span class="title">getMinioClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder().endpoint(url).credentials(accessKey, secretKey).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置返回类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileVO</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 展示url</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String previewUrl;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 存数据库的uri</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、工具类整合">4、工具类整合</h2><h3 id="4-1-简单整合MinIO上传工具">4.1 简单整合MinIO上传工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioConfig minioConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//可以直接原来的文件名，也可以自定义</span></span><br><span class="line">        <span class="comment">//String originalFilename = file.getOriginalFilename();</span></span><br><span class="line">        <span class="comment">// 文件名</span></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 新的文件名 = 时间戳.后缀名</span></span><br><span class="line">        String fileName = System.currentTimeMillis() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">// 上传</span></span><br><span class="line">        minioClient.putObject(PutObjectArgs.builder()</span><br><span class="line">                <span class="comment">// 存储桶</span></span><br><span class="line">                .bucket(minioConfig.getTextBookBucketName())</span><br><span class="line">                <span class="comment">// 文件名 ,可以添加路径，会自动创建</span></span><br><span class="line">                .object(fileName)</span><br><span class="line">                <span class="comment">// 文件内容</span></span><br><span class="line">                .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 文件类型</span></span><br><span class="line">                .contentType(file.getContentType())</span><br><span class="line">                .build());</span><br><span class="line">        FileVO fileVO = <span class="keyword">new</span> FileVO();</span><br><span class="line">        fileVO.setUri(<span class="string">"/"</span> + minioConfig.getTextBookBucketName()+ <span class="string">"/"</span> + fileName);</span><br><span class="line">        fileVO.setPreviewUrl(minioConfig.getUrl()+<span class="string">"/"</span> + fileVO.getUri());</span><br><span class="line">        <span class="comment">// 拼接路径</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(fileVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@RequestParam(<span class="string">"path"</span>)</span> String path) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        minioClient.removeObject(RemoveObjectArgs.builder()</span><br><span class="line">                <span class="comment">// 存储桶</span></span><br><span class="line">                .bucket(minioConfig.getTextBookBucketName())</span><br><span class="line">                <span class="comment">// 文件名，可以文件名</span></span><br><span class="line">                .object(path)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-MinIO工具类">4.2 MinIO工具类</h3><p>首先创建工具类，这里很多操作都在工具类里了，<a href="http://xn--MinioUtils-m11q639bds8blf7bgjedo6ghkwaxkbr95e.xxx" target="_blank" rel="noopener">需要用到的地方通过MinioUtils.xxx</a>()方法调用即可。另外，工具类中传递的endpoint、bucketName、accessKey、ecretKey等参数，都是在minio后台可以拿到的，没有的话也可以自己设置，同时要保证后台的存储桶是开放的，<strong>默认代码创建的都是私有的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinIOUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String bucketName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String secretKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer imgSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer fileSize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">"/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinIOUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinIOUtils</span><span class="params">(String endpoint, String bucketName, String accessKey, String secretKey, Integer imgSize, Integer fileSize)</span> </span>&#123;</span><br><span class="line">        MinIOUtils.endpoint = endpoint;</span><br><span class="line">        MinIOUtils.bucketName = bucketName;</span><br><span class="line">        MinIOUtils.accessKey = accessKey;</span><br><span class="line">        MinIOUtils.secretKey = secretKey;</span><br><span class="line">        MinIOUtils.imgSize = imgSize;</span><br><span class="line">        MinIOUtils.fileSize = fileSize;</span><br><span class="line">        createMinioClient();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建基于Java端的MinioClient</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMinioClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == minioClient) &#123;</span><br><span class="line">                log.info(<span class="string">"开始创建 MinioClient..."</span>);</span><br><span class="line">                minioClient = MinioClient</span><br><span class="line">                                .builder()</span><br><span class="line">                                .endpoint(endpoint)</span><br><span class="line">                                .credentials(accessKey, secretKey)</span><br><span class="line">                                .build();</span><br><span class="line">                createBucket(bucketName);</span><br><span class="line">                log.info(<span class="string">"创建完毕 MinioClient..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      log.error(<span class="string">"[Minio工具类]&gt;&gt;&gt;&gt; MinIO服务器异常："</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上传文件前缀路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getBasisUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> endpoint + SEPARATOR + bucketName + SEPARATOR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******************************  Operate Bucket Start  ******************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动SpringBoot容器的时候初始化Bucket</span></span><br><span class="line"><span class="comment">     * 如果没有Bucket则创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createBucket</span><span class="params">(String bucketName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucketExists(bucketName)) &#123;</span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  判断Bucket是否存在，true：存在，false：不存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">bucketExists</span><span class="params">(String bucketName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得Bucket的策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getBucketPolicy</span><span class="params">(String bucketName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> minioClient</span><br><span class="line">                .getBucketPolicy(</span><br><span class="line">                    GetBucketPolicyArgs</span><br><span class="line">                        .builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .build()</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得所有Bucket列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Bucket&gt; <span class="title">getAllBuckets</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.listBuckets();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bucketName获取其相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;Bucket&gt; <span class="title">getBucket</span><span class="params">(String bucketName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAllBuckets().stream().filter(b -&gt; b.name().equals(bucketName)).findFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bucketName删除Bucket，true：删除成功； false：删除失败，文件或已不存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeBucket</span><span class="params">(String bucketName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        minioClient.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******************************  Operate Bucket End  ******************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/******************************  Operate Files Start  ******************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断文件是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isObjectExist</span><span class="params">(String bucketName, String objectName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> exist = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.statObject(StatObjectArgs.builder().bucket(bucketName).object(objectName).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      log.error(<span class="string">"[Minio工具类]&gt;&gt;&gt;&gt; 判断文件是否存在, 异常："</span>, e);</span><br><span class="line">            exist = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断文件夹是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件夹名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFolderExist</span><span class="params">(String bucketName, String objectName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> exist = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">                    ListObjectsArgs.builder().bucket(bucketName).prefix(objectName).recursive(<span class="keyword">false</span>).build());</span><br><span class="line">            <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">                Item item = result.get();</span><br><span class="line">                <span class="keyword">if</span> (item.isDir() &amp;&amp; objectName.equals(item.objectName())) &#123;</span><br><span class="line">                    exist = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          log.error(<span class="string">"[Minio工具类]&gt;&gt;&gt;&gt; 判断文件夹是否存在，异常："</span>, e);</span><br><span class="line">            exist = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件前置查询文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> recursive 是否使用递归查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> MinioItem 列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Item&gt; <span class="title">getAllObjectsByPrefix</span><span class="params">(String bucketName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   String prefix,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   <span class="keyword">boolean</span> recursive)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; objectsIterator = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder().bucket(bucketName).prefix(prefix).recursive(recursive).build());</span><br><span class="line">        <span class="keyword">if</span> (objectsIterator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Result&lt;Item&gt; o : objectsIterator) &#123;</span><br><span class="line">                Item item = o.get();</span><br><span class="line">                list.add(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 二进制流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getObject</span><span class="params">(String bucketName, String objectName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.getObject(GetObjectArgs.builder().bucket(bucketName).object(objectName).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断点下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 起始字节的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 要读取的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 二进制流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getObject</span><span class="params">(String bucketName, String objectName, <span class="keyword">long</span> offset, <span class="keyword">long</span> length)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.getObject(</span><br><span class="line">                GetObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(objectName)</span><br><span class="line">                        .offset(offset)</span><br><span class="line">                        .length(length)</span><br><span class="line">                        .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取路径下文件列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> recursive 是否递归查找，false：模拟文件夹结构查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 二进制流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Result&lt;Item&gt;&gt; listObjects(String bucketName, String prefix,</span><br><span class="line">                                                     <span class="keyword">boolean</span> recursive) &#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .prefix(prefix)</span><br><span class="line">                        .recursive(recursive)</span><br><span class="line">                        .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用MultipartFile进行文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 对象名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectWriteResponse <span class="title">uploadFile</span><span class="params">(String bucketName, MultipartFile file,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                String objectName, String contentType)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InputStream inputStream = file.getInputStream();</span><br><span class="line">        <span class="keyword">return</span> minioClient.putObject(</span><br><span class="line">                PutObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(objectName)</span><br><span class="line">                        .contentType(contentType)</span><br><span class="line">                        .stream(inputStream, inputStream.available(), -<span class="number">1</span>)</span><br><span class="line">                        .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传本地文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 对象名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 本地文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectWriteResponse <span class="title">uploadFile</span><span class="params">(String bucketName, String objectName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.uploadObject(</span><br><span class="line">                UploadObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(objectName)</span><br><span class="line">                        .filename(fileName)</span><br><span class="line">                        .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过流上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectWriteResponse <span class="title">uploadFile</span><span class="params">(String bucketName, String objectName, InputStream inputStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.putObject(</span><br><span class="line">                PutObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(objectName)</span><br><span class="line">                        .stream(inputStream, inputStream.available(), -<span class="number">1</span>)</span><br><span class="line">                        .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件夹或目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 目录路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectWriteResponse <span class="title">createDir</span><span class="params">(String bucketName, String objectName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.putObject(</span><br><span class="line">                PutObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(objectName)</span><br><span class="line">                        .stream(<span class="keyword">new</span> ByteArrayInputStream(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;&#125;), <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">                        .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件信息, 如果抛出异常则说明文件不存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileStatusInfo</span><span class="params">(String bucketName, String objectName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.statObject(</span><br><span class="line">                StatObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(objectName)</span><br><span class="line">                        .build()).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拷贝文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcBucketName 目标存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcObjectName 目标文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectWriteResponse <span class="title">copyFile</span><span class="params">(String bucketName, String objectName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 String srcBucketName, String srcObjectName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioClient.copyObject(</span><br><span class="line">                CopyObjectArgs.builder()</span><br><span class="line">                        .source(CopySource.builder().bucket(bucketName).object(objectName).build())</span><br><span class="line">                        .bucket(srcBucketName)</span><br><span class="line">                        .object(srcObjectName)</span><br><span class="line">                        .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeFile</span><span class="params">(String bucketName, String objectName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        minioClient.removeObject(</span><br><span class="line">                RemoveObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(objectName)</span><br><span class="line">                        .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys 需要删除的文件列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeFiles</span><span class="params">(String bucketName, List&lt;String&gt; keys)</span> </span>&#123;</span><br><span class="line">        List&lt;DeleteObject&gt; objects = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        keys.forEach(s -&gt; &#123;</span><br><span class="line">            objects.add(<span class="keyword">new</span> DeleteObject(s));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                removeFile(bucketName, s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"[Minio工具类]&gt;&gt;&gt;&gt; 批量删除文件，异常："</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件外链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expires 过期时间 &lt;=7 秒 （外链有效时间（单位：秒））</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPresignedObjectUrl</span><span class="params">(String bucketName, String objectName, Integer expires)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GetPresignedObjectUrlArgs args = GetPresignedObjectUrlArgs.builder().expiry(expires).bucket(bucketName).object(objectName).build();</span><br><span class="line">        <span class="keyword">return</span> minioClient.getPresignedObjectUrl(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得文件外链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPresignedObjectUrl</span><span class="params">(String bucketName, String objectName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GetPresignedObjectUrlArgs args = GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                                                                    .bucket(bucketName)</span><br><span class="line">                                                                    .object(objectName)</span><br><span class="line">                                                                    .method(Method.GET).build();</span><br><span class="line">        <span class="keyword">return</span> minioClient.getPresignedObjectUrl(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将URLDecoder编码转成UTF8</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUtf8ByURLDecoder</span><span class="params">(String str)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String url = str.replaceAll(<span class="string">"%(?![0-9a-fA-F]&#123;2&#125;)"</span>, <span class="string">"%25"</span>);</span><br><span class="line">        <span class="keyword">return</span> URLDecoder.decode(url, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******************************  Operate Files End  ******************************/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建controller层，这里要首先初始化静态类才能使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioConfig minioConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initializeMinIO</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 新建minIO</span></span><br><span class="line">        <span class="keyword">new</span> MinIOUtils(minioConfig.getUrl(),</span><br><span class="line">                minioConfig.getTextBookBucketName(),</span><br><span class="line">                minioConfig.getAccessKey(),</span><br><span class="line">                minioConfig.getSecretKey(),</span><br><span class="line">                <span class="number">1000</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/resourceFileUpload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">resourceFileUpload</span><span class="params">(@RequestParam(<span class="string">"dirPath"</span>)</span>String dirPath,</span></span><br><span class="line"><span class="function">                                     @<span class="title">RequestParam</span><span class="params">(<span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(file == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="string">"参数错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 路径</span></span><br><span class="line">        String path;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(dirPath))&#123;</span><br><span class="line">            path = file.getOriginalFilename();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            path = dirPath + <span class="string">"/"</span> + file.getOriginalFilename();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上传</span></span><br><span class="line">        MinIOUtils.uploadFile(minioConfig.getTextBookBucketName(), file, path, file.getContentType());</span><br><span class="line">        FileVO fileVO = <span class="keyword">new</span> FileVO();</span><br><span class="line">        fileVO.setUri(<span class="string">"/"</span> + minioConfig.getTextBookBucketName()+ <span class="string">"/"</span> + path);</span><br><span class="line">        fileVO.setPreviewUrl(minioConfig.getUrl()+<span class="string">"/"</span> + fileVO.getUri());</span><br><span class="line">        log.info(<span class="string">"文件上传成功!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(fileVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p><p><a href="https://www.cnblogs.com/fulongyuanjushi/p/15858744.html" target="_blank" rel="noopener" title="SpringBoot+Minio搭建">SpringBoot+Minio搭建</a></p><p><a href="https://mp.weixin.qq.com/s/42At6eDalF_Sh5PNJQFlxw" target="_blank" rel="noopener" title="16 分钟搭建高性能的文件服务器">16 分钟搭建高性能的文件服务器</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、对象存储和分布式文件简介&quot;&gt;1、对象存储和分布式文件简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;阿里云OSS对象存储：&lt;a href=&quot;https://help.aliyun.com/product/31815.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://help.aliyun.com/product/31815.html&quot;&gt;https://help.aliyun.com/product/31815.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可靠的云存储服务，&lt;strong&gt;适合存放任意类型的文件&lt;/strong&gt;。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成本。对象存储最大的优势就在于它可以存储大容量的非结构化数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等。对于大多数的企业来说，这可以说是最为理想的存储媒介了&lt;/p&gt;
&lt;p&gt;分布式文件系统是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security学习笔记</title>
    <link href="https://www.shawn22.xyz/posts/c1b7a70d.html"/>
    <id>https://www.shawn22.xyz/posts/c1b7a70d.html</id>
    <published>2022-05-09T13:26:05.000Z</published>
    <updated>2022-05-09T13:33:12.671Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Security简介</h1><h2 id="1、简介">1、简介</h2><p><strong>Spring Security</strong> 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架<strong>Shiro</strong>，它提供了更丰富的功能，社区资源也比Shiro丰富。一般来说中大型的项目都是使用<strong>SpringSecurity</strong> 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。一般Web应用的需要进行<strong>认证</strong>和<strong>授权</strong>。</p><ul><li><p><strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p></li><li><p><strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p></li></ul><p>而认证和授权也是SpringSecurity作为安全框架的核心功能。</p><a id="more"></a><h2 id="2、security框架快速搭建">2、security框架快速搭建</h2><p>在<code>pom.xml</code>中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写最简单的controller，此时启动项目，访问接口，系统默认会跳转到security登录界面，默认用户名是user，密码会输出在控制台。接口必须登陆之后才能对接口进行访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>二、Spring Security认证</h1><h2 id="1、登录校验流程">1、登录校验流程</h2><p><img src="https://img-blog.csdnimg.cn/f7674870388642d094798f46626b6b7d.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、SpringSecurity原理初探">2、SpringSecurity原理初探</h2><h3 id="2-1-过滤器介绍">2.1 过滤器介绍</h3><p>下图展示了核心过滤器，其它的非核心过滤器并没有在图中展示。</p><ul><li><p><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责</p></li><li><p><strong>ExceptionTranslationFilter</strong>：处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException </p></li><li><p><strong>FilterSecurityInterceptor</strong>：负责权限校验的过滤器。<br><img src="https://img-blog.csdnimg.cn/b82685fb8e914d40a75af747438fd6d4.png#pic_center" alt="在这里插入图片描述"></p></li></ul><p>另外我们也可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</p><p><img src="https://img-blog.csdnimg.cn/9221e33d02474d65bea1d57549e7ecba.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-2-认证流程详解">2.2 认证流程详解</h3><ul><li><p><strong>Authentication</strong>接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p></li><li><p><strong>AuthenticationManager</strong>接口：定义了认证Authentication的方法 </p></li><li><p><strong>UserDetailsService</strong>接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</p></li><li><p><strong>UserDetails</strong>接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/7ec1cdcd2adf4f2a88d32a38e9bfe883.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3、SpringBoot整合前期准备">3、SpringBoot整合前期准备</h2><h3 id="3-1-思路分析">3.1 思路分析</h3><blockquote><p>可以参考：<br><a href="https://blog.csdn.net/lemon_TT/article/details/113262294" target="_blank" rel="noopener" title="SpringBoot整合JWT实现前后端Token验证">SpringBoot整合JWT实现前后端Token验证</a><a href="https://blog.csdn.net/lemon_TT/article/details/117711682" target="_blank" rel="noopener" title="Redis6.0学习笔记">Redis6.0学习笔记</a></p></blockquote><p><strong>登录</strong></p><ul><li><p><strong>自定义登录接口</strong></p><p>调用ProviderManager的方法进行认证 如果认证通过生成jwt；接着把用户信息存入redis中</p></li><li><p><strong>自定义UserDetailsService</strong></p><p>在这个实现类中去查询数据库</p></li></ul><p><strong>校验</strong></p><ul><li><p><strong>定义Jwt认证过滤器</strong></p><p>获取token解析；然后token获取其中的userid；接着从redis中获取用户信息存入SecurityContextHolder</p></li></ul><p><img src="https://img-blog.csdnimg.cn/01b13286436c4c388c2629130234e8c2.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-2-数据库与框架搭建">3.2 数据库与框架搭建</h3><p>在之前的<code>pom.xml</code>中继续添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.80<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jwt依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Java SE中将不再包含java EE 的Jar包。而在 java 6/7/8 时关于这个API 都是捆绑在一起的，因为用了jdk11，所以要引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>配置数据库信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/spring_security?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">9</span></span><br><span class="line">    <span class="attr">connect-timeout:</span> <span class="number">250000</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">10000</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mappers/**/*.xml</span></span><br></pre></td></tr></table></figure><p>创建数据库用户表，从之前的分析我们可以知道，我们可以自定义一个<code>UserDetailsService</code>,让SpringSecurity使用我们的UserDetailsService。我们自己的UserDetailsService可以从数据库中查询用户名和密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `sys_user` (</span><br><span class="line">  `id` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'主键'</span>,</span><br><span class="line">  `user_name` VARCHAR(64) NOT NULL DEFAULT <span class="string">'NULL'</span> COMMENT <span class="string">'用户名'</span>,</span><br><span class="line">  `nick_name` VARCHAR(64) NOT NULL DEFAULT <span class="string">'NULL'</span> COMMENT <span class="string">'昵称'</span>,</span><br><span class="line">  `password` VARCHAR(64) NOT NULL DEFAULT <span class="string">'NULL'</span> COMMENT <span class="string">'密码'</span>,</span><br><span class="line">  `status` CHAR(1) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'账号状态（0正常 1停用）'</span>,</span><br><span class="line">  `email` VARCHAR(64) DEFAULT NULL COMMENT <span class="string">'邮箱'</span>,</span><br><span class="line">  `phonenumber` VARCHAR(32) DEFAULT NULL COMMENT <span class="string">'手机号'</span>,</span><br><span class="line">  `sex` CHAR(1) DEFAULT NULL COMMENT <span class="string">'用户性别（0男，1女，2未知）'</span>,</span><br><span class="line">  `avatar` VARCHAR(128) DEFAULT NULL COMMENT <span class="string">'头像'</span>,</span><br><span class="line">  `user_type` CHAR(1) NOT NULL DEFAULT <span class="string">'1'</span> COMMENT <span class="string">'用户类型（0管理员，1普通用户）'</span>,</span><br><span class="line">  `create_by` BIGINT(20) DEFAULT NULL COMMENT <span class="string">'创建人的用户id'</span>,</span><br><span class="line">  `create_time` DATETIME DEFAULT NULL COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  `update_by` BIGINT(20) DEFAULT NULL COMMENT <span class="string">'更新人'</span>,</span><br><span class="line">  `update_time` DATETIME DEFAULT NULL COMMENT <span class="string">'更新时间'</span>,</span><br><span class="line">  `del_flag` INT(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'删除标志（0代表未删除，1代表已删除）'</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT=<span class="string">'用户表'</span></span><br></pre></td></tr></table></figure><p>创建User 实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表(User)实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName</span>(value = <span class="string">"sys_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">40356785423868312L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 昵称</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 密码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 账号状态（0正常 1停用）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮箱</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 手机号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String phonenumber;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户性别（0男，1女，2未知）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 头像</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户类型（0管理员，1普通用户）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String userType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建人的用户id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新人</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建mapper类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主启动类上扫描mapper包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.sangeng.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSecurityApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(SimpleSecurityApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(run);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后测试一下框架是否有问题，能正常运行就代表没问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecurityApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"测试"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-相应工具类创建">3.3 相应工具类创建</h3><p>设置全局返回类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息，如果有错误时，前端可以获取该字段进行提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询到的结果数据，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(Integer code, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加Redis相关配置，设置fastjson序列化与反序列，当然也可以用自带的jackson序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis使用FastJson序列化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonRedisSerializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 增加了安全机制，2.x版本暂时没有找到这个解决方法</span></span><br><span class="line">        ParserConfig.getGlobalInstance().addAccept(<span class="string">"com.shawn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastJsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="keyword">null</span> || bytes.length &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String str = <span class="keyword">new</span> String(bytes, DEFAULT_CHARSET);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JavaType <span class="title">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(value = &#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        FastJsonRedisSerializer serializer = <span class="keyword">new</span> FastJsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建redis工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(value = &#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间颗粒度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span> Integer timeout, <span class="keyword">final</span> TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="keyword">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operation.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteObject</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存List数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 待缓存的List数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">long</span> <span class="title">setCacheList</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;T&gt; dataList)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Long count = redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="keyword">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的list对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getCacheList</span><span class="params">(<span class="keyword">final</span> String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSet 缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存数据的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">BoundSetOperations&lt;String, T&gt; <span class="title">setCacheSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;T&gt; dataSet)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class="line">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            setOperation.add(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Set&lt;T&gt; <span class="title">getCacheSet</span><span class="params">(<span class="keyword">final</span> String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, T&gt; dataMap)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Map&lt;String, T&gt; <span class="title">getCacheMap</span><span class="params">(<span class="keyword">final</span> String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往Hash中存入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> T value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash中的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> opsForHash.get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hkey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hkey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HashOperations hashOperations = redisTemplate.opsForHash();</span><br><span class="line">        hashOperations.delete(key, hkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys Hash键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getMultiCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建客户端渲染工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebUtils</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderString</span><span class="params">(HttpServletResponse response, String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建jwt工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有效期为60 * 60 *1000  一个小时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long JWT_TTL = <span class="number">60</span> * <span class="number">60</span> *<span class="number">1000L</span>;</span><br><span class="line">    <span class="comment">//设置秘钥明文,要求长度是4的倍数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JWT_KEY = <span class="string">"shawn222"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String token = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createJWT</span><span class="params">(String subject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置过期时间</span></span><br><span class="line">        JwtBuilder builder = getJwtBuilder(subject, <span class="keyword">null</span>, getUUID());</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis token超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createJWT</span><span class="params">(String subject, Long ttlMillis)</span> </span>&#123;</span><br><span class="line">        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, getUUID());<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis, String uuid)</span> </span>&#123;</span><br><span class="line">        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;</span><br><span class="line">        SecretKey secretKey = generalKey();</span><br><span class="line">        <span class="keyword">long</span> nowMillis = System.currentTimeMillis();</span><br><span class="line">        Date now = <span class="keyword">new</span> Date(nowMillis);</span><br><span class="line">        <span class="keyword">if</span>(ttlMillis==<span class="keyword">null</span>)&#123;</span><br><span class="line">            ttlMillis=JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> expMillis = nowMillis + ttlMillis;</span><br><span class="line">        Date expDate = <span class="keyword">new</span> Date(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid)              <span class="comment">//唯一的ID</span></span><br><span class="line">                .setSubject(subject)   <span class="comment">// 主题  可以是JSON数据</span></span><br><span class="line">                .setIssuer(<span class="string">"shawn"</span>)     <span class="comment">// 签发者</span></span><br><span class="line">                .setIssuedAt(now)      <span class="comment">// 签发时间</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey) <span class="comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span><br><span class="line">                .setExpiration(expDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createJWT</span><span class="params">(String id, String subject, Long ttlMillis)</span> </span>&#123;</span><br><span class="line">        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, id);<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密后的秘钥 secretKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title">generalKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        SecretKey key = <span class="keyword">new</span> SecretKeySpec(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">"AES"</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SecretKey secretKey = generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String test = <span class="string">"测试"</span>;</span><br><span class="line">        String jwt = createJWT(test);</span><br><span class="line">        System.out.println(jwt);</span><br><span class="line"></span><br><span class="line">        Claims claims = parseJWT(jwt);</span><br><span class="line">        System.out.println(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、自定义UserDetailsService">4、自定义UserDetailsService</h2><p>创建UserDetailsServiceImpl 并实现security框架的UserDetailsService 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUserName,username);</span><br><span class="line">        User user = userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//如果查询不到数据就通过抛出异常来给出提示</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装成UserDetails对象返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理自定义一个LoginUser 实现UserDetails 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就可以进行简单的测试，注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加{noop}。</p><p>但实际项目中我们不会把密码明文存储在数据库中。默认使用的<code>PasswordEncoder</code>要求数据库中的密码格式为：<code>{id}password</code> ，它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式，所以就需要替换PasswordEncoder。</p><p><strong>我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder</strong>。我们只需要使用把<code>BCryptPasswordEncoder</code>对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。我们可以定义一个SpringSecurity的配置类，<strong>SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以简单测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后面可以PasswordEncoder直接注入</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBCryPasswordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BCryptPasswordEncoder bCryptPasswordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    String shawn = bCryptPasswordEncoder.encode(<span class="string">"shawn"</span>);</span><br><span class="line">    System.out.println(shawn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、自定义登录接口">5、自定义登录接口</h2><p>接下我们需要自定义登陆接口，然后让SpringSecurity对这个接口放行，让用户访问这个接口的时候不用登录也能访问。</p><ul><li><p>在接口中我们<strong>通过AuthenticationManager的authenticate方法来进行用户认证</strong>，所以需要在SecurityConfig中配置把AuthenticationManager注入容器。</p></li><li><p>认证成功的话要生成一个jwt，放入响应中返回。并且为了让用户下回请求时能通过jwt识别出具体的是哪个用户，我们需要把用户信息存入redis，可以把用户id作为key。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult&lt;User&gt; <span class="title">login</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginService.login(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建自己的LoginServiceImpl 类，自己验证authenticationManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoginService 接口自己创建</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// AuthenticationManager进行用户认证</span></span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUserName(),user.getPassword());</span><br><span class="line">        Authentication authenticate = authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果认证通过</span></span><br><span class="line">        <span class="comment">// 使用userid生成token</span></span><br><span class="line">        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        String userId = loginUser.getUser().getId().toString();</span><br><span class="line">        String jwt = JwtUtil.createJWT(userId);</span><br><span class="line">        <span class="comment">// 完整信息authenticate存入redis</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">"login:"</span>+userId,loginUser);</span><br><span class="line">        <span class="comment">// 把token响应给前端</span></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"token"</span>,jwt);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">200</span>,<span class="string">"登陆成功"</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类，对于登录接口不应该拦截。配置完后即可测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/login"</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、认证过滤器">6、认证过滤器</h2><p>我们需要自定义一个过滤器，这个过滤器会去获取请求头中的token，对token进行解析取出其中的userid</p><ul><li><p>使用userid去redis中获取对应的LoginUser对象</p></li><li><p>然后封装Authentication对象存入SecurityContextHolder</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里不实现filter接口可能存在问题，一个请求可能会存在多次过滤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取token</span></span><br><span class="line">        String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="comment">// 没有return的话响应回来会继续执行</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解析token</span></span><br><span class="line">        String userid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Claims claims = JwtUtil.parseJWT(token);</span><br><span class="line">            userid = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"token非法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">        String redisKey = <span class="string">"login:"</span> + userid;</span><br><span class="line">        LoginUser loginUser = redisCache.getCacheObject(redisKey);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(loginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户未登录"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存入SecurityContextHolder，这个构造函数会返回已认证状态</span></span><br><span class="line">        <span class="comment">//TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken =</span><br><span class="line">                <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把token校验过滤器添加到过滤器链中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/login"</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把token校验过滤器添加到过滤器链中</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、退出登录">7、退出登录</h2><p>我们只需要定义一个登陆接口，然后获取SecurityContextHolder中的认证信息，删除redis中对应的数据即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// AuthenticationManager进行用户认证</span></span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUserName(),user.getPassword());</span><br><span class="line">        Authentication authenticate = authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果认证通过</span></span><br><span class="line">        <span class="comment">// 使用userid生成token</span></span><br><span class="line">        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        String userId = loginUser.getUser().getId().toString();</span><br><span class="line">        String jwt = JwtUtil.createJWT(userId);</span><br><span class="line">        <span class="comment">// 完整信息authenticate存入redis</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">"login:"</span>+userId,loginUser);</span><br><span class="line">        <span class="comment">// 把token响应给前端</span></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"token"</span>,jwt);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">200</span>,<span class="string">"登陆成功"</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        LoginUser loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">        Long userid = loginUser.getUser().getId();</span><br><span class="line">        redisCache.deleteObject(<span class="string">"login:"</span>+userid);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">200</span>,<span class="string">"退出成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、自定义认证-可选">8、自定义认证(可选)</h2><p>首先创建自定义认证器，实现相应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  这里有个循环依赖问题，在配置文件改成spring.main.allow-circular-references: true 即可</span></span><br><span class="line"><span class="comment">     *  或者将PasswordEncoder这个bean类单独生成一个文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDetailsServiceImpl userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String name = authentication.getName();</span><br><span class="line">        String password = (String) authentication.getCredentials();</span><br><span class="line">        UserDetails userDetails = userDetailsService.loadUserByUsername(name);</span><br><span class="line">        <span class="keyword">boolean</span> matches = passwordEncoder.matches(userDetails.getPassword(), password);</span><br><span class="line">        <span class="keyword">if</span> (!matches) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"密码不正确，请重新登录!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userDetails, password, userDetails.getAuthorities());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// supports函数用来指明该Provider是否适用于该类型的认证，如果不合适，则寻找另一个Provider进行验证处理。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果是这个类就用自定义的</span></span><br><span class="line">        <span class="keyword">return</span> authentication.equals(UsernamePasswordAuthenticationToken<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SecurityConfig文件进行配置，这样<code>authenticationManager.authenticate()</code>方法会调用我们自定义的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> SelfAuthenticationProvider authenticationProvider;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.configure(auth.authenticationProvider(authenticationProvider));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、Spring Security授权</h1><h2 id="1、-权限系统初步介绍">1、 权限系统初步介绍</h2><h3 id="1-1-介绍">1.1 介绍</h3><p>权限系统总结起来就是<strong>不同的用户可以使用不同的功能</strong>。</p><p>我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</p><p>例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p><h3 id="1-2-授权基本流程">1.2 授权基本流程</h3><p>在SpringSecurity中，<strong>会使用默认的FilterSecurityInterceptor来进行权限校验</strong>。在FilterSecurityInterceptor中会<strong>从SecurityContextHolder获取其中的Authentication</strong>，然后获取其中的权限信息，即当前用户是否拥有访问当前资源所需的权限。</p><p>所以我们在项目中只需要<strong>把当前登录用户的权限信息也存入Authentication</strong>，然后设置我们的资源所需要的权限即可。</p><h3 id="1-3-RBAC权限模型">1.3 RBAC权限模型</h3><p>RBAC权限模型（Role-Based Access Control）即：<strong>基于角色的权限控制</strong>。这是目前最常被开发者使用也是相对易用、通用权限模型</p><p><img src="https://img-blog.csdnimg.cn/8e517e67b97f43378c1d88dfde2bb5ce.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、授权简单实现">2、授权简单实现</h2><h4 id="2-1-限制访问资源所需权限">2.1 限制访问资源所需权限</h4><p>SpringSecurity为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。但是要使用它我们需要先开启相关配置，在config类上开启功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><p>然后就可以使用对应的注解<code>@PreAuthorize</code>，但是因为没有权限，所以是403</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasAuthority('test')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-封装权限信息">2.2 封装权限信息</h3><p>我们前面在写UserDetailsServiceImpl的时候说过，在查询出用户后还要获取对应的权限信息，封装到UserDetails中返回。我们先直接把权限信息写死封装到UserDetails中进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储权限信息</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginUser</span><span class="params">(User user, List&lt;String&gt; permissions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">        <span class="keyword">this</span>.permissions = permissions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储SpringSecurity所需要的权限信息的集合</span></span><br><span class="line">    <span class="meta">@JSONField</span>(serialize = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="comment">// 优化存储</span></span><br><span class="line">        <span class="keyword">if</span>(authorities!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> authorities;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把permissions中字符串类型的权限信息转换成GrantedAuthority对象存入authorities中</span></span><br><span class="line">        authorities = permissions.stream().</span><br><span class="line">                map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoginUser修改完后我们就可以在UserDetailsServiceImpl中去把权限信息封装到LoginUser中了，我们写死权限进行测试。完成后登录即可成功访问<code>/hello</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUserName,username);</span><br><span class="line">        User user = userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//如果查询不到数据就通过抛出异常来给出提示</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">"test"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginUser(user,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JwtAuthenticationTokenFilter中修改权限部分代码，即修改<code>doFilterInternal()</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存入SecurityContextHolder，这个构造函数会返回已认证状态</span></span><br><span class="line"><span class="comment">//TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">UsernamePasswordAuthenticationToken authenticationToken =</span><br><span class="line">        <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser,<span class="keyword">null</span>,loginUser.getAuthorities());</span><br></pre></td></tr></table></figure><h2 id="3、基于数据库的权限认证">3、基于数据库的权限认证</h2><h3 id="3-1-数据库搭建">3.1 数据库搭建</h3><p>这里是基于RBAC权限模型，下面五个表是基础</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Table structure for table `sys_menu` */</span></span><br><span class="line">DROP TABLE IF EXISTS `sys_menu`;</span><br><span class="line">CREATE TABLE `sys_menu` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `menu_name` varchar(<span class="number">64</span>) NOT NULL DEFAULT <span class="string">'NULL'</span> COMMENT <span class="string">'菜单名'</span>,</span><br><span class="line">  `path` varchar(<span class="number">200</span>) DEFAULT NULL COMMENT <span class="string">'路由地址'</span>,</span><br><span class="line">  `component` varchar(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">'组件路径'</span>,</span><br><span class="line">  `visible` <span class="keyword">char</span>(<span class="number">1</span>) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'菜单状态（0显示 1隐藏）'</span>,</span><br><span class="line">  `status` <span class="keyword">char</span>(<span class="number">1</span>) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'菜单状态（0正常 1停用）'</span>,</span><br><span class="line">  `perms` varchar(<span class="number">100</span>) DEFAULT NULL COMMENT <span class="string">'权限标识'</span>,</span><br><span class="line">  `icon` varchar(<span class="number">100</span>) DEFAULT <span class="string">'#'</span> COMMENT <span class="string">'菜单图标'</span>,</span><br><span class="line">  `create_by` bigint(<span class="number">20</span>) DEFAULT NULL,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_by` bigint(<span class="number">20</span>) DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  `del_flag` <span class="keyword">int</span>(<span class="number">11</span>) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'是否删除（0未删除 1已删除）'</span>,</span><br><span class="line">  `remark` varchar(<span class="number">500</span>) DEFAULT NULL COMMENT <span class="string">'备注'</span>,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="number">2</span> DEFAULT CHARSET=utf8mb4 COMMENT=<span class="string">'菜单表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_role` */</span></span><br><span class="line">DROP TABLE IF EXISTS `sys_role`;</span><br><span class="line">CREATE TABLE `sys_role` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(<span class="number">128</span>) DEFAULT NULL,</span><br><span class="line">  `role_key` varchar(<span class="number">100</span>) DEFAULT NULL COMMENT <span class="string">'角色权限字符串'</span>,</span><br><span class="line">  `status` <span class="keyword">char</span>(<span class="number">1</span>) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'角色状态（0正常 1停用）'</span>,</span><br><span class="line">  `del_flag` <span class="keyword">int</span>(<span class="number">1</span>) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'del_flag'</span>,</span><br><span class="line">  `create_by` bigint(<span class="number">200</span>) DEFAULT NULL,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_by` bigint(<span class="number">200</span>) DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  `remark` varchar(<span class="number">500</span>) DEFAULT NULL COMMENT <span class="string">'备注'</span>,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="number">3</span> DEFAULT CHARSET=utf8mb4 COMMENT=<span class="string">'角色表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_role_menu` */</span></span><br><span class="line">DROP TABLE IF EXISTS `sys_role_menu`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `sys_role_menu` (</span><br><span class="line">  `role_id` bigint(<span class="number">200</span>) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'角色ID'</span>,</span><br><span class="line">  `menu_id` bigint(<span class="number">200</span>) NOT NULL DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'菜单id'</span>,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`role_id`,`menu_id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="number">2</span> DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_user` */</span></span><br><span class="line">DROP TABLE IF EXISTS `sys_user`;</span><br><span class="line">CREATE TABLE `sys_user` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'主键'</span>,</span><br><span class="line">  `user_name` varchar(<span class="number">64</span>) NOT NULL DEFAULT <span class="string">'NULL'</span> COMMENT <span class="string">'用户名'</span>,</span><br><span class="line">  `nick_name` varchar(<span class="number">64</span>) NOT NULL DEFAULT <span class="string">'NULL'</span> COMMENT <span class="string">'昵称'</span>,</span><br><span class="line">  `password` varchar(<span class="number">64</span>) NOT NULL DEFAULT <span class="string">'NULL'</span> COMMENT <span class="string">'密码'</span>,</span><br><span class="line">  `status` <span class="keyword">char</span>(<span class="number">1</span>) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'账号状态（0正常 1停用）'</span>,</span><br><span class="line">  `email` varchar(<span class="number">64</span>) DEFAULT NULL COMMENT <span class="string">'邮箱'</span>,</span><br><span class="line">  `phonenumber` varchar(<span class="number">32</span>) DEFAULT NULL COMMENT <span class="string">'手机号'</span>,</span><br><span class="line">  `sex` <span class="keyword">char</span>(<span class="number">1</span>) DEFAULT NULL COMMENT <span class="string">'用户性别（0男，1女，2未知）'</span>,</span><br><span class="line">  `avatar` varchar(<span class="number">128</span>) DEFAULT NULL COMMENT <span class="string">'头像'</span>,</span><br><span class="line">  `user_type` <span class="keyword">char</span>(<span class="number">1</span>) NOT NULL DEFAULT <span class="string">'1'</span> COMMENT <span class="string">'用户类型（0管理员，1普通用户）'</span>,</span><br><span class="line">  `create_by` bigint(<span class="number">20</span>) DEFAULT NULL COMMENT <span class="string">'创建人的用户id'</span>,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  `update_by` bigint(<span class="number">20</span>) DEFAULT NULL COMMENT <span class="string">'更新人'</span>,</span><br><span class="line">  `update_time` datetime DEFAULT NULL COMMENT <span class="string">'更新时间'</span>,</span><br><span class="line">  `del_flag` <span class="keyword">int</span>(<span class="number">11</span>) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'删除标志（0代表未删除，1代表已删除）'</span>,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="number">3</span> DEFAULT CHARSET=utf8mb4 COMMENT=<span class="string">'用户表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_user_role` */</span></span><br><span class="line">DROP TABLE IF EXISTS `sys_user_role`;</span><br><span class="line">CREATE TABLE `sys_user_role` (</span><br><span class="line">  `user_id` bigint(<span class="number">200</span>) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'用户id'</span>,</span><br><span class="line">  `role_id` bigint(<span class="number">200</span>) NOT NULL DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'角色id'</span>,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`user_id`,`role_id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><h3 id="3-2-代码实现">3.2 代码实现</h3><p>我们只需要根据用户id去查询到其所对应的权限信息即可，首先生成Menu类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜单表(Menu)实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makejava</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-11-24 15:30:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"sys_menu"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">54979041104113736L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String menuName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String component;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单状态（0显示 1隐藏）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String visible;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单状态（0正常 1停用）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单图标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否删除（0未删除 1已删除）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次定义mapper和xml，其中提供一个方法可以根据userid查询权限信息，yml配置类详见上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MenuMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Menu</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">selectPermsByUserId</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意包名修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.shawn.security.mapper.MenuMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPermsByUserId"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.`perms`</span><br><span class="line">        FROM</span><br><span class="line">            sys_user_role ur</span><br><span class="line">                LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">                LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">                LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            user_id = #&#123;userid&#125;</span><br><span class="line">          AND r.`status` = 0</span><br><span class="line">          AND m.`status` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后我们可以在<code>UserDetailsServiceImpl</code>中去调用该mapper的方法查询权限信息封装到LoginUser对象中即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUserName,username);</span><br><span class="line">        User user = userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//如果查询不到数据就通过抛出异常来给出提示</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class="line">        List&lt;String&gt; list =  menuMapper.selectPermsByUserId(user.getId());</span><br><span class="line"><span class="comment">//        //测试写法</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList("test"));</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginUser(user,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>四、跨域与CSRF</h1><h2 id="1、跨域与CSRF简介">1、跨域与CSRF简介</h2><h3 id="1-1-跨域">1.1 跨域</h3><blockquote><p>几种跨域方法的分析：<a href="https://segmentfault.com/a/1190000019485883" target="_blank" rel="noopener" title="https://segmentfault.com/a/1190000019485883">https://segmentfault.com/a/1190000019485883</a></p></blockquote><p><strong>浏览器</strong>出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。 但是用postman访问是不会出现跨域问题的。前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。因此我们就要处理一下，让前端能进行跨域请求。</p><h3 id="1-2-CSRF">1.2 CSRF</h3><blockquote><p>CSRF参考：<a href="https://blog.csdn.net/freeking101/article/details/86537087" target="_blank" rel="noopener" title="https://blog.csdn.net/freeking101/article/details/86537087">https://blog.csdn.net/freeking101/article/details/86537087</a></p></blockquote><p>CSRF是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p><p>SpringSecurity去防止CSRF攻击的方式就是通过csrf_token。后端会生成一个csrf_token，前端发起请求的时候需要携带这个csrf_token，后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。我们可以发现CSRF攻击依靠的是cookie中所携带的认证信息。但是在前后端分离的项目中我们的认证信息其实是token，而token并不是存储中cookie中，并且需要前端代码去把token设置到请求头中才可以，所以CSRF攻击也就不用担心了。</p><h2 id="2、SpringBoot三种跨域方式">2、SpringBoot三种跨域方式</h2><h3 id="2-1-重写WebMvcConfigurer（全局跨域）">2.1 重写WebMvcConfigurer（全局跨域）</h3><p>还有一种跨域是**@CrossOrigin**局部跨域。这种实现 <code>WebMvcConfigurer.addCorsMappings</code> 方法的方式配置 <code>CORS</code>，会在 <code>Interceptor</code> 或者 <code>Handler</code> 层进行 <code>CORS</code> 验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">"Content-Type"</span>,<span class="string">"X-Requested-With"</span>,<span class="string">"accept,Origin"</span>,<span class="string">"Access-Control-Request-Method"</span>,<span class="string">"Access-Control-Request-Headers"</span>,<span class="string">"token"</span>)</span><br><span class="line">                .allowedMethods(<span class="string">"*"</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-CorsFilter-全局跨域">2.2 CorsFilter(全局跨域)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config =<span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//放行哪些原始域</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//放行哪些原始域(请求方式)</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//放行哪些原始域(头部信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span></span><br><span class="line">        config.addExposedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource =<span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-CorsConfigurationSource-Security特有">2.3 CorsConfigurationSource(Security特有)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CorsConfigurationSource <span class="title">corsConfigurationSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//同源配置，*表示任何请求都视为同源，若需指定ip和端口可以改为如“localhost：8080”，多个以“，”分隔；</span></span><br><span class="line">        corsConfiguration.setAllowedOriginPatterns(List.of(<span class="string">"*"</span>));</span><br><span class="line">        <span class="comment">//允许GET和POST方法</span></span><br><span class="line">        corsConfiguration.setAllowedMethods(Arrays.asList(<span class="string">"GET"</span>, <span class="string">"POST"</span>));</span><br><span class="line">        <span class="comment">//header，允许哪些header，本案中使用的是token，此处可将*替换为token；</span></span><br><span class="line">        corsConfiguration.setAllowedHeaders(List.of(<span class="string">"*"</span>));</span><br><span class="line">        <span class="comment">//允许携带凭证</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        <span class="comment">//对所有URL生效</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、SpringSecurity的跨域访问开启">3、SpringSecurity的跨域访问开启</h2><p>由于我们的资源都会收到SpringSecurity的保护，所以想要跨域访问还要让SpringSecurity运行跨域访问。上面三种跨域方式三选一即可，配合SpringSecurity开启跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/login"</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">        <span class="comment">//把token校验过滤器添加到过滤器链中</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//开启跨域</span></span><br><span class="line">        http.cors();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、总结">4、总结</h2><ul><li><p>实现 <code>WebMvcConfigurer.addCorsMappings</code> 方法来进行的 <code>CORS</code> 配置，最后会在 Spring 的 <code>Interceptor</code> 或 <code>Handler</code> 中生效</p></li><li><p>注入 <code>CorsFilter</code> 的方式会让 <code>CORS</code> 验证在 <code>Filter</code> 中生效</p></li><li><p>引入 <code>Spring Security</code> 后，需要调用 <code>HttpSecurity.cors</code> 方法以保证 <code>CorsFilter</code> 会在身份验证相关的 <code>Filter</code> 之前执行</p></li><li><p><code>HttpSecurity.cors</code> + <code>WebMvcConfigurer.addCorsMappings</code> 是一种相对低效的方式，会导致跨域请求分别在 <code>Filter</code> 和 <code>Interceptor</code> 层各经历一次 <code>CORS</code> 验证</p></li><li><p><code>HttpSecurity.cors</code> + 注册 <code>CorsFilter</code> 与 <code>HttpSecurity.cors</code> + 注册 <code>CorsConfigurationSource</code> 在运行的时候是等效的</p></li><li><p>在 Spring 中，没有通过 <code>CORS</code> 验证的请求会得到状态码为 403 的响应</p></li></ul><h1>五、方法权限校验</h1><h2 id="1、内置方法权限">1、内置方法权限</h2><p>我们前面都是使用<code>@PreAuthorize</code>注解，然后在在其中使用的是<code>hasAuthority</code>方法进行校验。SpringSecurity还为我们提供了其它方法例如：<strong>hasAnyAuthority，hasRole，hasAnyRole</strong>等。</p><ul><li><strong>hasAuthority()</strong></li></ul><p><code>hasAuthority</code>方法内部其实是调用authentication的getAuthorities方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。<code>hasAnyAuthority</code>方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有以下其中一种权限即可访问</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasAnyAuthority('admin','test','test:system')"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"world"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>hasRole()</strong></li></ul><p><code>hasRole</code>要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><ul><li><strong>hasAnyRole()</strong></li></ul><p><code>hasAnyRole </code>有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><h2 id="2、自定义权限校验方法">2、自定义权限校验方法</h2><p>我们也可以定义自己的权限校验方法，在@PreAuthorize注解中使用我们的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"ex"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressionRoot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasAuthority</span><span class="params">(String authority)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取当前用户的权限</span></span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        LoginUser loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class="line">        <span class="comment">//判断用户权限集合中是否存在authority</span></span><br><span class="line">        <span class="keyword">return</span> permissions.contains(authority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SPEL表达式中使用 @ex相当于获取容器中bean的名字未ex的对象。然后再调用这个对象的hasAuthority方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"@ex.hasAuthority('test:system')"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"world"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然在配置文件里也可以直接进行权限的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/login"</span>).anonymous()</span><br><span class="line">                .antMatchers(<span class="string">"/testCors"</span>).hasAuthority(<span class="string">"system:test"</span>)</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">        <span class="comment">//把token校验过滤器添加到过滤器链中</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启跨域</span></span><br><span class="line">        http.cors();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>六、自定义认证授权失败处理</h1><h2 id="1、介绍">1、介绍</h2><p>我们希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道SpringSecurity的异常处理机制。在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。</p><ul><li><p>如果是<strong>认证过程中</strong>出现的异常会被封装成AuthenticationException然后调用<strong>AuthenticationEntryPoint</strong>对象的方法去进行异常处理。</p></li><li><p>如果是<strong>授权过程中</strong>出现的异常会被封装成AccessDeniedException然后调用<strong>AccessDeniedHandler</strong>对象的方法去进行异常处理。</p></li></ul><p>所以如果我们需要自定义异常处理，我们只需要自定义<code>AuthenticationEntryPoint</code>和<code>AccessDeniedHandler</code>然后配置给SpringSecurity即可。</p><h2 id="2、自定义异常编写">2、自定义异常编写</h2><h3 id="2-1-认证异常类">2.1 认证异常类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span>  </span>&#123;</span><br><span class="line">        ResponseResult&lt;String&gt; result = <span class="keyword">new</span> ResponseResult&lt;&gt;(HttpStatus.UNAUTHORIZED.value(), <span class="string">"认证失败请重新登录"</span>);</span><br><span class="line">        String json = JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response,json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-授权异常类">2.2 授权异常类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        ResponseResult&lt;String&gt; result = <span class="keyword">new</span> ResponseResult&lt;&gt;(HttpStatus.FORBIDDEN.value(), <span class="string">"权限不足"</span>);</span><br><span class="line">        String json = JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response,json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-config文件配置">2.3 config文件配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shawn.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shawn.security.filter.JwtAuthenticationTokenFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/login"</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">        <span class="comment">//把token校验过滤器添加到过滤器链中</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启跨域</span></span><br><span class="line">        http.cors();</span><br><span class="line">        <span class="comment">//配置自定义异常</span></span><br><span class="line">        http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint).</span><br><span class="line">                accessDeniedHandler(accessDeniedHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>七、自定义处理器</h1><p>上面的案例不适合配置以下这些处理器，因为已经重写不会生效；若要生效就需要使用原来的默认配置formLogin</p><h2 id="1、认证成功处理器">1、认证成功处理器</h2><p>实际上在<code>UsernamePasswordAuthenticationFilter</code>进行登录认证的时候，如果登录成功了是会调用<code>AuthenticationSuccessHandler</code>的方法进行认证成功后的处理的。<code>AuthenticationSuccessHandler</code>就是登录成功处理器，我们也可以自己去自定义成功处理器进行成功后的相应处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SGSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"认证成功了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>2、认证失败处理器</h1><p>实际上在<code>UsernamePasswordAuthenticationFilter</code>进行登录认证的时候，如果认证失败了是会调用<code>AuthenticationFailureHandler</code>的方法进行认证失败后的处理的。<code>AuthenticationFailureHandler</code>就是登录失败处理器。我们也可以自己去自定义失败处理器进行失败后的相应处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SGFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"认证失败了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、登出成功处理器">3、登出成功处理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SGLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title">LogoutSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"注销成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、配置类编写">4、配置类编写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line"><span class="comment">//                配置认证成功处理器</span></span><br><span class="line">                .successHandler(successHandler)</span><br><span class="line"><span class="comment">//                配置认证失败处理器</span></span><br><span class="line">                .failureHandler(failureHandler);</span><br><span class="line"></span><br><span class="line">        http.logout()</span><br><span class="line">                <span class="comment">//配置注销成功处理器</span></span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Security简介&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Spring Security&lt;/strong&gt; 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架&lt;strong&gt;Shiro&lt;/strong&gt;，它提供了更丰富的功能，社区资源也比Shiro丰富。一般来说中大型的项目都是使用&lt;strong&gt;SpringSecurity&lt;/strong&gt; 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。一般Web应用的需要进行&lt;strong&gt;认证&lt;/strong&gt;和&lt;strong&gt;授权&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;授权：经过认证后判断当前用户是否有权限进行某个操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而认证和授权也是SpringSecurity作为安全框架的核心功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
