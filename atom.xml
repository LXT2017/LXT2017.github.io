<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星的猫(&gt;^ω^&lt;)喵</title>
  
  
  <link href="https://www.shawn22.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.shawn22.xyz/"/>
  <updated>2022-10-31T13:46:15.559Z</updated>
  <id>https://www.shawn22.xyz/</id>
  
  <author>
    <name>Shawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ShardingSphere5学习笔记</title>
    <link href="https://www.shawn22.xyz/posts/2738e02e.html"/>
    <id>https://www.shawn22.xyz/posts/2738e02e.html</id>
    <published>2022-10-31T13:45:12.000Z</published>
    <updated>2022-10-31T13:46:15.559Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p>本文属于改参考文章的升级版，部分内容可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/120201007" target="_blank" rel="noopener" title="ShardingSphere数据库中间件基础学习">ShardingSphere数据库中间件基础学习</a></p></blockquote><p>互联网业务兴起之后，海量用户加上海量数据的特点，单个数据库服务器已经难以满足业务需要，必须考虑数据库集群的方式来提升性能。高性能数据库集群的第一种方式是&quot;<code>读写分离</code>&quot;，第二种方式是&quot;<code>数据库分片</code>&quot;；</p><p>读写分离和数据分片具体的实现方式一般有两种： <code>程序代码封装</code>和<code>中间件封装</code>，中间件软件有**Apache ShardingSphere（程序级别和中间件级别）**和MyCat（数据库中间件）</p><a id="more"></a><h2 id="2、读写分离架构">2、读写分离架构</h2><h3 id="2-1-理论介绍">2.1 理论介绍</h3><p>**读写分离原理：**读写分离的基本原理是将数据库读写操作分散到不同的节点上</p><p><strong>读写分离的基本实现：</strong></p><ul><li><p><code>主库负责处理事务性的增删改操作，从库负责处理查询操作</code>，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</p></li><li><p>读写分离是<code>根据 SQL 语义的分析</code>，<code>将读操作和写操作分别路由至主库与从库</code>。</p></li><li><p>通过<code>一主多从</code>的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。</p></li><li><p>使用<code>多主多从</code>的方式，不但能够提升系统的吞吐量，还能够提升系统的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。</p></li></ul><h3 id="2-2-CAP理论">2.2 CAP理论</h3><p>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer’s theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在 2000 年的 ACM PODC 上提出的一个猜想。在一个<code>分布式系统中</code>，当涉及读写操作时，只能保证**一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）**三者中的两个，另外一个必须被牺牲。</p><ul><li><p>C 一致性（Consistency）：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果</p></li><li><p>A 可用性（Availability）：非故障的节点在合理的时间内返回合理的响应<code>（不是错误和超时的响应）</code></p></li><li><p>P 分区容忍性（Partition Tolerance）：当出现网络分区后<code>（可能是丢包，也可能是连接中断，还可能是拥塞）</code>，系统能够继续“履行职责”</p></li></ul><p><strong>CAP特点：</strong></p><ul><li><p>CP：<code>为了保证一致性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 需要返回 Error，提示客户端 C“系统现在发生了错误”，</code>这种处理方式<code>违背了可用性</code>（Availability）的要求，因此 CAP 三者只能满足 CP</p></li><li><p>AP：<code>为了保证可用性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 将当前自己拥有的数据 x 返回给客户端 C 了</code>，而实际上当前最新的数据已经是 y 了，这就<code>不满足一致性</code>（Consistency）的要求了，因此 CAP 三者只能满足 AP。注意：这里 N2 节点返回 x，虽然不是一个“正确”的结果，但是一个“合理”的结果，因为 x 是旧的数据，并不是一个错乱的值，只是不是最新的数据而已</p></li></ul><p>CAP 理论中的 <code>C 在实践中是不可能完美实现的</code>，在数据复制的过程中，节点N1 和节点 N2 的数据并不一致（强一致性）。即使无法做到<code>强一致性</code>，但应用可以采用适合的方式达到<code>最终一致性</code>。具有如下特点：</p><ul><li><p>基本可用（Basically Available）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</p></li><li><p>软状态（Soft State）：允许系统存在中间状态，而该中间状态不会影响系统整体可用性。这里的中间状态就是 CAP 理论中的数据不一致。</p></li><li><p><code>最终一致性（Eventual Consistency）：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</code></p></li></ul><h2 id="3、数据库分片架构">3、数据库分片架构</h2><ul><li><p><strong>读写分离的问题</strong></p><p>读写分离分散了数据库读写操作的压力，但没有分散存储压力，为了满足业务数据存储的需求，就需要<code>将存储分散到多台数据库服务器上</code>。</p></li><li><p><strong>数据分片</strong></p><p>将存放在单一数据库中的数据分散地存放至多个数据库或表中，以达到提升性能瓶颈以及可用性的效果。 数据分片的有效手段是对关系型数据库进行<code>分库和分表</code>。数据分片的拆分方式又分为<code>垂直分片和水平分片</code></p></li></ul><h3 id="3-1-垂直分片">3.1 垂直分片</h3><ul><li><p><strong>垂直分库</strong></p><p><code>按照业务拆分的方式称为垂直分片，又称为纵向拆分</code>，它的核心理念是专库专用。 在拆分之前，一个数据库由多个数据表构成，每个表对应着不同的业务。而拆分之后，则是按照业务将表进行归类，分布到不同的数据库中，从而将压力分散至不同的数据库。 垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。<code>如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理</code></p></li><li><p><strong>垂直分表</strong></p><p><code>垂直分表适合将表中某些不常用的列，或者是占了大量空间的列拆分出去。</code>假设我们是一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。垂直分表引入的复杂性主要体现在表操作的数量要增加。</p></li></ul><h3 id="3-2-水平分片">3.2 水平分片</h3><blockquote><p><strong>阿里巴巴Java开发手册：</strong>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。说明：如果预计三年后的数据量根本达不到这个级别，<code>请不要在创建表时就分库分表</code></p></blockquote><p><code>水平分片又称为横向拆分。</code> 相对于垂直分片，它不再将数据根据业务逻辑分类，而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，每个分片仅包含数据的一部分。 例如：根据主键分片，偶数主键的记录放入 0 库（或表），奇数主键的记录放入 1 库（或表）。单表进行切分后，是否将多个表分散在不同的数据库服务器中，可以根据实际的切分效果来确定。</p><ul><li><p><strong>水平分表</strong>：单表切分为多表后，新的表即使在同一个数据库服务器中，也可能带来可观的性能提升，如果性能能够满足业务要求，可以不拆分到多台数据库服务器，毕竟业务分库也会引入很多复杂性；</p></li><li><p><strong>水平分库</strong>：如果单表拆分为多表后，单台服务器依然无法满足性能要求，那就需要将多个表分散在不同的数据库服务器中。</p></li></ul><h2 id="4、ShardingSphere介绍">4、ShardingSphere介绍</h2><h3 id="4-1-简介">4.1 简介</h3><blockquote><p>官网：<a href="https://shardingsphere.apache.org/index_zh.html" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/index_zh.html">https://shardingsphere.apache.org/index_zh.html</a><br>文档：<a href="https://shardingsphere.apache.org/document/5.1.1/cn/overview/" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/document/5.1.1/cn/overview/">https://shardingsphere.apache.org/document/5.1.1/cn/overview/</a></p></blockquote><p>Apache ShardingSphere 由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。</p><h3 id="4-2-ShardingSphere-JDBC">4.2 ShardingSphere-JDBC</h3><p><strong>程序代码封装</strong>。定位为轻量级 Java 框架，<code>在 Java 的 JDBC 层提供的额外服务</code>。 它使用客户端直连数据库，<code>以 jar 包形式提供服务</code>，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架<br><img src="https://img-blog.csdnimg.cn/31051ed9bd9d40cbb49cefa3f3728179.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-3-ShardingSphere-Proxy">4.3 ShardingSphere-Proxy</h3><p>**中间件封装。**定位为透明化的<code>数据库代理端</code>，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前提供 MySQL 和 PostgreSQL版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好</p><p><img src="https://img-blog.csdnimg.cn/e413c0c62538488d85a6a5033ad827ad.png#pic_center" alt="在这里插入图片描述"></p><h1>二、MySQL主从配置</h1><h2 id="1、MySQL主从同步原理">1、MySQL主从同步原理</h2><blockquote><p>详细也可以参考上一篇<a href="https://blog.csdn.net/lemon_TT/article/details/120201007" target="_blank" rel="noopener" title="ShardingSphere文章">ShardingSphere文章</a><br>Docker参考文章：<a href="https://blog.csdn.net/lemon_TT/article/details/125981712" target="_blank" rel="noopener" title="docker学习笔记">docker学习笔记</a></p></blockquote><p><strong>基本原理：</strong></p><p>slave会从master读取binlog来进行数据同步</p><p><strong>具体步骤：</strong></p><ul><li><p><code>step1：</code>master将数据改变记录到<code>二进制日志（binary log）</code>中。</p></li><li><p><code>step2：</code> 当slave上执行 <code>start slave</code> 命令之后，slave会创建一个 <code>IO 线程</code>用来连接master，请求master中的binlog。</p></li><li><p><code>step3：</code>当slave连接master时，master会创建一个 <code>log dump 线程</code>，用于发送 binlog 的内容。在读取 binlog 的内容的操作中，会对主节点上的 binlog 加锁，当读取完成并发送给从服务器后解锁。</p></li><li><p><code>step4：</code>IO 线程接收主节点 binlog dump 进程发来的更新之后，保存到 <code>中继日志（relay log）</code> 中。</p></li><li><p><code>step5：</code>slave的<code>SQL线程</code>，读取relay log日志，并解析成具体操作，从而实现主从操作一致，最终数据一致。</p></li></ul><h2 id="2、主服务器准备">2、主服务器准备</h2><p><strong>step1：<strong>docker中</strong>创建并启动MySQL主服务器</strong>：<code>端口3306</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /data/mysql/master/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /data/master/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name mysql-master \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><p><strong>step2：创建MySQL主服务器配置文件</strong>，默认情况下MySQL的binlog日志是自动开启的，可以通过如下配置定义一些可选配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /data/mysql/master/conf/my.cnf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 服务器唯一id，默认值1</span></span><br><span class="line">server-id=1</span><br><span class="line"><span class="comment"># 设置日志格式，默认值ROW</span></span><br><span class="line">binlog_format=STATEMENT</span><br><span class="line"><span class="comment"># 二进制日志名，默认binlog</span></span><br><span class="line"><span class="comment"># log-bin=binlog</span></span><br><span class="line"><span class="comment"># 设置需要复制的数据库，默认复制全部数据库，优先级比binlog-do-db高</span></span><br><span class="line"><span class="comment">#binlog-do-db=mytestdb</span></span><br><span class="line"><span class="comment"># 设置不需要复制的数据库，不配置binlog-do-db这个才生效</span></span><br><span class="line"><span class="comment">#binlog-ignore-db=mysql</span></span><br><span class="line"><span class="comment">#binlog-ignore-db=infomation_schema</span></span><br></pre></td></tr></table></figure><p>最后重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-master</span><br></pre></td></tr></table></figure><p><code>binlog格式说明：</code></p><ul><li><p>binlog_format=STATEMENT：日志记录的是主机数据库的<code>写指令</code>，性能高，但是now()之类的函数以及获取系统参数的操作会出现主从数据不同步的问题。</p></li><li><p>binlog_format=ROW（默认）：日志记录的是主机数据库的<code>写后的数据</code>，批量操作时性能较差，解决now()或者 user()或者 @@hostname 等操作在主从机器上不一致的问题。</p></li><li><p>binlog_format=MIXED：是以上两种level的混合使用，有函数用ROW，没函数用STATEMENT，但是无法识别系统变量</p></li></ul><p><strong>step3：使用命令行登录MySQL主服务器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入容器：env LANG=C.UTF-8 避免容器中显示中文乱码</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql-master env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="comment">#进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#修改默认密码校验方式</span></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><p><strong>step4：主机中创建slave用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建slave用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'slave'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'slave'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="comment">-- 授予复制权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'slave'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><p><strong>step5：主机中查询master状态</strong></p><p>执行完此步骤后<code>不要再操作主服务器MYSQL</code>，防止主服务器状态值变化，记下<code>File</code>和<code>Position</code>的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure><h2 id="3、从服务器准备">3、从服务器准备</h2><p>这里可以配置多台从机slave1、slave2…</p><p><strong>step1：在docker中创建并启动MySQL从服务器：</strong><code>端口3307</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">-v /data/mysql/slave1/conf:/etc/mysql/conf.d \</span><br><span class="line">-v //mysql/slave1/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name mysql-slave1 \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><p><strong>step2：创建MySQL从服务器配置文件</strong>，最后重启MySQL容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /data/mysql/slave1/conf/my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span></span><br><span class="line">server-id=2</span><br><span class="line"><span class="comment"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span></span><br><span class="line"><span class="comment">#relay-log=relay-bin</span></span><br></pre></td></tr></table></figure><p><strong>step3：使用命令行登录MySQL从服务器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入容器：</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql-slave1 env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="comment">#进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#修改默认密码校验方式</span></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><p><strong>step4：在从机上配置主从关系</strong>，在<strong>从机</strong>上执行以下SQL操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CHANGE</span> <span class="keyword">MASTER</span> <span class="keyword">TO</span> MASTER_HOST=<span class="string">'192.168.249.135'</span>,MASTER_USER=<span class="string">'slave'</span>,MASTER_PASSWORD=<span class="string">'123456'</span>, MASTER_PORT=<span class="number">3306</span>,MASTER_LOG_FILE=<span class="string">'binlog.000003'</span>,MASTER_LOG_POS=<span class="number">1616</span>;</span><br></pre></td></tr></table></figure><h2 id="4、启动主从同步">4、启动主从同步</h2><p>启动从机的复制功能，执行SQL；当<code>Slave_IO_Running: Yes</code>和<code>Slave_SQL_Running: Yes</code>都为Yes时启动成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">SLAVE</span>;</span><br><span class="line"><span class="comment">-- 查看状态（不需要分号）</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SLAVE</span> <span class="keyword">STATUS</span>\G</span><br></pre></td></tr></table></figure><p><strong>停止与重置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在从机上执行。功能说明：停止I/O 线程和SQL线程的操作。</span></span><br><span class="line"><span class="keyword">stop</span> <span class="keyword">slave</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在从机上执行。功能说明：用于删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件。</span></span><br><span class="line"><span class="keyword">reset</span> <span class="keyword">slave</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在主机上执行。功能说明：删除所有的binglog日志文件，并将日志索引文件清空，重新开始所有新的日志文件。</span></span><br><span class="line"><span class="comment">-- 用于第一次进行搭建主从库时，进行主库binlog初始化工作；</span></span><br><span class="line"><span class="keyword">reset</span> <span class="keyword">master</span>;</span><br></pre></td></tr></table></figure><p>测试，在主机中执行以下SQL，在从机中查看数据库、表和数据是否已经被同步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db_user;</span><br><span class="line"><span class="keyword">USE</span> db_user;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">BIGINT</span> AUTO_INCREMENT,</span><br><span class="line"> uname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line"> PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user(uname) <span class="keyword">VALUES</span>(<span class="string">'shawn'</span>);</span><br><span class="line"><span class="comment">-- 动态获取主机名字</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user(uname) <span class="keyword">VALUES</span>(@@hostname);</span><br></pre></td></tr></table></figure><h2 id="5、常见问题">5、常见问题</h2><h3 id="5-1-示例一">5.1 示例一</h3><p>启动主从同步后，常见错误是<code>Slave_IO_Running： No 或者 Connecting</code> 的情况，此时查看下方的 <code>Last_IO_ERROR</code>错误日志，根据日志中显示的错误信息在网上搜索解决方案即可</p><p><strong>典型的错误例如：</strong><code>Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: 'Client requested master to start replication from position &gt; file size'</code></p><p><strong>解决方案：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在从机停止slave</span></span><br><span class="line">SLAVE <span class="keyword">STOP</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在主机查看mater状态</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">MASTER</span> <span class="keyword">STATUS</span>;</span><br><span class="line"><span class="comment">-- 在主机刷新日志</span></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">LOGS</span>;</span><br><span class="line"><span class="comment">-- 再次在主机查看mater状态（会发现File和Position发生了变化）</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">MASTER</span> <span class="keyword">STATUS</span>;</span><br><span class="line"><span class="comment">-- 修改从机连接主机的SQL，并重新连接即可</span></span><br></pre></td></tr></table></figure><h3 id="5-2-示例二">5.2 示例二</h3><p>启动docker容器后提示 <code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code>此错误，虽然不影响主从同步的搭建，但是如果想从远程客户端通过以下方式连接docker中的MySQL则没法连接</p><p><strong>解决方案：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置文件，这是Centos的解决方案，原理是这样</span></span><br><span class="line">vim /usr/lib/sysctl.d/00-system.conf</span><br><span class="line"><span class="comment">#追加</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"><span class="comment">#接着重启网络</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h1>三、ShardingSphere-JDBC</h1><h2 id="1、ShardingSphere-JDBC读写分离">1、ShardingSphere-JDBC读写分离</h2><blockquote><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/mode/" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/mode/">https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/mode/</a></p></blockquote><h3 id="1-1-环境与项目创建">1.1 环境与项目创建</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_user"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-配置文件">1.2 配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 应用名称</span><br><span class="line">spring.application.name&#x3D;sharging-jdbc-demo</span><br><span class="line"># 开发环境设置</span><br><span class="line">spring.profiles.active&#x3D;dev</span><br><span class="line"># 内存模式，正式环境一般是集群模式</span><br><span class="line">spring.shardingsphere.mode.type&#x3D;Memory</span><br><span class="line"></span><br><span class="line"># 配置真实数据源</span><br><span class="line">spring.shardingsphere.datasource.names&#x3D;master,slave1</span><br><span class="line"></span><br><span class="line"># 配置第 1 个数据源</span><br><span class="line">spring.shardingsphere.datasource.master.type&#x3D;com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.shardingsphere.datasource.master.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">spring.shardingsphere.datasource.master.jdbc-url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.249.135:3306&#x2F;db_user</span><br><span class="line">spring.shardingsphere.datasource.master.username&#x3D;root</span><br><span class="line">spring.shardingsphere.datasource.master.password&#x3D;123456</span><br><span class="line"></span><br><span class="line"># 配置第 2 个数据源</span><br><span class="line">spring.shardingsphere.datasource.slave1.type&#x3D;com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.shardingsphere.datasource.slave1.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">spring.shardingsphere.datasource.slave1.jdbc-url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.249.135:3307&#x2F;db_user</span><br><span class="line">spring.shardingsphere.datasource.slave1.username&#x3D;root</span><br><span class="line">spring.shardingsphere.datasource.slave1.password&#x3D;123456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 读写分离类型，如: Static，Dynamic</span><br><span class="line">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.type&#x3D;Static</span><br><span class="line"># 写数据源名称</span><br><span class="line">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.write-data-source-name&#x3D;master</span><br><span class="line"># 读数据源名称，多个从数据源用逗号分隔</span><br><span class="line">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.read-data-source-names&#x3D;slave1</span><br><span class="line"></span><br><span class="line"># 负载均衡算法名称</span><br><span class="line">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.load-balancer-name&#x3D;alg_round</span><br><span class="line"></span><br><span class="line"># 负载均衡算法配置</span><br><span class="line"># 负载均衡算法类型</span><br><span class="line">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_round.type&#x3D;ROUND_ROBIN</span><br><span class="line">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_random.type&#x3D;RANDOM</span><br><span class="line">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.type&#x3D;WEIGHT</span><br><span class="line">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave1&#x3D;1</span><br><span class="line">#spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave2&#x3D;2</span><br><span class="line"></span><br><span class="line"># 打印SQl</span><br><span class="line">spring.shardingsphere.props.sql-show&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="1-3-测试">1.3 测试</h3><ul><li><strong>读写分离测试</strong></li></ul><p>测试插入，通过日志可以看到Logic SQL逻辑SQl，因为应用程序将请求发送给<code>ShardingSphere</code>后并不关心是插入到哪台服务器，比如这里只是单纯把请求发送给myds的服务器组，由<code>ShardingSphere</code>的配置决定哪台是写服务器，最终进行SQL插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadwriteTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据的测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUname(<span class="string">"顺丰"</span>);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>事务测试</strong></li></ul><p>为了保证主从库间的事务一致性，避免跨服务的分布式事务，ShardingSphere-JDBC的<code>主从模型中，事务中的数据读写均用主库</code>。</p><ul><li><p>不添加@Transactional：insert对主库操作，select对从库操作</p></li><li><p>添加@Transactional：则insert和select均对主库操作</p></li><li><p>**注意：**在JUnit环境下的@Transactional注解，默认情况下就会对事务进行回滚（即使在没加注解@Rollback，也会对事务回滚）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span><span class="comment">//开启事务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTrans</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUname(<span class="string">"圆通"</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>负载均衡测试</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读数据测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);<span class="comment">//执行第二次测试负载均衡</span></span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、ShardingSphere-JDBC垂直分片">2、ShardingSphere-JDBC垂直分片</h2><blockquote><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding/" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding/">https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding/</a></p></blockquote><h3 id="2-1-环境准备">2.1 环境准备</h3><p>创建server-user容器和server-order容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3301:3306 \</span><br><span class="line">-v /data/server/user/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /data/server/user/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name server-user \</span><br><span class="line">mysql:8.0.29</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">-p 3302:3306 \</span><br><span class="line">-v /data/server/order/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /data/server/order/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name server-order \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><p>登录MySQL服务器修改一下密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入容器：</span></span><br><span class="line">docker <span class="built_in">exec</span> -it server-user env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="comment">#进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#修改默认密码插件</span></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><p>在两个库分布创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是server-user</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db_user;</span><br><span class="line"><span class="keyword">USE</span> db_user;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">BIGINT</span> AUTO_INCREMENT,</span><br><span class="line"> uname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line"> PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这是server-order</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db_order;</span><br><span class="line"><span class="keyword">USE</span> db_order;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">BIGINT</span> AUTO_INCREMENT,</span><br><span class="line">  order_no <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">  user_id <span class="built_in">BIGINT</span>,</span><br><span class="line">  amount <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-2-程序实现">2.2 程序实现</h3><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_order"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置垂直分片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 应用名称</span><br><span class="line">spring.application.name&#x3D;sharding-jdbc-demo</span><br><span class="line"># 环境设置</span><br><span class="line">spring.profiles.active&#x3D;dev</span><br><span class="line"></span><br><span class="line"># 配置真实数据源</span><br><span class="line">spring.shardingsphere.datasource.names&#x3D;server-user,server-order</span><br><span class="line"></span><br><span class="line"># 配置第 1 个数据源</span><br><span class="line">spring.shardingsphere.datasource.server-user.type&#x3D;com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.shardingsphere.datasource.server-user.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">spring.shardingsphere.datasource.server-user.jdbc-url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.249.135:3301&#x2F;db_user</span><br><span class="line">spring.shardingsphere.datasource.server-user.username&#x3D;root</span><br><span class="line">spring.shardingsphere.datasource.server-user.password&#x3D;123456</span><br><span class="line"></span><br><span class="line"># 配置第 2 个数据源</span><br><span class="line">spring.shardingsphere.datasource.server-order.type&#x3D;com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.shardingsphere.datasource.server-order.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">spring.shardingsphere.datasource.server-order.jdbc-url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.249.135:3302&#x2F;db_order</span><br><span class="line">spring.shardingsphere.datasource.server-order.username&#x3D;root</span><br><span class="line">spring.shardingsphere.datasource.server-order.password&#x3D;123456</span><br><span class="line"></span><br><span class="line"># 标准分片表配置（数据节点）</span><br><span class="line"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes&#x3D;值</span><br><span class="line"># 值由数据源名 + 表名组成，以小数点分隔。</span><br><span class="line"># &lt;table-name&gt;：逻辑表名</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes&#x3D;server-user.t_user</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes&#x3D;server-order.t_order</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 打印SQL</span><br><span class="line">spring.shardingsphere.props.sql-show&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="2-3-测试垂直分片">2.3 测试垂直分片</h3><p>测试通过日志可以发现程序写的是<strong>逻辑表名</strong>，会通过Sharding配置文件自动路由到对应的数据源下的数据表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShardingTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 垂直分片：插入数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertOrderAndUser</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUname(<span class="string">"强哥"</span>);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderNo(<span class="string">"SHAWN001"</span>);</span><br><span class="line">        order.setUserId(user.getId());</span><br><span class="line">        order.setAmount(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>));</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 垂直分片：查询数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectFromOrderAndUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        Order order = orderMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果运行报错<code>Public Key Retrieval is not allowed</code>，是因为ShardingSphere-JDBC远程连接的方式默认的密码加密规则是：<strong>mysql_native_password</strong>。因此需要在服务器端修改服务器的密码加密规则，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><h1>四、ShardingSphere-JDBC水平分片(常用)</h1><h2 id="1、环境准备">1、环境准备</h2><p>创建两个Mysql容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3310:3306 \</span><br><span class="line">-v /data/server/order0/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /data/server/order0/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name server-order0 \</span><br><span class="line">mysql:8.0.29</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">-p 3311:3306 \</span><br><span class="line">-v /data/server/order1/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /data/server/order1/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name server-order1 \</span><br><span class="line">mysql:8.0.29</span><br></pre></td></tr></table></figure><p>登录MySQL服务器操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入容器：</span></span><br><span class="line">docker exec -it server-order1 env LANG=C.UTF-8 /bin/bash</span><br><span class="line"><span class="comment">#进入容器内的mysql命令行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#修改默认密码插件</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><p>创建数据库：和server-order1相同<code>注意：</code>水平分片的id需要在业务层实现，不能依赖数据库的主键自增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db_order;</span><br><span class="line"><span class="keyword">USE</span> db_order;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order0 (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">  order_no <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">  user_id <span class="built_in">BIGINT</span>,</span><br><span class="line">  amount <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>) </span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order1 (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">  order_no <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">  user_id <span class="built_in">BIGINT</span>,</span><br><span class="line">  amount <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="2、基本水平分片">2、基本水平分片</h2><h3 id="2-1-基本配置">2.1 基本配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;基本配置</span><br><span class="line"># 应用名称</span><br><span class="line">spring.application.name&#x3D;sharging-jdbc-demo</span><br><span class="line"># 开发环境设置</span><br><span class="line">spring.profiles.active&#x3D;dev</span><br><span class="line"># 内存模式</span><br><span class="line">spring.shardingsphere.mode.type&#x3D;Memory</span><br><span class="line"># 打印SQl</span><br><span class="line">spring.shardingsphere.props.sql-show&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="2-2-数据源配置">2.2 数据源配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;数据源配置</span><br><span class="line"># 配置真实数据源</span><br><span class="line">spring.shardingsphere.datasource.names&#x3D;server-user,server-order0,server-order1</span><br><span class="line"></span><br><span class="line"># 配置第 1 个数据源</span><br><span class="line">spring.shardingsphere.datasource.server-user.type&#x3D;com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.shardingsphere.datasource.server-user.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">spring.shardingsphere.datasource.server-user.jdbc-url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.249.135:3301&#x2F;db_user</span><br><span class="line">spring.shardingsphere.datasource.server-user.username&#x3D;root</span><br><span class="line">spring.shardingsphere.datasource.server-user.password&#x3D;123456</span><br><span class="line"></span><br><span class="line"># 配置第 2 个数据源</span><br><span class="line">spring.shardingsphere.datasource.server-order0.type&#x3D;com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.shardingsphere.datasource.server-order0.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">spring.shardingsphere.datasource.server-order0.jdbc-url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.249.135:3310&#x2F;db_order</span><br><span class="line">spring.shardingsphere.datasource.server-order0.username&#x3D;root</span><br><span class="line">spring.shardingsphere.datasource.server-order0.password&#x3D;123456</span><br><span class="line"></span><br><span class="line"># 配置第 3 个数据源</span><br><span class="line">spring.shardingsphere.datasource.server-order1.type&#x3D;com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.shardingsphere.datasource.server-order1.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">spring.shardingsphere.datasource.server-order1.jdbc-url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.249.135:3311&#x2F;db_order</span><br><span class="line">spring.shardingsphere.datasource.server-order1.username&#x3D;root</span><br><span class="line">spring.shardingsphere.datasource.server-order1.password&#x3D;123456</span><br></pre></td></tr></table></figure><h3 id="2-3-标椎分片表配置">2.3 标椎分片表配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;标准分片表配置（数据节点配置）</span><br><span class="line"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes&#x3D;值</span><br><span class="line"># 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。</span><br><span class="line"># &lt;table-name&gt;：逻辑表名</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes&#x3D;server-user.t_user</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes&#x3D;server-order0.t_order0,server-order0.t_order1,server-order1.t_order0,server-order1.t_order1</span><br></pre></td></tr></table></figure><p>修改Order实体类的主键策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@TableId(type = IdType.AUTO)//依赖数据库的主键自增策略</span></span><br><span class="line"><span class="meta">@TableId</span>(type = IdType.ASSIGN_ID)<span class="comment">//分布式id</span></span><br></pre></td></tr></table></figure><p>测试：保留上面配置中的一个分片表节点分别进行测试，检查每个分片节点是否可用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水平分片：插入数据测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    order.setOrderNo(<span class="string">"SHAWN001"</span>);</span><br><span class="line">    order.setUserId(<span class="number">1L</span>);</span><br><span class="line">    order.setAmount(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>));</span><br><span class="line">    orderMapper.insert(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-行表达式">2.4 行表达式</h3><blockquote><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/">https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;标准分片表配置（数据节点配置）</span><br><span class="line"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes&#x3D;值</span><br><span class="line"># 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。</span><br><span class="line"># &lt;table-name&gt;：逻辑表名</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes&#x3D;server-user.t_user</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes&#x3D;server-order$-&gt;&#123;0..1&#125;.t_order$-&gt;&#123;0..1&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-分片算法配置">2.5 分片算法配置</h3><blockquote><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/">https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/builtin-algorithm/sharding/</a></p></blockquote><ul><li><strong>水平分库</strong></li></ul><p>分片规则：order表中<code>user_id</code>为偶数时，数据插入<code>server-order0服务器</code>，<code>user_id</code>为奇数时，数据插入<code>server-order1服务器</code>。这样分片的好处是，同一个用户的订单数据，一定会被插入到同一台服务器上，查询一个用户的订单时效率较高。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#------------------------分库策略</span><br><span class="line"># 分片列名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column&#x3D;user_id</span><br><span class="line"># 分片算法名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name&#x3D;alg_inline_userid</span><br><span class="line"></span><br><span class="line">#------------------------分片算法配置</span><br><span class="line"># 行表达式分片算法</span><br><span class="line"># 分片算法类型</span><br><span class="line">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.type&#x3D;INLINE</span><br><span class="line"># 分片算法属性配置</span><br><span class="line">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.props.algorithm-expression&#x3D;server-order$-&gt;&#123;user_id % 2&#125;</span><br><span class="line"></span><br><span class="line"># 取模分片算法</span><br><span class="line"># 分片算法类型</span><br><span class="line">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.type&#x3D;MOD</span><br><span class="line"># 分片算法属性配置</span><br><span class="line">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.props.sharding-count&#x3D;2</span><br></pre></td></tr></table></figure><p>因为只是暂时设置了分库，但未分表，先设置只在 <code>t_order0</code>表上进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.actual-data-nodes&#x3D;server-order$-&gt;&#123;0..1&#125;.t_order0</span><br></pre></td></tr></table></figure><p>测试：可以分别测试行表达式分片算法和取模分片算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水平分片：分库插入数据测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertOrderDatabaseStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderNo(<span class="string">"SHAWN001"</span>);</span><br><span class="line">        order.setUserId(i + <span class="number">1</span>);</span><br><span class="line">        order.setAmount(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>));</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>水平分表</strong></p><p>分片规则：order表中<code>order_no的哈希值为偶数时</code>，数据插入对应服务器的<code>t_order0表</code>，<code>order_no的哈希值为奇数时</code>，数据插入对应服务器的<code>t_order1表</code>。因为order_no是字符串形式，因此不能直接取模。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#------------------------分表策略</span><br><span class="line"># 分片列名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column&#x3D;order_no</span><br><span class="line"># 分片算法名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name&#x3D;alg_hash_mod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------分片算法配置</span><br><span class="line"># 哈希取模分片算法</span><br><span class="line"># 分片算法类型</span><br><span class="line">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.type&#x3D;HASH_MOD</span><br><span class="line"># 分片算法属性配置</span><br><span class="line">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.props.sharding-count&#x3D;2</span><br></pre></td></tr></table></figure><p>测试前不要忘记将如下节点改回原来的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.actual-data-nodes&#x3D;server-order$-&gt;&#123;0..1&#125;.t_order$-&gt;&#123;0..1&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水平分片：分表插入数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertOrderTableStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderNo(<span class="string">"ATGUIGU"</span> + i);</span><br><span class="line">        order.setUserId(<span class="number">1L</span>);</span><br><span class="line">        order.setAmount(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>));</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">5</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderNo(<span class="string">"ATGUIGU"</span> + i);</span><br><span class="line">        order.setUserId(<span class="number">2L</span>);</span><br><span class="line">        order.setAmount(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>));</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试哈希取模</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHash</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意hash取模的结果是整个字符串hash后再取模，和数值后缀是奇数还是偶数无关</span></span><br><span class="line">    System.out.println(<span class="string">"ATGUIGU001"</span>.hashCode() % <span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">"ATGUIGU0011"</span>.hashCode() % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水平分片：查询所有记录</span></span><br><span class="line"><span class="comment"> * 查询了两个数据源，每个数据源中使用UNION ALL连接两个表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testShardingSelectAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Order&gt; orders = orderMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    orders.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水平分片：根据user_id查询记录</span></span><br><span class="line"><span class="comment"> * 查询了一个数据源，每个数据源中使用UNION ALL连接两个表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testShardingSelectByUserId</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;Order&gt; orderQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    orderQueryWrapper.eq(<span class="string">"user_id"</span>, <span class="number">1L</span>);</span><br><span class="line">    List&lt;Order&gt; orders = orderMapper.selectList(orderQueryWrapper);</span><br><span class="line">    orders.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-分布式序列算法">2.6 分布式序列算法</h3><blockquote><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/">https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/</a></p></blockquote><p>水平分片需要关注全局序列，因为不能简单的使用基于数据库的主键自增。这里有两种方案：一种是<strong>基于MyBatisPlus的id策略</strong>；一种是<strong>ShardingSphere-JDBC的全局序列配置</strong>。</p><p><code>基于MyBatisPlus的id策略,</code>将Order类的id设置成如下形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId</span>(type = IdType.ASSIGN_ID)</span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><p><code>基于ShardingSphere-JDBC的全局序列配置</code>，和前面的MyBatisPlus的策略二选一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#------------------------分布式序列策略配置</span><br><span class="line"># 分布式序列列名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column&#x3D;id</span><br><span class="line"># 分布式序列算法名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name&#x3D;alg_snowflake</span><br><span class="line"></span><br><span class="line"># 分布式序列算法配置</span><br><span class="line"># 分布式序列算法类型</span><br><span class="line">spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type&#x3D;SNOWFLAKE</span><br><span class="line"># 分布式序列算法属性配置</span><br><span class="line">#spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.xxx&#x3D;</span><br></pre></td></tr></table></figure><p>此时，需要将实体类中的id策略修改成以下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列</span></span><br><span class="line"><span class="comment">//当没有配置shardingsphere-jdbc的分布式序列时，自动依赖数据库的主键自增策略</span></span><br><span class="line"><span class="meta">@TableId</span>(type = IdType.AUTO)</span><br></pre></td></tr></table></figure><h2 id="3、多表关联">3、多表关联</h2><p>创建关联表，在<code>server-order0、server-order1</code>服务器中分别创建两张订单详情表<code>t_order_item0、t_order_item1</code>。我们希望<code>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</code>，因此这两张表我们使用相同的分片策略。那么在<code>t_order_item</code>中我们也需要创建<code>order_no</code>和<code>user_id</code>这两个分片键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_item0(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">    order_no <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    user_id <span class="built_in">BIGINT</span>,</span><br><span class="line">    price <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="string">`count`</span> <span class="built_in">INT</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_item1(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">    order_no <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    user_id <span class="built_in">BIGINT</span>,</span><br><span class="line">    price <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="string">`count`</span> <span class="built_in">INT</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_order_item"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列</span></span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderItemMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">OrderItem</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置关联表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#------------------------标准分片表配置（数据节点配置）</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes&#x3D;server-order$-&gt;&#123;0..1&#125;.t_order_item$-&gt;&#123;0..1&#125;</span><br><span class="line"></span><br><span class="line">#------------------------分库策略</span><br><span class="line"># 分片列名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-column&#x3D;user_id</span><br><span class="line"># 分片算法名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-algorithm-name&#x3D;alg_mod</span><br><span class="line"></span><br><span class="line">#------------------------分表策略</span><br><span class="line"># 分片列名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column&#x3D;order_no</span><br><span class="line"># 分片算法名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name&#x3D;alg_hash_mod</span><br><span class="line"></span><br><span class="line">#------------------------分布式序列策略配置</span><br><span class="line"># 分布式序列列名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column&#x3D;id</span><br><span class="line"># 分布式序列算法名称</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name&#x3D;alg_snowflake</span><br></pre></td></tr></table></figure><p>测试插入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试关联表插入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertOrderAndOrderItem</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderNo(<span class="string">"ATGUIGU"</span> + i);</span><br><span class="line">        order.setUserId(<span class="number">1L</span>);</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> j = <span class="number">1</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            OrderItem orderItem = <span class="keyword">new</span> OrderItem();</span><br><span class="line">            orderItem.setOrderNo(<span class="string">"ATGUIGU"</span> + i);</span><br><span class="line">            orderItem.setUserId(<span class="number">1L</span>);</span><br><span class="line">            orderItem.setPrice(<span class="keyword">new</span> BigDecimal(<span class="number">10</span>));</span><br><span class="line">            orderItem.setCount(<span class="number">2</span>);</span><br><span class="line">            orderItemMapper.insert(orderItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">5</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderNo(<span class="string">"ATGUIGU"</span> + i);</span><br><span class="line">        order.setUserId(<span class="number">2L</span>);</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> j = <span class="number">1</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            OrderItem orderItem = <span class="keyword">new</span> OrderItem();</span><br><span class="line">            orderItem.setOrderNo(<span class="string">"ATGUIGU"</span> + i);</span><br><span class="line">            orderItem.setUserId(<span class="number">2L</span>);</span><br><span class="line">            orderItem.setPrice(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>));</span><br><span class="line">            orderItem.setCount(<span class="number">3</span>);</span><br><span class="line">            orderItemMapper.insert(orderItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、绑定表">4、绑定表</h2><p>创建VO对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加Mapper方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(&#123;<span class="string">"SELECT o.order_no, SUM(i.price * i.count) AS amount"</span>,</span><br><span class="line">            <span class="string">"FROM t_order o JOIN t_order_item i ON o.order_no = i.order_no"</span>,</span><br><span class="line">            <span class="string">"GROUP BY o.order_no"</span>&#125;)</span><br><span class="line">    <span class="function">List&lt;OrderVo&gt; <span class="title">getOrderAmount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试关联查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试关联表查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetOrderAmount</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;OrderVo&gt; orderAmountList = orderMapper.getOrderAmount();</span><br><span class="line">    orderAmountList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置绑定表，在原来水平分片配置的基础上添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#------------------------绑定表</span><br><span class="line">spring.shardingsphere.rules.sharding.binding-tables[0]&#x3D;t_order,t_order_item</span><br></pre></td></tr></table></figure><p>配置完绑定表后再次进行关联查询的测试：</p><ul><li><p>**如果不配置绑定表：测试的结果为8个SQL。**多表关联查询会出现笛卡尔积关联。</p></li><li><p><strong>如果配置绑定表：测试的结果为4个SQL。</strong> 多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升。</p></li></ul><p><code>绑定表：</code>指分片规则一致的一组分片表。 使用绑定表进行多表关联查询时，<strong>必须使用分片键进行关联</strong>，否则会出现笛卡尔积关联或跨库关联，从而影响查询效率。</p><h2 id="5、广播表">5、广播表</h2><blockquote><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding/" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding/">https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/rules/sharding/</a></p></blockquote><h3 id="5-1-广播表介绍">5.1 广播表介绍</h3><p>指所有的分片数据源中都存在的表，表结构及其数据在每个数据库中均完全一致。 适用于数据量不大且需要与海量数据的表进行关联查询的场景，例如：字典表。</p><p>广播具有以下特性：</p><ul><li><p>插入、更新操作会实时在所有节点上执行，保持各个分片的数据一致性</p></li><li><p>查询操作，只从一个节点获取</p></li><li><p>可以跟任何一个表进行 JOIN 操作</p></li></ul><h3 id="5-2-创建广播表">5.2 创建广播表</h3><p>在server-order0、server-order1和server-user服务器中分别创建t_dict表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_dict(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">    dict_type <span class="built_in">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="5-3-程序实现">5.3 程序实现</h3><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_dict"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dict</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可以使用MyBatisPlus的雪花算法</span></span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.ASSIGN_ID)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String dictType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DictMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Dict</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置广播表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#数据节点可不配置，默认情况下，向所有数据源广播</span><br><span class="line">spring.shardingsphere.rules.sharding.tables.t_dict.actual-data-nodes&#x3D;server-user.t_dict,server-order$-&gt;&#123;0..1&#125;.t_dict</span><br><span class="line"></span><br><span class="line"># 广播表</span><br><span class="line">spring.shardingsphere.rules.sharding.broadcast-tables[0]&#x3D;t_dict</span><br></pre></td></tr></table></figure><h3 id="5-4-测试">5.4 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DictMapper dictMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广播表：每个服务器中的t_dict同时添加了新数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBroadcast</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Dict dict = <span class="keyword">new</span> Dict();</span><br><span class="line">    dict.setDictType(<span class="string">"type1"</span>);</span><br><span class="line">    dictMapper.insert(dict);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询操作，只从一个节点获取数据</span></span><br><span class="line"><span class="comment"> * 随机负载均衡规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBroadcast</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Dict&gt; dicts = dictMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    dicts.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>五、ShardingSphere-Proxy</h1><h2 id="1、环境搭建与安装">1、环境搭建与安装</h2><blockquote><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/quick-start/shardingsphere-proxy-quick-start/" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/document/5.1.1/cn/quick-start/shardingsphere-proxy-quick-start/">https://shardingsphere.apache.org/document/5.1.1/cn/quick-start/shardingsphere-proxy-quick-start/</a></p></blockquote><h3 id="1-1-获取包">1.1 获取包</h3><p>目前 ShardingSphere-Proxy 提供了 3 种获取方式：</p><ul><li><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/bin/" target="_blank" rel="noopener" title="二进制发布包">二进制发布包</a></p></li><li><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/docker/" target="_blank" rel="noopener" title="Docker">Docker</a></p></li><li><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/helm/" target="_blank" rel="noopener" title="Helm">Helm</a></p></li></ul><h3 id="1-2-使用二进制发布包安装">1.2 使用二进制发布包安装</h3><p>二进制包既可以Linux系统运行，又可以在windows系统运行</p><p><strong>step1：解压二进制包</strong></p><p><code>apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz</code></p><p>windows：使用解压软件解压文件</p><p>Linux：将文件上传至/opt目录，并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz</span><br></pre></td></tr></table></figure><p><strong>step2：MySQL驱动</strong></p><p><code>mysql-connector-java-8.0.22.jar</code>，将MySQl驱动放至解压目录中的<code>ext-lib</code>目录</p><p><strong>spte3：修改配置conf/server.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!AUTHORITY</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">root@%:root</span></span><br><span class="line">    <span class="attr">provider:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ALL_PRIVILEGES_PERMITTED</span></span><br><span class="line"></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>spte4：启动ShardingSphere-Proxy</strong></p><p>Linux 操作系统请运行 <code>bin/start.sh</code>；Windows 操作系统请运行 <code>bin/start.bat</code>；指定端口号和配置文件目录：<code>bin/start.bat ${proxy_port} ${proxy_conf_directory}</code> </p><p><strong>step5：远程连接ShardingSphere-Proxy</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192.168.100.1 -P3307 -uroot -p</span><br></pre></td></tr></table></figure><p><strong>step6：访问测试</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-使用Docker安装">1.3 使用Docker安装</h3><p><strong>step1：启动Docker容器</strong>，若容器内存太小，创建容器的时候使用JVM参数限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v /data/server/proxy<span class="_">-a</span>/conf:/opt/shardingsphere-proxy/conf \</span><br><span class="line">-v /data/server/proxy<span class="_">-a</span>/ext-lib:/opt/shardingsphere-proxy/ext-lib \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">"-Xmx256m -Xms256m -Xmn128m"</span> \</span><br><span class="line">-p 3321:3307 \</span><br><span class="line">--name server-proxy<span class="_">-a</span> \</span><br><span class="line">apache/shardingsphere-proxy:5.1.1</span><br></pre></td></tr></table></figure><p><strong>step2：上传MySQL驱动</strong></p><p>将MySQL驱动上传至<code>/data/server/proxy-a/ext-lib</code>目录</p><p><strong>spte3：修改配置server.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!AUTHORITY</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">root@%:root</span></span><br><span class="line">    <span class="attr">provider:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ALL_PRIVILEGES_PERMITTED</span></span><br><span class="line"></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将配置文件上传至<code>/data/server/proxy-a/conf</code>目录</p><p><strong>spte4：重启容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart server-proxy<span class="_">-a</span></span><br></pre></td></tr></table></figure><p><strong>step5：远程连接ShardingSphere-Proxy</strong></p><p>ShardingSphere-Proxy容器中默认情况下没有mysql命令行客户端的安装，因此需要远程访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192.168.249.135 -P3321 -uroot -p</span><br></pre></td></tr></table></figure><p><strong>step6：访问测试</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><h2 id="2、ShardingSphere-Proxy读写分离">2、ShardingSphere-Proxy读写分离</h2><h3 id="2-1-修改配置文件">2.1 修改配置文件</h3><p>修改配置config-readwrite-splitting.yaml，ShardingSphere-JDBC的配置是ShardingSphere-Proxy的子集，因此可以复用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑名字</span></span><br><span class="line"><span class="attr">schemaName:</span> <span class="string">readwrite_splitting_db</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">write_ds:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.249.135:3306/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">read_ds_0:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.249.135:3307/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">read_ds_1:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.249.135:3308/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!READWRITE_SPLITTING</span></span><br><span class="line">  <span class="attr">dataSources:</span></span><br><span class="line">    <span class="attr">readwrite_ds:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Static</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">write-data-source-name:</span> <span class="string">write_ds</span></span><br><span class="line">        <span class="attr">read-data-source-names:</span> <span class="string">read_ds_0,read_ds_1</span></span><br></pre></td></tr></table></figure><p>将配置文件上传至<code>/data/server/proxy-a/conf</code>目录，最后重启容器</p><h3 id="2-2-实时查看日志">2.2 实时查看日志</h3><p>可以通过这种方式查看服务器中输出的SQL语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it server-proxy<span class="_">-a</span> env LANG=C.UTF-8 /bin/bash</span><br><span class="line">tail -f /opt/shardingsphere-proxy/logs/stdout.log</span><br></pre></td></tr></table></figure><h3 id="2-3-远程访问测试">2.3 远程访问测试</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; use readwrite_splitting_db;</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">mysql&gt; select * from t_user;</span><br><span class="line">mysql&gt; select * from t_user;</span><br><span class="line">mysql&gt; insert into t_user(uname) values('wang5');</span><br></pre></td></tr></table></figure><h3 id="2-4-应用程序访问Proxy">2.4 应用程序访问Proxy</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_user"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置数据源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 应用名称</span><br><span class="line">spring.application.name&#x3D;sharding-proxy-demo</span><br><span class="line"># 开发环境设置</span><br><span class="line">spring.profiles.active&#x3D;dev</span><br><span class="line"></span><br><span class="line">#mysql数据库连接（proxy）</span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.249.135:3321&#x2F;readwrite_splitting_db?serverTimezone&#x3D;GMT%2B8&amp;useSSL&#x3D;false</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;root</span><br><span class="line"></span><br><span class="line">#mybatis日志</span><br><span class="line">mybatis-plus.configuration.log-impl&#x3D;org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShardingProxyDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读数据测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、ShardingSphere-Proxy垂直分片">3、ShardingSphere-Proxy垂直分片</h2><p>修改配置config-sharding.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schemaName:</span> <span class="string">sharding_db</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.249.135:3301/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ds_1:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.249.135:3302/db_order?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">  <span class="attr">tables:</span></span><br><span class="line">    <span class="attr">t_user:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_0.t_user</span></span><br><span class="line">    <span class="attr">t_order:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_1.t_order</span></span><br></pre></td></tr></table></figure><p>实时查看日志，可以通过这种方式查看服务器中输出的SQL语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it server-proxy<span class="_">-a</span> env LANG=C.UTF-8 /bin/bash</span><br><span class="line">tail -f /opt/shardingsphere-proxy/logs/stdout.log</span><br></pre></td></tr></table></figure><p>远程访问测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; use sharding_db;</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">mysql&gt; select * from t_order;</span><br><span class="line">mysql&gt; select * from t_user;</span><br></pre></td></tr></table></figure><h2 id="4、ShardingSphere-Proxy水平分片">4、ShardingSphere-Proxy水平分片</h2><p>修改配置config-sharding.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schemaName:</span> <span class="string">sharding_db</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_user:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.249.135:3301/db_user?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ds_order0:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.249.135:3310/db_order?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ds_order1:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.249.135:3311/db_order?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">  <span class="attr">tables:</span></span><br><span class="line">    <span class="attr">t_user:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_user.t_user</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">t_order:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_order$&#123;0..1&#125;.t_order$&#123;0..1&#125;</span></span><br><span class="line">      <span class="attr">databaseStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">alg_mod</span></span><br><span class="line">      <span class="attr">tableStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">order_no</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">alg_hash_mod</span></span><br><span class="line">      <span class="attr">keyGenerateStrategy:</span></span><br><span class="line">        <span class="attr">column:</span> <span class="string">id</span></span><br><span class="line">        <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span></span><br><span class="line">    <span class="attr">t_order_item:</span></span><br><span class="line">      <span class="attr">actualDataNodes:</span> <span class="string">ds_order$&#123;0..1&#125;.t_order_item$&#123;0..1&#125;</span></span><br><span class="line">      <span class="attr">databaseStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">alg_mod</span></span><br><span class="line">      <span class="attr">tableStrategy:</span></span><br><span class="line">        <span class="attr">standard:</span></span><br><span class="line">          <span class="attr">shardingColumn:</span> <span class="string">order_no</span></span><br><span class="line">          <span class="attr">shardingAlgorithmName:</span> <span class="string">alg_hash_mod</span></span><br><span class="line">      <span class="attr">keyGenerateStrategy:</span></span><br><span class="line">        <span class="attr">column:</span> <span class="string">id</span></span><br><span class="line">        <span class="attr">keyGeneratorName:</span> <span class="string">snowflake</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">bindingTables:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">t_order,t_order_item</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">broadcastTables:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">t_dict</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">shardingAlgorithms:</span></span><br><span class="line">    <span class="attr">alg_inline_userid:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">algorithm-expression:</span> <span class="string">server-order$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">    <span class="attr">alg_mod:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">MOD</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">sharding-count:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">alg_hash_mod:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">HASH_MOD</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">sharding-count:</span> <span class="number">2</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">keyGenerators:</span></span><br><span class="line">    <span class="attr">snowflake:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br></pre></td></tr></table></figure><p>实时查看日志，可以通过这种方式查看服务器中输出的SQL语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it server-proxy<span class="_">-a</span> env LANG=C.UTF-8 /bin/bash</span><br><span class="line">tail -f /opt/shardingsphere-proxy/logs/stdout.log</span><br></pre></td></tr></table></figure><p>远程访问测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; use sharding_db;</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">mysql&gt; select * from t_order; --测试水平分片</span><br><span class="line">mysql&gt; select * from t_dict; --测试广播表</span><br></pre></td></tr></table></figure><hr><p>参考</p><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/overview/" target="_blank" rel="noopener" title="https://shardingsphere.apache.org/document/5.1.1/cn/overview/">https://shardingsphere.apache.org/document/5.1.1/cn/overview/</a></p><p><a href="https://www.bilibili.com/video/BV1ta411g7Jf/" target="_blank" rel="noopener" title="https://www.bilibili.com/video/BV1ta411g7Jf/">https://www.bilibili.com/video/BV1ta411g7Jf/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;h2 id=&quot;1、介绍&quot;&gt;1、介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文属于改参考文章的升级版，部分内容可以参考：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/120201007&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;ShardingSphere数据库中间件基础学习&quot;&gt;ShardingSphere数据库中间件基础学习&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;互联网业务兴起之后，海量用户加上海量数据的特点，单个数据库服务器已经难以满足业务需要，必须考虑数据库集群的方式来提升性能。高性能数据库集群的第一种方式是&amp;quot;&lt;code&gt;读写分离&lt;/code&gt;&amp;quot;，第二种方式是&amp;quot;&lt;code&gt;数据库分片&lt;/code&gt;&amp;quot;；&lt;/p&gt;
&lt;p&gt;读写分离和数据分片具体的实现方式一般有两种： &lt;code&gt;程序代码封装&lt;/code&gt;和&lt;code&gt;中间件封装&lt;/code&gt;，中间件软件有**Apache ShardingSphere（程序级别和中间件级别）**和MyCat（数据库中间件）&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://www.shawn22.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java高级技术之Gradle</title>
    <link href="https://www.shawn22.xyz/posts/f064074e.html"/>
    <id>https://www.shawn22.xyz/posts/f064074e.html</id>
    <published>2022-10-31T13:44:00.000Z</published>
    <updated>2022-10-31T13:46:15.562Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Gradle入门</h1><h2 id="1、简介">1、简介</h2><blockquote><p>Gradle 是一款Google 推出的基于 JVM、通用灵活的项目构建工具，支持 Maven，JCenter 多种第三方仓库;支持传递性依赖管理、废弃了繁杂的xml 文件，转而使用简洁的、支持多种语言(例如：java、groovy 等)的 build 脚本文件；<br>官网地址: <a href="https://gradle.org/" target="_blank" rel="noopener" title="https://gradle.org/">https://gradle.org/</a></p></blockquote><p>作为Java开发程序员,如果想下载Spring、SpringBoot等Spring家族的源码，基本上基于Gradle构建的，所以虽然目前市面上常见的项目构建工具有<strong>Ant、Maven、Gradle，主流还是Maven，但是未来趋势Gradle</strong>。</p><a id="more"></a><h2 id="2、常见的项目构建工具">2、常见的项目构建工具</h2><ul><li><p>Ant</p><p> 2000 年 Apache 推出的纯Java 编写构建工具，通过 xml[build.xml]文件管理项目。优点：使用灵活，速度快(快于 gradle 和 maven)；缺点：Ant 没有强加任何编码约定的项目目录结构,开发人员需编写繁杂XML 文件构建指令,对开发人员是一个挑战。  </p></li><li><p>Maven</p><p>2004 年Apache 组织推出的再次使用xml 文件[pom.xml]管理项目的构建工具。  优点: 遵循一套约定大于配置的项目目录结构，使用统一的GAV 坐标进行依赖管理,侧重于包管理。缺点：项目构建过程僵化,配置文件编写不够灵活、不方便自定义组件,构建速度慢于 gradle。  </p></li><li><p>Gradle</p><p>2012 年Google 推出的基于Groovy 语言的全新项目构建工具，集合了Ant 和 Maven 各自的优势。<br>优点：集 Ant 脚本的灵活性+Maven 约定大于配置的项目目录优势,支持多种远程仓库和插件,侧重于大项目构建。缺点：学习成本高、资料少、脚本灵活、版本兼容性差等。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/8a955de36fd94a869309aca92bfe5af5.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3、Gradle安装">3、Gradle安装</h2><h3 id="3-1-安装说明">3.1 安装说明</h3><blockquote><p>Gradle官网：<a href="https://gradle.org/" target="_blank" rel="noopener" title="https://gradle.org/">https://gradle.org/</a>Gradle<br>官方下载安装教程页面：<a href="https://gradle.org/install/" target="_blank" rel="noopener" title="https://gradle.org/install/">https://gradle.org/install/</a><br>Gradle官方用户手册：<a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/userguide.html">https://docs.gradle.org/current/userguide/userguide.html</a></p></blockquote><p>SpringBoot 官方文档明确指出,目前SpringBoot 的 Gradle 插件需要gradle6.8 版本及以上，所以我们这里选择 7.x 版本；但其中SpringBoot 与Gradle 存在版本兼容问题，<strong>Gradle 与Idea 也存在兼容问题</strong>，所以考虑到 java 程序员会使用SpringBoot，所以要选择 6.8 版本及高于 6.8 版本的Gradle,那么相应的idea 版本也要升级。一般去查看<code>{IDEA安装根目录}\plugins\gradle\lib\</code>查看对应gradle版本</p><p>具体参考文档:<a href="https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#getting-started" target="_blank" rel="noopener" title="https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#getting-started">https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#getting-started</a></p><h3 id="3-2-JDK和Gradle安装">3.2 JDK和Gradle安装</h3><blockquote><p>安装参考：<a href="https://blog.csdn.net/enterpc/article/details/122293244" target="_blank" rel="noopener" title="Gradle 安装配置详解">Gradle 安装配置详解</a></p></blockquote><p>要求Jdk 为 1.8 或者 1.8 版本以上，并配置好环境变量；Gradle去<a href="https://gradle.org/releases/" target="_blank" rel="noopener" title="下载页">下载页</a>进行对应版本下载，同时和maven一样配置好环境变量，<code>gradle -v </code>或者 <code>gradle --version</code>检测是否安装成功</p><blockquote><p>特别注意：这里我们接着再配置一个<strong>GRADLE_USER_HOME 环境变量</strong>:  <code>GRADLE_USER_HOME</code> 相当于配置Gradle 本地仓库位置和 Gradle Wrapper 缓存目录。  Gradle本地仓库可以和Maven本地仓库目录一致</p></blockquote><h2 id="4、Gradle-项目目录结构">4、Gradle 项目目录结构</h2><p>Gradle 项目默认目录结构和Maven 项目的目录结构一致,都是基于约定大于配置【Convention Over Configuration】</p><p><img src="https://img-blog.csdnimg.cn/e69659bcd27245339fe1723ed0c0bea3.png#pic_center" alt="在这里插入图片描述"></p><ul><li><p>只有war工程才有webapp目录，对于普通的jar工程并没有webapp目录  </p></li><li><p>gradlew与gradlew.bat执行的指定wrapper版本中的gradle指令,不是本地安装的gradle指令(可以删除)</p></li></ul><h2 id="5、Gradle-创建项目">5、Gradle 创建项目</h2><h3 id="5-1-常用指令">5.1 常用指令</h3><blockquote><p>gradle 的指令要在含有<code>build.gradle</code> 的目录执行</p></blockquote><ul><li><p>gradle clean：清空build目录</p></li><li><p>gradle classes：编译业务代码和配置文件</p></li><li><p>gradle test：编译测试代码，生成测试报告</p></li><li><p>gradle build：构建项目</p></li><li><p>gradle build -x test：跳过测试构建</p></li></ul><h3 id="5-2-maven源修改">5.2 maven源修改</h3><p>我们可以在gradle 的<strong>init.d 目录下创建以.gradle 结尾的文件</strong>，.gradle 文件可以实现在build 开始之前执行，这里创建init.gradle文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal() </span><br><span class="line">        maven &#123; name <span class="string">"Alibaba"</span>; url <span class="string">"https://maven.aliyun.com/repository/public"</span> &#125; </span><br><span class="line">        maven &#123; name <span class="string">"Bstek"</span>;url <span class="string">"https://nexus.bsdn.org/content/groups/public/"</span> &#125; </span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    buildscript &#123;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            maven &#123; name <span class="string">"Alibaba"</span>; url <span class="string">'https://maven.aliyun.com/repository/public'</span> &#125; </span><br><span class="line">            maven &#123; name <span class="string">"Bstek"</span>; url <span class="string">'https://nexus.bsdn.org/content/groups/public/'</span> &#125; </span><br><span class="line">            maven &#123; name <span class="string">"M2"</span>; url <span class="string">'https://plugins.gradle.org/m2/'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启用init.gradle 文件的方法</strong></p><ul><li><p>在命令行指定文件，例如：<code>gradle --init-script yourdir/init.gradle -q taskName</code>。你可以多次输入此命令来指定多个init文件</p></li><li><p>把<code>init.gradle</code>文件放到<code> USER_HOME/.gradle/</code> 目录下  </p></li><li><p>把以.gradle结尾的文件放到<code> USER_HOME/.gradle/init.d/</code> 目录下  </p></li><li><p>把以.gradle结尾的文件放到 <code>GRADLE_HOME/init.d/</code> 目录下  </p></li></ul><p>如果存在上面的4种方式的2种以上，gradle会按上面的1-4序号依次执行这些文件，如果给定目录下存在多个init脚本，会按拼音a-z顺序执行这些脚本，每个init脚本都存在一个对应的gradle实例,你在这个文件中调用的所有方法和属性，都会委托给这个gradle实例，每个init脚本都实现了Script接口</p><p><strong>仓库地址说明</strong></p><ul><li><p><code>mavenLocal()</code>: 指定使用maven本地仓库，而本地仓库在配置maven时settings文件指定的仓库位置。如E:/repository，gradle 查找jar包顺序如下：<code>USER_HOME/.m2/settings.xml </code>&gt;&gt; <code>M2_HOME/conf/settings.xml</code> &gt;&gt; <code>USER_HOME/.m2/repository</code>  </p></li><li><p><code>maven { url 地址}</code>，指定maven仓库，一般用私有仓库地址或其它的第三方库【比如阿里镜像仓库地址】</p></li><li><p><code>mavenCentral()</code>：这是Maven的中央仓库，无需配置，直接声明就可以使用。jcenter()：JCenter中央仓库，实际也是是用的maven搭建的，但相比Maven仓库更友好，通过CDN分发，并且支持https访问，在新版本中已经废弃了，替换为了mavenCentral()。  </p></li></ul><p>gradle可以通过指定仓库地址为本地maven仓库地址和远程仓库地址相结合的方式，避免每次都会去远程仓库下载依赖库。这种方式也有一定的问题，如果本地maven仓库有这个依赖，就会从直接加载本地依赖，如果本地仓库没有该依赖，那么还是会从远程下载。但是下载的jar不是存储在本地maven仓库中，而是放在自己的缓存目录中，默认在<code>USER_HOME/.gradle/caches</code>目录，当然如果我们配置过<code>GRADLE_USER_HOME</code>环境变量，则会放在<code>GRADLE_USER_HOME/caches</code>目录，不可以将gradle caches指向maven repository。</p><p><strong>阿里云仓库地址请参考</strong>：<a href="https://developer.aliyun.com/mvn/guide" target="_blank" rel="noopener" title="https://developer.aliyun.com/mvn/guide">https://developer.aliyun.com/mvn/guide</a></p><h3 id="5-3-Wrapper-包装器">5.3 Wrapper 包装器</h3><blockquote><p>Gradle Wrapper 实际上就是对 Gradle 的一层包装，用于解决实际开发中可能会遇到的不同的项目需要不同版本的 Gradle。</p></blockquote><p>例如把自己的代码共享给其他人使用，可能出现如下情况:  对方电脑没有安装 gradle；对方电脑安装过 gradle，但是版本太旧了。这时候，我们就可以考虑使用 Gradle Wrapper 了。这也是官方建议使用 Gradle Wrapper 的原因。</p><p>实际上有了 Gradle Wrapper 之后，我们<strong>本地是可以不配置 Gradle 的</strong>，下载Gradle 项目后，使用 gradle 项目自带的wrapper 操作也是可以的。  项目中的<strong>gradlew、gradlew.cmd</strong>脚本用的就是wrapper中规定的gradle版本。<br>而我们上面提到的gradle指令用的是本地gradle，所以gradle指令和gradlew指令所使用的gradle版本有可能是不一样的。gradlew、gradlew.cmd的使用方式与gradle使用方式完全一致，只不过把gradle指令换成了gradlew指令。  我们也可在终端执行 gradlew 指令时，指定指定一些参数，来控制 Wrapper 的生成，比如依赖的版本等</p><ul><li><p><code>—gradle-version</code>：指定使用的Gradle版本；</p></li><li><p><code>—gradle-distribution-url</code>：指定下载Gradle发行版的url地址</p></li><li><p><code>gradle wrapper --gradle-version=4.4</code>：升级wrapper版本号，只是修改gradle.properties中wrapper版本，未实际下载  </p></li><li><p><code>gradle wrapper --gradle-version 5.2.1 --distribution-type all</code>:关联源码用</p></li></ul><p>**GradleWrapper 的执行流程 **</p><ul><li><p>当我们第一次执行 <code>./gradlew build</code> 命令的时候，gradlew 会读取 <code>gradle-wrapper.properties</code> 文件的配置信息  </p></li><li><p>准确的将指定版本的 gradle 下载并解压到指定的位置(<strong>GRADLE_USER_HOME目录下的wrapper/dists目录中</strong>)  </p></li><li><p>构建本地缓存(<strong>GRADLE_USER_HOME目录下的caches目录中</strong>)，下载再使用相同版本的gradle就不用下载了</p></li><li><p>之后执行的 <code>./gradlew</code> 所有命令都是使用指定的 gradle 版本</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 下载的Gradle压缩包解压后存储的主目录</span><br><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line"># 相对于distributionBase的解压后的Gradle</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line"># Gradle发行版压缩包的下载地址</span><br><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-7.5.1-bin.zip</span></span><br><span class="line"># 压缩包的路径同distributionBase，只不过是存放zip压缩包的</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line"># 同distributionPath,只不过是存放zip压缩包的</span><br><span class="line">zipStorePath=wrapper/dists</span><br></pre></td></tr></table></figure><p>注意：前面提到的 <code>GRALE_USER_HOME</code> 环境变量用于这里的Gradle Wrapper 下载的特定版本的gradle 存储目录。如果我们没有配置过<code>GRALE_USER_HOME</code> 环境变量，<code>默认在当前用户家目录下的.gradle 文件夹中</code></p><h1>二、Gradle 与 Idea 整合</h1><h2 id="1、Groovy简介">1、Groovy简介</h2><blockquote><p>在某种程度上，Groovy 可以被视为Java 的一种脚本化改良版，Groovy 也是运行在 JVM 上，它可以很好地与 Java 代码及其相关库进行交互操作。它是一种成熟的面向对象编程语言，既可以面向对象编程，又可以用作纯粹的脚本语言。</p></blockquote><p>大多数有效的 Java 代码也可以转换为有效的 Groovy 代码，Groovy 和 Java 语言的主要区别是：完成同样的任务所需的Groovy 代码比 Java 代码更少。其特点为：</p><ul><li><p>功能强大，例如提供了动态类型转换、闭包和元编程（metaprogramming）支持</p></li><li><p>支持函数式编程，不需要main 函数</p></li><li><p>默认导入常用的包</p></li><li><p>类不支持 default 作用域,且默认作用域为public。</p></li><li><p>Groovy 中基本类型也是对象，可以直接调用对象的方法。</p></li><li><p>支持DSL（Domain Specific Languages 领域特定语言）和其它简洁的语法，让代码变得易于阅读和维护。</p></li><li><p>Groovy 是基于Java 语言的，所以完全兼容Java 语法,所以对于java 程序员学习成本较低。详细了解请参考：<a href="http://www.groovy-lang.org/documentation.html" target="_blank" rel="noopener" title="http://www.groovy-lang.org/documentation.html">http://www.groovy-lang.org/documentation.html</a></p></li></ul><h2 id="2、Groovy-安装-非必须-和项目创建">2、Groovy 安装[非必须]和项目创建</h2><blockquote><p>下载地址: <a href="https://groovy.apache.org/download.html" target="_blank" rel="noopener" title="https://groovy.apache.org/download.html">https://groovy.apache.org/download.html</a></p></blockquote><p>安装完后配置好环境变量，创建项目时选择Groovy项目，同时指定对应的Groovy SDK</p><h2 id="3、Groovy基本类型">3、Groovy基本类型</h2><ul><li><p><strong>类型转换</strong>：当需要时，类型之间会自动发生类型转换: 字符串（String）、基本类型(如int) 和类型的包装类 (如Integer)  </p></li><li><p>类说明：如果在一个groovy 文件中没有任何类定义，它将被当做 script 来处理，也就意味着这个文件将被透明的转换为一个 Script 类型的类，这个自动转换得到的类将使用原始的 groovy 文件名作为类的名字。groovy 文件的内容被打包进run 方法，另外在新产生的类中被加入一个main 方法以进行外部执行该脚本。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/87810886329544f69291cf2d1b4c8526.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-1-基本注意点">3.1 基本注意点</h3><p>方法调用时,在不含有歧义的地方可以省略方法调用时的括号。这类似于使用<code>${变量名}</code>时，括号在不引起歧义的地方可以省略是一样的</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> num1=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">def</span> num2= <span class="number">2</span>;</span><br><span class="line">println <span class="string">"$num1 + $num2 = $&#123;num1+num2&#125;"</span></span><br></pre></td></tr></table></figure><h3 id="3-2-引号说明">3.2 引号说明</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> num1=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">def</span> num2=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">def</span> str1=<span class="string">"1d"</span>; <span class="comment">//双引号</span></span><br><span class="line"><span class="keyword">def</span> str2=<span class="string">'dsd'</span>; <span class="comment">//单引号</span></span><br><span class="line"><span class="comment">//双引号运算能力,单引号用于常量字符串,三引号相当于模板字符串，可以支持换行</span></span><br><span class="line">println <span class="string">"$num1 + $num2 = $&#123;num1 + num2&#125;"</span></span><br><span class="line"><span class="comment">//基本数据类型也可以作为对象使用,可以调用对象的方法</span></span><br><span class="line">println(num1.getClass().toString()) </span><br><span class="line">println(str1.getClass().toString()) </span><br><span class="line">println(str2.getClass().toString())</span><br></pre></td></tr></table></figure><h3 id="3-3-三个语句结构">3.3 三个语句结构</h3><p>Groovy 支持顺序结构从上向下依次解析、分支结构(if…else、if…else if …else…、switch…case、for、while、do…while)</p><p>具体参考官网：<a href="http://www.groovy-lang.org/semantics.html" target="_blank" rel="noopener" title="http://www.groovy-lang.org/semantics.html#_conditional_structures">http://www.groovy-lang.org/semantics.html#_conditional_structures</a></p><h3 id="3-4-类型及权限修饰符">3.4 类型及权限修饰符</h3><ul><li><p>原生数据类型及包装类</p></li><li><p>类、内部类、抽象类、接口  </p></li><li><p>注解  </p></li><li><p>Trait: 可以看成是带有方法实现的接口</p></li></ul><blockquote><p>Groovy 中 各 种 各 样 的 数 据 类 型 和 权 限 修 饰 符 及 Goovy 与 Java 区 别 请 参 考 ：  <a href="http://www.groovy-lang.org/objectorientation.html" target="_blank" rel="noopener" title="http://www.groovy-lang.org/objectorientation.html#_modifiers_on_a_property">http://www.groovy-lang.org/objectorientation.html#_modifiers_on_a_property</a></p></blockquote><p>Groovy 类与 Java 类之间的主要区别是:  </p><ul><li><p>没有可见性修饰符的类或方法自动是公共的(可以使用一个特殊的注释来实现包的私有可见性)。  </p></li><li><p>没有可见性修饰符的字段将自动转换为属性，不需要显式的 getter 和 setter 方法。  </p></li><li><p>如果属性声明为 final，则不会生成 setter。  </p></li><li><p>一个源文件可能包含一个或多个类(但是如果一个文件不包含类定义的代码，则将其视为脚本)。脚本只是具有一些特殊约定的类,它们的名称与源文件相同(所以不要在脚本中包含与脚本源文件名相同的类定义)。  </p></li></ul><h3 id="3-5-集合操作">3.5 集合操作</h3><blockquote><p>参考官网:<a href="http://www.groovy-lang.org/syntax.html" target="_blank" rel="noopener" title="http://www.groovy-lang.org/syntax.html#_number_type_suffixes">http://www.groovy-lang.org/syntax.html#_number_type_suffixes</a></p></blockquote><p>Groovy中可以把不同的基本类型添加到同一集合中</p><ul><li><p>List：<code>add()/plus()/remove()/removeElement()/removeAll()/pop()/putAt()/each()/size()/contains()</code></p></li><li><p>Map：<code>put()/remove()/+、-/each()</code></p></li></ul><h3 id="3-6-类导入">3.6 类导入</h3><blockquote><p>参考官网地址：<a href="http://www.groovy-lang.org/structure.html#_imports" target="_blank" rel="noopener" title="http://www.groovy-lang.org/structure.html#_imports">http://www.groovy-lang.org/structure.html#_imports</a></p></blockquote><p>Groovy 遵循 Java 允许 import 语句解析类引用的概念</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.xml.MarkupBuilder </span><br><span class="line"><span class="keyword">def</span> xml = <span class="keyword">new</span> MarkupBuilder() </span><br><span class="line"><span class="keyword">assert</span> xml != <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>Groovy 语言默认提供的导入</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.* </span><br><span class="line"><span class="keyword">import</span> java.util.* </span><br><span class="line"><span class="keyword">import</span> java.io.* </span><br><span class="line"><span class="keyword">import</span> java.net.* </span><br><span class="line"><span class="keyword">import</span> groovy.lang.* </span><br><span class="line"><span class="keyword">import</span> groovy.util.*</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal</span><br></pre></td></tr></table></figure><h3 id="3-7-异常处理">3.7 异常处理</h3><blockquote><p>参考官网地址： <a href="http://www.groovy-lang.org/semantics.html#_try_catch_finally" target="_blank" rel="noopener" title="http://www.groovy-lang.org/semantics.html#_try_catch_finally">http://www.groovy-lang.org/semantics.html#_try_catch_finally</a></p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> z </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">def</span> i = <span class="number">7</span>, j = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">def</span> k = i / j </span><br><span class="line">        <span class="keyword">assert</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        z = <span class="string">'reached here'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> ( e ) &#123;</span><br><span class="line">    <span class="keyword">assert</span> e <span class="keyword">in</span> ArithmeticException </span><br><span class="line">    <span class="keyword">assert</span> z == <span class="string">'reached here'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-闭包">3.8 闭包</h3><blockquote><p>参考：<a href="http://www.groovy-lang.org/closures.html" target="_blank" rel="noopener" title="http://www.groovy-lang.org/closures.html">http://www.groovy-lang.org/closures.html</a></p></blockquote><p><strong>闭包</strong>：Groovy 中的闭包是一个开放的、匿名的代码块，它可以接受参数、也可以有返回值。闭包可以引用其周围作用域中声明的变量。  </p><p><strong>语法</strong>：<code>{ [closureParameters -&gt; ] statements }  </code><br>其中[ closureParameters-&gt; ]是一个可选的逗号分隔的参数列表,参数后面是 Groovy 语句。参数类似于方法参数列表， 这些参数可以是类型化的,也可以是非类型化的。当指定参数列表时，需要使用-&gt; 字符，用于将参数与闭包体分离。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//闭包体完成变量自增操作</span></span><br><span class="line">&#123; item++ &#125;</span><br><span class="line"><span class="comment">//闭包使用 空参数列表 明确规定这是无参的</span></span><br><span class="line">&#123; -&gt; item++ &#125;</span><br><span class="line"><span class="comment">//闭包中有一个默认的参数[it]，写不写无所谓</span></span><br><span class="line">&#123; println it &#125;</span><br><span class="line">&#123; it -&gt; println it &#125;</span><br><span class="line"><span class="comment">//如果不想使用默认的闭包参数it,那需要显示自定义参数的名称</span></span><br><span class="line">&#123; name -&gt; println name &#125;</span><br><span class="line"><span class="comment">//闭包也可以接受多个参数</span></span><br><span class="line">&#123; String x, <span class="keyword">int</span> y -&gt;</span><br><span class="line">    println <span class="string">"hey $&#123;x&#125; the value is $&#123;y&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//闭包参数也可是一个对象</span></span><br><span class="line">&#123; reader -&gt;</span><br><span class="line">    <span class="keyword">def</span> line = reader.readLine() </span><br><span class="line">    line.trim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭包调用方式： 闭包是 groovy.lang.Closure 的实例。它可以像任何其他变量一样分配给一个变量或字段。  <code>闭包对象(参数)</code> ；<code>闭包对象.call(参数)</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> isOdd = &#123; <span class="keyword">int</span> i -&gt; i%<span class="number">2</span> != <span class="number">0</span> &#125; </span><br><span class="line"><span class="keyword">assert</span> isOdd(<span class="number">3</span>) == <span class="literal">true</span></span><br><span class="line"><span class="keyword">assert</span> isOdd.call(<span class="number">2</span>) == <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> isEven = &#123; it%<span class="number">2</span> == <span class="number">0</span> &#125; </span><br><span class="line"><span class="keyword">assert</span> isEven(<span class="number">3</span>) == <span class="literal">false</span> </span><br><span class="line"><span class="keyword">assert</span> isEven.call(<span class="number">2</span>) == <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ===============================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无参闭包</span></span><br><span class="line"><span class="keyword">def</span> run(Closure closure)&#123; </span><br><span class="line">    println(<span class="string">"run start..."</span>)</span><br><span class="line">    closure() println(<span class="string">"run end..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run &#123;</span><br><span class="line">    println <span class="string">"running......"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参闭包</span></span><br><span class="line"><span class="keyword">def</span> caculate(Closure closure)&#123;</span><br><span class="line">    <span class="keyword">def</span> num1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">def</span> num2=<span class="number">3</span>; </span><br><span class="line">    println(<span class="string">"caculate start..."</span>)</span><br><span class="line">    closure(num1,num2) </span><br><span class="line">    println(<span class="string">"caculate end..."</span>)</span><br><span class="line">&#125;</span><br><span class="line">caculate &#123;x,y -&gt; println <span class="string">"计算结果为：$x+$y=$&#123;x+y&#125;"</span>&#125; <span class="comment">//在build.gradle文件中我们见到的很多都是闭包格式的。</span></span><br></pre></td></tr></table></figure><h2 id="4、Gradle创建工程">4、Gradle创建工程</h2><h3 id="4-1-创建">4.1 创建</h3><p>创建项目时，选择Build System为Gradle，DSL为Groovy；之后修改当前项目使用本地安装的gradle：可以加快下载项目依赖jar 包的速度【配置了私服地址】(在Settings→Build,Execution→Build Tools→Gradle中配置本地)</p><p><strong>注意事项</strong></p><ul><li><p>在Terminal 中执行以gradlew 开头命令和操作图形化的IDEA 使用Gradle 版本不一定是同一个版本；Terminal中以gradlew开头指令用的是Wrapper规定的gradle版本，wrapper中规定版本默认和idea插件中规定的版本一致；而图形化的IDEA使用Gradle是本地安装的</p></li><li><p>目前只能是在创建项目时重新设置本地gradle，创建新项目需要重新去改</p></li><li><p> 我 们 在 <code>gradle.build</code> 文 件 添 加 依 赖 之 后 ， 这 些 依 赖 会 在 下 载 到<code>GRADLE_USER_HOME/caches/modules-2/files-2.1</code> 目录下面,所以这里的 GRADLE_USER_HOME 相当于 Gradle 的本地仓库</p></li></ul><p>对于低版本的war包部署，可以参考Gretty 官网地址：<a href="http://akhikhl.github.io/gretty-doc/index.html" target="_blank" rel="noopener" title="http://akhikhl.github.io/gretty-doc/index.html">http://akhikhl.github.io/gretty-doc/index.html</a></p><h3 id="4-2-测试">4.2 测试</h3><blockquote><p>测试任务自动检测并执行测试源集中的所有单元测试。测试执行完成后会生成一个报告。支持JUnit 和 TestNG 测试</p></blockquote><p>Gradle 对于Junit4.x 支持</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">group:</span> <span class="string">'junit'</span> ,<span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br><span class="line">test &#123;</span><br><span class="line">    useJUnit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gradle 对于Junit5.x 版本支持</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-api:5.8.1'</span> </span><br><span class="line">    testRuntimeOnly <span class="string">'org.junit.jupiter:junit-jupiter-engine:5.8.1'</span></span><br><span class="line">&#125;</span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：无论是 Junt4.x 版本还是Junit5.x 版本，我们只需在 build.gradle 目录下执行gradle test 指令，gradle 就会帮我们执行所有的加了@Test 注解的测试，并生成测试报告。</p><p>gradle 在junit 中的批量测试，可以设置包含或者排除某些特定测试</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test &#123;</span><br><span class="line">    enabled <span class="literal">true</span> </span><br><span class="line">    useJUnit() </span><br><span class="line">    include <span class="string">'com/**'</span></span><br><span class="line">    exclude <span class="string">'com/abc/**'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、Gradle进阶学习</h1><h2 id="1、生命周期">1、生命周期</h2><p>Gradle 项目的生命周期分为三大阶段:<code> Initialization -&gt; Configuration -&gt; Execution</code>. 每个阶段都有自己的职责</p><p><img src="https://img-blog.csdnimg.cn/567abb068c1345ada13d2df1c0c55fe1.jpeg#pic_center" alt="在这里插入图片描述"></p><ul><li><p><strong>Initialization 阶段</strong>主要目的是初始化构建，它又分为两个子过程，一个是执行 Init Script，另一个是执行 Setting Script</p></li><li><p>init.gradle 文件会在每个项目 build 之前被调用，用于做一些初始化的操作，它主要有如下作用：  </p><ul><li><p>配置内部的仓库信息（如公司的 maven 仓库信息）</p></li><li><p>配置一些全局属性；  </p></li><li><p>配置用户名及密码信息（如公司仓库的用户名和密码信息）</p></li></ul></li><li><p>Setting Script 则更重要, 它初始化了一次构建所参与的所有模块</p></li><li><p><strong>Configuration 阶段</strong>：这个阶段开始加载项目中所有模块的 Build Script。所谓 “加载” 就是执行 build.gradle 中的语句, 根据脚本代码创建对应的 task, 最终根据所有 task 生成由 Task 组成的有向无环图(Directed Acyclic Graphs)</p></li><li><p>Execution 阶段：这个阶段会根据上个阶段构建好的有向无环图，按着顺序执行 Task【Action 动作】</p></li></ul><h2 id="2、Settings文件">2、Settings文件</h2><ul><li><p>作用：主要是在项目初始化阶段确定一下引入哪些工程需要加入到项目构建中，为构建项目工程树做准备。  </p></li><li><p>工程树：gradle 中有工程树的概念，类似于 maven 中的project 与module。  </p></li><li><p>内容：里面主要定义了当前 gradle 项目及子 project 的项目名称  </p></li><li><p>位置：必须放在根工程目录下。  </p></li><li><p>名字：为settings.gradle 文件，不能发生变化  </p></li><li><p>对应实例：与 org.gradle.api.initialization.Settings 实例是一一对应的关系。每个项目只有一个settings 文件。  </p></li><li><p>关注：作为开发者我们只需要关注该文件中的include 方法即可。使用相对路径【 : 】引入子工程。  </p></li><li><p>一个子工程只有在setting 文件中配置了才会被 gradle 识别，这样在构建的时候才会被包含进去</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根工程项目名</span></span><br><span class="line">rootProject.name = <span class="string">'root'</span></span><br><span class="line"><span class="comment">//包含的子工程名称</span></span><br><span class="line">include <span class="string">'subject01'</span> </span><br><span class="line">include <span class="string">'subject02'</span> </span><br><span class="line">include <span class="string">'subject03'</span></span><br><span class="line"><span class="comment">//包含的子工程下的子工程名称</span></span><br><span class="line">include <span class="string">'subject01:subproject011'</span> </span><br><span class="line">include <span class="string">'subject01:subproject012'</span></span><br></pre></td></tr></table></figure><h2 id="3、Task">3、Task</h2><blockquote><p>项目实质上是 Task 对象的集合。一个 Task 表示一个逻辑上较为独立的执行过程，比如编译Java 源代码，拷贝文件， 打包Jar 文件，甚至可以是执行一个系统命令。另外，一个 Task 可以读取和设置Project 的Property 以完成特定的操作<br>可参考官方文档：<a href="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html">https://docs.gradle.org/current/userguide/tutorial_using_tasks.html</a></p></blockquote><h3 id="3-1-入门Demo">3.1 入门Demo</h3><p>在<code>build.gradle</code>编写一下测试，在文件所在的目录执行命令: <code>gradle -i A</code>。  </p><ul><li><p>task 的配置段是在配置阶段完成  </p></li><li><p>task 的doFirst、doLast 方法是执行阶段完成，并且doFirst 在doLast 执行之前执行。  </p></li><li><p>区分任务的<strong>配置段和任务的行为</strong>，任务的配置段在配置阶段执行，任务的行为在执行阶段执行</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task A &#123;</span><br><span class="line">    println <span class="string">"root taskA"</span> </span><br><span class="line">    doFirst()&#123;</span><br><span class="line">        println <span class="string">"root taskA doFirst"</span></span><br><span class="line">    &#125;</span><br><span class="line">    doLast()&#123;</span><br><span class="line">        println <span class="string">"root taskA doLast"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-任务的行为">3.2 任务的行为</h3><p>doFirst、doLast 两个方法可以在任务内部定义，也可以在任务外部定义</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> map=<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"><span class="comment">//action属性可以设置为闭包，设置task自身的行为</span></span><br><span class="line">map.put(<span class="string">"action"</span>,&#123;println <span class="string">"taskD.."</span>&#125;)</span><br><span class="line">task(map,<span class="string">"a"</span>)&#123;</span><br><span class="line">    description   <span class="string">'taskA description  '</span></span><br><span class="line">    group <span class="string">"atguigu"</span></span><br><span class="line">    <span class="comment">//在task内部定义doFirst、doLast行为</span></span><br><span class="line">    doFirst &#123;</span><br><span class="line">        <span class="keyword">def</span> name = <span class="string">'doFirst..'</span> </span><br><span class="line">        println name</span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="keyword">def</span> name = <span class="string">'doLast..'</span> </span><br><span class="line">        println name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在task外部定义doFirst、doLast行为</span></span><br><span class="line">a.doFirst &#123;</span><br><span class="line">    println it.description</span><br><span class="line">&#125;</span><br><span class="line">a.doLast &#123;</span><br><span class="line">    println it.group</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">//taskA description </span></span><br><span class="line"><span class="comment">//doFirst..</span></span><br><span class="line"><span class="comment">//taskD..</span></span><br><span class="line"><span class="comment">//doLast..</span></span><br><span class="line"><span class="comment">//atguigu</span></span><br></pre></td></tr></table></figure><p><strong>底层原理分析</strong></p><p>无论是定义<strong>任务自身的 action</strong>,还是添加的<strong>doLast</strong>、<strong>doFirst</strong> 方法，其实底层都被放入到一个Action 的List 中了，最初这个 action List 是空的，当我们设置了 action【任务自身的行为】，它先将action 添加到列表中，此时列表中只有一个action，<strong>后续执行doFirst 的时候doFirst 在action 前面添加，执行 doLast 的时候doLast 在action 后面添加</strong>。doFirst 永远添加在actions List 的第一位，保证添加的Action 在现有的 action List 元素的最前面；doLast 永远都是在action List 末尾添加，保证其添加的Action 在现有的action List 元素的最后面。一个往前面添加，一个往后面添加，<strong>最后这个action List 就按顺序形成了doFirst、doSelf、doLast 三部分的 Actions，就达到 doFirst、doSelf、doLast 三部分的 Actions 顺序执行的目的</strong>。  注意其中&lt;&lt;代表doLast，在gradle5.x 版本之后就废弃</p><h3 id="3-3-任务的依赖">3.3 任务的依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数方式依赖</span></span><br><span class="line">task A &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"TaskA.."</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task <span class="string">'B'</span> &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"TaskB.."</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数方式依赖: dependsOn后面用冒号</span></span><br><span class="line">task <span class="string">'C'</span>(<span class="string">dependsOn:</span> [<span class="string">'A'</span>, <span class="string">'B'</span>]) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"TaskC.."</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//内部依赖</span></span><br><span class="line"><span class="comment">//参数方式依赖</span></span><br><span class="line">task <span class="string">'C'</span> &#123;</span><br><span class="line">    <span class="comment">//内部依赖：dependsOn后面用 = 号</span></span><br><span class="line">    dependsOn= [A,B] </span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"TaskC.."</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//外部依赖:可变参数,引号可加可不加</span></span><br><span class="line">C.dependsOn(B,<span class="string">'A'</span>)</span><br></pre></td></tr></table></figure><ul><li><p>当一个 Task 依赖多个Task 的时候，被依赖的Task 之间如果没有依赖关系，那么它们的执行顺序是随机的，并无影响</p></li><li><p>重复依赖的任务只会执行一次</p></li></ul><h3 id="3-4-任务执行">3.4 任务执行</h3><blockquote><p>参考：<a href="https://docs.gradle.org/current/userguide/command_line_interface.html" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_executing_tasks">https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_executing_tasks</a></p></blockquote><p><strong>任务执行语法：gradle [taskName…] [–option-name…]</strong></p><table><thead><tr><th><strong>分类</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td><strong>常见的任务（*）</strong></td><td><strong>gradle build</strong>: 构建项目:编译、测试、打包等操作  <strong>gradle run</strong> :运行一个服务,需要application 插件支持，并且指定了主启动类才能运行  <strong>gradle clean</strong>: 请求当前项目的 build 目录  <strong>gradle init</strong> : 初始化 gradle 项目使用  <strong>gradle wrapper</strong>:生成wrapper 文件夹的。  <strong>gradle wrapper</strong> 升级wrapper 版本号：gradle wrapper --gradle-version=4.4  gradle wrapper --gradle-version 5.2.1 --distribution-type all :关联源码用</td></tr><tr><td>项目报告相关任务</td><td><strong>gradle projects</strong> : 列出所选项目及子项目列表，以层次结构的形式显示  <strong>gradle tasks</strong>: 列出所选项目【当前 project,不包含父、子】的已分配给任务组的那些任务gradle tasks --all :列出所选项目的所有任务。  gradle tasks --group=“build setup”:列出所选项目中指定分组中的任务。  gradle help --task someTask :显示某个任务的详细信息  gradle dependencies :查看整个项目的依赖信息，以依赖树的方式显示  gradle properties 列出所选项目的属性列表</td></tr><tr><td>调试相关选项</td><td>-h,–help: 查看帮助信息  -v, --version:打印 Gradle、 Groovy、 Ant、 JVM 和操作系统版本信息。  -S, --full-stacktrace:打印出所有异常的完整(非常详细)堆栈跟踪信息。  -s,–stacktrace: 打印出用户异常的堆栈跟踪(例如编译错误)。  -Dorg.gradle.daemon.debug=true: 调试 Gradle 守护进程。  -Dorg.gradle.debug=true:调试 Gradle 客户端(非 daemon)进程。  -Dorg.gradle.debug.port=(port number):指定启用调试时要侦听的端口号。默认值为 5005。</td></tr><tr><td>性能选项:【备注: 在<strong>gradle.properties</strong>中指定这些选项中的许多选项，因此不需要命令行标志】</td><td>–build-cache, --no-build-cache： 尝试重用先前版本的输出。默认关闭(off)。  –max-workers: 设置 Gradle 可以使用的woker 数。默认值是处理器数。  -parallel, --no-parallel: 并行执行项目。有关此选项的限制，请参阅并行项目执行。默认设置为关闭(off)</td></tr><tr><td>守护进程选项，也可以配置在<strong>gradle.properties</strong>中</td><td>–daemon, --no-daemon: 使用 Gradle 守护进程运行构建。默认是on  –foreground:在前台进程中启动 Gradle 守护进程。  -Dorg.gradle.daemon.idletimeout=(number of milliseconds):  Gradle Daemon 将在这个空闲时间的毫秒数之后停止自己。默认值为 10800000(3 小时)。</td></tr><tr><td>日志选项</td><td>-Dorg.gradle.logging.level=(quiet,warn,lifecycle,info,debug):  通过 Gradle 属性设置日志记录级别。  -q, --quiet: 只能记录错误信息  -w, --warn: 设置日志级别为 warn  -i, --info: 将日志级别设置为 info  -d, --debug:登录调试模式(包括正常的堆栈跟踪)</td></tr><tr><td>其它(*)</td><td><strong>-x</strong>:-x 等价于: --exclude-task : 常见gradle -x test clean build  <strong>–rerun-tasks</strong>: 强制执行任务，忽略up-to-date ,常见gradle build --rerun-tasks  <strong>–continue</strong>: 忽略前面失败的任务,继续执行,而不是在遇到第一个失败时立即停止执行。每个遇到的故障都将在构建结束时报告，常见：gradle build --continuegradle init --type pom :将maven 项目转换为gradle 项目(根目录执行)  gradle [taskName] :执行自定义任务</td></tr></tbody></table><p>前面提到的Gradle 指令本质:一个个的task[任务]，Gradle 中所有操作都是基于任务完成的。</p><p><img src="https://img-blog.csdnimg.cn/a17badc783b9424195df3d1e1dfd54fd.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-5-任务定义方式">3.5 任务定义方式</h3><p>任务定义方式，总体分为两大类:一种是<strong>通过 Project 中的task()方法</strong>,另一种是通过tasks 对象的 create 或者register 方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">task(<span class="string">'A'</span>, &#123;<span class="comment">//任务名称,闭包都作为参数println "taskA..."</span></span><br><span class="line">&#125;)</span><br><span class="line">task(<span class="string">'B'</span>) &#123;<span class="comment">//闭包作为最后一个参数可以直接从括号中拿出来println "taskB..."</span></span><br><span class="line">&#125;</span><br><span class="line">task C &#123;<span class="comment">//groovy语法支持省略方法括号:上面三种本质是一种println "taskC..."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(); map.put(<span class="string">"action"</span>, &#123; println <span class="string">"taskD.."</span> &#125;) <span class="comment">//action属性可以设置为闭包task(map,"D");</span></span><br><span class="line">tasks.create(<span class="string">'E'</span>) &#123;<span class="comment">//使用tasks的create方法println "taskE.."</span></span><br><span class="line">&#125;</span><br><span class="line">tasks.register(<span class="string">'f'</span>) &#123; <span class="comment">//注：register执行的是延迟创建。也即只有当task被需要使用的时候才会被创建。</span></span><br><span class="line">  println <span class="string">"taskF  "</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以在定义任务的同时指定任务的属性</p><ul><li><p>type：基于一个存在的Task来创建，和继承类似，默认值DefaultTask</p></li><li><p>overwrite：是否替换存在的Task，这个和type配合使用，默认值false</p></li><li><p>dependsOn：用户配置任务的依赖，默认值[]</p></li><li><p>action：添加到任务中的一个Action或者一个闭包，默认值null</p></li><li><p>description：用于配置任务的描述，默认值null</p></li><li><p>group：用于配置任务的分组，默认值null</p></li></ul><p>在定义任务时也可以给任务分配属性：定义任务的时候可以直接指定任务属性，也可以给已有的任务动态分配属性</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①.F是任务名，前面通过具名参数给map的属性赋值,以参数方式指定任务的属性信息</span></span><br><span class="line">task(<span class="string">group:</span> <span class="string">"atguigu"</span>, <span class="string">description:</span> <span class="string">"this is task B"</span>, <span class="string">"F"</span>)</span><br><span class="line"><span class="comment">//②.H是任务名，定义任务的同时，在内部直接指定属性信息</span></span><br><span class="line">task(<span class="string">"H"</span>) &#123;</span><br><span class="line">    group(<span class="string">"atguigu"</span>) description(<span class="string">"this is the task H"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//③.Y是任务名，给已有的任务 在外部直接指定属性信息</span></span><br><span class="line">task <span class="string">"y"</span> &#123;&#125;</span><br><span class="line">y.group = <span class="string">"atguigu"</span></span><br><span class="line">clean.group(<span class="string">"atguigu"</span>) <span class="comment">//案例：给已有的clean任务重新指定组信息</span></span><br></pre></td></tr></table></figure><h3 id="3-6-任务类型">3.6 任务类型</h3><blockquote><p><a href="https://docs.gradle.org/current/dsl/index.html" target="_blank" rel="noopener" title="https://docs.gradle.org/current/dsl/index.html">https://docs.gradle.org/current/dsl/index.html</a></p></blockquote><p>我们定义的task 都是DefaultTask 类型的，如果要完成某些具体的操作完全需要我们自己去编写gradle 脚本，势必有些麻烦，那有没有一些现成的任务类型可以使用呢？有的，Gradle 官网给出了一些现成的任务类型帮助我们快速完成想要的任务，我们只需要在创建任务的时候，指定当前任务的类型即可，然后即可使用这种类型中的属性和API 方法了</p><table><thead><tr><th><strong>常见任务类型</strong></th><th><strong>该类型任务的作用</strong></th></tr></thead><tbody><tr><td>Delete</td><td>删除文件或目录</td></tr><tr><td>Copy</td><td>将文件复制到目标目录中。此任务还可以在复制时重命名和筛选文件。</td></tr><tr><td>CreateStartScripts</td><td>创建启动脚本</td></tr><tr><td>Exec</td><td>执行命令行进程</td></tr><tr><td>GenerateMavenPom</td><td>生成 Maven 模块描述符(POM)文件。</td></tr><tr><td>GradleBuild</td><td>执行 Gradle 构建</td></tr><tr><td>Jar</td><td>组装 JAR 归档文件</td></tr><tr><td>JavaCompile</td><td>编译 Java 源文件</td></tr><tr><td>Javadoc</td><td>为 Java 类 生 成 HTML API 文 档</td></tr><tr><td>PublishToMavenRepository</td><td>将 MavenPublication 发布到 mavenartifactrepostal。</td></tr><tr><td>Tar</td><td>组装 TAR 存档文件</td></tr><tr><td>Test</td><td>执行 JUnit (3.8.x、4.x 或 5.x)或 TestNG 测试。</td></tr><tr><td>Upload</td><td>将 Configuration 的构件上传到一组存储库。</td></tr><tr><td>War</td><td>组装 WAR 档案。</td></tr><tr><td>Zip</td><td>组装 ZIP 归档文件。默认是压缩 ZIP 的内容</td></tr></tbody></table><p>举例在命令行执行 gradle myClean 发现就可以将当前project 的 build 目录删除</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasks.register(<span class="string">'myClean'</span>, Delete) &#123; </span><br><span class="line">  delete buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 Task 类型</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> myTask = task MyDefinitionTask(<span class="string">type:</span> CustomTask) </span><br><span class="line">myTask.doFirst() &#123;</span><br><span class="line">  println <span class="string">"task 执行之前 执行的 doFirst方法"</span></span><br><span class="line">&#125;</span><br><span class="line">myTask.doLast() &#123;</span><br><span class="line">  println <span class="string">"task 执行之后 执行的 doLast方法"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTask</span> <span class="keyword">extends</span> <span class="title">DefaultTask</span> &#123;</span></span><br><span class="line"><span class="comment">//@TaskAction表示Task本身要执行的方法@TaskAction</span></span><br><span class="line">  <span class="keyword">def</span> doSelf() &#123;</span><br><span class="line">    println <span class="string">"Task 自身 在执行的in doSelf"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-任务的执行顺序与动态分配">3.7 任务的执行顺序与动态分配</h3><blockquote><p>官网：<a href="https://docs.gradle.org/current/dsl/org.gradle.api.Task.html" target="_blank" rel="noopener" title="https://docs.gradle.org/current/dsl/org.gradle.api.Task.html">https://docs.gradle.org/current/dsl/org.gradle.api.Task.html</a></p></blockquote><p>在 Gradle 中, 有三种方式可以指定 Task 执行顺序：  </p><ul><li><p>dependsOn 强依赖方式  </p></li><li><p>通过 Task 输入输出  </p></li><li><p>通过 API 指定执行顺序</p></li></ul><p>gradle可以使用它在循环中注册同一类型的多个任务</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建 4 个任务,但是任务 0 必须依赖于任务 2 和 3,那么代表任务 2 和 3 需要在任务 0 之前优先加载。</span></span><br><span class="line"><span class="number">4.</span>times &#123; counter -&gt;</span><br><span class="line">    tasks.register(<span class="string">"task$counter"</span>) &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println <span class="string">"I'm task number $counter"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">tasks.named(<span class="string">'task0'</span>) &#123; dependsOn(<span class="string">'task2'</span>, <span class="string">'task3'</span>) &#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-任务的关闭、开启与超时">3.8 任务的关闭、开启与超时</h3><p>每个任务都有一个 timeout 可用于限制其执行时间的属性。当任务达到超时时，其任务执行线程将被中断。该任务将被标记为失败。终结器任务仍将运行。如果 --continue 使用，其他任务可以在此之后继续运行。不响应中断的任务无法超时。Gradle 的所有内置任务均会及时响应超时</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个任务都有一个 enabled 默认为的标志 true。将其设置为 false 阻止执行任何任务动作。禁用的任务将标记为“跳过”。</span></span><br><span class="line">task disableMe &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">'This task is Executing...'</span></span><br><span class="line">    &#125;</span><br><span class="line">    enabled(<span class="literal">true</span>)<span class="comment">//直接设置任务开启，默认值为true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//disableMe.enabled = false //设置关闭任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ===========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在控制台使用: gradle a b 测试会发现执行a 的时候,由于a 执行超时，抛出异常，所以没有继续往下执行【b 也没执行】。</span></span><br><span class="line"><span class="comment">//然后在控制台使用: gradle a b –continue,测试会发现a 虽然执行失败，但是 b 还是执行了。</span></span><br><span class="line">task a() &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">        println <span class="string">"当前任务a执行了"</span></span><br><span class="line">    &#125;</span><br><span class="line">    timeout = Duration.ofMillis(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">task b() &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"当前任务b执行了"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-任务的查找">3.9 任务的查找</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">task atguigu &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"让天下没有难学的技术：尚硅谷"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据任务名查找</span></span><br><span class="line">tasks.findByName(<span class="string">"atguigu"</span>).doFirst(&#123;println <span class="string">"尚硅谷校区1：北京  "</span>&#125;)</span><br><span class="line">tasks.getByName(<span class="string">"atguigu"</span>).doFirst(&#123;println <span class="string">"尚硅谷校区2：深圳  "</span>&#125;)</span><br><span class="line"><span class="comment">//根据任务路径查找【相对路径】</span></span><br><span class="line">tasks.findByPath(<span class="string">":atguigu"</span>).doFirst(&#123;println <span class="string">"尚硅谷校区3：上海    "</span>&#125;)</span><br><span class="line">tasks.getByPath(<span class="string">":atguigu"</span>).doFirst(&#123;println <span class="string">"尚硅谷校区4：武汉  "</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-10-任务的规则">3.10 任务的规则</h3><p>使用 gradle abc hello 进行测试，此时当 abc 任务不存在时，也不会报异常【不中断执行】而是提示自定义的规则信息，继续执行 hello 任务。此外，它还可以根据不同的规则动态创建需要的任务等情况</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">'hello 尚硅谷的粉丝们'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.addRule(<span class="string">"对该规则的一个描述，便于调试、查看等"</span>)&#123; String taskName -&gt; task(taskName) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"该$&#123;taskName&#125;任务不存在，请查证后再执行"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-11-任务的-onlyIf-断言">3.11 任务的 onlyIf 断言</h3><p>断言就是一个条件表达式。Task 有一个 onlyIf 方法。它接受一个闭包作为参数，如果该闭包返回 true 则该任务执行， 否则跳过。这有很多用途，比如控制程序哪些情况下打什么包，什么时候执行单元测试，什么情况下执行单元测试的时候不执行网络测试等</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">'hello 尚硅谷的粉丝们'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello.onlyIf &#123; !project.hasProperty(<span class="string">'fensi'</span>) &#125;</span><br></pre></td></tr></table></figure><p>测试：通过-P 为Project 添加fensi 属性 <code>gradle hello -Pfensi</code></p><h3 id="3-12-默认任务">3.12 默认任务 </h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">defaultTasks <span class="string">'myClean'</span>, <span class="string">'myRun'</span> </span><br><span class="line">tasks.register(<span class="string">'myClean'</span>) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">'Default Cleaning!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">tasks.register(<span class="string">'myRun'</span>) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">'Default Running!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">tasks.register(<span class="string">'other'</span>) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"I'm not a default task!"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gradle -q</span></span><br></pre></td></tr></table></figure><h2 id="4、Gradle-中的文件操作">4、Gradle 中的文件操作</h2><h3 id="4-1-本地文件">4.1 本地文件</h3><p>使用 <code>Project.file(java.lang.Object)</code>方法，通过指定文件的相对路径或绝对路径来对文件的操作,其中相对路径为相对当前project**[根project 或者子project]**的目录。其实使用 <code>Project.file(java.lang.Object)</code>方法创建的 File 对象就是 Java 中的 File 对象，我们可以使用它就像在 Java 中使用一样</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用相对路径</span></span><br><span class="line">File configFile = file(<span class="string">'src/conf.xml'</span>)</span><br><span class="line">configFile.createNewFile();</span><br><span class="line"><span class="comment">// 使用绝对路径</span></span><br><span class="line">configFile = file(<span class="string">'D:\\conf.xml'</span>)</span><br><span class="line">println(configFile.createNewFile())</span><br><span class="line"><span class="comment">// 使用一个文件对象</span></span><br><span class="line">configFile = <span class="keyword">new</span> File(<span class="string">'src/config.xml'</span>)</span><br><span class="line">println(configFile.exists())</span><br></pre></td></tr></table></figure><h3 id="4-2-文件集合">4.2 文件集合</h3><p>文 件 集 合 就 是 一 组 文 件 的 列 表 , 在 Gradle 中 , 文 件 集 合 用 FileCollection 接 口 表 示 ，我 们 可 以 使 用 <code>Project.files(java.lang.Object[])</code>方法来获得一个文件集合对象</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> collection = files(<span class="string">'src/test1.txt'</span>, <span class="keyword">new</span> File(<span class="string">'src/test2.txt'</span>), [<span class="string">'src/test3.txt'</span>, <span class="string">'src/test4.txt'</span>])</span><br><span class="line">collection.forEach() &#123; File it -&gt;</span><br><span class="line">    it.createNewFile() <span class="comment">//创建该文件</span></span><br><span class="line">    println it.name <span class="comment">//输出文件名</span></span><br><span class="line">&#125;</span><br><span class="line">Set set1 = collection.files <span class="comment">// 把文件集合转换为java中的Set类型</span></span><br><span class="line">Set set2 = collection <span class="keyword">as</span> Set</span><br><span class="line">List list = collection <span class="keyword">as</span> List<span class="comment">//  把文件集合转换为java中的List类型</span></span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> list) &#123;</span><br><span class="line">    println item.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> union = collection + files(<span class="string">'src/test5.txt'</span>) <span class="comment">// 添加或者删除一个集合</span></span><br><span class="line"><span class="keyword">def</span> minus = collection - files(<span class="string">'src/test3.txt'</span>)</span><br><span class="line">union.forEach() &#123; File it -&gt;</span><br><span class="line">    println it.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-文件树">4.3 文件树</h3><p>文件树是有层级结构的文件集合,一个文件树它可以代表一个目录结构或一 ZIP 压缩包中的内容结构。文件树是从文件集合继承过来的,所以文件树具有文件集合所有的功能。我们可以使用 <code>Project.fileTree(java.util.Map)</code>方法来创建文件树对象， 还可以使用过虑条件来包含或排除相关文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> tree = fileTree(<span class="string">dir:</span> <span class="string">'src/main'</span>, <span class="string">include:</span> <span class="string">'**/*.java'</span>)</span><br><span class="line">tree = fileTree(<span class="string">'src/main'</span>) &#123;</span><br><span class="line">    include <span class="string">'**/*.java'</span></span><br><span class="line">&#125;</span><br><span class="line">tree = fileTree(<span class="string">dir:</span> <span class="string">'src/main'</span>, <span class="string">include:</span> <span class="string">'**/*.java'</span>) <span class="comment">//第三种方式:通过路径和闭包创建文件树：具名参数给map传值</span></span><br><span class="line">tree = fileTree(<span class="string">dir:</span> <span class="string">'src/main'</span>, <span class="string">includes:</span> [<span class="string">'**/*.java'</span>, <span class="string">'**/*.xml'</span>, <span class="string">'**/*.txt'</span>], <span class="string">exclude:</span> <span class="string">'**/*test*/**'</span>)</span><br><span class="line">tree.each &#123; File file -&gt; <span class="comment">// 遍历文件树的所有文件</span></span><br><span class="line">    println file</span><br><span class="line">    println file.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-文件拷贝">4.4 文件拷贝</h3><p>我们可以使用 Copy 任务来拷贝文件，通过它可以过虑指定拷贝内容，还能对文件进行重命名操作等。Copy 任务必须指定一组需要拷贝的文件和拷贝到的目录，这里使用<code>CopySpec.from(java.lang.Object[])</code>方法指定原文件；使用<code>CopySpec.into(java.lang.Object)</code>方法指定目标目录</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">task copyTask(<span class="string">type:</span> Copy) &#123;</span><br><span class="line">    from <span class="string">'src/main/resources'</span></span><br><span class="line">    into <span class="string">'build/config'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>from()方法接受的参数和文件集合时files()一样。当参数为一个目录时，该目录下所有的文件都会被拷贝到指定目录下（目录自身不会被拷贝）；当参数为一个文件时，该文件会被拷贝到指定目录；如果参数指定的文件不存在，就会被忽略； 当参数为一个 Zip 压缩文件，该压缩文件的内容会被拷贝到指定目录。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">task copyTask(<span class="string">type:</span> Copy) &#123;</span><br><span class="line"><span class="comment">// 拷贝src/main/webapp目录下所有的文件</span></span><br><span class="line">    from <span class="string">'src/main/webapp'</span></span><br><span class="line"><span class="comment">// 拷贝单独的一个文件</span></span><br><span class="line">    from <span class="string">'src/staging/index.html'</span></span><br><span class="line"><span class="comment">// 从Zip压缩文件中拷贝内容</span></span><br><span class="line">    from zipTree(<span class="string">'src/main/assets.zip'</span>)</span><br><span class="line"><span class="comment">// 拷贝到的目标目录</span></span><br><span class="line">    into <span class="string">'build/explodedWar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在拷贝文件的时候还可以添加过虑条件来指定包含或排除的文件</span></span><br><span class="line">task copyTaskWithPatterns(<span class="string">type:</span> Copy) &#123;</span><br><span class="line">    from <span class="string">'src/main/webapp'</span></span><br><span class="line">    into <span class="string">'build/explodedWar'</span></span><br><span class="line">    include <span class="string">'**/*.html'</span></span><br><span class="line">    include <span class="string">'**/*.jsp'</span></span><br><span class="line">    exclude &#123; details -&gt; details.file.name.endsWith(<span class="string">'.html'</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在拷贝文件的时候还可以对文件进行重命名操作</span></span><br><span class="line">task rename(<span class="string">type:</span> Copy) &#123;</span><br><span class="line">    from <span class="string">'src/main/webapp'</span></span><br><span class="line">    into <span class="string">'build/explodedWar'</span></span><br><span class="line"><span class="comment">// 使用一个闭包方式重命名文件</span></span><br><span class="line">    rename &#123; String fileName -&gt;</span><br><span class="line">        fileName.replace(<span class="string">'-staging-'</span>, <span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝</span></span><br><span class="line">task copyMethod &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        copy &#123;</span><br><span class="line">            from <span class="string">'src/main/webapp'</span></span><br><span class="line">            into <span class="string">'build/explodedWar'</span></span><br><span class="line">            include <span class="string">'**/*.html'</span></span><br><span class="line">            include <span class="string">'**/*.jsp'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行gradle build即可</span></span><br><span class="line">copy &#123;</span><br><span class="line"><span class="comment">//相对路径或者绝对路径</span></span><br><span class="line">    from file(<span class="string">'src/main/resources/ddd.txt'</span>) <span class="comment">//file也可以换成new File()</span></span><br><span class="line">    into <span class="keyword">this</span>.buildDir.absolutePath</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-文件归档">4.5 文件归档</h3><blockquote><p>官方文档：<a href="https://docs.gradle.org/current/userguide/working_with_files.html" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/working_with_files.html">https://docs.gradle.org/current/userguide/working_with_files.html</a></p></blockquote><p>通常一个项目会有很多的Jar 包，我们希望把项目打包成一个WAR，ZIP 或TAR 包进行发布，这时我们就可以使用Zip，Tar，Jar，War 和Ear 任务来实现，不过它们的用法都一样，所以在这里我只介绍Zip 任务的示例。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">version=<span class="number">1.0</span></span><br><span class="line">task myZip(<span class="string">type:</span> Zip) &#123;</span><br><span class="line">    from <span class="string">'src/main'</span></span><br><span class="line">    into <span class="string">'build'</span> <span class="comment">//保存到build目录中</span></span><br><span class="line">    baseName = <span class="string">'myGame'</span></span><br><span class="line">&#125;</span><br><span class="line">println myZip.archiveName</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Project.zipTree(java.lang.Object)和 Project.tarTree(java.lang.Object)方法来创建访问 Zip 压缩包的文件树对象</span></span><br><span class="line"><span class="comment">// 使用zipTree</span></span><br><span class="line">FileTree zip = zipTree(<span class="string">'someFile.zip'</span>)</span><br><span class="line"><span class="comment">// 使用tarTree</span></span><br><span class="line">FileTree tar = tarTree(<span class="string">'someFile.tar'</span>)</span><br></pre></td></tr></table></figure><h2 id="5、Dependencies">5、Dependencies</h2><h3 id="5-1-依赖方式">5.1 依赖方式</h3><p>Gradle 中的依赖分别为直接依赖，项目依赖，本地jar 依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  <span class="comment">//依赖当前项目下的某个模块[子工程]</span></span><br><span class="line">  implementation project(<span class="string">':subject01'</span>)</span><br><span class="line">  <span class="comment">//直接依赖本地的某个jar文件</span></span><br><span class="line">  implementation files(<span class="string">'libs/foo.jar'</span>, <span class="string">'libs/bar.jar'</span>)</span><br><span class="line">  <span class="comment">//配置某文件夹作为依赖项</span></span><br><span class="line">  implementation fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">  <span class="comment">//直接依赖</span></span><br><span class="line">  implementation <span class="string">'org.apache.logging.log4j:log4j:2.17.2'</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line">  <span class="comment">//完整写法</span></span><br><span class="line">  <span class="comment">//implementation group: 'org.apache.logging.log4j', name: 'log4j', version: '2.17.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行 <strong>build 命令时</strong>，gradle 就会去配置的依赖仓库中下载对应的 Jar，并应用到项目中</p><h3 id="5-2-依赖类型">5.2 依赖类型</h3><blockquote><p><a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin:" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin:">https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin:</a> 各个依赖范围的关系和说明<br><a href="https://docs.gradle.org/current/userguide/upgrading_version_6.html#sec:configuration_removal" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/upgrading_version_6.html#sec:configuration_removal">https://docs.gradle.org/current/userguide/upgrading_version_6.html#sec:configuration_removal</a> : 依赖范围升级和移除<br><a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin%EF%BC%9AAPI" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin：API">https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin：API</a> 和implemention 区别<br><a href="https://docs.gradle.org/current/userguide/java_plugin.html#java_plugin:" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/java_plugin.html#java_plugin:">https://docs.gradle.org/current/userguide/java_plugin.html#java_plugin:</a> 执行java 命令时都使用了哪些依赖范围的依</p></blockquote><p>类似于 Maven 的 scope 标签，gradle 也提供了依赖的类型</p><table><thead><tr><th>compileOnly</th><th>由<strong>java插件</strong>提供，曾短暂的叫provided,后续版本已经改成了compileOnly,适用于编译期需要而不需要打包的情  况</th></tr></thead><tbody><tr><td>runtimeOnly</td><td>由 java 插件提供,只在运行期有效,编译时不需要,<strong>比如mysql 驱动包</strong>。取代老版本中被移除的 runtime</td></tr><tr><td>implementation</td><td>由 java 插件提供,针对源码[src/main 目录] ,在编译、运行时都有效,取代老版本中被移除的 compile</td></tr><tr><td>testCompileOnly</td><td>由 <strong>java 插件</strong>提供,用于编译测试的依赖项，运行时不需要</td></tr><tr><td>testRuntimeOnly</td><td>由 <strong>java 插件</strong>提供,只在测试运行时需要，而不是在测试编译时需要,取代老版本中被移除的testRuntime</td></tr><tr><td>testImplementation</td><td>由 java 插件提供,<strong>针对测试代码[src/test 目录]</strong> 取代老版本中被移除的testCompile</td></tr><tr><td>providedCompile</td><td><strong>war 插件</strong>提供支持，编译、测试阶段代码需要依赖此类jar 包，而运行阶段容器已经提供了相应的支持，所  以无需将这些文件打入到war 包中了;<strong>例如servlet-api.jar、jsp-api.jar</strong></td></tr><tr><td>compile</td><td>编译范围依赖在所有的 classpath 中可用，同时它们也会被打包。在<strong>gradle 7.0 已经移除</strong></td></tr><tr><td>runtime</td><td>runtime 依赖在运行和测试系统的时候需要,在编译的时候不需要,比如mysql 驱动包。在 gradle 7.0 已经移除</td></tr><tr><td>api</td><td><strong>java-library 插件</strong>提供支持,这些依赖项可以传递性地导出给使用者，用于编译时和运行时。取代老版本中被  移除的 compile</td></tr><tr><td>compileOnlyApi</td><td>java-library 插件提供支持,在声明模块和使用者在编译时需要的依赖项，但在运行时不需要。</td></tr></tbody></table><h3 id="5-3-api-与implementation-区别">5.3 api 与implementation 区别</h3><table><thead><tr><th></th><th>api</th><th>implementation</th></tr></thead><tbody><tr><td>编译时</td><td>能进行依赖传递，底层变，全部都要变、编译速度慢</td><td>不能进行依赖传递，底层变不用全部都要变、编译速度快</td></tr><tr><td>运行时</td><td>运行时会加载，所有模块的class都要被加载</td><td>运行时会加载，所有模块的class都要被加载</td></tr><tr><td>应用场景</td><td>适用于多模块依赖，避免重复依赖模块</td><td>多数情况下使用implementation</td></tr></tbody></table><p>api 的适用场景是多module 依赖，moduleA 工程依赖了 module B，同时module B 又需要依赖了 module C，modelA 工程也需要去依赖 module C；这个时候避免重复依赖module，可以使用 module B api 依赖的方式去依赖module C，modelA 工程只需要依赖 moduleB 即可。  </p><p>总之，<strong>除非涉及到多模块依赖，为了避免重复依赖，咱们会使用api，其它情况我们优先选择implementation，拥有大量的api 依赖项会显著增加构建时间</strong>。</p><h3 id="5-4-依赖冲突及解决方案">5.4 依赖冲突及解决方案</h3><p>依赖冲突是指&quot;在编译过程中, 如果存在某个依赖的多个版本, 构建系统应该选择哪个进行构建的问题&quot;</p><p>默认下，<strong>Gradle 会使用最新版本的jar 包【考虑到新版本的jar 包一般都是向下兼容的】</strong>，实际开发中，还是建议使用官方自带的这种解决方案。当然除此之外，Gradle 也为我们提供了一系列的解决依赖冲突的方法: <strong>exclude移除一个依赖，不允许依赖传递，强制使用某个版本</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Exclude 排除某个依赖</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-api:5.8.1'</span></span><br><span class="line">    testRuntimeOnly <span class="string">'org.junit.jupiter:junit-jupiter-engine:5.8.1'</span></span><br><span class="line">    implementation(<span class="string">'org.hibernate:hibernate-core:3.6.3.Final'</span>)&#123;</span><br><span class="line">        <span class="comment">//排除某一个库(slf4j)依赖:如下三种写法都行</span></span><br><span class="line">        exclude <span class="string">group:</span> <span class="string">'org.slf4j'</span></span><br><span class="line">        exclude <span class="string">module:</span> <span class="string">'slf4j-api'</span></span><br><span class="line">        exclude <span class="string">group:</span> <span class="string">'org.slf4j'</span>,<span class="string">module:</span> <span class="string">'slf4j-api'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排除之后,使用手动的引入即可。</span></span><br><span class="line">    implementation <span class="string">'org.slf4j:slf4j-api:1.4.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不允许依赖传递</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-api:5.8.1'</span></span><br><span class="line">    testRuntimeOnly <span class="string">'org.junit.jupiter:junit-jupiter-engine:5.8.1'</span></span><br><span class="line">    implementation(<span class="string">'org.hibernate:hibernate-core:3.6.3.Final'</span>)&#123;</span><br><span class="line">        <span class="comment">//不允许依赖传递，一般不用</span></span><br><span class="line">        transitive(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//排除之后,使用手动的引入即可</span></span><br><span class="line">    implementation <span class="string">'org.slf4j:slf4j-api:1.4.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强制使用某个版本</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-api:5.8.1'</span></span><br><span class="line">    testRuntimeOnly <span class="string">'org.junit.jupiter:junit-jupiter-engine:5.8.1'</span></span><br><span class="line">    implementation(<span class="string">'org.hibernate:hibernate-core:3.6.3.Final'</span>)</span><br><span class="line">    <span class="comment">//强制使用某个版本!!【官方建议使用这种方式】</span></span><br><span class="line">    implementation(<span class="string">'org.slf4j:slf4j-api:1.4.0!!'</span>)</span><br><span class="line">    <span class="comment">//这种效果和上面那种一样,强制指定某个版本</span></span><br><span class="line">    implementation(<span class="string">'org.slf4j:slf4j-api:1.4.0'</span>)&#123;</span><br><span class="line">        version&#123;</span><br><span class="line">            strictly(<span class="string">"1.4.0"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以先查看当前项目中到底有哪些依赖冲突</span></span><br><span class="line"><span class="comment">//下面我们配置，当Gradle 构建遇到依赖冲突时，就立即构建失败</span></span><br><span class="line">configurations.all() &#123;</span><br><span class="line">    Configuration configuration -&gt;</span><br><span class="line">        <span class="comment">//当遇到版本冲突时直接构建失败</span></span><br><span class="line">        configuration.resolutionStrategy.failOnVersionConflict()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Gradle-插件">6、Gradle 插件</h2><h3 id="6-1-插件介绍">6.1 插件介绍</h3><ul><li><p>促进代码重用、减少功能类似代码编写、提升工作效率</p></li><li><p>促进项目更高程度的模块化、自动化、便捷化</p></li><li><p>可插拔式的的扩展项目的功能</p></li></ul><p>在项目构建过程中做很多事情，把插件应用到项目中，通常可以完成:</p><ul><li><p>可以添加任务【task】到项目中，从而帮助完成测试、编译、打包等</p></li><li><p>可以添加依赖配置到项目中。</p></li><li><p>可以向项目中拓展新的扩展属性、方法等。</p></li><li><p>可以对项目进行一些约定，如应用Java 插件后，约定src/main/java 目录是我们的源代码存在位置，编译时编译这个目录下的Java 源代码文件</p></li></ul><h3 id="6-2-插件的分类和使用">6.2 插件的分类和使用</h3><p><strong>脚本插件</strong></p><p>脚本插件的本质就是一个脚本文件，使用<strong>脚本插件时通过apply from:将脚本加载进来</strong>就可以了，后面的脚本文件可以是本地的也可以是网络上的脚本文件，下面定义一段脚本，我们在 build.gradle 文件中使用。</p><p>脚本文件模块化的基础，可按功能把我们的脚本进行拆分一个个公用、职责分明的文件，然后在主脚本文件引用，比如：将很多共有的库版本号一起管理、应用构建版本一起管理等</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//version.gradle文件</span></span><br><span class="line">ext &#123;</span><br><span class="line">    company= <span class="string">"尚硅谷"</span></span><br><span class="line">    cfgs = [</span><br><span class="line">            <span class="string">compileSdkVersion :</span> JavaVersion.VERSION_1_8</span><br><span class="line">    ]</span><br><span class="line">    spring = [</span><br><span class="line">            <span class="string">version :</span> <span class="string">'5.0.0'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//build.gradle文件</span></span><br><span class="line"><span class="comment">//map作为参数，可以直接引入</span></span><br><span class="line">apply <span class="string">from:</span> <span class="string">'version.gradle'</span></span><br><span class="line">task taskVersion&#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        println <span class="string">"公司名称为：$&#123;company&#125;,JDK版本是$&#123;cfgs.compileSdkVersion&#125;,版本号是$&#123;spring.version&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象插件之内部插件[核心插件]</strong></p><blockquote><p><a href="https://docs.gradle.org/current/userguide/plugin_reference.html" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/plugin_reference.html">https://docs.gradle.org/current/userguide/plugin_reference.html</a></p></blockquote><p>二进制插件[对象插件]就是实现了org.gradle.api.Plugin 接口的插件，每个Java Gradle 插件都有一个plugin id</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用plugins DSL 方式</span></span><br><span class="line"><span class="comment">// 如果是第三方插件已经被托管在https://plugins.gradle.org/</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.7.5'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以使用闭包作为project.apply方法的一个参数</span></span><br><span class="line">apply&#123;</span><br><span class="line">    plugin <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方式1：Map具名参数,全类名</span></span><br><span class="line">apply <span class="string">plugin:</span>org.gradle.api.plugins.JavaPlugin</span><br><span class="line"><span class="comment">//org.gradle.api.plugins默认导入：使用方式2</span></span><br><span class="line">apply <span class="string">plugin:</span>JavaPlugin</span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span> <span class="comment">//核心插件，无需事先引入，使用方式3:插件的id</span></span><br></pre></td></tr></table></figure><p><strong>第三方插件</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用传统的应用方式</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        springBootVersion = <span class="string">"2.3.3.RELEASE"</span></span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span> &#125;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 此处先引入插件</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再应用插件</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span> <span class="comment">//社区插件,需要事先引入，不必写版本号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用plugins DSL 方式</span></span><br><span class="line"><span class="comment">// 如果是第三方插件已经被托管在https://plugins.gradle.org/</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.7.5'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用户自定义插件</strong></p><blockquote><p>参考地址：<a href="https://docs.gradle.org/current/userguide/custom_plugins.html" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/custom_plugins.html">https://docs.gradle.org/current/userguide/custom_plugins.html</a></p></blockquote><p>我们直接执行hello 任务./gradle hello 即可,这种方式实现的插件我们一般不使用，因为这种方式局限性太强，只能本Project，而其他的Project 不能使用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetingPluginExtension</span> &#123;</span></span><br><span class="line">    Property&lt;String&gt; getMessage()</span><br><span class="line">    Property&lt;String&gt; getGreeter()</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        <span class="keyword">def</span> extension = project.extensions.create(<span class="string">'greeting'</span>, GreetingPluginExtension)</span><br><span class="line">        project.task(<span class="string">'hello'</span>) &#123;</span><br><span class="line">            doLast &#123;</span><br><span class="line">                println <span class="string">"$&#123;extension.message.get()&#125; from $&#123;extension.greeter.get()&#125;"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">apply <span class="string">plugin:</span> GreetingPlugin</span><br><span class="line"><span class="comment">// Configure the extension using a DSL block</span></span><br><span class="line">greeting &#123;</span><br><span class="line">    message = <span class="string">'Hi'</span></span><br><span class="line">    greeter = <span class="string">'Gradle'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-buildSrc-项目">6.3 buildSrc 项目</h3><p><strong>buildSrc 是Gradle 默认的插件目录</strong>，编译 Gradle 的时候会自动识别这个目录，将其中的代码编译为插件。</p><ul><li><p>首先先建立一个名为** buildSrc 的 java Module**，将 buildSrc 从 included modules 移除，重新构建，然后只保留 <strong>build.gradle</strong>和src/main 目录，其他全部删掉，注意名字一定是 buildSrc，不然会找不到插件</p></li><li><p>然后修改<code>build.gradle</code>中的内容</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'groovy'</span> <span class="comment">//必须</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'maven-publish'</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation gradleApi() <span class="comment">//必须</span></span><br><span class="line">    implementation localGroovy() <span class="comment">//必须</span></span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    google()</span><br><span class="line">    jcenter()</span><br><span class="line">    mavenCentral() <span class="comment">//必须</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把项目入口设置为src/main/groovy</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        groovy &#123;</span><br><span class="line">            srcDir <span class="string">'src/main/groovy'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现插件代码Text.groovy，注意文件后缀为groovy，文件要引入package com.atguigu</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        project.task(<span class="string">"atguigu"</span>) &#123;</span><br><span class="line">            doLast &#123;</span><br><span class="line">                println(<span class="string">"自定义atguigu插件"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在main 目录下创建resources 目录，在<strong>resources <strong>目录下创建META-INF 目录，在META-INF 目录下创建gradle-plugins 目录，在gradle-plugins 目录下创建</strong>properties <strong>文件，properties 文件可以自己命名，但是</strong>要以.properties 结尾</strong>，比如<code>com.atguigu.plugin.properties</code>，其com.atguigu.plugin 就是自定义的包名路径</p><p>最后需要<strong>在properties 文件中指明我们实现插件的全类名implementation-class=com.atguigu.Text</strong>；然后在module 引入我们写的插件<code>apply plugin:'com.atguigu.plugin'</code>，然后执行插件的任务<code>./gradle atguigu</code></p><p><strong>如果想给其他工程使用，可以上传maven</strong></p><ul><li><p>首先将上述buildSrc 目录复制一份，修改文件夹名，然后在settings.gradle 文件中使用include 引入</p></li><li><p>修改build.gradle 文件，发布到maven 仓库中</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'groovy'</span> <span class="comment">//必须</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'maven-publish'</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation gradleApi() <span class="comment">//必须</span></span><br><span class="line">    implementation localGroovy() <span class="comment">//必须</span></span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    google()</span><br><span class="line">    jcenter()</span><br><span class="line">    mavenCentral() <span class="comment">//必须</span></span><br><span class="line">&#125;</span><br><span class="line">sourceSets &#123; <span class="comment">//把项目入口设置为src/main/groovy</span></span><br><span class="line">    main &#123;</span><br><span class="line">        groovy &#123;</span><br><span class="line">            srcDir <span class="string">'src/main/groovy'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        myLibrary(MavenPublication) &#123;</span><br><span class="line">            groupId = <span class="string">'com.atguigu.plugin'</span> <span class="comment">//指定GAV坐标信息</span></span><br><span class="line">            artifactId = <span class="string">'library'</span></span><br><span class="line">            version = <span class="string">'1.1'</span></span><br><span class="line">            from components.java<span class="comment">//发布jar包</span></span><br><span class="line"><span class="comment">//from components.web///引入war插件，发布war包</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">"$rootDir/lib/release"</span> &#125;</span><br><span class="line"><span class="comment">//发布项目到私服中</span></span><br><span class="line"><span class="comment">// maven &#123;</span></span><br><span class="line"><span class="comment">// name = 'myRepo' //name属性可选,表示仓库名称，url必填</span></span><br><span class="line"><span class="comment">// //发布地址:可以是本地仓库或者maven私服</span></span><br><span class="line"><span class="comment">// //url = layout.buildDirectory.dir("repo")</span></span><br><span class="line"><span class="comment">// //url='http://my.org/repo'</span></span><br><span class="line"><span class="comment">// // change URLs to point to your repos, e.g. http://my.org/repo</span></span><br><span class="line"><span class="comment">// //认证信息:用户名和密码</span></span><br><span class="line"><span class="comment">// credentials &#123;</span></span><br><span class="line"><span class="comment">// username = 'joe'</span></span><br><span class="line"><span class="comment">// password = 'secret'</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>执行publish 指令,发布到根project 或者maven 私服仓库（这里发布到了本地）</p></li><li><p>使用插件,在项目级build.gradle 文件中将插件添加到classpath：</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">"$rootDir/lib/release"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">"com.atguigu.plugin:library:1.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line"><span class="comment">//是在atguiguplugin 中定义的插件ID</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.atguigu.plugin'</span></span><br></pre></td></tr></table></figure><ul><li>执行<code>gradle build</code> 指令就会在控制台看到自定义插件的输出，说明自定义插件就已经生效了</li></ul><h3 id="6-4-插件常用属性">6.4 插件常用属性</h3><p>参考官网：<a href="https://docs.gradle.org/current/userguide/plugin_reference.html" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/plugin_reference.html">https://docs.gradle.org/current/userguide/plugin_reference.html</a></p><p><img src="https://img-blog.csdnimg.cn/b60546ea76ab41a3b9e23dd5943cde4c.png#pic_center" alt="在这里插入图片描述"></p><h2 id="7、build-gradle-文件">7、build.gradle 文件</h2><ul><li><p>build.gradle 是一个gradle 的构建脚本文件，支持java、groovy 等语言</p></li><li><p>每个project 都会有一个build.gradle 文件，该文件是项目构建的入口，可配置版本、插件、依赖库等信息</p></li><li><p>每个build 文件都有一个对应的 Project 实例，对build.gradle 文件配置，本质就是设置Project 实例的属性和方法</p></li><li><p>由于每个 project 都会有一个build 文件，那么Root Project 也不列外。Root Project 可以获取到所有 Child Project，所以在Root Project 的 build 文件中我们可以对Child Project 统一配置，比如应用的插件、依赖的maven 中心仓库等。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/d4b85b16274e4f3b927f1c2e1c5c74a2.png#pic_center" alt="在这里插入图片描述"></p><h3 id="7-1-常见属性代码">7.1 常见属性代码</h3><ul><li><p>group+name+version 类似于 maven 的group+artifactId+version  </p></li><li><p>encoding 解决业务代码与测试代码中文乱码问题</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定使用什么版本的JDK语法编译源代码,跟编译环境有关,在有java插件时才能用</span></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"><span class="comment">//指定生成特定于某个JDK版本的class文件:跟运行环境有关,在有java插件时才能用</span></span><br><span class="line">targetCompatibility = <span class="number">1.8</span></span><br><span class="line"><span class="comment">//业务编码字符集,注意这是指定源码解码的字符集[编译器]</span></span><br><span class="line">compileJava.options.encoding <span class="string">"UTF-8"</span></span><br><span class="line"><span class="comment">//测试编码字符集,注意这是指定源码解码的字符集[编译器]</span></span><br><span class="line">compileTestJava.options.encoding <span class="string">"UTF-8"</span></span><br><span class="line"><span class="comment">//编译JAVA文件时采用UTF-8:注意这是指定源码编码的字符集【源文件】</span></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    options.encoding = <span class="string">"UTF-8"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译JAVA文件时采用UTF-8:注意这是指定文档编码的字符集【源文件】</span></span><br><span class="line">tasks.withType(Javadoc) &#123;</span><br><span class="line">    options.encoding = <span class="string">"UTF-8"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-Repositories">7.2 Repositories</h3><p>Gradle 没有自己的远程仓库，而是使用Maven、jcenter、jvy、google 这些远程仓库</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    <span class="comment">//gradle中会按着仓库配置的顺序，从上往下依次去对应的仓库中找所需要的jar包:</span></span><br><span class="line">    <span class="comment">//如果找到，则停止向下搜索，如果找不到，继续在下面的仓库中查找</span></span><br><span class="line">    <span class="comment">//指定去本地某个磁盘目录中查找:使用本地file文件协议:一般不用这种方式</span></span><br><span class="line">    maven &#123; url <span class="string">'file:///D:/repos/mavenrepos3.5.4'</span>&#125; maven &#123; url <span class="string">"$rootDir/lib/release"</span> &#125;</span><br><span class="line">    <span class="comment">//指定去maven的本地仓库查找</span></span><br><span class="line">    mavenLocal()</span><br><span class="line">    <span class="comment">//指定去maven的私服或者第三方镜像仓库查找</span></span><br><span class="line">    maven &#123; name <span class="string">"Alibaba"</span> ; url <span class="string">"https://maven.aliyun.com/repository/public"</span> &#125; maven &#123; name <span class="string">"Bstek"</span> ; url <span class="string">"https://nexus.bsdn.org/content/groups/public/"</span> &#125;</span><br><span class="line">    <span class="comment">//指定去maven的远程仓库查找:即 https://repo.maven.apache.org/maven2/</span></span><br><span class="line">    mavenCentral()</span><br><span class="line">    <span class="comment">//去google仓库查找google()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-Subprojects-与-Allprojects">7.3 Subprojects 与 Allprojects</h3><p>**allprojects <strong>是对所有project(<strong>包括Root Project+ child Project[当前工程和所有子工程]</strong>)的进行统一配置，而</strong>subprojects  **是对所有Child Project 的进行统一配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    tasks.create(<span class="string">'hello'</span>) &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            task -&gt;</span><br><span class="line">                println <span class="string">"project name is $task.project.name"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    hello.doLast&#123;</span><br><span class="line">        task-&gt;</span><br><span class="line">            println <span class="string">"here is subprojects $task.project.name"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对单个Project 进行单独配置</span></span><br><span class="line">project(<span class="string">'subject01'</span>) &#123;</span><br><span class="line">    task subject01 &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println <span class="string">'for subject01'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-ext-用户自定义属性">7.4 ext 用户自定义属性</h3><blockquote><p>详细请参考：<a href="https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties" target="_blank" rel="noopener" title="https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties">https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties</a></p></blockquote><p>Project 和Task 都允许用户添加额外的自定义属性，要添加额外的属性，通过应用所属对象的ext 属性即可实现。添加之后可以通过ext 属性对自定义属性读取和设置，如果要同时添加多个自定义属性,可以通过ext 代码块</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义一个Project的属性</span></span><br><span class="line">ext.age = <span class="number">18</span></span><br><span class="line"><span class="comment">//通过代码块同时自定义多个属性</span></span><br><span class="line">ext &#123;</span><br><span class="line">    phone = <span class="number">19292883833</span></span><br><span class="line">    address=<span class="string">"北京尚硅谷"</span></span><br><span class="line">&#125;</span><br><span class="line">task extCustomProperty &#123;</span><br><span class="line"><span class="comment">//在task中自定义属性</span></span><br><span class="line">    ext &#123;</span><br><span class="line">        desc = <span class="string">"奥利给"</span></span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">"年龄是：$&#123;age&#125;"</span></span><br><span class="line">        println <span class="string">"电话是：$&#123;phone&#125;"</span></span><br><span class="line">        println <span class="string">"地址是：$&#123;address&#125;"</span></span><br><span class="line">        println <span class="string">"尚硅谷：$&#123;desc&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ext 配置的是用户自定义属性，而gradle.properties 中一般定义系统属性、环境变量、项目属性、JVM 相关配置信息。例如gradle.properties 文件案例：加快构建速度的，gradle.properties 文件中的属性会自动在项目运行时加载。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 设置此参数主要是编译下载包会占用大量的内存，可能会内存溢出</span><br><span class="line">org.gradle.jvmargs=-Xms4096m -Xmx8192m</span><br><span class="line">## 开启gradle缓存</span><br><span class="line">org.gradle.caching=<span class="literal">true</span></span><br><span class="line">#开启并行编译</span><br><span class="line">org.gradle.parallel=<span class="literal">true</span></span><br><span class="line">#启用新的孵化模式</span><br><span class="line">org.gradle.configureondemand=<span class="literal">true</span></span><br><span class="line">#开启守护进程</span><br><span class="line">org.gradle.daemon=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="7-5-Buildscript">7.5 Buildscript</h3><p>buildscript 里是gradle 脚本执行所需依赖，分别是对应的 maven 库和插件</p><ul><li><p><strong>buildscript{}必须在build.gradle 文件的最前端</strong></p></li><li><p>对于多项目构建，项目的buildscript ()方法声明的依赖关系可用于其所有子项目的构建脚本</p></li><li><p>构建脚本依赖可能是Gradle 插件</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64</span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">group:</span> <span class="string">'commons-codec'</span>, <span class="string">name:</span> <span class="string">'commons-codec'</span>, <span class="string">version:</span> <span class="string">'1.2'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">tasks.register(<span class="string">'encode'</span>) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="keyword">def</span> <span class="keyword">byte</span>[] encodedString = <span class="keyword">new</span> Base64().encode(<span class="string">'hello world\n'</span>.getBytes())</span><br><span class="line">        println <span class="keyword">new</span> String(encodedString)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//老式apply插件的引用方式,使用apply+buildscript</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        springBootVersion = <span class="string">"2.3.3.RELEASE"</span></span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span> &#125;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//此处引入插件</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span> <span class="comment">//核心插件，无需事先引入</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span> <span class="comment">//社区插件，需要事先引入,才能应用，不必写版本号</span></span><br></pre></td></tr></table></figure><h2 id="8、项目发布">8、项目发布</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'java-library'</span> <span class="comment">//如果发布war包，需要war插件,java-library支持带源码、文档发布</span></span><br><span class="line">    id <span class="string">'maven-publish'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//带源码和javadoc的发布:需要'java-library'插件支持:它是java的升级版，java插件的功能java-library都有</span></span><br><span class="line"><span class="comment">//javadoc.options.encoding="UTF-8"</span></span><br><span class="line"><span class="comment">//java &#123;</span></span><br><span class="line"><span class="comment">// withJavadocJar()</span></span><br><span class="line"><span class="comment">// withSourcesJar()</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        myLibrary(MavenPublication) &#123;</span><br><span class="line">            groupId = <span class="string">'org.gradle.sample'</span> <span class="comment">//指定GAV坐标信息</span></span><br><span class="line">            artifactId = <span class="string">'library'</span></span><br><span class="line">            version = <span class="string">'1.1'</span></span><br><span class="line">            from components.java<span class="comment">//发布jar包</span></span><br><span class="line">             <span class="comment">//from components.web///引入war插件，发布war包</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="comment">//本地仓库位于USER_HOME/.m2/repository</span></span><br><span class="line">        mavenLocal()</span><br><span class="line">        <span class="comment">//发布项目到私服中</span></span><br><span class="line">        maven &#123;</span><br><span class="line">            name = <span class="string">'myRepo'</span> <span class="comment">//name属性可选,表示仓库名称，url必填</span></span><br><span class="line">            <span class="comment">//发布地址:可以是本地仓库或者maven私服</span></span><br><span class="line">            <span class="comment">//url = layout.buildDirectory.dir("repo")</span></span><br><span class="line">            <span class="comment">// change URLs to point to your repos, e.g. http://my.org/repo</span></span><br><span class="line">            <span class="keyword">def</span> releasesRepoUrl = layout.buildDirectory.dir(<span class="string">'repos/releases'</span>)</span><br><span class="line">            <span class="keyword">def</span> snapshotsRepoUrl = layout.buildDirectory.dir(<span class="string">'repos/snapshots'</span>)</span><br><span class="line">            url = version.endsWith(<span class="string">'SNAPSHOT'</span>) ? snapshotsRepoUrl : releasesRepoUrl</span><br><span class="line">            <span class="comment">//认证信息:用户名和密码</span></span><br><span class="line">            <span class="comment">// credentials &#123;</span></span><br><span class="line">            <span class="comment">// username = 'joe'</span></span><br><span class="line">            <span class="comment">// password = 'secret'</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行发布命令，将项目发布到本地仓库或者远程仓库。<strong>常见的发布指令</strong>有：</p><ul><li><p>generatePomFileForPubNamePublication: 生成pom 文件</p></li><li><p>publishPubNamePublicationToRepoNameRepository:发布项目到指定仓库,如果没有仓库名，默认为maven</p></li><li><p>publishPubNamePublicationToMavenLocal: 将PubName 发布复制到本地Maven 仓库中包括POM 文件和其他元数据。</p></li><li><p>publish: 发布到repositories 中指定的仓库(为比如Maven 私服)</p></li><li><p>publishToMavenLocal: 执行所有发布任务中的操作发布到本地maven 仓库【默认在用户家目录下的.m2/repository】</p></li></ul><h2 id="9、生命周期中Hook">9、生命周期中Hook</h2><h3 id="9-1-生命周期详细介绍">9.1 生命周期详细介绍</h3><p><img src="https://img-blog.csdnimg.cn/da28922ef82f48c58f3d8d0b965e1c12.jpeg#pic_center" alt="在这里插入图片描述"></p><p><strong>Gradle 初始化阶段</strong></p><ul><li><p>在<code>settings.gradle</code> 执行完后,会回调Gradle 对象的<code>settingsEvaluated</code> 方法</p></li><li><p>在构建所有工程build.gradle 对应的Project 对象后,也既初始化阶段完毕,会回调Gradle 对象的projectsLoaded 方法</p></li></ul><p><strong>Gradle 配置阶段</strong></p><ul><li><p>Gradle 会循环执行每个工程的build.gradle 脚本文件</p></li><li><p>在执行当前工程<code>build.gradle</code> 前，会回调Gradle 对象的<code>beforeProject </code>方法和当前Project 对象的<code>beforeEvaluate </code>方法，虽然beforeEvalute 属于project 的生命周期, 但是此时build script 尚未被加载， 所以<code>beforeEvaluate </code>的设置依然要在init script 或setting script 中进行，不要在build script 中使用<code>project.beforeEvaluate</code> 方法。</p></li><li><p>在执行当前工程build.gradle 后，会回调Gradle 对象的<code>afterProject </code>方法和当前Project 对象的afterEvaluate 方法</p></li><li><p>在所有工程的<code>build.gradle</code> 执行完毕后，会回调Gradle 对象的<code>projectsEvaluated </code>方法</p></li><li><p>在构建Task 依赖有向无环图后,也就是配置阶段完毕,会回调<code>TaskExecutionGraph </code>对象的<code>whenReady </code>方法</p></li></ul><p><strong>Gradle 执行阶段</strong></p><ul><li><p>Gradle 会循环执行Task 及其依赖的Task</p></li><li><p>在当前Task 执行之前,会回调<code>TaskExecutionGraph </code>对象的<code>beforeTask </code>方法</p></li><li><p>在当前Task 执行之后,会回调<code>TaskExecutionGraph </code>对象的<code>afterTask </code>方法</p></li></ul><p>当所有的Task 执行完毕后，会回调Gradle 对象的<code>buildFinish</code> 方法。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">gradle.settingsEvaluated &#123; <span class="comment">//1.settingsEvaluated钩子函数,在初始化阶段完成</span></span><br><span class="line">    println <span class="string">"settingsEvaluated"</span></span><br><span class="line">&#125;</span><br><span class="line">gradle.projectsLoaded &#123; <span class="comment">//2.projectsLoaded钩子函数,在初始化阶段完成</span></span><br><span class="line">    println <span class="string">"projectsLoaded"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明一个变量：表示当前项目名,在每次执行某个项目的beforeEvaluate方法时先给projectName变量赋值</span></span><br><span class="line"><span class="comment">//这样方便在：gradle.beforeProject和afterProject两个钩子函数使用。</span></span><br><span class="line"><span class="keyword">def</span> projectName=<span class="string">""</span></span><br><span class="line">gradle.addProjectEvaluationListener( <span class="keyword">new</span> ProjectEvaluationListener()&#123;</span><br><span class="line"><span class="comment">//3.执行各个project的beforeEvaluate：在配置阶段完成</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> beforeEvaluate(Project project) &#123;</span><br><span class="line">        projectName=project.name</span><br><span class="line">        println <span class="string">"$&#123;project.name&#125; Project beforeEvaluate"</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//5.执行各个project的afterEvaluate：在配置阶段完成</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> afterEvaluate(Project project, ProjectState projectState) &#123;</span><br><span class="line">        println <span class="string">"$&#123;project.name&#125; Project afterEvaluate"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">gradle.beforeProject &#123;<span class="comment">//4.执行各个project的beforeProject：在配置阶段完成</span></span><br><span class="line">    println <span class="string">"$&#123;projectName&#125; beforeProject..."</span></span><br><span class="line">&#125;</span><br><span class="line">gradle.afterProject &#123;<span class="comment">//6.执行各个project的afterProject：在配置阶段完成</span></span><br><span class="line">    println <span class="string">"$&#123;projectName&#125; afterProject..."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//7.所有工程的build.gradle 执行完毕后，回调Gradle 对象的projectsEvaluated 方法：在配置阶段完成</span></span><br><span class="line"><span class="keyword">def</span> rootProjectName=rootProject.getName()</span><br><span class="line">gradle.projectsEvaluated &#123;</span><br><span class="line">    println <span class="string">"$&#123;rootProjectName&#125; projectsEvaluated..."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//8.配置阶段完毕后，回调TaskExecutionGraph 对象的whenReady 方法：在配置阶段完成</span></span><br><span class="line">gradle.taskGraph.whenReady &#123;</span><br><span class="line">    println <span class="string">"$&#123;rootProjectName&#125; taskGraph whenReady..."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//9.在当前Task执行之前,会回调TaskExecutionGraph 对象的beforeTask方法：在执行阶段完成</span></span><br><span class="line">gradle.taskGraph.beforeTask &#123;task -&gt;</span><br><span class="line">    println <span class="string">"this is the task $&#123;task.name&#125; of the project $&#123;task.getProject().name&#125; beforeTask.."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10.在当前Task执行之后,会回调TaskExecutionGraph 对象的afterTask方法：在执行阶段完成</span></span><br><span class="line">gradle.taskGraph.afterTask &#123;task -&gt;</span><br><span class="line">    println <span class="string">"this is the task $&#123;task.name&#125; of the project $&#123;task.getProject().name&#125; afterTask.."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//11.当所有的Task 执行完毕后，会回调Gradle 对象的buildFinish 方法：在执行阶段完成</span></span><br><span class="line">gradle.buildFinished &#123;</span><br><span class="line">    println <span class="string">"$&#123;rootProjectName&#125; buildFinished..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-生命周期扩展">9.2 生命周期扩展</h3><p>在<code>settings.gradle</code> 中添加监听器，查看task 有向无环图</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gradle.taskGraph.addTaskExecutionGraphListener(<span class="keyword">new</span> TaskExecutionGraphListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//生成有向无环图</span></span><br><span class="line">    <span class="keyword">void</span> graphPopulated(TaskExecutionGraph taskExecutionGraph) &#123;</span><br><span class="line">        taskExecutionGraph.allTasks.forEach(task-&gt;&#123;<span class="comment">//核心逻辑:通过taskExecutionGraph获得所有的task</span></span><br><span class="line">            taskExecutionGraph.allTasks.forEach(releaseTask-&gt;&#123;</span><br><span class="line">                println <span class="string">"尚硅谷:"</span> + releaseTask.getProject().name + <span class="string">":"</span> + releaseTask.name</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>计算Gradle 构建过程中各个阶段的耗时</strong>:需要注意，这里只是计算了初始化阶段的<code>settings 文件</code>，并没有计算<code>init.gradle</code> 初始化的时间</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> projectName=rootProject.getName() <span class="comment">//定义项目名</span></span><br><span class="line"><span class="keyword">long</span> beginOfSetting = System.currentTimeMillis() <span class="comment">//初始化阶段开始时间</span></span><br><span class="line"><span class="keyword">def</span> beginOfConfig <span class="comment">//配置阶段开始时间</span></span><br><span class="line"><span class="keyword">def</span> configHasBegin = <span class="literal">false</span> <span class="comment">//配置阶段是否开始了，只执行一次</span></span><br><span class="line"><span class="keyword">def</span> beginOfProjectConfig = <span class="keyword">new</span> HashMap() <span class="comment">//存放每个build.gradle 执行之前的时间</span></span><br><span class="line"><span class="keyword">def</span> beginOfTaskExecute <span class="comment">//执行阶段开始时间</span></span><br><span class="line">gradle.projectsLoaded &#123; <span class="comment">//初始化阶段执行完毕</span></span><br><span class="line">    println <span class="string">"$&#123;projectName&#125;工程初始化总耗时$&#123;System.currentTimeMillis() - beginOfSetting&#125; ms"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//build.gradle 执行前</span></span><br><span class="line">gradle.beforeProject &#123;Project project -&gt;</span><br><span class="line">    <span class="keyword">if</span>(!configHasBegin)&#123;</span><br><span class="line">        configHasBegin = <span class="literal">true</span></span><br><span class="line">        beginOfConfig = System.currentTimeMillis()</span><br><span class="line">    &#125;</span><br><span class="line">    beginOfProjectConfig.put(project,System.currentTimeMillis())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//build.gradle 执行后</span></span><br><span class="line">gradle.afterProject &#123;Project project -&gt;</span><br><span class="line">    <span class="keyword">def</span> begin = beginOfProjectConfig.get(project)</span><br><span class="line">    <span class="keyword">if</span>(project.name == projectName) &#123;</span><br><span class="line">        println <span class="string">"根工程$&#123;projectName&#125; 配置阶段耗时：$&#123;System.currentTimeMillis() - begin&#125; ms"</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        println <span class="string">"子工程$&#123;project.name&#125; 配置阶段耗时：$&#123;System.currentTimeMillis() - begin&#125; ms"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">gradle.taskGraph.whenReady &#123;<span class="comment">//配置阶段完毕</span></span><br><span class="line">    println <span class="string">"整个$&#123;projectName&#125;项目在配置阶段总耗时：$&#123;System.currentTimeMillis() - beginOfConfig&#125; ms"</span></span><br><span class="line">    beginOfTaskExecute = System.currentTimeMillis()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行阶段开始</span></span><br><span class="line">gradle.taskGraph.beforeTask &#123;Task task -&gt;</span><br><span class="line">    task.doFirst &#123;</span><br><span class="line">        task.ext.beginOfTask = System.currentTimeMillis()</span><br><span class="line">    &#125;</span><br><span class="line">    task.doLast &#123;</span><br><span class="line">        println <span class="string">"$&#123;task.name&#125;在执行阶段耗时：$&#123;System.currentTimeMillis() - task.ext.beginOfTask&#125; ms"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">gradle.buildFinished &#123;<span class="comment">//执行阶段完毕</span></span><br><span class="line">    println <span class="string">" 执行阶段总耗时：$&#123;System.currentTimeMillis() - beginOfTaskExecute&#125; ms"</span></span><br><span class="line">    println <span class="string">" 整个构建过程耗时：$&#123;System.currentTimeMillis() - beginOfSetting&#125; ms"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>四、Spring项目相关</h1><h2 id="1、Springboot-项目创建">1、Springboot 项目创建</h2><blockquote><p>Spring Boot Gradle 插件在Gradle 提供Spring Boot 支持。它允许您打包可执行jar 或war 归档文件，运行Spring。参考：<a href="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#getting-started" target="_blank" rel="noopener" title="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#getting-started">https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#getting-started</a></p></blockquote><h3 id="1-1-引入springboot-插件">1.1 引入springboot 插件</h3><p>创建SpringBoot项目，选择gradle和groovy，完成后配置本地gradle，然后进行依赖引入(<strong>用Spring Boot脚手架会直接配置好，推荐</strong>)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">//维护springboot版本号,不单独使用,和下面两个插件一起用</span></span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.3.7.RELEASE'</span> </span><br><span class="line">    <span class="comment">// 统一管理版本号，下面依赖就不需要写版本了</span></span><br><span class="line">    id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.10.RELEASE'</span></span><br><span class="line">    <span class="comment">//进行依赖管理,在引入其它boot依赖时省略版本号、解决jar包冲突问题</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span> <span class="comment">//省略版本,原生bom支持,插件management提供</span></span><br><span class="line">    testImplementation(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>) &#123;</span><br><span class="line">        exclude <span class="string">group:</span> <span class="string">'org.junit.vintage'</span>, <span class="string">module:</span> <span class="string">'junit-vintage-engine'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-程序运行与打包">1.2 程序运行与打包</h3><p>要想运行当前Springboot 项目，直接执行<code>gradle bootRun</code> 指令或者<code>idea 右侧按钮即可</code>。当然如果想让当前项目打成可执行jar 包，只需执行： <code>gradle bootJar</code> 指令即可。</p><p>Cloud 项目创建也可以借助于脚手架创建，与Boot 项目类似。</p><h3 id="1-3-拓展spring-boot-gradle-plugin-插件">1.3 拓展spring-boot-gradle-plugin 插件</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/public'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'org.springframework.boot:spring-boot-gradle-plugin:2.4.1'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样就不用自己管理版本号了</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br></pre></td></tr></table></figure><h3 id="1-4-全局属性管理">1.4 全局属性管理</h3><p>有时我们在 gradle 里定义了一些<strong>全局属性</strong>，想在 springboot 的 <strong>application 配置文件</strong>里使用，甚至可以给多个模块公用一个全局属性</p><p>首先在根目录<code>build.gradle</code>进行配置，首先需要暴露属性</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 gradle 的配置应用于yml配置文件</span></span><br><span class="line">processResources &#123;</span><br><span class="line">    filesMatching(<span class="string">'application.yml'</span>) &#123;</span><br><span class="line">        expand(project.properties)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 gradle 的配置应用于所有 springboot 配置文件</span></span><br><span class="line">processResources &#123;</span><br><span class="line">    expand(project.properties)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在根目录创建例如<strong>gradle.properties</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author=shawn</span><br><span class="line">age=<span class="number">18</span></span><br></pre></td></tr></table></figure><p>最后在项目的application引入即可，banner也可以按此方法引入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">mine:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;author&#125;</span></span><br><span class="line">    <span class="attr">age:</span> <span class="string">$&#123;age&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2、Spring聚合项目">2、Spring聚合项目</h2><blockquote><p>参考Maven聚合项目：<a href="https://blog.csdn.net/lemon_TT/article/details/119654251" target="_blank" rel="noopener" title="SpringBoot聚合项目创建、打包与多环境">SpringBoot聚合项目创建、打包与多环境</a><br>官方参考：<a href="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/" target="_blank" rel="noopener" title="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/">https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/</a></p></blockquote><h3 id="2-1-环境与依赖">2.1 环境与依赖</h3><p>本次的微服务结构如下所示，当然也有另一种即消费者和生产者分开单独成一个微服务。创建父工程时选择<code>Spring Initializer</code>脚手架，选择Gradle类型，填写好对于信息，同时删除src等其他非必须文件，然后进入Settings设置全局gradle配置(每次新建都要配置一下)；之后在创建子模块时可以直接选择<strong>新建Gradle</strong>，选择Java语言以及父目录</p><p><img src="https://img-blog.csdnimg.cn/56594942479b4d458109ee892ba4b9d5.png#pic_center" alt="在这里插入图片描述"></p><ul><li><p>microservice-parent： 统一管理所有模块的 jar 包版本信息  </p></li><li><p>microservice-bean： 统一管理所有模块的用到的 pojo 类  </p></li><li><p>microservice-common：统一管理所有模块的用到的工具类、枚举类、异常处理、日志文件、统一返回结果信息</p></li><li><p>microservice-service: 统一封装所有的微服务  </p></li><li><p>microservice-gateway: 封装网关信息</p></li></ul><h3 id="2-2-父工程相关目录">2.2 父工程相关目录</h3><p>首先关注<code>settings.gradle</code>文件，该文件一个项目只能存在一个，用于配置项目的父子关系</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = <span class="string">'microservice'</span></span><br><span class="line">include <span class="string">'microservice_bean'</span></span><br><span class="line">include <span class="string">'microservice_common'</span></span><br><span class="line">include <span class="string">'microservice_gateway'</span></span><br><span class="line">include <span class="string">'microservice_service'</span></span><br><span class="line">include <span class="string">'microservice_service:service_user'</span></span><br><span class="line"><span class="comment">// 可以设置别名</span></span><br><span class="line">findProject(<span class="string">':microservice_service:service_user'</span>)?.name = 'service_user'</span><br><span class="line">include 'microservice_service:service_order<span class="string">'</span></span><br><span class="line"><span class="string">findProject('</span>:<span class="string">microservice_service:</span>service_order<span class="string">')?.name = '</span>service_order<span class="string">'</span></span><br></pre></td></tr></table></figure><p>然后在根目录创建version.gradle文件，用户自定义用户属性和版本号</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依赖版本管理</span></span><br><span class="line">ext &#123;</span><br><span class="line">    version = [</span><br><span class="line">            <span class="string">"fastjsonVersion"</span>   : <span class="string">"1.2.72"</span>,</span><br><span class="line">            <span class="string">"mybatisPlus"</span> : <span class="string">"3.0.5"</span>,</span><br><span class="line">            <span class="string">"mysql"</span> : <span class="string">"5.1.46"</span>,</span><br><span class="line">            <span class="string">"swaggerVersion"</span>: <span class="string">"2.7.0"</span>,</span><br><span class="line">            <span class="string">"jjwtVersion"</span>: <span class="string">"0.7.0"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">            <span class="string">"fastjson"</span>                      : <span class="string">"com.alibaba:fastjson:$&#123;version.fastjsonVersion&#125;"</span>,</span><br><span class="line">            <span class="string">"mybatis-plus-boot-starter"</span>     : <span class="string">"com.baomidou:mybatis-plus-boot-starter:$&#123;version.mybatisPlus&#125;"</span>,</span><br><span class="line">            <span class="string">"mysql"</span>                         : <span class="string">"mysql:mysql-connector-java:$&#123;version.mysql&#125;"</span>,</span><br><span class="line">            <span class="string">"swagger"</span>                       : <span class="string">"io.springfox:springfox-swagger2:$&#123;version.swaggerVersion&#125;"</span>,</span><br><span class="line">            <span class="string">"swaggerUI"</span>                     : <span class="string">"io.springfox:springfox-swagger-ui:$&#123;version.swaggerVersion&#125;"</span>,</span><br><span class="line">            <span class="string">"jjwt"</span>                          : <span class="string">"io.jsonwebtoken:jjwt:$&#123;version.jjwtVersion&#125;"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来<code>build.gradle</code>是父工程的全局配置管理中心，一般在这里设置版本号等信息，然后子工程进行继承，这样子工程就不需要写版本号了。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">description <span class="string">'gradle微服务实战父工程'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构建Gradle脚本自身需要的资源，可以声明的资源包括依赖项、第三方插件、maven仓库地址等。</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        <span class="comment">// 自定义扩展 字段 这里定义版本信息</span></span><br><span class="line">        <span class="comment">//定义一个变量，统一规定springboot的版本</span></span><br><span class="line">        springBootVersion = <span class="string">'2.2.1.RELEASE'</span></span><br><span class="line">        springCloudVersion = <span class="string">'Hoxton.RELEASE'</span></span><br><span class="line">        springCloudAlibabaVersion = <span class="string">'0.2.2.RELEASE'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置仓库</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'https://repo.spring.io/milestone'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置全局, 包括root项目和子项目</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">    group <span class="string">'com.shawn'</span></span><br><span class="line">    version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置编码格式</span></span><br><span class="line">    tasks.withType(JavaCompile) &#123;</span><br><span class="line">        options.encoding = <span class="string">"UTF-8"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置仓库</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'https://repo.spring.io/milestone'</span>&#125;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入自定义的用户属性文件</span></span><br><span class="line">apply <span class="string">from:</span> <span class="string">'version.gradle'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置所有子项目</span></span><br><span class="line">subprojects &#123;</span><br><span class="line">    <span class="comment">// 使用二进制插件 </span></span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'java-library'</span> <span class="comment">// 可以使用api编译</span></span><br><span class="line">    <span class="comment">//apply plugin: 'idea' // 让Gradle自动生成Intellij的项目文件</span></span><br><span class="line">    <span class="comment">// 依赖管理插件仍然是一个spring-boot-gradle-plugin传递依赖，所以无需在build.gradle配置中明确列出此依赖。</span></span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'io.spring.dependency-management'</span> <span class="comment">//依赖管理，用来传递spring的依赖</span></span><br><span class="line"></span><br><span class="line">    sourceCompatibility= JavaVersion.VERSION_1_8</span><br><span class="line">    targetCompatibility=  JavaVersion.VERSION_1_8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//公用的依赖</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-api:5.8.1'</span></span><br><span class="line">        testRuntimeOnly <span class="string">'org.junit.jupiter:junit-jupiter-engine:5.8.1'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test &#123;</span><br><span class="line">        useJUnitPlatform()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以参考：https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认bootJar和bootWar is true</span></span><br><span class="line">    <span class="comment">// jar和war 是false</span></span><br><span class="line">    <span class="comment">// springboot打出的bootJar包  一般是 不能被依赖的</span></span><br><span class="line">    <span class="comment">// 可以参考：https://www.cnblogs.com/karlMa/p/11304524.html</span></span><br><span class="line">    <span class="comment">// 打出来的jar包可以子模块间相互依赖，但经过个人测试后发现不可以被执行</span></span><br><span class="line">    <span class="comment">// 如果不开启的话，后续是会出现模块间找不到依赖的问题！</span></span><br><span class="line">    jar.enabled = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// jar名字带boot</span></span><br><span class="line">    bootJar &#123;</span><br><span class="line">        archiveClassifier = <span class="string">'boot'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    group = <span class="string">'com.example'</span></span><br><span class="line">    version = <span class="string">'0.0.1-SNAPSHOT'</span> <span class="comment">/* 项目版本,会加在打包文件名中 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// dependencyManagement版本统一管理，类似于父maven的dependencyManagement</span></span><br><span class="line">    <span class="comment">// 此时只是一个依赖管理，并不会导入任何的jar包</span></span><br><span class="line">    <span class="comment">// 子项目需要的时候才会真正导入</span></span><br><span class="line">    dependencyManagement &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 循环导入自定义配置第三方依赖</span></span><br><span class="line">        dependencies &#123;</span><br><span class="line">            <span class="keyword">for</span>(depJar <span class="keyword">in</span> rootProject.ext.dependencies)&#123;</span><br><span class="line">                dependency depJar.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 导入SpringBoot和SpringCloud依赖Bom</span></span><br><span class="line">        imports &#123;</span><br><span class="line">            mavenBom <span class="string">"org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;"</span></span><br><span class="line">            mavenBom <span class="string">"org.springframework.cloud:spring-cloud-alibaba-dependencies:$&#123;springCloudAlibabaVersion&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根目录下的xx项目</span></span><br><span class="line">project(<span class="string">':microservice_bean'</span>)&#123;</span><br><span class="line">    description(<span class="string">"微服务实战之bean层:存放表对应的实体类"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">project(<span class="string">":microservice_common"</span>)&#123;</span><br><span class="line">    description(<span class="string">"微服务实战之公共模块:存放微服务常用的工具类"</span>)</span><br><span class="line">    <span class="comment">//依赖</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">// api可以传递，编译速度慢，implement不可以传递，编译速度快</span></span><br><span class="line">        api <span class="string">'com.alibaba:fastjson'</span></span><br><span class="line">        api <span class="string">'mysql:mysql-connector-java'</span></span><br><span class="line">        api <span class="string">'com.baomidou:mybatis-plus-boot-starter'</span></span><br><span class="line">        api <span class="string">'io.springfox:springfox-swagger2'</span></span><br><span class="line">        api <span class="string">'io.springfox:springfox-swagger-ui'</span></span><br><span class="line">        api <span class="string">'io.jsonwebtoken:jjwt'</span></span><br><span class="line"></span><br><span class="line">        api <span class="string">'org.springframework.cloud:spring-cloud-starter-openfeign'</span></span><br><span class="line">        api <span class="string">'org.springframework.cloud:spring-cloud-starter-alibaba-sentinel'</span></span><br><span class="line">        api <span class="string">'org.springframework.cloud:spring-cloud-starter-alibaba-nacos-discovery'</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">project(<span class="string">":microservice_service"</span>)&#123;</span><br><span class="line">    description(<span class="string">"微服务实战之服务模块：存放各个微服务模块"</span>)</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line"></span><br><span class="line">    subprojects &#123;</span><br><span class="line">        apply <span class="string">plugin :</span> <span class="string">'java-library'</span></span><br><span class="line">        apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line"></span><br><span class="line">        dependencies &#123;</span><br><span class="line">            api <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">            api project(<span class="string">':microservice_bean'</span>)</span><br><span class="line">            api project(<span class="string">':microservice_common'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-配置公共子模块">2.3 配置公共子模块</h3><p>创建bean和common模块</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jar包后的名字,根据需要自定义</span></span><br><span class="line">archivesBaseName = <span class="string">'common'</span></span><br><span class="line"><span class="comment">// 因为它没有主程序入口，也不需要它达成springboot的jar包</span></span><br><span class="line">bootJar.enabled = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="2-4-配置Service服务类">2.4 配置Service服务类</h3><p>首先创建service模块服务，下面在分别创建order和user服务，因为service亚父工程不需要jar包，所以在<code>build.gradle</code>配置，同时删除src等其他非必须文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要打可执行jar包</span></span><br><span class="line">bootJar &#123;</span><br><span class="line">    enabled = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在子模块的build.gradle中进行配置，此时根据需要进行依赖的引入，不过此时不需要进行版本号的编写，版本号统一由父工程进行管理；下面的文件因为版本依赖等已经由父工程配置了，因此无需额外配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">archivesBaseName = <span class="string">'order'</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">'com.shawn'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-api:5.8.1'</span></span><br><span class="line">    testRuntimeOnly <span class="string">'org.junit.jupiter:junit-jupiter-engine:5.8.1'</span></span><br><span class="line">    <span class="comment">//implementation 'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bootJar &#123;</span></span><br><span class="line"><span class="comment">//    archiveClassifier = 'boot'</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>最后如果需要将其他模块的bean加入Spring管理，注意在主启动类添加包扫描路径<code>@ComponentScan(&quot;com.shawn&quot;)</code>，最后在对于的目录下进行打包<code>gradle build</code>，或者IDEA点击bootJar也是打包可执行Jar包(非jar按钮)</p><hr><p>参考</p><p><a href="https://www.bilibili.com/video/BV1yT41137Y7" target="_blank" rel="noopener" title="https://www.bilibili.com/video/BV1yT41137Y7">https://www.bilibili.com/video/BV1yT41137Y7</a></p><p><a href="https://blog.csdn.net/qyb19970829/article/details/110649629" target="_blank" rel="noopener" title="https://blog.csdn.net/qyb19970829/article/details/110649629">https://blog.csdn.net/qyb19970829/article/details/110649629</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Gradle入门&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Gradle 是一款Google 推出的基于 JVM、通用灵活的项目构建工具，支持 Maven，JCenter 多种第三方仓库;支持传递性依赖管理、废弃了繁杂的xml 文件，转而使用简洁的、支持多种语言(例如：java、groovy 等)的 build 脚本文件；&lt;br&gt;
官网地址: &lt;a href=&quot;https://gradle.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://gradle.org/&quot;&gt;https://gradle.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为Java开发程序员,如果想下载Spring、SpringBoot等Spring家族的源码，基本上基于Gradle构建的，所以虽然目前市面上常见的项目构建工具有&lt;strong&gt;Ant、Maven、Gradle，主流还是Maven，但是未来趋势Gradle&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://www.shawn22.xyz/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>OAuth三方授权登录</title>
    <link href="https://www.shawn22.xyz/posts/7f7f3f72.html"/>
    <id>https://www.shawn22.xyz/posts/7f7f3f72.html</id>
    <published>2022-10-31T13:42:46.000Z</published>
    <updated>2022-10-31T13:46:15.555Z</updated>
    
    <content type="html"><![CDATA[<h1>一、OAuth简介</h1><h2 id="1、OAuth2-0介绍">1、OAuth2.0介绍</h2><h3 id="1-1-介绍">1.1 介绍</h3><blockquote><p>OAuth协议：<a href="https://www.rfc-editor.org/rfc/rfc6749" target="_blank" rel="noopener" title="https://www.rfc-editor.org/rfc/rfc6749">https://www.rfc-editor.org/rfc/rfc6749</a></p></blockquote><p>OAuth（Open Authorization）是一个关于授权（authorization）的开放网络标准，允许用户授权第三方 应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他 们数据的所有内容。OAuth在全世界得到广泛应用，目前的版本是2.0版。</p><p><strong>协议特点</strong></p><ul><li>简单：不管是OAuth服务提供者还是应用开发者，都很易于理解与使用；</li><li>安全：没有涉及到用户密钥等信息，更安全更灵活；</li><li>开放：任何服务提供商都可以实现OAuth，任何软件开发商都可以使用OAuth；</li></ul><a id="more"></a><h3 id="1-2-应用场景">1.2 应用场景</h3><ul><li><p><strong>原生app授权</strong>：app登录请求后台接口，为了安全认证，所有请求都带token信息，如果登录验证、 请求后台数据</p></li><li><p><strong>前后端分离单页面应用</strong>：前后端分离框架，前端请求后台数据，需要进行oauth2安全认证</p></li><li><p><strong>第三方应用授权登录</strong>，比如QQ，微博，微信的授权登录</p></li></ul><p><img src="https://img-blog.csdnimg.cn/41b8875b5c9e4c38b64f4dc8db1bfe5d.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-3-基本概念">1.3 基本概念</h3><blockquote><p>OAuth的作用就是让&quot;客户端&quot;安全可控地获取&quot;用户&quot;的授权，与&quot;服务提供商&quot;进行交互</p></blockquote><ul><li><p><strong>Resource owner（资源拥有者）</strong>：拥有该资源的最终用户，他有访问资源的账号密码；</p></li><li><p><strong>Resource server（资源服务器）</strong>：受保护资源所在的服务器，如果请求包含正确的访问令牌，就可以访问受保护的资源；</p></li><li><p><strong>Client（客户端）</strong>：请求访问资源的客户端，可以是浏览器、移动设备或者服务器，客户端会携带访问令牌访问资源服务器上的资源；</p></li><li><p><strong>Authorization server（认证服务器）</strong>：负责认证客户端身份的服务器，如果客户端认证通过，会给客户端发放访问资源服务器的令牌。</p></li></ul><h3 id="1-4-优缺点">1.4 优缺点</h3><p><strong>优点</strong></p><ul><li><p>更安全，客户端不接触用户密码，服务器端更易集中保护</p></li><li><p>广泛传播并被持续采用</p></li><li><p>短寿命和封装的token</p></li><li><p>资源服务器和授权服务器解耦</p></li><li><p>集中式授权，简化客户端</p></li><li><p>HTTP/JSON友好，易于请求和传递token</p></li><li><p>考虑多种客户端架构场景</p></li><li><p>客户可以具有不同的信任级别</p></li></ul><p><strong>缺点</strong></p><ul><li><p>协议框架太宽泛，造成各种实现的兼容性和互操作性差</p></li><li><p>不是一个认证协议，本身并不能告诉你任何用户信息</p></li></ul><h2 id="2、OAuth授权模式">2、OAuth授权模式</h2><h3 id="2-1-四种授权模式">2.1 四种授权模式</h3><blockquote><p>不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：<strong>客户端 ID（client ID）<strong>和</strong>客户端密钥（client secret）</strong>。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的</p></blockquote><ul><li><p><strong>Authorization Code（授权码模式）</strong>：正宗的<code>OAuth2</code>的授权模式，客户端先将用户导向认证服务器，认证用户成功后获取授权码，然后进行授权，最后根据授权码获取访问令牌；</p></li><li><p><strong>Implicit（隐藏式）</strong>：和授权码模式相比，取消了获取授权码的过程，直接获取访问令牌；</p></li><li><p><strong>Password（密码模式）</strong>：客户端直接向用户获取用户名和密码，之后向认证服务器获取访问令牌；</p></li><li><p><strong>Client Credentials（客户端凭证模式）</strong>：客户端直接通过客户端认证（比如client_id和client_secret）从认证服务器获取访问令牌。</p></li></ul><p>一般来说，<code>授权码模式</code>和<code>密码模式</code>是两种常用的授权模式</p><h3 id="2-2-授权码模式">2.2 授权码模式</h3><p>指应用先申请一个授权码，然后再用这个授权码获取令牌</p><p><strong>流程</strong>：</p><ul><li><p>客户端将用户导向认证服务器的授权页面;</p></li><li><p>用户在认证服务器页面登录并授权；</p></li><li><p>认证服务器返回授权码给客户端；</p></li><li><p>客户端将授权码传递给客户端所在的后端服务（也可以是自己的认证服务器），由后端服务在后端请求认证服务器获取令牌，并返回给客户端。</p></li></ul><h3 id="2-3-密码模式">2.3 密码模式</h3><p>如果用户信任应用，应用可以直接携带用户的用户名和密码，直接申请令牌</p><p><strong>流程</strong>：</p><ul><li><p>客户端要求用户提供用户名和密码；</p></li><li><p>客户端携带用户名和密码，访问授权服务器；</p></li><li><p>授权服务器验证用户身份之后，直接返回令牌。</p></li></ul><h1>二、三方授权登录</h1><h2 id="1、需求介绍">1、需求介绍</h2><p>自研应用需要扩展时，绕不开的就是集成其他社交软件的三方登录，比如微信/QQ/微博/Github等等，而这用到的模式属于<strong>OAuth的授权码方式授权</strong>，下面我就介绍几种三方授权登录教程，同时给予数据库扩展设计思路</p><h2 id="2、第三方授权登录数据库设计">2、第三方授权登录数据库设计</h2><blockquote><p>第三方授权登录的时候，第三方的用户信息是存数据库原有的 user 表还是新建一张表呢 ？答案得看具体项目。三方授权登录之后，第三方用户信息一般都会返回用户唯一的标志 **openid **或者 **unionid **或者 <strong>id</strong>，具体是什么得看第三方，比如 github 的是 id</p></blockquote><h3 id="2-1-直接通过注册的方式保存到数据库">2.1 直接通过注册的方式保存到数据库</h3><ul><li><p>如果网站<strong>没有注册功能的</strong>，直接通过第三方授权登录，授权成功之后，可以直接把第三的用户信息注册保存到自己数据库的 user 表里面。<strong>典型的例子就是微信公众号的授权登录</strong>。</p></li><li><p>如果网站<strong>有注册功能的</strong>，也可以通过第三方授权登录，授权成功之后，也可以直接<strong>把第三的用户信息注册保存到自己数据库的 user 表里面</strong>（但是密码是后端自动生成的，用户也不知道，只能用第三方授权登录），这样子的第三方的用户和原生注册的用户信息都在同一张表了，这种情况得看自己项目的具体情况。</p></li></ul><h3 id="2-2-增加映射表">2.2 增加映射表</h3><p>现实中很多网站都有多种账户登录方式，比如可以用网站的注册 id 登录，还可以用手机号登录，可以用 QQ 登录等等。数据库中都是有映射关系，QQ、手机号等都是映射在网站的注册 id 上。保证不管用什么方式登录，只要去查映射关系，发现是映射在网站注册的哪个 id 上，就让哪个 id 登录成功。</p><h3 id="2-3-建立一个-oauth-表">2.3 建立一个 oauth 表</h3><p><strong>建立一个 oauth 表，一个 id 列，记录对应的用户注册表的 id</strong>，然后你有多少个第三方登陆功能，你就建立多少列，<strong>记录第三方登陆接口返回的 openid</strong>；第三方登陆的时候，通过这个表的记录的 openid 获取 id 信息，如果存在通过 id 读取注册表然后用 session 记录相关信息。不存在就转向用户登陆/注册界面要用户输入本站注册的账户进行 openid 绑定或者新注册账户信息进行绑定。</p><h2 id="3、数据库实战举例">3、数据库实战举例</h2><ul><li><p>用户表分为<strong>用户基础信息表</strong> + <strong>用户授权信息表</strong>；</p></li><li><p>所有和授权相关，都放在用户信息授权表，<strong>用户信息表和用户授权表是一对多的关系</strong></p></li></ul><p>用户基础信息表</p><table><thead><tr><th>id</th><th>user_name</th><th>user_password</th><th>user_mobile</th><th>state</th><th>more</th></tr></thead><tbody><tr><td>用户id</td><td>用户名</td><td>用户密码</td><td>手机号码</td><td>账号状态</td><td>其他信息</td></tr></tbody></table><p>用户授权信息表</p><table><thead><tr><th>id</th><th>user_id</th><th>login_type</th><th>openid</th><th>access_token</th></tr></thead><tbody><tr><td>主键id</td><td>用户id</td><td>第三方登录类型(微信/QQ/微博等)</td><td>第三方应用的唯一标识</td><td>第三方的保存 token</td></tr></tbody></table><h1>三、GitHub 登录</h1><h2 id="1、概述">1、概述</h2><blockquote><p>文档：<a href="https://docs.github.com/cn/developers/apps/building-oauth-apps/creating-an-oauth-app" target="_blank" rel="noopener" title="https://docs.github.com/cn/developers/apps/building-oauth-apps/creating-an-oauth-app">https://docs.github.com/cn/developers/apps/building-oauth-apps/creating-an-oauth-app</a></p></blockquote><p>Github的OAuth 授权原理大致如下</p><ul><li><p>A网站让用户跳转到 GitHub</p></li><li><p>GitHub 要求用户登录，然后询问&quot;A 网站要求获得 xx 权限，你是否同意&quot;</p></li><li><p>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码</p></li><li><p>A 网站使用授权码，向 GitHub 请求令牌</p></li><li><p>GitHub 返回令牌</p></li><li><p>A 网站使用令牌，向 GitHub 请求用户数据</p></li></ul><p><img src="https://img-blog.csdnimg.cn/a630be31a519481096e786dd3bc9937c.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、应用登记">2、应用登记</h2><blockquote><p>一个应用要求 OAuth 授权，必须先到对方网站登记，让对方知道是谁在请求，所以要先去 GitHub 登记一下（免费）。<a href="https://links.jianshu.com/go?to=https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app" target="_blank" rel="noopener" title="GitHub的文档">GitHub的文档</a></p></blockquote><p>首先访问<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener" title="Authorized OAuth App">Authorized OAuth App</a>，填写登记表进行创建（进入 Github 的 Setting 页面，点击 Developer settings，选择OAuth Apps，选择new OAuth App）</p><p><img src="https://img-blog.csdnimg.cn/f1da7eb2898548f5807ccffbdf706575.png#pic_center" alt="在这里插入图片描述"></p><p>注意回调地址要与我们待会写的接口地址匹配，否则会报错，进入应用后就能看见我们应用了，secrets没有的话可以生成，注意保存</p><ul><li><p><strong>Client ID</strong></p></li><li><p><strong>Client secrets</strong></p></li></ul><h2 id="3、Github授权登录原理">3、Github授权登录原理</h2><h3 id="3-1-请求用户的-GitHub-身份">3.1 请求用户的 GitHub 身份</h3><p>它会提示用户使用他们可以用于登录和授权您的应用程序的特定帐户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://github.com/login/oauth/authorize</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>client_id</td><td>string</td><td><strong>必填</strong>。<a href="https://links.jianshu.com/go?to=https://github.com/settings/applications/new" target="_blank" rel="noopener" title="注册">注册</a>时从 GitHub 收到的客户端 ID</td></tr><tr><td>redirect_uri</td><td>string</td><td>您的应用程序中的 URL 将在授权后发送用户，和应用一致，不填为应用的回调地址。请参阅下面有关<a href="https://links.jianshu.com/go?to=https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#redirect-urls" target="_blank" rel="noopener" title="重定向 url">重定向 url</a>的详细信息</td></tr><tr><td>login</td><td>string</td><td>建议用于登录和授权应用程序的特定帐户</td></tr><tr><td>scope</td><td>string</td><td><a href="https://docs.github.com/cn/apps/building-oauth-apps/understanding-scopes-for-oauth-apps" target="_blank" rel="noopener" title="范围">范围</a>的空格分隔列表。 如果未提供，则 <code>scope</code> 默认为未授权应用程序的任何范围的用户的空列表。 对于已向应用程序授权作用域的用户，不会显示含作用域列表的 OAuth 授权页面。 相反，通过用户向应用程序授权的作用域集，此流程步骤将自动完成。 例如，如果用户已经执行了两次 Web 流，并且已授权一个具有 <code>user</code> 范围的令牌和另一个具有 <code>repo</code> 范围的令牌，则不提供 <code>scope</code> 的第三个 Web 流将收到具有 <code>user</code> 和 <code>repo</code> 范围的令牌</td></tr><tr><td>state</td><td>string</td><td>一个不可猜测的随机字符串。它用于防止跨站点请求伪造攻击</td></tr><tr><td>allow_signup</td><td>string</td><td>在 OAuth 流程期间，是否会为未经身份验证的用户提供注册 GitHub 的选项。默认值为<code>true</code>. <code>false</code>在政策禁止注册时使用</td></tr></tbody></table><h3 id="3-2-用户被-GitHub-重定向回站点">3.2 用户被 GitHub 重定向回站点</h3><p>如果用户接受您的请求，GitHub 将重定向回您的站点，其中包含一个临时<code>code</code>的代码参数以及您在上一步中提供的<code>state</code>参数状态。临时代码将在 10 分钟后过期。如果状态不匹配，则第三方创建了请求，您应该中止该过程。也就是重回到我们的站点，也就是发送了<code>http://localhost:8080/oauth/githubCallback</code>(自定义)，并且携带了<code>code</code>将此交换<code>code</code>为访问令牌<code>OAUTH-TOKEN</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>client_id</td><td>string</td><td>**必需。**您从 GitHub 收到的 OAuth 应用程序的客户端 ID</td></tr><tr><td>client_secret</td><td>string</td><td>**必需。**您从 GitHub 收到的 OAuth 应用程序的客户端密码</td></tr><tr><td>code</td><td>string</td><td>**必需。**您收到的作为对步骤 1 的响应的代码。</td></tr><tr><td>redirect_uri</td><td>string</td><td>授权后发送用户的应用程序中的 URL</td></tr></tbody></table><h3 id="3-3-使用访问令牌访问API">3.3 使用访问令牌访问API</h3><p>访问令牌允许代表用户向 API 发出请求，获取用户的基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Authorization: token OAUTH-TOKEN</span><br><span class="line">GET https://api.github.com/user</span><br></pre></td></tr></table></figure><h2 id="4、代码实战">4、代码实战</h2><h3 id="4-1-配置环境">4.1 配置环境</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">github:</span></span><br><span class="line">  <span class="attr">clientId:</span> <span class="string">ab3d67630b13025715cf</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="string">29f8c274c7634aa988f42c6507692da4fe118be8</span></span><br><span class="line">  <span class="attr">directUrl:</span> <span class="string">http://localhost:8080/oauth/githubCallback</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="4-2-配置bean类">4.2 配置bean类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"github"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitHubOAuthInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clientSecret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String directUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-配置state工具类">4.3 配置state工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OauthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; stateSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机state字符串，这里可以存入Redis或者Set，返回时进行校验，不过要注意失效时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">genState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String state = UUID.randomUUID().toString();</span><br><span class="line">        stateSet.add(state);</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验state，防止CSRF</span></span><br><span class="line"><span class="comment">     * 校验成功后删除</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkState</span><span class="params">(String state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stateSet.contains(state))&#123;</span><br><span class="line">            stateSet.remove(state);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-认证与授权">4.4 认证与授权</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/oauth"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GitHubOAuthInfo gitHubOAuthInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OauthService oauthService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Github认证令牌服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCESS_TOKEN_URL = <span class="string">"https://github.com/login/oauth/access_token"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Github认证服务器地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORIZE_URL = <span class="string">"https://github.com/login/oauth/authorize"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Github资源服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESOURCE_URL = <span class="string">"https://api.github.com/user"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前端获取认证的URL，由后端拼接好返回前端进行请求</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/githubLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">githubLogin</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成并保存state，忽略该参数有可能导致CSRF攻击</span></span><br><span class="line">        String state = oauthService.genState();</span><br><span class="line">        <span class="comment">// 传递参数response_type、client_id、state、redirect_uri</span></span><br><span class="line">        String param = <span class="string">"response_type=code&amp;"</span> + <span class="string">"client_id="</span> + gitHubOAuthInfo.getClientId() + <span class="string">"&amp;state="</span> + state</span><br><span class="line">                + <span class="string">"&amp;redirect_uri="</span> + gitHubOAuthInfo.getDirectUrl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、请求Github认证服务器</span></span><br><span class="line">        response.sendRedirect(AUTHORIZE_URL + <span class="string">"?"</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GitHub回调方法</span></span><br><span class="line"><span class="comment">     *  code 授权码</span></span><br><span class="line"><span class="comment">     * state 应与发送时一致，防止CSRF攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/githubCallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">githubCallback</span><span class="params">(String code, String state, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 验证state，如果不一致，可能被CSRF攻击</span></span><br><span class="line">        <span class="keyword">if</span>(!oauthService.checkState(state)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"State验证失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置JSONObject请求体</span></span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"client_id"</span>,gitHubOAuthInfo.getClientId());</span><br><span class="line">        jsonObject.put(<span class="string">"client_secret"</span>,gitHubOAuthInfo.getClientSecret());</span><br><span class="line">        jsonObject.put(<span class="string">"code"</span>,code);</span><br><span class="line"></span><br><span class="line">        String accessTokenRequestJson = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求accessToken，成功获取到后进行下一步信息获取,这里第一次可能会超时</span></span><br><span class="line">            accessTokenRequestJson = HttpRequest.post(ACCESS_TOKEN_URL)</span><br><span class="line">                    .header(<span class="string">"Accept"</span>,<span class="string">" application/json"</span>)</span><br><span class="line">                    .body(jsonObject.toJSONString())</span><br><span class="line">                    .timeout(<span class="number">30000</span>)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">"请求令牌耗时：&#123;&#125;"</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"请求令牌API访问异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"获取到的accessToken为：&#123;&#125;"</span>,accessTokenRequestJson);</span><br><span class="line"></span><br><span class="line">        JSONObject accessTokenObject = JSONObject.parseObject(accessTokenRequestJson);</span><br><span class="line">        <span class="comment">// 如果返回的数据包含error，表示失败，错误原因存储在error_description</span></span><br><span class="line">        <span class="keyword">if</span>(accessTokenObject.containsKey(<span class="string">"error"</span>)) &#123;</span><br><span class="line">            log.error(<span class="string">"错误，原因：&#123;&#125;"</span>,accessTokenRequestJson);</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(<span class="string">"error_description，令牌获取错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果返回结果中包含access_token，表示成功</span></span><br><span class="line">        <span class="keyword">if</span>(!accessTokenObject.containsKey(<span class="string">"access_token"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(<span class="string">"获取token失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到token和token_type</span></span><br><span class="line">        String accessToken = (String) accessTokenObject.get(<span class="string">"access_token"</span>);</span><br><span class="line">        String tokenType = (String) accessTokenObject.get(<span class="string">"token_type"</span>);</span><br><span class="line">        String userInfo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求资源服务器获取个人信息</span></span><br><span class="line">            userInfo = HttpRequest.get(RESOURCE_URL)</span><br><span class="line">                    .header(<span class="string">"Authorization"</span>, tokenType + <span class="string">" "</span> + accessToken)</span><br><span class="line">                    .timeout(<span class="number">5000</span>)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">"请求令牌耗时：&#123;&#125;"</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"请求令牌API访问异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JSONObject userInfoJson = JSONObject.parseObject(userInfo);</span><br><span class="line">        <span class="keyword">return</span> userInfoJson.toJSONString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后浏览器访问<code>http://localhost:8080/oauth/githubLogin</code>，即可进入用户授权状态，授权后会进行跳转，自动获取用户的基本信息，后面可以和数据库联动</p><h1>四、QQ登录</h1><h2 id="1、概述-v2">1、概述</h2><blockquote><p>官方参考文档：<a href="https://wiki.connect.qq.com/oauth2-0%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener" title="https://wiki.connect.qq.com/oauth2-0简介">https://wiki.connect.qq.com/oauth2-0简介</a></p></blockquote><p>大体和Github登录类似，QQ登录OAuth2.0总体处理流程如下</p><ul><li><p>申请接入，获取appid和apikey；</p></li><li><p>开发应用，并设置协作者帐号进行测试联调；</p></li><li><p>放置QQ登录按钮；</p></li><li><p>通过用户登录验证和授权，获取Access Token；</p></li><li><p>通过Access Token获取用户的OpenID；</p></li><li><p>调用OpenAPI，来请求访问或修改用户授权的资源。</p></li></ul><h2 id="2、应用创建">2、应用创建</h2><p>首先没有注册的开发者需要先注册并实名，去<a href="https://app.open.qq.com/" target="_blank" rel="noopener" title="开发者平台">开发者平台</a>注册并实名，认证通过后进入<a href="https://connect.qq.com/manage.html#/" target="_blank" rel="noopener" title="QQ 互联管理中心">QQ 互联管理中心</a>，创建一个<strong>网站应用</strong>新应用（需要先审核个人身份），然后注册应用信息，和 GitHub 的步骤类似</p><p>注册后，可以看到应用的 <strong>APP ID、APP Key</strong>，以及被允许的接口，当然只有一个获取用户信息</p><h2 id="3、QQ授权登录原理">3、QQ授权登录原理</h2><blockquote><p>参考：<a href="https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0" target="_blank" rel="noopener" title="https://wiki.connect.qq.com/准备工作_oauth2-0">https://wiki.connect.qq.com/准备工作_oauth2-0</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/263a4c1d7f134f82963630c69c521885.jpeg#pic_center" alt="在这里插入图片描述"></p><h3 id="3-1-获取Authorization-Code">3.1 获取Authorization Code</h3><p>打开浏览器，访问如下地址（请将client_id，redirect_uri，scope等参数值替换为你自己的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=[YOUR_APPID]&amp;redirect_uri=[YOUR_REDIRECT_URI]&amp;scope=[THE_SCOPE]</span><br></pre></td></tr></table></figure><p>如果用户点击**“授权并登录”<strong>，则成功跳转到指定的</strong>redirect_uri**，并跟上<strong>Authorization Code</strong>（注意此code会在10分钟内过期）</p><h3 id="3-2-通过Authorization-Code获取Access-Token">3.2 通过Authorization Code获取Access Token</h3><blockquote><p>获取到的access token具有<strong>30天有效期</strong>，用户再次登录时自动刷新，第三方网站可存储access token信息，以便后续调用OpenAPI访问和修改用户信息时使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=[YOUR_APP_ID]&amp;client_secret=[YOUR_APP_Key]&amp;code=[The_AUTHORIZATION_CODE]&amp;redirect_uri=[YOUR_REDIRECT_URI]</span><br></pre></td></tr></table></figure><h3 id="3-3-使用Access-Token获取用户信息">3.3 使用Access Token获取用户信息</h3><p>发送请求到如下地址，获取用户的<strong>OpenID</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://graph.qq.com/oauth2.0/me?access_token=YOUR_ACCESS_TOKEN</span><br></pre></td></tr></table></figure><p>使用Access Token以及OpenID来访问和修改用户数据，建议网站在用户登录后，即调用get_user_info接口，获得该用户的头像、昵称并显示在网站上，使用户体验统一。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://graph.qq.com/user/get_user_info?access_token=YOUR_ACCESS_TOKEN&amp;oauth_consumer_key=YOUR_APP_ID&amp;openid=YOUR_OPENID</span><br></pre></td></tr></table></figure><h2 id="4、代码实战-v2">4、代码实战</h2><h3 id="4-1-配置环境-v2">4.1 配置环境</h3><p>依赖和上面一样，主要配置yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">qq:</span></span><br><span class="line">  <span class="attr">qqAppId:</span> <span class="number">101474821</span></span><br><span class="line">  <span class="attr">qqAppKey:</span> <span class="string">00d91cc7f636d71faac8629d559f9fee</span></span><br><span class="line">  <span class="attr">directUrl:</span> <span class="string">http://localhost:8080/oauth/qqCallback</span></span><br></pre></td></tr></table></figure><h3 id="4-2-配置bean类与工具类">4.2 配置bean类与工具类</h3><p>state工具类和上文一样，bean类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"qq"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QqOAuthInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String qqAppId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String qqAppKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String directUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-认证与授权">4.3 认证与授权</h3><p>qq的比较麻烦，需要实名认证，创建应用也需要备案域名等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/oauth"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QqAuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QqOAuthInfo qqOAuthInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OauthService oauthService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ认证服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORIZE_URL = <span class="string">"https://graph.qq.com/oauth2.0/authorize"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ认证令牌服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCESS_TOKEN_URL = <span class="string">"https://graph.qq.com/oauth2.0/token"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ的openId Url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPEN_ID_URL = <span class="string">"https://graph.qq.com/oauth2.0/me"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ的用户数据URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_INFO_URL = <span class="string">"https://graph.qq.com/user/get_user_info"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前端获取认证的URL，由后端拼接好返回前端进行请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/qqLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">githubLogin</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成并保存state，忽略该参数有可能导致CSRF攻击</span></span><br><span class="line">        String state = oauthService.genState();</span><br><span class="line">        <span class="comment">// 传递参数response_type、client_id、state、redirect_uri</span></span><br><span class="line">        String param = <span class="string">"response_type=code&amp;"</span> + <span class="string">"client_id="</span> + qqOAuthInfo.getQqAppId() + <span class="string">"&amp;state="</span> + state</span><br><span class="line">                + <span class="string">"&amp;redirect_uri="</span> + qqOAuthInfo.getDirectUrl();</span><br><span class="line"></span><br><span class="line">        System.out.println(AUTHORIZE_URL + <span class="string">"?"</span> + param);</span><br><span class="line">        <span class="comment">// 请求QQ认证服务器</span></span><br><span class="line">        response.sendRedirect(AUTHORIZE_URL + <span class="string">"?"</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * QQ回调方法</span></span><br><span class="line"><span class="comment">     * code 授权码</span></span><br><span class="line"><span class="comment">     * state 应与发送时一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/qqCallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">githubCallback</span><span class="params">(String code, String state, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 验证state，如果不一致，可能被CSRF攻击</span></span><br><span class="line">        <span class="keyword">if</span>(!oauthService.checkState(state)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"State验证失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置请求参数，fmt参数因历史原因，默认是x-www-form-urlencoded格式，如果填写json，则返回json格式</span></span><br><span class="line">        String param = <span class="string">"grant_type=authorization_code&amp;code="</span> + code + <span class="string">"&amp;redirect_uri="</span> +</span><br><span class="line">                qqOAuthInfo.getDirectUrl() + <span class="string">"&amp;client_id="</span> + qqOAuthInfo.getQqAppId() +</span><br><span class="line">                <span class="string">"&amp;client_secret="</span> + qqOAuthInfo.getQqAppKey() + <span class="string">"&amp;fmt=json"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String accessTokenRequestJson = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求accessToken，成功获取到后进行下一步信息获取,这里第一次可能会超时</span></span><br><span class="line">            accessTokenRequestJson = HttpRequest.get(ACCESS_TOKEN_URL)</span><br><span class="line">                    .body(param)</span><br><span class="line">                    .timeout(<span class="number">30000</span>)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">"请求令牌耗时：&#123;&#125;"</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"请求令牌API访问异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * result示例：</span></span><br><span class="line"><span class="comment">         * 成功：access_token=A24B37194E89A0DDF8DDFA7EF8D3E4F8&amp;expires_in=7776000&amp;refresh_token=BD36DADB0FE7B910B4C8BBE1A41F6783</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        log.info(<span class="string">"获取到的accessToken为：&#123;&#125;"</span>,accessTokenRequestJson);</span><br><span class="line"></span><br><span class="line">        JSONObject accessTokenObject = JSONObject.parseObject(accessTokenRequestJson);</span><br><span class="line">        <span class="comment">// 如果返回的数据包含error，表示失败，错误原因存储在error_description</span></span><br><span class="line">        <span class="keyword">if</span>(accessTokenObject.containsKey(<span class="string">"error"</span>)) &#123;</span><br><span class="line">            log.error(<span class="string">"错误，原因：&#123;&#125;"</span>,accessTokenRequestJson);</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(<span class="string">"error_description，令牌获取错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果返回结果中包含access_token，表示成功</span></span><br><span class="line">        <span class="keyword">if</span>(!accessTokenObject.containsKey(<span class="string">"access_token"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(<span class="string">"获取token失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到token和token_type</span></span><br><span class="line">        String accessToken = (String) accessTokenObject.get(<span class="string">"access_token"</span>);</span><br><span class="line">        String meParams = <span class="string">"access_token="</span> + accessToken;</span><br><span class="line">        String meBody = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求accessToken，成功获取到后进行下一步信息获取,这里第一次可能会超时</span></span><br><span class="line">            meBody = HttpRequest.get(OPEN_ID_URL)</span><br><span class="line">                    .body(meParams)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">"请求令牌耗时：&#123;&#125;"</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"openId访问异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 成功返回如下：callback( &#123;"client_id":"YOUR_APPID","openid":"YOUR_OPENID"&#125; );</span></span><br><span class="line">        JSONObject meJsonObject = JSONObject.parseObject(meBody);</span><br><span class="line">        <span class="comment">// 取出openid</span></span><br><span class="line">        String openid = meJsonObject.getString(<span class="string">"openid"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Access Token以及OpenID来访问和修改用户数据</span></span><br><span class="line">        String userInfoParam = <span class="string">"access_token="</span> + accessToken + <span class="string">"&amp;oauth_consumer_key="</span> + qqOAuthInfo.getQqAppId() + <span class="string">"&amp;openid="</span> + openid;</span><br><span class="line">        String userInfo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 请求accessToken，成功获取到后进行下一步信息获取,这里第一次可能会超时</span></span><br><span class="line">            userInfo = HttpRequest.get(USER_INFO_URL)</span><br><span class="line">                    .body(userInfoParam)</span><br><span class="line">                    .timeout(<span class="number">5000</span>)</span><br><span class="line">                    .execute().body();</span><br><span class="line">            log.info(<span class="string">"请求令牌耗时：&#123;&#125;"</span>,System.currentTimeMillis()-start);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"用户数据访问异常，异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JSONObject userInfoJson = JSONObject.parseObject(userInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userInfoJson.toJSONString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>五、微信登录</h1><blockquote><p>官方文档：<a href="https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html" target="_blank" rel="noopener" title="https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html">https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html</a></p></blockquote><p>微信的账号创建更加麻烦，需要公司认证，过程和上面方法类似，其他可以参考</p><p><a href="https://juejin.cn/post/7093138054935740453" target="_blank" rel="noopener" title="Spring Boot + OAuth2.0 实现微信扫码登录，这才叫优雅">Spring Boot + OAuth2.0 实现微信扫码登录，这才叫优雅</a></p><p><a href="https://www.jianshu.com/p/549ae94180f0" target="_blank" rel="noopener" title="Spring boot + Vue 微信第三方登录实践">Spring boot + Vue 微信第三方登录实践</a></p><p><a href="https://blog.csdn.net/weixin_45377770/article/details/109901312" target="_blank" rel="noopener" title="第三方登录之微信扫码登录">第三方登录之微信扫码登录</a></p><p><a href="https://mp.weixin.qq.com/s/FeeXH5_A2nYVbzVkCpE13A" target="_blank" rel="noopener" title="微信扫码登录很难吗？5步帮你搞定">微信扫码登录很难吗？5步帮你搞定</a></p><hr><p>参考文章</p><p><a href="https://zhuanlan.zhihu.com/p/509212673" target="_blank" rel="noopener" title="OAuth2.0 详解">OAuth2.0 详解</a></p><p><a href="https://blog.csdn.net/hbtj_1216/article/details/123765839" target="_blank" rel="noopener" title="OAuth2.0简介">OAuth2.0简介</a></p><p><a href="https://developer.aliyun.com/article/918726" target="_blank" rel="noopener" title="github 授权登录教程与如何设计第三方授权登录的用户表">github 授权登录教程与如何设计第三方授权登录的用户表</a></p><p><a href="https://www.jianshu.com/p/471d2b130939" target="_blank" rel="noopener" title="GitHub OAuth第三方登录">GitHub OAuth第三方登录</a></p><p><a href="https://jitwxs.cn/33ad9e35.html" target="_blank" rel="noopener" title="Web 三方登录实现">Web 三方登录实现</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、OAuth简介&lt;/h1&gt;
&lt;h2 id=&quot;1、OAuth2-0介绍&quot;&gt;1、OAuth2.0介绍&lt;/h2&gt;
&lt;h3 id=&quot;1-1-介绍&quot;&gt;1.1 介绍&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;OAuth协议：&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6749&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://www.rfc-editor.org/rfc/rfc6749&quot;&gt;https://www.rfc-editor.org/rfc/rfc6749&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OAuth（Open Authorization）是一个关于授权（authorization）的开放网络标准，允许用户授权第三方 应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他 们数据的所有内容。OAuth在全世界得到广泛应用，目前的版本是2.0版。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;协议特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单：不管是OAuth服务提供者还是应用开发者，都很易于理解与使用；&lt;/li&gt;
&lt;li&gt;安全：没有涉及到用户密钥等信息，更安全更灵活；&lt;/li&gt;
&lt;li&gt;开放：任何服务提供商都可以实现OAuth，任何软件开发商都可以使用OAuth；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Gateway与Nacos相关配置</title>
    <link href="https://www.shawn22.xyz/posts/95744580.html"/>
    <id>https://www.shawn22.xyz/posts/95744580.html</id>
    <published>2022-10-31T13:41:33.000Z</published>
    <updated>2022-10-31T13:46:15.555Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Nacos Config 配置项动态刷新</h1><h2 id="1、介绍与环境引入">1、介绍与环境引入</h2><h3 id="1-1-简介">1.1 简介</h3><blockquote><p>Nacos官方手册：<a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener" title="https://nacos.io/zh-cn/docs/quick-start.html">https://nacos.io/zh-cn/docs/quick-start.html</a></p></blockquote><p>动态刷新通过线上的配置更新进行推送，不需要代码改动也不需要重启服务器，这样可以更快更方便的进行服务器配置文件修改(因为重启Tomcat往往会消耗大量的时间)。首先需要引入相关依赖，这里默认已经启动Nacos服务器了，可以通过<code>http://localhost:8848/nacos/index.html</code>查看</p><a id="more"></a><h3 id="1-2-环境引入">1.2 环境引入</h3><ul><li><p>Nacos 既能用作配置管理也能用作服务注册，如果你想要引入 Nacos 的服务发现功能，需要添加的是 <code>nacos-discovery</code> 包；</p></li><li><p>而如果你想引入的是 Nacos 的配置管理功能，则需要添加 nacos-config 包。第二个依赖项是为了让程序在<strong>启动时能够加载本地的 bootstrap 配置文件</strong>，因为 <strong>Nacos 配置中心的连接信息需要配置在 bootstrap 文件</strong>，而**非 application.yml **文件中。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加Nacos Config配置项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 读取bootstrap文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在 Spring Cloud 2020.0.0 版本之后，bootstrap 文件不会被自动加载，你需要主动添加 spring-cloud-starter-bootstrap 依赖项，来开启 bootstrap 的自动加载流程</p></blockquote><p>**为什么集成 Nacos 配置中心必须用到 bootstrap 配置文件呢？**这就要说到 Nacos Config 在项目启动过程中的优先级了。如果你在 Nacos 配置中心里存放了访问 MySQL 数据库的 URL、用户名和密码，而这些数据库配置会被用于其它组件的初始化流程，比如数据库连接池的创建。为了保证应用能够正常启动，我们必须在其它组件初始化之前从 Nacos 读到所有配置项，之后再将获取到的配置项用于后续的初始化流程。</p><p>因此，在服务的启动阶段，你需要通过某种途径<strong>将 Nacos 配置项加载的优先级设置为最高</strong>。而<strong>在 Spring Boot 规范中，bootstrap 文件通常被用于应用程序的上下文引导，bootstrap.yml 文件的加载优先级是高于 application.yml 的</strong>。如果我们将 Nacos Config 的连接串和参数添加到 bootstrap 文件中，就能确保程序在启动阶段优先执行 Nacos Config 远程配置项的读取任务。这就是我们必须将 Nacos Config 连接串配置在 bootstrap 中的原因。</p><h2 id="2、Nacos-Config-本地配置项">2、Nacos Config 本地配置项</h2><h3 id="2-1-配置项举例">2.1 配置项举例</h3><p>首先创建<code>bootstrap.yml</code>文件，在<code> bootstrap.yml </code>文件中添加一些 Nacos Config 配置项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="comment"># 必须把name属性从application.yml迁移过来，否则无法动态刷新</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">coupon-customer-serv</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># nacos config服务器的地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="comment"># prefix: 文件名前缀，默认是spring.application.name</span></span><br><span class="line">        <span class="comment"># 如果没有指定命令空间，则默认命令空间为PUBLIC，如果指定需要写ID</span></span><br><span class="line">        <span class="attr">namespace:</span> </span><br><span class="line">        <span class="comment"># 如果没有配置Group，则默认值为DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="comment"># 从Nacos读取配置项的超时时间</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="comment"># 长轮询超时时间</span></span><br><span class="line">        <span class="attr">config-long-poll-timeout:</span> <span class="number">10000</span>        </span><br><span class="line">        <span class="comment"># 轮询的重试时间</span></span><br><span class="line">        <span class="attr">config-retry-time:</span> <span class="number">2000</span></span><br><span class="line">        <span class="comment"># 长轮询最大重试次数</span></span><br><span class="line">        <span class="attr">max-retry:</span> <span class="number">3</span></span><br><span class="line">        <span class="comment"># 开启监听和自动刷新</span></span><br><span class="line">        <span class="attr">refresh-enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># Nacos的扩展配置项，数字越大优先级越高</span></span><br><span class="line">        <span class="attr">extension-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">redis-config.yml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">EXT_GROUP</span></span><br><span class="line">            <span class="comment"># 动态刷新</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">rabbitmq-config.yml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">EXT_GROUP</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="2-2-配置项详解">2.2 配置项详解</h3><p><strong>文件定位配置项：主要用于匹配 Nacos 服务器上的配置文件</strong></p><ul><li><p><strong>namespace</strong>：Nacos Config 的 namespace 和 Nacos 服务发现阶段配置的 namespace 是同一个概念和用法。我们可以使用 namespace 做多租户（multi-tenant）隔离方案，或者隔离不同环境。我指定了 namespace=dev，应用程序只会去获取 dev 这个命名空间下的配置文件；</p></li><li><p><strong>group</strong>：概念和用法与 Nacos 服务发现中的 group 相同，如<strong>未指定则默认值为 DEFAULT_GROUP</strong>，应用程序只会加载相同 group 下的配置文件；</p></li><li><p><strong>prefix</strong>：需要加载的文件名前缀，默认为当前应用的名称，即 <code>spring.application.name</code>，一般不需要特殊配置；</p></li><li><p><strong>file-extension</strong>：需要加载的文件扩展名，默认为 properties，我改成了 yml(yaml)，还可以选择 xml、json、html 等格式。</p></li></ul><p><strong>超时和重试配置项</strong></p><ul><li><p><strong>timeout</strong>：从 Nacos 读取配置项的超时时间，单位是 ms，<strong>默认值 3000 毫秒</strong>；</p></li><li><p><strong>config-retry-time</strong>：获取配置项失败的重试时间；</p></li><li><p><strong>config-long-poll-timeout</strong>：长轮询超时时间，单位为 ms；</p></li><li><p><strong>max-retry</strong>：最大重试次数。</p></li></ul><blockquote><p>超时和重试配置里提到的<strong>长轮询机制</strong>的工作原理：当 Client 向 Nacos Config 服务端发起一个配置查询请求时，服务端并不会立即返回查询结果，而是会将这个请求 hold 一段时间。如果在这段时间内有配置项数据的变更，那么服务端会触发变更事件，客户端将会监听到该事件，并获取相关配置变更；如果这段时间内没有发生数据变更，那么在这段&quot;hold 时间&quot;结束后，服务端将释放请求。采用长轮询机制可以降低多次请求带来的网络开销，并降低更新配置项的延迟。</p></blockquote><p><strong>通用配置</strong></p><ul><li><p><strong>server-addr</strong>：Nacos Config 服务器地址；</p></li><li><p><strong>refresh-enabled</strong>: 是否开启监听远程配置项变更的事件，默认为 true。</p></li></ul><p><strong>扩展配置</strong></p><ul><li><p><strong>extension-configs</strong>：如果你想要从多个配置文件中获取配置项，那么你可以使用 <code>extension-configs </code>配置多源读取策略。extension-configs 是一个 List 的结构，<strong>每个节点都有 dataId、group 和 refresh 三个属性，分别代表了读取的文件名、所属分组、是否支持动态刷新</strong>。</p><p>在实际的应用中，我们经常需要将一个公共配置项分配给多个微服务使用，比如多个服务共享同一份 Redis、RabbitMQ 中间件连接信息。这时我们就可以在 Nacos Config 中添加一个配置文件，并通过 <strong>extension-configs 配置项</strong>将这个文件作为扩展配置源加到各个微服务中。这样一来，我们就不需要在每个微服务中单独管理通用配置了</p></li></ul><h2 id="3、Nacos-Config-Server文件配置">3、Nacos Config Server文件配置</h2><p>我们在本地启动 Nacos 服务器，打开配置管理模块下的&quot;配置列表&quot;页面，再切换到相应的命名空间下</p><p><img src="https://img-blog.csdnimg.cn/c4bf6d58a54b49769b54b2fae9ecbcf4.png#pic_center" alt="在这里插入图片描述"></p><p>然后创建对应的Config文件，主文件的命名规则为<code>${spring.application.name}-${spring.profile.active}.${file-extension}</code>，如果没写active属性则默认是无；接下来，你就可以将原本配置在<code>本地 application.yml </code>中的配置项转移到 Nacos Config 中了，由于 Data ID 后缀是 yml，所以在编辑配置项的时候，你需要在页面上选择&quot;YAML&quot;作为配置格式。</p><h2 id="4、动态配置推送">4、动态配置推送</h2><p>声明一个布尔值的变量 disableCoupon，并使用 <code>@Value</code> 注解将 Nacos 配置中心里的<code>disableCouponRequest</code> 属性注入进来。我们给 <code>disableCouponRequest </code>属性设置了一个默认值&quot;false&quot;，这样做的目的是<strong>加一层容错机制</strong>。即便 Nacos Config 连接异常无法获取配置项，应用程序也可以使用默认值完成启动加载。</p><p>类头上添加一个 <strong>RefreshScope</strong> 注解，有了这个注解，Nacos Config 中的属性变动就会动态同步到当前类的变量中。如果<strong>不添加 RefreshScope 注解，即便应用程序监听到了外部属性变更，那么类变量的值也不会被刷新</strong>。当然Gateway网关可以自动监听到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;disableCouponRequest:false&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> Boolean disableCoupon;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后server修改配置文件，在springboot即可实现热更新</p><h1>二、基于Nacos实现GateWay动态路由</h1><h2 id="1、前言">1、前言</h2><p>一般Gateway配置路由会在配置文件中写死，当我们想添加新路由的时候还得在routes中添加新路由然后重启服务。这样显然是不太合理的，所以动态路由的好处也随之而来</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> </span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment">#是将请求路径上的服务名配置为小写</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">provider</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://nacos-provider</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/provider/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment"># StripPrefix 数字表示要截断的路径的数量</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">consumer</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/consumer/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><h2 id="2、实现思路">2、实现思路</h2><h3 id="2-1-思路分析">2.1 思路分析</h3><ul><li><p>在Gateway启动的时候，读取nacos的路由信息配置，然后刷到Gateway路由</p></li><li><p>监听nacos信息变化，如果配置修改了，重新调用Gateway刷新事件，刷新最新路由信息</p></li><li><p>Gateway的路由信息，默认是保存在内存中的，可查看<code>GatewayAutoConfiguration</code>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"spring.cloud.gateway.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(&#123; HttpHandlerAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">WebFluxAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; GatewayLoadBalancerClientAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">GatewayClassPathWarningAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(<span class="title">DispatcherHandler</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">GatewayAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><pre><code>@Bean@ConditionalOnMissingBean(RouteDefinitionRepository.class)public InMemoryRouteDefinitionRepository inMemoryRouteDefinitionRepository() {  return new InMemoryRouteDefinitionRepository();}@Bean@Primarypublic RouteDefinitionLocator routeDefinitionLocator(    List&lt;RouteDefinitionLocator&gt; routeDefinitionLocators) {  return new CompositeRouteDefinitionLocator(      Flux.fromIterable(routeDefinitionLocators));}//...</code></pre><p>}</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    *   默认就是&#96;InMemoryRouteDefinitionRepository&#96;，实现了&#96;RouteDefinitionRepository&#96;，底层是一个线程安全的Map:&#96;SynchronizedMap&#96;</span><br><span class="line">    </span><br><span class="line">    *   其中注解&#96;@ConditionalOnMissingBean(RouteDefinitionRepository.class)&#96; 表示RouteDefinitionRepository没有实现类时，使用&#96;InMemoryRouteDefinitionRepository&#96;</span><br><span class="line"></span><br><span class="line">### 2.2 实现流程</span><br><span class="line"></span><br><span class="line">*   既然知道了 路由信息 是保存在内存中，那我们可以自定义路由保存的位置，如：redis 等，只需要继承 &#96;RouteDefinitionRepository&#96; 接口，重写其中的三个方法逻辑即可；他们的save和delete都是 &#96;RouteDefinitionWriter&#96; 接口的方法</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">&#x2F;&#x2F; 获取所有路由信息</span><br><span class="line">Flux&lt;RouteDefinition&gt; getRouteDefinitions();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加路由信息</span><br><span class="line">Mono&lt;Void&gt; save(Mono&lt;RouteDefinition&gt; route);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 删除路由信息</span><br><span class="line">Mono&lt;Void&gt; delete(Mono&lt;String&gt; routeId);</span><br></pre></td></tr></table></figure></li><li><p>监听Nacos的路由配置变化，Nacos变化了，我们这边收到数据；收到数据之后，发布刷新路由事件，通知所有存储路由的组件更新路由即可</p></li></ul><h2 id="3、动态路由实战">3、动态路由实战</h2><h3 id="3-1-自定义动态路由-法一">3.1 自定义动态路由(法一)</h3><p>重写RouteDefinitionRepository接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInMemoryRouteDefinitionRepository</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, RouteDefinition&gt; routes = Collections.synchronizedMap(<span class="keyword">new</span> LinkedHashMap&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, RouteDefinition&gt; routesSafeCopy = <span class="keyword">new</span> LinkedHashMap(<span class="keyword">this</span>.routes);</span><br><span class="line">        <span class="keyword">return</span> Flux.fromIterable(routesSafeCopy.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> route.flatMap((r) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (ObjectUtils.isEmpty(r.getId())) &#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.error(<span class="keyword">new</span> IllegalArgumentException(<span class="string">"id may not be empty"</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.routes.put(r.getId(), r);</span><br><span class="line">                <span class="keyword">return</span> Mono.empty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">delete</span><span class="params">(Mono&lt;String&gt; routeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> routeId.flatMap((id) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.routes.containsKey(id)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.routes.remove(id);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.warn(<span class="string">"RouteDefinition not found: "</span> + routeId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Mono.empty();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置动态路由工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyInMemoryRouteDefinitionRepository routeDefinitionRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publisher = publisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteRoute</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"gateway delete route id &#123;&#125;"</span>, id);</span><br><span class="line">            <span class="keyword">this</span>.routeDefinitionRepository.delete(Mono.just(id)).subscribe();</span><br><span class="line">            <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"&#123;&#125;：删除路由失败"</span>, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateRoutes</span><span class="params">(List&lt;RouteDefinition&gt; definitions)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"gateway update routes &#123;&#125;"</span>, definitions);</span><br><span class="line">        <span class="comment">// 获取存在路由列表</span></span><br><span class="line">        List&lt;RouteDefinition&gt; routeDefinitionsExits = <span class="keyword">this</span>.routeDefinitionRepository</span><br><span class="line">                .getRouteDefinitions()</span><br><span class="line">                .buffer()</span><br><span class="line">                .blockFirst();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除路由</span></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(routeDefinitionsExits)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RouteDefinition routeDefinitionsExit : routeDefinitionsExits) &#123;</span><br><span class="line">                deleteRoute(routeDefinitionsExit.getId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新路由</span></span><br><span class="line">        definitions.forEach(<span class="keyword">this</span>::updateRoute);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateRoute</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先删</span></span><br><span class="line">        log.info(<span class="string">"gateway delete route &#123;&#125;"</span>, definition);</span><br><span class="line">        <span class="keyword">this</span>.routeDefinitionRepository.delete(Mono.just(definition.getId()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后增</span></span><br><span class="line">        <span class="keyword">this</span>.routeDefinitionRepository.save(Mono.just(definition)).subscribe();</span><br><span class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRoutes</span><span class="params">(List&lt;RouteDefinition&gt; definitions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(definitions)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (RouteDefinition definition : definitions) &#123;</span><br><span class="line">            log.info(<span class="string">"add route:&#123;&#125;"</span>, definition.getId());</span><br><span class="line">            <span class="keyword">this</span>.routeDefinitionRepository.save(Mono.just(definition)).subscribe();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteHandle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DynamicRouteUtil dynamicRouteUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> NacosConfigProperties nacosConfigProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConfigService configService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTE_DATA_ID = <span class="string">"gateway_route"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_TIMEOUT = <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"gateway route init..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            configService = initConfigService();</span><br><span class="line">            <span class="keyword">if</span> (configService == <span class="keyword">null</span>) &#123;</span><br><span class="line">                log.warn(<span class="string">"initConfigService fail"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String configInfo = configService.getConfig(ROUTE_DATA_ID, nacosConfigProperties.getGroup(), DEFAULT_TIMEOUT);</span><br><span class="line">            log.info(<span class="string">"获取网关当前配置:&#123;&#125;"</span>, configInfo);</span><br><span class="line">            List&lt;RouteDefinition&gt; definitionList = JSON.parseArray(configInfo, RouteDefinition<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            log.info(<span class="string">"获取网关数量：&#123;&#125;"</span>, definitionList.size());</span><br><span class="line"></span><br><span class="line">            dynamicRouteUtil.addRoutes(definitionList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"初始化网关路由时发生错误"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加监听</span></span><br><span class="line">        dynamicRouteByNacosListener(ROUTE_DATA_ID, nacosConfigProperties.getGroup());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dynamicRouteByNacosListener</span><span class="params">(String dataId, String group)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            configService.addListener(dataId, group, <span class="keyword">new</span> Listener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveConfigInfo</span><span class="params">(String configInfo)</span> </span>&#123;</span><br><span class="line">                    log.info(<span class="string">"进行网关更新:\n\r&#123;&#125;"</span>, configInfo);</span><br><span class="line">                    List&lt;RouteDefinition&gt; definitionList = JSON.parseArray(configInfo, RouteDefinition<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    log.info(<span class="string">"update route : &#123;&#125;"</span>, definitionList.toString());</span><br><span class="line">                    dynamicRouteUtil.updateRoutes(definitionList);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Executor <span class="title">getExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    log.info(<span class="string">"getExecutor"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">            log.error(<span class="string">"从nacos接收动态路由配置出错!!!"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ConfigService <span class="title">initConfigService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.setProperty(<span class="string">"serverAddr"</span>, nacosConfigProperties.getServerAddr());</span><br><span class="line">            properties.setProperty(<span class="string">"namespace"</span>, nacosConfigProperties.getNamespace());</span><br><span class="line"><span class="comment">//            properties.setProperty("username", nacosConfigProperties.getUsername());</span></span><br><span class="line"><span class="comment">//            properties.setProperty("password", nacosConfigProperties.getPassword());</span></span><br><span class="line">            <span class="keyword">return</span> NacosFactory.createConfigService(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"初始化网关路由时发生错误"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-自定义动态路由-法二">3.2 自定义动态路由(法二)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"route.dynamic.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicGatewayRouteConfig</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;route.dynamic.enabled&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled =Boolean.FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;route.dynamic.dataId&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String dataId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;route.dynamic.namespace&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;route.dynamic.group&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String group;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cloud.nacos.config.server-addr&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverAddr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cloud.nacos.config.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cloud.nacos.config.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RouteDefinitionWriter routeDefinitionWriter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timeoutMs=<span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRouteDefinitionWriter</span><span class="params">(RouteDefinitionWriter routeDefinitionWriter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.routeDefinitionWriter = routeDefinitionWriter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; ROUTES = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dynamicRouteByNacosListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(enabled)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">                properties.put(<span class="string">"serverAddr"</span>, serverAddr);</span><br><span class="line">                properties.put(<span class="string">"namespace"</span>, namespace);</span><br><span class="line"><span class="comment">//                properties.put("username", username);</span></span><br><span class="line"><span class="comment">//                properties.put("password", password);</span></span><br><span class="line">                <span class="comment">// 参考官网：https://nacos.io/zh-cn/docs/sdk.html</span></span><br><span class="line">                ConfigService configService = NacosFactory.createConfigService(properties);</span><br><span class="line">                <span class="comment">// 程序首次启动, 并加载初始化路由配置</span></span><br><span class="line">                String initConfigInfo = configService.getConfig(dataId, group, timeoutMs);</span><br><span class="line">                batchAddOrUpdateRouteAndPublish(initConfigInfo);</span><br><span class="line">                configService.addListener(dataId, group, <span class="keyword">new</span> Listener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveConfigInfo</span><span class="params">(String configInfo)</span> </span>&#123;</span><br><span class="line">                        batchAddOrUpdateRouteAndPublish(configInfo);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Executor <span class="title">getExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空所有路由</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String id : ROUTES) &#123;</span><br><span class="line">            <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(id)).subscribe();</span><br><span class="line">        &#125;</span><br><span class="line">        ROUTES.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加单条路由信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> definition RouteDefinition</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addRoute</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">        routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">        ROUTES.add(definition.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量添加或更新路由，及发布 路由</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configInfo 配置文件字符串, 必须为json array格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">batchAddOrUpdateRouteAndPublish</span><span class="params">(String configInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clearRoute();</span><br><span class="line">            List&lt;RouteDefinition&gt; gatewayRouteDefinitions = JSONObject.parseArray(configInfo, RouteDefinition<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">for</span> (RouteDefinition routeDefinition : gatewayRouteDefinitions) &#123;</span><br><span class="line">                addRoute(routeDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">            publish();</span><br><span class="line">            log.info(<span class="string">"添加路由信息. &#123;&#125;"</span>, JSON.toJSONString(gatewayRouteDefinitions));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventPublisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>.routeDefinitionWriter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-配置创建与修改">3.3 配置创建与修改</h3><blockquote><p>注: 如果服务设置了context-path并且与服务名称相同会有问题, 详情: <a href="https://blog.csdn.net/weixin_43303455/article/details/122279447" target="_blank" rel="noopener" title="描述">描述</a>；因为<code>GatewayDiscoveryClientAutoConfiguration.java</code>会为每一个服务创建一个默认路由, 此路由有一个<code>RewritePathGatewayFilter</code>, 会将<code>context-path</code>与<code>serviceId</code>(服务名称)相同的进行置空。</p></blockquote><p>本地配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ip:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">deepsoft-gateway-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;ip&#125;:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;ip&#125;:8848</span> <span class="comment">#nacos中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 配置文件格式</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">import</span> <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://deepsoft-import-server</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/import/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line"><span class="comment">#        - id: login #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line"><span class="comment">#          uri: lb://deepsoft-login-consumer</span></span><br><span class="line"><span class="comment">#          predicates:</span></span><br><span class="line"><span class="comment">#            - Path=/login/**   #断言,路径相匹配的进行路由</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 通过 网关服务:ip/actuator/gateway/routes, 可以查看具体的路由信息, 前提是要开启配置</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">./log/$&#123;spring.application.name&#125;/$&#123;spring.application.name&#125;.log</span></span><br><span class="line"><span class="comment"># 动态路由配置</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">dynamic:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 注意如果不写就是默认的，填其他命名空间的话需要填写Id而不是名称</span></span><br><span class="line">    <span class="attr">namespace:</span></span><br><span class="line">    <span class="attr">dataId:</span> <span class="string">gateway_route</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br></pre></td></tr></table></figure><p>远程在server config创建<strong>gateway_route</strong>文件，选择json类型，即可实现动态路由</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"id"</span>:<span class="string">"login"</span>,</span><br><span class="line">    <span class="attr">"predicates"</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"args"</span>:&#123;</span><br><span class="line">          <span class="attr">"pattern"</span>: <span class="string">"/login/**"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Path"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"filters"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"StripPrefix"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: &#123;</span><br><span class="line">          <span class="attr">"parts"</span>: <span class="string">"1"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"uri"</span>: <span class="string">"lb://deepsoft-login-consumer"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Nacos Config 配置项动态刷新&lt;/h1&gt;
&lt;h2 id=&quot;1、介绍与环境引入&quot;&gt;1、介绍与环境引入&lt;/h2&gt;
&lt;h3 id=&quot;1-1-简介&quot;&gt;1.1 简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Nacos官方手册：&lt;a href=&quot;https://nacos.io/zh-cn/docs/quick-start.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://nacos.io/zh-cn/docs/quick-start.html&quot;&gt;https://nacos.io/zh-cn/docs/quick-start.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动态刷新通过线上的配置更新进行推送，不需要代码改动也不需要重启服务器，这样可以更快更方便的进行服务器配置文件修改(因为重启Tomcat往往会消耗大量的时间)。首先需要引入相关依赖，这里默认已经启动Nacos服务器了，可以通过&lt;code&gt;http://localhost:8848/nacos/index.html&lt;/code&gt;查看&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringCloud" scheme="https://www.shawn22.xyz/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring常用扩展点</title>
    <link href="https://www.shawn22.xyz/posts/b8f614c5.html"/>
    <id>https://www.shawn22.xyz/posts/b8f614c5.html</id>
    <published>2022-10-31T13:40:40.000Z</published>
    <updated>2022-10-31T13:46:15.559Z</updated>
    
    <content type="html"><![CDATA[<h1>一、前言介绍</h1><h2 id="1、常用扩展点">1、常用扩展点</h2><p>我们知道，IOC（控制反转） 和 AOP（面向切面编程）是spring的基石。除此之外，spring的扩展能力非常强。由于这个优势的存在，让spring拥有强大的包容能力，让很多第三方应用能够轻松投入spring的怀抱。比如：rocketmq、mybatis、redis等。</p><p>Spring中最常用的11个扩展点</p><ul><li>自定义拦截器</li><li>Spring容器对象获取</li><li>全局异常处理</li><li>类型转换器</li><li>导入配置</li><li>项目启动配置</li><li>BeanDefinition的修改</li><li>Bean前后初始化</li><li>初始化方法</li><li>容器关闭</li><li>自定义作用域</li></ul><a id="more"></a><h2 id="2、Spring所有扩展接口">2、Spring所有扩展接口</h2><p>Spring的核心思想就是容器，内部想要把自动装配玩的转，就必须要了解spring对于bean的构造生命周期以及各个扩展接口。当然业务代码也能合理利用这些扩展点写出更加漂亮的代码。这里总结了几乎<strong>Spring &amp; Springboot所有的扩展接口</strong>，以及各个扩展点的使用场景。下面是<strong>一个bean在spring内部从被加载到最后初始化完成所有可扩展点的顺序调用图</strong>。</p><p><img src="https://img-blog.csdnimg.cn/54ebc104badb496d9c06552931af02b0.png#pic_center" alt="在这里插入图片描述"></p><h1>二、常用扩展点详解</h1><h2 id="1、自定义拦截器">1、自定义拦截器</h2><h3 id="1-1-介绍">1.1 介绍</h3><blockquote><p>spring mvc拦截器与spring拦截器相比，它里面能够获取<code>HttpServletRequest</code>和<code>HttpServletResponse</code>等web对象实例。<br>可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/113262294" target="_blank" rel="noopener" title="springBoot整合JWT实现前后端Token验证">springBoot整合JWT实现前后端Token验证</a></p></blockquote><p>spring mvc拦截器的顶层接口是：<code>HandlerInterceptor</code>，包含三个方法：</p><ul><li><p><strong>preHandle</strong>目标方法执行前执行</p></li><li><p>postHandle 目标方法执行后执行</p></li><li><p><strong>afterCompletion</strong>请求完成时执行</p></li></ul><p>一般情况会<strong>用HandlerInterceptor接口的实现类HandlerInterceptorAdapter类</strong>。假如有权限认证、日志、统计的场景，可以使用该拦截器。</p><h3 id="1-2-代码详情">1.2 代码详情</h3><p>首先继承<code>HandlerInterceptorAdapter</code>类定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String requestUrl = request.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span> (checkAuth(requestUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkAuth</span><span class="params">(String requestUrl)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"===权限校验==="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将该拦截器注册到spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAuthConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthInterceptor <span class="title">getAuthInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> AuthInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在请求接口时spring mvc通过该拦截器，能够自动拦截该接口，并且校验权限。</p><h2 id="2、获取Spring容器对象">2、获取Spring容器对象</h2><blockquote><p>借鉴参考：<a href="https://blog.csdn.net/lemon_TT/article/details/126063399" target="_blank" rel="noopener" title="Spring事件监听">Spring事件监听</a></p></blockquote><p>在我们日常开发中，除了通过<code>@Autowired</code>注解获取Bean外，有时候我们会经常需要从Spring容器中手动获取Bean，下面是几种手动获取Bean的方法</p><h3 id="2-1-BeanFactoryAware接口">2.1 BeanFactoryAware接口</h3><p>实现<code>BeanFactoryAware</code>接口，然后重写<code>setBeanFactory</code>方法，就能从该方法中获取到spring容器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = (Person) beanFactory.getBean(<span class="string">"person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-ApplicationContextAware接口">2.2 ApplicationContextAware接口</h3><p>实现<code>ApplicationContextAware</code>接口，然后重写<code>setApplicationContext</code>方法，也能从该方法中获取到spring容器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService2</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-ApplicationListener接口">2.3 ApplicationListener接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService3</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">        applicationContext = event.getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、全局异常处理">3、全局异常处理</h2><blockquote><p>参考：<a href="https://blog.csdn.net/lemon_TT/article/details/108309900" target="_blank" rel="noopener" title="Spring Boot后端接口规范">Spring Boot后端接口规范</a></p></blockquote><p>我们在开发接口时，如果出现异常，为了给用户一个更友好的提示，必须在每一个接口处捕获异常，但是随着接口数量增加，代码量和可维护性也随之增加，因此全局异常捕获就派上用场了：<code>RestControllerAdvice</code>。只需在<code>handleException</code>方法中处理异常情况，业务接口中可以放心使用，不再需要捕获异常（程序统一处理了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ArithmeticException) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"数据异常"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"服务器内部异常"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        retur <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、类型转换器">4、类型转换器</h2><h3 id="4-1-介绍">4.1 介绍</h3><p>spring目前支持3中类型转换器</p><ul><li><p><strong>Converter&lt;S,T&gt;</strong>：将 S 类型对象转为 T 类型对象</p></li><li><p><strong>ConverterFactory&lt;S, R&gt;</strong>：将 S 类型对象转为 R 类型及子类对象</p></li><li><p><strong>GenericConverter</strong>：它支持多个source和目标类型的转化，同时还提供了source和目标类型的上下文，这个上下文能让你实现基于属性上的注解或信息来进行类型转换</p></li></ul><p>常用的日期类转换可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/109145432" target="_blank" rel="noopener" title="Java8 日期时间类整理">Java8 日期时间类整理</a></p><h3 id="4-2-简单实战">4.2 简单实战</h3><p>通过自定义Converter，可以转换简单的参数，如下，有一个 UserDto 类，表示用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略getter、setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求后台所有接口接受<code>UserDto</code>数据时，参数的值格式为：<code>name,age</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/convert/test1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDto <span class="title">test1</span><span class="params">(@RequestParam(<span class="string">"user"</span>)</span> UserDto user) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"name："</span> + user.getName());</span><br><span class="line">    System.out.println(<span class="string">"age："</span> + user.getAge());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringMVC 中提供了一个接口<code>org.springframework.core.convert.converter.Converter</code>，这个接口用来将一种类型转换为另一种类型，调用后端接口的时候，http 传递的参数都是字符串类型的，但是后端却可以使用 Integer、Double 等其他类型来接收，这就是<code>Converter</code>实现的。Spring 内部也提供了很多默认的实现，用于各种类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将source转换为目标T类型</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Nullable</span></span><br><span class="line"> <span class="function">T <span class="title">convert</span><span class="params">(S source)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码如下，添加一个配置类，实现<code>WebMvcConfigurer</code>接口</p></li><li><p>重写<code>addFormatters</code>方法，在这个方法中添加一个自定义的<code>Converter</code>，实现其 convert 方法，将<code>name,age</code>格式的字符串转换为 UserDto 对象返回</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> Converter&lt;String, UserDto&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> UserDto <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] split = source.split(<span class="string">","</span>);</span><br><span class="line">                String name = split[<span class="number">0</span>];</span><br><span class="line">                Integer age = Integer.valueOf(split[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UserDto(name, age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后访问<code>/convert/test1?user=ready,1</code>即可成功获取数据</p><h2 id="5、配置的导入">5、配置的导入</h2><h3 id="5-1-介绍">5.1 介绍</h3><blockquote><p>参考：<a href="https://blog.csdn.net/lemon_TT/article/details/122196465" target="_blank" rel="noopener" title="Spring容器加入bean的几种方式">Spring容器加入bean的几种方式</a></p></blockquote><p>有时我们需要在某个配置类中引入另外一些类，被引入的类也加到spring容器中。这时可以使用<code>@Import</code>注解完成这个功能。通过源码会发现，引入的类支持三种不同类型，<strong>将普通类和@Configuration注解的配置类分开讲解</strong>，列了四种不同类型</p><ul><li><p><strong>普通类</strong></p></li><li><p><strong>@Configuration注解</strong></p></li><li><p><strong>ImportSelector接口类</strong></p></li><li><p><strong>ImportBeanDefinitionRegistrar接口类</strong></p></li></ul><h3 id="5-2-普通类">5.2 普通类</h3><p>这种引入方式是最简单的，被引入的类会被实例化bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import</span>(A<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>@Import</code>注解引入A类，spring就能自动实例化A对象，然后在需要使用的地方通过<code>@Autowired</code>注解注入即可，不用加<code>@Bean</code>注解也能实例化bean</p><h3 id="5-3-配置类">5.3 配置类</h3><p>这种引入方式是最复杂的，因为<code>@Configuration</code>注解还支持多种组合注解，比如：</p><ul><li><p>@Import</p></li><li><p>@ImportResource</p></li><li><p>@PropertySource等</p></li></ul><p>通过@Import注解引入@Configuration注解的配置类，会把该配置类相关<code>@Import</code>、<code>@ImportResource</code>、<code>@PropertySource</code>等注解引入的类进行递归，一次性全部引入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import</span>(B<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import</span>(AConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-ImportSelector">5.4 ImportSelector</h3><p>这种引入方式需要实现<code>ImportSelector</code>接口，好处是<code>selectImports</code>方法返回的是数组，意味着可以同时引入多个类，还是非常方便的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_NAME = <span class="string">"com.sue.cache.service.test13.A"</span>;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;CLASS_NAME&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import</span>(AImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-ImportBeanDefinitionRegistrar">5.5 ImportBeanDefinitionRegistrar</h3><p>种引入方式需要实现<code>ImportBeanDefinitionRegistrar</code>接口，这种方式是最灵活的，能在<code>registerBeanDefinitions</code>方法中获取到<code>BeanDefinitionRegistry</code>容器注册对象，可以手动控制BeanDefinition的创建和注册。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        RootBeanDefinition rootBeanDefinition = <span class="keyword">new</span> RootBeanDefinition(A<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">"a"</span>, rootBeanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import</span>(AImportBeanDefinitionRegistrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、项目启动时">6、项目启动时</h2><p>有时候我们需要在项目启动时定制化一些附加功能，比如：加载一些系统参数、完成初始化、预热本地缓存等，该怎么办呢？好消息是springboot提供了：</p><ul><li><p><strong>CommandLineRunner</strong></p></li><li><p>ApplicationRunner</p></li></ul><p>这两个接口帮助我们实现以上需求。它们的用法很简单的，以<code>ApplicationRunner</code>接口为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadDataService loadDataService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        loadDataService.load();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>ApplicationRunner</code>接口，重写<code>run</code>方法，在该方法中实现自己定制化需求。如果项目中有多个类实现了ApplicationRunner接口，他们的执行顺序要怎么指定呢？答案是使用<code>@Order(n)</code>注解，n的值越小越先执行。当然也可以通过<code>@Priority</code>注解指定顺序。</p><h2 id="7、修改BeanDefinition">7、修改BeanDefinition</h2><p>Spring IOC在实例化Bean对象之前，需要先读取Bean的相关属性，保存到<code>BeanDefinition</code>对象中，然后通过BeanDefinition对象，实例化Bean对象。如果<strong>想修改BeanDefinition对象中的属性</strong>，该怎么办呢？我们可以实现<code>BeanFactoryPostProcessor</code>接口</p><p>在<code>postProcessBeanFactory</code>方法中，可以获取<code>BeanDefinition</code>的相关对象，并且修改该对象的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        DefaultListableBeanFactory defaultListableBeanFactory = (DefaultListableBeanFactory) configurableListableBeanFactory;</span><br><span class="line">        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanDefinitionBuilder.addPropertyValue(<span class="string">"id"</span>, <span class="number">123</span>);</span><br><span class="line">        beanDefinitionBuilder.addPropertyValue(<span class="string">"name"</span>, <span class="string">"shawn"</span>);</span><br><span class="line">        defaultListableBeanFactory.registerBeanDefinition(<span class="string">"user"</span>, beanDefinitionBuilder.getBeanDefinition());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、初始化Bean前后">8、初始化Bean前后</h2><p>有时候需要在初始化Bean前后，实现一些自己的逻辑。这时可以实现<code>BeanPostProcessor</code>接口，该接口目前有两个方法：</p><ul><li><p><code>postProcessBeforeInitialization </code>该在初始化方法之前调用。</p></li><li><p><code>postProcessAfterInitialization </code>该方法再初始化方法之后调用。</p></li></ul><p>如果spring中存在User对象，则将它的userName设置成：shawn666。其实，我们经常使用的注解，比如：<code>@Autowired</code>、<code>@Value</code>、<code>@Resource</code>、<code>@PostConstruct</code>等，是通过<code>AutowiredAnnotationBeanPostProcessor</code>和<code>CommonAnnotationBeanPostProcessor</code>实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">            ((User) bean).setUserName(<span class="string">"shawn666"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、初始化方法">9、初始化方法</h2><h3 id="9-1-介绍">9.1 介绍</h3><blockquote><p>参考：<a href="https://blog.csdn.net/lemon_TT/article/details/126063477" target="_blank" rel="noopener" title="Spring Bean初始化">Spring Bean初始化</a></p></blockquote><p>spring中使用比较多的初始化bean的方法有：</p><ul><li><p><strong>使用@PostConstruct注解</strong></p></li><li><p><strong>实现InitializingBean接口</strong></p></li></ul><h3 id="9-2-使用-PostConstruct注解">9.2 使用@PostConstruct注解</h3><p>在需要初始化的方法上增加<code>@PostConstruct</code>注解，这样就有初始化的能力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"===初始化==="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-实现InitializingBean接口">9.3 实现InitializingBean接口</h3><p>实现<code>InitializingBean</code>接口，重写<code>afterPropertiesSet</code>方法，该方法中可以完成初始化功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BService</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"===初始化==="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、关闭容器前">10、关闭容器前</h2><p>有时候，我们需要在关闭spring容器前，做一些额外的工作，比如：关闭资源文件等。这时可以实现<code>DisposableBean</code>接口，并且重写它的<code>destroy</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DService</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DisposableBean destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"InitializingBean afterPropertiesSet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样spring容器销毁前，会调用该<code>destroy</code>方法，做一些额外的工作。通常情况下，我们会同时实现<code>InitializingBean</code>和<code>DisposableBean</code>接口，重写初始化方法和销毁方法。</p><h2 id="11、自定义作用域">11、自定义作用域</h2><p>我们都知道spring默认支持的<code>Scope</code>只有两种：</p><ul><li><p><strong>singleton 单例</strong>，每次从spring容器中获取到的bean都是同一个对象。</p></li><li><p>prototype 多例，每次从spring容器中获取到的bean都是不同的对象。</p></li></ul><p>spring web又对Scope进行了扩展，增加了：</p><ul><li><p>**RequestScope **同一次请求从spring容器中获取到的bean都是同一个对象。</p></li><li><p>**SessionScope **同一个会话从spring容器中获取到的bean都是同一个对象。</p></li></ul><p>即便如此，有些场景还是无法满足我们的要求。比如，我们想在同一个线程中从spring容器获取到的bean都是同一个对象，该怎么办？这就需要自定义Scope了。</p><p>第一步实现Scope接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalScope</span> <span class="keyword">implements</span> <span class="title">Scope</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal THREAD_LOCAL_SCOPE = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String name, ObjectFactory&lt;?&gt; objectFactory)</span> </span>&#123;</span><br><span class="line">        Object value = THREAD_LOCAL_SCOPE.get();</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object object = objectFactory.getObject();</span><br><span class="line">        THREAD_LOCAL_SCOPE.set(object);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">remove</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        THREAD_LOCAL_SCOPE.remove();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerDestructionCallback</span><span class="params">(String name, Runnable callback)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveContextualObject</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConversationId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步将新定义的Scope注入到spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        beanFactory.registerScope(<span class="string">"threadLocalScope"</span>, <span class="keyword">new</span> ThreadLocalScope());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步使用新定义的Scope</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"threadLocalScope"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、Spring所有扩展接口详解</h1><h2 id="1、ApplicationContextInitializer">1、ApplicationContextInitializer</h2><p>整个spring容器在刷新之前初始化<code>ConfigurableApplicationContext</code>的回调接口，简单来说，就是在容器刷新之前调用此类的<code>initialize</code>方法。这个点允许被用户自己扩展。用户可以在整个spring容器还没被初始化之前做一些事情。可以想到的场景可能为，在<strong>最开始激活一些配置</strong>，或者利用这时候class还没被类加载器加载的时机，进行动态字节码注入等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span> </span>&#123;      </span><br><span class="line">    <span class="meta">@Override</span>      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;      </span><br><span class="line">        System.out.println(<span class="string">"[ApplicationContextInitializer]"</span>);      </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候spring容器还没被初始化，所以想要自己的扩展的生效，有以下三种方式：</p><ul><li><p>在启动类中用<code>springApplication.addInitializers(new TestApplicationContextInitializer())</code>语句加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringextendApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SpringextendApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        springApplication.addInitializers(<span class="keyword">new</span> TestApplicationContextInitializer());</span><br><span class="line">        springApplication.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件配置<code>context.initializer.classes=com.example.demo.TestApplicationContextInitializer</code></p></li><li><p>Spring SPI扩展，在spring.factories中加入<code>org.springframework.context.ApplicationContextInitializer=com.example.demo.TestApplicationContextInitializer</code></p></li></ul><h2 id="2、BeanDefinitionRegistryPostProcessor">2、BeanDefinitionRegistryPostProcessor</h2><p>这个接口在读取项目中的<code>beanDefinition</code>之后执行，提供一个补充的扩展点。使用场景：可以在这里动态注册自己的<code>beanDefinition</code>，可以加载classpath之外的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanDefinitionRegistryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[BeanDefinitionRegistryPostProcessor] postProcessBeanDefinitionRegistry"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[BeanDefinitionRegistryPostProcessor] postProcessBeanFactory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、BeanFactoryPostProcessor">3、BeanFactoryPostProcessor</h2><p>这个接口是<code>beanFactory</code>的扩展接口，调用时机在spring在读取<code>beanDefinition</code>信息之后，<strong>实例化bean之前</strong>。在这个时机，用户可以通过实现这个扩展接口来自行处理一些东西，比如修改已经注册的<code>beanDefinition</code>的元信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[BeanFactoryPostProcessor]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、InstantiationAwareBeanPostProcessor">4、InstantiationAwareBeanPostProcessor</h2><p>该接口继承了<code>BeanPostProcess</code>接口，区别如下：<code>BeanPostProcess</code><strong>接口只在bean的初始化阶段进行扩展（注入spring上下文前后），而</strong><code>InstantiationAwareBeanPostProcessor</code><strong>接口在此基础上增加了3个方法，把可扩展的范围增加了实例化阶段和属性注入阶段。</strong></p><p>该类主要的扩展点有以下5个方法，主要在bean生命周期的两大阶段：<strong>实例化阶段</strong>和<strong>初始化阶段</strong>，，按调用顺序为：</p><ul><li><p><code>postProcessBeforeInstantiation</code>：实例化bean之前，相当于new这个bean之前</p></li><li><p><code>postProcessAfterInstantiation</code>：实例化bean之后，相当于new这个bean之后</p></li><li><p><code>postProcessPropertyValues</code>：bean已经实例化完成，在属性注入时阶段触发，<code>@Autowired</code>,<code>@Resource</code>等注解原理基于此方法实现</p></li><li><p><code>postProcessBeforeInitialization</code>：初始化bean之前，相当于把bean注入spring上下文之前</p></li><li><p><code>postProcessAfterInitialization</code>：初始化bean之后，相当于把bean注入spring上下文之后</p></li></ul><p>使用场景：，无论是写中间件和业务中，都能利用这个特性。比如对实现了某一类接口的bean在各个生命期间进行收集，或者对某个类型的bean进行统一的设值等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInstantiationAwareBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">InstantiationAwareBeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestInstantiationAwareBeanPostProcessor] before initialization "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestInstantiationAwareBeanPostProcessor] after initialization "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestInstantiationAwareBeanPostProcessor] before instantiation "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestInstantiationAwareBeanPostProcessor] after instantiation "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestInstantiationAwareBeanPostProcessor] postProcessProperties "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、SmartInstantiationAwareBeanPostProcessor">5、SmartInstantiationAwareBeanPostProcessor</h2><p>该扩展接口有3个触发点方法：</p><ul><li><p><code>predictBeanType</code>：该触发点发生在<code>postProcessBeforeInstantiation</code>之前(在图上并没有标明，因为一般不太需要扩展这个点)，这个方法用于预测Bean的类型，返回第一个预测成功的Class类型，如果不能预测返回null；当你调用<code>BeanFactory.getType(name)</code>时当通过bean的名字无法得到bean类型信息时就调用该回调方法来决定类型信息。</p></li><li><p><code>determineCandidateConstructors</code>：该触发点发生在<code>postProcessBeforeInstantiation</code>之后，用于确定该bean的构造函数之用，返回的是该bean的所有构造函数列表。用户可以扩展这个点，来自定义选择相应的构造器来实例化这个bean。</p></li><li><p><code>getEarlyBeanReference</code>：该触发点发生在<code>postProcessAfterInstantiation</code>之后，当有循环依赖的场景，当bean实例化好之后，为了防止有循环依赖，会提前暴露回调方法，用于bean实例化的后置处理。这个方法就是在提前暴露的回调方法中触发。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSmartInstantiationAwareBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">SmartInstantiationAwareBeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestSmartInstantiationAwareBeanPostProcessor] predictBeanType "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> beanClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Constructor&lt;?&gt;[] determineCandidateConstructors(Class&lt;?&gt; beanClass, String beanName) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestSmartInstantiationAwareBeanPostProcessor] determineCandidateConstructors "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getEarlyBeanReference</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestSmartInstantiationAwareBeanPostProcessor] getEarlyBeanReference "</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、BeanFactoryAware">6、BeanFactoryAware</h2><p>这个类只有一个触发点，发生在bean的实例化之后，注入属性之前，也就是Setter之前。这个类的扩展点方法为<code>setBeanFactory</code>，可以拿到<code>BeanFactory</code>这个属性。使用场景：你可以在bean实例化之后，但还未初始化之前，拿到 <code>BeanFactory</code>，在这个时候，可以对每个bean作特殊化的定制。也或者可以把<code>BeanFactory</code>拿到进行缓存，日后使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[BeanFactoryPostProcessor] "</span> + beanFactory.toString());</span><br><span class="line">        <span class="comment">// 下面这个有循环依赖问题</span></span><br><span class="line">        <span class="comment">// System.out.println("[TestBeanFactoryAware] " + beanFactory.getBean(TestBeanFactoryAware.class).getClass().getSimpleName());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、ApplicationContextAwareProcessor">7、ApplicationContextAwareProcessor</h2><p>该类本身并没有扩展点，但是该类内部却有6个扩展点可供实现 ，这些类触发的时机在bean实例化之后，初始化之前。该类<strong>用于执行各种驱动接口</strong>，在bean实例化之后，属性填充之后，通过执行扩展接口，来获取对应容器的变量。<strong>所以这里应该来说是有6个扩展点</strong></p><ul><li><p><code>EnvironmentAware</code>：用于获取<code>EnviromentAware</code>的一个扩展类，这个变量非常有用， 可以获得系统内的所有参数。当然个人认为这个Aware没必要去扩展，因为spring内部都可以通过注入的方式来直接获得。</p></li><li><p><code>EmbeddedValueResolverAware</code>：用于获取<code>StringValueResolver</code>的一个扩展类， <code>StringValueResolver</code>用于获取基于<code>String</code>类型的properties的变量，一般我们都用<code>@Value</code>的方式去获取，如果实现了这个Aware接口，把<code>StringValueResolver</code>缓存起来，通过这个类去获取<code>String</code>类型的变量，效果是一样的。</p></li><li><p><code>ResourceLoaderAware</code>：用于获取<code>ResourceLoader</code>的一个扩展类，<code>ResourceLoader</code>可以用于获取classpath内所有的资源对象，可以扩展此类来拿到<code>ResourceLoader</code>对象。</p></li><li><p><code>ApplicationEventPublisherAware</code>：用于获取<code>ApplicationEventPublisher</code>的一个扩展类，<code>ApplicationEventPublisher</code>可以用来发布事件，结合<code>ApplicationListener</code>来共同使用，下文在介绍<code>ApplicationListener</code>时会详细提到。这个对象也可以通过spring注入的方式来获得。</p></li><li><p><code>MessageSourceAware</code>：用于获取<code>MessageSource</code>的一个扩展类，<code>MessageSource</code>主要用来做国际化。</p></li><li><p><code>ApplicationContextAware</code>：用来获取<code>ApplicationContext</code>的一个扩展类，<code>ApplicationContext</code>应该是很多人非常熟悉的一个类了，就是spring上下文管理器，可以手动的获取任何在spring上下文注册的bean，我们经常扩展这个接口来缓存spring上下文，包装成静态方法。同时<code>ApplicationContext</code>也实现了<code>BeanFactory</code>，<code>MessageSource</code>，<code>ApplicationEventPublisher</code>等接口，也可以用来做相关接口的事情。</p></li></ul><h2 id="8、BeanNameAware">8、BeanNameAware</h2><p>这个类也是Aware扩展的一种，触发点在bean的初始化之前，也就是<code>postProcessBeforeInitialization</code>之前，这个类的触发点方法只有一个：<code>setBeanName</code>。使用场景：用户可以扩展这个点，<strong>在初始化bean之前拿到spring容器中注册的的beanName，来自行修改这个beanName的值</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalBeanA</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NormalBeanA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"NormalBean constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[BeanNameAware] "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、-PostConstruct">9、@PostConstruct</h2><p>这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了<code>@PostConstruct</code>，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在<code>postProcessBeforeInitialization</code>之后，<code>InitializingBean.afterPropertiesSet</code>之前。使用场景：<strong>用户可以对某一方法进行标注，来进行初始化某一个属性</strong></p><h2 id="10、InitializingBean">10、InitializingBean</h2><p>这个类也是用来初始化bean的。<code>InitializingBean</code>接口为bean提供了初始化方法的方式，它只包括<code>afterPropertiesSet</code>方法，凡是继承该接口的类，在初始化bean的时候都会执行该方法。这个扩展点的触发时机在<code>postProcessAfterInitialization</code>之前。使用场景：用户实现此接口，来进行系统启动的时候一些业务指标的初始化工作。</p><h2 id="11、FactoryBean">11、FactoryBean</h2><blockquote><p>Spring通过反射机制利用bean的class属性指定支线类去实例化bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在bean中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个<code>org.springframework.bean.factory.FactoryBean</code>的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。<code>FactoryBean</code>接口对于Spring框架来说占用重要的地位，Spring自身就提供了70多个<code>FactoryBean</code>的实现。它们隐藏了实例化一些复杂bean的细节，给上层应用带来了便利。从Spring3.0开始，<code>FactoryBean</code>开始支持泛型，即接口声明改为<code>FactoryBean&lt;T&gt;</code>的形式</p></blockquote><p>使用场景：用户可以扩展这个类，来为要实例化的bean作一个代理，比如为该对象的所有的方法作一个拦截，在调用前后输出一行log，模仿<code>ProxyFactoryBean</code>的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">TestFactoryBean</span>.<span class="title">TestFactoryInnerBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TestFactoryBean.<span class="function">TestFactoryInnerBean <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[FactoryBean] getObject"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestFactoryBean.TestFactoryInnerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> TestFactoryBean.TestFactoryInnerBean<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactoryInnerBean</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12、SmartInitializingSingleton">12、SmartInitializingSingleton</h2><p>这个接口中只有一个方法<code>afterSingletonsInstantiated</code>，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）初始化完成之后调用的回调接口。其触发时机为<code>postProcessAfterInitialization</code>之后。使用场景：<strong>用户可以扩展此接口在对所有单例对象初始化完毕后，做一些后置的业务处理。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSmartInitializingSingleton</span> <span class="keyword">implements</span> <span class="title">SmartInitializingSingleton</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSingletonsInstantiated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestSmartInitializingSingleton]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13、CommandLineRunner">13、CommandLineRunner</h2><p>这个接口也只有一个方法：<code>run(String... args)</code>，触发时机为整个项目启动完毕后，自动执行。如果有多个<code>CommandLineRunner</code>，可以利用<code>@Order</code>来进行排序。使用场景：用户扩展此接口，进行启动项目之后一些业务的预处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[TestCommandLineRunner]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14、DisposableBean">14、DisposableBean</h2><p>这个扩展点也只有一个方法：<code>destroy()</code>，其触发时机为当此对象销毁时，会自动执行这个方法。比如说运行<code>applicationContext.registerShutdownHook</code>时，就会触发这个方法。</p><h2 id="15、ApplicationListener">15、ApplicationListener</h2><p>准确的说，这个应该不算spring&amp;springboot当中的一个扩展点，<code>ApplicationListener</code>可以监听某个事件的<code>event</code>，触发时机可以穿插在业务方法执行过程中，用户可以自定义某个业务事件。但是spring内部也有一些内置事件，这种事件，可以穿插在启动调用中。我们也可以利用这个特性，来自己做一些内置事件的监听器来达到和前面一些触发点大致相同的事情。</p><p>接下来罗列下spring主要的内置事件：</p><ul><li><p><strong>ContextRefreshedEvent</strong></p><p>ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在<code>ConfigurableApplicationContext</code>接口中使用 <code>refresh()</code>方法来发生。此处的初始化是指：所有的Bean被成功装载，后处理Bean被检测并激活，所有Singleton Bean 被预实例化，<code>ApplicationContext</code>容器已就绪可用。</p></li><li><p>ContextStartedEvent</p><p>当使用 <code>ConfigurableApplicationContext</code> （ApplicationContext子接口）接口中的 start() 方法启动 <code>ApplicationContext</code>时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</p></li><li><p><strong>ContextStoppedEvent</strong></p><p>当使用 <code>ConfigurableApplicationContext</code>接口中的 <code>stop()</code>停止<code>ApplicationContext</code> 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作</p></li><li><p>ContextClosedEvent</p><p>当使用 <code>ConfigurableApplicationContext</code>接口中的 <code>close()</code>方法关闭 <code>ApplicationContext</code> 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启</p></li><li><p><strong>RequestHandledEvent</strong></p><p>这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。只能应用于使用DispatcherServlet的Web应用。在使用Spring作为前端的MVC控制器时，当Spring处理用户请求结束后，系统会自动触发该事件</p></li></ul><hr><p>参考文章：</p><p><a href="https://mp.weixin.qq.com/s/Bih1XRVLi6ywMtErG_YcgQ" target="_blank" rel="noopener" title="https://mp.weixin.qq.com/s/Bih1XRVLi6ywMtErG_YcgQ">https://mp.weixin.qq.com/s/Bih1XRVLi6ywMtErG_YcgQ</a></p><p><a href="https://www.jianshu.com/p/38d834db7413" target="_blank" rel="noopener" title="https://www.jianshu.com/p/38d834db7413">https://www.jianshu.com/p/38d834db7413</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、前言介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、常用扩展点&quot;&gt;1、常用扩展点&lt;/h2&gt;
&lt;p&gt;我们知道，IOC（控制反转） 和 AOP（面向切面编程）是spring的基石。除此之外，spring的扩展能力非常强。由于这个优势的存在，让spring拥有强大的包容能力，让很多第三方应用能够轻松投入spring的怀抱。比如：rocketmq、mybatis、redis等。&lt;/p&gt;
&lt;p&gt;Spring中最常用的11个扩展点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义拦截器&lt;/li&gt;
&lt;li&gt;Spring容器对象获取&lt;/li&gt;
&lt;li&gt;全局异常处理&lt;/li&gt;
&lt;li&gt;类型转换器&lt;/li&gt;
&lt;li&gt;导入配置&lt;/li&gt;
&lt;li&gt;项目启动配置&lt;/li&gt;
&lt;li&gt;BeanDefinition的修改&lt;/li&gt;
&lt;li&gt;Bean前后初始化&lt;/li&gt;
&lt;li&gt;初始化方法&lt;/li&gt;
&lt;li&gt;容器关闭&lt;/li&gt;
&lt;li&gt;自定义作用域&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Spring基础" scheme="https://www.shawn22.xyz/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring之秒传、断点续传、分片上传</title>
    <link href="https://www.shawn22.xyz/posts/1b50faa.html"/>
    <id>https://www.shawn22.xyz/posts/1b50faa.html</id>
    <published>2022-10-31T13:36:49.000Z</published>
    <updated>2022-10-31T13:46:15.555Z</updated>
    
    <content type="html"><![CDATA[<h1>一、大文件上传简介</h1><h2 id="1、秒传">1、秒传</h2><p>通俗的说，你把要上传的东西上传，服务器会先做MD5校验，如果服务器上有一样的东西，它就直接给你个新地址，其实你下载的都是服务器上的同一个文件，想要不秒传，其实只要让MD5改变，就是对文件本身做一下修改（改名字不行），例如一个文本文件，你多加几个字，MD5就变了，就不会秒传了</p><h2 id="2、分片上传">2、分片上传</h2><h3 id="2-1-介绍">2.1 介绍</h3><p>分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（我们称之为Part）来进行分别上传，上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件</p><a id="more"></a><h3 id="2-2-应用场景">2.2 应用场景</h3><ul><li><p>大文件上传</p></li><li><p>网络环境环境不好，存在需要重传风险的场景</p></li></ul><h2 id="3、断点续传">3、断点续传</h2><h3 id="3-1-介绍">3.1 介绍</h3><p>断点续传是在下载或上传时，将下载或上传任务（一个文件或一个压缩包）人为的划分为几个部分，每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传或者下载未完成的部分，而没有必要从头开始上传或者下载。</p><h3 id="3-2-应用场景">3.2 应用场景</h3><p>断点续传可以看成是分片上传的一个衍生，因此可以使用分片上传的场景，都可以使用断点续传</p><h3 id="3-3-核心逻辑">3.3 核心逻辑</h3><p>在分片上传的过程中，如果因为系统崩溃或者网络中断等异常因素导致上传中断，这时候客户端需要记录上传的进度。在之后支持再次上传时，可以继续从上次上传中断的地方进行继续上传。为了避免客户端在上传之后的进度数据被删除而导致重新开始从头上传的问题，服务端也可以提供相应的接口便于客户端对已经上传的分片数据进行查询，从而使客户端知道已经上传的分片数据，从而从下一个分片数据开始继续上传。</p><h3 id="3-4-实现流程步骤">3.4 实现流程步骤</h3><p><strong>方案一，常规步骤</strong></p><ul><li><p>将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；</p></li><li><p>初始化一个分片上传任务，返回本次分片上传唯一标识；</p></li><li><p>按照一定的策略（串行或并行）发送各个分片数据块；</p></li><li><p>发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件。</p></li></ul><p><strong>方案二、更高效</strong></p><ul><li><p>前端（客户端）需要根据固定大小对文件进行分片，请求后端（服务端）时要带上分片序号和大小</p></li><li><p>服务端创建conf文件用来记录分块位置，conf文件长度为总分片数，每上传一个分块即向conf文件中写入一个127，那么没上传的位置就是默认的0,已上传的就是Byte.MAX_VALUE 127（这步是实现断点续传和秒传的核心步骤）</p></li><li><p>服务器按照请求数据中给的分片序号和每片分块大小（分片大小是固定且一样的）算出开始位置，与读取到的文件片段数据，写入文件。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/89eb973514414f869226dbb0308293ed.png#pic_center" alt="在这里插入图片描述"></p><h1>二、普通方式</h1><h2 id="1、整体思路">1、整体思路</h2><h3 id="1-1-前端部分思路">1.1 前端部分思路</h3><p>所有请求都使用<code>ajax</code></p><ul><li><p>文件控件选择后，<strong>计算文件唯一码</strong>，调用接口查询文件是否存在。文件存在则判断分片是否上传完成，已完成显示秒传信息；</p></li><li><p>点击上传按钮后，再查询一次文件是否存在，来获取文件分片信息。文件不存在，那么起始分片为1；文件存在，那么获取起始分片为已上传+1；</p></li><li><p>ajax串行调用分片上传方法，成功后进行分片序号+1的分片上传，直到最终已上传分片序号和总分片数量相同。</p></li></ul><h3 id="1-2-后端部分思路">1.2 后端部分思路</h3><ul><li><p>首先利用数据库存储文件信息，包括文件物理地址，分片接收进程和对应的md5码。利用md5码可以判断当前上传文件是否在服务器中存在（实现秒传），利用分片接收Index可以判断现在应该上传。</p></li><li><p>前端ajax获取文件存在与否的信息，几种情况：  </p><ul><li><p>不存在，则创建数据库记录，成功后调用分片1的上传</p></li><li><p>存在，Index和总分片数量相同，秒传成功显示结果</p></li><li><p>存在，但index小于总分片数量，调用分片index的上传</p></li></ul></li><li><p><strong>分片在前端根据分片Index计算起点末尾，slice切割，ajax调用上传传到服务器并存储</strong>。当前分片传递成功，ajax接收success信息，串行进行index+1的分片的上传</p></li></ul><h2 id="2、环境准备">2、环境准备</h2><p>本次Demo项目是前后端一起，前端部分使用了内嵌的<code>thymeleaf</code>，根据链接跳转自动访问<code>resource/static/</code>下的静态文件，如果前后端分离可以参考，首先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/**</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">jdbc</span></span><br><span class="line">    <span class="attr">jdbc:</span></span><br><span class="line">      <span class="attr">initialize-schema:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line">  <span class="attr">save-path:</span> <span class="string">F:/file/</span></span><br><span class="line">  <span class="attr">temp:</span> <span class="string">F:/file/temp/</span></span><br><span class="line">  <span class="attr">segment:</span> <span class="number">2</span><span class="string">*1024*1024</span></span><br><span class="line">  <span class="attr">max-file-size:</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span></span><br></pre></td></tr></table></figure><p>数据库设计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`segment_file`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`segment_file`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`file_path`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'文件保存位置(用处不大)'</span>,</span><br><span class="line">  <span class="string">`file_name`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'文件名'</span>,</span><br><span class="line">  <span class="string">`size`</span> <span class="built_in">bigint</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'文件大小，单位B'</span>,</span><br><span class="line">  <span class="string">`segment_index`</span> <span class="built_in">int</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'已上传分片位置'</span>,</span><br><span class="line">  <span class="string">`segment_size`</span> <span class="built_in">int</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分片大小'</span>,</span><br><span class="line">  <span class="string">`segment_total`</span> <span class="built_in">int</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分片数量'</span>,</span><br><span class="line">  <span class="string">`md5_key`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'MD5用来识别文件的唯一码'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure><p>项目结构图</p><p><img src="https://img-blog.csdnimg.cn/fd2b1547dfa7453e8852528d22895c16.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3、前端实现">3、前端实现</h2><p>上传界面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>segment upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/md5.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/tool.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/upload.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"top"</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"upload"</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Segment File Upload<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"filename"</span> <span class="attr">id</span>=<span class="string">"filename"</span> <span class="attr">onchange</span>=<span class="string">"checkFile()"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"upload()"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span>等待中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"uuid"</span>&gt;</span>uuid_name:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"md5"</span> <span class="attr">style</span>=<span class="string">"margin-left:20px;"</span>&gt;</span>md5_key:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传Js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制文件分片和上传</span></span><br><span class="line"><span class="comment">// 不要忘记控制前端的显示结果</span></span><br><span class="line"><span class="comment">// 简单尝试直接使用串行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">''</span></span><br><span class="line"><span class="keyword">var</span> segmentIndex = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> segmentSize = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;  <span class="comment">// 先2MB用着</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件key计算</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calFileKey</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//把文件的信息存储为一个字符串</span></span><br><span class="line">    <span class="keyword">var</span> filedetails= file.name + file.size + file.type + file.lastModifiedDate;</span><br><span class="line">    <span class="comment">//使用当前文件的信息用md5加密生成一个key</span></span><br><span class="line">    <span class="keyword">var</span> key = hex_md5(filedetails);</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">    <span class="keyword">var</span> key10 = <span class="built_in">parseInt</span>(key,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(key10)</span><br><span class="line">    <span class="comment">//把加密的信息 转为一个62位的</span></span><br><span class="line">    <span class="keyword">var</span> key62 = Tool._10to62(key10);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"cal key:"</span> + key62)</span><br><span class="line">    <span class="keyword">return</span> key62</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算分片数量</span></span><br><span class="line"><span class="comment">// 注意分片序号从1开始</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calTotalSegmentSize</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> size = file.size</span><br><span class="line">    <span class="keyword">var</span> segmentTotal = <span class="built_in">Math</span>.ceil(size / segmentSize)</span><br><span class="line">    <span class="keyword">return</span> segmentTotal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算分片的开始</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calSegmentStartAndEnd</span>(<span class="params">segmentIndex, file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> start = (segmentIndex - <span class="number">1</span>) * segmentSize;</span><br><span class="line">    <span class="keyword">var</span> end = <span class="built_in">Math</span>.min(start + segmentSize, file.size);</span><br><span class="line">    <span class="keyword">return</span> [start, end];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测当前文件是否存在，存在且完成上传则输出秒传信息</span></span><br><span class="line"><span class="comment">// 存在但未完成，则将upload的segmentIndex修改，等待后续上传（把前端信息也修改一下）</span></span><br><span class="line"><span class="comment">// 不存在则md5码(key)，等待后续上传（把前端信息也修改一下）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = $(<span class="string">'#filename'</span>).get(<span class="number">0</span>).files[<span class="number">0</span>]</span><br><span class="line">    key = calFileKey(file)</span><br><span class="line">    $(<span class="string">'#md5'</span>).html(<span class="string">'md5_key: '</span> + key)</span><br><span class="line">    <span class="built_in">console</span>.log(file.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ajax请求找下数据库中该文件是否存在</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"/checkFile"</span>,</span><br><span class="line">        type:<span class="string">"post"</span>,</span><br><span class="line">        cache: <span class="literal">false</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            <span class="string">'key'</span>: key</span><br><span class="line">        &#125;,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = data.success</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">                $(<span class="string">'#uuid'</span>).html(<span class="string">'uuid_name:'</span>)</span><br><span class="line">                $(<span class="string">'#output'</span>).html(<span class="string">'该文件未上传'</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> segmentFile = <span class="built_in">JSON</span>.parse(data.message)</span><br><span class="line">                <span class="keyword">var</span> segmentIndexNow = segmentFile.segmentIndex</span><br><span class="line">                <span class="keyword">var</span> segmentTotal = segmentFile.segmentTotal</span><br><span class="line">                <span class="keyword">var</span> uuid = segmentFile.fileName</span><br><span class="line">                $(<span class="string">'#uuid'</span>).html(<span class="string">'uuid_name: '</span> + uuid)</span><br><span class="line">                <span class="keyword">if</span>(segmentIndexNow===segmentTotal)&#123;</span><br><span class="line">                    <span class="comment">// 完成上传</span></span><br><span class="line">                    $(<span class="string">'#output'</span>).html(<span class="string">'该文件已完成上传'</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">'#output'</span>).html(segmentIndexNow + <span class="string">'/'</span> +segmentTotal)</span><br><span class="line">                    segmentIndex = segmentIndexNow + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="string">'#output'</span>).html(<span class="string">"check请求错误"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"check请求错误"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总的上传方法，中间递归上传分片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = $(<span class="string">'#filename'</span>).get(<span class="number">0</span>).files[<span class="number">0</span>]</span><br><span class="line">    key = calFileKey(file)</span><br><span class="line">    $(<span class="string">'#md5'</span>).html(<span class="string">'md5_key:'</span> + key)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ajax请求找下数据库中该文件是否存在</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"/checkFile"</span>,</span><br><span class="line">        type:<span class="string">"post"</span>,</span><br><span class="line">        cache: <span class="literal">false</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            <span class="string">'key'</span>: key</span><br><span class="line">        &#125;,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = data.success</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">                <span class="keyword">var</span> segmentIndexNow = <span class="number">0</span></span><br><span class="line">                <span class="keyword">var</span> segmentTotal = calTotalSegmentSize(file)</span><br><span class="line">                $(<span class="string">'#uuid'</span>).html(<span class="string">'uuid_name:'</span>)</span><br><span class="line">                $(<span class="string">'#output'</span>).html(segmentIndexNow + <span class="string">'/'</span> +segmentTotal)</span><br><span class="line">                <span class="keyword">var</span> segmentIndex = segmentIndexNow + <span class="number">1</span></span><br><span class="line">                <span class="comment">// 开始上传分片</span></span><br><span class="line">                uploadSegment(segmentIndex, file, key)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> segmentFile = <span class="built_in">JSON</span>.parse(data.message)</span><br><span class="line">                <span class="keyword">var</span> segmentIndexNow = segmentFile.segmentIndex</span><br><span class="line">                <span class="keyword">var</span> segmentTotal = segmentFile.segmentTotal</span><br><span class="line">                <span class="keyword">var</span> uuid = segmentFile.fileName</span><br><span class="line">                $(<span class="string">'#uuid'</span>).html(<span class="string">'uuid_name: '</span> + uuid)</span><br><span class="line">                <span class="keyword">if</span>(segmentIndexNow==segmentTotal)&#123;</span><br><span class="line">                    <span class="comment">// 完成上传</span></span><br><span class="line">                    $(<span class="string">'#output'</span>).html(<span class="string">'该文件已完成上传'</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">'#output'</span>).html(segmentIndexNow + <span class="string">'/'</span> +segmentTotal)</span><br><span class="line">                    <span class="keyword">var</span> segmentIndex = segmentIndexNow + <span class="number">1</span></span><br><span class="line">                    <span class="comment">// 开始上传分片</span></span><br><span class="line">                    uploadSegment(segmentIndex, file, key)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"check请求错误"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传分片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadSegment</span>(<span class="params">segmentIndex, file, key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line">    <span class="keyword">var</span> segmentIndex = segmentIndex;</span><br><span class="line">    <span class="keyword">var</span> sAe = calSegmentStartAndEnd(segmentIndex, file)</span><br><span class="line">    <span class="keyword">var</span> segmentStart = sAe[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> segmentEnd = sAe[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">var</span> segment = file.slice(segmentStart, segmentEnd)</span><br><span class="line">    <span class="keyword">var</span> segmentTotal = calTotalSegmentSize(file)</span><br><span class="line">    <span class="keyword">var</span> originFileName = file.name</span><br><span class="line"></span><br><span class="line">    fd.append(<span class="string">'file'</span>, segment)</span><br><span class="line">    fd.append(<span class="string">'fileSize'</span>, file.size)</span><br><span class="line">    fd.append(<span class="string">'segmentIndex'</span>, segmentIndex)</span><br><span class="line">    fd.append(<span class="string">'key'</span>, key)</span><br><span class="line">    fd.append(<span class="string">'segmentSize'</span>, segmentSize)</span><br><span class="line">    fd.append(<span class="string">'originFileName'</span>, originFileName)</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"/uploadSegment"</span>,</span><br><span class="line">        type:<span class="string">"post"</span>,</span><br><span class="line">        cache: <span class="literal">false</span>,</span><br><span class="line">        data:fd,</span><br><span class="line">        processData: <span class="literal">false</span>,</span><br><span class="line">        contentType: <span class="literal">false</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = data.success</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">                $(<span class="string">'#output'</span>).html(data.message)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> segmentFile = <span class="built_in">JSON</span>.parse(data.message)</span><br><span class="line">                <span class="keyword">var</span> uuid = segmentFile.fileName</span><br><span class="line">                $(<span class="string">'#uuid'</span>).html(<span class="string">'uuid_name: '</span> + uuid)</span><br><span class="line">                <span class="comment">// 递归调用</span></span><br><span class="line">                $(<span class="string">'#output'</span>).html(segmentIndex + <span class="string">"/"</span> + segmentTotal)</span><br><span class="line">                <span class="keyword">if</span>(segmentIndex &lt; segmentTotal)</span><br><span class="line">                    uploadSegment(segmentIndex+ <span class="number">1</span>, file, key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"分片"</span> + segmentIndex + <span class="string">"上传失败"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、后端实现">4、后端实现</h2><h3 id="4-1-持久化类与全局返回类">4.1 持久化类与全局返回类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentFile</span>  </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> segmentIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> segmentSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> segmentTotal;</span><br><span class="line">    <span class="keyword">private</span> String md5Key;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReturnResult</span><span class="params">(<span class="keyword">boolean</span> success, String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Mapper接口">4.2 Mapper接口</h3><p>Mapper接口，这边使用注解进行mybatis sql语句的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SegmentFileMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对应的分片文件实体类</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from segment_file where md5_key = #&#123;key&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id=<span class="string">"segmentFileResult"</span>,value=&#123;</span><br><span class="line">            <span class="meta">@Result</span>(id=<span class="keyword">true</span>, column = <span class="string">"id"</span>,property = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"file_path"</span>,property = <span class="string">"filePath"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"file_name"</span>,property = <span class="string">"fileName"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"size"</span>,property = <span class="string">"size"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"segment_index"</span>,property = <span class="string">"segmentIndex"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"segment_size"</span>,property = <span class="string">"segmentSize"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"segment_total"</span>,property = <span class="string">"segmentTotal"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"md5_key"</span>,property = <span class="string">"md5Key"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;SegmentFile&gt; <span class="title">getSegmentFileByKey</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加对应的文件实体类</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into segment_file(id,file_path,file_name,"</span> +</span><br><span class="line">            <span class="string">"size,segment_index,segment_size,segment_total,md5_key) "</span> +</span><br><span class="line">            <span class="string">"values(#&#123;id&#125;,#&#123;filePath&#125;,#&#123;fileName&#125;,#&#123;size&#125;,#&#123;segmentIndex&#125;,"</span> +</span><br><span class="line">            <span class="string">"#&#123;segmentSize&#125;,#&#123;segmentTotal&#125;,#&#123;md5Key&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSegmentFile</span><span class="params">(SegmentFile segmentFile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主要用来更新分片信息</span></span><br><span class="line">    <span class="meta">@Update</span>(&#123;<span class="string">"update segment_file set "</span> +</span><br><span class="line">            <span class="string">"file_path = #&#123;filePath&#125;,file_name = #&#123;fileName&#125;,size = #&#123;size&#125;,"</span> +</span><br><span class="line">            <span class="string">"segment_index = #&#123;segmentIndex&#125;, segment_size = #&#123;segmentSize&#125;,"</span> +</span><br><span class="line">            <span class="string">"segment_total = #&#123;segmentTotal&#125;, md5_key = #&#123;md5Key&#125;"</span> +</span><br><span class="line">            <span class="string">"where id = #&#123;id&#125;"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateSegmentFile</span><span class="params">(SegmentFile segmentFile)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-文件工具类">4.3 文件工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工具类</span></span><br><span class="line"><span class="comment">// 文件名生成</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileNameWithoutSuffix</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> suffixIndex = fileName.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span>(suffixIndex&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fileName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileName.substring(<span class="number">0</span>, suffixIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileSuffix</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> suffixIndex = fileName.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span>(suffixIndex&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileName.substring(suffixIndex+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSegmentName</span><span class="params">(String fileName, <span class="keyword">int</span> segmentIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName + <span class="string">"#"</span> + segmentIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createSaveFileName</span><span class="params">(String key, String fileName)</span></span>&#123;</span><br><span class="line">        String suffix = getFileSuffix(fileName);</span><br><span class="line">        <span class="keyword">return</span> key + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createUUIDFileName</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        String suffix = getFileSuffix(fileName);</span><br><span class="line">        String name = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-Service分片服务类">4.4 Service分片服务类</h3><p>比较关键的业务类，包括<strong>文件存在确认，文件记录创建，文件信息更新，分片存储，分片合并和分片文件删除功能</strong>的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分片存储</span></span><br><span class="line"><span class="comment">// 文件存在确认</span></span><br><span class="line"><span class="comment">// 文件整合</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentFileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;file.temp&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String tempFileDir;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SegmentFileMapper segmentFileMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegmentFileService</span><span class="params">(SegmentFileMapper segmentFileMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.segmentFileMapper = segmentFileMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该文件存在，返回数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SegmentFile <span class="title">checkSegmentFile</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        List&lt;SegmentFile&gt; segmentFiles = segmentFileMapper.getSegmentFileByKey(key);</span><br><span class="line">        <span class="keyword">if</span>(segmentFiles!=<span class="keyword">null</span>&amp;&amp;segmentFiles.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> segmentFiles.get(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一次出现的文件，把数据存到数据库中</span></span><br><span class="line"><span class="comment">     * savePath为文件夹绝对位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createSegmentFile</span><span class="params">(String originFileName, String savePath, <span class="keyword">long</span> size, <span class="keyword">int</span> segmentSize, String key)</span></span>&#123;</span><br><span class="line">        String saveFileName = FileUtil.createSaveFileName(key, originFileName);</span><br><span class="line">        SegmentFile segmentFile = <span class="keyword">new</span> SegmentFile();</span><br><span class="line">        <span class="comment">// filepath为完整路径</span></span><br><span class="line">        segmentFile.setFilePath(savePath + saveFileName);</span><br><span class="line">        segmentFile.setFileName(saveFileName);</span><br><span class="line">        segmentFile.setSize(size);</span><br><span class="line">        segmentFile.setSegmentIndex(<span class="number">0</span>);</span><br><span class="line">        segmentFile.setSegmentSize(segmentSize);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> total = (<span class="keyword">int</span>) (size / segmentSize);</span><br><span class="line">        <span class="keyword">if</span>(size % segmentSize != <span class="number">0</span>) &#123;</span><br><span class="line">            total++;</span><br><span class="line">        &#125;</span><br><span class="line">        segmentFile.setSegmentTotal(total);</span><br><span class="line">        segmentFile.setMd5Key(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> segmentFileMapper.insertSegmentFile(segmentFile) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储分片到服务器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveSegment</span><span class="params">(MultipartFile file,String key, String originFileName, <span class="keyword">int</span> segmentIndex)</span></span>&#123;</span><br><span class="line">        String saveFileName = FileUtil.createSaveFileName(key, originFileName);</span><br><span class="line">        String segmentFileName = FileUtil.getSegmentName(saveFileName, segmentIndex);</span><br><span class="line">        <span class="comment">// 存储分片，方便之后使用</span></span><br><span class="line">        <span class="keyword">boolean</span> saveSuccess = upload(file,  tempFileDir +segmentFileName);</span><br><span class="line">        <span class="keyword">if</span>(saveSuccess)&#123;</span><br><span class="line">            <span class="comment">// 修改数据库中分片记录</span></span><br><span class="line">            SegmentFile segmentFile = segmentFileMapper.getSegmentFileByKey(key).get(<span class="number">0</span>);</span><br><span class="line">            segmentFile.setSegmentIndex(segmentFile.getSegmentIndex()+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 文件信息更新</span></span><br><span class="line">             <span class="keyword">int</span> row = segmentFileMapper.updateSegmentFile(segmentFile);</span><br><span class="line">            <span class="keyword">return</span> row &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将所有的分片联合成同一文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mergeSegment</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        SegmentFile segmentFile = segmentFileMapper.getSegmentFileByKey(key).get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> segmentCount = segmentFile.getSegmentTotal();</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] byt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 整合结果文件</span></span><br><span class="line">            File newFile = <span class="keyword">new</span> File(segmentFile.getFilePath());</span><br><span class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(newFile, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segmentCount; i++) &#123;</span><br><span class="line">                String segmentFilePath = FileUtil.getSegmentName(tempFileDir + segmentFile.getFileName(), i + <span class="number">1</span>);</span><br><span class="line">                fileInputStream = <span class="keyword">new</span> FileInputStream(segmentFilePath);</span><br><span class="line">                <span class="keyword">while</span> ((len = fileInputStream.read(byt)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    outputStream.write(byt, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"分片合并异常,异常原因："</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(<span class="string">"IO流正常关闭"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"IO流关闭异常,异常原因："</span>,e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"分片合并成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成合并，删除分片文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteSegments</span><span class="params">(String key)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 为了保证不被占用，先回收数据流对象</span></span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        SegmentFile segmentFile = segmentFileMapper.getSegmentFileByKey(key).get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> segmentCount = segmentFile.getSegmentTotal();</span><br><span class="line">        List&lt;String&gt; remain = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> finished = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[segmentCount];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; segmentCount; i++) &#123;</span><br><span class="line">            String segmentFilePath = FileUtil.getSegmentName(tempFileDir + segmentFile.getFileName(), i + <span class="number">1</span>);</span><br><span class="line">            remain.add(segmentFilePath);</span><br><span class="line">            File file = <span class="keyword">new</span> File(segmentFilePath);</span><br><span class="line">            <span class="keyword">boolean</span> result = file.delete();</span><br><span class="line">            <span class="keyword">if</span>(result) &#123;</span><br><span class="line">                finished++;</span><br><span class="line">                visited[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"分片文件: &#123;&#125; 删除 &#123;&#125;"</span> , segmentFilePath, result?<span class="string">"成功"</span>:<span class="string">"失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// visited数组，然后完成了再去除，知道count到达总数;二次确认删除</span></span><br><span class="line">        <span class="keyword">while</span>(finished&lt;segmentCount)&#123;</span><br><span class="line">            System.gc();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;segmentCount;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                    String segmentFilePath = FileUtil.getSegmentName(segmentFile.getFilePath(), i + <span class="number">1</span>);</span><br><span class="line">                    remain.add(segmentFilePath);</span><br><span class="line">                    File file = <span class="keyword">new</span> File(segmentFilePath);</span><br><span class="line">                    <span class="keyword">boolean</span> result = file.delete();</span><br><span class="line">                    <span class="keyword">if</span>(result)&#123;</span><br><span class="line">                        visited[i] = <span class="number">1</span>;</span><br><span class="line">                        finished++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.info(<span class="string">"分片文件: &#123;&#125; 删除 &#123;&#125;"</span> , segmentFilePath, result?<span class="string">"成功"</span>:<span class="string">"失败"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">upload</span><span class="params">(MultipartFile file, String path)</span></span>&#123;</span><br><span class="line">        File dest = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="comment">//判断文件父目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!dest.getParentFile().exists()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> b = dest.getParentFile().mkdir();</span><br><span class="line">            <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-Controller类">4.5 Controller类</h3><p>主要是两个方法，一个是判断当前文件上传状况，主要就是想在前端选中文件后就调用一下，显示文件上传状态，这样就能实现秒传功能的效果了。第二个就是上传分片功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主要实现check文件存在与否</span></span><br><span class="line"><span class="comment"> * 上传分片/整合分片</span></span><br><span class="line"><span class="comment"> * 这里一定要<span class="doctag">@Controller</span>，否则就不会跳转到static下了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentFileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SegmentFileService segmentFileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;file.save-path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String savePath;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/pages/upload.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/checkFile"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">// 检查文件是否已经存在，且返回segment信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReturnResult <span class="title">checkFileExist</span><span class="params">(String key)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        SegmentFile segmentFile = segmentFileService.checkSegmentFile(key);</span><br><span class="line">        <span class="keyword">if</span>(segmentFile==<span class="keyword">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">"该文件未上传，md5:&#123;&#125;"</span>,key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ReturnResult(<span class="keyword">false</span>, <span class="string">"该文件未上传"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 转成json回去用</span></span><br><span class="line">            String fileJson = mapper.writeValueAsString(segmentFile);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ReturnResult(<span class="keyword">true</span>, fileJson);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要方法流程</span></span><br><span class="line"><span class="comment">     * 上传文件需要从前端取分片序号和分片大小，因为切割是前端切滴，所以文件原始大小也要返回来</span></span><br><span class="line"><span class="comment">     * 剩余信息在service中计算</span></span><br><span class="line"><span class="comment">     * 首先确认是否存在该文件，不存在就放到数据库中新建</span></span><br><span class="line"><span class="comment">     * 之后对segmentIndex分别处理，存储分片文件（文件分片前端完成）</span></span><br><span class="line"><span class="comment">     * 简化情况，认为前端都是异步请求，并且分片是按顺序请求的，只有前面的index处理了才能处理后面的分片（在前端体现）</span></span><br><span class="line"><span class="comment">     * 这样当segmentIndex和总count相同时，获取结果</span></span><br><span class="line"><span class="comment">     * 最后如果失败了，需要删除数据库的记录，这样就可以让用户再次上传</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/uploadSegment"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReturnResult <span class="title">upLoadSegmentFile</span><span class="params">(MultipartFile file, String originFileName, <span class="keyword">long</span> fileSize, Integer segmentIndex, Integer segmentSize, String key)</span> <span class="keyword">throws</span> JsonProcessingException</span>&#123;</span><br><span class="line">        log.info(<span class="string">"分片文件 &#123;&#125; 上传开始"</span>,originFileName);</span><br><span class="line">        <span class="comment">// 查找是否存在，不存在就写入</span></span><br><span class="line">        SegmentFile segmentFile = segmentFileService.checkSegmentFile(key);</span><br><span class="line">        <span class="keyword">if</span>(segmentFile==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> writeSuccess = segmentFileService.createSegmentFile(originFileName, savePath, fileSize, segmentSize, key);</span><br><span class="line">            <span class="keyword">if</span>(!writeSuccess)&#123;</span><br><span class="line">                <span class="comment">// 写入失败，返回错误信息</span></span><br><span class="line">                log.warn(<span class="string">"文件数据库记录创建失败"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ReturnResult(<span class="keyword">false</span>, <span class="string">"文件数据库记录创建失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        segmentFile = segmentFileService.checkSegmentFile(key);</span><br><span class="line">        <span class="comment">// 将当前分片存入</span></span><br><span class="line">        <span class="keyword">boolean</span> segmentWriteSuccess = segmentFileService.saveSegment(file, key, originFileName, segmentIndex);</span><br><span class="line">        <span class="keyword">if</span>(!segmentWriteSuccess) &#123;</span><br><span class="line">            log.warn(<span class="string">"分片文件存储失败"</span>);</span><br><span class="line">            <span class="comment">// 分片存储失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ReturnResult(<span class="keyword">false</span>, <span class="string">"分片文件存储失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">deleteThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    segmentFileService.deleteSegments(key);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否分片齐全，齐全则合并生成究极文件</span></span><br><span class="line">        <span class="comment">// 其实考虑这步会不会失败应该在数据库再加一个值</span></span><br><span class="line">        <span class="keyword">if</span>(segmentIndex==segmentFile.getSegmentTotal())&#123;</span><br><span class="line">            <span class="keyword">boolean</span> mergeSuccess = segmentFileService.mergeSegment(key);</span><br><span class="line">            <span class="keyword">if</span>(mergeSuccess) &#123;</span><br><span class="line">                <span class="comment">// 另开线程去自旋删除</span></span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> deleteThread()).start();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ReturnResult(<span class="keyword">true</span>, mapper.writeValueAsString(segmentFile));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                log.warn(<span class="string">"文件合并失败"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ReturnResult(<span class="keyword">false</span>, <span class="string">"文件合并失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReturnResult(<span class="keyword">true</span>, mapper.writeValueAsString(segmentFile));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、总结">5、总结</h2><p>因为是默认串行调用，文件已上传分片信息直接用当前上传的分片序号覆盖。如果要并行实现的话，数据库中可能需要存储一个总分片数量大小长度的字符串，用来记录上传进度（状态压缩），比如<code>111011</code>，表示6个分片，分片4未上传，这样就能并行上传分片了</p><p>代码地址：<a href="https://github.com/LXT2017/JavaLearnProject/tree/main/file-segment" target="_blank" rel="noopener" title="https://github.com/LXT2017/JavaLearnProject/tree/main/file-segment">https://github.com/LXT2017/JavaLearnProject/tree/main/file-segment</a></p><h1>三、进阶方案</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p>这篇文章写的也不错，使用的是Vue+SpringBoot大文件上传，可以参考：<a href="https://qkongtao.cn/?p=1410" target="_blank" rel="noopener" title="SpringBoot 实现大文件分片上传、断点续传及秒传">SpringBoot 实现大文件分片上传、断点续传及秒传</a></p></blockquote><p>前端部分可以使用百度或者使用第三方的上传组件；后端用两种方式实现文件写入，一种是用<code>RandomAccessFile</code>(参考：<a href="https://blog.csdn.net/dimudan2015/article/details/81910690" target="_blank" rel="noopener" title="https://blog.csdn.net/dimudan2015/article/details/81910690">https://blog.csdn.net/dimudan2015/article/details/81910690</a>)；另一种是使用<code>MappedByteBuffer</code>(参考：<a href="https://www.jianshu.com/p/f90866dcbffc" target="_blank" rel="noopener" title="https://www.jianshu.com/p/f90866dcbffc">https://www.jianshu.com/p/f90866dcbffc</a>)</p><p>使用该种方法要注意每一个分块的记录，因为通过偏移量存储文件的方式是直接操作源文件的，并不会生成一块块的分片文件，分片文件使用Mysql或者Redis进行记录，最后传输成功后记录完整的文件信息。</p><h2 id="2、核心代码介绍">2、核心代码介绍</h2><p>文件操作核心模板类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SliceUploadTemplate</span> <span class="keyword">implements</span> <span class="title">SliceUploadStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">upload</span><span class="params">(FileUploadRequestDTO param)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> File <span class="title">createTmpFile</span><span class="params">(FileUploadRequestDTO param)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    FilePathUtil filePathUtil = SpringContextHolder.getBean(FilePathUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    param.setPath(FileUtil.withoutHeadAndTailDiagonal(param.getPath()));</span><br><span class="line">    String fileName = param.getFile().getOriginalFilename();</span><br><span class="line">    String uploadDirPath = filePathUtil.getPath(param);</span><br><span class="line">    String tempFileName = fileName + <span class="string">"_tmp"</span>;</span><br><span class="line">    File tmpDir = <span class="keyword">new</span> File(uploadDirPath);</span><br><span class="line">    File tmpFile = <span class="keyword">new</span> File(uploadDirPath, tempFileName);</span><br><span class="line">    <span class="keyword">if</span> (!tmpDir.exists()) &#123;</span><br><span class="line">      tmpDir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmpFile;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FileUploadDTO <span class="title">sliceUpload</span><span class="params">(FileUploadRequestDTO param)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isOk = <span class="keyword">this</span>.upload(param);</span><br><span class="line">    <span class="keyword">if</span> (isOk) &#123;</span><br><span class="line">      File tmpFile = <span class="keyword">this</span>.createTmpFile(param);</span><br><span class="line">      FileUploadDTO fileUploadDTO = <span class="keyword">this</span>.saveAndFileUploadDTO(param.getFile().getOriginalFilename(), tmpFile);</span><br><span class="line">      <span class="keyword">return</span> fileUploadDTO;</span><br><span class="line">    &#125;</span><br><span class="line">    String md5 = FileMD5Util.getFileMD5(param.getFile());</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(param.getChunk(), md5);</span><br><span class="line">    <span class="keyword">return</span> FileUploadDTO.builder().chunkMd5Info(map).build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 检查并修改文件上传进度</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkAndSetUploadProgress</span><span class="params">(FileUploadRequestDTO param, String uploadDirPath)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String fileName = param.getFile().getOriginalFilename();</span><br><span class="line">    File confFile = <span class="keyword">new</span> File(uploadDirPath, fileName + <span class="string">".conf"</span>);</span><br><span class="line">    <span class="keyword">byte</span> isComplete = <span class="number">0</span>;</span><br><span class="line">    RandomAccessFile accessConfFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      accessConfFile = <span class="keyword">new</span> RandomAccessFile(confFile, <span class="string">"rw"</span>);</span><br><span class="line">      <span class="comment">//把该分段标记为 true 表示完成</span></span><br><span class="line">      System.out.println(<span class="string">"set part "</span> + param.getChunk() + <span class="string">" complete"</span>);</span><br><span class="line">      <span class="comment">//创建conf文件文件长度为总分片数，每上传一个分块即向conf文件中写入一个127，那么没上传的位置就是默认0,已上传的就是Byte.MAX_VALUE 127</span></span><br><span class="line">      accessConfFile.setLength(param.getChunks());</span><br><span class="line">      accessConfFile.seek(param.getChunk());</span><br><span class="line">      accessConfFile.write(Byte.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//completeList 检查是否全部完成,如果数组里是否全部都是127(全部分片都成功上传)</span></span><br><span class="line">      <span class="keyword">byte</span>[] completeList = FileUtils.readFileToByteArray(confFile);</span><br><span class="line">      isComplete = Byte.MAX_VALUE;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; completeList.length &amp;&amp; isComplete == Byte.MAX_VALUE; i++) &#123;</span><br><span class="line">        <span class="comment">//与运算, 如果有部分没有完成则 isComplete 不是 Byte.MAX_VALUE</span></span><br><span class="line">        isComplete = (<span class="keyword">byte</span>) (isComplete &amp; completeList[i]);</span><br><span class="line">        System.out.println(<span class="string">"check part "</span> + i + <span class="string">" complete?:"</span> + completeList[i]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      FileUtil.close(accessConfFile);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> isOk = setUploadProgress2Redis(param, uploadDirPath, fileName, confFile, isComplete);</span><br><span class="line">    <span class="keyword">return</span> isOk;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 把上传进度信息存进redis</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setUploadProgress2Redis</span><span class="params">(FileUploadRequestDTO param, String uploadDirPath,</span></span></span><br><span class="line"><span class="function"><span class="params">      String fileName, File confFile, <span class="keyword">byte</span> isComplete)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RedisUtil redisUtil = SpringContextHolder.getBean(RedisUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (isComplete == Byte.MAX_VALUE) &#123;</span><br><span class="line">      redisUtil.hset(FileConstant.FILE_UPLOAD_STATUS, param.getMd5(), <span class="string">"true"</span>);</span><br><span class="line">      redisUtil.del(FileConstant.FILE_MD5_KEY + param.getMd5());</span><br><span class="line">      confFile.delete();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!redisUtil.hHasKey(FileConstant.FILE_UPLOAD_STATUS, param.getMd5())) &#123;</span><br><span class="line">        redisUtil.hset(FileConstant.FILE_UPLOAD_STATUS, param.getMd5(), <span class="string">"false"</span>);</span><br><span class="line">        redisUtil.set(FileConstant.FILE_MD5_KEY + param.getMd5(),</span><br><span class="line">            uploadDirPath + FileConstant.FILE_SEPARATORCHAR + fileName + <span class="string">".conf"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保存文件操作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FileUploadDTO <span class="title">saveAndFileUploadDTO</span><span class="params">(String fileName, File tmpFile)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    FileUploadDTO fileUploadDTO = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">      fileUploadDTO = renameFile(tmpFile, fileName);</span><br><span class="line">      <span class="keyword">if</span> (fileUploadDTO.isUploadComplete()) &#123;</span><br><span class="line">        System.out</span><br><span class="line">            .println(<span class="string">"upload complete !!"</span> + fileUploadDTO.isUploadComplete() + <span class="string">" name="</span> + fileName);</span><br><span class="line">        <span class="comment">//TODO 保存文件信息到数据库</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileUploadDTO;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 文件重命名</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> toBeRenamed 将要修改名字的文件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> toFileNewName 新的名字</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> FileUploadDTO <span class="title">renameFile</span><span class="params">(File toBeRenamed, String toFileNewName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查要重命名的文件是否存在，是否是文件</span></span><br><span class="line">    FileUploadDTO fileUploadDTO = <span class="keyword">new</span> FileUploadDTO();</span><br><span class="line">    <span class="keyword">if</span> (!toBeRenamed.exists() || toBeRenamed.isDirectory()) &#123;</span><br><span class="line">      log.info(<span class="string">"File does not exist: &#123;&#125;"</span>, toBeRenamed.getName());</span><br><span class="line">      fileUploadDTO.setUploadComplete(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">return</span> fileUploadDTO;</span><br><span class="line">    &#125;</span><br><span class="line">    String ext = FileUtil.getExtension(toFileNewName);</span><br><span class="line">    String p = toBeRenamed.getParent();</span><br><span class="line">    String filePath = p + FileConstant.FILE_SEPARATORCHAR + toFileNewName;</span><br><span class="line">    File newFile = <span class="keyword">new</span> File(filePath);</span><br><span class="line">    <span class="comment">//修改文件名</span></span><br><span class="line">    <span class="keyword">boolean</span> uploadFlag = toBeRenamed.renameTo(newFile);</span><br><span class="line"></span><br><span class="line">    fileUploadDTO.setMtime(DateUtil.getCurrentTimeStamp());</span><br><span class="line">    fileUploadDTO.setUploadComplete(uploadFlag);</span><br><span class="line">    fileUploadDTO.setPath(filePath);</span><br><span class="line">    fileUploadDTO.setSize(newFile.length());</span><br><span class="line">    fileUploadDTO.setFileExt(ext);</span><br><span class="line">    fileUploadDTO.setFileId(toFileNewName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileUploadDTO;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RandomAccessFile实现方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UploadMode</span>(mode = UploadModeEnum.RANDOM_ACCESS)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomAccessUploadStrategy</span> <span class="keyword">extends</span> <span class="title">SliceUploadTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> FilePathUtil filePathUtil;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;upload.chunkSize&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> defaultChunkSize;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">upload</span><span class="params">(FileUploadRequestDTO param)</span> </span>&#123;</span><br><span class="line">    RandomAccessFile accessTmpFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      String uploadDirPath = filePathUtil.getPath(param);</span><br><span class="line">      File tmpFile = <span class="keyword">super</span>.createTmpFile(param);</span><br><span class="line">      accessTmpFile = <span class="keyword">new</span> RandomAccessFile(tmpFile, <span class="string">"rw"</span>);</span><br><span class="line">      <span class="comment">//这个必须与前端设定的值一致</span></span><br><span class="line">      <span class="keyword">long</span> chunkSize = Objects.isNull(param.getChunkSize()) ? defaultChunkSize * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">          : param.getChunkSize();</span><br><span class="line">      <span class="keyword">long</span> offset = chunkSize * param.getChunk();</span><br><span class="line">      <span class="comment">//定位到该分片的偏移量</span></span><br><span class="line">      accessTmpFile.seek(offset);</span><br><span class="line">      <span class="comment">//写入该分片数据</span></span><br><span class="line">      accessTmpFile.write(param.getFile().getBytes());</span><br><span class="line">      <span class="keyword">boolean</span> isOk = <span class="keyword">super</span>.checkAndSetUploadProgress(param, uploadDirPath);</span><br><span class="line">      <span class="keyword">return</span> isOk;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      FileUtil.close(accessTmpFile);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MappedByteBuffer实现方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UploadMode</span>(mode = UploadModeEnum.MAPPED_BYTEBUFFER)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedByteBufferUploadStrategy</span> <span class="keyword">extends</span> <span class="title">SliceUploadTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> FilePathUtil filePathUtil;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;upload.chunkSize&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> defaultChunkSize;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">upload</span><span class="params">(FileUploadRequestDTO param)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RandomAccessFile tempRaf = <span class="keyword">null</span>;</span><br><span class="line">    FileChannel fileChannel = <span class="keyword">null</span>;</span><br><span class="line">    MappedByteBuffer mappedByteBuffer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      String uploadDirPath = filePathUtil.getPath(param);</span><br><span class="line">      File tmpFile = <span class="keyword">super</span>.createTmpFile(param);</span><br><span class="line">      tempRaf = <span class="keyword">new</span> RandomAccessFile(tmpFile, <span class="string">"rw"</span>);</span><br><span class="line">      fileChannel = tempRaf.getChannel();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">long</span> chunkSize = Objects.isNull(param.getChunkSize()) ? defaultChunkSize * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">          : param.getChunkSize();</span><br><span class="line">      <span class="comment">//写入该分片数据</span></span><br><span class="line">      <span class="keyword">long</span> offset = chunkSize * param.getChunk();</span><br><span class="line">      <span class="keyword">byte</span>[] fileData = param.getFile().getBytes();</span><br><span class="line">      mappedByteBuffer = fileChannel</span><br><span class="line">          .map(FileChannel.MapMode.READ_WRITE, offset, fileData.length);</span><br><span class="line">      mappedByteBuffer.put(fileData);</span><br><span class="line">      <span class="keyword">boolean</span> isOk = <span class="keyword">super</span>.checkAndSetUploadProgress(param, uploadDirPath);</span><br><span class="line">      <span class="keyword">return</span> isOk;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">      FileUtil.freedMappedByteBuffer(mappedByteBuffer);</span><br><span class="line">      FileUtil.close(fileChannel);</span><br><span class="line">      FileUtil.close(tempRaf);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文档：</p><p><a href="https://blog.csdn.net/qq_41733192/article/details/123783292" target="_blank" rel="noopener" title="https://blog.csdn.net/qq_41733192/article/details/123783292">https://blog.csdn.net/qq_41733192/article/details/123783292</a></p><p><a href="https://cloud.tencent.com/developer/article/1541199" target="_blank" rel="noopener" title="https://cloud.tencent.com/developer/article/1541199">https://cloud.tencent.com/developer/article/1541199</a></p><p><a href="https://qkongtao.cn/?p=1410" target="_blank" rel="noopener" title="https://qkongtao.cn/?p=1410">https://qkongtao.cn/?p=1410</a></p><p><a href="https://gitee.com/KT1205529635/simple-uploader/tree/master" target="_blank" rel="noopener" title="https://gitee.com/KT1205529635/simple-uploader/tree/master">https://gitee.com/KT1205529635/simple-uploader/tree/master</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、大文件上传简介&lt;/h1&gt;
&lt;h2 id=&quot;1、秒传&quot;&gt;1、秒传&lt;/h2&gt;
&lt;p&gt;通俗的说，你把要上传的东西上传，服务器会先做MD5校验，如果服务器上有一样的东西，它就直接给你个新地址，其实你下载的都是服务器上的同一个文件，想要不秒传，其实只要让MD5改变，就是对文件本身做一下修改（改名字不行），例如一个文本文件，你多加几个字，MD5就变了，就不会秒传了&lt;/p&gt;
&lt;h2 id=&quot;2、分片上传&quot;&gt;2、分片上传&lt;/h2&gt;
&lt;h3 id=&quot;2-1-介绍&quot;&gt;2.1 介绍&lt;/h3&gt;
&lt;p&gt;分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（我们称之为Part）来进行分别上传，上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>常用的HTTP服务压测工具</title>
    <link href="https://www.shawn22.xyz/posts/32888e30.html"/>
    <id>https://www.shawn22.xyz/posts/32888e30.html</id>
    <published>2022-10-31T13:35:27.000Z</published>
    <updated>2022-10-31T13:46:15.554Z</updated>
    
    <content type="html"><![CDATA[<h1>一、压测介绍</h1><h2 id="1、简介">1、简介</h2><p>在项目正式上线之前，我们通常需要通过压测来评估当前系统能够支撑的请求量、排查可能存在的隐藏bug，同时了解了程序的实际处理能力能够帮我们更好的匹配项目的实际需求，节约资源成本。</p><h2 id="2、压测相关术语">2、压测相关术语</h2><ul><li>响应时间(RT) ：指系统对请求作出响应的时间.</li><li>吞吐量(Throughput) ：指系统在单位时间内处理请求的数量</li><li>QPS每秒查询率(Query Per Second) ：“每秒查询率”，是一台服务器每秒能够响应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</li><li>TPS(TransactionPerSecond)：每秒钟系统能够处理的交易或事务的数量</li><li>并发连接数：某个时刻服务器所接受的请求总数</li></ul><a id="more"></a><h2 id="3、压测常用工具">3、压测常用工具</h2><ul><li><p>ab</p></li><li><p>wrk</p></li><li><p>jmeter</p></li></ul><h1>二、压测工具介绍</h1><h2 id="1、ab压测">1、ab压测</h2><h3 id="1-1-介绍">1.1 介绍</h3><blockquote><p>ab全称<strong>Apache Bench</strong>，<strong>是Apache自带的性能测试工具</strong>。使用这个工具，只须指定同时连接数、请求数以及URL，即可测试网站或网站程序的性能<br>ab压测官方文档：<a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener" title="https://httpd.apache.org/docs/2.4/programs/ab.html">https://httpd.apache.org/docs/2.4/programs/ab.html</a></p></blockquote><p>通过ab发送请求模拟多个访问者同时对某一URL地址进行访问,可以得到每秒传送字节数、每秒处理请求数、每请求处理时间等统计数据。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。</p><h3 id="1-2-ab压测使用">1.2 ab压测使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ab [options] [http://]hostname[:port]/path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用参数如下</span></span><br><span class="line">-n requests 总请求数</span><br><span class="line">-c concurrency 一次产生的请求数，可以理解为并发数</span><br><span class="line">-t timelimit 测试所进行的最大秒数, 可以当做请求的超时时间</span><br><span class="line">-p postfile 包含了需要POST的数据的文件</span><br><span class="line">-T content-type POST数据所使用的Content-type头信息</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试某个GET请求接口</span></span><br><span class="line">ab -n 10000 -c 100 -t 10 <span class="string">"http://127.0.0.1:8080/api/v1/posts?size=10"</span></span><br><span class="line"><span class="comment"># 测试POST请求接口</span></span><br><span class="line">ab -n 10000 -c 100 -t 10 -p post.json -T <span class="string">"application/json"</span> <span class="string">"http://127.0.0.1:8080/api/v1/post"</span></span><br></pre></td></tr></table></figure><h2 id="2、wrk压测">2、wrk压测</h2><h3 id="2-1-介绍">2.1 介绍</h3><blockquote><p>wrk 是一款针对 Http 协议的基准测试工具，它能够在单机多核 CPU 的条件下，使用系统自带的高性能 I/O 机制，如 epoll，kqueue 等，通过多线程和事件模式，对目标机器产生大量的负载。<br>github地址：<a href="https://github.com/wg/wrk" target="_blank" rel="noopener" title="https://github.com/wg/wrk">https://github.com/wg/wrk</a></p></blockquote><p><strong>优势：</strong></p><ul><li><p>轻量级性能测试工具</p></li><li><p>安装简单</p></li><li><p>学习曲线基本为0，几分钟就学会使用了</p></li><li><p>基于系统自带的高性能I/O机制，如epoll，kqueue，利用异步的事件驱动框架，通过很少的线程就可以压出很大的并发量，例如几万、几十万，这是很多性能测试工具无法做到的。</p></li></ul><p><strong>劣势：</strong></p><ul><li>wrk 目前仅支持单机压测，后续也不太可能支持多机器对目标机压测，因为它本身的定位，并不是用来取代 JMeter, LoadRunner 等专业的测试工具。</li></ul><h3 id="2-2-安装">2.2 安装</h3><p>这里我通过源码进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装必要的依赖，已经安装了可以忽略</span></span><br><span class="line">sudo apt install build-essential libssl-dev git unzip</span><br><span class="line"><span class="comment"># 从 github 拉取源代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/wg/wrk.git</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="built_in">cd</span> wrk</span><br><span class="line"><span class="comment"># 可以使用多线程编译来加快速度,make -j8, 8 表示 8个线程一起编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 把生成的wrk移到一个PATH目录下面</span></span><br><span class="line">sudo cp wrk /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><h3 id="2-3-wrk压测简单使用">2.3 wrk压测简单使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">使用方法: wrk &lt;选项&gt; &lt;被测HTTP服务的URL&gt;                           </span><br><span class="line"> </span><br><span class="line">  Options:                                           </span><br><span class="line">    -c, --connections &lt;N&gt;  跟服务器建立并保持的TCP连接数量 </span><br><span class="line">    -d, --duration    &lt;T&gt;  压测时间          </span><br><span class="line">    -t, --threads     &lt;N&gt;  使用多少个线程进行压测，压测时，是有一个主线程来控制我们设置的n个子线程间调度  </span><br><span class="line">                                                    </span><br><span class="line">    -s, --script      &lt;S&gt;  指定Lua脚本路径      </span><br><span class="line">    -H, --header      &lt;H&gt;  为每一个HTTP请求添加HTTP头     </span><br><span class="line">        --latency          在压测结束后，打印延迟统计信息  </span><br><span class="line">        --timeout     &lt;T&gt;  超时时间    </span><br><span class="line">    -v, --version          打印正在使用的wrk的详细版本信                                              </span><br><span class="line"> </span><br><span class="line">  &lt;N&gt;代表数字参数，支持国际单位 (1k, 1M, 1G)</span><br><span class="line">  &lt;T&gt;代表时间参数，支持时间单位 (2s, 2m, 2h)</span><br></pre></td></tr></table></figure><p>举例，当然wrk工具嵌入了lua脚本语言，因此，在自定义压测场景时，可在wrk目录下使用lua定制压测场景</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wrk -t8 -c100 -d30s --latency http://127.0.0.1:8080/api/v1/posts?size=10</span><br><span class="line"><span class="comment"># 使用8个线程200个连接，对bing首页进行了30秒的压测，并要求在压测结果中输出响应延迟信息</span></span><br><span class="line">wrk -t8 -c200 -d30s --latency  http://www.bing.com</span><br></pre></td></tr></table></figure><h3 id="2-4-go-wrk介绍">2.4 go-wrk介绍</h3><p><a href="https://github.com/adjust/go-wrk" target="_blank" rel="noopener" title="go-wrk">go-wrk</a>是Go语言版本的<code>wrk</code>，Windows同学可以使用它来测试，使用如下命令来安装<code>go-wrk</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/adeven/go-wrk</span><br></pre></td></tr></table></figure><p>使用方法同<code>wrk</code>类似，基本格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-wrk [flags] url</span><br></pre></td></tr></table></figure><p>常用的参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-H=<span class="string">"User-Agent: go-wrk 0.1 bechmark\nContent-Type: text/html;"</span>: 由<span class="string">'\n'</span>分隔的请求头</span><br><span class="line">-c=100: 使用的最大连接数</span><br><span class="line">-k=<span class="literal">true</span>: 是否禁用keep-alives</span><br><span class="line">-i=<span class="literal">false</span>: <span class="keyword">if</span> TLS security checks are disabled</span><br><span class="line">-m=<span class="string">"GET"</span>: HTTP请求方法</span><br><span class="line">-n=1000: 请求总数</span><br><span class="line">-t=1: 使用的线程数</span><br><span class="line">-b=<span class="string">""</span> HTTP请求体</span><br><span class="line">-s=<span class="string">""</span> 如果指定，它将计算响应中包含搜索到的字符串s的频率</span><br></pre></td></tr></table></figure><p>执行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-wrk -t=8 -c=100 -n=10000 <span class="string">"http://127.0.0.1:8080/api/v1/posts?size=10"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、压测介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;在项目正式上线之前，我们通常需要通过压测来评估当前系统能够支撑的请求量、排查可能存在的隐藏bug，同时了解了程序的实际处理能力能够帮我们更好的匹配项目的实际需求，节约资源成本。&lt;/p&gt;
&lt;h2 id=&quot;2、压测相关术语&quot;&gt;2、压测相关术语&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;响应时间(RT) ：指系统对请求作出响应的时间.&lt;/li&gt;
&lt;li&gt;吞吐量(Throughput) ：指系统在单位时间内处理请求的数量&lt;/li&gt;
&lt;li&gt;QPS每秒查询率(Query Per Second) ：“每秒查询率”，是一台服务器每秒能够响应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。&lt;/li&gt;
&lt;li&gt;TPS(TransactionPerSecond)：每秒钟系统能够处理的交易或事务的数量&lt;/li&gt;
&lt;li&gt;并发连接数：某个时刻服务器所接受的请求总数&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://www.shawn22.xyz/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>几种分布式锁详解</title>
    <link href="https://www.shawn22.xyz/posts/4e57a4d4.html"/>
    <id>https://www.shawn22.xyz/posts/4e57a4d4.html</id>
    <published>2022-10-31T13:33:46.000Z</published>
    <updated>2022-10-31T13:46:15.561Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><h2 id="1、介绍">1、介绍</h2><p>在应用开发中，特别是web工程开发，通常都是并发编程，不是多进程就是多线程。这种场景下极易出现线程并发性安全问题，此时不得不使用锁来解决问题。在多线程高并发场景下，为了保证资源的线程安全问题，jdk为我们提供了<code>synchronized</code>关键字和<code>ReentrantLock</code>可重入锁，但是它们只能保证一个工程内的线程安全。在分布式集群、微服务、云原生横行的当下，如何保证不同进程、不同服务、不同机器的线程安全问题，jdk并没有给我们提供既有的解决方案。目前主流的实现有以下方式：</p><ul><li>基于mysql关系型实现</li><li>基于redis非关系型数据实现</li><li>基于zookeeper/etcd实现</li></ul><a id="more"></a><h2 id="2、超卖问题简述">2、超卖问题简述</h2><blockquote><p>多线程并发安全问题最典型的代表就是超卖现象库存在并发量较大情况下很容易发生超卖现象，一旦发生超卖现象，就会出现多成交了订单而发不了货的情况</p></blockquote><p>商品S库存余量为5时，用户A和B同时来购买一个商品，此时查询库存数都为5，库存充足则开始减库存：</p><p>用户A：<code>update db_stock set stock = stock - 1 where id = 1</code>；用户B：<code>update db_stock set stock = stock - 1 where id = 1</code>。并发情况下，更新后的结果可能是4，而实际的最终库存量应该是3才对</p><p>(可以自己搭建，用JMeter进行压力测试)</p><h1>二、传统锁</h1><h2 id="1、JVM锁">1、JVM锁</h2><h3 id="1-1-添加jvm锁">1.1 添加jvm锁</h3><p>使用jvm锁（<code>synchronized</code>关键字或者<code>ReetrantLock</code>），<code>ReetrantLock</code>比较轻量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockMapper stockMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        lock.lock();</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Stock stock = stockMapper.selectOne(<span class="keyword">new</span> QueryWrapper&lt;Stock&gt;().eq(<span class="string">"product_code"</span>, <span class="string">"1001"</span>));</span><br><span class="line">            <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                stock.setCount(stock.getCount() - <span class="number">1</span>);</span><br><span class="line">                stockMapper.updateById(stock);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//            lock.unlock();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-原理">1.2 原理</h3><p>添加<code>synchronized</code>关键字之后，StockService就具备了对象锁，由于添加了<strong>独占的排他锁</strong>，同一时刻只有一个请求能够获取到锁，并减库存。此时，所有请求只会<strong>one-by-one</strong>执行下去，也就不会发生超卖现象</p><p><img src="https://img-blog.csdnimg.cn/d3d37a61a8a0436da054b68b8c0e2ccc.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-3-失效场景">1.3 失效场景</h3><ul><li><p>当添加为多例模式<code>@Scope(value = &quot;prototype&quot;,proxyMode = ScopedProxyMode.TARGET_CLASS)</code>后，锁会失效(多例模式默认没有代理，如果需要就立刻创建；JDK代理基于接口，需要定义接口；CGLIB代理基于类，SpringBoot2.x后默认CGLIB，不需要写接口，只需要写实现类)</p></li><li><p>当用Nginx代理，开启多个JVM也会失效</p></li><li><p>当时有<code>@Transactional</code>和锁一起存在的时候，因为MySQL的默认隔离级别为RR，并发时前一个请求还未提交，后一个请求查询到未提交的数据，造成并发失效</p></li></ul><h2 id="2、MySQL锁">2、MySQL锁</h2><h3 id="2-1-简介">2.1 简介</h3><p>除了使用jvm锁之外，还可以使用数据锁：<strong>悲观锁</strong> 或者 <strong>乐观锁</strong></p><ul><li><p>sql语句：直接更新时判断，在更新中判断库存是否大于0(比JVM锁快，但是是<strong>表级锁</strong>，且无法记录前后状态，只能一条语句)；<code>update table set surplus = (surplus - buyQuantity) where id = 1 and (surplus - buyQuantity) &gt; 0 ;</code></p></li><li><p>悲观锁：在读取数据时锁住那几行，其他对这几行的更新需要等到悲观锁结束时才能继续(速度和JVM锁差不多)； <code>select ... for update</code></p></li><li><p>乐观锁：读取数据时不锁，更新时检查是否数据已经被更新过，如果是则取消当前更新进行重试；<code>version 或者 时间戳（CAS思想）</code></p></li></ul><h3 id="2-2-悲观锁-Transactional">2.2 悲观锁+ @Transactional</h3><p><strong>悲观锁使用行级锁条件</strong>：</p><ul><li><p>锁的查询或更新必须是<strong>索引字段</strong></p></li><li><p>查询或更新条件必须是具体值</p></li></ul><p><strong>在SELECT 的读取锁定主要分为两种方式：</strong></p><ul><li><p><code>SELECT ... LOCK IN SHARE MODE</code>　（共享锁）</p></li><li><p><code>SELECT ... FOR UPDATE </code>（悲观锁，推荐）</p></li></ul><p>这两种方式在事务(Transaction) 进行当中SELECT 到同一个数据表时，都必须等待其它事务数据被提交(Commit)后才会执行。而主要的不同在于<code>LOCK IN SHARE MODE</code> 在有一方事务要Update 同一个表单时很容易造成死锁。简单的说，如果SELECT 后面若要UPDATE 同一个表单，最好使用<code>SELECT ... FOR UPDATE</code></p><p><strong>注意</strong>：使用悲观锁时最好都使用<code>SELECT ... FOR UPDATE</code>，这样可以避免查询数据的不一致性，即脏数据；另外需要注意因为查询顺序不同造成的思死锁问题</p><h3 id="2-3-乐观锁">2.3 乐观锁</h3><blockquote><p>乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则重试。</p></blockquote><p><strong>使用数据版本（Version）记录机制实现，这是乐观锁最常用的实现方式</strong>。一般是通过为数据库表增加一个数字类型的 “<strong>version</strong>” 字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录 的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里不用加事务，否则会连接超时，MDL操作update会自动锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAndLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询库存是否充足</span></span><br><span class="line">    Stock stock = <span class="keyword">this</span>.stockMapper.selectById(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再减库存</span></span><br><span class="line">    <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.getCount() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 获取版本号</span></span><br><span class="line">        Long version = stock.getVersion();</span><br><span class="line"></span><br><span class="line">        stock.setCount(stock.getCount() - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 每次更新 版本号 + 1</span></span><br><span class="line">        stock.setVersion(stock.getVersion() + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 更新之前先判断是否是之前查询的那个版本，如果不是重试</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.stockMapper.update(stock, <span class="keyword">new</span> UpdateWrapper&lt;Stock&gt;().eq(<span class="string">"id"</span>, stock.getId()).eq(<span class="string">"version"</span>, version)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 可以睡眠一会</span></span><br><span class="line">            checkAndLock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是乐观锁在并发量越大的情况下，性能越低（因为需要大量的重试）；并发量越小，性能越高；同时会产生<strong>ABA问题</strong>；读写分离情况下乐观锁不可靠</p><h3 id="2-4-总结">2.4 总结</h3><p><strong>性能：sql语句 &gt; 悲观锁 &gt; jvm锁 &gt; 乐观锁</strong>。</p><p>如果追求极致性能、业务场景简单并且不需要记录数据前后变化的情况下，优先选择一个sql；如果<strong>写并发量较低（多读）</strong>，争抢不是很激烈的情况下优先选择<strong>乐观锁</strong>；如果<strong>写并发量较高</strong>，一般会经常冲突，此时选择乐观锁的话，会导致业务代码不间断的重试，优先选择<strong>mysql悲观锁</strong>；不推荐jvm本地锁。</p><h2 id="3、Redis乐观锁">3、Redis乐观锁</h2><p>利用<strong>redis监听 + 事务</strong>；如果执行过程中stock的值没有被其他连接改变，则执行成功；如果执行过程中stock的值被改变，则执行失败(性能较低，不推荐)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># watch可以监控个或者多个key的值，如果在事务(exec)执行之前，key的值发生变化则取消事务执行</span></span><br><span class="line">watch stock</span><br><span class="line"><span class="comment"># 开启事务</span></span><br><span class="line">multi</span><br><span class="line"><span class="built_in">set</span> stock 5000</span><br><span class="line"><span class="comment"># 执行事务</span></span><br><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure><p>对应spring代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.redisTemplate.execute(<span class="keyword">new</span> SessionCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">            operations.watch(<span class="string">"stock"</span>);</span><br><span class="line">            <span class="comment">// 1. 查询库存信息</span></span><br><span class="line">            Object stock = operations.opsForValue().get(<span class="string">"stock"</span>);</span><br><span class="line">            <span class="comment">// 2. 判断库存是否充足</span></span><br><span class="line">            <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; (st = Integer.parseInt(stock.toString())) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 3. 扣减库存</span></span><br><span class="line">                operations.multi();</span><br><span class="line">                operations.opsForValue().set(<span class="string">"stock"</span>, String.valueOf(--st));</span><br><span class="line">                List exec = operations.exec();</span><br><span class="line">                <span class="keyword">if</span> (exec == <span class="keyword">null</span> || exec.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    deduct();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> exec;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、基于Redis实现分布式锁</h1><h2 id="1、Redis的Lua脚本">1、Redis的Lua脚本</h2><h3 id="1-1-介绍">1.1 介绍</h3><blockquote><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。<br>可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/125726368" target="_blank" rel="noopener" title="Nginx二次开发">Nginx二次开发</a></p></blockquote><p><strong>Lua 特性</strong></p><ul><li><p><strong>轻量级</strong>：它用标准C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。</p></li><li><p><strong>可扩展</strong>：Lua提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。</p></li><li><p>其它特性：</p><ul><li><p>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</p></li><li><p>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</p></li><li><p>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</p></li><li><p>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</p></li></ul></li></ul><p>因为MULTI/ EXEC方法来使用事务功能，将一组命令打包执行，无法进行业务逻辑的操作。这期间有某一条命令执行报错（例如给字符串自增），其他的命令还是会执行，并不会回滚，因此需要Lua脚本来保证原子性</p><h3 id="1-2-Lua基本使用">1.2 Lua基本使用</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>               <span class="comment">-- 全局变量</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="number">5</span>         <span class="comment">-- 局部变量， redis只支持局部变量</span></span><br><span class="line">a, b = <span class="number">10</span>, <span class="number">2</span>*x      <span class="comment">-- 等价于       a=10; b=2*x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( 布尔表达式 <span class="number">1</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 1 为 true 时执行该语句块 --]</span></span><br><span class="line"><span class="keyword">elseif</span>( 布尔表达式 <span class="number">2</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 在布尔表达式 2 为 true 时执行该语句块 --]</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   <span class="comment">--[ 如果以上布尔表达式都不为 true 则执行该语句块 --]</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="1-3-redis执行-EVAL指令">1.3 redis执行 - EVAL指令</h3><p>在redis中需要通过eval命令执行lua脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EVAL script numkeys key [key ...] arg [arg ...]</span><br><span class="line">script：lua脚本字符串，这段Lua脚本不需要（也不应该）定义函数。</span><br><span class="line">numkeys：lua脚本中KEYS数组的大小</span><br><span class="line">key [key ...]：KEYS数组中的元素</span><br><span class="line">arg [arg ...]：ARGV数组中的元素</span><br></pre></td></tr></table></figure><p>案例举例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本案例</span></span><br><span class="line">EVAL <span class="string">"return 10"</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态传参,输出：0</span></span><br><span class="line">EVAL <span class="string">"if KEYS[1] &gt; ARGV[1] then return 1 else return 0 end"</span> 1 10 20</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis.call()中的redis是redis中提供的lua脚本类库，仅在redis环境中可以使用该类库</span></span><br><span class="line"><span class="comment"># 脚本里使用的所有键都应该由 KEYS 数组来传递,value一般用Args传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过return把call方法返回给redis客户端，打印："10"</span></span><br><span class="line"><span class="built_in">set</span> aaa 10 <span class="comment"># 设置一个aaa值为10</span></span><br><span class="line">EVAL <span class="string">"return redis.call('get', 'aaa')"</span> 0</span><br><span class="line"></span><br><span class="line">EVAL <span class="string">"return redis.call('set', KEYS[1], ARGV[1])"</span> 1 bbb 20</span><br></pre></td></tr></table></figure><h3 id="1-4-使用lua保证删除原子性">1.4 使用lua保证删除原子性</h3><p>删除的Lua脚本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">'get'</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span> <span class="keyword">return</span> redis.call(<span class="string">'del'</span>, KEYS[<span class="number">1</span>]) <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>代码实现，保证原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String uuid = UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">// 加锁setnx</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="keyword">this</span>.redisTemplate.opsForValue().setIfAbsent(<span class="string">"lock"</span>, uuid, <span class="number">3</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        <span class="comment">// 重试：循环</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// this.redisTemplate.expire("lock", 3, TimeUnit.SECONDS);</span></span><br><span class="line">        <span class="comment">// 1. 查询库存信息</span></span><br><span class="line">        String stock = redisTemplate.opsForValue().get(<span class="string">"stock"</span>).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            Integer st = Integer.valueOf(stock);</span><br><span class="line">            <span class="keyword">if</span> (st &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 3.扣减库存</span></span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">"stock"</span>, String.valueOf(--st));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 先判断是否自己的锁，再解锁</span></span><br><span class="line">        String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] "</span> +</span><br><span class="line">            <span class="string">"then "</span> +</span><br><span class="line">            <span class="string">"   return redis.call('del', KEYS[1]) "</span> +</span><br><span class="line">            <span class="string">"else "</span> +</span><br><span class="line">            <span class="string">"   return 0 "</span> +</span><br><span class="line">            <span class="string">"end"</span>;</span><br><span class="line">        this.redisTemplate.execute(new DefaultRedisScript&lt;&gt;(script, Boolean.class), Arrays.asList("lock"), uuid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Redis分布式锁基本实现">2、Redis分布式锁基本实现</h2><blockquote><p>参考：<a href="https://blog.csdn.net/lemon_TT/article/details/127091409" target="_blank" rel="noopener" title="Redis接口限流、分布式锁与幂等">Redis接口限流、分布式锁与幂等</a></p></blockquote><h3 id="2-1基本实现">2.1基本实现</h3><p>借助于redis中的命令setnx(key, value)，key不存在就新增，存在就什么都不做。同时有多个客户端发送setnx命令，只有一个客户端可以成功，返回1（true）；其他的客户端返回0（false）等待重试；获取锁成功的请求执行业务逻辑，执行完后释放锁</p><p><img src="https://img-blog.csdnimg.cn/5159f97a96d441f98c872fcc63754299.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockMapper stockMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加锁setnx</span></span><br><span class="line">        Boolean lock = <span class="keyword">this</span>.redisTemplate.opsForValue().setIfAbsent(<span class="string">"lock"</span>, <span class="string">"111"</span>);</span><br><span class="line">        <span class="comment">// 重试：递归调用</span></span><br><span class="line">        <span class="keyword">if</span> (!lock)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="keyword">this</span>.deduct();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1. 查询库存信息</span></span><br><span class="line">                String stock = redisTemplate.opsForValue().get(<span class="string">"stock"</span>).toString();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2. 判断库存是否充足</span></span><br><span class="line">                <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.length() != <span class="number">0</span>) &#123;</span><br><span class="line">                    Integer st = Integer.valueOf(stock);</span><br><span class="line">                    <span class="keyword">if</span> (st &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 3.扣减库存</span></span><br><span class="line">                        redisTemplate.opsForValue().set(<span class="string">"stock"</span>, String.valueOf(--st));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 解锁</span></span><br><span class="line">                <span class="keyword">this</span>.redisTemplate.delete(<span class="string">"lock"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中加锁也可以使用循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加锁，获取锁失败重试</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="keyword">this</span>.redisTemplate.opsForValue().setIfAbsent(<span class="string">"lock"</span>, <span class="string">"111"</span>))&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">40</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-防死锁">2.2 防死锁</h3><p><strong>产生原因</strong>：setnx刚刚获取到锁，当前服务器宕机，导致del释放锁无法执行，进而导致锁无法锁无法释放（死锁）</p><p><strong>解决</strong>：给锁设置过期时间，自动释放锁。设置过期时间两种方式：</p><ul><li><p>通过expire设置过期时间（缺乏原子性：如果在setnx和expire之间出现异常，锁也无法释放）</p></li><li><p>使用set指令设置过期时间：<code>set key value ex 3 nx</code>（既达到setnx的效果，又设置了过期时间）</p></li></ul><h3 id="2-3-防误删">2.3 防误删</h3><p><strong>产生原因</strong>：锁到期可能会释放其他服务器的锁，但其业务逻辑还未处理完成</p><p><strong>解决</strong>：上锁的时候加入UUID，删除的时候先查询，如果是自己的锁就进行删除，否则不做处理</p><h3 id="2-4-可重入锁">2.4 可重入锁</h3><h4 id="可重入锁原理">可重入锁原理</h4><p><strong>可重入锁加锁流程</strong>：<code>ReentrantLock.lock ()→Nonfairsync.lock()→AQS.acquire(1)→NonfairSync.tryAcquire(1)→Sync.nonfairTryAcquire(1)</code></p><ul><li><p>CAS获取锁，如果没有线程占用锁(state==0)，加锁成功并记录当前线程是有锁线程(两次)</p></li><li><p>如果state的值不为0，说明锁已经被占用。则判断当前线程是否是有锁线程，如果是则重入(state + 1)</p></li><li><p>否则加锁失败，入队等侍</p></li></ul><p><strong>可重入锁解锁流程</strong>：<code>ReentrantLock.unlock()→Ags.release (1)→Sync.tryRelease(1)</code></p><ul><li><p>判断当前线程是否是有锁线程，不是则抛出异常</p></li><li><p>对state的值减1之后，判断state的值是否为0，为0则解锁成功，返回true</p></li><li><p>如果减1后的值不为0，则返回false</p></li></ul><h4 id="redis模拟可重入锁">redis模拟可重入锁</h4><p><strong>加锁脚本</strong></p><p>Redis 提供了 Hash （哈希表）这种可以存储键值对数据结构。所以我们可以使用 Redis Hash 存储的锁的重入次数，然后利用 lua 脚本判断逻辑。</p><p>假设值为：<code>KEYS:[lock], ARGV[uuid, expire]</code>如果锁不存在或者这是自己的锁，就通过hincrby（不存在就新增并加1，存在就加1）获取锁或者锁次数加1。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">'exists'</span>, KEYS[<span class="number">1</span>]) == <span class="number">0</span> <span class="keyword">or</span> redis.call(<span class="string">'hexists'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]) == <span class="number">1</span>) </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">'hincrby'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">    redis.call(<span class="string">'expire'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>解锁脚本</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 判断 hash set 可重入 key 的值是否等于 0</span></span><br><span class="line"><span class="comment">-- 如果为 nil 代表 自己的锁已不存在，在尝试解其他线程的锁，解锁失败</span></span><br><span class="line"><span class="comment">-- 如果为 0 代表 可重入次数被减 1</span></span><br><span class="line"><span class="comment">-- 如果为 1 代表 该可重入 key 解锁成功</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">'hexists'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]) == <span class="number">0</span>) <span class="keyword">then</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>; </span><br><span class="line"><span class="keyword">elseif</span>(redis.call(<span class="string">'hincrby'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>], <span class="number">-1</span>) &gt; <span class="number">0</span>) <span class="keyword">then</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    redis.call(<span class="string">'del'</span>, KEYS[<span class="number">1</span>]); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong></p><p>DistributedLockClient工厂类具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLockClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedLockClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uuid = UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DistributedRedisLock <span class="title">getRedisLock</span><span class="params">(String lockName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DistributedRedisLock(redisTemplate, lockName, uuid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DistributedRedisLock实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedRedisLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lockName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expire = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedRedisLock</span><span class="params">(StringRedisTemplate redisTemplate, String lockName, String uuid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.lockName = lockName;</span><br><span class="line">        <span class="keyword">this</span>.uuid = uuid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tryLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.tryLock(-<span class="number">1L</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.expire = unit.toSeconds(time);</span><br><span class="line">        &#125;</span><br><span class="line">        String script = <span class="string">"if redis.call('exists', KEYS[1]) == 0 or redis.call('hexists', KEYS[1], ARGV[1]) == 1 "</span> +</span><br><span class="line">                <span class="string">"then "</span> +</span><br><span class="line">                <span class="string">"   redis.call('hincrby', KEYS[1], ARGV[1], 1) "</span> +</span><br><span class="line">                <span class="string">"   redis.call('expire', KEYS[1], ARGV[2]) "</span> +</span><br><span class="line">                <span class="string">"   return 1 "</span> +</span><br><span class="line">                <span class="string">"else "</span> +</span><br><span class="line">                <span class="string">"   return 0 "</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="keyword">this</span>.redisTemplate.execute(<span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Boolean<span class="class">.<span class="keyword">class</span>), <span class="title">Arrays</span>.<span class="title">asList</span>(<span class="title">lockName</span>), <span class="title">getId</span>(), <span class="title">String</span>.<span class="title">valueOf</span>(<span class="title">expire</span>)))</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String script = <span class="string">"if redis.call('hexists', KEYS[1], ARGV[1]) == 0 "</span> +</span><br><span class="line">                <span class="string">"then "</span> +</span><br><span class="line">                <span class="string">"   return nil "</span> +</span><br><span class="line">                <span class="string">"elseif redis.call('hincrby', KEYS[1], ARGV[1], -1) == 0 "</span> +</span><br><span class="line">                <span class="string">"then "</span> +</span><br><span class="line">                <span class="string">"   return redis.call('del', KEYS[1]) "</span> +</span><br><span class="line">                <span class="string">"else "</span> +</span><br><span class="line">                <span class="string">"   return 0 "</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line">        Long flag = <span class="keyword">this</span>.redisTemplate.execute(<span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Long<span class="class">.<span class="keyword">class</span>), <span class="title">Arrays</span>.<span class="title">asList</span>(<span class="title">lockName</span>), <span class="title">getId</span>())</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">"this lock doesn't belong to you!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给线程拼接唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uuid + <span class="string">":"</span> + Thread.currentThread().getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DistributedRedisLock redisLock = <span class="keyword">this</span>.distributedLockClient.getRedisLock(<span class="string">"lock"</span>);</span><br><span class="line">    redisLock.lock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 查询库存信息</span></span><br><span class="line">        String stock = redisTemplate.opsForValue().get(<span class="string">"stock"</span>).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            Integer st = Integer.valueOf(stock);</span><br><span class="line">            <span class="keyword">if</span> (st &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 3.扣减库存</span></span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">"stock"</span>, String.valueOf(--st));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        redisLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-自动续期">2.5 自动续期</h3><p>lua脚本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">'hexists'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]) == <span class="number">1</span>) <span class="keyword">then</span> </span><br><span class="line">    redis.call(<span class="string">'expire'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>]); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在RedisDistributeLock中添加renewExpire方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedRedisLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lockName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expire = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedRedisLock</span><span class="params">(StringRedisTemplate redisTemplate, String lockName, String uuid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.lockName = lockName;</span><br><span class="line">        <span class="keyword">this</span>.uuid = uuid + <span class="string">":"</span> + Thread.currentThread().getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tryLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.tryLock(-<span class="number">1L</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.expire = unit.toSeconds(time);</span><br><span class="line">        &#125;</span><br><span class="line">        String script = <span class="string">"if redis.call('exists', KEYS[1]) == 0 or redis.call('hexists', KEYS[1], ARGV[1]) == 1 "</span> +</span><br><span class="line">                <span class="string">"then "</span> +</span><br><span class="line">                <span class="string">"   redis.call('hincrby', KEYS[1], ARGV[1], 1) "</span> +</span><br><span class="line">                <span class="string">"   redis.call('expire', KEYS[1], ARGV[2]) "</span> +</span><br><span class="line">                <span class="string">"   return 1 "</span> +</span><br><span class="line">                <span class="string">"else "</span> +</span><br><span class="line">                <span class="string">"   return 0 "</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="keyword">this</span>.redisTemplate.execute(<span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Boolean<span class="class">.<span class="keyword">class</span>), <span class="title">Arrays</span>.<span class="title">asList</span>(<span class="title">lockName</span>), <span class="title">uuid</span>, <span class="title">String</span>.<span class="title">valueOf</span>(<span class="title">expire</span>)))</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 加锁成功，返回之前，开启定时器自动续期</span></span><br><span class="line">        <span class="keyword">this</span>.renewExpire();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String script = <span class="string">"if redis.call('hexists', KEYS[1], ARGV[1]) == 0 "</span> +</span><br><span class="line">                <span class="string">"then "</span> +</span><br><span class="line">                <span class="string">"   return nil "</span> +</span><br><span class="line">                <span class="string">"elseif redis.call('hincrby', KEYS[1], ARGV[1], -1) == 0 "</span> +</span><br><span class="line">                <span class="string">"then "</span> +</span><br><span class="line">                <span class="string">"   return redis.call('del', KEYS[1]) "</span> +</span><br><span class="line">                <span class="string">"else "</span> +</span><br><span class="line">                <span class="string">"   return 0 "</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line">        Long flag = <span class="keyword">this</span>.redisTemplate.execute(<span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Long<span class="class">.<span class="keyword">class</span>), <span class="title">Arrays</span>.<span class="title">asList</span>(<span class="title">lockName</span>), <span class="title">uuid</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">"this lock doesn't belong to you!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// String getId()&#123;</span></span><br><span class="line">    <span class="comment">//     return this.uuid + ":" + Thread.currentThread().getId();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renewExpire</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String script = <span class="string">"if redis.call('hexists', KEYS[1], ARGV[1]) == 1 "</span> +</span><br><span class="line">                <span class="string">"then "</span> +</span><br><span class="line">                <span class="string">"   return redis.call('expire', KEYS[1], ARGV[2]) "</span> +</span><br><span class="line">                <span class="string">"else "</span> +</span><br><span class="line">                <span class="string">"   return 0 "</span> +</span><br><span class="line">                <span class="string">"end"</span>;</span><br><span class="line">        <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (redisTemplate.execute(<span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Boolean<span class="class">.<span class="keyword">class</span>), <span class="title">Arrays</span>.<span class="title">asList</span>(<span class="title">lockName</span>), <span class="title">uuid</span>, <span class="title">String</span>.<span class="title">valueOf</span>(<span class="title">expire</span>))) </span>&#123;</span><br><span class="line">                    renewExpire();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">this</span>.expire * <span class="number">1000</span> / <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-手写分布式锁小结">2.6 手写分布式锁小结</h3><p><strong>特征</strong></p><ol><li><p>独占排他：<code>setnx</code></p></li><li><p>防死锁：</p><p>redis客户端程序获取到锁之后，立马宕机。给锁添加过期时间</p><p>不可重入：可重入</p></li><li><p>防误删：</p><p>先判断是否自己的锁才能删除</p></li><li><p>原子性：</p><p>加锁和过期时间之间：<code>set k v ex 3 nx</code></p><p>判断和释放锁之间：lua脚本</p></li><li><p>可重入性：<code>hash（key field value） + lua脚本</code></p></li><li><p>自动续期：<code>Timer定时器 + lua脚本</code></p></li><li><p>在集群情况下，导致锁机制失效：</p><ol><li><p>客户端程序10010，从主中获取锁</p></li><li><p>从还没来得及同步数据，主挂了</p></li><li><p>于是从升级为主</p></li><li><p>客户端程序10086就从新主中获取到锁，导致锁机制失效</p></li></ol></li></ol><p><strong>锁操作之加锁</strong></p><ol><li><p>setnx：独占排他 死锁、不可重入、原子性</p></li><li><p>set k v ex 30 nx：独占排他、死锁 不可重入</p></li><li><p>hash + lua脚本：可重入锁</p><ol><li><p>判断锁是否被占用（exists），如果没有被占用则直接获取锁（hset/hincrby）并设置过期时间（expire）</p></li><li><p>如果锁被占用，则判断是否当前线程占用的（hexists），如果是则重入（hincrby）并重置过期时间（expire）</p></li><li><p>否则获取锁失败，将来代码中重试</p></li></ol></li><li><p>Timer定时器 + lua脚本：实现锁的自动续期</p><p>判断锁是否自己的锁（hexists == 1），如果是自己的锁则执行expire重置过期时间</p></li></ol><p><strong>锁操作之解锁</strong></p><ol><li><p>del：导致误删</p></li><li><p>先判断再删除同时保证原子性：lua脚本</p></li><li><p>hash + lua脚本：可重入 1. 判断当前线程的锁是否存在，不存在则返回nil，将来抛出异常</p><ol><li><p>存在则直接减1（hincrby -1），判断减1后的值是否为0，为0则释放锁（del），并返回1</p></li><li><p>不为0，则返回0</p></li></ol></li></ol><p>重试：递归 循环</p><h2 id="3、红锁算法">3、红锁算法</h2><blockquote><p>redis官方网站针对redlock文档：<a href="https://redis.io/topics/distlock" target="_blank" rel="noopener" title="https://redis.io/topics/distlock">https://redis.io/topics/distlock</a></p></blockquote><p>在算法的分布式版本中，我们假设有N个Redis服务器，上述分布式锁在集群情况会失效。这些节点是完全独立的，因此我们不使用复制或任何其他隐式协调系统。**前几节已经描述了如何在单个实例中安全地获取和释放锁，在分布式锁算法中，将使用相同的方法在单个实例中获取和释放锁。**将N设置为5是一个合理的值，因此需要在不同的计算机或虚拟机上运行5个Redis主服务器，确保它们以独立的方式发生故障。为了获取锁，客户端执行以下操作：</p><ul><li><p>客户端以毫秒为单位获取当前时间的时间戳，作为<strong>起始时间</strong></p></li><li><p>客户端尝试在所有N个实例中顺序使用相同的键名、相同的随机值来获取锁定。每个实例尝试获取锁都需要时间，客户端应该设置一个远小于总锁定时间的超时时间。例如，如果自动释放时间为10秒，则<strong>尝试获取锁的超时时间</strong>可能在5到50毫秒之间。这样可以防止客户端长时间与处于故障状态的Redis节点进行通信：如果某个实例不可用，尽快尝试与下一个实例进行通信</p></li><li><p>客户端获取当前时间 减去在步骤1中获得的<strong>起始时间</strong>，来计算<strong>获取锁所花费的时间</strong>。当且仅当客户端能够在大多数实例（至少3个）中获取锁时，并且获取锁所花费的总时间小于锁有效时间，则认为已获取锁</p></li><li><p>如果获取了锁，则将锁有效时间减去 <strong>获取锁所花费的时间</strong>，如步骤3中所计算</p></li><li><p>如果客户端由于某种原因（无法锁定N / 2 + 1个实例或有效时间为负）而未能获得该锁，它将尝试解锁所有实例（即使没有锁定成功的实例）</p></li></ul><p>每台计算机都有一个本地时钟，我们通常可以依靠不同的计算机来产生很小的时钟漂移。只有在拥有锁的客户端将在锁有效时间内（如步骤3中获得的）减去一段时间（仅几毫秒）的情况下终止工作，才能保证这一点。以补偿进程之间的时钟漂移</p><p>当客户端无法获取锁时，它应该在随机延迟后重试，以避免同时获取同一资源的多个客户端之间不同步（这可能会导致脑裂的情况：没人胜）。同样，客户端在大多数Redis实例中尝试获取锁的速度越快，出现裂脑情况（以及需要重试）的窗口就越小，因此理想情况下，客户端应尝试将SET命令发送到N个实例同时使用多路复用。</p><p>值得强调的是，对于未能获得大多数锁的客户端，尽快释放（部分）获得的锁有多么重要，这样就不必等待锁定期满才能再次获得锁（但是，如果发生了网络分区，并且客户端不再能够与Redis实例进行通信，则在等待密钥到期时需要付出可用性损失）</p><h1>四、Redission分布式锁</h1><h2 id="1、redission介绍">1、redission介绍</h2><blockquote><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(BitSet, Set, Multimap, SortedSet, Map, List, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, AtomicLong, CountDownLatch, Publish / Subscribe, Bloom filter, Remote service, Spring cache, Executor service, Live Object service, Scheduler service) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p></blockquote><p>官方文档地址：<a href="https://github.com/redisson/redisson/wiki" target="_blank" rel="noopener" title="https://github.com/redisson/redisson/wiki">https://github.com/redisson/redisson/wiki</a></p><h2 id="2、Redisson原理介绍">2、Redisson原理介绍</h2><h3 id="2-1-介绍">2.1 介绍</h3><p>Redisson锁有两种模式：</p><ul><li><p>固定有效期的锁：超过有效期leaseTime后，自动释放锁</p></li><li><p>没有有效期的锁：默认30秒，然后采用Watchdog进行续期，直到业务逻辑执行完毕(一般用这个)</p></li></ul><p>基于Redis的Redisson分布式可重入锁<code>RLock</code> Java对象实现了<code>java.util.concurrent.locks.Lock</code>接口。大家都知道，如果负责储存这个分布式锁的Redisson节点宕机以后，而且这个锁正好处于锁住的状态时，这个锁会出现锁死的状态。为了避免这种情况的发生，Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。默认情况下，看门狗检查锁的超时时间是30秒钟，也可以通过修改<code>Config.lockWatchdogTimeout</code>来另行指定。</p><p><code>RLock</code>对象完全符合Java的Lock规范。也就是说只有拥有锁的进程才能解锁，其他进程解锁则会抛出<code>IllegalMonitorStateException</code>错误。另外Redisson还通过加锁的方法提供了<code>leaseTime</code>的参数来指定加锁的时间。超过这个时间后锁便自动解开了。</p><p><strong>使用redisson实现分布式锁的操作步骤，三部曲</strong></p><ul><li><p>第一步： 获取锁 RLock redissonLock = redisson.getLock(lockKey);</p></li><li><p>第二步： 加锁，实现锁续命功能 redissonLock.lock();</p></li><li><p>第三步：释放锁 redissonLock.unlock();</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RLock lock = redisson.getLock(<span class="string">"anyLock"</span>);</span><br><span class="line"><span class="comment">// 最常见的使用方法</span></span><br><span class="line">lock.lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加锁以后10秒钟自动解锁</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line"><span class="keyword">boolean</span> res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">if</span> (res) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-分布式锁原理">2.2 分布式锁原理</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/37e54d7afac99e77517be3d9f9b95f4c.jpeg" alt></p><p>Redisson分布式锁源码分析</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2dccc2f746d528480c89ff4a30489438.png" alt></p><p><strong>redisson.getLock(lockKey) 的逻辑</strong></p><ul><li><p>super(commandExecutor, name); 父类name赋值，后续通过getName()获取</p></li><li><p>commandExecutor： 执行lua脚本的executor</p></li><li><p>id 是个UUID， 后面被用来当做 和threadId组成 value值，用作判断加锁和释放锁是否是同一个线程的校验。</p></li><li><p>internalLockLeaseTime : 取自 Config#lockWatchdogTimeout，默认30秒，这个参数还有另外一个作用，锁续命的执行周期 internalLockLeaseTime/3 = 10秒</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RLock <span class="title">getLock</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RedissonLock(connectionManager.getCommandExecutor(), name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RedissonLock</span><span class="params">(CommandAsyncExecutor commandExecutor, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(commandExecutor, name);</span><br><span class="line">    <span class="keyword">this</span>.commandExecutor = commandExecutor;</span><br><span class="line">    <span class="keyword">this</span>.id = commandExecutor.getConnectionManager().getId();</span><br><span class="line">    <span class="keyword">this</span>.internalLockLeaseTime = commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redissonLock.lock()的逻辑</strong></p><p>这里讲解的是使用默认看门狗的lock方法，解锁方法类似。在调用lock方法时，会最终调用到tryAcquireAsync。调用链为：<code>lock()-&gt;tryAcquire-&gt;tryAcquireAsync</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">RFuture&lt;Long&gt; <span class="title">tryAcquireAsync</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture;</span><br><span class="line">    <span class="comment">//如果指定了加锁时间，会直接去加锁</span></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        ttlRemainingFuture = tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//没有指定加锁时间 会先进行加锁，并且默认时间就是 LockWatchdogTimeout的时间</span></span><br><span class="line">        <span class="comment">//这个是异步操作 返回RFuture 类似netty中的future</span></span><br><span class="line">        ttlRemainingFuture = tryLockInnerAsync(waitTime, internalLockLeaseTime,</span><br><span class="line">                TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里也是类似netty Future 的addListener，在future内容执行完成后执行</span></span><br><span class="line">    ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lock acquired</span></span><br><span class="line">        <span class="keyword">if</span> (ttlRemaining == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// leaseTime不为-1时，不会自动延期</span></span><br><span class="line">            <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">                internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//这里是定时执行 当前锁自动延期的动作,leaseTime为-1时，才会自动延期</span></span><br><span class="line">                scheduleExpirationRenewal(threadId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>scheduleExpirationRenewal </code>中会调用<code>renewExpiration</code>。 这里我们可以看到是,启用了一个timeout定时，去执行延期动作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renewExpiration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">    <span class="keyword">if</span> (ee == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Timeout task = commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">            <span class="keyword">if</span> (ent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Long threadId = ent.getFirstThreadId();</span><br><span class="line">            <span class="keyword">if</span> (threadId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">            future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">"Can't update lock "</span> + getRawName() + <span class="string">" expiration"</span>, e);</span><br><span class="line">                    EXPIRATION_RENEWAL_MAP.remove(getEntryName());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    <span class="comment">//如果 没有报错，就再次定时延期</span></span><br><span class="line">                    <span class="comment">// reschedule itself</span></span><br><span class="line">                    renewExpiration();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cancelExpirationRenewal(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里我们可以看到定时任务 是 lockWatchdogTimeout 的1/3时间去执行 renewExpirationAsync</span></span><br><span class="line">    &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    ee.setTimeout(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终 <code>scheduleExpirationRenewal</code>会调用到 <code>renewExpirationAsync</code>，执行下面这段 lua脚本。他主要判断就是 这个锁是否在redis中存在，如果存在就进行 pexpire 延期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">renewExpirationAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">            <span class="string">"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then "</span> +</span><br><span class="line">                    <span class="string">"redis.call('pexpire', KEYS[1], ARGV[1]); "</span> +</span><br><span class="line">                    <span class="string">"return 1; "</span> +</span><br><span class="line">                    <span class="string">"end; "</span> +</span><br><span class="line">                    <span class="string">"return 0;"</span>,</span><br><span class="line">            Collections.singletonList(getRawName()),</span><br><span class="line">            internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>watch dog 在当前节点存活时每10s给分布式锁的key续期 30s；</p></li><li><p>watch dog 机制启动，且代码中没有释放锁操作时，watch dog 会不断的给锁续期；</p></li><li><p>如果程序释放锁操作时因为异常没有被执行，那么锁无法被释放，所以释放锁操作一定要放到 finally {} 中；</p></li><li><p>要使 watchLog机制生效 ，lock时 不要设置 过期时间</p></li><li><p>watchlog的延时时间 可以由 lockWatchdogTimeout指定默认延时时间，但是不要设置太小。如100</p></li><li><p>watchdog 会每 lockWatchdogTimeout/3时间，去延时。</p></li><li><p>watchdog 通过 类似netty的 Future功能来实现异步延时</p></li><li><p>watchdog 最终还是通过 lua脚本来进行延时</p></li></ul><h2 id="3、可重入锁（Reentrant-Lock）">3、可重入锁（Reentrant Lock）</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        <span class="comment">// 可以用"rediss://"来启用SSL连接,也可以设置集群模式</span></span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setAddress(<span class="string">"redis://172.16.116.100:6379"</span>); <span class="comment">// 指定服务器地址</span></span><br><span class="line"><span class="comment">//                .setDatabase(0) // 指定数据库编号</span></span><br><span class="line"><span class="comment">//                .setUsername("").setPassword("") // 用户名密码</span></span><br><span class="line"><span class="comment">//                .setConnectionMinimumIdleSize(10) // 连接池最小空闲连接数</span></span><br><span class="line"><span class="comment">//                .setConnectionPoolSize(50) // 连接池最大连接数</span></span><br><span class="line"><span class="comment">//                .setIdleConnectionTimeout(60000) //线程超时时间</span></span><br><span class="line"><span class="comment">//                .setConnectTimeout(60000) // 客户端获取redis超时时间</span></span><br><span class="line"><span class="comment">//                .setTimeout(3000) // 相应超时时间</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAndLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加锁，获取锁失败重试</span></span><br><span class="line">    RLock lock = <span class="keyword">this</span>.redissonClient.getLock(<span class="string">"lock"</span>);</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 先查询库存是否充足</span></span><br><span class="line">        Stock stock = <span class="keyword">this</span>.stockMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        <span class="comment">// 再减库存</span></span><br><span class="line">        <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.getCount() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stock.setCount(stock.getCount() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">this</span>.stockMapper.updateById(stock);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重入锁</span></span><br><span class="line">        test();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RLock lock = <span class="keyword">this</span>.redissonClient.getLock(<span class="string">"lock"</span>);</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="comment">// 业务</span></span><br><span class="line">    lock.unlock();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、公平锁（Fair-Lock）">4、公平锁（Fair Lock）</h2><p>基于Redis的Redisson分布式可重入公平锁也是实现了<code>java.util.concurrent.locks.Lock</code>接口的一种<code>RLock</code>对象。同时还提供了<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLockAsync.html" target="_blank" rel="noopener" title="异步（Async）">异步（Async）</a>、<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLockReactive.html" target="_blank" rel="noopener" title="反射式（Reactive）">反射式（Reactive）</a>和<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLockRx.html" target="_blank" rel="noopener" title="RxJava2标准">RxJava2标准</a>的接口。它保证了当多个Redisson客户端线程同时请求加锁时，优先分配给先发出请求的线程。所有请求线程会在一个队列中排队，当某个线程出现宕机时，Redisson会等待5秒后继续下一个线程，也就是说如果前面有5个线程都处于等待状态，那么后面的线程会等待至少25秒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RLock fairLock = redisson.getFairLock(<span class="string">"anyLock"</span>);</span><br><span class="line"><span class="comment">// 最常见的使用方法</span></span><br><span class="line">fairLock.lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10秒钟以后自动解锁</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">fairLock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line"><span class="keyword">boolean</span> res = fairLock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">fairLock.unlock();</span><br></pre></td></tr></table></figure><h2 id="5、联锁（MultiLock）">5、联锁（MultiLock）</h2><p>基于Redis的Redisson分布式联锁<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/RedissonMultiLock.html" target="_blank" rel="noopener" title="RedissonMultiLock">RedissonMultiLock</a>对象可以将多个<code>RLock</code>对象关联为一个联锁，每个<code>RLock</code>对象实例可以来自于不同的Redisson实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RLock lock1 = redissonInstance1.getLock(<span class="string">"lock1"</span>);</span><br><span class="line">RLock lock2 = redissonInstance2.getLock(<span class="string">"lock2"</span>);</span><br><span class="line">RLock lock3 = redissonInstance3.getLock(<span class="string">"lock3"</span>);</span><br><span class="line"></span><br><span class="line">RedissonMultiLock lock = <span class="keyword">new</span> RedissonMultiLock(lock1, lock2, lock3);</span><br><span class="line"><span class="comment">// 同时加锁：lock1 lock2 lock3</span></span><br><span class="line"><span class="comment">// 所有的锁都上锁成功才算成功。</span></span><br><span class="line">lock.lock();</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure><h2 id="6、红锁（RedLock）">6、红锁（RedLock）</h2><p>基于Redis的Redisson红锁<code>RedissonRedLock</code>对象实现了<a href="http://redis.cn/topics/distlock.html" target="_blank" rel="noopener" title="Redlock">Redlock</a>介绍的加锁算法。该对象也可以用来将多个<code>RLock</code>对象关联为一个红锁，每个<code>RLock</code>对象实例可以来自于不同的Redisson实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RLock lock1 = redissonInstance1.getLock(<span class="string">"lock1"</span>);</span><br><span class="line">RLock lock2 = redissonInstance2.getLock(<span class="string">"lock2"</span>);</span><br><span class="line">RLock lock3 = redissonInstance3.getLock(<span class="string">"lock3"</span>);</span><br><span class="line"></span><br><span class="line">RedissonRedLock lock = <span class="keyword">new</span> RedissonRedLock(lock1, lock2, lock3);</span><br><span class="line"><span class="comment">// 同时加锁：lock1 lock2 lock3</span></span><br><span class="line"><span class="comment">// 红锁在大部分节点上加锁成功就算成功。</span></span><br><span class="line">lock.lock();</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure><h2 id="7、读写锁（ReadWriteLock）">7、读写锁（ReadWriteLock）</h2><p>基于Redis的Redisson分布式可重入读写锁<a href="http://static.javadoc.io/org.redisson/redisson/3.4.3/org/redisson/api/RReadWriteLock.html" target="_blank" rel="noopener" title="RReadWriteLock">RReadWriteLock</a> Java对象实现了<code>java.util.concurrent.locks.ReadWriteLock</code>接口。其中读锁和写锁都继承了<a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#81-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81reentrant-lock" target="_blank" rel="noopener" title="RLock">RLock</a>接口。分布式可重入读写锁允许同时有多个读锁和一个写锁处于加锁状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RReadWriteLock rwlock = redisson.getReadWriteLock(<span class="string">"anyRWLock"</span>);</span><br><span class="line"><span class="comment">// 最常见的使用方法</span></span><br><span class="line">rwlock.readLock().lock();</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">rwlock.writeLock().lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10秒钟以后自动解锁</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">rwlock.readLock().lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">rwlock.writeLock().lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line"><span class="keyword">boolean</span> res = rwlock.readLock().tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">boolean</span> res = rwlock.writeLock().tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure><h2 id="8、信号量（Semaphore）">8、信号量（Semaphore）</h2><p>基于Redis的Redisson的分布式信号量（<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RSemaphore.html" target="_blank" rel="noopener" title="Semaphore">Semaphore</a>）Java对象<code>RSemaphore</code>采用了与<code>java.util.concurrent.Semaphore</code>相似的接口和用法。同时还提供了<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RSemaphoreAsync.html" target="_blank" rel="noopener" title="异步（Async）">异步（Async）</a>、<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RSemaphoreReactive.html" target="_blank" rel="noopener" title="反射式（Reactive）">反射式（Reactive）</a>和<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RSemaphoreRx.html" target="_blank" rel="noopener" title="RxJava2标准">RxJava2标准</a>的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSemaphore semaphore = redisson.getSemaphore(<span class="string">"semaphore"</span>);</span><br><span class="line">semaphore.trySetPermits(<span class="number">3</span>);</span><br><span class="line">semaphore.acquire();</span><br><span class="line">semaphore.release();</span><br></pre></td></tr></table></figure><h2 id="9、闭锁（CountDownLatch）">9、闭锁（CountDownLatch）</h2><p>基于Redisson的Redisson分布式闭锁（<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RCountDownLatch.html" target="_blank" rel="noopener" title="CountDownLatch">CountDownLatch</a>）Java对象<code>RCountDownLatch</code>采用了与<code>java.util.concurrent.CountDownLatch</code>相似的接口和用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RCountDownLatch latch = redisson.getCountDownLatch(<span class="string">"anyCountDownLatch"</span>);</span><br><span class="line">latch.trySetCount(<span class="number">1</span>);</span><br><span class="line">latch.await();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他线程或其他JVM里</span></span><br><span class="line">RCountDownLatch latch = redisson.getCountDownLatch(<span class="string">"anyCountDownLatch"</span>);</span><br><span class="line">latch.countDown();</span><br></pre></td></tr></table></figure><h1>五、基于zookeeper实现分布式锁</h1><h2 id="1、zk介绍">1、zk介绍</h2><h3 id="1-1-安装启动">1.1 安装启动</h3><blockquote><p><a href="https://blog.csdn.net/lemon_TT/article/details/113263705" target="_blank" rel="noopener" title="Centos7安装zookeeper和Web UI">Centos7安装zookeeper和Web UI</a></p></blockquote><p>安装：把zk安装包上传到/opt目录下，并切换到/opt目录下，执行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf zookeeper-3.7.0-bin.tar.gz</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv apache-zookeeper-3.7.0-bin/ zookeeper</span><br><span class="line"><span class="comment"># 打开zookeeper根目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/zookeeper</span><br><span class="line"><span class="comment"># 创建一个数据目录，备用</span></span><br><span class="line">mkdir data</span><br><span class="line"><span class="comment"># 打开zk的配置目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/zookeeper/conf</span><br><span class="line"><span class="comment"># copy配置文件，zk启动时会加载zoo.cfg文件</span></span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">vim zoo.cfg</span><br><span class="line"><span class="comment"># 修改dataDir参数为之前创建的数据目录：/opt/zookeeper/data</span></span><br><span class="line"><span class="comment"># 切换到bin目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/zookeeper/bin</span><br><span class="line"><span class="comment"># 启动 </span></span><br><span class="line">./zkServer.sh start</span><br><span class="line">./zkServer.sh status <span class="comment"># 查看启动状态</span></span><br><span class="line">./zkServer.sh stop <span class="comment"># 停止</span></span><br><span class="line">./zkServer.sh restart <span class="comment"># 重启</span></span><br><span class="line">./zkCli.sh <span class="comment"># 查看zk客户端</span></span><br></pre></td></tr></table></figure><h3 id="1-2-相关概念">1.2 相关概念</h3><p>Zookeeper提供一个多层级的节点命名空间（节点称为znode），每个节点都用一个以斜杠（/）分隔的路径表示，而且每个节点都有父节点（根节点除外），非常类似于文件系统。并且每个节点都是唯一的。znode节点有四种类型：</p><ul><li><p><strong>PERSISTENT</strong>：永久节点。客户端与zookeeper断开连接后，该节点依旧存在</p></li><li><p><strong>EPHEMERAL</strong>：临时节点。客户端与zookeeper断开连接后，该节点被删除</p></li><li><p><strong>PERSISTENT_SEQUENTIAL</strong>：永久节点、序列化。客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号</p></li><li><p><strong>EPHEMERAL_SEQUENTIAL</strong>：临时节点、序列化。客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] create /aa <span class="built_in">test</span>  <span class="comment"># 创建持久化节点</span></span><br><span class="line">Created /aa</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] create -s /bb <span class="built_in">test</span>  <span class="comment"># 创建持久序列化节点</span></span><br><span class="line">Created /bb0000000001</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create -e /cc <span class="built_in">test</span>  <span class="comment"># 创建临时节点</span></span><br><span class="line">Created /cc</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] create -e -s /dd <span class="built_in">test</span>  <span class="comment"># 创建临时序列化节点</span></span><br><span class="line">Created /dd0000000003</span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] ls /   <span class="comment"># 查看某个节点下的子节点</span></span><br><span class="line">[aa, bb0000000001, cc, dd0000000003, zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] <span class="built_in">stat</span> /  <span class="comment"># 查看某个节点的状态</span></span><br><span class="line">cZxid = 0x0</span><br><span class="line">ctime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">mZxid = 0x0</span><br><span class="line">mtime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">pZxid = 0x5</span><br><span class="line">cversion = 3</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 5</span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] get /aa  <span class="comment"># 查看某个节点的内容</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] delete /aa  <span class="comment"># 删除某个节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 7] ls /  <span class="comment"># 再次查看</span></span><br><span class="line">[bb0000000001, cc, dd0000000003, zookeeper]</span><br></pre></td></tr></table></figure><p>事件监听：在读取数据时，我们可以同时对节点设置事件监听，当节点数据或结构变化时，zookeeper会通知客户端（一次性）。当前zookeeper针对节点的监听有如下四种事件：</p><ul><li><p>节点创建：stat -w /xx</p><p>当/xx节点创建时：NodeCreated</p></li><li><p>节点删除：stat -w /xx</p><p>当/xx节点删除时：NodeDeleted</p></li><li><p>节点数据修改：get -w /xx</p><p>当/xx节点数据发生变化时：NodeDataChanged</p></li><li><p>子节点变更：ls -w /xx</p><p>当/xx节点的子节点创建或者删除时：NodeChildChanged</p></li></ul><h3 id="1-3-Java客户端">1.3 Java客户端</h3><p>ZooKeeper的java客户端有：原生客户端、ZkClient、Curator框架（类似于redisson，有很多功能性封装），这里先用原生客户端</p><p>首先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用api及其方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取zookeeper链接</span></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        ZooKeeper zooKeeper = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"172.16.116.100:2181"</span>, <span class="number">30000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (Event.KeeperState.SyncConnected.equals(event.getState()) </span><br><span class="line">                            &amp;&amp; Event.EventType.None.equals(event.getType())) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"获取链接成功。。。。。。"</span> + event);</span><br><span class="line">                        countDownLatch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个节点，1-节点路径 2-节点内容 3-节点的访问权限 4-节点类型</span></span><br><span class="line">        <span class="comment">// OPEN_ACL_UNSAFE：任何人可以操作该节点</span></span><br><span class="line">        <span class="comment">// CREATOR_ALL_ACL：创建者拥有所有访问权限</span></span><br><span class="line">        <span class="comment">// READ_ACL_UNSAFE: 任何人都可以读取该节点</span></span><br><span class="line">        <span class="comment">// zooKeeper.create("/atguigu/aa", "haha~~".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span></span><br><span class="line">        zooKeeper.create(<span class="string">"/test"</span>, <span class="string">"haha~~"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">        <span class="comment">// zooKeeper.create("/atguigu/cc", "haha~~".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);</span></span><br><span class="line">        <span class="comment">// zooKeeper.create("/atguigu/dd", "haha~~".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span></span><br><span class="line">        <span class="comment">// zooKeeper.create("/atguigu/dd", "haha~~".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span></span><br><span class="line">        <span class="comment">// zooKeeper.create("/atguigu/dd", "haha~~".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断节点是否存在</span></span><br><span class="line">        Stat stat = zooKeeper.exists(<span class="string">"/test"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"当前节点存在！"</span> + stat.getVersion());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"当前节点不存在！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断节点是否存在，同时添加监听</span></span><br><span class="line">        zooKeeper.exists(<span class="string">"/test"</span>, event -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取一个节点的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = zooKeeper.getData(<span class="string">"/atguigu/ss0000000001"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询一个节点的所有子节点</span></span><br><span class="line">        List&lt;String&gt; children = zooKeeper.getChildren(<span class="string">"/test"</span>, <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(children);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新</span></span><br><span class="line">        zooKeeper.setData(<span class="string">"/test"</span>, <span class="string">"wawa..."</span>.getBytes(), stat.getVersion());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除一个节点</span></span><br><span class="line">        <span class="comment">//zooKeeper.delete("/test", -1);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (zooKeeper != <span class="keyword">null</span>)&#123;</span><br><span class="line">            zooKeeper.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、ZK分布式锁基本实现">2、ZK分布式锁基本实现</h2><h3 id="2-1-思路分析">2.1 思路分析</h3><p>分布式锁的步骤：</p><ol><li><p>获取锁：create一个节点</p></li><li><p>删除锁：delete一个节点</p></li><li><p>重试：没有获取到锁的请求重试</p></li></ol><p>参照redis分布式锁的特点：</p><ol><li><p>互斥 排他</p></li><li><p>防死锁：</p><ul><li><p>可自动释放锁（临时节点） ：获得锁之后客户端所在机器宕机了，客户端没有主动删除子节点；如果创建的是永久的节点，那么这个锁永远不会释放，导致死锁；由于创建的是临时节点，客户端宕机后，过了一定时间zookeeper没有收到客户端的心跳包判断会话失效，将临时节点删除从而释放锁。</p></li><li><p>可重入锁：借助于ThreadLocal</p></li></ul></li><li><p>防误删：宕机自动释放临时节点，不需要设置过期时间，也就不存在误删问题。</p></li><li><p>加锁/解锁要具备原子性</p></li><li><p>单点问题：使用Zookeeper可以有效的解决单点问题，ZK一般是集群部署的。</p></li><li><p>集群问题：zookeeper集群是强一致性的，只要集群中有半数以上的机器存活，就可以对外提供服务。</p></li></ol><h3 id="2-2-基本实现">2.2 基本实现</h3><p>实现思路：</p><ul><li><p>多个请求同时添加一个相同的临时节点，只有一个可以添加成功。添加成功的获取到锁</p></li><li><p>执行业务逻辑</p></li><li><p>完成业务流程后，删除节点释放锁。</p></li></ul><p>由于zookeeper获取链接是一个耗时过程，这里可以在项目启动时，初始化链接，并且只初始化一次。借助于spring特性，代码实现如下（下面只完成了lock()，trylock()方法可以按照redis仿写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String connectString = <span class="string">"172.16.116.100:2181"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROOT_PATH = <span class="string">"/distributed"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 连接zookeeper服务器</span></span><br><span class="line">            <span class="keyword">this</span>.zooKeeper = <span class="keyword">new</span> ZooKeeper(connectString, <span class="number">30000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"获取链接成功！！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建分布式锁根节点</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.zooKeeper.exists(ROOT_PATH, <span class="keyword">false</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.zooKeeper.create(ROOT_PATH, <span class="keyword">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"获取链接失败！"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zooKeeper != <span class="keyword">null</span>)&#123;</span><br><span class="line">                zooKeeper.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化zk分布式锁对象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZkDistributedLock <span class="title">getZkDistributedLock</span><span class="params">(String lockName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZkDistributedLock(zooKeeper, lockName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>zk分布式锁具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkDistributedLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROOT_PATH = <span class="string">"/distributed"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZkDistributedLock</span><span class="params">(ZooKeeper zooKeeper, String lockName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zooKeeper = zooKeeper;</span><br><span class="line">        <span class="keyword">this</span>.path = ROOT_PATH + <span class="string">"/"</span> + lockName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zooKeeper.create(path, <span class="keyword">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 重试</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                lock();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.zooKeeper.delete(path, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造StockService的checkAndLock方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ZkClient client;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAndLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加锁，获取锁失败重试</span></span><br><span class="line">    ZkDistributedLock lock = <span class="keyword">this</span>.client.getZkDistributedLock(<span class="string">"lock"</span>);</span><br><span class="line">    lock.lock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询库存是否充足</span></span><br><span class="line">    Stock stock = <span class="keyword">this</span>.stockMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">// 再减库存</span></span><br><span class="line">    <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.getCount() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        stock.setCount(stock.getCount() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.stockMapper.updateById(stock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本实现存在的问题，由于无限自旋影响性能</p><ul><li><p>性能一般（比mysql分布式锁略好）</p></li><li><p>不可重入</p></li></ul><h3 id="2-3-性能优化-阻塞非自旋">2.3 性能优化(阻塞非自旋)</h3><p>由于无限自旋影响性能，当每个请求要想正常的执行完成，最终都是要创建节点，如果能够避免争抢必然可以提高性能。这里借助于zk的临时序列化节点，实现分布式锁</p><p>对于这个算法有个极大的优化点：假如当前有1000个节点在等待锁，如果获得锁的客户端释放锁时，这1000个客户端都会被唤醒，这种情况称为“羊群效应”；在这种羊群效应中，zookeeper需要通知1000个客户端，这会阻塞其他的操作，最好的情况应该只唤醒新的最小节点对应的客户端。应该怎么做呢？在设置事件监听时，每个客户端应该对刚好在它之前的子节点设置事件监听，例如子节点列表为/locks/lock-0000000000、/locks/lock-0000000001、/locks/lock-0000000002，序号为1的客户端监听序号为0的子节点删除消息，序号为2的监听序号为1的子节点删除消息。</p><p>所以调整后的分布式锁算法流程如下：</p><ul><li><p>客户端连接zookeeper，并在/lock下创建临时的且有序的子节点，第一个客户端对应的子节点为/locks/lock-0000000000，第二个为/locks/lock-0000000001，以此类推；</p></li><li><p>客户端获取/lock下的子节点列表，判断自己创建的子节点是否为当前子节点列表中序号最小的子节点，如果是则认为获得锁，<strong>否则监听刚好在自己之前一位的子节点删除消息</strong>，获得子节点变更通知后重复此步骤直至获得锁；</p></li><li><p>执行业务代码；</p></li><li><p>完成业务流程后，删除对应的子节点释放锁</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkDistributedLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROOT_PATH = <span class="string">"/distributed"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZkDistributedLock</span><span class="params">(ZooKeeper zooKeeper, String lockName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.zooKeeper = zooKeeper;</span><br><span class="line">            <span class="comment">// 这里只是测试，正式的时候要放在lock方法里</span></span><br><span class="line">            <span class="keyword">this</span>.path = zooKeeper.create(ROOT_PATH + <span class="string">"/"</span> + lockName + <span class="string">"-"</span>, <span class="keyword">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 这样性能接近于redis的分布式锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String preNode = getPreNode(path);</span><br><span class="line">            <span class="comment">// 如果该节点没有前一个节点，说明该节点时最小节点，放行执行业务逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(preNode))&#123;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.zooKeeper.exists(ROOT_PATH + <span class="string">"/"</span> + preNode, <span class="keyword">new</span> Watcher()&#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                        countDownLatch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 阻塞。。。。</span></span><br><span class="line">                countDownLatch.await();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 重新检查。是否获取到锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            lock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.zooKeeper.delete(path, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定节点的前节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPreNode</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取当前节点的序列化号</span></span><br><span class="line">            Long curSerial = Long.valueOf(StringUtils.substringAfterLast(path, <span class="string">"-"</span>));</span><br><span class="line">            <span class="comment">// 获取根路径下的所有序列化子节点</span></span><br><span class="line">            List&lt;String&gt; nodes = <span class="keyword">this</span>.zooKeeper.getChildren(ROOT_PATH, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判空</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(nodes))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取前一个节点</span></span><br><span class="line">            Long flag = <span class="number">0L</span>;</span><br><span class="line">            String preNode = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (String node : nodes) &#123;</span><br><span class="line">                <span class="comment">// 获取每个节点的序列化号</span></span><br><span class="line">                Long serial = Long.valueOf(StringUtils.substringAfterLast(node, <span class="string">"-"</span>));</span><br><span class="line">                <span class="keyword">if</span> (serial &lt; curSerial &amp;&amp; serial &gt; flag)&#123;</span><br><span class="line">                    flag = serial;</span><br><span class="line">                    preNode = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> preNode;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-优化：可重入锁">2.4 优化：可重入锁</h3><p>引入ThreadLocal线程局部变量保证zk分布式锁的可重入性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkDistributedLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROOT_PATH = <span class="string">"/distributed"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; THREAD_LOCAL = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZkDistributedLock</span><span class="params">(ZooKeeper zooKeeper, String lockName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.zooKeeper = zooKeeper;</span><br><span class="line">            <span class="keyword">if</span> (THREAD_LOCAL.get() == <span class="keyword">null</span> || THREAD_LOCAL.get() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// 这里只是测试，正式的时候要放在lock方法里</span></span><br><span class="line">                <span class="keyword">this</span>.path = zooKeeper.create(ROOT_PATH + <span class="string">"/"</span> + lockName + <span class="string">"-"</span>, <span class="keyword">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Integer flag = THREAD_LOCAL.get();</span><br><span class="line">        <span class="keyword">if</span> (flag != <span class="keyword">null</span> &amp;&amp; flag &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            THREAD_LOCAL.set(flag + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String preNode = getPreNode(path);</span><br><span class="line">            <span class="comment">// 如果该节点没有前一个节点，说明该节点时最小节点，放行执行业务逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(preNode))&#123;</span><br><span class="line">                THREAD_LOCAL.set(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.zooKeeper.exists(ROOT_PATH + <span class="string">"/"</span> + preNode, <span class="keyword">new</span> Watcher()&#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                        countDownLatch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    THREAD_LOCAL.set(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 阻塞。。。。</span></span><br><span class="line">                countDownLatch.await();</span><br><span class="line">                THREAD_LOCAL.set(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 重新检查。是否获取到锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            lock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            THREAD_LOCAL.set(THREAD_LOCAL.get() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (THREAD_LOCAL.get() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.zooKeeper.delete(path, <span class="number">0</span>);</span><br><span class="line">                THREAD_LOCAL.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定节点的前节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPreNode</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取当前节点的序列化号</span></span><br><span class="line">            Long curSerial = Long.valueOf(StringUtils.substringAfterLast(path, <span class="string">"-"</span>));</span><br><span class="line">            <span class="comment">// 获取根路径下的所有序列化子节点</span></span><br><span class="line">            List&lt;String&gt; nodes = <span class="keyword">this</span>.zooKeeper.getChildren(ROOT_PATH, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判空</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(nodes))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取前一个节点</span></span><br><span class="line">            Long flag = <span class="number">0L</span>;</span><br><span class="line">            String preNode = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (String node : nodes) &#123;</span><br><span class="line">                <span class="comment">// 获取每个节点的序列化号</span></span><br><span class="line">                Long serial = Long.valueOf(StringUtils.substringAfterLast(node, <span class="string">"-"</span>));</span><br><span class="line">                <span class="keyword">if</span> (serial &lt; curSerial &amp;&amp; serial &gt; flag)&#123;</span><br><span class="line">                    flag = serial;</span><br><span class="line">                    preNode = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> preNode;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-小结">2.5 小结</h3><p>参照redis分布式锁的特点：</p><ol><li><p>互斥 排他：zk节点的不可重复性，以及序列化节点的有序性</p></li><li><p>防死锁：</p><ul><li><p>可自动释放锁：临时节点</p></li><li><p>可重入锁：借助于ThreadLocal</p></li></ul></li><li><p>防误删：临时节点</p></li><li><p>加锁/解锁要具备原子性</p></li><li><p>单点问题：使用Zookeeper可以有效的解决单点问题，ZK一般是集群部署的。</p></li><li><p>集群问题：zookeeper集群是强一致性的，只要集群中有半数以上的机器存活，就可以对外提供服务。</p></li><li><p>公平锁：有序性节点</p></li></ol><h2 id="3、Curator中的分布式锁">3、Curator中的分布式锁</h2><h3 id="3-1-简介">3.1 简介</h3><blockquote><p>Curator是netflix公司开源的一套zookeeper客户端，目前是Apache的顶级项目。与Zookeeper提供的原生客户端相比，Curator的抽象层次更高，简化了Zookeeper客户端的开发量。Curator解决了很多zookeeper客户端非常底层的细节开发工作，包括连接重连、反复注册wathcer和NodeExistsException 异常等。</p></blockquote><p>通过查看官方文档，可以发现Curator主要解决了三类问题：</p><ul><li><p>封装ZooKeeper client与ZooKeeper server之间的连接处理</p></li><li><p>提供了一套Fluent风格的操作API</p></li><li><p>提供ZooKeeper各种应用场景(recipe， 比如：分布式锁服务、集群领导选举、共享计数器、缓存机制、分布式队列等)的抽象封装，这些实现都遵循了zk的最佳实践，并考虑了各种极端情况</p></li></ul><p>Curator由一系列的模块构成，对于一般开发者而言，常用的是<strong>curator-framework和curator-recipes</strong>：</p><ul><li><p>curator-framework：提供了常见的zk相关的底层操作</p></li><li><p>curator-recipes：提供了一些zk的典型使用场景的参考。本节重点关注的分布式锁就是该包提供的</p></li></ul><h3 id="3-2-依赖引入与配置">3.2 依赖引入与配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加curator客户端配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CuratorFramework <span class="title">curatorFramework</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 重试策略，这里使用的是指数补偿重试策略，重试3次，初始重试间隔1000ms，每次重试之后重试间隔递增。</span></span><br><span class="line">        RetryPolicy retry = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 初始化Curator客户端：指定链接信息 及 重试策略</span></span><br><span class="line">        CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="string">"172.16.116.100:2181"</span>, retry);</span><br><span class="line">        client.start(); <span class="comment">// 开始链接，如果不调用该方法，很多方法无法工作</span></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-可重入锁InterProcessMutex">3.3 可重入锁InterProcessMutex</h3><p>Reentrant和JDK的ReentrantLock类似， 意味着同一个客户端在拥有锁的同时，可以多次获取，不会被阻塞。它是由类<strong>InterProcessMutex</strong>来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessMutex</span><span class="params">(CuratorFramework client, String path)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取锁</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 带超时时间的可重入锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acquire</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span></span>;</span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>改造，<strong>如想重入，则需要使用同一个InterProcessMutex对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CuratorFramework curatorFramework;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAndLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     InterProcessMutex mutex = <span class="keyword">new</span> InterProcessMutex(curatorFramework, <span class="string">"/curator/lock"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        mutex.acquire();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先查询库存是否充足</span></span><br><span class="line">        Stock stock = <span class="keyword">this</span>.stockMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        <span class="comment">// 再减库存</span></span><br><span class="line">        <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.getCount() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stock.setCount(stock.getCount() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">this</span>.stockMapper.updateById(stock);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// this.testSub(mutex);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        mutex.release();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">(InterProcessMutex mutex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mutex.acquire();</span><br><span class="line">      System.out.println(<span class="string">"测试可重入锁。。。。"</span>);</span><br><span class="line">        mutex.release();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加锁解锁原理可以参考：<a href="https://juejin.cn/post/6844904167044022279#heading-1" target="_blank" rel="noopener" title="Curator - 分布式锁的实现原理 &amp; 如何使用">Curator - 分布式锁的实现原理 &amp; 如何使用</a><br><a href="https://blog.csdn.net/sdksdk0/article/details/95942847" target="_blank" rel="noopener" title="Curator实现分布式锁的基本原理">Curator实现分布式锁的基本原理</a></p></blockquote><h3 id="3-4-不可重入锁InterProcessSemaphoreMutex">3.4 不可重入锁InterProcessSemaphoreMutex</h3><p>具体实现：<code>InterProcessSemaphoreMutex</code>。与InterProcessMutex调用方法类似，区别在于该锁是不可重入的，在同一个线程中不可重入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessSemaphoreMutex</span><span class="params">(CuratorFramework client, String path)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acquire</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>代码举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CuratorFramework curatorFramework;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    InterProcessSemaphoreMutex mutex = <span class="keyword">new</span> InterProcessSemaphoreMutex(curatorFramework, <span class="string">"/curator/lock"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mutex.acquire();</span><br><span class="line">        <span class="comment">// 1. 查询库存信息</span></span><br><span class="line">        String stock = redisTemplate.opsForValue().get(<span class="string">"stock"</span>).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            Integer st = Integer.valueOf(stock);</span><br><span class="line">            <span class="keyword">if</span> (st &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 3.扣减库存</span></span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">"stock"</span>, String.valueOf(--st));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mutex.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-可重入读写锁InterProcessReadWriteLock">3.5 可重入读写锁InterProcessReadWriteLock</h3><p>类似JDK的<code>ReentrantReadWriteLock</code>。一个拥有写锁的线程可重入读锁，但是读锁却不能进入写锁。这也意味着写锁可以降级成读锁。从读锁升级成写锁是不成的。主要实现类<code>InterProcessReadWriteLock</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessReadWriteLock</span><span class="params">(CuratorFramework client, String basePath)</span></span>;</span><br><span class="line"><span class="comment">// 获取读锁对象</span></span><br><span class="line"><span class="function">InterProcessMutex <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 获取写锁对象</span></span><br><span class="line"><span class="function">InterProcessMutex <span class="title">writeLock</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>注意：<strong>写锁在释放之前会一直阻塞请求线程，而读锁不会</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZkReadLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InterProcessReadWriteLock rwlock = <span class="keyword">new</span> InterProcessReadWriteLock(curatorFramework, <span class="string">"/curator/rwlock"</span>);</span><br><span class="line">        rwlock.readLock().acquire(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// TODO：一顿读的操作。。。。</span></span><br><span class="line">        <span class="comment">//rwlock.readLock().unlock();</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZkWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InterProcessReadWriteLock rwlock = <span class="keyword">new</span> InterProcessReadWriteLock(curatorFramework, <span class="string">"/curator/rwlock"</span>);</span><br><span class="line">        rwlock.writeLock().acquire(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// TODO：一顿写的操作。。。。</span></span><br><span class="line">        <span class="comment">//rwlock.writeLock().unlock();</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-联锁InterProcessMultiLock">3.6 联锁InterProcessMultiLock</h3><p>Multi Shared Lock是一个锁的容器。当调用acquire， 所有的锁都会被acquire，如果请求失败，所有的锁都会被release。同样调用release时所有的锁都被release(失败被忽略)。基本上，它就是组锁的代表，在它上面的请求释放操作都会传递给它包含的所有的锁。实现类InterProcessMultiLock(不常用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数需要包含的锁的集合，或者一组ZooKeeper的path</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessMultiLock</span><span class="params">(List&lt;InterProcessLock&gt; locks)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessMultiLock</span><span class="params">(CuratorFramework client, List&lt;String&gt; paths)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acquire</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="3-7-信号量InterProcessSemaphoreV2">3.7 信号量InterProcessSemaphoreV2</h3><p>一个计数的信号量类似JDK的<code>Semaphore</code>。JDK中Semaphore维护的一组许可(permits)，而Cubator中称之为租约(Lease)。注意，所有的实例必须使用相同的numberOfLeases值。调用acquire会返回一个租约对象。客户端必须在finally中close这些租约对象，否则这些租约会丢失掉。但是，如果客户端session由于某种原因比如crash丢掉， 那么这些客户端持有的租约会自动close， 这样其它客户端可以继续使用这些租约。主要实现类InterProcessSemaphoreV2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterProcessSemaphoreV2</span><span class="params">(CuratorFramework client, String path, <span class="keyword">int</span> maxLeases)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意一次你可以请求多个租约，如果Semaphore当前的租约不够，则请求线程会被阻塞。</span></span><br><span class="line"><span class="comment">// 同时还提供了超时的重载方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Lease <span class="title">acquire</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;Lease&gt; <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> qty)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Lease <span class="title">acquire</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;Lease&gt; <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> qty, <span class="keyword">long</span> time, TimeUnit unit)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 租约还可以通过下面的方式返还</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnAll</span><span class="params">(Collection&lt;Lease&gt; leases)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnLease</span><span class="params">(Lease lease)</span></span>;</span><br></pre></td></tr></table></figure><p>代码举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSemaphore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置资源量 限流的线程数</span></span><br><span class="line">    InterProcessSemaphoreV2 semaphoreV2 = <span class="keyword">new</span> InterProcessSemaphoreV2(curatorFramework, <span class="string">"/locks/semaphore"</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Lease acquire = semaphoreV2.acquire();<span class="comment">// 获取资源，获取资源成功的线程可以继续处理业务操作。否则会被阻塞住</span></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForList().rightPush(<span class="string">"log"</span>, <span class="string">"10010获取了资源，开始处理业务逻辑。"</span> + Thread.currentThread().getName());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForList().rightPush(<span class="string">"log"</span>, <span class="string">"10010处理完业务逻辑，释放资源====================="</span> + Thread.currentThread().getName());</span><br><span class="line">        semaphoreV2.returnLease(acquire); <span class="comment">// 手动释放资源，后续请求线程就可以获取该资源</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-栅栏barrier">3.8 栅栏barrier</h3><p><strong>DistributedBarrier</strong>构造函数中barrierPath参数用来确定一个栅栏，只要barrierPath参数相同(路径相同)就是同一个栅栏。通常情况下栅栏的使用如下：</p><ul><li><p>主client设置一个栅栏</p></li><li><p>其他客户端就会调用waitOnBarrier()等待栅栏移除，程序处理线程阻塞</p></li><li><p>主client移除栅栏，其他客户端的处理程序就会同时继续运行</p></li></ul><p>DistributedBarrier类的主要方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setBarrier() - 设置栅栏</span><br><span class="line">waitOnBarrier() - 等待栅栏移除</span><br><span class="line">removeBarrier() - 移除栅栏</span><br></pre></td></tr></table></figure><p><strong>DistributedDoubleBarrier</strong>双栅栏，允许客户端在计算的开始和结束时同步。当足够的进程加入到双栅栏时，进程开始计算，当计算完成时，离开栅栏。<strong>DistributedDoubleBarrier</strong>实现了双栅栏的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client - the client</span></span><br><span class="line"><span class="comment">// barrierPath - path to use</span></span><br><span class="line"><span class="comment">// memberQty - the number of members in the barrier</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DistributedDoubleBarrier</span><span class="params">(CuratorFramework client, String barrierPath, <span class="keyword">int</span> memberQty)</span></span>;</span><br><span class="line"></span><br><span class="line">enter()、enter(<span class="keyword">long</span> maxWait, TimeUnit unit) - 等待同时进入栅栏</span><br><span class="line">leave()、leave(<span class="keyword">long</span> maxWait, TimeUnit unit) - 等待同时离开栅栏</span><br></pre></td></tr></table></figure><p>memberQty是成员数量，当enter方法被调用时，成员被阻塞，直到所有的成员都调用了enter。当leave方法被调用时，它也阻塞调用线程，直到所有的成员都调用了leave。注意：参数memberQty的值只是一个阈值，而不是一个限制值。当等待栅栏的数量大于或等于这个值栅栏就会打开！与栅栏(DistributedBarrier)一样,双栅栏的barrierPath参数也是用来确定是否是同一个栅栏的，双栅栏的使用情况如下：</p><ol><li><p>从多个客户端在同一个路径上创建双栅栏(DistributedDoubleBarrier),然后调用enter()方法，等待栅栏数量达到memberQty时就可以进入栅栏。</p></li><li><p>栅栏数量达到memberQty，多个客户端同时停止阻塞继续运行，直到执行leave()方法，等待memberQty个数量的栅栏同时阻塞到leave()方法中。</p></li><li><p>memberQty个数量的栅栏同时阻塞到leave()方法中，多个客户端的leave()方法停止阻塞，继续运行。</p></li></ol><h3 id="3-9-共享计数器">3.9 共享计数器</h3><p>利用ZooKeeper可以实现一个集群共享的计数器。只要使用相同的path就可以得到最新的计数器值， 这是由ZooKeeper的一致性保证的。Curator有两个计数器， 一个是用int来计数，一个用long来计数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SharedCount</span><span class="params">(CuratorFramework client, String path, <span class="keyword">int</span> seedValue)</span></span>;</span><br><span class="line"><span class="comment">// 获取共享计数的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 设置共享计数的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> newCount)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">// 当版本号没有变化时，才会更新共享变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span>  <span class="title">trySetCount</span><span class="params">(VersionedValue&lt;Integer&gt; previous, <span class="keyword">int</span> newCount)</span></span>;</span><br><span class="line"><span class="comment">// 通过监听器监听共享计数的变化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(SharedCountListener listener)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(<span class="keyword">final</span> SharedCountListener listener, Executor executor)</span></span>;</span><br><span class="line"><span class="comment">// 共享计数在使用之前必须开启</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">// 关闭共享计数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><p>使用案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZkShareCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 第三个参数是共享计数的初始值</span></span><br><span class="line">        SharedCount sharedCount = <span class="keyword">new</span> SharedCount(curatorFramework, <span class="string">"/curator/count"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 启动共享计数器</span></span><br><span class="line">        sharedCount.start();</span><br><span class="line">        <span class="comment">// 获取共享计数的值</span></span><br><span class="line">        <span class="keyword">int</span> count = sharedCount.getCount();</span><br><span class="line">        <span class="comment">// 修改共享计数的值</span></span><br><span class="line">        <span class="keyword">int</span> random = <span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>);</span><br><span class="line">        sharedCount.setCount(random);</span><br><span class="line">        System.out.println(<span class="string">"我获取了共享计数的初始值："</span> + count + <span class="string">"，并把计数器的值改为："</span> + random);</span><br><span class="line">        sharedCount.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DistributedAtomicNumber</strong></p><p>DistributedAtomicNumber接口是分布式原子数值类型的抽象，定义了分布式原子数值类型需要提供的方法。DistributedAtomicNumber接口有两个实现：<code>DistributedAtomicLong</code> 和 <code>DistributedAtomicInteger</code></p><p>DistributedAtomicLong除了计数的范围比SharedCount大了之外，比SharedCount更简单易用。它首先尝试使用乐观锁的方式设置计数器， 如果不成功(比如期间计数器已经被其它client更新了)， 它使用InterProcessMutex方式来更新计数值。此计数器有一系列的操作：</p><ul><li><p>get(): 获取当前值</p></li><li><p>increment()：加一</p></li><li><p>decrement(): 减一</p></li><li><p>add()：增加特定的值</p></li><li><p>subtract(): 减去特定的值</p></li><li><p>trySet(): 尝试设置计数值</p></li><li><p>forceSet(): 强制设置计数值</p></li></ul><p>你必须检查返回结果的succeeded()， 它代表此操作是否成功。如果操作成功， preValue()代表操作前的值， postValue()代表操作后的值。</p><h1>六、基于mysql实现分布式锁</h1><h2 id="1、介绍-v2">1、介绍</h2><p>不管是jvm锁还是mysql锁，为了保证线程的并发安全，都提供了悲观独占排他锁。所以<strong>独占排他</strong>也是分布式锁的基本要求</p><p>对于Mysql可以利用唯一键索引不能重复插入的特点实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_lock`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`lock_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'锁名'</span>,</span><br><span class="line">  <span class="string">`class_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'类名'</span>,</span><br><span class="line">  <span class="string">`method_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'方法名'</span>,</span><br><span class="line">  <span class="string">`server_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'服务器ip'</span>,</span><br><span class="line">  <span class="string">`thread_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'线程名'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'获取锁时间'</span>,</span><br><span class="line">  <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`idx_unique`</span> (<span class="string">`lock_name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1332899824461455363</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="2、基本思路">2、基本思路</h2><p>synchronized关键字和ReetrantLock锁都是独占排他锁，即多个线程争抢一个资源时，同一时刻只有一个线程可以抢占该资源，其他线程只能阻塞等待，直到占有资源的线程释放该资源</p><p><img src="https://img-blog.csdnimg.cn/d9bd228d07bb4b2a93f2e4489a35d7bc.png#pic_center" alt="在这里插入图片描述"></p><ul><li><p>线程同时获取锁（insert）</p></li><li><p>获取成功，执行业务逻辑，执行完成释放锁（delete）</p></li><li><p>其他线程等待重试</p></li></ul><h2 id="3、代码实现">3、代码实现</h2><p>最后测试发现其性能非常差</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockMapper stockMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LockMapper lockMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库分布式锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAndLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        Lock lock = <span class="keyword">new</span> Lock(<span class="keyword">null</span>, <span class="string">"lock"</span>, <span class="keyword">this</span>.getClass().getName(), <span class="keyword">new</span> Date(), <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.lockMapper.insert(lock);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，则重试</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="keyword">this</span>.checkAndLock();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先查询库存是否充足</span></span><br><span class="line">        Stock stock = <span class="keyword">this</span>.stockMapper.selectById(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再减库存</span></span><br><span class="line">        <span class="keyword">if</span> (stock != <span class="keyword">null</span> &amp;&amp; stock.getCount() &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            stock.setCount(stock.getCount() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">this</span>.stockMapper.updateById(stock);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        <span class="keyword">this</span>.lockMapper.deleteById(lock.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、缺陷和解决方">4、缺陷和解决方</h2><ul><li><p>这把锁强依赖数据库的可用性，数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用。</p><p><strong>解决方案</strong>：给 锁数据库 搭建主备</p></li><li><p>这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁。</p><p>解决方案：只要做一个定时任务，每隔一定时间把数据库中的超时数据清理一遍。</p></li><li><p>这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了。</p><p>解决方案：记录获取锁的主机信息和线程信息，如果相同线程要获取锁，直接重入。</p></li><li><p>受制于数据库性能，并发能力有限。</p><p>解决方案：无法解决。</p></li></ul><h1>七、总结</h1><ul><li><p>实现的复杂性或者难度角度：Zookeeper &gt; redis &gt; 数据库</p></li><li><p>实际性能角度：redis &gt; Zookeeper &gt; 数据库</p></li><li><p>可靠性角度：Zookeeper &gt; redis = 数据库</p></li></ul><p>这三种方式都不是尽善尽美，我们可以根据实际业务情况选择最适合的方案：如果追求极致性能可以选择reds方案；如果追求可靠性可以选择zk</p><p>常见锁分类：</p><ul><li><p><strong>悲观锁</strong>：具有强烈的独占和排他特性，在整个数据处理过程中，将数据处于锁定状态。适合于写比较多，会阻塞读操作。 <strong>乐观锁</strong>：采取了更加宽松的加锁机制，大多是基于数据版本（ Version ）及时间戳来实现。。适合于读比较多，不会阻塞读</p></li><li><p><strong>独占锁、互斥锁、排他锁</strong>：保证在任一时刻，只能被一个线程独占排他持有。synchronized、ReentrantLock <strong>共享锁</strong>：可同时被多个线程共享持有。CountDownLatch到计数器、Semaphore信号量</p></li><li><p><strong>可重入锁</strong>：又名递归锁。同一个线程在外层方法获取锁的时候，在进入内层方法时会自动获取锁。 <strong>不可重入锁</strong>：例如早期的synchronized</p></li><li><p><strong>公平锁</strong>：有优先级的锁，先来先得，谁先申请锁就先获取到锁 <strong>非公平锁</strong>：无优先级的锁，后来者也有机会先获取到锁</p></li><li><p><strong>自旋锁</strong>：当线程尝试获取锁失败时（锁已经被其它线程占用了），无限循环重试尝试获取锁； <strong>阻塞锁</strong>：当线程尝试获取锁失败时，线程进入阻塞状态，直到接收信号后被唤醒。在竞争激烈情况下，性能较高</p></li><li><p><strong>读锁</strong>：共享锁 <strong>写锁</strong>：独占排他锁</p></li><li><p><strong>偏向锁</strong>：一直被一个线程所访问，那么该线程会自动获取锁 <strong>轻量级锁</strong>（CAS）：当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。 <strong>重量级锁</strong>：当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候（10次），还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让他申请的线程进入阻塞，性能降低。 以上其实是synchronized的锁升级过程</p></li><li><p><strong>表级锁</strong>：对整张表加锁，加锁快开销小，不会出现死锁，但并发度低，会增加锁冲突的概率 <strong>行级锁</strong>：是mysql粒度最小的锁，只针对操作行，可大大减少锁冲突概率，并发度高，但加锁慢，开销大，会出现死锁</p></li></ul><hr><p>参考文章</p><p><a href="https://cloud.tencent.com/developer/article/1862801" target="_blank" rel="noopener" title="Redis进阶- Redisson分布式锁实现原理及源码解析">Redis进阶- Redisson分布式锁实现原理及源码解析</a></p><p><a href="https://www.bilibili.com/video/BV1kd4y1G7dM" target="_blank" rel="noopener" title="https://www.bilibili.com/video/BV1kd4y1G7dM">https://www.bilibili.com/video/BV1kd4y1G7dM</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;h2 id=&quot;1、介绍&quot;&gt;1、介绍&lt;/h2&gt;
&lt;p&gt;在应用开发中，特别是web工程开发，通常都是并发编程，不是多进程就是多线程。这种场景下极易出现线程并发性安全问题，此时不得不使用锁来解决问题。在多线程高并发场景下，为了保证资源的线程安全问题，jdk为我们提供了&lt;code&gt;synchronized&lt;/code&gt;关键字和&lt;code&gt;ReentrantLock&lt;/code&gt;可重入锁，但是它们只能保证一个工程内的线程安全。在分布式集群、微服务、云原生横行的当下，如何保证不同进程、不同服务、不同机器的线程安全问题，jdk并没有给我们提供既有的解决方案。目前主流的实现有以下方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于mysql关系型实现&lt;/li&gt;
&lt;li&gt;基于redis非关系型数据实现&lt;/li&gt;
&lt;li&gt;基于zookeeper/etcd实现&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://www.shawn22.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot重试策略Retry</title>
    <link href="https://www.shawn22.xyz/posts/60a09db8.html"/>
    <id>https://www.shawn22.xyz/posts/60a09db8.html</id>
    <published>2022-09-28T09:34:57.000Z</published>
    <updated>2022-09-28T09:48:19.192Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><h2 id="1、重试机制">1、重试机制</h2><blockquote><p>重试机制在网络服务中非常的重要，由于网路可能存在延迟，网络抖动，网络不稳定的情况。同时在分布式服务中网络的请求的高度密集，有些服务不一定能在规定的时间内完成访问。应该请求服务需要重试几次。以保证服务请求成功。</p></blockquote><p>例如对接支付接口时，因为回调比较重要，当访问失败时会进行重试，不过此时的重试机制时间是逐步加大，例如30s/1m/10m/1h等，最终到达阈值不在重试</p><p>对于重试是有场景限制的，不是什么场景都适合重试，<strong>比如参数校验不合法、写操作等（要考虑写是否幂等）都不适合重试</strong>。<strong>远程调用超时、网络突然中断可以重试</strong>。在微服务治理框架中，通常都有自己的重试与超时配置，比如<strong>dubbo可以设置retries=1，timeout=500调用失败只重试1次，超过500ms调用仍未返回则调用失败</strong>。比如外部 RPC 调用，或者数据入库等操作，<strong>如果一次操作失败，可以进行多次重试，提高调用成功的可能性</strong>。</p><a id="more"></a><h2 id="2、重试机制设计、共性和原理">2、重试机制设计、共性和原理</h2><ul><li><p>无侵入：这个好理解，不改动当前的业务逻辑，对于需要重试的地方，可以很简单的实现</p></li><li><p>可配置：包括重试次数，重试的间隔时间，是否使用异步方式等</p></li><li><p>通用性：最好是无改动(或者很小改动)的支持绝大部分的场景，拿过来直接可用</p></li><li><p>正常和重试优雅解耦，重试断言条件实例或逻辑异常实例是两者沟通的媒介</p></li><li><p>约定重试间隔，差异性重试策略，设置重试超时时间，进一步保证重试有效性以及重试流程稳定性</p></li><li><p>都使用了命令设计模式，通过委托重试对象完成相应的逻辑操作，同时内部封装实现重试逻辑</p></li><li><p><code>Spring-Retry</code>和<code>Guava-Retryer</code>工具都是线程安全的重试，能够支持并发业务场景的重试逻辑正确性</p></li></ul><h2 id="3、硬编码重试">3、硬编码重试</h2><p>本文会详细介绍<code>Spring-Retryr</code>和<code>Guava-Retry</code>两个重试组件，再次之前先看一下硬编码重试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldRetry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        callTry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callTry</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 最大调用次数</span></span><br><span class="line">        <span class="keyword">int</span> maxCount = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> retryCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(retryCount&gt;maxCount-<span class="number">1</span>)&#123;</span><br><span class="line">                log.info(<span class="string">"第&#123;&#125;次调用，重试次数达到上限，抛出异常，当前retryCount:&#123;&#125;"</span>,i,retryCount);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"重试次数达到上限"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// 模拟调用超时</span></span><br><span class="line">                queryOrder();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                retryCount++;</span><br><span class="line">                log.error(<span class="string">"第&#123;&#125;次调用出现异常，准备重试，当前retryCount:&#123;&#125;"</span>,i,retryCount);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">"接口调用超时"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>二、重试框架之Spring-Retry</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p>参考地址：<a href="https://github.com/spring-projects/spring-retry" target="_blank" rel="noopener" title="https://github.com/spring-projects/spring-retry">https://github.com/spring-projects/spring-retry</a></p></blockquote><p>Spring Retry 为 Spring 应用程序提供了声明性重试支持。它用于Spring批处理、Spring集成、Apache Hadoop(等等)。它主要是针对可能抛出异常的一些调用操作，进行有策略的重试</p><p>环境搭建首先进行<code>pom.xml</code>进入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、Spring-Retry的普通使用方式">2、Spring-Retry的普通使用方式</h2><h3 id="2-1-Demo搭建">2.1 Demo搭建</h3><p>准备一个任务方法，我这里是采用一个随机整数，根据不同的条件返回不同的值，或者抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryDemoTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">retryTask</span><span class="params">(String param)</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">"收到请求参数:&#123;&#125;"</span>,param);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = RandomUtils.nextInt(<span class="number">0</span>,<span class="number">11</span>);</span><br><span class="line">        log.info(<span class="string">"随机生成的数:&#123;&#125;"</span>,i);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"为0,抛出参数异常."</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数异常"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i  == <span class="number">1</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"为1,返回true."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"为2,返回false."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//为其他</span></span><br><span class="line">            log.info(<span class="string">"大于2,抛出自定义异常."</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemoteAccessException(<span class="string">"大于2,抛出远程访问异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务重试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRetryTemplateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试间隔时间ms,默认1000ms</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> fixedPeriodTime = <span class="number">1000L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大重试次数,默认为3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxRetryTimes = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示哪些异常需要重试,key表示异常的字节码,value为true表示需要重试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class&lt;? extends Throwable&gt;, Boolean&gt; exceptionMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        exceptionMap.put(RemoteAccessException<span class="class">.<span class="keyword">class</span>,<span class="title">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建重试模板实例</span></span><br><span class="line">        RetryTemplate retryTemplate = <span class="keyword">new</span> RetryTemplate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置重试回退操作策略，主要设置重试间隔时间</span></span><br><span class="line">        FixedBackOffPolicy backOffPolicy = <span class="keyword">new</span> FixedBackOffPolicy();</span><br><span class="line">        backOffPolicy.setBackOffPeriod(fixedPeriodTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置重试策略，主要设置重试次数</span></span><br><span class="line">        SimpleRetryPolicy retryPolicy = <span class="keyword">new</span> SimpleRetryPolicy(maxRetryTimes, exceptionMap);</span><br><span class="line"></span><br><span class="line">        retryTemplate.setRetryPolicy(retryPolicy);</span><br><span class="line">        retryTemplate.setBackOffPolicy(backOffPolicy);</span><br><span class="line"></span><br><span class="line">        Boolean execute = retryTemplate.execute(</span><br><span class="line">                <span class="comment">//RetryCallback 重试方法</span></span><br><span class="line">                retryContext -&gt; &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> b = RetryDemoTask.retryTask(<span class="string">"abc"</span>);</span><br><span class="line">                    log.info(<span class="string">"调用的结果:&#123;&#125;"</span>, b);</span><br><span class="line">                    <span class="keyword">return</span> b;</span><br><span class="line">                &#125;,</span><br><span class="line">                retryContext -&gt; &#123;</span><br><span class="line">                    <span class="comment">//RecoveryCallback 达到最大值的方法</span></span><br><span class="line">                    log.info(<span class="string">"已达到最大重试次数或抛出了不重试的异常~~~"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"执行结果:&#123;&#125;"</span>,execute);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>RetryTemplate</code> 承担了重试执行者的角色，它可以设置<code>SimpleRetryPolicy</code>(重试策略，设置重试上限，重试的根源实体)，<code>FixedBackOffPolicy</code>（固定的回退策略，设置执行重试回退的时间间隔）。</p></li><li><p><code>RetryTemplate</code>通过<code>execute</code>提交执行操作，需要准备<code>RetryCallback</code> 和<code>RecoveryCallback</code> 两个类实例，前者对应的就是重试回调逻辑实例，包装正常的功能操作，<code>RecoveryCallback</code>实现的是整个执行操作结束的恢复操作实例</p></li><li><p>只有在调用的时候抛出了异常，并且异常是在<code>exceptionMap</code>中配置的异常，才会执行重试操作，否则就调用到<code>excute</code>方法的第二个执行方法<code>RecoveryCallback</code>中</p></li></ul><h3 id="2-2-重试策略">2.2 重试策略</h3><ul><li><p><strong>NeverRetryPolicy：</strong> 只允许调用<code>RetryCallback</code>一次，不允许重试</p></li><li><p><strong>AlwaysRetryPolicy：</strong> 允许无限重试，直到成功，此方式逻辑不当会导致死循环</p></li><li><p><strong>SimpleRetryPolicy：</strong> 固定次数重试策略，默认重试最大次数为3次，<code>RetryTemplate</code>默认使用的策略</p></li><li><p><strong>TimeoutRetryPolicy：</strong> 超时时间重试策略，默认超时时间为1秒，在指定的超时时间内允许重试</p></li><li><p><strong>ExceptionClassifierRetryPolicy：</strong> 设置不同异常的重试策略，类似组合重试策略，区别在于这里只区分不同异常的重试</p></li><li><p><strong>CircuitBreakerRetryPolicy：</strong> 有熔断功能的重试策略，需设置3个参数<code>openTimeout</code>、<code>resetTimeout</code>和<code>delegate</code></p></li><li><p><strong>CompositeRetryPolicy：</strong> 组合重试策略，有两种组合方式，乐观组合重试策略是指只要有一个策略允许即可以重试，悲观组合重试策略是指只要有一个策略不允许即可以重试，但不管哪种组合方式，组合中的每一个策略都会执行</p></li></ul><h3 id="2-3-重试回退策略">2.3 重试回退策略</h3><p>重试回退策略，指的是每次重试是立即重试还是等待一段时间后重试。<strong>默认情况下是立即重试</strong>，如果需要配置等待一段时间后重试则需要指定回退策略<code>BackoffRetryPolicy</code>。</p><ul><li><p><strong>NoBackOffPolicy：</strong> 无退避算法策略，每次重试时立即重试</p></li><li><p><strong>FixedBackOffPolicy：</strong> 固定时间的退避策略，需设置参数<code>sleeper</code>和<code>backOffPeriod</code>，<code>sleeper</code>指定等待策略，默认是<code>Thread.sleep</code>，即线程休眠，<code>backOffPeriod</code>指定休眠时间，默认1秒</p></li><li><p><strong>UniformRandomBackOffPolicy：</strong> 随机时间退避策略，需设置<code>sleeper</code>、<code>minBackOffPeriod</code>和<code>maxBackOffPeriod</code>，该策略在<code>minBackOffPeriod</code>,<code>maxBackOffPeriod</code>之间取一个随机休眠时间，<code>minBackOffPeriod</code>默认500毫秒，<code>maxBackOffPeriod</code>默认1500毫秒</p></li><li><p><strong>ExponentialBackOffPolicy：</strong> 指数退避策略，需设置参数<code>sleeper</code>、<code>initialInterval</code>、<code>maxInterval</code>和<code>multiplie</code>r，<code>initialInterval</code>指定初始休眠时间，默认100毫秒，<code>maxInterval</code>指定最大休眠时间，默认30秒，<code>multiplier</code>指定乘数，即下一次休眠时间为<code>当前休眠时间*multiplier</code></p></li><li><p><strong>ExponentialRandomBackOffPolicy：</strong> 随机指数退避策略，引入随机乘数可以实现随机乘数回退</p></li></ul><p>我们可以根据自己的应用场景和需求，使用不同的策略，不过一般使用默认的就足够了。</p><h3 id="2-4-其他扩展">2.4 其他扩展</h3><p>配置重试策略和退避策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRetryConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"retryTemplateFixed"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryTemplate <span class="title">retryTemplateFixed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.重试策略</span></span><br><span class="line">        <span class="comment">// 触发条件</span></span><br><span class="line">        Map&lt;Class&lt;? extends Throwable&gt;, Boolean&gt; exceptionMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        exceptionMap.put(RemoteAccessException<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重试次数设置为3次</span></span><br><span class="line">        <span class="keyword">int</span> maxAttempts = <span class="number">3</span>;</span><br><span class="line">        SimpleRetryPolicy retryPolicy = <span class="keyword">new</span> SimpleRetryPolicy(maxAttempts, exceptionMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.重试间隔设置为1秒</span></span><br><span class="line">        FixedBackOffPolicy backOffPolicy = <span class="keyword">new</span> FixedBackOffPolicy();</span><br><span class="line">        backOffPolicy.setBackOffPeriod(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.构造RetryTemplate</span></span><br><span class="line">        RetryTemplate retryTemplate = <span class="keyword">new</span> RetryTemplate();</span><br><span class="line">        retryTemplate.setRetryPolicy(retryPolicy);</span><br><span class="line">        retryTemplate.setBackOffPolicy(backOffPolicy);</span><br><span class="line">        <span class="keyword">return</span> retryTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"retryTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryTemplate <span class="title">retryTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义简易重试策略，最大重试次数为3次,重试间隔为3s</span></span><br><span class="line">        <span class="keyword">return</span> RetryTemplate.builder()</span><br><span class="line">                .maxAttempts(<span class="number">3</span>)</span><br><span class="line">                .fixedBackoff(<span class="number">3000</span>)</span><br><span class="line">                .retryOn(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">build</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spring retry支持的重试策略和退避策略</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"retryTemplateDemo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryTemplate <span class="title">retryTemplateDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.重试策略</span></span><br><span class="line">        <span class="comment">// 不重试</span></span><br><span class="line">        NeverRetryPolicy neverRetryPolicy = <span class="keyword">new</span> NeverRetryPolicy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无限重试</span></span><br><span class="line">        AlwaysRetryPolicy alwaysRetryPolicy = <span class="keyword">new</span> AlwaysRetryPolicy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置不同异常的重试策略，类似组合重试策略，区别在于这里只区分不同异常的重试</span></span><br><span class="line">        ExceptionClassifierRetryPolicy exceptionClassifierRetryPolicy = <span class="keyword">new</span> ExceptionClassifierRetryPolicy();</span><br><span class="line">        <span class="keyword">final</span> Map&lt;Class&lt;? extends Throwable&gt;, RetryPolicy&gt; policyMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        policyMap.put(IOException<span class="class">.<span class="keyword">class</span>, <span class="title">alwaysRetryPolicy</span>)</span>;</span><br><span class="line">        policyMap.put(InterruptedIOException<span class="class">.<span class="keyword">class</span>, <span class="title">neverRetryPolicy</span>)</span>;</span><br><span class="line">        policyMap.put(UnknownHostException<span class="class">.<span class="keyword">class</span>, <span class="title">neverRetryPolicy</span>)</span>;</span><br><span class="line">        exceptionClassifierRetryPolicy.setPolicyMap(policyMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 固定次数重试，默认最大重试次数为5次，RetryTemplate默认重试策略</span></span><br><span class="line">        SimpleRetryPolicy simpleRetryPolicy = <span class="keyword">new</span> SimpleRetryPolicy();</span><br><span class="line">        simpleRetryPolicy.setMaxAttempts(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超时时间重试，默认超时时间为1秒，在指定的超时时间内重试</span></span><br><span class="line">        TimeoutRetryPolicy timeoutRetryPolicy = <span class="keyword">new</span> TimeoutRetryPolicy();</span><br><span class="line">        timeoutRetryPolicy.setTimeout(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 组合重试策略，有两种组合方式：</span></span><br><span class="line"><span class="comment">         *  1.悲观默认重试，有不重试的策略则不重试。</span></span><br><span class="line"><span class="comment">         *  2.乐观默认不重试，有需要重试的策略则重试。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CompositeRetryPolicy compositeRetryPolicy = <span class="keyword">new</span> CompositeRetryPolicy();</span><br><span class="line">        compositeRetryPolicy.setOptimistic(<span class="keyword">true</span>);</span><br><span class="line">        compositeRetryPolicy.setPolicies(<span class="keyword">new</span> RetryPolicy[]&#123;simpleRetryPolicy, timeoutRetryPolicy&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有熔断功能的重试</span></span><br><span class="line">        CircuitBreakerRetryPolicy circuitBreakerRetryPolicy = <span class="keyword">new</span> CircuitBreakerRetryPolicy(compositeRetryPolicy);</span><br><span class="line">        <span class="comment">// 5s内失败10次，则开启熔断</span></span><br><span class="line">        circuitBreakerRetryPolicy.setOpenTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 10s之后熔断恢复</span></span><br><span class="line">        circuitBreakerRetryPolicy.setResetTimeout(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.退避策略（上一次执行失败之后，间隔多久进行下一次重试）</span></span><br><span class="line">        <span class="comment">// 立即重试</span></span><br><span class="line">        NoBackOffPolicy noBackOffPolicy = <span class="keyword">new</span> NoBackOffPolicy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 固定时间后重试，默认1s</span></span><br><span class="line">        FixedBackOffPolicy fixedBackOffPolicy = <span class="keyword">new</span> FixedBackOffPolicy();</span><br><span class="line">        fixedBackOffPolicy.setBackOffPeriod(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机时间后重试（如下：从500ms到1500ms内取一个随机时间后进行重试）</span></span><br><span class="line">        UniformRandomBackOffPolicy uniformRandomBackOffPolicy = <span class="keyword">new</span> UniformRandomBackOffPolicy();</span><br><span class="line">        uniformRandomBackOffPolicy.setMinBackOffPeriod(<span class="number">500</span>);</span><br><span class="line">        uniformRandomBackOffPolicy.setMaxBackOffPeriod(<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指数退避策略（如下：初始休眠时间100ms，最大休眠时间30s，下一次休眠时间为当前休眠时间*2）</span></span><br><span class="line">        ExponentialBackOffPolicy exponentialBackOffPolicy = <span class="keyword">new</span> ExponentialBackOffPolicy();</span><br><span class="line">        exponentialBackOffPolicy.setInitialInterval(<span class="number">100</span>);</span><br><span class="line">        exponentialBackOffPolicy.setMaxInterval(<span class="number">30000</span>);</span><br><span class="line">        exponentialBackOffPolicy.setMultiplier(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机指数退避策略</span></span><br><span class="line">        ExponentialRandomBackOffPolicy exponentialRandomBackOffPolicy = <span class="keyword">new</span> ExponentialRandomBackOffPolicy();</span><br><span class="line">        exponentialRandomBackOffPolicy.setInitialInterval(<span class="number">100</span>);</span><br><span class="line">        exponentialRandomBackOffPolicy.setMaxInterval(<span class="number">30000</span>);</span><br><span class="line">        exponentialRandomBackOffPolicy.setMultiplier(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.return</span></span><br><span class="line">        RetryTemplate retryTemplate = <span class="keyword">new</span> RetryTemplate();</span><br><span class="line">        retryTemplate.setRetryPolicy(circuitBreakerRetryPolicy);</span><br><span class="line">        <span class="keyword">return</span> retryTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入RetryTemplate</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RetryTemplate retryTemplateFixed;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        Boolean execute = retryTemplateFixed.execute(</span><br><span class="line">                <span class="comment">// 重试回调</span></span><br><span class="line">                retryContext -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">                    <span class="keyword">boolean</span> b = RetryTask.retryTask(<span class="string">"abc"</span>);</span><br><span class="line">                    log.info(<span class="string">"调用的结果:&#123;&#125;"</span>, b);</span><br><span class="line">                    <span class="keyword">return</span> b;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 恢复回调（达到最大重试次数，或者抛出不满足重试条件的异常）</span></span><br><span class="line">                retryContext -&gt; &#123;</span><br><span class="line">                    log.info(<span class="string">"已达到最大重试次数或抛出了不重试的异常~~~"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"执行结果:&#123;&#125;"</span>,execute);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Spring-Retry注解式-推荐">3、Spring-Retry注解式(推荐)</h2><h3 id="3-1-注解介绍">3.1 注解介绍</h3><p>下面注解方法为常用方法，具体可以自己探索</p><p><strong>@EnableRetry</strong></p><p>表示是否开始重试组件</p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>proxyTargetClass</td><td>boolean</td><td>false</td><td>指示是否要创建基于子类的(CGLIB)代理，而不是创建标准的基于Java接口的代理</td></tr></tbody></table><p><strong>@Retryable</strong></p><p>标注此注解的方法在发送异常时会进行重试</p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>interceptor</td><td>String</td><td>“”</td><td>将interceptor的bean名称应用到retryable()，和其他的属性互斥</td></tr><tr><td>include</td><td>Class[]</td><td>{}</td><td>哪些异常可以触发重试 ，默认为空</td></tr><tr><td>exclude</td><td>Class[]</td><td>{}</td><td>哪些异常将不会触发重试，默认为空，如果和include属性同时为空，则所有的异常都将会触发重试</td></tr><tr><td>value</td><td>Class[]</td><td>{}</td><td>可重试的异常类型</td></tr><tr><td>label</td><td>String</td><td>“”</td><td>统计报告的唯—标签。如果没有提供，调用者可以选择忽略它，或者提供默认值</td></tr><tr><td>maxAttempts</td><td>int</td><td>3</td><td>尝试的最大次数(包括第一次失败)，默认为3次</td></tr><tr><td>backoff</td><td>@Backoff</td><td>@Backoff()</td><td>@Backoff @Backoff()指定用于重试此操作的backoff属性。默认为空</td></tr></tbody></table><p><strong>@Backoff</strong></p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>delay</td><td>long</td><td>0</td><td>如果不设置则默认使用1000 ms等待重试，和value同义词</td></tr><tr><td>maxDelay</td><td>long</td><td>0</td><td>最大重试等待时间</td></tr><tr><td>multiplier</td><td>long</td><td>0</td><td>用于计算下一个延迟延迟的乘数(大于0生效)</td></tr><tr><td>random</td><td>boolean</td><td>false</td><td>随机重试等待时间</td></tr></tbody></table><h3 id="3-2-注解式实战">3.2 注解式实战</h3><p>因为注解需要用到切面，所以需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置注解式重试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRetryDemo</span>   </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试所调用方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Retryable</span>(value = &#123;RemoteAccessException<span class="class">.<span class="keyword">class</span>&#125;,<span class="title">maxAttempts</span> </span>= <span class="number">3</span>,backoff = <span class="meta">@Backoff</span>(delay = <span class="number">2000L</span>,multiplier = <span class="number">2</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">call</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RetryDemoTask.retryTask(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 达到最大重试次数,或抛出了一个没有指定进行重试的异常</span></span><br><span class="line"><span class="comment">     * recover 机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">recover</span><span class="params">(Exception e,String param)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"达到最大重试次数,或抛出了一个没有指定进行重试的异常:"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 达到最大重试次数,或抛出了一个没有指定进行重试的异常</span></span><br><span class="line"><span class="comment">     * recover 机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">recover</span><span class="params">(Exception e,String param)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"达到最大重试次数,或抛出了一个没有指定进行重试的异常:"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以自定义异常的兜底方案，注意返回方法要对，否则会失效，会优先匹配子类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">recover1</span><span class="params">(RuntimeException npe, String param)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">"达到最大重试次数,或抛出了一个空指针异常:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，发现可以成功重试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetryApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> SpringRetryDemo springRetryDemo;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> abc = springRetryDemo.call(<span class="string">"abc"</span>);</span><br><span class="line">    log.info(<span class="string">"--结果是:&#123;&#125;--"</span>,abc);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、监听重试过程">4、监听重试过程</h2><h3 id="4-1-简介">4.1 简介</h3><ul><li><p>通过<strong>实现RetryListener接口</strong>，重写<code>open、close、onError</code>这三个方法，既可以完成对重试过程的追踪，也可以添加额外的处理逻辑；</p></li><li><p>通过<strong>继承RetryListenerSupport</strong>，也可以从<code>open、close、onError</code>这三个方法中，选择性的重写</p></li></ul><p>普通方式使用时(注解方式不需要)，在实例化RetryTemplate时，配置上该RetryListener实例即可：<code>retryTemplate.setListeners(new RetryListener[] {retryListenerTemplate});</code>另外每个RetryTemplate可以注册多个监听器，其中onOpen、onClose方法按照注册顺序执行，onError按照注册顺序的相反顺序执行</p><h3 id="4-2-实现RetryListener接口">4.2 实现<strong>RetryListener接口</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryListenerTemplate</span> <span class="keyword">implements</span> <span class="title">RetryListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 进入重试前调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">open</span><span class="params">(RetryContext retryContext, RetryCallback&lt;T, E&gt; retryCallback)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------进入重试方法(实现)--------------------------"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重试结束后调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(RetryContext retryContext, RetryCallback&lt;T, E&gt; retryCallback, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------重试方法结束(实现)--------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 捕获到异常时调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(RetryContext retryContext, RetryCallback&lt;T, E&gt; retryCallback, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------第"</span> + retryContext.getRetryCount() + <span class="string">"次重试(实现)--------------------------"</span>);</span><br><span class="line">        log.error(throwable.getMessage(), throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-继承RetryListenerSupport">4.3 <strong>继承RetryListenerSupport</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryListenerTemplate</span> <span class="keyword">extends</span> <span class="title">RetryListenerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">open</span><span class="params">(RetryContext context, RetryCallback&lt;T, E&gt; callback)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------进入重试方法(继承)--------------------------"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.open(context, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(RetryContext context, RetryCallback&lt;T, E&gt; callback, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------重试方法结束(继承)--------------------------"</span>);</span><br><span class="line">        <span class="keyword">super</span>.close(context, callback, throwable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(RetryContext context, RetryCallback&lt;T, E&gt; callback, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------第"</span> + context.getRetryCount() + <span class="string">"次重试(继承)--------------------------"</span>);</span><br><span class="line">        log.error(throwable.getMessage(), throwable);</span><br><span class="line">        <span class="keyword">super</span>.onError(context, callback, throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、重试框架之Guava-Retrying</h1><h2 id="1、介绍-v2">1、介绍</h2><blockquote><p>源码地址：<a href="https://github.com/rholder/guava-retrying" target="_blank" rel="noopener" title="https://github.com/rholder/guava-retrying">https://github.com/rholder/guava-retrying</a></p></blockquote><p><strong>Guava retryer工具</strong>与spring-retry类似，都是通过定义重试者角色来包装正常逻辑重试，但是Guava retryer有更优的策略定义，在支持重试次数和重试频度控制基础上，能够兼容<strong>支持多个异常或者自定义实体对象的重试源定义</strong>，让重试功能有更多的灵活性。</p><p>Guava Retryer也是线程安全的，入口调用逻辑采用的是<code>Java.util.concurrent.Callable</code>的call方法</p><p>首先需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.rholder<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava-retrying<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、Guava-Retrying普通使用方式-官方">2、Guava-Retrying普通使用方式(官方)</h2><h3 id="2-1-Demo实战">2.1 Demo实战</h3><p>首先创建一个服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryDemoTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">retryTask</span><span class="params">(String param)</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">"收到请求参数:&#123;&#125;"</span>,param);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = RandomUtils.nextInt(<span class="number">0</span>,<span class="number">11</span>);</span><br><span class="line">        log.info(<span class="string">"随机生成的数:&#123;&#125;"</span>,i);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"小于2,抛出参数异常."</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数异常"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i  &lt; <span class="number">5</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"小于5,返回true."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">7</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"小于7,返回false."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//为其他</span></span><br><span class="line">            log.info(<span class="string">"大于等于7,抛出自定义异常."</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemoteAccessException(<span class="string">"大于等于7,抛出自定义异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaRetryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// RetryerBuilder 构建重试实例 retryer,可以设置重试源且可以支持多个重试源，可以配置重试次数或重试超时时间，以及可以配置等待时间间隔</span></span><br><span class="line">        Retryer&lt;Boolean&gt; retryer = RetryerBuilder.&lt;Boolean&gt; newBuilder()</span><br><span class="line">                .retryIfExceptionOfType(RemoteAccessException<span class="class">.<span class="keyword">class</span>)//设置异常重试源</span></span><br><span class="line"><span class="class">                .<span class="title">retryIfResult</span>(<span class="title">res</span>-&gt; <span class="title">res</span></span>==<span class="keyword">false</span>)  <span class="comment">//设置根据结果重试</span></span><br><span class="line">                .withWaitStrategy(WaitStrategies.fixedWait(<span class="number">3</span>, TimeUnit.SECONDS)) <span class="comment">//设置等待间隔时间</span></span><br><span class="line">                .withStopStrategy(StopStrategies.stopAfterAttempt(<span class="number">3</span>)) <span class="comment">//设置最大重试次数</span></span><br><span class="line">                .withRetryListener(<span class="keyword">new</span> RetryListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> &lt;V&gt; <span class="function"><span class="keyword">void</span> <span class="title">onRetry</span><span class="params">(Attempt&lt;V&gt; attempt)</span> </span>&#123;</span><br><span class="line">                        log.info(<span class="string">"第【&#123;&#125;】次重试调用"</span>,attempt.getAttemptNumber());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .withBlockStrategy(l -&gt; &#123;</span><br><span class="line">                    log.info(<span class="string">"重试阻塞时间：&#123;&#125;"</span>,l);</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            retryer.call(() -&gt; RetryDemoTask.retryTask(<span class="string">"abc"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-重试机制">2.2 重试机制</h3><p>RetryerBuilder的<strong>retryIfXXX()<strong>方法用来设置</strong>在什么情况下进行重</strong>试，总体上可以分为<strong>根据执行异常进行重试</strong>和<strong>根据方法执行结果进行重试</strong>两类。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>retryIfException()</td><td>抛出 runtime 异常、checked 异常时都会重试，但是抛出 error 不会重试</td></tr><tr><td>retryIfRuntimeException()</td><td>会在抛 runtime 异常的时候才重试，checked 异常和error 都不重试</td></tr><tr><td>retryIfException(Predicate exceptionPredicate)</td><td>这里当发生异常时，会将异常传递给exceptionPredicate，那我们就可以通过传入的异常进行更加自定义的方式来决定什么时候进行重试</td></tr><tr><td>retryIfExceptionOfType(Class&lt;? extends Throwable&gt; exceptionClass)</td><td>许我们只在发生特定异常的时候才重试，比如NullPointerException 和 IllegalStateException 都属于 runtime 异常，也包括自定义的error</td></tr><tr><td>retryIfResult(@Nonnull Predicate resultPredicate)</td><td>传入的resultPredicate返回true时则进行重试</td></tr></tbody></table><h3 id="2-3-停止重试相关策略">2.3 停止重试相关策略</h3><p><strong>StopStrategy</strong></p><blockquote><p>停止重试策略用来决定什么时候不进行重试，其接口com.github.rholder.retry.StopStrategy，停止重试策略的实现类均在com.github.rholder.retry.StopStrategies中，它是一个策略工厂类</p></blockquote><ul><li><p> NeverStopStrategy：此策略将永远重试，永不停止</p></li><li><p>StopAfterAttemptStrategy：当执行次数到达指定次数之后停止重试</p></li><li><p>StopAfterDelayStrategy：当距离方法的第一次执行超出了指定的delay时间时停止，也就是说一直进行重试，当进行下一次重试的时候会判断从第一次执行到现在的所消耗的时间是否超过了这里指定的delay时间，查看其实现</p></li></ul><p><strong>WaitStrategy</strong></p><ul><li><p>IncrementingWaitStrategy：在决定任务间隔时间时，返回的是一个递增的间隔时间，即每次任务重试间隔时间逐步递增，越来越长</p></li><li><p>RandomWaitStrategy：返回一个随机的间隔时长，我们需要传入的就是一个最小间隔和最大间隔，然后随机返回介于两者之间的一个间隔时长</p></li><li><p>FixedWaitStrategy：返回一个固定时长的重试间隔</p></li><li><p>ExceptionWaitStrategy：由方法执行异常来决定是否重试任务之间进行间隔等待，以及间隔多久</p></li><li><p>FibonacciWaitStrategy：与IncrementingWaitStrategy有点相似，间隔时间都是随着重试次数的增加而递增的，不同的是，FibonacciWaitStrategy是按照斐波那契数列来进行计算的，使用这个策略时，我们需要传入一个乘数因子和最大间隔时长</p></li><li><p>ExponentialWaitStrategy：与IncrementingWaitStrategy、FibonacciWaitStrategy也类似，间隔时间都是随着重试次数的增加而递增的，但是该策略的递增是呈指数级递增</p></li><li><p>WaitStrategy：随机时间间隔以及不等待</p></li></ul><p><strong>RetryListener</strong></p><blockquote><p>当发生重试时，将会调用RetryListener的onRetry方法，此时我们可以进行比如记录日志等额外操作</p></blockquote><h2 id="3、Guava-Retrying注解式-非官方">3、Guava-Retrying注解式(非官方)</h2><p>因为注解需要用到切面，所以需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retry &#123;</span><br><span class="line">    <span class="comment">//指定异常时重试  由于pjp.proceed();需要try catch 异常，会有问题暂时没找到解决方法，先注释</span></span><br><span class="line">    Class[] exceptionClass() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出现Exception时重试</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">retryIfException</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//程序出现RuntimeException异常时重试</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">retryIfRuntimeException</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重试次数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">attemptNumber</span><span class="params">()</span> <span class="keyword">default</span> 3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重试间隔 ms</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">waitStrategySleepTime</span><span class="params">()</span> <span class="keyword">default</span> 1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持续时间; 期间</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">duration</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值为指定字符串时重试</span></span><br><span class="line">    <span class="function">String <span class="title">returnResult</span><span class="params">()</span> <span class="keyword">default</span> "willRetryString"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值为false时重试（默认关闭）  不支持同时设置指定返回字符串重试</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">closeReturnFalseRetry</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建AOP切面方法增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.retry.guavaRetrying.Retry)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodCallConstraintPointcut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"@annotation(com.example.retry.guavaRetrying.Retry)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">monitorAround</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        log.info(<span class="string">"进入重试切面"</span>);</span><br><span class="line">        Method method = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//判断注解是否method 上</span></span><br><span class="line">        <span class="keyword">if</span> (point.getSignature() <span class="keyword">instanceof</span> MethodSignature) &#123;</span><br><span class="line">            MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">            method = signature.getMethod();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Retry annotation = method.getDeclaredAnnotation(Retry<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//重试时间，重试次数</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.duration() &lt;= <span class="number">0</span> &amp;&amp; annotation.attemptNumber() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> point.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不能设置开启returnFalse重试 和指定返回值重试</span></span><br><span class="line">        <span class="keyword">if</span>(!annotation.closeReturnFalseRetry() &amp;&amp; !<span class="string">"willRertyString"</span>.equals(annotation.returnResult()))&#123;</span><br><span class="line">            <span class="keyword">return</span> point.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建builder</span></span><br><span class="line">        RetryerBuilder builder = RetryerBuilder.newBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重试次数</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.attemptNumber() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            builder.withStopStrategy(StopStrategies.stopAfterAttempt(annotation.attemptNumber()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出策略</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.duration() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            builder.withStopStrategy(StopStrategies.stopAfterDelay(annotation.duration(), TimeUnit.MILLISECONDS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重试间隔等待策略</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.waitStrategySleepTime() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            builder.withWaitStrategy(WaitStrategies.fixedWait(annotation.waitStrategySleepTime(), TimeUnit.MILLISECONDS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//停止重试的策略</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.exceptionClass().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; retryThrowable : annotation.exceptionClass()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (retryThrowable != <span class="keyword">null</span> &amp;&amp; Throwable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">retryThrowable</span>)) </span>&#123;</span><br><span class="line">                    builder.retryIfExceptionOfType(retryThrowable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//RuntimeException时重试</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.retryIfRuntimeException())&#123;</span><br><span class="line">            builder.retryIfRuntimeException();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (annotation.retryIfException())&#123;</span><br><span class="line">            builder.retryIfException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"willRertyString"</span>.equals(annotation.returnResult()))&#123;</span><br><span class="line">            builder.retryIfResult(s -&gt; Objects.equals(s, annotation.returnResult()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!annotation.closeReturnFalseRetry())&#123;</span><br><span class="line">            builder.retryIfResult(aBoolean -&gt; Objects.equals(aBoolean, annotation.closeReturnFalseRetry()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method finalMethod = method;</span><br><span class="line">        <span class="keyword">return</span> builder.build().call(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">"执行切面 "</span>+   finalMethod.getName());</span><br><span class="line">                <span class="keyword">return</span> point.proceed();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (Exception) throwable;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(throwable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retry</span>(retryIfException = <span class="keyword">true</span>, waitStrategySleepTime = <span class="number">1200</span>,attemptNumber = <span class="number">5</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 格式化时间</span></span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">            <span class="comment">// a为am/pm的标记</span></span><br><span class="line">            sdf.applyPattern(<span class="string">"yyyy-MM-dd HH:mm:ss a"</span>);</span><br><span class="line">            <span class="comment">// 获取当前时间</span></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            <span class="comment">// 输出已经格式化的现在时间（24小时制）</span></span><br><span class="line">            log.info(<span class="string">"现在时间："</span> + sdf.format(date));</span><br><span class="line">            <span class="keyword">int</span> a=<span class="number">1</span>/x;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"发生异常错误，错误原因："</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"发生异常错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaRetryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AopTest aopTest;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            aopTest.test();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"测试错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>四、源码简析</h1><h2 id="1、Spring-Retry源码简析">1、Spring-Retry源码简析</h2><blockquote><p>参考文章：<a href="https://mp.weixin.qq.com/s/VA6KScOzSkGfZ65jUbVR6w" target="_blank" rel="noopener" title="https://mp.weixin.qq.com/s/VA6KScOzSkGfZ65jUbVR6w">https://mp.weixin.qq.com/s/VA6KScOzSkGfZ65jUbVR6w</a></p></blockquote><h2 id="2、Guava-Retrying源码简析">2、Guava-Retrying源码简析</h2><p>实现原理大概就是由上述各种策略配合从而达到了非常灵活的重试机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Attempt</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of the attempt, if any.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of the attempt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ExecutionException if an exception was thrown by the attempt. The thrown</span></span><br><span class="line"><span class="comment">     *                            exception is set as the cause of the ExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tells if the call returned a result or not</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the call returned a result, &lt;code&gt;false&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     *         if it threw an exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasResult</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tells if the call threw an exception or not</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the call threw an exception, &lt;code&gt;false&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     *         if it returned a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasException</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the result of the call</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the call didn't return a result, but threw an exception,</span></span><br><span class="line"><span class="comment">     *                               as indicated by &#123;<span class="doctag">@link</span> #hasResult()&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getResult</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the exception thrown by the call</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the exception thrown by the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the call didn't throw an exception,</span></span><br><span class="line"><span class="comment">     *                               as indicated by &#123;<span class="doctag">@link</span> #hasException()&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Throwable <span class="title">getExceptionCause</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number, starting from 1, of this attempt.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the attempt number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getAttemptNumber</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The delay since the start of the first attempt, in milliseconds.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the delay since the start of the first attempt, in milliseconds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelaySinceFirstAttempt</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过接口方法可以知道Attempt这个类包含了任务执行次数、任务执行异常、任务执行结果、以及首次执行任务至今的时间间隔，那么我们后续的不管重试时机、还是其他策略都是根据此值来决定。接下来看关键执行入口<code>Retryer##call</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">call</span><span class="params">(Callable&lt;V&gt; callable)</span> <span class="keyword">throws</span> ExecutionException, RetryException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行次数从1开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> attemptNumber = <span class="number">1</span>; ; attemptNumber++) &#123;</span><br><span class="line">        Attempt&lt;V&gt; attempt;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试执行</span></span><br><span class="line">            V result = attemptTimeLimiter.call(callable);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行成功则将结果封装为ResultAttempt</span></span><br><span class="line">            attempt = <span class="keyword">new</span> Retryer.ResultAttempt&lt;V&gt;(result, attemptNumber, TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// 执行异常则将结果封装为ExceptionAttempt</span></span><br><span class="line">            attempt = <span class="keyword">new</span> Retryer.ExceptionAttempt&lt;V&gt;(t, attemptNumber, TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里将执行结果传给RetryListener做一些额外事情</span></span><br><span class="line">        <span class="keyword">for</span> (RetryListener listener : listeners) &#123;</span><br><span class="line">            listener.onRetry(attempt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这个就是决定是否要进行重试的地方，如果不进行重试直接返回结果，执行成功就返回结果，执行失败就返回异常</span></span><br><span class="line">        <span class="keyword">if</span> (!rejectionPredicate.apply(attempt)) &#123;</span><br><span class="line">            <span class="keyword">return</span> attempt.get();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 到这里，说明需要进行重试，则此时先决定是否到达了停止重试的时机，如果到达了则直接返回异常</span></span><br><span class="line">        <span class="keyword">if</span> (stopStrategy.shouldStop(attempt)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RetryException(attemptNumber, attempt);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 决定重试时间间隔</span></span><br><span class="line">            <span class="keyword">long</span> sleepTime = waitStrategy.computeSleepTime(attempt);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 进行阻塞</span></span><br><span class="line">                blockStrategy.block(sleepTime);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RetryException(attemptNumber, attempt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_34850743/article/details/126820853" target="_blank" rel="noopener" title="重试组件 Spring Retry">重试组件 Spring Retry</a></p><p><a href="https://blog.csdn.net/zzzgd_666/article/details/84377962" target="_blank" rel="noopener" title="重试框架Guava-Retry和spring-Retry">重试框架Guava-Retry和spring-Retry</a></p><p><a href="https://mp.weixin.qq.com/s/VA6KScOzSkGfZ65jUbVR6w" target="_blank" rel="noopener" title="确实很优雅，所以我要扯下这个注解的神秘面纱">确实很优雅，所以我要扯下这个注解的神秘面纱</a></p><p><a href="https://blog.csdn.net/AS011x/article/details/126517681" target="_blank" rel="noopener" title="使用 Guava-Retry 优雅的实现重处理">使用 Guava-Retry 优雅的实现重处理</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;h2 id=&quot;1、重试机制&quot;&gt;1、重试机制&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;重试机制在网络服务中非常的重要，由于网路可能存在延迟，网络抖动，网络不稳定的情况。同时在分布式服务中网络的请求的高度密集，有些服务不一定能在规定的时间内完成访问。应该请求服务需要重试几次。以保证服务请求成功。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如对接支付接口时，因为回调比较重要，当访问失败时会进行重试，不过此时的重试机制时间是逐步加大，例如30s/1m/10m/1h等，最终到达阈值不在重试&lt;/p&gt;
&lt;p&gt;对于重试是有场景限制的，不是什么场景都适合重试，&lt;strong&gt;比如参数校验不合法、写操作等（要考虑写是否幂等）都不适合重试&lt;/strong&gt;。&lt;strong&gt;远程调用超时、网络突然中断可以重试&lt;/strong&gt;。在微服务治理框架中，通常都有自己的重试与超时配置，比如&lt;strong&gt;dubbo可以设置retries=1，timeout=500调用失败只重试1次，超过500ms调用仍未返回则调用失败&lt;/strong&gt;。比如外部 RPC 调用，或者数据入库等操作，&lt;strong&gt;如果一次操作失败，可以进行多次重试，提高调用成功的可能性&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Redis接口限流、分布式锁与幂等</title>
    <link href="https://www.shawn22.xyz/posts/dcc28633.html"/>
    <id>https://www.shawn22.xyz/posts/dcc28633.html</id>
    <published>2022-09-28T09:34:48.000Z</published>
    <updated>2022-09-28T09:48:19.193Z</updated>
    
    <content type="html"><![CDATA[<h1>一、概述</h1><h2 id="1、Redis概述">1、Redis概述</h2><blockquote><p>Redis参考文章：<a href="https://blog.csdn.net/lemon_TT/article/details/117711682" target="_blank" rel="noopener" title="Redis6.0学习笔记">Redis6.0学习笔记</a></p></blockquote><p>Redis 除了做缓存，还能干很多很多事情：<strong>分布式锁、限流、处理请求接口幂等性</strong>，本篇文章重点讲述SpringBoot通过注解和AOP的方式实现Redis的接口限流，Redis使用了Lua脚本实现原子操作；通过redis实现的分布式锁以及处理接口幂等等方案</p><a id="more"></a><h2 id="2、功能介绍">2、功能介绍</h2><h3 id="2-1-Redis限流">2.1 Redis限流</h3><blockquote><p>限流就是限制API访问频率，当访问频率超过某个阈值时进行拒绝访问等操作</p></blockquote><p>当然这是在代码层面进行的接口限流，现在分布式微服务接口限流基本是在网关处做接口限流/黑白名单等，例如Gateway/Nginx等，详情可以参考<a href="https://blog.csdn.net/lemon_TT/article/details/125726225" target="_blank" rel="noopener" title="Nginx高级篇">Nginx高级篇</a>和<a href="https://blog.csdn.net/lemon_TT/article/details/124675243" target="_blank" rel="noopener" title="SpringCloud Gateway 详解">SpringCloud Gateway 详解</a></p><h3 id="2-2-分布式锁">2.2 分布式锁</h3><p>为了保证一个方法在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用Java并发处理相关的API(如ReentrantLcok或synchronized)进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题</p><h3 id="2-3-接口幂等">2.3 接口幂等</h3><p>幂等性原本是数学上的概念，用在接口上就可以理解为：同一个接口，多次发出同一个请求，必须保证操作只执行一次。 调用接口发生异常并且重复尝试时，总是会造成系统所无法承受的损失，所以必须阻止这种现象的发生</p><h1>二、Redis接口限流实战</h1><h2 id="1、环境准备">1、环境准备</h2><p>首先我们创建一个 Spring Boot 工程，引入 Web 和 Redis 依赖，同时考虑到接口限流一般是通过注解来标记，而注解是通过 AOP 来解析的，所以我们还需要加上 AOP 的依赖，最终的依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后提前准备好一个** Redis 实例**，这里我们项目配置好之后，直接配置一下 Redis 的基本信息即可，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host&#x3D;localhost</span><br><span class="line">spring.redis.port&#x3D;6379</span><br><span class="line"># spring.redis.password&#x3D;123</span><br></pre></td></tr></table></figure><h2 id="2、限流注解">2、限流注解</h2><p>接下来我们创建一个限流注解，我们将<strong>限流分为两种情况</strong>：</p><ul><li><p>针对当前接口的全局性限流，例如该接口可以在 1 分钟内访问 100 次</p></li><li><p>针对某一个 IP 地址的限流，例如某个 IP 地址可以在 1 分钟内访问 100 次</p></li></ul><p>针对这两种情况，我们创建一个枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LimitType &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认策略全局限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据请求者IP进行限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来创建限流注解，第一个参数限流的 key，这个仅仅是一个前缀，将来完整的 key 是这个前缀再加上接口方法的完整路径，共同组成限流 key，这个 key 将被存入到 Redis 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RateLimiter &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> "rate_limit:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流时间,单位秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">time</span><span class="params">()</span> <span class="keyword">default</span> 60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> <span class="keyword">default</span> 100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">LimitType <span class="title">limitType</span><span class="params">()</span> <span class="keyword">default</span> LimitType.DEFAULT</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将来哪个接口需要限流，就在哪个接口上添加 <code>@RateLimiter</code> 注解，然后配置相关参数即可</p><h2 id="3、配置RedisTemplate">3、配置RedisTemplate</h2><blockquote><p>默认的 RedisTemplate 有一个小坑，就是序列化用的是 <code>JdkSerializationRedisSerializer</code>，直接用这个序列化工具将来存到 Redis 上的 key 和 value 都会莫名其妙多一些前缀，这就导致你用命令读取的时候可能会出错，此时当你在命令行操作的时候，get name 却获取不到你想要的数据，原因就是存到 redis 之后 name 前面多了一些字符，此时只能继续使用 RedisTemplate 将之读取出来</p></blockquote><p>因为Redis限流用到了Lua脚本，因此需要改写我们自己的序列化方案，使用 Spring Boot 中默认的 jackson 序列化方式来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编写自己的RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        <span class="comment">// 序列化时会自动增加类类型，否则无法反序列化</span></span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash采用String序列方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、开发-Lua-脚本">4、开发 Lua 脚本</h2><p>Redis 中的一些原子操作我们可以借助 Lua 脚本来实现，想要调用 Lua 脚本，我们有两种不同的思路</p><ul><li><p>在 Redis 服务端定义好 Lua 脚本，然后计算出来一个散列值，在 Java 代码中，通过这个散列值锁定要执行哪个 Lua 脚本</p></li><li><p><strong>直接在 Java 代码中将 Lua 脚本定义好，然后发送到 Redis 服务端去执行</strong></p></li></ul><p>Spring Data Redis 中也提供了操作 Lua 脚本的接口，还是比较方便的，所以我们这里就采用第二种方案，我们在 <strong>resources 目录下</strong>新建 lua 文件夹专门用来存放 lua 脚本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- tonumber 把字符串转为数字</span></span><br><span class="line"><span class="keyword">local</span> count = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">local</span> <span class="built_in">time</span> = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="comment">-- 执行具体的 redis 指令</span></span><br><span class="line"><span class="keyword">local</span> current = redis.call(<span class="string">'get'</span>, key)</span><br><span class="line"><span class="keyword">if</span> current <span class="keyword">and</span> <span class="built_in">tonumber</span>(current) &gt; count <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tonumber</span>(current)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">current = redis.call(<span class="string">'incr'</span>, key)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">tonumber</span>(current) == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">'expire'</span>, key, <span class="built_in">time</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">tonumber</span>(current)</span><br></pre></td></tr></table></figure><p>这个lua脚本执行流程</p><ul><li><p>首先获取到传进来的 key 以及 限流的 count 和时间 time</p></li><li><p>通过 get 获取到这个 key 对应的值，这个值就是当前时间窗内这个接口可以访问多少次</p></li><li><p>如果是第一次访问，此时拿到的结果为 nil，否则拿到的结果应该是一个数字，所以接下来就判断，如果拿到的结果是一个数字，并且这个数字还大于 count，那就说明已经超过流量限制了，那么直接返回查询的结果即可</p></li><li><p>如果拿到的结果为 nil，说明是第一次访问，此时就给当前 key 自增 1，然后设置一个过期时间</p></li><li><p>最后把自增 1 后的值返回</p></li></ul><p>最后在Spring中加载这个Lua脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultRedisScript&lt;Long&gt; <span class="title">limitScript</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        redisScript.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">"lua/limit.lua"</span>)));</span><br><span class="line">        redisScript.setResultType(Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> redisScript;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、全局类与工具类">5、全局类与工具类</h2><p>由于过载的时候是抛异常出来，所以我们还需要一个全局异常处理，其他详细可以参考<a href="https://blog.csdn.net/lemon_TT/article/details/108309900" target="_blank" rel="noopener" title="Spring Boot后端接口规范">Spring Boot后端接口规范</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalException</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ServiceException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Object</span>&gt; <span class="title">serviceException</span>(<span class="title">ServiceException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"status"</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IpUtils工具类，获取Ip或者Mac</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前网络ip</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddr</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String ipAddress = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">            ipAddress = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">            ipAddress = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">            ipAddress = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">            ipAddress = request.getRemoteAddr();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"127.0.0.1"</span>.equals(ipAddress) || <span class="string">"0:0:0:0:0:0:0:1"</span>.equals(ipAddress)) &#123;</span><br><span class="line">                <span class="comment">// 根据网卡取本机配置的IP</span></span><br><span class="line">                InetAddress inet = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inet = InetAddress.getLocalHost();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                ipAddress = inet.getHostAddress();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span></span><br><span class="line">        <span class="keyword">if</span> (ipAddress != <span class="keyword">null</span> &amp;&amp; ipAddress.length() &gt; <span class="number">15</span>) &#123; <span class="comment">// "***.***.***.***".length() = 15</span></span><br><span class="line">            <span class="keyword">if</span> (ipAddress.indexOf(<span class="string">","</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ipAddress = ipAddress.substring(<span class="number">0</span>, ipAddress.indexOf(<span class="string">","</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ipAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得MAC地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMACAddress</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        String macAddress = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(<span class="string">"nbtstat -A "</span> + ip);</span><br><span class="line">            InputStreamReader ir = <span class="keyword">new</span> InputStreamReader(p.getInputStream());</span><br><span class="line">            LineNumberReader input = <span class="keyword">new</span> LineNumberReader(ir);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                str = input.readLine();</span><br><span class="line">                <span class="keyword">if</span> (str != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (str.indexOf(<span class="string">"MAC Address"</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        macAddress = str.substring(str.indexOf(<span class="string">"MAC Address"</span>) + <span class="number">14</span>, str.length());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> macAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、注解AOP解析">6、注解AOP解析</h2><p>下面的切面就是拦截所有加了 <code>@RateLimiter</code> 注解的方法，在前置通知中对注解进行处理。</p><ul><li><p>首先获取到注解中的 key、time 以及 count 三个参数</p></li><li><p>获取一个组合的 key，所谓的组合的 key，就是在注解的 key 属性基础上，再加上方法的完整路径，如果是 IP 模式的话，就再加上 IP 地址。以 IP 模式为例，最终生成的 key 类似这样：<code>rate_limit:192.168.249.1-com.example.limiting.controller.HelloController-hello</code>（如果不是 IP 模式，那么生成的 key 中就不包含 IP 地址）</p></li><li><p>将生成的 key 放到集合中</p></li><li><p>通过<code> redisTemplate.execute</code> 方法取执行一个 Lua 脚本，第一个参数是脚本所封装的对象，第二个参数是 key，对应了脚本中的 KEYS，后面是可变长度的参数，对应了脚本中的 ARGV</p></li><li><p>将 Lua 脚本执行的结果与 count 进行比较，如果大于 count，就说明过载了，抛异常就行了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(RateLimiterAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisScript&lt;Long&gt; limitScript;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"@annotation(rateLimiter)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint point, RateLimiter rateLimiter)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 获取注解参数</span></span><br><span class="line">        String key = rateLimiter.key();</span><br><span class="line">        <span class="keyword">int</span> time = rateLimiter.time();</span><br><span class="line">        <span class="keyword">int</span> count = rateLimiter.count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取redis的key</span></span><br><span class="line">        String combineKey = getCombineKey(rateLimiter, point);</span><br><span class="line">        List&lt;Object&gt; keys = Collections.singletonList(combineKey);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long number = redisTemplate.execute(limitScript, keys, count, time);</span><br><span class="line">            <span class="keyword">if</span> (number==<span class="keyword">null</span> || number.intValue() &gt; count) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">"访问过于频繁，请稍候再试"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"限制请求'&#123;&#125;',当前请求'&#123;&#125;',缓存key'&#123;&#125;'"</span>, count, number.intValue(), combineKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务器限流异常，请稍候再试"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCombineKey</span><span class="params">(RateLimiter rateLimiter, JoinPoint point)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(rateLimiter.key());</span><br><span class="line">        <span class="keyword">if</span> (rateLimiter.limitType() == LimitType.IP) &#123;</span><br><span class="line">            <span class="comment">// 这个方法可以获取到当前线程的request和response</span></span><br><span class="line">            stringBuffer.append(IpUtils.getIpAddr(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest())).append(<span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        Class&lt;?&gt; targetClass = method.getDeclaringClass();</span><br><span class="line">        stringBuffer.append(targetClass.getName()).append(<span class="string">"-"</span>).append(method.getName());</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、接口测试">7、接口测试</h2><p>进行简单的测试，下面每一个 IP 地址，在 5 秒内只能访问 3 次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@RateLimiter</span>(time = <span class="number">5</span>,count = <span class="number">3</span>,limitType = LimitType.IP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello&gt;&gt;&gt;"</span>+<span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、Redis分布式锁</h1><h2 id="1、简介">1、简介</h2><blockquote><p><strong>分布式锁其实就是，控制分布式系统不同进程共同访问共享资源的一种锁的实现</strong>。如果不同的系统或同一个系统的不同主机之间共享了某个临界资源，往往需要互斥来防止彼此干扰，以保证一致性。</p></blockquote><p>分布式锁一般都使用Redis来实现，大概有以下几种方案，可以参考<a href="https://blog.csdn.net/weixin_38568503/article/details/124430481" target="_blank" rel="noopener" title="redis分布式锁">redis分布式锁</a></p><ul><li><p>SETNX + EXPIRE  </p></li><li><p>SETNX + value值是（系统时间+过期时间）  </p></li><li><p>使用Lua脚本(包含SETNX + EXPIRE两条指令)  </p></li><li><p>SET的扩展命令（SET EX PX NX）  </p></li><li><p>SET EX PX NX + 校验唯一随机值，再释放锁   (推荐)</p></li><li><p>开源框架Redisson (推荐)</p></li><li><p>多机实现的分布式锁Redlock (推荐)</p></li></ul><h2 id="2、AOP分布式锁原理">2、AOP分布式锁原理</h2><h3 id="2-1-实现流程">2.1 实现流程</h3><ul><li><p>新建注解 @interface，在注解里设定入参标志</p></li><li><p>增加 AOP 切点，扫描特定注解</p></li><li><p>建立 <code>@Aspect</code> 切面任务，注册 bean 和拦截特定方法</p></li><li><p>特定方法参数 ProceedingJoinPoint，对方法 <code>pjp.proceed()</code> 前后进行拦截</p></li><li><p>切点前进行加锁，任务执行后进行删除 key</p></li></ul><p><img src="https://img-blog.csdnimg.cn/b695cb94cd9f4b589fe02d2672881f99.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-2-核心步骤">2.2 核心步骤</h3><ul><li><strong>加锁</strong></li></ul><p>使用了 <code>StringRedisTemplate </code>的 <code>opsForValue.setIfAbsent</code> 方法，判断是否有 key，设定一个随机数 <code>UUID.random().toString</code>，生成一个随机数作为 value。从 redis 中获取锁之后，对 key 设定 expire 失效时间，到期后自动释放锁。按照这种设计，只有第一个成功设定 <code>Key</code> 的请求，才能进行后续的数据操作，后续其它请求由于无法获得🔐资源，将会失败结束。</p><ul><li><strong>超时问题</strong></li></ul><p>担心 <code>pjp.proceed()</code> 切点执行的方法太耗时，导致 <code>Redis</code> 中的 <code>key</code> 由于超时提前释放了。例如，线程 A 先获取锁，proceed 方法耗时，超过了锁超时时间，到期释放了锁，这时另一个线程 B 成功获取 <code>Redis</code> 锁，两个线程同时对同一批数据进行操作，导致数据不准确。</p><ul><li><strong>锁续时操作(任务不完成，锁不释放)</strong></li></ul><p>维护了一个定时线程池 <code>ScheduledExecutorService</code>，每隔 2s 去扫描加入队列中的 Task，判断是否失效时间是否快到了，公式为：【失效时间】&lt;= 【当前时间】+【失效间隔（三分之一超时）】</p><h2 id="3、AOP分布式锁实战">3、AOP分布式锁实战</h2><h3 id="3-1-业务属性枚举设定">3.1 业务属性枚举设定</h3><p>环境与Redis限流一样，首先创建注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RedisLockTypeEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义 key 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ONE(<span class="string">"Business1"</span>, <span class="string">"Test1"</span>),</span><br><span class="line"></span><br><span class="line">    TWO(<span class="string">"Business2"</span>, <span class="string">"Test2"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">    RedisLockTypeEnum(String code, String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUniqueKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s:%s"</span>, <span class="keyword">this</span>.getCode(), key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-任务队列保存参数">3.2 任务队列保存参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockDefinitionHolder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务唯一 key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String businessKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁时间 (秒 s)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long lockTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次更新时间（ms）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long lastModifyTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存当前线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Thread currentTread;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总共尝试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tryCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前尝试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新的时间周期（毫秒）,公式 = 加锁时间（转成毫秒） / 3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long modifyPeriod;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLockDefinitionHolder</span><span class="params">(String businessKey, Long lockTime, Long lastModifyTime, Thread currentTread, <span class="keyword">int</span> tryCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.businessKey = businessKey;</span><br><span class="line">        <span class="keyword">this</span>.lockTime = lockTime;</span><br><span class="line">        <span class="keyword">this</span>.lastModifyTime = lastModifyTime;</span><br><span class="line">        <span class="keyword">this</span>.currentTread = currentTread;</span><br><span class="line">        <span class="keyword">this</span>.tryCount = tryCount;</span><br><span class="line">        <span class="keyword">this</span>.modifyPeriod = lockTime * <span class="number">1000</span> / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-拦截的注解名声明">3.3 拦截的注解名声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisLockAnnotation &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 特定参数识别，默认取第 0 个下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lockFiled</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时重试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tryCount</span><span class="params">()</span> <span class="keyword">default</span> 3</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义加锁类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RedisLockTypeEnum <span class="title">typeEnum</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放时间，秒 s 单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">lockTime</span><span class="params">()</span> <span class="keyword">default</span> 30</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-核心切面拦截">3.4 核心切面拦截</h3><ul><li><p>解析注解参数，获取注解值和方法上的参数值</p></li><li><p>redis 加锁并且设置超时时间</p></li><li><p>将本次 Task 信息加入「延时」队列中，进行续时，方式提前释放锁</p></li><li><p>加了一个线程中断标志</p></li><li><p>结束请求，finally 中释放锁</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@annotation</span> 中的路径表示拦截特定注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.redislock.anno.RedisLockAnnotation)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redisLockPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"redisLockPC()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Method method = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 解析参数</span></span><br><span class="line">        <span class="comment">//判断注解是否method 上</span></span><br><span class="line">        <span class="keyword">if</span> (pjp.getSignature() <span class="keyword">instanceof</span> MethodSignature) &#123;</span><br><span class="line">            MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">            method = signature.getMethod();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RedisLockAnnotation annotation = method.getAnnotation(RedisLockAnnotation<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        RedisLockTypeEnum typeEnum = annotation.typeEnum();</span><br><span class="line">        Object[] params = pjp.getArgs();</span><br><span class="line">        String ukString = params[annotation.lockFiled()].toString();</span><br><span class="line">        <span class="comment">// 省略很多参数校验和判空</span></span><br><span class="line">        String businessKey = typeEnum.getUniqueKey(ukString);</span><br><span class="line">        String uniqueValue = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isSuccess = Boolean.TRUE.equals(redisTemplate.opsForValue().setIfAbsent(businessKey, uniqueValue));</span><br><span class="line">            <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"You can't do it，because another has get the lock =-="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"get the lock, businessKey is ["</span> + businessKey + <span class="string">"]"</span>);</span><br><span class="line">            redisTemplate.expire(businessKey, annotation.lockTime(), TimeUnit.SECONDS);</span><br><span class="line">            Thread currentThread = Thread.currentThread();</span><br><span class="line">            <span class="comment">// 将本次 Task 信息加入「延时」队列中</span></span><br><span class="line">            ScheduledExecutorService.holderList.add(<span class="keyword">new</span> RedisLockDefinitionHolder(businessKey, annotation.lockTime(), System.currentTimeMillis(),</span><br><span class="line">                    currentThread, annotation.tryCount()));</span><br><span class="line">            <span class="comment">// 执行业务操作</span></span><br><span class="line">            result = pjp.proceed();</span><br><span class="line">            <span class="comment">// 线程被中断，抛出异常，中断此次请求</span></span><br><span class="line">            <span class="keyword">if</span> (currentThread.isInterrupted()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException(<span class="string">"You had been interrupted =-="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e ) &#123;</span><br><span class="line">            log.error(<span class="string">"Interrupt exception, rollback transaction"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Interrupt exception, please send request again"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"has some error, please check again"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 请求结束后，强制删掉 key，释放锁</span></span><br><span class="line">            redisTemplate.delete(businessKey);</span><br><span class="line">            log.info(<span class="string">"release the lock, businessKey is ["</span> + businessKey + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-续时操作">3.5 续时操作</h3><p>这里加了「线程中断」<code>Thread#interrupt</code>，希望超过重试次数后，能让线程中断（仅供参考）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledExecutorService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扫描的任务队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentLinkedQueue&lt;RedisLockDefinitionHolder&gt; holderList = <span class="keyword">new</span> ConcurrentLinkedQueue();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池，维护keyAliveTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledThreadPoolExecutor SCHEDULER = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>,</span><br><span class="line">            <span class="keyword">new</span> BasicThreadFactory.Builder().namingPattern(<span class="string">"redisLock-schedule-pool"</span>).daemon(<span class="keyword">true</span>).build());</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 两秒执行一次「续时」操作</span></span><br><span class="line">        SCHEDULER.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 这里记得加 try-catch，否者报错后定时任务将不会再执行=-=</span></span><br><span class="line">            Iterator&lt;RedisLockDefinitionHolder&gt; iterator = holderList.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                RedisLockDefinitionHolder holder = iterator.next();</span><br><span class="line">                <span class="comment">// 判空</span></span><br><span class="line">                <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断 key 是否还有效，无效的话进行移除</span></span><br><span class="line">                <span class="keyword">if</span> (redisTemplate.opsForValue().get(holder.getBusinessKey()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 超时重试次数，超过时给线程设定中断</span></span><br><span class="line">                <span class="keyword">if</span> (holder.getCurrentCount() &gt; holder.getTryCount()) &#123;</span><br><span class="line">                    holder.getCurrentTread().interrupt();</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断是否进入最后三分之一时间</span></span><br><span class="line">                <span class="keyword">long</span> curTime = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">boolean</span> shouldExtend = (holder.getLastModifyTime() + holder.getModifyPeriod()) &lt;= curTime;</span><br><span class="line">                <span class="keyword">if</span> (shouldExtend) &#123;</span><br><span class="line">                    log.info(<span class="string">"超时增加"</span>);</span><br><span class="line">                    holder.setLastModifyTime(curTime);</span><br><span class="line">                    redisTemplate.expire(holder.getBusinessKey(), holder.getLockTime(), TimeUnit.SECONDS);</span><br><span class="line">                    log.info(<span class="string">"businessKey : ["</span> + holder.getBusinessKey() + <span class="string">"], try count : "</span> + holder.getCurrentCount());</span><br><span class="line">                    holder.setCurrentCount(holder.getCurrentCount() + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-测试">3.6 测试</h3><p>在一个入口方法中，使用该注解，然后在业务中模拟耗时请求，使用了 <code>Thread#sleep</code>。使用时，在方法上添加该注解，然后设定相应参数即可，根据 <code>typeEnum</code> 可以区分多种业务，限制该业务被同时操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@RedisLockAnnotation</span>(typeEnum = RedisLockTypeEnum.ONE, lockTime = <span class="number">3</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRedisLock</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> Long userId) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"睡眠执行前"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">            log.info(<span class="string">"睡眠执行后"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// log error</span></span><br><span class="line">            log.info(<span class="string">"has some error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、Redission分布式锁-AOP实现">4、Redission分布式锁(AOP实现)</h2><blockquote><p>Redission地址：<a href="https://github.com/redisson/redisson" target="_blank" rel="noopener" title="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p></blockquote><p>首先需要引入相关依赖，这里需要额外引入redission依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在applicatiion.properties创建参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host&#x3D;localhost</span><br><span class="line">spring.redis.port&#x3D;6379</span><br><span class="line"># spring.redis.password&#x3D;123</span><br><span class="line">spring.redis.database&#x3D;0</span><br><span class="line">spring.redis.timeout&#x3D;5000ms</span><br><span class="line">#redisson客户端连接超时时间(ms)</span><br><span class="line">redisson.timeout&#x3D;10000</span><br></pre></td></tr></table></figure><h3 id="4-1-注解创建">4.1 注解创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisDistributedLock &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要锁哪几个位置的参数，默认不锁参数</span></span><br><span class="line"><span class="comment">     * (如果锁参数, 需要指定参数的索引比如锁第一个参数和第二个参数则传&#123;0, 1&#125;</span></span><br><span class="line"><span class="comment">     * 锁参数之后, 锁的key就会拼接此参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span>[] lockIndex() <span class="keyword">default</span> &#123;-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认包名加方法名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间 单位：毫秒</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     过期时间一定是要长于业务的执行时间.</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">expire</span><span class="params">()</span> <span class="keyword">default</span> 30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁超时时间 单位：毫秒</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     结合业务,建议该时间不宜设置过长,特别在并发高的情况下.</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> 3000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间类型，默认毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TimeUnit <span class="title">timeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-创建切面增强">4.2 创建切面增强</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.redislock.anno.RedisDistributedLock)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"myAdvice()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 获取注解</span></span><br><span class="line">        MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        RedisDistributedLock annotation = signature.getMethod().getAnnotation(RedisDistributedLock<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成key</span></span><br><span class="line">        StringBuilder keyBuilder = <span class="keyword">new</span> StringBuilder(getKey(proceedingJoinPoint, annotation));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果锁参数, 需要将参数拼接到key上</span></span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        <span class="keyword">int</span>[] lockIndex = annotation.lockIndex();</span><br><span class="line">        <span class="keyword">if</span> (lockIndex.length &gt; <span class="number">0</span> &amp;&amp; lockIndex[<span class="number">0</span>] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index : lockIndex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= args.length || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数索引lockIndex: "</span> + index + <span class="string">" 异常"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                keyBuilder.append(<span class="string">"."</span>).append(args[index].toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止key值太长，用根据其生成的hash值做key</span></span><br><span class="line">        <span class="comment">// String lockKey = DigestUtils.md5DigestAsHex(keyBuilder.toString().getBytes());</span></span><br><span class="line">        String key = keyBuilder.toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Boolean success = <span class="keyword">null</span>;</span><br><span class="line">        RLock lock = redissonClient.getLock(key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//lock提供带timeout参数，timeout结束强制解锁，防止死锁</span></span><br><span class="line">            success = lock.tryLock(annotation.timeout(), annotation.expire(), annotation.timeUnit());</span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                log.info(Thread.currentThread().getName() + <span class="string">" 加锁成功"</span>);</span><br><span class="line">                <span class="comment">// 放行方法执行</span></span><br><span class="line">                <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(Thread.currentThread().getName() + <span class="string">" 加锁失败"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"操作频繁, 稍后重试"</span>); <span class="comment">// 此处可以用return 返回错误 需要跟切的方法的返回值保持一致</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(success)) &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">                log.info(Thread.currentThread().getName() + <span class="string">" 解锁成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getKey</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint, RedisDistributedLock annotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(annotation.key())) &#123;</span><br><span class="line">            <span class="keyword">return</span> annotation.key();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceedingJoinPoint.getSignature().getDeclaringTypeName() + <span class="string">"."</span> + proceedingJoinPoint.getSignature()</span><br><span class="line">                .getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-测试">4.3 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动加锁模拟 设置锁的时间为300秒 5分钟, 在5分钟之内若方法没有执行完成则自动解锁, 获取锁的等待时间为2秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@RedisDistributedLock</span>(timeUnit = TimeUnit.SECONDS, expire = <span class="number">300</span>, timeout = <span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"id = ["</span> + id + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-Redission其他">4.4 Redission其他</h3><p>Redission还有以下几种锁以及集群操作，详情可以参考：<a href="https://blog.csdn.net/qq_1757537040/article/details/122782123" target="_blank" rel="noopener" title="springboot整合redission分布式锁的实现方式含集群解决方案（技术篇）">springboot整合redission分布式锁的实现方式含集群解决方案（技术篇）</a></p><ul><li><p>可重入锁（Reentrant Lock）</p></li><li><p>公平锁（Fair Lock）</p></li><li><p>读写锁（ReadWriteLock）</p></li><li><p>信号量（Semaphore）</p></li><li><p>闭锁（CountDownLatch）</p></li></ul><h1>四、Redis接口幂等</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p>幂等性，就是只多次操作的结果是一致的</p></blockquote><p><strong>产生的问题</strong></p><ul><li><p>前端重复提交。比如这个业务处理需要2秒钟，我在2秒之内，提交按钮连续点了3次，如果非幂等性接口，那么后端就会处理3次。如果是查询，自然是没有影响的，因为查询本身就是幂等操作，但如果是新增，本来只是新增1条记录的，连点3次，就增加了3条，这显然不行。</p></li><li><p>响应超时而导致请求重试：在微服务相互调用的过程中，假如订单服务调用支付服务，支付服务支付成功了，但是订单服务接收支付服务返回的信息时超时了，于是订单服务进行重试，又去请求支付服务，结果支付服务又扣了一遍用户的钱。</p></li></ul><p><strong>解决方案</strong></p><ul><li><p>数据库记录状态机制：即每次操作前先查询状态，根据数据库记录的状态来判断是否要继续执行操作。比如订单服务调用支付服务，每次调用之前，先查询该笔订单的支付状态，从而避免重复操作。</p></li><li><p>token机制：请求业务接口之前，先请求token接口（会将生成的token放入redis中）获取一个token，然后请求业务接口时，带上token。在进行业务操作之前，我们先获取请求中携带的token，看看在redis中是否有该token，有的话，就删除，删除成功说明token校验通过，并且继续执行业务操作；如果redis中没有该token，说明已经被删除了，也就是已经执行过业务操作了，就不让其再进行业务操作。大致流程如下：</p></li></ul><p><img src="https://img-blog.csdnimg.cn/30757728bc9844d8bf4271d625caf91d.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、防重-Token-令牌流程">2、防重 Token 令牌流程</h2><ul><li><p>服务端提供获取 Token 的接口，该 Token 可以是一个序列号，也可以是一个分布式 ID 或者 UUID 串</p></li><li><p>客户端调用接口获取 Token，这时候服务端会生成一个 Token 串</p></li><li><p>然后将该串存入 Redis 数据库中，以该 Token 作为 Redis 的键（注意设置过期时间）</p></li><li><p>将 Token 返回到客户端，客户端拿到后应存到表单隐藏域中</p></li><li><p>客户端在执行提交表单时，把 Token 存入到 Headers 中，执行业务请求带上该 Headers</p></li><li><p>服务端接收到请求后从 Headers 中拿到 Token，然后根据 Token 到 Redis 中查找该 key 是否存在</p></li><li><p>服务端根据 Redis 中是否存该 key 进行判断，如果存在就将该 key 删除，然后正常执行业务逻辑。如果不存在就抛异常，返回重复提交的错误信息</p></li></ul><h2 id="3、放重Token实战">3、放重Token实战</h2><h3 id="3-1-注解创建">3.1 注解创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)  <span class="comment">//使用于方法</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ApiIdempotent &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-配置返回渲染">3.2 配置返回渲染</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletUtils</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderString</span><span class="params">(HttpServletResponse response, String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-放重Token生成与验证">3.3 放重Token生成与验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenUtilService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入 Redis 的 Token 键的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IDEMPOTENT_TOKEN_PREFIX = <span class="string">"idempotent_token:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 Token 存入 Redis，并返回该 Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 用于辅助验证的 value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的 Token 串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化生成 ID 工具对象</span></span><br><span class="line">        String token = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 设置存入 Redis 的 Key</span></span><br><span class="line">        String key = IDEMPOTENT_TOKEN_PREFIX + token;</span><br><span class="line">        <span class="comment">// 存储 Token 到 Redis，且设置过期时间为5分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(key, value, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 返回 Token</span></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 Token 正确性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value 存储在Redis中的辅助验证信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验证结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validToken</span><span class="params">(String token, String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置 Lua 脚本，其中 KEYS[1] 是 key，KEYS[2] 是 value</span></span><br><span class="line">        String script = <span class="string">"if redis.call('get', KEYS[1]) == KEYS[2] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 根据 Key 前缀拼接 Key</span></span><br><span class="line">        String key = IDEMPOTENT_TOKEN_PREFIX + token;</span><br><span class="line">        <span class="comment">// 执行 Lua 脚本</span></span><br><span class="line">        Long result = redisTemplate.execute(redisScript, Arrays.asList(key, value));</span><br><span class="line">        <span class="comment">// 根据返回结果判断是否成功成功匹配并删除 Redis 键值对，若果结果不为空和0，则验证通过</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result != <span class="number">0L</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"验证 token=&#123;&#125;,key=&#123;&#125;,value=&#123;&#125; 成功"</span>, token, key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"验证 token=&#123;&#125;,key=&#123;&#125;,value=&#123;&#125; 失败"</span>, token, key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、配置拦截器">3.4、配置拦截器</h3><p>首先创建自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiIdempotentInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtilService tokenUtilService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//校验是否有执行方法</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//若没有对应的方法执行器，就直接放行</span></span><br><span class="line">        &#125;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        Method method = handlerMethod.getMethod();</span><br><span class="line">        ApiIdempotent annotation = method.getAnnotation(ApiIdempotent<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//若是没有幂等性注解直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//解析对应的请求头</span></span><br><span class="line">            String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">            <span class="keyword">if</span> (ObjectUtils.isEmpty(token)) &#123;</span><br><span class="line">                ServletUtils.renderString(response, <span class="string">"请携带token令牌"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若是校验失败直接进行响应</span></span><br><span class="line">            <span class="keyword">if</span> (!tokenUtilService.validToken(token, <span class="string">"shawn"</span>)) &#123;</span><br><span class="line">                ServletUtils.renderString(response, <span class="string">"重复提交失败！"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置spring拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApiIdempotentInterceptor apiIdempotentInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(apiIdempotentInterceptor);</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    http请求时编码</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpMessageConverter&lt;String&gt; <span class="title">responseBodyConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringHttpMessageConverter converter = <span class="keyword">new</span> StringHttpMessageConverter(</span><br><span class="line">                StandardCharsets.UTF_8);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统配置参数编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line">        converters.add(responseBodyConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-测试">3.5 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Token 接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Token 串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/token"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取用户信息（这里使用模拟数据）</span></span><br><span class="line">        <span class="comment">// 注：这里存储该内容只是举例，其作用为辅助验证，使其验证逻辑更安全，如这里存储用户信息，其目的为:</span></span><br><span class="line">        <span class="comment">// - 1)、使用"token"验证 Redis 中是否存在对应的 Key</span></span><br><span class="line">        <span class="comment">// - 2)、使用"用户信息"验证 Redis 的 Value 是否匹配。</span></span><br><span class="line">        String userInfo = <span class="string">"changlu"</span>;</span><br><span class="line">        <span class="comment">// 获取 Token 字符串，并返回</span></span><br><span class="line">        <span class="keyword">return</span> tokenService.generateToken(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口幂等性测试接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 幂等 Token 串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testToken"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test1</span><span class="params">(@RequestHeader(value = <span class="string">"token"</span>)</span> String token) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取用户信息（这里使用模拟数据）</span></span><br><span class="line">        String userInfo = <span class="string">"shawn"</span>;</span><br><span class="line">        <span class="comment">// 根据 Token 和与用户相关的信息到 Redis 验证是否存在对应的信息</span></span><br><span class="line">        <span class="keyword">boolean</span> result = tokenService.validToken(token, userInfo);</span><br><span class="line">        <span class="comment">// 根据验证结果响应不同信息</span></span><br><span class="line">        <span class="keyword">return</span> result ? <span class="string">"正常调用"</span> : <span class="string">"重复调用"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口式的放重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiIdempotent</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testToken2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sucess"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://mp.weixin.qq.com/s/hp66aCiT2FDriau72paqOQ" target="_blank" rel="noopener" title="SpringBoot + 一个注解，轻松实现 Redis 分布式锁">SpringBoot + 一个注解，轻松实现 Redis 分布式锁</a></p><p><a href="https://blog.csdn.net/qq_1757537040/article/details/122782123" target="_blank" rel="noopener" title="springboot整合redission分布式锁的实现方式含集群解决方案（技术篇）">springboot整合redission分布式锁的实现方式含集群解决方案（技术篇）</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、概述&lt;/h1&gt;
&lt;h2 id=&quot;1、Redis概述&quot;&gt;1、Redis概述&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis参考文章：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/117711682&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Redis6.0学习笔记&quot;&gt;Redis6.0学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis 除了做缓存，还能干很多很多事情：&lt;strong&gt;分布式锁、限流、处理请求接口幂等性&lt;/strong&gt;，本篇文章重点讲述SpringBoot通过注解和AOP的方式实现Redis的接口限流，Redis使用了Lua脚本实现原子操作；通过redis实现的分布式锁以及处理接口幂等等方案&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>常见Shell编程脚本</title>
    <link href="https://www.shawn22.xyz/posts/4c942ca3.html"/>
    <id>https://www.shawn22.xyz/posts/4c942ca3.html</id>
    <published>2022-09-28T09:34:40.000Z</published>
    <updated>2022-09-28T09:48:19.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Linux运维监控相关">一、Linux运维监控相关</h2><h3 id="1、创建-Linux-系统账户及密码">1、创建 Linux 系统账户及密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 通过位置变量创建 Linux 系统账户及密码</span></span><br><span class="line"><span class="comment">#$1 是执行脚本的第一个参数,$2 是执行脚本的第二个参数</span></span><br><span class="line">useradd    <span class="string">"<span class="variable">$1</span>"</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$2</span>"</span>  |  passwd  ‐‐stdin  <span class="string">"<span class="variable">$1</span>"</span></span><br></pre></td></tr></table></figure><p>提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户不输入账户名,则提示必须输入账户名并退出脚本;如果用户不输入密码,则统一使用默认的 123456 作为默认密码</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本:提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户</span></span><br><span class="line"><span class="comment"># 不输入账户名,则提示必须输入账户名并退出脚本;如果用户不输入密码,则统一使用默</span></span><br><span class="line"><span class="comment"># 认的 123456 作为默认密码。</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入新建用户名："</span> name</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$name</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"必须输入新建的账户名"</span></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">sudo useradd <span class="variable">$name</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"user <span class="variable">$&#123;name&#125;</span> is created successfully!!!"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"user <span class="variable">$&#123;name&#125;</span> is created failly!!!"</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">stty -<span class="built_in">echo</span>   <span class="comment">#关闭shell的回显功能，即输入密码时不显示在屏幕上</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"passwd："</span> pass</span><br><span class="line">stty <span class="built_in">echo</span>    <span class="comment">#打开shell的回显功能</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$pass</span> ];<span class="keyword">then</span></span><br><span class="line">  pass=<span class="variable">$&#123;pass:-123456&#125;</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span> | sudo passwd <span class="variable">$name</span> --stdin  &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;name&#125;</span>'s password is set successfully"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;name&#125;</span>'s password is set failly!!!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>使用 user.txt 文件中的人员名单,在计算机中自动创建对应的账户并配置初始密码本脚本执行,需要提前准备一个 user.txt 文件,该文件中包含有若干用户名信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 user.txt 文件中的人员名单,在计算机中自动创建对应的账户并配置初始密码</span></span><br><span class="line"><span class="comment"># 本脚本执行,需要提前准备一个 user.txt 文件,该文件中包含有若干用户名信息</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat user.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     useradd  <span class="variable">$i</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"123456"</span> | passwd ‐‐stdin <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="2、备份日志">2、备份日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 每周5凌晨三点 使用 tar 命令备份/var/log 下的所有日志文件</span></span><br><span class="line"><span class="comment"># vim  /root/logbak.sh</span></span><br><span class="line"><span class="comment"># 编写备份脚本,备份后的文件名包含日期标签,防止后面的备份将前面的备份数据覆盖</span></span><br><span class="line"><span class="comment"># 注意 date 命令需要使用反引号括起来,反引号在键盘&lt;tab&gt;键上面</span></span><br><span class="line">tar  -czf  <span class="built_in">log</span>-`date +%Y%m%d`.tar.gz  /var/<span class="built_in">log</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># crontab ‐e  #编写计划任务,执行备份脚本</span></span><br><span class="line">00  03  *  *  5  /root/logbak.sh</span><br></pre></td></tr></table></figure><h3 id="3、测试-192-168-4-0-24-整个网段中哪些主机处于开机状态-哪些主机处于关机状态">3、测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机</span></span><br><span class="line"><span class="comment"># 状态(for 版本)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 每隔0.3秒ping一次，一共ping2次，并以1毫秒为单位设置ping的超时时间</span></span><br><span class="line">     ping -c2 -i0.3 -W1 192.168.4.<span class="variable">$i</span>  &amp;&gt;/dev/null</span><br><span class="line">    <span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"192.168.4.<span class="variable">$i</span> is up"</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">echo</span>  <span class="string">"192.168.4.<span class="variable">$i</span> is down"</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#============================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机</span></span><br><span class="line"><span class="comment"># 状态(while 版本) </span></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 254 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     ping -c2 -i0.3 -W1 192.168.4.<span class="variable">$i</span>  &amp;&gt;/dev/null</span><br><span class="line">     <span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"192.168.4.<span class="variable">$i</span> is up"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">echo</span>  <span class="string">"192.168.4.<span class="variable">$i</span> is down"</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">     <span class="built_in">let</span> i++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机</span></span><br><span class="line"><span class="comment"># 状态(多进程版)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义一个函数,ping 某一台主机,并检测主机的存活状态</span></span><br><span class="line"><span class="function"><span class="title">myping</span></span>()&#123;</span><br><span class="line">ping -c2 -i0.3 -W1 192.168.4.<span class="variable">$1</span>  &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> is up"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> is down"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     myping 192.168.4.<span class="variable">$i</span> &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 使用&amp;符号,将执行的函数放入后台执行</span></span><br><span class="line"><span class="comment"># 这样做的好处是不需要等待ping第一台主机的回应,就可以继续并发ping第二台主机,依次类推。</span></span><br></pre></td></tr></table></figure><h3 id="4、进度条">4、进度条</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本,显示进度条</span></span><br><span class="line"><span class="function"><span class="title">jindu</span></span>()&#123;</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     <span class="built_in">echo</span> -n <span class="string">'#'</span></span><br><span class="line">     sleep 0.2</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">jindu &amp;</span><br><span class="line">cp -a <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line">killall <span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"拷贝完成"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================动态时针版本；定义一个显示进度的函数,屏幕快速显示|  / ‐ \</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 进度条,动态时针版本</span></span><br><span class="line"><span class="comment"># 定义一个显示进度的函数,屏幕快速显示|  / ‐ \</span></span><br><span class="line"><span class="function"><span class="title">rotate_line</span></span>()&#123;</span><br><span class="line">INTERVAL=0.5  <span class="comment">#设置间隔时间</span></span><br><span class="line">COUNT=<span class="string">"0"</span>     <span class="comment">#设置4个形状的编号,默认编号为 0(不代表任何图像)</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  COUNT=`expr <span class="variable">$COUNT</span> + 1` <span class="comment">#执行循环,COUNT 每次循环加 1,(分别代表4种不同的形状)</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$COUNT</span> <span class="keyword">in</span>          <span class="comment">#判断 COUNT 的值,值不一样显示的形状就不一样</span></span><br><span class="line">  <span class="string">"1"</span>)                    <span class="comment">#值为 1 显示‐</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">'‐'</span><span class="string">"\b\c"</span></span><br><span class="line">          sleep <span class="variable">$INTERVAL</span></span><br><span class="line">          ;;</span><br><span class="line">    <span class="string">"2"</span>)                  <span class="comment">#值为 2 显示\\,第一个\是转义</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">'\\'</span><span class="string">"\b\c"</span></span><br><span class="line">          sleep <span class="variable">$INTERVAL</span></span><br><span class="line">          ;;</span><br><span class="line">    <span class="string">"3"</span>)                  <span class="comment">#值为 3 显示|</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">"|\b\c"</span></span><br><span class="line">          sleep <span class="variable">$INTERVAL</span></span><br><span class="line">          ;;</span><br><span class="line">   <span class="string">"4"</span>)                   <span class="comment">#值为 4 显示/</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">"/\b\c"</span></span><br><span class="line">          sleep <span class="variable">$INTERVAL</span></span><br><span class="line">          ;;</span><br><span class="line">    *)                    <span class="comment">#值为其他时,将 COUNT 重置为 0</span></span><br><span class="line">          COUNT=<span class="string">"0"</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">rotate_line</span><br><span class="line"></span><br><span class="line"><span class="comment">#====================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 显示进度条(回旋镖版)</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     clear</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..20&#125;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">         <span class="built_in">echo</span> -e <span class="string">"\033[3;<span class="variable">$&#123;i&#125;</span>H*"</span></span><br><span class="line">         sleep 0.1</span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">     clear</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> &#123;20..1&#125;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">         <span class="built_in">echo</span> -e <span class="string">"\033[3;<span class="variable">$&#123;i&#125;</span>H*"</span></span><br><span class="line">         sleep 0.1</span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">     clear</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================================\</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示进度条(数字版) </span></span><br><span class="line"><span class="comment"># echo 使用‐e 选项后,在打印参数中可以指定 H,设置需要打印内容的 x,y 轴的定位坐标</span></span><br><span class="line"><span class="comment"># 设置需要打印内容在第几行,第几列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[6;8H["</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[6;9H<span class="variable">$i</span>%"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[6;13H]"</span></span><br><span class="line">    sleep 0.1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="5、批量修改扩展名脚本">5、批量修改扩展名脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写批量修改扩展名脚本,如批量将 txt 文件修改为 doc 文件 </span></span><br><span class="line"><span class="comment"># 执行脚本时,需要给脚本添加位置参数</span></span><br><span class="line"><span class="comment"># 脚本名  txt  doc(可以将 txt 的扩展名修改为 doc)</span></span><br><span class="line"><span class="comment"># 脚本名  doc  jpg(可以将 doc 的扩展名修改为 jpg)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls *.<span class="variable">$1</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     mv <span class="variable">$i</span> <span class="variable">$&#123;i%.*&#125;</span>.<span class="variable">$2</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="6、使用-expect-工具自动交互密码远程其他主机安装-httpd-软件">6、使用 expect 工具自动交互密码远程其他主机安装 httpd 软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 expect 工具自动交互密码远程其他主机安装 httpd 软件 </span></span><br><span class="line"><span class="comment"># 删除~/.ssh/known_hosts 后,ssh 远程任何主机都会询问是否确认要连接该主机</span></span><br><span class="line">rm  ‐rf  ~/.ssh/known_hosts</span><br><span class="line">expect &lt;&lt;EOF</span><br><span class="line">spawn ssh 192.168.4.254</span><br><span class="line">expect <span class="string">"yes/no"</span> &#123;send <span class="string">"yes\r"</span>&#125;</span><br><span class="line"><span class="comment"># 根据自己的实际情况将密码修改为真实的密码字串</span></span><br><span class="line">expect <span class="string">"password"</span> &#123;send  <span class="string">"密码\r"</span>&#125;</span><br><span class="line">expect <span class="string">"#"</span> &#123;send  <span class="string">"yum ‐y install httpd\r"</span>&#125;</span><br><span class="line">expect <span class="string">"#"</span> &#123;send  <span class="string">"exit\r"</span>&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="7、一键部署LNMP">7、一键部署LNMP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 一键部署 LNMP(RPM 包版本)</span></span><br><span class="line"><span class="comment"># 使用 yum 安装部署 LNMP,需要提前配置好 yum 源,否则该脚本会失败</span></span><br><span class="line"><span class="comment"># 本脚本使用于 centos7.2 或 RHEL7.2</span></span><br><span class="line">yum ‐y install httpd</span><br><span class="line">yum ‐y install mariadb mariadb‐devel mariadb‐server</span><br><span class="line">yum ‐y install php  php‐mysql</span><br><span class="line"> </span><br><span class="line">systemctl start httpd mariadb</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment">#==========================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 一键部署 LNMP(源码安装版本)</span></span><br><span class="line">menu()</span><br><span class="line">&#123;</span><br><span class="line">clear</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"  ##############‐‐‐‐Menu‐‐‐‐##############"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# 1. Install Nginx"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# 2. Install MySQL"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# 3. Install PHP"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# 4. Exit Program"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"  ########################################"</span></span><br><span class="line">&#125;</span><br><span class="line">choice()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"Please choice a menu[1‐9]:"</span> select</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">install_nginx()</span><br><span class="line">&#123;</span><br><span class="line">  id nginx &amp;&gt;/dev/null</span><br><span class="line">  <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    useradd -s /sbin/nologin nginx</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -f nginx‐1.8.0.tar.gz ];<span class="keyword">then</span></span><br><span class="line">    tar -xf nginx‐1.8.0.tar.gz</span><br><span class="line">    <span class="built_in">cd</span> nginx‐1.8.0</span><br><span class="line">    yum -y install  gcc pcre‐devel openssl‐devel zlib‐devel make</span><br><span class="line">    ./configure ‐‐prefix=/usr/<span class="built_in">local</span>/nginx ‐‐with‐http_ssl_module</span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    ln -s /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/sbin/</span><br><span class="line">    <span class="built_in">cd</span> ..</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"没有 Nginx 源码包"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">install_mysql()</span><br><span class="line">&#123;</span><br><span class="line">  yum -y install gcc gcc‐c++ cmake ncurses‐devel perl</span><br><span class="line">  id mysql &amp;&gt;/dev/null</span><br><span class="line">  <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    useradd -s /sbin/nologin mysql</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -f mysql‐5.6.25.tar.gz ];<span class="keyword">then</span></span><br><span class="line">    tar -xf mysql‐5.6.25.tar.gz</span><br><span class="line">    <span class="built_in">cd</span> mysql‐5.6.25</span><br><span class="line">    cmake .</span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    /usr/<span class="built_in">local</span>/mysql/scripts/mysql_install_db ‐‐user=mysql ‐‐datadir=/usr/<span class="built_in">local</span>/mysql/data/</span><br><span class="line">‐‐basedir=/usr/<span class="built_in">local</span>/mysql/</span><br><span class="line">    chown -R root.mysql /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">    chown -R mysql /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">    /bin/cp -f /usr/<span class="built_in">local</span>/mysql/support‐files/mysql.server /etc/init.d/mysqld</span><br><span class="line">    chmod +x /etc/init.d/mysqld</span><br><span class="line">    /bin/cp -f /usr/<span class="built_in">local</span>/mysql/support‐files/my‐default.cnf /etc/my.cnf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"/usr/local/mysql/lib/"</span> &gt;&gt; /etc/ld.so.conf</span><br><span class="line">    ldconfig</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'PATH=\$PATH:/usr/local/mysql/bin/'</span> &gt;&gt; /etc/profile</span><br><span class="line">    <span class="built_in">export</span> PATH</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">"没有 mysql 源码包"</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">install_php()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">#安装 php 时没有指定启动哪些模块功能,如果的用户可以根据实际情况自行添加额外功能如‐‐with‐gd 等</span></span><br><span class="line">yum  -y  install  gcc  libxml2‐devel</span><br><span class="line"><span class="keyword">if</span> [ -f mhash‐0.9.9.9.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  tar -xf mhash‐0.9.9.9.tar.gz</span><br><span class="line">  <span class="built_in">cd</span> mhash‐0.9.9.9</span><br><span class="line">  ./configure</span><br><span class="line">  make</span><br><span class="line">  make install</span><br><span class="line">  <span class="built_in">cd</span> ..</span><br><span class="line"><span class="keyword">if</span> [ ! ‐f /usr/lib/libmhash.so ];<span class="keyword">then</span></span><br><span class="line">  ln -s /usr/<span class="built_in">local</span>/lib/libmhash.so /usr/lib/</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">ldconfig</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"没有 mhash 源码包文件"</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f libmcrypt‐2.5.8.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  tar -xf libmcrypt‐2.5.8.tar.gz</span><br><span class="line">  <span class="built_in">cd</span> libmcrypt‐2.5.8</span><br><span class="line">  ./configure</span><br><span class="line">  make</span><br><span class="line">  make install</span><br><span class="line">  <span class="built_in">cd</span> ..</span><br><span class="line">  <span class="keyword">if</span> [ ! -f /usr/lib/libmcrypt.so ];<span class="keyword">then</span>  </span><br><span class="line">    ln -s /usr/<span class="built_in">local</span>/lib/libmcrypt.so /usr/lib/</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  ldconfig</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"没有 libmcrypt 源码包文件"</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f php‐5.4.24.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  tar -xf php‐5.4.24.tar.gz</span><br><span class="line">  <span class="built_in">cd</span> php‐5.4.24</span><br><span class="line">  ./configure  ‐‐prefix=/usr/<span class="built_in">local</span>/php5  ‐‐with‐mysql=/usr/<span class="built_in">local</span>/mysql  ‐‐<span class="built_in">enable</span>‐fpm    ‐‐</span><br><span class="line">  <span class="built_in">enable</span>‐mbstring  ‐‐with‐mcrypt  ‐‐with‐mhash  ‐‐with‐config‐file‐path=/usr/<span class="built_in">local</span>/php5/etc  ‐‐with‐</span><br><span class="line">  mysqli=/usr/<span class="built_in">local</span>/mysql/bin/mysql_config</span><br><span class="line">  make &amp;&amp; make install</span><br><span class="line">  /bin/cp -f php.ini‐production /usr/<span class="built_in">local</span>/php5/etc/php.ini</span><br><span class="line">  /bin/cp -f /usr/<span class="built_in">local</span>/php5/etc/php‐fpm.conf.default /usr/<span class="built_in">local</span>/php5/etc/php‐fpm.conf</span><br><span class="line">  <span class="built_in">cd</span> ..</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"没有 php 源码包文件"</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  menu</span><br><span class="line">  choice</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$select</span> <span class="keyword">in</span></span><br><span class="line">  1)</span><br><span class="line">    install_nginx</span><br><span class="line">    ;;</span><br><span class="line">  2)</span><br><span class="line">    install_mysql</span><br><span class="line">    ;;</span><br><span class="line">  3)</span><br><span class="line">    install_php</span><br><span class="line">    ;;</span><br><span class="line">  4)</span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> Sorry!</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装 LAMP 环境(yum 版本) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 本脚本适用于 RHEL7(RHEL6 中数据库为 mysql)</span></span><br><span class="line">yum makecache &amp;&gt;/dev/null</span><br><span class="line">num=$(yum repolist | awk <span class="string">'/repolist/&#123;print $2&#125;'</span> | sed <span class="string">'s/,//'</span>)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -lt 0 ];<span class="keyword">then</span></span><br><span class="line">  yum -y install httpd</span><br><span class="line">  yum -y install mariadb mariadb-server mariadb-devel</span><br><span class="line">  yum -y install php php-mysql</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"未配置 yum 源..."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="8、根据-md5-校验码-检测文件是否被修改">8、根据 md5 校验码,检测文件是否被修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 根据 md5 校验码,检测文件是否被修改 </span></span><br><span class="line"><span class="comment"># 本示例脚本检测的是/etc 目录下所有的 conf 结尾的文件,根据实际情况,您可以修改为其他目录或文件</span></span><br><span class="line"><span class="comment"># 本脚本在目标数据没有被修改时执行一次,当怀疑数据被人篡改,再执行一次</span></span><br><span class="line"><span class="comment"># 将两次执行的结果做对比,MD5 码发生改变的文件,就是被人篡改的文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ls /etc/*.conf)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  md5sum <span class="string">"<span class="variable">$i</span>"</span> &gt;&gt; /var/<span class="built_in">log</span>/conf_file.log</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="9、查看有多少远程的-IP-在连接本机’">9、查看有多少远程的 IP 在连接本机’</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看有多少远程的 IP 在连接本机(不管是通过 ssh 还是 web 还是 ftp 都统计) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 netstat ‐atn 可以查看本机所有连接的状态,‐a 查看所有,</span></span><br><span class="line"><span class="comment"># -t仅显示 tcp 连接的信息,‐n 数字格式显示</span></span><br><span class="line"><span class="comment"># Local Address(第四列是本机的 IP 和端口信息)</span></span><br><span class="line"><span class="comment"># Foreign Address(第五列是远程主机的 IP 和端口信息)</span></span><br><span class="line"><span class="comment"># 使用 awk 命令仅显示第 5 列数据,再显示第 1 列 IP 地址的信息</span></span><br><span class="line"><span class="comment"># sort 可以按数字大小排序,最后使用 uniq 将多余重复的删除,并统计重复的次数</span></span><br><span class="line">netstat -atn  |  awk  <span class="string">'&#123;print $5&#125;'</span>  | awk  <span class="string">'&#123;print $1&#125;'</span> | sort -nr  |  uniq -c</span><br></pre></td></tr></table></figure><h3 id="10、监控内存和磁盘容量，小于给定值时报警">10、监控内存和磁盘容量，小于给定值时报警</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 实时监控本机内存和硬盘剩余空间,剩余内存小于500M、根分区剩余空间小于1000M时,发送报警邮件给root管理员</span></span><br><span class="line"><span class="comment"># 提取根分区剩余空间</span></span><br><span class="line">disk_size=$(df / | awk <span class="string">'/\//&#123;print $4&#125;'</span>)</span><br><span class="line"><span class="comment"># 提取内存剩余空间</span></span><br><span class="line">mem_size=$(free | awk <span class="string">'/Mem/&#123;print $4&#125;'</span>)</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 注意内存和磁盘提取的空间大小都是以 Kb 为单位</span></span><br><span class="line"><span class="keyword">if</span>  [  <span class="variable">$disk_size</span> -le 512000 -a <span class="variable">$mem_size</span> -le 1024000  ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    mail -s <span class="string">"Warning"</span>  root  &lt;&lt;EOF</span><br><span class="line">  Insufficient resources,资源不足</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="11、使用死循环实时显示-eth0-网卡发送的数据包流量"><strong>11、使用死循环实时显示 eth0 网卡发送的数据包流量</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 使用死循环实时显示 eth0 网卡发送的数据包流量 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span>  <span class="string">'本地网卡 eth0 流量信息如下: '</span></span><br><span class="line">    ifconfig eth0 | grep <span class="string">"RX pack"</span> | awk <span class="string">'BEGIN&#123;OFS=""&#125;;&#123;print $6,$7&#125;'</span></span><br><span class="line">    ifconfig eth0 | grep <span class="string">"TX pack"</span> | awk <span class="string">'BEGIN&#123;OFS=""&#125;;&#123;print $6,$7&#125;'</span></span><br><span class="line">     sleep 5</span><br><span class="line">    clear</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="12、-apache-服务器的监控">12、 apache 服务器的监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计 13:30 到 14:30 所有访问 apache 服务器的请求有多少个</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># awk 使用‐F 选项指定文件内容的分隔符是/或者:</span></span><br><span class="line"><span class="comment"># 条件判断$7:$8 大于等于 13:30,并且要求,$7:$8 小于等于 14:30</span></span><br><span class="line"><span class="comment"># 最后使用 wc ‐l 统计这样的数据有多少行,即多少个</span></span><br><span class="line">awk -F <span class="string">"[ /:]"</span> <span class="string">'$7":"$8&gt;="13:30" &amp;&amp; $7":"$8&lt;="14:30"'</span> /var/<span class="built_in">log</span>/httpd/access_log |wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment">#===============================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计 13:30 到 14:30 所有访问本机 Aapche 服务器的远程 IP 地址是什么 </span></span><br><span class="line"><span class="comment"># awk 使用‐F 选项指定文件内容的分隔符是/或者:</span></span><br><span class="line"><span class="comment"># 条件判断$7:$8 大于等于 13:30,并且要求,$7:$8 小于等于 14:30</span></span><br><span class="line"><span class="comment"># 日志文档内容里面,第 1 列是远程主机的 IP 地址,使用 awk 单独显示第 1 列即可</span></span><br><span class="line">awk -F <span class="string">"[ /:]"</span> <span class="string">'$7":"$8&gt;="13:30" &amp;&amp; $7":"$8&lt;="14:30"&#123;print $1&#125;'</span> /var/<span class="built_in">log</span>/httpd/access_log</span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计每个远程 IP 访问了本机 apache 几次? </span></span><br><span class="line">awk  <span class="string">'&#123;ip[$1]++&#125;END&#123;for(i in ip)&#123;print ip[i],i&#125;&#125;'</span>  /var/<span class="built_in">log</span>/httpd/access_log</span><br></pre></td></tr></table></figure><h3 id="13、统计当前-Linux-系统中可以登录计算机的账户">13、统计当前 Linux 系统中可以登录计算机的账户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计当前 Linux 系统中可以登录计算机的账户有多少个</span></span><br><span class="line"><span class="comment">#方法 1:</span></span><br><span class="line">grep <span class="string">"bash$"</span> /etc/passwd | wc -l</span><br><span class="line"><span class="comment">#方法 2:</span></span><br><span class="line">awk -f: <span class="string">'/bash$/&#123;x++&#125;end&#123;print x&#125;'</span>  /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 显示当前计算机中所有账户的用户名称</span></span><br><span class="line"><span class="comment"># 下面使用3种不同的方式列出计算机中所有账户的用户名</span></span><br><span class="line"><span class="comment"># 指定以:为分隔符,打印/etc/passwd 文件的第 1 列</span></span><br><span class="line">awk -F: <span class="string">'&#123;print $1&#125;'</span> /etc/passwd</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定以:为分隔符,打印/etc/passwd 文件的第 1 列</span></span><br><span class="line">cut -d: -f1 /etc/passwd</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 sed 的替换功能,将/etc/passwd 文件中:后面的所有内容替换为空(仅显示用户名)</span></span><br><span class="line">sed <span class="string">'s/:.*//'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="14、统计-var-log-有多少个文件-并显示这些文件名">14、统计/var/log 有多少个文件,并显示这些文件名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计/var/log 有多少个文件,并显示这些文件名 </span></span><br><span class="line"><span class="comment"># 使用 ls 递归显示所有,再判断是否为文件,如果是文件则计数器加 1</span></span><br><span class="line"><span class="built_in">cd</span>  /var/<span class="built_in">log</span></span><br><span class="line">sum=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls -r *`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="keyword">if</span> [ -f <span class="variable">$i</span> ];<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">let</span> sum++</span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"文件名:<span class="variable">$i</span>"</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"总文件数量为:<span class="variable">$sum</span>"</span></span><br></pre></td></tr></table></figure><h3 id="15、自动为其他脚本添加解释器信息">15、自动为其他脚本添加解释器信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自动为其他脚本添加解释器信息#!/bin/bash,如脚本名为 test.sh 则效果如下: </span></span><br><span class="line"><span class="comment"># ./test.sh  abc.sh  自动为 abc.sh 添加解释器信息</span></span><br><span class="line"><span class="comment"># ./test.sh  user.sh  自动为 user.sh 添加解释器信息</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 先使用 grep 判断对象脚本是否已经有解释器信息,如果没有则使用 sed 添加解释器以及描述信息</span></span><br><span class="line"><span class="keyword">if</span>  !  grep  -q  <span class="string">"^#!"</span>  <span class="variable">$1</span>; <span class="keyword">then</span></span><br><span class="line">sed  <span class="string">'1i #!/bin/bash'</span>  <span class="variable">$1</span></span><br><span class="line">sed  <span class="string">'2i #Description: '</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 因为每个脚本的功能不同,作用不同,所以在给对象脚本添加完解释器信息,以及 Description 后还希望</span></span><br><span class="line"><span class="comment"># 继续编辑具体的脚本功能的描述信息,这里直接使用 vim 把对象脚本打开,并且光标跳转到该文件的第 2 行</span></span><br><span class="line">vim +2 <span class="variable">$1</span></span><br></pre></td></tr></table></figure><h3 id="16、nginx-启动脚本">16、nginx 启动脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写 nginx 启动脚本 </span></span><br><span class="line"><span class="comment"># 本脚本编写完成后,放置在/etc/init.d/目录下,就可以被 Linux 系统自动识别到该脚本</span></span><br><span class="line"><span class="comment"># 如果本脚本名为/etc/init.d/nginx,则 service nginx start 就可以启动该服务</span></span><br><span class="line"><span class="comment"># service nginx stop 就可以关闭服务</span></span><br><span class="line"><span class="comment"># service nginx restart 可以重启服务</span></span><br><span class="line"><span class="comment"># service nginx status 可以查看服务状态</span></span><br><span class="line"> </span><br><span class="line">program=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">pid=/usr/<span class="built_in">local</span>/nginx/logs/nginx.pid</span><br><span class="line"><span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$pid</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">"nginx 服务已经处于开启状态"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="variable">$program</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -! -f <span class="variable">$pid</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"nginx 服务已经关闭"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="variable">$program</span> -s stop</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"关闭服务 ok"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">status</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$pid</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"服务正在运行..."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"服务已经关闭"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">  start;;</span><br><span class="line">stop)</span><br><span class="line">  stop;;</span><br><span class="line">restart)</span><br><span class="line">  stop</span><br><span class="line">  sleep 1</span><br><span class="line">  start;;</span><br><span class="line">status)</span><br><span class="line">  status;;</span><br><span class="line">*)</span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">"你输入的语法格式错误"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="17、切割-Nginx-日志文件-防止单个文件过大-后期处理很困难">17、切割 Nginx 日志文件(防止单个文件过大,后期处理很困难)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mkdir  /data/scripts</span></span><br><span class="line"><span class="comment">#vim   /data/scripts/nginx_log.sh  </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 切割 Nginx 日志文件(防止单个文件过大,后期处理很困难) </span></span><br><span class="line">logs_path=<span class="string">"/usr/local/nginx/logs/"</span></span><br><span class="line">mv <span class="variable">$&#123;logs_path&#125;</span>access.log <span class="variable">$&#123;logs_path&#125;</span>access_$(date -d <span class="string">"yesterday"</span> +<span class="string">"%Y%m%d"</span>).<span class="built_in">log</span></span><br><span class="line"><span class="built_in">kill</span> -USR1  `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br><span class="line"> </span><br><span class="line"><span class="comment"># chmod +x  /data/scripts/nginx_log.sh</span></span><br><span class="line"><span class="comment"># crontab  ‐e                    #脚本写完后,将脚本放入计划任务每天执行一次脚本</span></span><br><span class="line">0  1  *  *   *   /data/scripts/nginx_log.sh</span><br></pre></td></tr></table></figure><h3 id="18、检测-MySQL-数据库连接数量">18、检测 MySQL 数据库连接数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检测 MySQL 数据库连接数量 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 本脚本每 2 秒检测一次 MySQL 并发连接数,可以将本脚本设置为开机启动脚本,或在特定时间段执行</span></span><br><span class="line"><span class="comment"># 以满足对 MySQL 数据库的监控需求,查看 MySQL 连接是否正常</span></span><br><span class="line"><span class="comment"># 本案例中的用户名和密码需要根据实际情况修改后方可使用</span></span><br><span class="line">log_file=/var/<span class="built_in">log</span>/mysql_count.log</span><br><span class="line">user=shawn</span><br><span class="line">passwd=shawn</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sleep 2</span><br><span class="line">    count=`mysqladmin  -u<span class="string">"<span class="variable">$user</span>"</span>  -p<span class="string">"<span class="variable">$passwd</span>"</span> status |awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"`date +%Y‐%m‐%d` 并发连接数为:<span class="variable">$count</span>"</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="19、检测-MySQL-服务是否存活">19、检测 MySQL 服务是否存活</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检测 MySQL 服务是否存活 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># host 为你需要检测的 MySQL 主机的 IP 地址,user 为 MySQL 账户名,passwd 为密码</span></span><br><span class="line"><span class="comment"># 这些信息需要根据实际情况修改后方可使用</span></span><br><span class="line"></span><br><span class="line">host=127.0.0.1</span><br><span class="line">user=shawn</span><br><span class="line">passwd=shawn</span><br><span class="line">mysqladmin -h<span class="string">"<span class="variable">$host</span>"</span> -u<span class="string">"<span class="variable">$user</span>"</span> -p<span class="string">"<span class="variable">$passwd</span>"</span> ping &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Mysql is UP"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Mysql is down"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="20、备份-MySQL">20、备份 MySQL </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 备份 MySQL 的 shell 脚本(mysqldump版本) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义变量 user(数据库用户名),passwd(数据库密码),date(备份的时间标签)</span></span><br><span class="line"><span class="comment"># dbname(需要备份的数据库名称,根据实际需求需要修改该变量的值,默认备份 mysql 数据库)</span></span><br><span class="line">user=root</span><br><span class="line">passwd=123456</span><br><span class="line">dbname=mysql</span><br><span class="line">date=$(date +%Y%m%d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试备份目录是否存在,不存在则自动创建该目录</span></span><br><span class="line">[ ! -d /mysqlbackup ] &amp;&amp; mkdir /mysqlbackup</span><br><span class="line"><span class="comment"># 使用 mysqldump 命令备份数据库</span></span><br><span class="line">mysqldump -u<span class="string">"<span class="variable">$user</span>"</span> -p<span class="string">"<span class="variable">$passwd</span>"</span> <span class="string">"<span class="variable">$dbname</span>"</span> &gt; /mysqlbackup/<span class="string">"<span class="variable">$dbname</span>"</span>-<span class="variable">$&#123;date&#125;</span>.sql</span><br></pre></td></tr></table></figure><h3 id="21、将文件中所有的小写字母转换为大写字母">21、将文件中所有的小写字母转换为大写字母</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将文件中所有的小写字母转换为大写字母 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># $1是位置参数,是你需要转换大小写字母的文件名称</span></span><br><span class="line"><span class="comment"># 执行脚本,给定一个文件名作为参数,脚本就会将该文件中所有的小写字母转换为大写字母</span></span><br><span class="line">tr <span class="string">"[a‐z]"</span> <span class="string">"[A‐Z]"</span> &lt; <span class="variable">$1</span></span><br></pre></td></tr></table></figure><h3 id="22、非交互自动生成-SSH-密钥文件">22、非交互自动生成 SSH 密钥文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 非交互自动生成 SSH 密钥文件 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># ‐t 指定 SSH 密钥的算法为 RSA 算法;‐N 设置密钥的密码为空;‐f 指定生成的密钥文件&gt;存放在哪里</span></span><br><span class="line">rm  -rf  ~/.ssh/&#123;known_hosts,id_rsa*&#125;</span><br><span class="line">ssh‐keygen -t RSA -N <span class="string">''</span> -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="23、检查特定的软件包是否已经安装">23、检查特定的软件包是否已经安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检查特定的软件包是否已经安装 </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"你需要制定一个软件包名称作为脚本参数"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"用法:<span class="variable">$0</span> 软件包名称 ..."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># $@提取所有的位置变量的值,相当于$*</span></span><br><span class="line"><span class="keyword">for</span> package <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> rpm -q <span class="variable">$&#123;package&#125;</span> &amp;&gt;/dev/null ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;package&#125;</span>\033[32m 已经安装\033[0m"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;package&#125;</span>\033[34;1m 未安装\033[0m"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="24、监控-HTTP-服务器的状态-测试返回码">24、监控 HTTP 服务器的状态(测试返回码)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 监控 HTTP 服务器的状态(测试返回码)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置变量,url为你需要检测的目标网站的网址(IP 或域名),比如百度</span></span><br><span class="line">url=http://183.232.231.172/index.html</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义函数 check_http:</span></span><br><span class="line"><span class="comment"># 使用 curl 命令检查 http 服务器的状态</span></span><br><span class="line"><span class="comment"># ‐m 设置curl不管访问成功或失败,最大消耗的时间为 5 秒,5 秒连接服务为相应则视为无法连接</span></span><br><span class="line"><span class="comment"># ‐s 设置静默连接,不显示连接时的连接速度、时间消耗等信息</span></span><br><span class="line"><span class="comment"># ‐o 将 curl 下载的页面内容导出到/dev/null(默认会在屏幕显示页面内容)</span></span><br><span class="line"><span class="comment"># ‐w 设置curl命令需要显示的内容%&#123;http_code&#125;,指定curl返回服务器的状态码</span></span><br><span class="line">check_http()</span><br><span class="line">&#123;</span><br><span class="line">        status_code=$(curl -m 5 -s -o /dev/null -w %&#123;http_code&#125; <span class="variable">$url</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        check_http</span><br><span class="line">        date=$(date +%Y%m%d‐%H:%M:%S)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成报警邮件的内容</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"当前时间为:<span class="variable">$date</span></span></span><br><span class="line"><span class="string">        <span class="variable">$url</span> 服务器异常,状态码为<span class="variable">$&#123;status_code&#125;</span>.</span></span><br><span class="line"><span class="string">        请尽快排查异常."</span> &gt; /tmp/http$$.pid</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定测试服务器状态的函数,并根据返回码决定是发送邮件报警还是将正常信息写入日志</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$status_code</span> -ne 200 ];<span class="keyword">then</span></span><br><span class="line">                mail -s Warning root &lt; /tmp/http$$.pid</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$url</span> 连接正常"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        sleep 5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="25、自动添加防火墙规则-开启某些服务或端口-适用于-RHEL7">25、自动添加防火墙规则,开启某些服务或端口(适用于 RHEL7)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自动添加防火墙规则,开启某些服务或端口(适用于 RHEL7)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 设置变量定义需要添加到防火墙规则的服务和端口号</span></span><br><span class="line"><span class="comment"># 使用 firewall‐cmd ‐‐get‐services 可以查看 firewall 支持哪些服务</span></span><br><span class="line">service=<span class="string">"nfs http ssh"</span></span><br><span class="line">port=<span class="string">"80 22 8080"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 循环将每个服务添加到防火墙规则中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$service</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Adding <span class="variable">$i</span> service to firewall"</span></span><br><span class="line">    firewall‐cmd  --add-service=<span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#循环将每个端口添加到防火墙规则中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$port</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Adding <span class="variable">$i</span> Port to firewall"</span></span><br><span class="line">    firewall‐cmd --add-port=<span class="variable">$&#123;i&#125;</span>/tcp</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#将以上设置的临时防火墙规则,转换为永久有效的规则(确保重启后有效)</span></span><br><span class="line">firewall‐cmd  --runtime-to-permanent</span><br></pre></td></tr></table></figure><h3 id="26、使用脚本自动创建逻辑卷">26、使用脚本自动创建逻辑卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用脚本自动创建逻辑卷 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 清屏,显示警告信息,创建将磁盘转换为逻辑卷会删除数据</span></span><br><span class="line">clear</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m           !!!!!!警告(Warning)!!!!!!\033[0m"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"+++++++++++++++++++++++++++++++++++++++++++++++++"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"脚本会将整个磁盘转换为 PV,并删除磁盘上所有数据!!!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This Script will destroy all data on the Disk"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"+++++++++++++++++++++++++++++++++++++++++++++++++"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请问是否继续 y/n?:"</span> sure</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试用户输入的是否为 y,如果不是则退出脚本</span></span><br><span class="line">[ <span class="variable">$sure</span> != y ] &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提示用户输入相关参数(磁盘、卷组名称等数据),并测试用户是否输入了这些值,如果没有输入,则脚本退出</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入磁盘名称,如/dev/vdb:"</span> disk</span><br><span class="line">[ -z <span class="variable">$disk</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"没有输入磁盘名称"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入卷组名称:"</span> vg_name</span><br><span class="line">[ -z <span class="variable">$vg_name</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"没有输入卷组名称"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入逻辑卷名称:"</span> lv_name</span><br><span class="line">[ -z <span class="variable">$lv_name</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"没有输入逻辑卷名称"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入逻辑卷大小:"</span> lv_size</span><br><span class="line">[ -z <span class="variable">$lv_size</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"没有输入逻辑卷大小"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用命令创建逻辑卷</span></span><br><span class="line">pvcreate <span class="variable">$disk</span></span><br><span class="line">vgcreate <span class="variable">$vg_name</span> <span class="variable">$disk</span></span><br><span class="line">lvcreate -L <span class="variable">$&#123;lv_size&#125;</span>M -n <span class="variable">$&#123;lv_name&#125;</span>  <span class="variable">$&#123;vg_name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="27、显示-CPU-厂商信息">27、显示 CPU 厂商信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示 CPU 厂商信息 </span></span><br><span class="line">awk <span class="string">'/vendor_id/&#123;print $3&#125;'</span> /proc/cpuinfo | uniq</span><br></pre></td></tr></table></figure><h3 id="28、删除某个目录下大小为-0-的文件">28、删除某个目录下大小为 0 的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除某个目录下大小为 0 的文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#/var/www/html 为测试目录,脚本会清空该目录下所有 0 字节的文件</span></span><br><span class="line">dir=<span class="string">"/var/www/html"</span></span><br><span class="line">find <span class="variable">$dir</span> -<span class="built_in">type</span> f -size 0 -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><h3 id="29、查找-Linux-系统中的僵尸进程">29、查找 Linux 系统中的僵尸进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查找 Linux 系统中的僵尸进程</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># awk 判断 ps 命令输出的第 8 列为 Z 是,显示该进程的 PID 和进程命令</span></span><br><span class="line">ps aux | awk <span class="string">'&#123;if($8 == "Z")&#123;print $2,$11&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="30、生成随机密码">30、生成随机密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成随机密码(urandom 版本) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># /dev/urandom 文件是 Linux 内置的随机设备文件</span></span><br><span class="line"><span class="comment"># cat /dev/urandom 可以看看里面的内容,ctrl+c 退出查看</span></span><br><span class="line"><span class="comment"># 查看该文件内容后,发现内容有些太随机,包括很多特殊符号,我们需要的密码不希望使用这些符号</span></span><br><span class="line"><span class="comment"># tr ‐dc '_A‐Za‐z0‐9' &lt; /dev/urandom</span></span><br><span class="line"><span class="comment"># 该命令可以将随机文件中其他的字符删除,仅保留大小写字母,数字,下划线,但是内容还是太多</span></span><br><span class="line"><span class="comment"># 我们可以继续将优化好的内容通过管道传递给 head 命令,在大量数据中仅显示头 10 个字节</span></span><br><span class="line"><span class="comment"># 注意 A 前面有个下划线</span></span><br><span class="line">tr -dc <span class="string">'_A‐Za‐z0‐9'</span> &lt;/dev/urandom | head -c 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成随机密码(字串截取版本) </span></span><br><span class="line"><span class="comment"># 设置变量 key,存储密码的所有可能性(密码库),如果还需要其他字符请自行添加其他密码字符</span></span><br><span class="line"><span class="comment"># 使用$#统计密码库的长度</span></span><br><span class="line">key=<span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></span><br><span class="line">num=<span class="variable">$&#123;#key&#125;</span></span><br><span class="line"><span class="comment"># 设置初始密码为空</span></span><br><span class="line">pass=<span class="string">''</span></span><br><span class="line"><span class="comment"># 循环 8 次,生成随机密码</span></span><br><span class="line"><span class="comment"># 每次都是随机数对密码库的长度取余,确保提取的密码字符不超过密码库的长度</span></span><br><span class="line"><span class="comment"># 每次循环提取一位随机密码,并将该随机密码追加到 pass 变量的最后</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..8&#125;</span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  index=$[RANDOM%num]</span><br><span class="line">  pass=<span class="variable">$pass</span><span class="variable">$&#123;key:$index:1&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=============================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 生成随机密码(UUID 版本,16 进制密码) </span></span><br><span class="line">uuidgen</span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成随机密码(进程 ID 版本,数字密码)</span></span><br><span class="line"><span class="built_in">echo</span> $$</span><br></pre></td></tr></table></figure><h3 id="31、测试用户名与密码是否正确">31、测试用户名与密码是否正确</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试用户名与密码是否正确</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#用户名为 tom 并且密码为 123456,则提示登录成功,否则提示登录失败</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入用户名:"</span>  user</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入密码:"</span>    pass</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$user</span>"</span> == <span class="string">'tom'</span> -a <span class="string">"<span class="variable">$pass</span>"</span> == <span class="string">'123456'</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Login successful"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Login Failed"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 循环测试用户名与密码是否正确 </span></span><br><span class="line"><span class="comment"># 循环测试用户的账户名和密码,最大测试 3 次,输入正确提示登录成功,否则提示登录失败</span></span><br><span class="line"><span class="comment"># 用户名为 tom 并且密码为 123456  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..3&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"请输入用户名:"</span> user</span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"请输入密码:"</span>   pass</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$user</span>"</span> == <span class="string">'tom'</span> -a <span class="string">"<span class="variable">$pass</span>"</span> == <span class="string">'123456'</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Login successful"</span></span><br><span class="line">     <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Login Failed"</span></span><br></pre></td></tr></table></figure><h3 id="32、Shell-脚本的-fork-炸弹">32、Shell 脚本的 fork 炸弹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Shell 脚本的 fork 炸弹 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 快速消耗计算机资源,致使计算机死机</span></span><br><span class="line"><span class="comment"># 定义函数名为.(点), 函数中递归调用自己并放入后台执行</span></span><br><span class="line">.() &#123; .|.&amp; &#125;;.</span><br></pre></td></tr></table></figure><h3 id="33、批量下载有序文件-pdf、图片、视频等等">33、批量下载有序文件(pdf、图片、视频等等)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 批量下载有序文件(pdf、图片、视频等等)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 本脚本准备有序的网络资料进行批量下载操作(如 01.jpg,02.jpg,03.jpg)</span></span><br><span class="line"><span class="comment"># 设置资源来源的域名连接</span></span><br><span class="line">url=<span class="string">"http://www.baidu.com/"</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">"开始下载..."</span></span><br><span class="line">sleep 2</span><br><span class="line"><span class="built_in">type</span>=jpg</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 100`</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"正在下载<span class="variable">$i</span>.<span class="variable">$type</span>"</span></span><br><span class="line">  curl <span class="variable">$url</span>/<span class="variable">$i</span>.<span class="variable">$type</span> -o /tmp/<span class="variable">$&#123;i&#125;</span><span class="variable">$type</span></span><br><span class="line">     sleep 1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#curl 使用-o 选项指定下载文件另存到哪里.</span></span><br></pre></td></tr></table></figure><h3 id="34、自动对磁盘分区、格式化、挂载">34、自动对磁盘分区、格式化、挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 自动对磁盘分区、格式化、挂载</span></span><br><span class="line"><span class="comment"># 对虚拟机的 vdb 磁盘进行分区格式化,使用&lt;&lt;将需要的分区指令导入给程序 fdisk</span></span><br><span class="line"><span class="comment"># n(新建分区),p(创建主分区),1(分区编号为 1),两个空白行(两个回车,相当于将整个磁盘分一个区)</span></span><br><span class="line"><span class="comment"># 注意:1 后面的两个回车(空白行)是必须的!</span></span><br><span class="line">fdisk /dev/vdb &lt;&lt; EOF</span><br><span class="line">n</span><br><span class="line">p</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">wq</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment">#格式化刚刚创建好的分区</span></span><br><span class="line">mkfs.xfs   /dev/vdb1</span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建挂载点目录</span></span><br><span class="line"><span class="keyword">if</span> [ -e /data ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">mkdir /data</span><br><span class="line"> </span><br><span class="line"><span class="comment">#自动挂载刚刚创建的分区,并设置开机自动挂载该分区</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/dev/vdb1     /data    xfs    defaults        1 2'</span>  &gt;&gt; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure><h3 id="35、使用-tar-命令打包备份到-data目录">35、使用 tar 命令打包备份到/data目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 制定目录路径,脚本自动将该目录使用 tar 命令打包备份到/data目录 </span></span><br><span class="line"> </span><br><span class="line">[ ! -d /data ] &amp;&amp; mkdir /data</span><br><span class="line">[ -z <span class="variable">$1</span> ] &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span> ];<span class="keyword">then</span></span><br><span class="line">  tar -czf /data/<span class="variable">$1</span>.-`date +%Y%m%d`.tar.gz <span class="variable">$1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"该目录不存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="36、循环关闭局域网中所有主机">36、循环关闭局域网中所有主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 循环关闭局域网中所有主机 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 假设本机为 192.168.4.100,编写脚本关闭除自己外的其他所有主机</span></span><br><span class="line"><span class="comment"># 脚本执行,需要提前给所有其他主机传递 ssh 密钥,满足无密码连接</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  [ <span class="variable">$i</span> -eq 100 ] &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"正在关闭 192.168.4.<span class="variable">$i</span>..."</span></span><br><span class="line">  ssh 192.168.4.<span class="variable">$i</span> poweroff</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="37、获取本机-MAC-地址">37、获取本机 MAC 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取本机 MAC 地址</span></span><br><span class="line">ifconfig eth0|grep ether|awk <span class="string">'BEGIN&#123;printf "本机MAC地址信如下:"&#125;&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="38、自动配置-rsynd-服务器的配置文件-rsyncd-conf">38、自动配置 rsynd 服务器的配置文件 rsyncd.conf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自动配置 rsynd 服务器的配置文件 rsyncd.conf</span></span><br><span class="line"><span class="comment"># See rsyncd.conf man page for more options.</span></span><br><span class="line"></span><br><span class="line">[ ! -d /home/ftp ] &amp;&amp; mkdir /home/ftp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'uid = nobody</span></span><br><span class="line"><span class="string">gid = nobody</span></span><br><span class="line"><span class="string">use chroot = yes</span></span><br><span class="line"><span class="string">max connections = 4</span></span><br><span class="line"><span class="string">pid file = /var/run/rsyncd.pid</span></span><br><span class="line"><span class="string">exclude = lost+found/</span></span><br><span class="line"><span class="string">transfer logging = yes</span></span><br><span class="line"><span class="string">timeout = 900</span></span><br><span class="line"><span class="string">ignore nonreadable = yes</span></span><br><span class="line"><span class="string">dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2</span></span><br><span class="line"><span class="string">[ftp]</span></span><br><span class="line"><span class="string">    path = /home/ftp</span></span><br><span class="line"><span class="string">    comment = share'</span> &gt; /etc/rsyncd.conf</span><br></pre></td></tr></table></figure><h3 id="39、修改-Linux-系统的最大打开文件数量">39、修改 Linux 系统的最大打开文件数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改 Linux 系统的最大打开文件数量 </span></span><br><span class="line"><span class="comment"># 往/etc/security/limits.conf 文件的末尾追加两行配置参数,修改最大打开文件数量为 65536</span></span><br><span class="line">cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF</span><br><span class="line">* soft nofile  65536</span><br><span class="line">* hard nofile  65536</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="40、设置-Python-支持自动命令补齐功能">40、设置 Python 支持自动命令补齐功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置 Python 支持自动命令补齐功能 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Summary:Enable tab complete for python</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"> </span><br><span class="line">Needs import readline and rlcompleter module</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">import readline</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">import rlcompleter</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">help</span>(rlcompleter) display detail: readline.parse_and_bind(<span class="string">'tab: complete'</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">man python display detail: PYTHONSTARTUP variable</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>  [ ! -f /usr/bin/tab.py ];<span class="keyword">then</span></span><br><span class="line">  cat &gt;&gt; /usr/bin/tab.py &lt;&lt;EOF</span><br><span class="line">import readline</span><br><span class="line">import rlcompleter</span><br><span class="line">readline.parse_and_bind(<span class="string">'tab: complete'</span>)</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">sed  -i <span class="string">'$a export PYTHONSTARTUP=/usr/bin/tab.py'</span> /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="41、自动修改计划任务配置文件">41、自动修改计划任务配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自动修改计划任务配置文件 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入分钟信息(00‐59):"</span> min</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入小时信息(00‐24):"</span> hour</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入日期信息(01‐31):"</span> date</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入月份信息(01‐12):"</span> month</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入星期信息(00‐06):"</span> weak</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入计划任务需要执行的命令或脚本:"</span> program</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$min</span> <span class="variable">$hour</span> <span class="variable">$date</span> <span class="variable">$month</span> <span class="variable">$weak</span> <span class="variable">$program</span>"</span> &gt;&gt; /etc/crontab</span><br></pre></td></tr></table></figure><h3 id="42、找出-etc-passwd-中能登录的用户-并将对应在-etc-shadow-中第二列密码提出处理">42、找出/etc/passwd 中能登录的用户,并将对应在/etc/shadow 中第二列密码提出处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 找出/etc/passwd 中能登录的用户,并将对应在/etc/shadow 中第二列密码提出处理</span></span><br><span class="line"> </span><br><span class="line">user=$(awk -F: <span class="string">'/bash$/&#123;print $1&#125;'</span> /etc/passwd)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$user</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  awk -F: -v x=<span class="variable">$i</span> <span class="string">'$1==x&#123;print $1,$2&#125;'</span> /etc/shadow</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="43、统计-etc-passwd-中-root-出现的次数">43、统计/etc/passwd 中 root 出现的次数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计/etc/passwd 中 root 出现的次数 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#每读取一行文件内容,即从第 1 列循环到最后 1 列,依次判断是否包含 root 关键词,如果包含则 x++</span></span><br><span class="line">awk -F: <span class="string">'&#123;i=1;while(i&lt;=NF)&#123;if($i~/root/)&#123;x++&#125;;i++&#125;&#125; END&#123;print "root 出现次数为"x&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="44、统计-Linux-进程相关数量信息">44、统计 Linux 进程相关数量信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计 Linux 进程相关数量信息 </span></span><br><span class="line"> </span><br><span class="line">running=0</span><br><span class="line">sleeping=0</span><br><span class="line">stoped=0</span><br><span class="line">zombie=0</span><br><span class="line"><span class="comment"># 在 proc 目录下所有以数字开始的都是当前计算机正在运行的进程的进程 PID</span></span><br><span class="line"><span class="comment"># 每个 PID 编号的目录下记录有该进程相关的信息</span></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> /proc/[1‐9]*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  procs=$[procs+1]</span><br><span class="line">  <span class="built_in">stat</span>=$(awk <span class="string">'&#123;print $3&#125;'</span> <span class="variable">$pid</span>/<span class="built_in">stat</span>)</span><br><span class="line"><span class="comment"># 每个 pid 目录下都有一个 stat 文件,该文件的第 3 列是该进程的状态信息</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$stat</span> <span class="keyword">in</span></span><br><span class="line">    R)</span><br><span class="line">    running=$[running+1]</span><br><span class="line">    ;;</span><br><span class="line">    T)</span><br><span class="line">    stoped=$[stoped+1]</span><br><span class="line">    ;;</span><br><span class="line">    S)</span><br><span class="line">    sleeping=$[sleeping+1]</span><br><span class="line">    ;;</span><br><span class="line">    Z)</span><br><span class="line">     zombie=$[zombie+1]</span><br><span class="line">     ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"进程统计信息如下"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"总进程数量为:<span class="variable">$procs</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Running 进程数为:<span class="variable">$running</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Stoped 进程数为:<span class="variable">$stoped</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Sleeping 进程数为:<span class="variable">$sleeping</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Zombie 进程数为:<span class="variable">$zombie</span>"</span></span><br></pre></td></tr></table></figure><h3 id="45、显示本机-Linux-系统上所有开放的端口列表">45、显示本机 Linux 系统上所有开放的端口列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示本机 Linux 系统上所有开放的端口列表 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 从端口列表中观测有没有没用的端口,有的话可以将该端口对应的服务关闭,防止意外的攻击可能性</span></span><br><span class="line">ss -nutlp | awk <span class="string">'&#123;print $1,$5&#125;'</span> | awk -F<span class="string">"[: ]"</span> <span class="string">'&#123;print "协议:"$1,"端口号:"$NF&#125;'</span> | grep <span class="string">"[0‐9]"</span> | uniq</span><br></pre></td></tr></table></figure><h3 id="46、将-Linux-系统中-UID-大于等于-1000-的普通用户都删除">46、将 Linux 系统中 UID 大于等于 1000 的普通用户都删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将 Linux 系统中 UID 大于等于 1000 的普通用户都删除 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 先用 awk 提取所有 uid 大于等于 1000 的普通用户名称</span></span><br><span class="line"><span class="comment"># 再使用 for 循环逐个将每个用户删除即可</span></span><br><span class="line">user=$(awk -F: <span class="string">'$3&gt;=1000&#123;print $1&#125;'</span> /etc/passwd)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$user</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     userdel -r <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="47、脚本快速克隆-KVM-虚拟机">47、脚本快速克隆 KVM 虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写脚本快速克隆 KVM 虚拟机</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 本脚本针对 RHEL7.2 或 Centos7.2</span></span><br><span class="line"><span class="comment"># 本脚本需要提前准备一个 qcow2 格式的虚拟机模板,</span></span><br><span class="line"><span class="comment"># 名称为/var/lib/libvirt/images  /.rh7_template 的虚拟机模板</span></span><br><span class="line"><span class="comment"># 该脚本使用 qemu‐img 命令快速创建快照虚拟机</span></span><br><span class="line"><span class="comment"># 脚本使用 sed 修改模板虚拟机的配置文件,将虚拟机名称、UUID、磁盘文件名、MAC 地址</span></span><br><span class="line"><span class="comment"># exit code:  </span></span><br><span class="line"><span class="comment">#    65 ‐&gt; user input nothing</span></span><br><span class="line"><span class="comment">#    66 ‐&gt; user input is not a number</span></span><br><span class="line"><span class="comment">#    67 ‐&gt; user input out of range</span></span><br><span class="line"><span class="comment">#    68 ‐&gt; vm disk image exists</span></span><br><span class="line"> </span><br><span class="line">IMG_DIR=/var/lib/libvirt/images</span><br><span class="line">BASEVM=rh7_template</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Enter VM number: "</span> VMNUM</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$VMNUM</span> -le 9 ];<span class="keyword">then</span></span><br><span class="line">VMNUM=0<span class="variable">$VMNUM</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;VMNUM&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"You must input a number."</span></span><br><span class="line">    <span class="built_in">exit</span> 65</span><br><span class="line"><span class="keyword">elif</span> [[  <span class="variable">$&#123;VMNUM&#125;</span> =~ [a‐z]  ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"You must input a number."</span></span><br><span class="line">    <span class="built_in">exit</span> 66</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$&#123;VMNUM&#125;</span> -lt 1 -o <span class="variable">$&#123;VMNUM&#125;</span> -gt 99 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Input out of range"</span></span><br><span class="line">    <span class="built_in">exit</span> 67</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">NEWVM=rh7_node<span class="variable">$&#123;VMNUM&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$IMG_DIR</span>/<span class="variable">$&#123;NEWVM&#125;</span>.img ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File exists."</span></span><br><span class="line">    <span class="built_in">exit</span> 68</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">"Creating Virtual Machine disk image......\t"</span></span><br><span class="line">qemu‐img create -f qcow2 ‐b <span class="variable">$IMG_DIR</span>/.<span class="variable">$&#123;BASEVM&#125;</span>.img <span class="variable">$IMG_DIR</span>/<span class="variable">$&#123;NEWVM&#125;</span>.img &amp;&gt; /dev/null</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[32;1m[OK]\e[0m"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#virsh dumpxml $&#123;BASEVM&#125; &gt; /tmp/myvm.xml</span></span><br><span class="line">cat /var/lib/libvirt/images/.rhel7.xml &gt; /tmp/myvm.xml</span><br><span class="line">sed -i <span class="string">"/&lt;name&gt;<span class="variable">$&#123;BASEVM&#125;</span>/s/<span class="variable">$&#123;BASEVM&#125;</span>/<span class="variable">$&#123;NEWVM&#125;</span>/"</span> /tmp/myvm.xml</span><br><span class="line">sed -i <span class="string">"/uuid/s/&lt;uuid&gt;.*&lt;\/uuid&gt;/&lt;uuid&gt;<span class="variable">$(uuidgen)</span>&lt;\/uuid&gt;/"</span> /tmp/myvm.xml</span><br><span class="line">sed -i <span class="string">"/<span class="variable">$&#123;BASEVM&#125;</span>\.img/s/<span class="variable">$&#123;BASEVM&#125;</span>/<span class="variable">$&#123;NEWVM&#125;</span>/"</span> /tmp/myvm.xml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改 MAC 地址,本例使用的是常量,每位使用该脚本的用户需要根据实际情况修改这些值 </span></span><br><span class="line"><span class="comment"># 最好这里可以使用便利,这样更适合于批量操作,可以克隆更多虚拟机 </span></span><br><span class="line">sed -i <span class="string">"/mac /s/a1/0c/"</span> /tmp/myvm.xml</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">"Defining new virtual machine......\t\t"</span></span><br><span class="line">virsh define /tmp/myvm.xml &amp;&gt; /dev/null</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[32;1m[OK]\e[0m"</span></span><br></pre></td></tr></table></figure><h3 id="48、使用脚本开启关闭虚拟机">48、使用脚本开启关闭虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用脚本开启关闭虚拟机 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本通过调用virsh命令实现对虚拟机的管理,如果没有该命令,需要安装 libvirt‐client 软件包</span></span><br><span class="line"><span class="comment"># $1是脚本的第1个参数,$2是脚本的第2个参数</span></span><br><span class="line"><span class="comment"># 第1个参数是你希望对虚拟机进行的操作指令,第2个参数是虚拟机名称</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  list)</span><br><span class="line">    virsh list --all</span><br><span class="line">    ;;</span><br><span class="line">  start)</span><br><span class="line">    virsh start <span class="variable">$2</span></span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    virsh destroy <span class="variable">$2</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="built_in">enable</span>)</span><br><span class="line">    virsh autostart <span class="variable">$2</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="built_in">disable</span>)</span><br><span class="line">    virsh autostart --<span class="built_in">disable</span> <span class="variable">$2</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span> list"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span> [start|stop|enable|disable]  VM_name"</span></span><br><span class="line">    cat &lt;&lt; EOF</span><br><span class="line">    <span class="comment">#list      显示虚拟机列表</span></span><br><span class="line">    <span class="comment">#start     启动虚拟机</span></span><br><span class="line">    <span class="comment">#stop      关闭虚拟机</span></span><br><span class="line">    <span class="comment">#enable    设置虚拟机为开机自启</span></span><br><span class="line">    <span class="comment">#disable   关闭虚拟机开机自启功能</span></span><br><span class="line">    EOF</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="49、调整虚拟机内存参数的-shell-脚本">49、调整虚拟机内存参数的 shell 脚本 </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调整虚拟机内存参数的 shell 脚本 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本通过调用 virsh 命令实现对虚拟机的管理,如果没有该命令,需要安装 libvirt‐client 软件包</span></span><br><span class="line">cat &lt;&lt; EOF</span><br><span class="line">1.调整虚拟机最大内存数值</span><br><span class="line">2.调整实际分配给虚拟机的内存数值</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请选择[1‐2]:"</span> select</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$select</span> <span class="keyword">in</span></span><br><span class="line">  1)</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">"请输入虚拟机名称"</span> name</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">"请输入最大内存数值(单位:k):"</span> size</span><br><span class="line">      virsh setmaxmem <span class="variable">$name</span> --size <span class="variable">$size</span> --config</span><br><span class="line">      ;;</span><br><span class="line">  2)</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">"请输入虚拟机名称"</span> name</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">"请输入实际分配内存数值(单位:k):"</span> size</span><br><span class="line">      virsh setmem <span class="variable">$name</span> <span class="variable">$size</span></span><br><span class="line">      ;;</span><br><span class="line">  *)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Error"</span></span><br><span class="line">      ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="50、查看-KVM-虚拟机中的网卡信息-不需要进入启动或进入虚拟机">50、查看 KVM 虚拟机中的网卡信息(不需要进入启动或进入虚拟机) </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看 KVM 虚拟机中的网卡信息(不需要进入启动或进入虚拟机) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 该脚本使用 guestmount 工具,可以将虚拟机的磁盘系统挂载到真实机文件系统中</span></span><br><span class="line"><span class="comment"># Centos7.2 中安装 libguestfs‐tools‐c 可以获得 guestmount 工具</span></span><br><span class="line"><span class="comment"># 虚拟机可以启动或者不启动都不影响该脚本的使用</span></span><br><span class="line"><span class="comment"># 将虚拟机磁盘文件挂载到文件系统后,就可以直接读取磁盘文件中的网卡配置文件中的数据</span></span><br><span class="line">clear</span><br><span class="line">mountpoint=<span class="string">"/media/virtimage"</span></span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; mkdir <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"输入虚拟机名称:"</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请稍后..."</span></span><br><span class="line"><span class="comment"># 如果有设备挂载到该挂载点,则先 umount 卸载</span></span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">"<span class="variable">$mountpoint</span>"</span> ;<span class="keyword">then</span></span><br><span class="line">  umount <span class="variable">$mountpoint</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 只读的方式,将虚拟机的磁盘文件挂载到特定的目录下,这里是/media/virtimage 目录</span></span><br><span class="line">guestmount -r -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m<span class="variable">$name</span> 虚拟机中网卡列表如下:\033[0m"</span></span><br><span class="line">dev=$(ls /media/virtimage/etc/sysconfig/network‐scripts/ifcfg-* |awk -F<span class="string">"[/‐]"</span> <span class="string">'&#123;print $9&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$dev</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"+++++++++++++++++++++++++++++++++++++++++++"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m 网卡 IP 地址信息如下:\033[0m"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$dev</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$i</span>:"</span></span><br><span class="line">  grep -q <span class="string">"IPADDR"</span> /media/virtimage/etc/sysconfig/network‐scripts/ifcfg-<span class="variable">$i</span> || <span class="built_in">echo</span> <span class="string">"未配置 IP地址"</span></span><br><span class="line">  awk -F= <span class="string">'/IPADDR/&#123;print $2&#125;'</span> /media/virtimage/etc/sysconfig/network-scripts/ifcfg-<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"+++++++++++++++++++++++++++++++++++++++++++"</span></span><br></pre></td></tr></table></figure><h3 id="51、不登陆虚拟机-修改虚拟机网卡-IP-地址">51、不登陆虚拟机,修改虚拟机网卡 IP 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 不登陆虚拟机,修改虚拟机网卡 IP 地址 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 该脚本使用 guestmount 工具,Centos7.2 中安装 libguestfs‐tools‐c 可以获得 guestmount 工具</span></span><br><span class="line"><span class="comment"># 脚本在不登陆虚拟机的情况下,修改虚拟机的 IP 地址信息</span></span><br><span class="line"><span class="comment"># 在某些环境下,虚拟机没有 IP 或 IP 地址与真实主机不在一个网段</span></span><br><span class="line"><span class="comment"># 真实主机在没有 virt‐manger 图形的情况下,远程连接虚拟机很麻烦</span></span><br><span class="line"><span class="comment"># 该脚本可以解决类似的问题</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入虚拟机名称:"</span> name</span><br><span class="line"><span class="keyword">if</span> virsh domstate <span class="variable">$name</span> | grep -q running ;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"修改虚拟机网卡数据,需要关闭虚拟机"</span></span><br><span class="line">  virsh destroy <span class="variable">$name</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">mountpoint=<span class="string">"/media/virtimage"</span></span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; mkdir <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请稍后..."</span></span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">"<span class="variable">$mountpoint</span>"</span> ;<span class="keyword">then</span></span><br><span class="line">  umount <span class="variable">$mountpoint</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">guestmount  -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入需要修改的网卡名称:"</span> dev</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入 IP 地址:"</span> addr</span><br><span class="line"><span class="comment"># 判断原本网卡配置文件中是否有 IP 地址,有就修改该 IP,没有就添加一个新的 IP 地址</span></span><br><span class="line"><span class="keyword">if</span> grep -q <span class="string">"IPADDR"</span>  <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg‐<span class="variable">$dev</span> ;<span class="keyword">then</span></span><br><span class="line">  sed -i <span class="string">"/IPADDR/s/=.*/=<span class="variable">$addr</span>/"</span>  <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg‐<span class="variable">$dev</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"IPADDR=<span class="variable">$addr</span>"</span> &gt;&gt; <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg‐<span class="variable">$dev</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 如果网卡配置文件中有客户配置的 IP 地址,则脚本提示修改 IP 完成</span></span><br><span class="line">awk -F= -v x=<span class="variable">$addr</span> <span class="string">'$2==x&#123;print "完成..."&#125;'</span>  <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg-<span class="variable">$dev</span></span><br></pre></td></tr></table></figure><h3 id="52、破解虚拟机密码-无密码登陆虚拟机系统">52、破解虚拟机密码,无密码登陆虚拟机系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 破解虚拟机密码,无密码登陆虚拟机系统 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 该脚本使用 guestmount 工具,Centos7.2 中安装 libguestfs‐tools‐c 可以获得 guestmount 工具</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入虚拟机名称:"</span> name</span><br><span class="line"><span class="keyword">if</span> virsh domstate <span class="variable">$name</span> | grep -q running ;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"破解,需要关闭虚拟机"</span></span><br><span class="line">  virsh destroy <span class="variable">$name</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">mountpoint=<span class="string">"/media/virtimage"</span></span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; mkdir <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请稍后..."</span></span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">"<span class="variable">$mountpoint</span>"</span> ;<span class="keyword">then</span></span><br><span class="line">  umount <span class="variable">$mountpoint</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">guestmount -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span></span><br><span class="line"><span class="comment"># 将 passwd 中密码占位符号 x 删除,该账户即可实现无密码登陆系统</span></span><br><span class="line">sed -i <span class="string">"/^root/s/x//"</span> <span class="variable">$mountpoint</span>/etc/passwd</span><br></pre></td></tr></table></figure><h3 id="53、Shell-脚本对信号的处理-执行脚本后-按键盘-Ctrl-C-无法终止">53、Shell 脚本对信号的处理,执行脚本后,按键盘 Ctrl+C 无法终止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Shell 脚本对信号的处理,执行脚本后,按键盘 Ctrl+C 无法终止的脚本 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 trap 命令可以拦截用户通过键盘或 kill 命令发送过来的信号</span></span><br><span class="line"><span class="comment"># 使用 kill ‐l 可以查看 Linux 系统中所有的信号列表,其中 2 代表 Ctrl+C</span></span><br><span class="line"><span class="comment"># trap 当发现有用户 ctrl+C 希望终端脚本时,就执行 echo "暂停 10s";sleep 10 这两条命令</span></span><br><span class="line"><span class="comment"># 另外用户使用命令:[ kill ‐2 脚本的 PID ] 也可以中断脚本和 Ctrl+C 一样的效果,都会被 trap 拦截</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">'echo "暂停 10s";sleep 10'</span> 2</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"go go go"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="54、一键部署-memcached">54、一键部署 memcached</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一键部署 memcached </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本用源码来安装 memcached 服务器</span></span><br><span class="line"><span class="comment"># 注意:如果软件的下载链接过期了,请更新 memcached 的下载链接</span></span><br><span class="line">wget http://www.memcached.org/files/memcached-1.5.1.tar.gz</span><br><span class="line">yum -y install gcc</span><br><span class="line">tar -xf  memcached‐1.5.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> memcached‐1.5.1</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="55、一键配置-VNC-远程桌面服务器-无密码版本">55、一键配置 VNC 远程桌面服务器(无密码版本)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一键配置 VNC 远程桌面服务器(无密码版本)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本配置的 VNC 服务器,客户端无需密码即可连接</span></span><br><span class="line"><span class="comment"># 客户端仅有查看远程桌面的权限,没有鼠标和键盘的操作权限</span></span><br><span class="line"> </span><br><span class="line">rpm --quiet -q tigervnc‐server</span><br><span class="line"><span class="keyword">if</span> [  $? -ne  0 ];<span class="keyword">then</span></span><br><span class="line">  yum  -y  tigervnc‐server</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">x0vncserver AcceptKeyEvents=0 AlwaysShared=1 \</span><br><span class="line">AcceptPointerEvents=0 SecurityTypes=None  rfbport=5908</span><br></pre></td></tr></table></figure><h3 id="56、关闭-SELinux">56、关闭 SELinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭 SELinux </span></span><br><span class="line"> </span><br><span class="line">sed -i  <span class="string">'/^SELINUX/s/=.*/=disabled/'</span> /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h3 id="57、查看所有虚拟机磁盘使用量以及CPU使用量信息">57、查看所有虚拟机磁盘使用量以及CPU使用量信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看所有虚拟机磁盘使用量以及CPU使用量信息 </span></span><br><span class="line"> </span><br><span class="line">virt‐df</span><br><span class="line"><span class="built_in">read</span> -n1 <span class="string">"按任意键继续"</span> key</span><br><span class="line">virt‐top</span><br></pre></td></tr></table></figure><h3 id="58、根据计算机当前时间-返回问候语-可以将该脚本设置为开机启动">58、根据计算机当前时间,返回问候语,可以将该脚本设置为开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 根据计算机当前时间,返回问候语,可以将该脚本设置为开机启动 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 00‐12 点为早晨,12‐18 点为下午,18‐24 点为晚上</span></span><br><span class="line"><span class="comment"># 使用 date 命令获取时间后,if 判断时间的区间,确定问候语内容</span></span><br><span class="line">tm=$(date +%H)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$tm</span> -le 12 ];<span class="keyword">then</span></span><br><span class="line">  msg=<span class="string">"Good Morning <span class="variable">$USER</span>"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$tm</span> -gt 12 -a <span class="variable">$tm</span> -le 18 ];<span class="keyword">then</span></span><br><span class="line">    msg=<span class="string">"Good Afternoon <span class="variable">$USER</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    msg=<span class="string">"Good Night <span class="variable">$USER</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"当前时间是:<span class="variable">$(date +"%Y‐%m‐%d %H:%M:%S")</span>"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[34m<span class="variable">$msg</span>\033[0m"</span></span><br></pre></td></tr></table></figure><h3 id="59、读取用户输入的账户名称-将账户名写入到数组保存">59、读取用户输入的账户名称,将账户名写入到数组保存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 读取用户输入的账户名称,将账户名写入到数组保存 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义数组名称为 name,数组的下标为 i,小标从 0 开始,每输入一个账户名,下标加 1,继续存下一个账户</span></span><br><span class="line"><span class="comment"># 最后,输入 over,脚本输出总结性信息后脚本退出</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"请输入账户名,输入 over 结束:"</span> key</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$key</span> == <span class="string">"over"</span> ];<span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    name[<span class="variable">$i</span>]=<span class="variable">$key</span></span><br><span class="line">    <span class="built_in">let</span> i++</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"总账户名数量:<span class="variable">$&#123;#name[*]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;name[@]&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="60、判断文件或目录是否存在">60、判断文件或目录是否存在</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 判断文件或目录是否存在 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ] ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"未输入任何参数,请输入参数"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"用法:<span class="variable">$0</span> [文件名|目录名]"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$1</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"该文件,存在"</span></span><br><span class="line">  ls -l <span class="variable">$1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"没有该文件"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -d  <span class="variable">$1</span> ];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"该目录,存在"</span></span><br><span class="line">     ls -ld  <span class="variable">$2</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"没有该目录"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="61、打印各种格式的时间">61、打印各种格式的时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印各种时间格式 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示星期简称(如:Sun)"</span></span><br><span class="line">date +%a</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示星期全称(如:Sunday)"</span></span><br><span class="line">date +%A</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示月份简称(如:Jan)"</span></span><br><span class="line">date +%b</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示月份全称(如:January)"</span></span><br><span class="line">date +%B</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示数字月份(如:12)"</span></span><br><span class="line">date +%m</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示数字日期(如:01 号)"</span></span><br><span class="line">date +%d</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示数字年(如:01 号)"</span></span><br><span class="line">date +%Y <span class="built_in">echo</span> <span class="string">"显示年‐月‐日"</span></span><br><span class="line">date +%F</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示小时(24 小时制)"</span></span><br><span class="line">date +%H</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示分钟(00..59)"</span></span><br><span class="line">date +%M</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示秒"</span></span><br><span class="line">date +%S</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示纳秒"</span></span><br><span class="line">date +%N</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"组合显示"</span></span><br><span class="line">date +<span class="string">"%Y%m%d %H:%M:%S"</span></span><br></pre></td></tr></table></figure><h3 id="62、使用-egrep-过滤-MAC-地址">62、使用 egrep 过滤 MAC 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 egrep 过滤 MAC 地址 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># MAC 地址由 16 进制组成,如 AA:BB:CC:DD:EE:FF</span></span><br><span class="line"><span class="comment"># [0‐9a‐fA‐F]&#123;2&#125;表示一段十六进制数值,&#123;5&#125;表示连续出现5组前置:的十六进制</span></span><br><span class="line">egrep <span class="string">"[0‐9a‐fA‐F]&#123;2&#125;(:[0‐9a‐fA‐F]&#123;2&#125;)&#123;5&#125;"</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><h3 id="63、生成签名私钥和证书">63、生成签名私钥和证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成签名私钥和证书 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入存放证书的目录:"</span> dir</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$dir</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"该目录不存在"</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入密钥名称:"</span> name</span><br><span class="line"><span class="comment"># 使用 openssl 生成私钥</span></span><br><span class="line">openssl genrsa -out <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;name&#125;</span>.key</span><br><span class="line"><span class="comment"># 使用 openssl 生成证书 #subj 选项可以在生成证书时,非交互自动填写 Common Name 信息</span></span><br><span class="line">openssl req -new -x509 -key <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;name&#125;</span>.key -subj <span class="string">"/CN=common"</span> -out <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;name&#125;</span>.crt</span><br></pre></td></tr></table></figure><h3 id="64、使用awk编写的wc程序">64、使用awk编写的wc程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用awk编写的wc程序 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自定义变量 chars 变量存储字符个数,自定义变量 words 变量存储单词个数</span></span><br><span class="line"><span class="comment"># awk 内置变量 NR 存储行数</span></span><br><span class="line"><span class="comment"># length()为 awk 内置函数,用来统计每行的字符数量,因为每行都会有一个隐藏的$,所以每次统计后都+1</span></span><br><span class="line"><span class="comment"># wc 程序会把文件结尾符$也统计在内,可以使用 cat ‐A 文件名,查看该隐藏字符</span></span><br><span class="line">awk <span class="string">'&#123;chars+=length($0)+1;words+=NF&#125; END&#123;print NR,words,chars&#125;'</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><h2 id="二、游戏相关">二、游戏相关</h2><h3 id="1、猜数字游戏">1、猜数字游戏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本生成一个 100 以内的随机数,提示用户猜数字,根据用户的输入,提示用户猜对了,</span></span><br><span class="line"><span class="comment"># 猜小了或猜大了,直至用户猜对脚本结束。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># RANDOM 为系统自带的系统变量,值为 0‐32767的随机数</span></span><br><span class="line"><span class="comment"># 使用取余算法将随机数变为 1‐100 的随机数</span></span><br><span class="line">num=$[RANDOM%100+1]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$num</span>"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 read 提示用户猜数字</span></span><br><span class="line"><span class="comment"># 使用 if 判断用户猜数字的大小关系:‐eq(等于),‐ne(不等于),‐gt(大于),‐ge(大于等于),</span></span><br><span class="line"><span class="comment"># ‐lt(小于),‐le(小于等于)</span></span><br><span class="line"><span class="keyword">while</span>  :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"计算机生成了一个 1‐100 的随机数,你猜: "</span> cai</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$cai</span> -eq <span class="variable">$num</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"恭喜,猜对了"</span></span><br><span class="line">         <span class="built_in">exit</span></span><br><span class="line">      <span class="keyword">elif</span> [ <span class="variable">$cai</span> -gt <span class="variable">$num</span> ]</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">"Oops,猜大了"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">"Oops,猜小了"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="2、石头、剪刀、布游戏">2、石头、剪刀、布游戏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写脚本,实现人机&lt;石头,剪刀,布&gt;游戏</span></span><br><span class="line">game=(石头 剪刀 布)</span><br><span class="line">num=$[RANDOM%3]</span><br><span class="line">computer=<span class="variable">$&#123;game[$num]&#125;</span></span><br><span class="line"><span class="comment"># 通过随机数获取计算机的出拳</span></span><br><span class="line"><span class="comment"># 出拳的可能性保存在一个数组中,game[0],game[1],game[2]分别是 3 中不同的可能</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请根据下列提示选择您的出拳手势"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1.石头"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2.剪刀"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"3.布"</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请选择 1‐3:"</span> person</span><br><span class="line"><span class="keyword">case</span>  <span class="variable">$person</span>  <span class="keyword">in</span></span><br><span class="line">1)</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"平局"</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 1 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"你赢"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"计算机赢"</span></span><br><span class="line">  <span class="keyword">fi</span>;;</span><br><span class="line">2)   </span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"计算机赢"</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 1 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"平局"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你赢"</span></span><br><span class="line">  <span class="keyword">fi</span>;;</span><br><span class="line">3)</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你赢"</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 1 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"计算机赢"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"平局"</span></span><br><span class="line">  <span class="keyword">fi</span>;;</span><br><span class="line">*)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"必须输入 1‐3 的数字"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="3、9-9-乘法表">3、9*9 乘法表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 9*9 乘法表(编写 shell 脚本,打印 9*9 乘法表) </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 9`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> `seq <span class="variable">$i</span>`</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">         <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$j</span>*<span class="variable">$i</span>=$[i*j]  "</span></span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="4、点名器脚本">4、点名器脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写一个点名器脚本</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 该脚本,需要提前准备一个 user.txt 文件</span></span><br><span class="line"><span class="comment"># 该文件中需要包含所有姓名的信息,一行一个姓名,脚本每次随机显示一个姓名</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment">#统计 user 文件中有多少用户</span></span><br><span class="line">line=`cat user.txt |wc ‐l`</span><br><span class="line">num=$[RANDOM%line+1]</span><br><span class="line">sed -n <span class="string">"<span class="variable">$&#123;num&#125;</span>p"</span>  user.txt</span><br><span class="line">sleep 0.2</span><br><span class="line">clear</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="5、对-100-以内的所有正整数相加求和">5、对 100 以内的所有正整数相加求和</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 对 100 以内的所有正整数相加求和(1+2+3+4...+100)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#seq 100 可以快速自动生成 100 个整数</span></span><br><span class="line">sum=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 100`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sum=$[sum+i]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"总和是:<span class="variable">$sum</span>"</span></span><br></pre></td></tr></table></figure><h3 id="6、打印国际象棋棋盘">6、打印国际象棋棋盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印国际象棋棋盘</span></span><br><span class="line"><span class="comment"># 设置两个变量,i 和 j,一个代表行,一个代表列,国际象棋为 8*8 棋盘</span></span><br><span class="line"><span class="comment"># i=1 是代表准备打印第一行棋盘,第 1 行棋盘有灰色和蓝色间隔输出,总共为 8 列</span></span><br><span class="line"><span class="comment"># i=1,j=1 代表第 1 行的第 1 列;i=2,j=3 代表第 2 行的第 3 列</span></span><br><span class="line"><span class="comment"># 棋盘的规律是 i+j 如果是偶数,就打印蓝色色块,如果是奇数就打印灰色色块</span></span><br><span class="line"><span class="comment"># 使用 echo ‐ne 打印色块,并且打印完成色块后不自动换行,在同一行继续输出其他色块</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..8&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> &#123;1..8&#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      sum=$[i+j]</span><br><span class="line">    <span class="keyword">if</span> [  $[sum%2] -eq 0 ];<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> -ne <span class="string">"\033[46m  \033[0m"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> -ne <span class="string">"\033[47m  \033[0m"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="7、提示用户输入年份后判断该年是否为闰年">7、提示用户输入年份后判断该年是否为闰年</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提示用户输入年份后判断该年是否为闰年</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 能被4整除并且并不能被100整除的年份是闰年</span></span><br><span class="line"><span class="comment"># 能被400整除的年份也是闰年</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入一个年份:"</span> year</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$year</span>"</span> = <span class="string">""</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"没有输入年份"</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#使用正则测试变量 year 中是否包含大小写字母</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$year</span>"</span> =~ [a‐Z] ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你输入的不是数字"</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 判断是否为闰年</span></span><br><span class="line"><span class="keyword">if</span> [ $[year % 4] -eq 0 ] &amp;&amp; [ $[year % 100] -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$year</span>年是闰年"</span>  </span><br><span class="line"><span class="keyword">elif</span> [ $[year % 400] -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$year</span>年是闰年"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$year</span>年不是闰年"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="8、使用脚本循环创建三位数字的文本文件-111-999-的文件">8、使用脚本循环创建三位数字的文本文件(111-999 的文件)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用脚本循环创建三位数字的文本文件(111-999 的文件) </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> &#123;1..9&#125;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> &#123;1..9&#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      touch /tmp/<span class="variable">$i</span><span class="variable">$j</span><span class="variable">$k</span>.txt</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="9、从键盘读取一个论坛积分-判断论坛用户等级">9、从键盘读取一个论坛积分,判断论坛用户等级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 从键盘读取一个论坛积分,判断论坛用户等级</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#等级分类如下:</span></span><br><span class="line"><span class="comment">#  大于等于 90        神功绝世</span></span><br><span class="line"><span class="comment">#  大于等于 80,小于 90       登峰造极</span></span><br><span class="line"><span class="comment">#  大于等于 70,小于 80       炉火纯青</span></span><br><span class="line"><span class="comment">#  大于等于 60,小于 70       略有小成</span></span><br><span class="line"><span class="comment">#  小于 60               初学乍练</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入积分(0‐100):"</span> JF</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$JF</span> -ge 90 ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,神功绝世"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$JF</span> -ge 80 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,登峰造极"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$JF</span> -ge 70 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,炉火纯青"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$JF</span> -lt 60 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,略有小成"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,初学乍练"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="10、判断用户输入的数据类型-字母、数字或其他">10、判断用户输入的数据类型(字母、数字或其他) </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 判断用户输入的数据类型(字母、数字或其他) </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入一个字符:"</span> KEY</span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$KEY</span>"</span> <span class="keyword">in</span></span><br><span class="line">  [a‐z]|[A‐Z])</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"字母"</span> </span><br><span class="line">    ;;</span><br><span class="line">  [0‐9])</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"数字"</span> </span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"空格、功能键或其他控制字符"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="11、打印斐波那契数列">11、打印斐波那契数列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印斐波那契数列(该数列的特点是后一个数字,永远都是前 2 个数字之和) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 斐波那契数列后一个数字永远是前 2 个数字之和</span></span><br><span class="line"><span class="comment"># 如:0  1  1  2  3  5  8  13 ... ...</span></span><br><span class="line">list=(0 1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 2 11`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  list[<span class="variable">$i</span>]=`expr <span class="variable">$&#123;list[‐1]&#125;</span> + <span class="variable">$&#123;list[‐2]&#125;</span>`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list[@]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="12、判断用户输入的是-Yes-或-NO">12、判断用户输入的是 Yes 或 NO</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 判断用户输入的是 Yes 或 NO </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p  <span class="string">"Are you sure?[y/n]:"</span>  sure</span><br><span class="line"><span class="keyword">case</span>  <span class="variable">$sure</span>  <span class="keyword">in</span></span><br><span class="line">  y|Y|Yes|YES)  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"you enter <span class="variable">$a</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    n|N|NO|no)</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"you enter <span class="variable">$a</span>"</span></span><br><span class="line">     ;;</span><br><span class="line">    *)</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"error"</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="13、使用-shell-脚本打印图形">13、使用 shell 脚本打印图形</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 shell 脚本打印如下图形: </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印第一组图片</span></span><br><span class="line"><span class="comment"># for(())为类 C 语言的语法格式,也可以使用 for i  in;do  ;done 的格式替换</span></span><br><span class="line"><span class="comment"># for((i=1;i&lt;=9;i++))循环会执行 9 次,i 从 1 开始到 9,每循环一次 i 自加 1</span></span><br><span class="line">clear</span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=9; i++ ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$i</span>"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">read</span>  -n1  <span class="string">"按任意键继续"</span>  key</span><br><span class="line"><span class="comment">#打印第二组图片</span></span><br><span class="line">clear</span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=5; i++ )) </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">" |"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"_ "</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">read</span>  -n1  <span class="string">"按任意键继续"</span>  key</span><br><span class="line"><span class="comment">#打印第三组图片</span></span><br><span class="line">clear</span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=5; i++ ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">" *"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> (( i=5; i&gt;=1; i-- ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">" *"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="14、统计双色球各个数字的中奖概率">14、统计双色球各个数字的中奖概率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计双色球各个数字的中奖概率 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 往期双色球中奖号码如下:</span></span><br><span class="line"><span class="comment"># 01 04 11 28 31 32  16</span></span><br><span class="line"><span class="comment"># 04 07 08 18 23 24  02</span></span><br><span class="line"><span class="comment"># 02 05 06 16 28 29  04</span></span><br><span class="line"><span class="comment"># 04 19 22 27 30 33  01</span></span><br><span class="line"><span class="comment"># 05 10 18 19 30 31  03</span></span><br><span class="line"><span class="comment"># 02 06 11 12 19 29  06</span></span><br><span class="line"><span class="comment"># 统计篮球和红球数据出现的概率次数(篮球不分顺序,统计所有篮球混合在一起的概率)</span></span><br><span class="line">awk <span class="string">'&#123;print $1"\n"$2"\n"$3"\n"$4"\n"$5"\n"$6&#125;'</span> 1.txt | sort | uniq -c | sort</span><br><span class="line">awk <span class="string">'&#123;print $7&#125;'</span> 1.txt | sort | uniq -c | sort</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Linux运维监控相关&quot;&gt;一、Linux运维监控相关&lt;/h2&gt;
&lt;h3 id=&quot;1、创建-Linux-系统账户及密码&quot;&gt;1、创建 Linux 系统账户及密码&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通过位置变量创建 Linux 系统账户及密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#$1 是执行脚本的第一个参数,$2 是执行脚本的第二个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useradd    &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;  |  passwd  ‐‐stdin  &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户不输入账户名,则提示必须输入账户名并退出脚本;如果用户不输入密码,则统一使用默认的 123456 作为默认密码&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://www.shawn22.xyz/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux-Systemd教程</title>
    <link href="https://www.shawn22.xyz/posts/523c86a2.html"/>
    <id>https://www.shawn22.xyz/posts/523c86a2.html</id>
    <published>2022-09-28T09:34:28.000Z</published>
    <updated>2022-09-28T09:48:19.191Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Systemd 概述</h1><h2 id="1、简介">1、简介</h2><p>Systemd 是一系列工具的集合，其作用也远远不仅是启动操作系统，它还接管了后台服务、结束、状态查询，以及日志归档、设备管理、电源管理、定时任务等许多职责，并支持通过特定事件（如插入特定 USB 设备）和特定端口数据触发的 On-demand（按需）任务。</p><p>Systemd 的后台服务还有一个特殊的身份——它是系统中 PID 值为 1 的进程。</p><h2 id="2、Systemd-架构">2、Systemd 架构</h2><p><img src="https://img-blog.csdnimg.cn/b4d8019a19b54fe3a57a30c21a0c6934.png" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="3、Systemd系统管理">3、Systemd系统管理</h2><p>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面，systemctl是 Systemd 的主命令，用于管理系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ===============systemctl是 Systemd 的主命令，用于管理系统=================</span></span><br><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">sudo systemctl reboot</span><br><span class="line"><span class="comment"># 关闭系统，切断电源</span></span><br><span class="line">sudo systemctl poweroff</span><br><span class="line"><span class="comment"># CPU停止工作</span></span><br><span class="line">sudo systemctl halt</span><br><span class="line"><span class="comment"># 暂停系统</span></span><br><span class="line">sudo systemctl <span class="built_in">suspend</span></span><br><span class="line"><span class="comment"># 让系统进入冬眠状态</span></span><br><span class="line">sudo systemctl hibernate</span><br><span class="line"><span class="comment"># 让系统进入交互式休眠状态</span></span><br><span class="line">sudo systemctl hybrid-sleep</span><br><span class="line"><span class="comment"># 启动进入救援状态（单用户状态）</span></span><br><span class="line">sudo systemctl rescue</span><br><span class="line"></span><br><span class="line"><span class="comment">#================systemd-analyze命令用于查看启动耗时======================</span></span><br><span class="line"><span class="comment"># 查看启动耗时</span></span><br><span class="line">systemd-analyze</span><br><span class="line"><span class="comment"># 查看每个服务的启动耗时</span></span><br><span class="line">systemd-analyze blame</span><br><span class="line"><span class="comment"># 显示瀑布状的启动过程流</span></span><br><span class="line">systemd-analyze critical-chain</span><br><span class="line"><span class="comment"># 显示指定服务的启动流</span></span><br><span class="line">systemd-analyze critical-chain atd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===============hostnamectl命令用于查看当前主机的信息=======================</span></span><br><span class="line"><span class="comment"># 显示当前主机的信息</span></span><br><span class="line">hostnamectl</span><br><span class="line"><span class="comment"># 设置主机名。</span></span><br><span class="line">sudo hostnamectl <span class="built_in">set</span>-hostname rhel7</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================localectl命令用于查看本地化设置============================</span></span><br><span class="line"><span class="comment"># 查看本地化设置</span></span><br><span class="line">localectl</span><br><span class="line"><span class="comment"># 设置本地化参数。</span></span><br><span class="line">sudo localectl <span class="built_in">set</span>-locale LANG=en_GB.utf8</span><br><span class="line">sudo localectl <span class="built_in">set</span>-keymap en_GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================timedatectl命令用于查看当前时区设置=======================</span></span><br><span class="line"><span class="comment"># 查看当前时区设置</span></span><br><span class="line">timedatectl</span><br><span class="line"><span class="comment"># 显示所有可用的时区</span></span><br><span class="line">timedatectl list-timezones</span><br><span class="line"><span class="comment"># 设置当前时区</span></span><br><span class="line">sudo timedatectl <span class="built_in">set</span>-timezone America/New_York</span><br><span class="line">sudo timedatectl <span class="built_in">set</span>-time YYYY-MM-DD</span><br><span class="line">sudo timedatectl <span class="built_in">set</span>-time HH:MM:SS</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================loginctl命令用于查看当前登录的用户========================</span></span><br><span class="line"><span class="comment"># 列出当前session</span></span><br><span class="line">loginctl list-sessions</span><br><span class="line"><span class="comment"># 列出当前登录用户</span></span><br><span class="line">loginctl list-users</span><br><span class="line"><span class="comment"># 列出显示指定用户的信息</span></span><br><span class="line">loginctl show-user shawn</span><br></pre></td></tr></table></figure><h2 id="4、Systemd-的-Unit-文件">4、Systemd 的 Unit 文件</h2><blockquote><p>Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）。在 Systemd 的生态圈中，Unit 文件统一了过去各种不同系统资源配置格式，例如服务的启/停、定时任务、设备自动挂载、网络配置、虚拟内存配置等。而 Systemd 通过不同的文件后缀来区分这些配置文件</p></blockquote><h3 id="4-1-12-种-Unit-文件类型">4.1 12 种 Unit 文件类型</h3><ul><li><p>automount：用于控制自动挂载文件系统，相当于 SysV-init 的 autofs 服务</p></li><li><p>device：对于 /dev 目录下的设备，主要用于定义设备之间的依赖关系</p></li><li><p>mount：定义系统结构层次中的一个挂载点，可以替代过去的 /etc/fstab 配置文件</p></li><li><p>path：用于监控指定目录或文件的变化，并触发其它 Unit 运行</p></li><li><p>scope：这种 Unit 文件不是用户创建的，而是 Systemd 运行时产生的，描述一些系统服务的分组信息</p></li><li><p>service：封装守护进程的启动、停止、重启和重载操作，是<strong>最常见的一种 Unit 文件</strong></p></li><li><p>slice：用于表示一个 CGroup 的树，通常用户不会自己创建这样的 Unit 文件</p></li><li><p>snapshot：用于表示一个由 systemctl snapshot 命令创建的 Systemd Units 运行状态快照</p></li><li><p>socket：<strong>监控来自于系统或网络的数据消息，用于实现基于数据自动触发服务启动</strong></p></li><li><p>swap：定义一个用户做虚拟内存的交换分区</p></li><li><p>target：用于对 Unit 文件进行逻辑分组，引导其它 Unit 的执行。它替代了 SysV-init 运行级别的作用，并提供更灵活的基于特定设备事件的启动方式</p></li><li><p>timer：<strong>用于配置在特定时间触发的任务，替代了 Crontab 的功能</strong></p></li></ul><h3 id="4-2-Systemd-目录">4.2 Systemd 目录</h3><p>Unit 文件按照 Systemd 约定，应该被放置指定的三个系统目录之一中。这三个目录是有优先级的，如下所示，越靠上的优先级越高。因此，在三个目录中有同名文件的时候，只有优先级最高的目录里的那个文件会被使用。</p><ul><li><p><code>/etc/systemd/system</code>：系统或用户自定义的配置文件</p></li><li><p><code>/run/systemd/system</code>：软件运行时生成的配置文件</p></li><li><p><code>/usr/lib/systemd/system</code>：系统或第三方软件安装时添加的配置文件</p><ul><li><p>CentOS ：Unit 文件指向该目录</p></li><li><p>ubuntu ：被移到了 /lib/systemd/system</p></li></ul></li></ul><p>Systemd 默认从目录 <code>/etc/systemd/system/</code> 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 <code>/usr/lib/systemd/system/</code>，真正的配置文件存放在那个目录</p><h3 id="4-3-Unit-和-Target">4.3 Unit 和 Target</h3><ul><li><p><strong>Unit 是 Systemd 管理系统资源的基本单元</strong>，可以认为每个系统资源就是一个 Unit，并使用一个 Unit 文件定义。在 Unit 文件中需要包含相应服务的描述、属性以及需要运行的命令</p></li><li><p>Target 是 Systemd 中用于指定系统资源启动组的方式，相当于 SysV-init 中的运行级别</p></li></ul><p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于&quot;状态点&quot;，启动某个 Target 就好比启动到某种状态。</p><h1>二、Systemd Service Unit</h1><h2 id="1、简介-v2">1、简介</h2><p>Systemd 服务的 Unit 文件可以分为三个配置区段：</p><ul><li><p>Unit 和 Install 段：所有 Unit 文件通用，用于配置服务（或其它系统资源）的描述、依赖和随系统启动的方式</p></li><li><p>Service 段：服务（Service）类型的 Unit 文件（后缀为 .service）特有的，用于定义服务的具体管理和操作方法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Hello World</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStartPre=-/usr/bin/docker <span class="built_in">kill</span> busybox1</span><br><span class="line">ExecStartPre=-/usr/bin/docker rm busybox1</span><br><span class="line">ExecStartPre=/usr/bin/docker pull busybox</span><br><span class="line">ExecStart=/usr/bin/docker run --name busybox1 busybox /bin/ sh -c <span class="string">"while true; do echo Hello World; sleep 1; done"</span></span><br><span class="line">ExecStop=<span class="string">"/usr/bin/docker stop busybox1"</span></span><br><span class="line">ExecStopPost=<span class="string">"/usr/bin/docker rm busybox1"</span></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="2、Service类型Unit结构详解-常用">2、Service类型Unit结构详解(常用)</h2><h3 id="2-1-Unit段">2.1 Unit段</h3><ul><li><p>Description：描述这个 Unit 文件的信息</p></li><li><p>Documentation：指定服务的文档，可以是一个或多个文档的 URL 路径</p></li><li><p>Requires：依赖的其它 Unit 列表，列在其中的 Unit 模板会在这个服务启动时的同时被启动。并且，如果其中任意一个服务启动失败，这个服务也会被终止</p></li><li><p>Wants：与 Requires 相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模板启动是否成功</p></li><li><p>After：与 Requires 相似，但是在后面列出的所有模块全部启动完成以后，才会启动当前的服务</p></li><li><p>Before：与 After 相反，在启动指定的任务一个模块之间，都会首先确证当前服务已经运行</p></li><li><p>Binds To：与 Requires 相似，失败时失败，成功时成功，但是在这些模板中有任意一个出现意外结束或重启时，这个服务也会跟着终止或重启</p></li><li><p>Part Of：一个 Bind To 作用的子集，仅在列出的任务模块失败或重启时，终止或重启当前服务，而不会随列出模板的启动而启动</p></li><li><p>OnFailure：当这个模板启动失败时，就会自动启动列出的每个模块</p></li><li><p>Conflicts：与这个模块有冲突的模块，如果列出的模块中有已经在运行的，这个服务就不能启动，反之亦然</p></li></ul><h3 id="2-2-Install-段">2.2 Install 段</h3><p>这部分配置的目标模块通常是特定运行目标的 <strong>.target</strong> 文件，用来使得服务在系统启动时自动运行。这个区段可以包含三种启动约束：</p><ul><li><p>WantedBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入 <code>/etc/systemd/system</code> 目录下面以 <code>&lt;Target 名&gt; + .wants</code> 后缀构成的子目录中，如 <code>/etc/systemd/system/multi-user.target.wants/</code></p></li><li><p>RequiredBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入 <code>/etc/systemd/system</code> 目录下面以 <code>&lt;Target 名&gt; + .required</code> 后缀构成的子目录中</p></li><li><p>Also：当前 Unit <code>enable/disable</code> 时，<strong>同时 enable/disable 的其他 Unit</strong></p></li><li><p>Alias：<strong>当前 Unit 可用于启动的别名</strong></p></li></ul><h3 id="2-3-Service-段-重要">2.3 Service 段(重要)</h3><p>用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段分为服务生命周期和服务上下文配置两个方面</p><p><strong>服务生命周期控制相关</strong></p><ul><li><p>Type：<strong>定义启动时的进程行为</strong>，它有以下几种值：</p><ul><li><p>Type=simple：默认值，执行ExecStart指定的命令，启动主进程</p></li><li><p>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</p></li><li><p>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</p></li><li><p>Type=dbus：当前服务通过D-Bus启动</p></li><li><p>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</p></li><li><p>Type=idle：若有其他任务执行完毕，当前服务才会运行</p></li></ul></li><li><p>RemainAfterExit：值为 true 或 false（默认）。当配置为 true 时，Systemd 只会负责启动服务进程，之后即便服务进程退出了，Systemd 也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。</p></li><li><p><strong>ExecStart</strong>：启动当前服务的命令</p></li><li><p>ExecStartPre：启动当前服务之前执行的命令</p></li><li><p>ExecStartPost：启动当前服务之后执行的命令</p></li><li><p><strong>ExecReload</strong>：重启当前服务时执行的命令</p></li><li><p><strong>ExecStop</strong>：停止当前服务时执行的命令</p></li><li><p>ExecStopPost：停止当其服务之后执行的命令</p></li><li><p>RestartSec：自动重启当前服务间隔的秒数</p></li><li><p><strong>Restart</strong>：定义何种情况 Systemd 会自动重启当前服务，可能的值包括 always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</p></li><li><p>TimeoutStartSec：启动服务时等待的秒数，这一配置<strong>对于使用 Docker 容器</strong>而言显得尤为重要，因其第一次运行时可能需要下载镜像，严重延时会容易被 Systemd 误判为启动失败杀死。通常，对于这种服务，将此值指定为 0，从而关闭超时检测</p></li><li><p>TimeoutStopSec：停止服务时的等待秒数，如果超过这个时间仍然没有停止，Systemd 会使用 SIGKILL 信号强行杀死服务的进程</p></li><li><p>KillMode：定义 Systemd 如何停止 sshd 服务。</p><ul><li><p>control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉</p></li><li><p>process：只杀主进程</p></li><li><p>mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号</p></li><li><p>none：没有进程会被杀掉，只是执行服务的 stop 命令。</p></li></ul></li></ul><p><strong>服务上下文配置相关</strong></p><ul><li><p>Environment：为服务指定环境变量</p></li><li><p>EnvironmentFile：指定加载一个包含服务所需的环境变量的列表的文件，文件中的每一行都是一个环境变量的定义，该文件内部的<code>key=value</code>键值对，可以用<code>$key</code>的形式，在当前配置文件中获取</p></li><li><p>Nice：服务的进程优先级，值越小优先级越高，默认为 0。其中 -20 为最高优先级，19 为最低优先级</p></li><li><p>WorkingDirectory：指定服务的工作目录</p></li><li><p>RootDirectory：指定服务进程的根目录（/ 目录）。如果配置了这个参数，服务将无法访问指定目录以外的任何文件</p></li><li><p>User：指定运行服务的用户</p></li><li><p>Group：指定运行服务的用户组</p></li><li><p>MountFlags：服务的 Mount Namespace 配置，会影响进程上下文中挂载点的信息，即服务是否会继承主机上已有挂载点，以及如果服务运行执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为 shared、slaved 或 private</p><ul><li><p>shared：服务与主机共用一个 Mount Namespace，继承主机挂载点，且服务挂载或卸载设备会真实地反映到主机上</p></li><li><p>slave：服务使用独立的 Mount Namespace，它会继承主机挂载点，但服务对挂载点的操作只有在自己的 Namespace 内生效，不会反映到主机上</p></li><li><p>private：服务使用独立的 Mount Namespace，它在启动时没有任何任何挂载点，服务对挂载点的操作也不会反映到主机上</p></li></ul></li><li><p>LimitCPU / LimitSTACK / LimitNOFILE / LimitNPROC 等：限制特定服务的系统资源量，例如 CPU、程序堆栈、文件句柄数量、子进程数量等</p></li><li><p>日志相关类，这里输出到journal，否则默认syslog</p><p>StandardError=journal</p><p>StandardOutput=journal</p><p>StandardInput=null</p></li></ul><blockquote><p>注意：<strong>如果在 ExecStart、ExecStop 等属性中使用了 Linux 命令，则必须要写出完整的绝对路径</strong>。对于 <code>ExecStartPre </code>和 <code>ExecStartPost </code>辅助命令，若<strong>前面有个 “-” 符号，表示忽略这些命令的出错</strong>。因为有些 “辅助” 命令本来就不一定成功，比如尝试清空一个文件，但文件可能不存在。</p></blockquote><h2 id="3、Unit-文件占位符和模板">3、Unit 文件占位符和模板</h2><h3 id="3-1-Unit-文件占位符">3.1 Unit 文件占位符</h3><p>在 Unit 文件中，有时会需要使用到一些与运行环境有关的信息，例如节点 ID、运行服务的用户等。这些信息可以使用占位符来表示，然后在实际运行被动态地替换实际的值。</p><ul><li><p>%n：完整的 Unit 文件名字，包括 .service 后缀名</p></li><li><p>%p：Unit 模板文件名中 @ 符号之前的部分，不包括 @ 符号</p></li><li><p>%i：Unit 模板文件名中 @ 符号之后的部分，不包括 @ 符号和 .service 后缀名</p></li><li><p>%t：存放系统运行文件的目录，通常是 “run”</p></li><li><p>%u：运行服务的用户，如果 Unit 文件中没有指定，则默认为 root</p></li><li><p>%U：运行服务的用户 ID</p></li><li><p>%h：运行服务的用户 Home 目录，即 %{HOME} 环境变量的值</p></li><li><p>%s：运行服务的用户默认 Shell 类型，即 %{SHELL} 环境变量的值</p></li><li><p>%m：实际运行节点的 Machine ID，对于运行位置每个的服务比较有用</p></li><li><p>%b：Boot ID，这是一个随机数，每个节点各不相同，并且每次节点重启时都会改变</p></li><li><p>%H：实际运行节点的主机名</p></li><li><p>%v：内核版本，即 “uname -r” 命令输出的内容</p></li><li><p>%%：在 Unit 模板文件中表示一个普通的百分号</p></li></ul><h3 id="3-2-Unit模板">3.2 Unit模板</h3><p>在现实中，往往有一些应用需要被复制多份运行。例如，用于同一个负载均衡器分流的多个服务实例，或者为每个 SSH 连接建立一个独立的 sshd 服务进程。Unit 模板文件的写法与普通的服务 Unit 文件基本相同，不过 Unit 模板的文件名是以 @ 符号结尾的。通过模板启动服务实例时，需要在其文件名的 @ 字符后面附加一个参数字符串。</p><p>例如apache@.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Advanced Service Template</span><br><span class="line">After=etcd.service docker.servi</span><br></pre></td></tr></table></figure><p>在服务启动时需要在 @ 后面放置一个用于区分服务实例的附加字符参数，通常这个参数用于监控的端口号或控制台 TTY 编译号，<code>systemctl start apache@8080.service</code></p><p>Systemd 在运行服务时，总是会先尝试找到一个完整匹配的 Unit 文件，如果没有找到，才会尝试选择匹配模板。例如上面的命令，System 首先会在约定的目录下寻找名为 apache@8080.service 的文件，如果没有找到，而文件名中包含 @ 字符，它就会尝试去掉后缀参数匹配模板文件。对于 apache@8080.service，systemd 会找到 apache@.service 模板文件，并通过这个模板文件将服务实例化。</p><h1>三、Systemd 的资源管理</h1><h2 id="1、Unit-管理">1、Unit 管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=========================查看当前系统的所有 Unit=========================</span></span><br><span class="line"><span class="comment"># 列出正在运行的 Unit</span></span><br><span class="line">systemctl list-units</span><br><span class="line"><span class="comment"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span><br><span class="line">systemctl list-units --all</span><br><span class="line"><span class="comment"># 列出所有没有运行的 Unit</span></span><br><span class="line">systemctl list-units --all --state=inactive</span><br><span class="line"><span class="comment"># 列出所有加载失败的 Unit</span></span><br><span class="line">systemctl list-units --failed</span><br><span class="line"><span class="comment"># 列出所有正在运行的、类型为 service 的 Unit</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span>=service</span><br><span class="line"><span class="comment"># 查看 Unit 配置文件的内容</span></span><br><span class="line">systemctl cat docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================查看 Unit 的状态===================================</span></span><br><span class="line"><span class="comment"># enabled：已建立启动链接</span></span><br><span class="line"><span class="comment"># disabled：没建立启动链接</span></span><br><span class="line"><span class="comment"># static：该配置文件没有 [Install] 部分（无法执行），只能作为其他配置文件的依赖</span></span><br><span class="line"><span class="comment"># masked：该配置文件被禁止建立启动链接</span></span><br><span class="line"><span class="comment"># 显示系统状态</span></span><br><span class="line">systemctl status</span><br><span class="line"><span class="comment"># 显示单个 Unit 的状态</span></span><br><span class="line">systemctl status bluetooth.service</span><br><span class="line"><span class="comment"># 显示远程主机的某个 Unit 的状态</span></span><br><span class="line">systemctl -H root@shawn.example.com status httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#========================Unit 的管理=======================================</span></span><br><span class="line"><span class="comment"># 立即启动一个服务</span></span><br><span class="line">sudo systemctl start apache.service</span><br><span class="line"><span class="comment"># 立即停止一个服务</span></span><br><span class="line">sudo systemctl stop apache.service</span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">sudo systemctl restart apache.service</span><br><span class="line"><span class="comment"># 杀死一个服务的所有子进程</span></span><br><span class="line">sudo systemctl <span class="built_in">kill</span> apache.service</span><br><span class="line"><span class="comment"># 重新加载一个服务的配置文件</span></span><br><span class="line">sudo systemctl reload apache.service</span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 显示某个 Unit 的所有底层参数</span></span><br><span class="line">systemctl show httpd.service</span><br><span class="line"><span class="comment"># 显示某个 Unit 的指定属性的值</span></span><br><span class="line">systemctl show -p CPUShares httpd.service</span><br><span class="line"><span class="comment"># 设置某个 Unit 的指定属性</span></span><br><span class="line">sudo systemctl <span class="built_in">set</span>-property httpd.service CPUShares=500</span><br><span class="line"></span><br><span class="line"><span class="comment">#===============================查看 Unit 的依赖关系==========================</span></span><br><span class="line"><span class="comment"># 列出一个 Unit 的所有依赖，默认不会列出 target 类型</span></span><br><span class="line">systemctl list-dependencies nginx.service</span><br><span class="line"><span class="comment"># 列出一个 Unit 的所有依赖，包括 target 类型</span></span><br><span class="line">systemctl list-dependencies --all nginx.service</span><br></pre></td></tr></table></figure><h2 id="2、服务的生命周期">2、服务的生命周期</h2><p>当一个新的 Unit 文件被放入 <code>/etc/systemd/system/</code> 或 <code>/usr/lib/systemd/system/</code> 目录中时，它是不会被自识识别的</p><h3 id="2-1-服务的激活">2.1 服务的激活</h3><ul><li><p>systemctl enable：在<code> /etc/systemd/system/</code> 建立服务的符号链接，指向 <code>/usr/lib/systemd/system/</code> 中</p></li><li><p>systemctl start：依次启动定义在 Unit 文件中的 <strong>ExecStartPre</strong>、**ExecStart **和 **ExecStartPost **命令</p></li></ul><h3 id="2-2-服务的启动和停止">2.2 服务的启动和停止</h3><ul><li><p>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令</p></li><li><p>systemctl stop：依次停止定义在 Unit 文件中的 ExecStopPre、ExecStop 和 ExecStopPost 命令</p></li><li><p>systemctl restart：重启服务</p></li><li><p>systemctl kill：立即杀死服务</p></li></ul><h3 id="2-3-服务的开机启动和取消">2.3 服务的开机启动和取消</h3><ul><li><p>systemctl enable：除了激活服务以外，也可以置服务为开机启动</p></li><li><p>systemctl disable：取消服务的开机启动</p></li></ul><h3 id="2-4-服务的修改和移除">2.4 服务的修改和移除</h3><ul><li><p>systemctl daemon-reload：Systemd 会将 Unit 文件的内容写到缓存中，因此当 Unit 文件被更新时，需要告诉 Systemd 重新读取所有的 Unit 文件</p></li><li><p>systemctl reset-failed：移除标记为丢失的 Unit 文件。在删除 Unit 文件后，由于缓存的关系，即使通过 daemon-reload 更新了缓存，在 list-units 中依然会显示标记为 not-found 的 Unit。</p></li></ul><h2 id="3、Target-管理">3、Target 管理</h2><p>Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。在传统的 SysV-init 启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统的所有 Target</span></span><br><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=target</span><br><span class="line"><span class="comment"># 查看一个 Target 包含的所有 Unit</span></span><br><span class="line">systemctl list-dependencies multi-user.target</span><br><span class="line"><span class="comment"># 查看启动时的默认 Target</span></span><br><span class="line">systemctl get-default</span><br><span class="line"><span class="comment"># 设置启动时的默认 Target</span></span><br><span class="line">sudo systemctl <span class="built_in">set</span>-default multi-user.target</span><br><span class="line"><span class="comment"># 切换 Target 时，默认不关闭前一个 Target 启动的进程，systemctl isolate 命令改变这种行为，关闭前一个 Target 里面所有不属于后一个 Target 的进程</span></span><br><span class="line">sudo systemctl isolate multi-user.target</span><br><span class="line"><span class="comment"># 查看配置文件</span></span><br><span class="line">systemctl cat multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务</span></span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启相关服务</span></span><br><span class="line">sudo systemctl restart foobar</span><br></pre></td></tr></table></figure><p><strong>Target 与 SysV-init 进程的主要区别：</strong></p><ul><li><p>默认的 RunLevel（在 <code>/etc/inittab</code> 文件设置）现在被默认的 Target 取代，位置是 <code>/etc/systemd/system/default.target</code>，通常符号链接到<code>graphical.target</code>（图形界面）或者<code>multi-user.target</code>（多用户命令行）</p></li><li><p>启动脚本的位置，以前是 <code>/etc/init.d</code> 目录，符号链接到不同的 RunLevel 目录 （比如 <code>/etc/rc3.d</code>、<code>/etc/rc5.d</code> 等），现在则存放在 <code>/lib/systemd/system</code> 和 <code>/etc/systemd/system</code> 目录</p></li><li><p>配置文件的位置，以前 init 进程的配置文件是 <code>/etc/inittab</code>，各种服务的配置文件存放在 <code>/etc/sysconfig</code> 目录。现在的配置文件主要存放在<code> /lib/systemd</code> 目录，在 <code>/etc/systemd</code> 目录里面的修改可以覆盖原始设置</p></li></ul><h2 id="4、日志管理">4、日志管理</h2><p>Systemd 通过其标准日志服务 **Journald **提供的配套程序 <strong>journalctl 将其管理的所有后台进程打印到 std:out（即控制台）的输出重定向到了日志文件</strong>。Systemd 的日志文件是二进制格式的，必须使用 Journald 提供的 journalctl 来查看，默认不带任何参数时会输出系统和所有后台进程的混合日志。<strong>默认日志最大限制为所在文件系统容量的 10%</strong>，可以修改<code>/etc/systemd/journald.conf</code> 中的 <code>SystemMaxUse </code>来指定该最大限制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class="line">sudo journalctl</span><br><span class="line"><span class="comment"># 查看内核日志（不显示应用日志）：--dmesg 或 -k</span></span><br><span class="line">sudo journalctl -k</span><br><span class="line"><span class="comment"># 查看系统本次启动的日志（其中包括了内核日志和各类系统服务的控制台输出）：--system 或 -b</span></span><br><span class="line">sudo journalctl -b</span><br><span class="line">sudo journalctl -b -0</span><br><span class="line"><span class="comment"># 查看上一次启动的日志（需更改设置）</span></span><br><span class="line">sudo journalctl -b -1</span><br><span class="line"><span class="comment"># 查看指定服务的日志：--unit 或 -u</span></span><br><span class="line">sudo journalctl -u docker.servcie</span><br><span class="line"><span class="comment"># 查看指定服务的日志</span></span><br><span class="line">sudo journalctl /usr/lib/systemd/systemd</span><br><span class="line"><span class="comment"># 实时滚动显示最新日志</span></span><br><span class="line">sudo journalctl -f</span><br><span class="line"><span class="comment"># 查看指定时间的日志</span></span><br><span class="line">sudo journalctl --since=<span class="string">"2021-10-30 18:17:16"</span></span><br><span class="line">sudo journalctl --since <span class="string">"20 min ago"</span></span><br><span class="line">sudo journalctl --since yesterday</span><br><span class="line">sudo journalctl --since <span class="string">"2022-01-10"</span> --until <span class="string">"2022-01-11 03:00"</span></span><br><span class="line">sudo journalctl --since 09:00 --until <span class="string">"1 hour ago"</span></span><br><span class="line"><span class="comment"># 显示尾部的最新 10 行日志：--lines 或 -n</span></span><br><span class="line">sudo journalctl -n</span><br><span class="line"><span class="comment"># 显示尾部指定行数的日志</span></span><br><span class="line">sudo journalctl -n 20</span><br><span class="line"><span class="comment"># 将最新的日志显示在前面</span></span><br><span class="line">sudo journalctl -r -u docker.service</span><br><span class="line"><span class="comment"># 改变输出的格式：--output 或 -o</span></span><br><span class="line">sudo journalctl -r -u docker.service -o json-pretty</span><br><span class="line"><span class="comment"># 查看指定进程的日志</span></span><br><span class="line">sudo journalctl _PID=1</span><br><span class="line"><span class="comment"># 查看某个路径的脚本的日志</span></span><br><span class="line">sudo journalctl /usr/bin/bash</span><br><span class="line"><span class="comment"># 查看指定用户的日志</span></span><br><span class="line">sudo journalctl _UID=33 --since today</span><br><span class="line"><span class="comment"># 查看某个 Unit 的日志</span></span><br><span class="line">sudo journalctl -u nginx.service</span><br><span class="line">sudo journalctl -u nginx.service --since today</span><br><span class="line"><span class="comment"># 实时滚动显示某个 Unit 的最新日志</span></span><br><span class="line">sudo journalctl -u nginx.service -f</span><br><span class="line"><span class="comment"># 合并显示多个 Unit 的日志</span></span><br><span class="line">journalctl -u nginx.service -u php-fpm.service --since today</span><br><span class="line"><span class="comment"># 查看指定优先级（及其以上级别）的日志，共有 8 级</span></span><br><span class="line"><span class="comment"># 0: emerg</span></span><br><span class="line"><span class="comment"># 1: alert</span></span><br><span class="line"><span class="comment"># 2: crit</span></span><br><span class="line"><span class="comment"># 3: err</span></span><br><span class="line"><span class="comment"># 4: warning</span></span><br><span class="line"><span class="comment"># 5: notice</span></span><br><span class="line"><span class="comment"># 6: info</span></span><br><span class="line"><span class="comment"># 7: debug</span></span><br><span class="line">sudo journalctl -p err -b</span><br><span class="line"><span class="comment"># 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class="line">sudo journalctl --no-pager</span><br><span class="line"><span class="comment"># 以 JSON 格式（单行）输出</span></span><br><span class="line">sudo journalctl -b -u nginx.service -o json</span><br><span class="line"><span class="comment"># 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class="line">sudo journalctl -b -u nginx.service -o json-pretty</span><br><span class="line"><span class="comment"># 显示日志占据的硬盘空间</span></span><br><span class="line">sudo journalctl --disk-usage</span><br><span class="line"><span class="comment"># 指定日志文件占据的最大空间</span></span><br><span class="line">sudo journalctl --vacuum-size=1G</span><br><span class="line"><span class="comment"># 指定日志文件保存多久</span></span><br><span class="line">sudo journalctl --vacuum-time=1years</span><br></pre></td></tr></table></figure><h1>四、Systemd 实战</h1><h2 id="1、Systemd-路径介绍">1、Systemd 路径介绍</h2><ul><li><p><code>/usr/lib/systemd/system</code>： 用户自己定义的单元文件，安装包相关配置，一般是供应商提供的操作系统资源，。通常，只允许包管理工具(yum/dnf/rpm/apt)进行包安装的过程中操作此路径；</p></li><li><p><code>/lib/systemd/system</code>： 系统默认的单元文件，指向<code>/usr/lib/systemd/system</code></p></li><li><p><code>/etc/systemd/system</code>：用户安装的软件的单元文件，本地配置文件，系统管理员手动软件安装包或脚本放置于此（一般为链接文件）</p></li></ul><p><strong>service设定文件</strong></p><ul><li><p><code>/usr/lib/systemd/system/*.service</code>: 预设设定文件</p></li><li><p><code>/etc/systemd/system/system/*.service.d</code>/: 用户个性化设定文件，会被加入设定</p></li><li><p><code>/etc/systemd/system/system/*.service.wants/</code>: 链接文件，启动该服务后推荐启动的其他服务</p></li><li><p><code>/etc/systemd/system/system/*.service.requires/</code>: 链接文件，启动该服务之前，需要预先启动的服务</p></li><li><p>/run/systemd/generator.late 使用 systemd-sysv-generator工具处理 SysV init脚本（即：/etc/init.d/*），自动生成.service文件</p></li></ul><h2 id="2、路径的区别与优先级">2、路径的区别与优先级</h2><h3 id="2-1-区别">2.1 区别</h3><ul><li><p>/usr/lib/systemd/system/ 软件包安装的单元</p></li><li><p>/etc/systemd/system/ 系统管理员安装的单元, 优先级更高</p></li></ul><h3 id="2-2-优先级">2.2 优先级</h3><p>systemd的使用大幅提高了系统服务的运行效率, 而unit的文件位置一般主要有三个目录：</p><ul><li><p><code>/etc/systemd/system</code></p></li><li><p><code>/run/systemd/system</code></p></li><li><p><code>lib/systemd/system</code></p></li></ul><p>这三个目录的配置文件优先级依次从高到低，如果同一选项三个地方都配置了，优先级高的会覆盖优先级低的。</p><p>系统安装时，默认会将unit文件放在<code>/lib/systemd/system</code>目录。如果我们想要修改系统默认的配置，比如nginx.service，一般有两种方法：</p><ul><li><p>在<code>/etc/systemd/system</code>目录下创建<code>nginx.service</code>文件，里面写上我们自己的配置。</p></li><li><p>在<code>/etc/systemd/system</code>下面创建<code>nginx.service.d</code>目录，在这个目录里面新建任何以.conf结尾的文件，然后写入我们自己的配置。推荐这种做法。</p></li></ul><p><code>/run/systemd/system</code>这个目录一般是进程在运行时动态创建unit文件的目录，一般很少修改，除非是修改程序运行时的一些参数时，即Session级别的，才在这里做修改。</p><h2 id="3、实战">3、实战</h2><p>创建文件<code>vim /usr/lib/systemd/system/test.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Advanced Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStartPre=-/bin/bash -c <span class="string">"echo ExecStartPre"</span></span><br><span class="line">ExecStartPre=-/bin/bash -c <span class="string">"echo ExecStartPre1"</span></span><br><span class="line">ExecStartPre=-/bin/bash -c <span class="string">"echo ExecStartPre2"</span></span><br><span class="line">ExecStart=/bin/bash -c <span class="string">"echo ExecStart"</span></span><br><span class="line">ExecStartPost=/bin/bash -c <span class="string">"echo ExecStartPost"</span></span><br><span class="line">ExecStop=/bin/bash -c <span class="string">"echo ExecStop"</span></span><br><span class="line">ExecStopPost=/bin/bash -c <span class="string">"echo ExecStopPost"</span></span><br><span class="line"><span class="comment"># 日志输出</span></span><br><span class="line">StandardOutput=journal</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>创建完成后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">systemctl start test.service</span><br><span class="line"><span class="comment"># 开机自启，即链接到/etc/systemd/system/multi-user.target.wants</span></span><br><span class="line">systemctl <span class="built_in">enable</span> test.service</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status test.service</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">sudo journalctl -r -u test.service</span><br></pre></td></tr></table></figure><h1>五、systemd.timer定时任务</h1><h2 id="1、介绍">1、介绍</h2><p>所谓定时任务，就是未来的某个或多个时点，预定要执行的任务，比如每五分钟收一次邮件、每天半夜两点分析一下日志等等。Linux 系统通常都使用 <a href="https://wiki.archlinux.org/index.php/Cron_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener" title="cron">cron</a> 设置定时任务，但是 Systemd 也有这个功能，而且优点显著</p><ul><li><p>自动生成日志，配合 Systemd 的日志工具，很方便除错</p></li><li><p>可以设置内存和 CPU 的使用额度，比如最多使用50%的 CPU</p></li><li><p>任务可以拆分，依赖其他 Systemd 单元，完成非常复杂的任务</p></li></ul><p><strong>Service 单元只是定义了如何执行任务，要定时执行这个 Service，还必须定义 Timer 单元</strong></p><h2 id="2、Timer单元">2、Timer单元</h2><p>上面新建了<code>test.service</code>服务，这里继续在<code>/usr/lib/systemd/system</code>里创建<code>test.timer</code>(一般建议同名)文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My <span class="built_in">test</span> Time</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnBootSec=2m</span><br><span class="line">OnUnitActiveSec=10s</span><br><span class="line"><span class="comment"># OnCalendar=Sun,Wed 03:30:00</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=timers.target</span><br></pre></td></tr></table></figure><ul><li><p>定时器单元文件中必须包含一个 <strong>[Timer]</strong></p></li><li><p>通过同时使用 OnBootSec= 与 OnUnitActiveSec= 指令， 就可以实现在系统启动后的某个时间点启动匹配单元， 并且之后每隔一段时间周期性的反复启动匹配单元</p></li><li><p>时间单位后缀：<strong>us(微秒), ms(毫秒), s(秒), m(分), h(时), d(天), w(周)</strong>。 如果省略了时间单位，那么表示使用<strong>默认单位&quot;秒&quot;</strong></p></li><li><p>Unit= 该定时器单元的匹配单元， 也就是要被该定时器启动的单元。默认值是与此定时器单元同名的服务单元</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动刚刚新建的这个定时器</span></span><br><span class="line">sudo systemctl start test.timer</span><br><span class="line"><span class="comment"># 查看这个定时器的状态</span></span><br><span class="line">systemctl status test.timer</span><br><span class="line"><span class="comment"># 查看所有正在运行的定时器</span></span><br><span class="line">systemctl list-timers</span><br><span class="line"><span class="comment"># 关闭这个定时器</span></span><br><span class="line">sudo systemctl stop myscript.timer</span><br><span class="line"><span class="comment"># 下次开机，自动运行这个定时器</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> myscript.timer</span><br><span class="line"><span class="comment"># 关闭定时器的开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> myscript.timer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看整个日志</span></span><br><span class="line">sudo journalctl</span><br><span class="line"><span class="comment"># 查看 test.timer 的日志</span></span><br><span class="line">sudo journalctl -u test.timer</span><br><span class="line"><span class="comment"># 查看 test.timer 和 test.service 的日志</span></span><br><span class="line">sudo journalctl -u <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 从结尾开始查看最新日志</span></span><br><span class="line">sudo journalctl -f</span><br><span class="line"><span class="comment"># 从结尾开始查看 test.timer 的日志</span></span><br><span class="line">journalctl -f -u test.timer</span><br></pre></td></tr></table></figure><h2 id="3、Timer详解">3、Timer详解</h2><h3 id="3-1-Timer单位">3.1 Timer单位</h3><p> Timer 单元文件分成几个部分</p><p>**[Unit]**部分定义元数据。</p><p>**[Timer]**部分定制定时器。Systemd 提供以下一些字段</p><ul><li><p><code>OnActiveSec</code>：定时器生效后，多少时间开始执行任务</p></li><li><p><code>OnBootSec</code>：系统启动后，多少时间开始执行任务</p></li><li><p><code>OnStartupSec</code>：Systemd 进程启动后，多少时间开始执行任务</p></li><li><p><code>OnUnitActiveSec</code>：该单元上次执行后，等多少时间再次执行</p></li><li><p><code>OnUnitInactiveSec</code>： 定时器上次关闭后多少时间，再次执行</p></li><li><p><code>OnCalendar</code>：基于绝对时间，而不是相对时间执行</p></li><li><p><code>AccuracySec</code>：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒</p></li><li><p><code>Unit</code>：真正要执行的任务，默认是同名的带有<code>.service</code>后缀的单元</p></li><li><p><code>Persistent</code>：如果设置了该字段，即使定时器到时没有启动，也会自动执行相应的单元</p></li><li><p><code>WakeSystem</code>：如果系统休眠，是否自动唤醒系统</p></li></ul><p>举例脚本里面，<code>OnUnitActiveSec=1h</code>表示一小时执行一次任务。其他的写法还有<code>OnUnitActiveSec=*-*-* 02:00:00</code>表示每天凌晨两点执行，<code>OnUnitActiveSec=Mon *-*-* 02:00:00</code>表示每周一凌晨两点执行，具体请参考<a href="https://www.freedesktop.org/software/systemd/man/systemd.time.html" target="_blank" rel="noopener" title="官方文档">官方文档</a></p><h3 id="3-2-Install-和-target">3.2 [Install] 和 target</h3><ul><li><p><code>test.timer</code>文件里面，还有一个<code>[Install]</code>部分，定义开机自启动（<code>systemctl enable</code>）和关闭开机自启动（<code>systemctl disable</code>）这个单元时，所要执行的命令。上面脚本中，<code>[Install]</code>部分只写了一个字段，即<code>WantedBy=multi-user.target</code>。它的意思是，如果执行了<code>systemctl enable test.timer</code>（只要开机，定时器自动生效），那么该定时器归属于<code>multi-user.target</code>。</p></li><li><p>所谓 Target 指的是一组相关进程，有点像 init 进程模式下面的启动级别。启动某个Target 的时候，属于这个 Target 的所有进程都会全部启动。<code>multi-user.target</code>是一个最常用的 Target，意为多用户模式。也就是说，当系统以多用户模式启动时，就会一起启动<code>test.timer</code>。它背后的操作其实很简单，执行<code>systemctl enable test.timer</code>命令时，就会在<code>multi-user.target.wants</code>目录里面创建一个符号链接，指向<code>test.timer</code></p></li></ul><hr><p><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener" title="Systemd 入门教程：命令篇">Systemd 入门教程：命令篇</a></p><p><a href="https://cloud.tencent.com/developer/article/1516125" target="_blank" rel="noopener" title="Systemd 服务管理教程">Systemd 服务管理教程</a></p><p><a href="https://blog.csdn.net/greatyoulv/article/details/111301528" target="_blank" rel="noopener" title="systemd.timer定时任务">systemd.timer定时任务</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Systemd 概述&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;Systemd 是一系列工具的集合，其作用也远远不仅是启动操作系统，它还接管了后台服务、结束、状态查询，以及日志归档、设备管理、电源管理、定时任务等许多职责，并支持通过特定事件（如插入特定 USB 设备）和特定端口数据触发的 On-demand（按需）任务。&lt;/p&gt;
&lt;p&gt;Systemd 的后台服务还有一个特殊的身份——它是系统中 PID 值为 1 的进程。&lt;/p&gt;
&lt;h2 id=&quot;2、Systemd-架构&quot;&gt;2、Systemd 架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/b4d8019a19b54fe3a57a30c21a0c6934.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://www.shawn22.xyz/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记</title>
    <link href="https://www.shawn22.xyz/posts/bbbabdc0.html"/>
    <id>https://www.shawn22.xyz/posts/bbbabdc0.html</id>
    <published>2022-09-28T09:33:48.000Z</published>
    <updated>2022-09-28T09:48:19.189Z</updated>
    
    <content type="html"><![CDATA[<h1>一、CICD环境介绍与安装</h1><h2 id="1、简介">1、简介</h2><blockquote><p>Jenkins，原名 Hudson，2011 年改为现在的名字。它是一个开源的实现持续集成的软件工具。<br>官方网站：<a href="https://www.jenkins.io/" target="_blank" rel="noopener">https://www.jenkins.io/</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/ebe57cb4d97a4292a3e7380541501708.png#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="2、Docker安装">2、Docker安装</h2><blockquote><p>Docker官网安装文档：<a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener" title="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p></blockquote><p>Centos7安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新yum源</span></span><br><span class="line">yum update</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 添加镜像</span></span><br><span class="line"><span class="comment"># 国外镜像</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 阿里镜像</span></span><br><span class="line">https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 查看源中可使用版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">yum install docker</span><br><span class="line"><span class="comment"># 配置开机启动项</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p>Ubuntu安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文本处理的流编辑器 -i直接修改读取的文件内容，而不是输出到终端</span></span><br><span class="line"><span class="comment"># sed -i 's/原字符串/新字符串/' /home/1.txt</span></span><br><span class="line"><span class="comment"># 下面这个是修改ubuntu的源</span></span><br><span class="line">sudo sed -i <span class="string">'s/cn.archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install curl</span><br><span class="line"><span class="comment"># 抓取docker安装脚本到一个文件中</span></span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="comment"># 执行脚本，通过脚本下载 推荐设置阿里云镜像下载加速 默认管理员登陆不加sudo；有警告就忽略</span></span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"></span><br><span class="line"><span class="comment">#==========解决每次输入sudo问题===========</span></span><br><span class="line"><span class="comment"># 将当前用户加入到docker组，这样每次使用就不需要sudo了</span></span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line"><span class="comment"># 更新用户组,这样才能生效</span></span><br><span class="line">newgrp - docker</span><br><span class="line">sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#============加速器================</span></span><br><span class="line"><span class="comment"># 加速器网址：https://www.daocloud.io/mirror#accelerator-doc，可能有时会失效</span></span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line"><span class="comment"># 查看配置文件，自己添加加速器</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># &#123;"registry-mirrors": ["http://hub-mirror.c.163.com"]&#125;</span></span><br><span class="line"><span class="comment"># 最后要重启</span></span><br><span class="line">sudo systemctl restart docker.service</span><br><span class="line"><span class="comment"># 安装ssh</span></span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#===========docker-compose=============</span></span><br><span class="line"><span class="comment"># 在官网下载符合条件的：https://github.com/docker/compose/releases</span></span><br><span class="line"><span class="comment"># wget也可以使用来下载</span></span><br><span class="line">mv /usr/<span class="built_in">local</span>/bin/docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 放在bin目录下，在其他位置可以直接使用</span></span><br><span class="line">sudo mv /usr/<span class="built_in">local</span>/bin/docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo install docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><h2 id="3、GitLab安装使用">3、GitLab安装使用</h2><h3 id="3-1-介绍">3.1 介绍</h3><blockquote><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的Web服务，相当于github和Gitee代码托管平台，只是GitLab是私有的代码托管平台<br>官方网站：<a href="https://about.gitlab.com/" target="_blank" rel="noopener" title="https://about.gitlab.com/">https://about.gitlab.com/</a></p></blockquote><p>安装所需最小配置，内存至少4G，安装文档：<a href="https://gitlab.cn/install/" target="_blank" rel="noopener" title="https://gitlab.cn/install/">https://gitlab.cn/install/</a></p><h3 id="3-2-手动安装">3.2 手动安装</h3><p>Centos系统下的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server perl</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line"><span class="comment"># 配置镜像</span></span><br><span class="line">curl -fsSL https://packages.gitlab.cn/repository/raw/scripts/setup.sh | /bin/bash</span><br><span class="line"><span class="comment"># 开始安装，这边填写你的主机地址，也可以做好域名映射的域名</span></span><br><span class="line">sudo EXTERNAL_URL=<span class="string">"http://192.168.44.103"</span> yum install -y gitlab-jh</span><br></pre></td></tr></table></figure><p>Ubuntu系统下的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装必要软件包</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install build-essential curl file git ca-certificates wget</span><br><span class="line"><span class="comment"># 配置极狐GitLab 软件源镜像</span></span><br><span class="line">curl -fsSL https://packages.gitlab.cn/repository/raw/scripts/setup.sh | /bin/bash</span><br><span class="line"><span class="comment"># 执行如下命令开始安装</span></span><br><span class="line">sudo EXTERNAL_URL=<span class="string">"https://gitlab.example.com"</span> apt-get install gitlab-jh</span><br></pre></td></tr></table></figure><h3 id="3-3-Docker安装">3.3 Docker安装</h3><blockquote><p>GitLab文档地址：<a href="https://docs.gitlab.cn/jh/install/docker.html" target="_blank" rel="noopener" title="https://docs.gitlab.cn/jh/install/docker.html">https://docs.gitlab.cn/jh/install/docker.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --hostname 192.168.44.103 \</span><br><span class="line">  --publish 443:443 --publish 80:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/<span class="built_in">log</span>/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab:Z \</span><br><span class="line">  --shm-size 256m \</span><br><span class="line">  registry.gitlab.cn/omnibus/gitlab-jh:latest</span><br></pre></td></tr></table></figure><h3 id="3-4-注意事项">3.4 注意事项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitlab常用命令</span></span><br><span class="line">gitlab-ctl start                  <span class="comment"># 启动所有 gitlab 组件</span></span><br><span class="line">gitlab-ctl stop                   <span class="comment"># 停止所有 gitlab 组件</span></span><br><span class="line">gitlab-ctl restart                <span class="comment"># 重启所有 gitlab 组件</span></span><br><span class="line">gitlab-ctl status                 <span class="comment"># 查看服务状态</span></span><br><span class="line">gitlab-ctl reconfigure            <span class="comment"># 启动服务</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb         <span class="comment"># 修改默认的配置文件</span></span><br><span class="line">gitlab-ctl tail                   <span class="comment"># 查看日志</span></span><br></pre></td></tr></table></figure><p>如果不在安装过程中指定了自定义密码，否则将随机生成一个密码并存储在 <code>/etc/gitlab/initial_root_password</code> 文件中(出于安全原因，24 小时后，此文件会被第一次 <code>gitlab-ctl reconfigure</code> 自动删除，因此若使用随机密码登录，建议安装成功初始登录成功之后，立即修改初始密码）。使用此密码和用户名 <code>root</code> 登录。</p><p>安装成功后访问<code>http://你指定的ip或域名</code>即可访问，如果需要修改，可以进入<code>/etc/gitlab/gitlab.rb</code>进行修改，改完重启</p><h2 id="4、JDK与Maven安装">4、JDK与Maven安装</h2><p>将JDK和maven安装在Jenkins服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=============================在线安装==================================</span></span><br><span class="line"><span class="comment"># Centos的搜索与安装</span></span><br><span class="line">yum search java|grep jdk</span><br><span class="line">yum install java-1.8.0-openjdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu的搜索与安装</span></span><br><span class="line">apt-cache search openjdk</span><br><span class="line">sudo apt-get install openjdk-8-jdk  -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================离线安装==================</span></span><br><span class="line"><span class="comment"># java下载地址：https://www.oracle.com/java/technologies/downloads/#java17</span></span><br><span class="line"><span class="comment"># 然后解压好</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim ~/.bashrc  <span class="comment">#输入小写i进入insert模式</span></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_162</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#==================================maven====================</span></span><br><span class="line"><span class="comment"># 下载安装,官网：https://maven.apache.org/</span></span><br><span class="line">wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz</span><br><span class="line">tar -zxvf apache-maven-3.8.6-bin.tar.gz</span><br><span class="line">mv apache-maven-3.8.6 /usr/<span class="built_in">local</span>/maven</span><br></pre></td></tr></table></figure><h2 id="5、Jenkins安装">5、Jenkins安装</h2><blockquote><p>官网地址：<a href="https://www.jenkins.io/" target="_blank" rel="noopener" title="https://www.jenkins.io/">https://www.jenkins.io/</a>，建议机器内存0.5G以上</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">机器要求：</span><br><span class="line">256 MB 内存，建议大于 512 MB</span><br><span class="line">10 GB 的硬盘空间（用于 Jenkins 和 Docker 镜像）</span><br><span class="line">需要安装以下软件：</span><br><span class="line">Java 8 ( JRE 或者 JDK 都可以)</span><br><span class="line">Docker （导航到网站顶部的Get Docker链接以访问适合您平台的Docker下载）</span><br></pre></td></tr></table></figure><p>下载地址：<a href="https://www.jenkins.io/zh/download/" target="_blank" rel="noopener" title="https://www.jenkins.io/zh/download/">https://www.jenkins.io/zh/download/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.jenkins.io/war-stable/2.346.3/jenkins.war</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">java -jar jenkins.war</span><br><span class="line"><span class="comment"># docker安装</span></span><br><span class="line">docker pull jenkins/jenkins:lts-jdk11</span><br><span class="line"><span class="comment"># 同时安装好git</span></span><br></pre></td></tr></table></figure><p>启动后访问http://ip:8080，密码默认在<code>/home/shawn/.jenkins/secrets/initialAdminPassword</code>，也可以在控制看到，进入后选择推荐安装</p><h1>二、Jenkins + Git + Maven 自动化部署配置</h1><h2 id="1、Jenkins拉取构建jar包">1、Jenkins拉取构建jar包</h2><h3 id="1-1-maven换源">1.1 maven换源</h3><p>进入maven的配置文件<code>vim /usr/local/maven/conf/settings.xml</code>，找到镜像源并替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>$&#123;user.home&#125;/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--This sends everything else to /public --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--This is used to direct the public snapshots repo in the </span></span><br><span class="line"><span class="comment">        profile below over to a different nexus group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--This is used to direct the public snapshots repo in the </span></span><br><span class="line"><span class="comment">        profile below over to a different nexus group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public-snapshots1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>public-snapshots1<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/repositories/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-全局配置">1.2 全局配置</h3><p>系统管理→全局工具配置→配置系统全局maven，注意填写自己的maven路径，然后下载好git</p><p><img src="https://img-blog.csdnimg.cn/1adea6f9867941fda7e7acd5ef2dfed4.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-3-自动拉取构建初体验">1.3 自动拉取构建初体验</h3><p>选择新建任务→构建一个maven项目，其他暂时默认，仓库去gitlab获取链接，这里使用了http，使用不需要凭证，同时选择好自己想拉取的分支，如果报错，需要安装git</p><p><img src="https://img-blog.csdnimg.cn/f974771d3da54e898957c1b8e7e44f45.png#pic_center" alt="在这里插入图片描述"><br><code>pom.xml</code>位置，如果项目里面有多个子项目，那需要添加前缀</p><p><img src="https://img-blog.csdnimg.cn/67501cfff02944e68e7fd167adef4fcc.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-4-构建注意事项">1.4 构建注意事项</h3><p>如果控制台报错<code>No compiler is provided in this environment.Perhaps you are running on a &quot;JRE rather than a JDK?</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认yum安装java的时候会显示安装的是openjdk1.8 实则实际上只安装了jre</span></span><br><span class="line">yum install -y java-devel</span><br><span class="line"><span class="comment"># ubuntu正常</span></span><br></pre></td></tr></table></figure><h2 id="2、自动发布并运行">2、自动发布并运行</h2><h3 id="2-1-插件安装与配置">2.1 插件安装与配置</h3><p>系统管理→插件管理→安装插件→<strong>publish over ssh</strong></p><p>安装好插件好，进入系统管理→系统管理，配置好对目标服务器的ssh，设置好登录地点目录</p><p><img src="https://img-blog.csdnimg.cn/003c35d511b644dfb1f8b283d4c0159f.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-2-自动发布">2.2 自动发布</h3><p>在原来的任务选择配置进行修改，选择构建后的操作，选择我们刚刚配置好的服务器，配置构建后出发的选项，<code>Source files</code>代表要传送的文件，<code>Remove prefix</code>表示去除的前缀，<code>Remote directory</code>表示要创建的目录，最后是要运行的命令，构建结束后，远程服务器存在文件<code>/home/shawn/jenkins/jenkin.jar</code></p><p><img src="https://img-blog.csdnimg.cn/49e0156b51584d7a86678a4bee74081c.png#pic_center" alt="在这里插入图片描述"></p><p><strong>超时机制</strong></p><p>输出命令时一定要注意不要让窗口卡主，不然Jenkins会认为认为一直没完成</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工作目录为服务器配置的，我这里就是/home/shawn</span></span><br><span class="line"><span class="string">nohup</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/home/shawn/jenkins/jenkins*.jar</span> <span class="string">--server.port=8989</span>  <span class="string">&gt;mylog.log</span> <span class="number">2</span><span class="string">&gt;&amp;1</span>  <span class="string">&amp;</span></span><br></pre></td></tr></table></figure><p><strong>数据流重定向</strong></p><p>数据流重定向就是将某个命令执行后应该要出现在屏幕上的数据传输到其他地方</p><ul><li><p>标准输入（stdin）：代码为0，使用&lt;或&lt;&lt;;</p></li><li><p>标准输出（stdout）：代码为1，使用&gt;或&gt;&gt;;</p></li><li><p>标准错误输出（stderr）：代码为2，使用2&gt;或2&gt;&gt;</p></li><li><p>&gt; 覆盖写</p></li><li><p>&gt;&gt; 追加写</p></li></ul><h3 id="2-3-自动发布前清理">2.3 自动发布前清理</h3><p>在构建前进行服务器清理，在<code>Pre Steps</code>的命令行下填写在构建前要运行的命令<code>./clean.sh jenkins</code>，同时在目标服务器上编写脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#删除历史数据</span></span><br><span class="line">rm -rf jenkins</span><br><span class="line">appname=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#获取传入的参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"arg:<span class="variable">$1</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取正在运行的jar包pid</span></span><br><span class="line">pid=`ps -ef | grep <span class="variable">$1</span> | grep <span class="string">'java -jar'</span> | awk <span class="string">'&#123;printf $2&#125;'</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pid</span></span><br><span class="line"><span class="comment">#如果pid为空，提示一下，否则，执行kill命令</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$pid</span> ];</span><br><span class="line"><span class="comment">#使用-z 做空值判断</span></span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$appname</span> not started"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$appname</span> stoping...."</span></span><br><span class="line">check=`ps -ef | grep -w <span class="variable">$pid</span> | grep java`</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$check</span> ];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$appname</span> pid:<span class="variable">$pid</span> is stop"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$appname</span> stop failed"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1>三、自动构建触几种方式</h1><h2 id="1、触发远程构建-gitlab上改动自动构建">1、触发远程构建/gitlab上改动自动构建</h2><blockquote><p>代码改动(提交，合并等)自动可以使用gitlab的webhook回调钩子调起Jenkins的启动任务接口，进行自动打包构建与运行</p></blockquote><p>首先在构建触发器中配置接口和token</p><p><img src="https://img-blog.csdnimg.cn/15fa2fc75b044757baa283c2ebee7e28.png#pic_center" alt="在这里插入图片描述"></p><p>因为需要权限认证，所以需要安装一个插件<code>Build Authorization Token Root</code>，安装完插件后，要访问<code>http://192.168.249.129:8080/buildByToken/build?job=first&amp;token=123456</code>即可无需认证触发构建</p><p>然后进入GitlLab或者远程代码仓库，找到<strong>Webhook选项</strong>，将调起Jenkins的启动任务接口填入，如果GitLab发现不让本地访问，调用<code>菜单→管理员→设置→网络→出战请求→允许来自 web hooks 和服务对本地网络的请求</code>就可</p><h2 id="2、定时构建">2、定时构建</h2><blockquote><p>参考网站：<a href="https://crontab.guru" target="_blank" rel="noopener" title="https://crontab.guru">https://crontab.guru</a><br>Jenkins cron不是标准的cron表达式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第一个 * 表示每个小时的第几分钟，取值0~59</span><br><span class="line">H * * * *</span><br><span class="line">H：每小时执行一次</span><br><span class="line">第二颗 * 表示小时，取值0~23</span><br><span class="line">* 15 * * * 表示每天下午3点</span><br><span class="line">* 1 * * *  表示每天凌晨1点</span><br><span class="line">第三颗 * 表示一个月的第几天，取值1~31</span><br><span class="line">* 1 5 * *  表示每月5日凌晨1点</span><br><span class="line">第四颗 * 表示第几月，取值1~12</span><br><span class="line">* 15 5 1 *  表示每年几月执行</span><br><span class="line">第五颗 * 表示一周中的第几天，取值0~7，其中0和7代表的都是周日</span><br></pre></td></tr></table></figure><p><code>H * * * *</code>表示一小时内的任意时间</p><p><code>*/10 * * * *</code>每10分钟</p><p><code>H/10 * * * *</code>每10分钟,可能是7,17,27，起始时间hash，步长不变</p><p><code>45 3 * * 1-6</code> 每个周一至周六，凌晨3点45 执行1次</p><p><code>45 3-5 * * 1-6</code> 每个周一至周六，凌晨3点45 ，凌晨4点45，凌晨5点45 各执行1次</p><p><code>H(40-48) 3-5 * * 1-6</code> 在40~48之间取值 其他同上</p><p><code>45 3-5/2 * * 1-6</code> 每个周一至周六，凌晨3点45 ，凌晨5点45 各执行1次</p><p><code>45 0-6/2 * * 1-6 * * 1-6</code> 0点开始，每间隔2小时执行一次 0:45、2:45、4:45</p><h2 id="3、源码变更构建">3、源码变更构建</h2><p>使用<strong>Poll SCM</strong> 方式与<strong>Build periodically</strong>一样，会主动定期检查代码托管服务器上是否有变化，一旦发生变化执行job构建</p><h2 id="4、所有构建方式介绍">4、所有构建方式介绍</h2><ul><li><p>快照依赖构建/Build whenever a SNAPSHOT dependency is built</p><ul><li>当依赖的快照被构建时执行本job</li></ul></li><li><p>触发远程构建 (例如,使用脚本)</p><ul><li>远程调用本job的restapi时执行本job</li></ul></li><li><p>job依赖构建/Build after other projects are built</p><ul><li>当依赖的job被构建时执行本job</li></ul></li><li><p>定时构建/Build periodically</p><ul><li>使用cron表达式定时构建本job</li></ul></li><li><p>向GitHub提交代码时触发Jenkins自动构建/GitHub hook trigger for GITScm polling</p><ul><li>Github-WebHook出发时构建本job</li></ul></li><li><p>定期检查代码变更/Poll SCM</p><ul><li>使用cron表达式定时检查代码变更，变更后构建本job</li></ul></li></ul><h2 id="5、测试报告邮件通知">5、测试报告邮件通知</h2><p>首先开启163邮箱的SMTP服务，记录下自己的授权码，比如我的<code>SUUJPSARCHWKHWAP</code>，然后进入<strong>首页→系统管理→系统配置</strong></p><ul><li><p>首先找到<strong>Jenkins Location</strong>，填写系统管理员邮件地址(授权smtp的163邮箱)账号</p></li><li><p>找到<strong>Extended E-mail Notification</strong>，推荐插件安装自动安装，填写好SMTP server(<a href="http://smtp.163.com" target="_blank" rel="noopener">smtp.163.com</a>)，端口25，创建好账户和密码(授权码)，设置好默认发送邮箱，在Default Triggers里选择相应的触发条件</p></li><li><p><strong>邮件通知</strong>是内置的，选择好SMTP服务器，使用SAMTP认证，这里用户名要去掉邮箱尾缀，密码还是授权码，端口25，可以测试发送，最后保存</p></li></ul><p>最后在任务中进行配置设置要发送的邮箱</p><h2 id="6、自动化部署到docker容器中">6、自动化部署到docker容器中</h2><p>原理和前面一样，构建前清除docker，然后把构建的包发送，最后发送启动docker</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jarfile/demo*.jar /root/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/root/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><h1>四、Jenkins集群/并发构建</h1><blockquote><p>集群化构建可以有效提升构建效率，尤其是团队项目比较多或是子项目比较多的时候，可以并发在多台机器上执行构建</p></blockquote><p>这里我们一模一样克隆一台jenkins机器，从机无需启动jenkins，只需要java和maven构建环境，进入<strong>系统管理→节点管理</strong>，可以看到本机就是一个主节点，然后我们<strong>新建节点</strong>，取名jenkin-01，注意标签的填写，后面流水线需要依赖这个；填好并发依赖数量，主机名</p><p><img src="https://img-blog.csdnimg.cn/6ef1108654404e71b7e5c39ede33bfcf.png#pic_center" alt="在这里插入图片描述"></p><p>然后进入我们的任务配置，在general中勾选<strong>在必要的时候并发构建</strong>，这样就可以进行集群化构建了</p><h1>五、流水线pipline</h1><h2 id="1、介绍">1、介绍</h2><p>流水线既能作为任务的本身，也能作为<code>Jenkinsfile</code></p><p>使用流水线可以让我们的任务从ui手动操作，转换为代码化，像docker的dockerfile一样，从shell命令到配置文件，更适合大型项目，可以让团队其他开发者同时参与进来，同时也可以编辑开发Jenkinswebui不能完成的更复杂的构建逻辑，作为开发者可读性也更好。</p><h2 id="2、流水线语法">2、流水线语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pipeline：整条流水线</span><br><span class="line">agent：指定执行器</span><br><span class="line">stages：所有阶段</span><br><span class="line">stage：某一阶段，可有多个</span><br><span class="line">steps：阶段内的每一步，可执行命令</span><br></pre></td></tr></table></figure><h2 id="3、简单流水线测试">3、简单流水线测试</h2><p><strong>首页→新建任务→选择流水线</strong>，选择最简单的脚本进行测试</p><p><strong>post</strong>：流水线完成后可执行的任务</p><ul><li><p>always 无论流水线或者阶段的完成状态。</p></li><li><p>changed 只有当流水线或者阶段完成状态与之前不同时。</p></li><li><p>failure 只有当流水线或者阶段状态为&quot;failure&quot;运行。</p></li><li><p>success 只有当流水线或者阶段状态为&quot;success&quot;运行。</p></li><li><p>unstable 只有当流水线或者阶段状态为&quot;unstable&quot;运行。例如：测试失败。</p></li><li><p>aborted 只有当流水线或者阶段状态为&quot;aborted &quot;运行。例如：手动取消。</p></li></ul><p>**agent：**可以指定执行节点</p><ul><li><p>label 指定运行job的节点标签</p></li><li><p>any 不指定，由Jenkins分配</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label <span class="string">"jenkins-01"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'拉取代码'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">                    sleep 10       </span></span><br><span class="line"><span class="string">                   "</span><span class="string">""</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'拉取代码完成'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'执行构建'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'执行构建完成'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"完成"</span></span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"失败"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外全新的流水线控制ui，可重复执行某阶段代码，插件中心搜索Blue Ocean安装即可，<strong>同时流水线编码可在流水线语法页面进行在线生成</strong></p><h2 id="4、pipeline自动化构建示例">4、pipeline自动化构建示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    tools &#123;</span><br><span class="line">        maven <span class="string">"maven3"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">"拉取代码"</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                git branch: <span class="string">'main'</span>, credentialsId: <span class="string">'gitlab'</span>, url: <span class="string">'http://192.168.44.103/root/java-project.git'</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'拉取成功'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">"执行构建"</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">            //    sh <span class="string">"mvn --version"</span></span><br><span class="line">                sh <span class="string">""</span><span class="string">" </span></span><br><span class="line"><span class="string">                cd demo-1</span></span><br><span class="line"><span class="string">                mvn clean package</span></span><br><span class="line"><span class="string">                "</span><span class="string">""</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'构建完成'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">"clean test server"</span>)&#123;</span><br><span class="line">            steps&#123;     </span><br><span class="line">sshPublisher(publishers: [sshPublisherDesc(configName: <span class="string">'testserver'</span>, transfers: [sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">''</span>, execCommand: <span class="string">''</span><span class="string">'rm -rf *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">docker stop demo</span></span><br><span class="line"><span class="string">docker rm demo</span></span><br><span class="line"><span class="string">docker rmi demo</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">'[, ]+'</span>, remoteDirectory: <span class="string">''</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">''</span>, sourceFiles: <span class="string">'/root'</span>)], usePromotionTimestamp: <span class="literal">false</span>, useWorkspaceInPromotion: <span class="literal">false</span>, verbose: <span class="literal">false</span>)])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">"发送jar包到测试服务器"</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">                sshPublisher(publishers: [sshPublisherDesc(configName: <span class="string">'testserver'</span>, transfers: [sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">''</span>, execCommand: <span class="string">''</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">'[, ]+'</span>, remoteDirectory: <span class="string">'/jarfile'</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">'demo-1/target'</span>, sourceFiles: <span class="string">'**/demo*.jar'</span>), sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">''</span>, execCommand: <span class="string">''</span><span class="string">'docker build -t demo .</span></span><br><span class="line"><span class="string">docker run -d -p 8080:8080 --name demo demo'</span><span class="string">''</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">'[, ]+'</span>, remoteDirectory: <span class="string">'/'</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">'demo-1/docker'</span>, sourceFiles: <span class="string">'demo-1/docker/dockerfile'</span>)], usePromotionTimestamp: <span class="literal">false</span>, useWorkspaceInPromotion: <span class="literal">false</span>, verbose: <span class="literal">false</span>)])</span><br><span class="line">   </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'jar send over!'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、多分支job">5、多分支job</h2><blockquote><p>简单来说就是一个仓库分支对应一个job，例如测试CICD和生产环境CICD</p></blockquote><p>首页进入首页或者blue Ocean首页，创建多分支流水线，填写对应的git仓库，选择立刻扫描，此时如果是多模块项目，需要在配置里修改<code>Jenkinsfile</code>文件位置，默认该文件需要在根目录，点击立刻扫描，jenkins就会默认去代码仓库找Jenkinsfile文件并自动替我们执行，同时也可以单独对某一个分支进行扫描构建</p><h2 id="6、两种流水线总结">6、两种流水线总结</h2><h3 id="6-1-声明式流水线">6.1 声明式流水线</h3><p><strong>好处</strong></p><ul><li><p>更像是在Jenkins web ui中的操作</p></li><li><p>可读性比较高</p></li><li><p>可以使用blue ocean自动生成</p></li><li><p>支持语法检查</p></li></ul><p><strong>坏处</strong></p><ul><li>代码逻辑能力比脚本式弱，不能完成特别复杂的任务</li></ul><h3 id="6-2-脚本式流水线">6.2 脚本式流水线</h3><p><strong>好处</strong></p><ul><li><p>更少的代码和弱规范要求</p></li><li><p>更灵活的自定义代码操作</p></li><li><p>不受约束，可以构建特别复杂的工作流和流水线</p></li></ul><p><strong>坏处</strong></p><ul><li><p>读写对编程要求比较高</p></li><li><p>比声明式流水线代码更复杂</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、CICD环境介绍与安装&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Jenkins，原名 Hudson，2011 年改为现在的名字。它是一个开源的实现持续集成的软件工具。&lt;br&gt;
官方网站：&lt;a href=&quot;https://www.jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jenkins.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/ebe57cb4d97a4292a3e7380541501708.png#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="Linux运维" scheme="https://www.shawn22.xyz/tags/Linux%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>分布式文件存储系统MinIO笔记</title>
    <link href="https://www.shawn22.xyz/posts/5ce99483.html"/>
    <id>https://www.shawn22.xyz/posts/5ce99483.html</id>
    <published>2022-09-28T09:33:33.000Z</published>
    <updated>2022-09-28T09:48:19.194Z</updated>
    
    <content type="html"><![CDATA[<h1>一、MinIO介绍</h1><h2 id="1、文件系统应用场景">1、文件系统应用场景</h2><blockquote><p>对象存储服务（Object Storage Service，OSS）是一种海量、安全、低成本、高可靠的云存储服<br>务，适合存放任意类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成<br>本</p></blockquote><p>互联网海量非结构化数据的存储需求</p><ul><li><p>电商网站：海量商品图片</p></li><li><p>视频网站：海量视频文件</p></li><li><p>网盘 : 海量文件</p></li><li><p>社交网站：海量图片</p></li></ul><p>参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124675675" target="_blank" rel="noopener" title="MinIO分布式文件服务器搭建与入门">MinIO分布式文件服务器搭建与入门</a></p><a id="more"></a><h2 id="2、MinIO介绍">2、MinIO介绍</h2><p>MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。  </p><p>MinIO是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p><p><strong>文档地址</strong></p><ul><li><p>官方文档：<a href="https://min.io/" target="_blank" rel="noopener" title="https://min.io/">https://min.io/</a>(推荐，更新快)</p></li><li><p>官方中文文档：<a href="http://www.minio.org.cn/" target="_blank" rel="noopener" title="http://www.minio.org.cn/">http://www.minio.org.cn/</a></p></li></ul><h2 id="3、MinIO优点">3、MinIO优点</h2><ul><li><p>部署简单: 一个single二进制文件即是一切，还可支持各种平台</p></li><li><p>minio支持海量存储，可按zone扩展(原zone不受任何影响)，支持单个对象最大5TB</p></li><li><p>兼容Amazon S3接口，充分考虑开发人员的需求和体验</p></li><li><p>低冗余且磁盘损坏高容忍，标准且最高的数据冗余系数为2(即存储一个1M的数据对象，实际占用  </p><p>磁盘空间为2M)。但在任意n/2块disk损坏的情况下依然可以读出数据(n为一个纠删码集合(Erasure  </p><p>Coding Set)中的disk数量)。并且这种损坏恢复是基于单个对象的，而不是基于整个存储卷的</p></li><li><p>读写性能优异<br><img src="https://img-blog.csdnimg.cn/acd45f10727743f7b4619a64b70a2050.png#pic_center" alt="在这里插入图片描述"></p></li></ul><h2 id="4、MinIO的基础概念">4、MinIO的基础概念</h2><ul><li><p><strong>Object</strong>：存储到 Minio 的基本对象，如文件、字节流，Anything…</p></li><li><p><strong>Bucket</strong>：用来存储 Object 的逻辑空间。每个 Bucket 之间的数据是相互隔离的。对于客户端而  </p><p>言，就相当于一个存放文件的顶层文件夹。</p></li><li><p>Drive：即存储数据的磁盘，在 MinIO 启动时，以参数的方式传入。Minio 中所有的对象数据都会  </p><p>存储在 Drive 里。</p></li><li><p>Set ：即一组 Drive 的集合，分布式部署根据集群规模自动划分一个或多个 Set ，每个 Set 中的  </p><p>Drive 分布在不同位置。一个对象存储在一个 Set 上。（For example: {1…64} is divided into 4  </p><p>sets each of size 16.）  </p><ul><li><p>一个对象存储在一个Set上</p></li><li><p>一个集群划分为多个Set</p></li><li><p>一个Set包含的Drive数量是固定的，默认由系统根据集群规模自动计算得出</p></li><li><p>一个SET中的Drive尽可能分布在不同的节点上</p></li></ul></li></ul><h2 id="5、纠删码EC（Erasure-Code）">5、纠删码EC（Erasure Code）</h2><p>MinIO 使用<strong>纠删码机制来保证高可靠性</strong>，使用 highwayhash 来处理数据损坏（ Bit Rot Protection ）</p><p>关于纠删码，简单来说就是可以通过数学计算，把丢失的数据进行还原，它可以将n份原始数据，增加m份数据，并能通过n+m份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。</p><h2 id="6、存储形式">6、存储形式</h2><p>文件对象上传到 MinIO ，会在对应的数据存储磁盘中，以 Bucket 名称为目录，文件名称为下一级目<br>录，文件名下是 part.1 和 xl.meta(老版本，最新版本如下图)，前者是编码数据块及检验块，后者是元数据文件。</p><p><img src="https://img-blog.csdnimg.cn/fcdd1c0c76f4403f97743c0f25d347f1.png#pic_center" alt="在这里插入图片描述"></p><h2 id="7、存储方案">7、存储方案</h2><p><img src="https://img-blog.csdnimg.cn/77ca62e8d6f346079927a342763c7461.png#pic_center" alt="在这里插入图片描述"></p><h1>二、Minio环境搭建</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p>官方文档：<a href="https://docs.min.io/docs/" target="_blank" rel="noopener" title="https://docs.min.io/docs/">https://docs.min.io/docs/</a><br>中文文档：<a href="http://docs.minio.org.cn/docs/" target="_blank" rel="noopener" title="http://docs.minio.org.cn/docs/">http://docs.minio.org.cn/docs/</a> （没有及时更新，容易被坑）</p></blockquote><p><strong>minio支持多种server启动模式</strong></p><ul><li><p>单机模式(无EC码)</p></li><li><p>单机模式(有EC码)</p></li><li><p>集群且有EC码</p></li></ul><h2 id="2、单机部署">2、单机部署</h2><h3 id="2-1-单机部署">2.1 单机部署</h3><p>minio server的standalone模式，即要管理的磁盘都在host本地。该启动模式一般仅用于实验环境、测试环境的验证和学习使用。在standalone模式下，还可以分为<strong>non-erasure code mode</strong>和<strong>erasure code</strong></p><ul><li><p><strong>modenon-erasure code mode</strong></p><p>在此启动模式下，对于每一份对象数据，minio直接在data下面存储这份数据，不会建立副本，也不会启用纠删码机制。因此，这种模式无论是服务实例还是磁盘都是“单点”，无任何高可用保障，磁盘损坏就表示数据丢失</p></li><li><p><strong>erasure code mode</strong>此模式为minio server实例传入多个本地磁盘参数。一旦遇到多于一个磁盘参数，minio server会自动启用erasure code mode。erasure code对磁盘的个数是有要求的，如不满足要求，实例启动将失败。 erasure code启用后，要求传给minio server的endpoint(standalone模式下，即本地磁盘上的目录)至少为4个</p></li></ul><h3 id="2-2-基于Linux部署">2.2 基于Linux部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 国外资源，龟速下载</span></span><br><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio </span><br><span class="line">chmod +x minio</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=admin</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=12345678</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认的配置目录是$&#123;HOME&#125;/.minio，可以通过–config-dir命令自定义配置目录</span></span><br><span class="line"><span class="comment"># ./minio server --config-dir /mnt/config /mnt/data</span></span><br><span class="line"><span class="comment">## minio 存储目录；--console-address 是 UI 界面的端口</span></span><br><span class="line">./minio server --console-address <span class="string">":9001"</span> /data</span><br></pre></td></tr></table></figure><h3 id="2-3-基于docker部署-推荐">2.3 基于docker部署(推荐)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br><span class="line"><span class="comment"># --console-address 是 UI 界面的端口</span></span><br><span class="line"><span class="comment"># --console-address 是 UI 界面的端口</span></span><br><span class="line">docker run --name minio -p 9000:9000 -p 9001:9001 \</span><br><span class="line">-d --restart=always -e <span class="string">"MINIO_ACCESS_KEY=admin"</span> -e <span class="string">"MINIO_SECRET_KEY=password"</span> \</span><br><span class="line">-v ~/minio/data:/data -v ~/minio/config:/root/.minio \</span><br><span class="line">minio/minio server  --console-address <span class="string">":9001"</span> /data</span><br></pre></td></tr></table></figure><p>非root启动，<code>MINIO_ROOT_USER</code>是新版本的变量定义，<code>MINIO_ACCESS_KEY</code>是老版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 9000:9000 \</span><br><span class="line">-p 9001:9001 \</span><br><span class="line">--user $(id -u):$(id -g) \</span><br><span class="line">--name minio \</span><br><span class="line">-e <span class="string">"MINIO_ROOT_USER=admin"</span> \</span><br><span class="line">-e <span class="string">"MINIO_ROOT_PASSWORD=password"</span> \</span><br><span class="line">-v <span class="variable">$&#123;HOME&#125;</span>/minio/data:/data \</span><br><span class="line">quay.io/minio/minio server /data --console-address <span class="string">":9001"</span></span><br></pre></td></tr></table></figure><h2 id="3、minio-纠删码模式">3、minio 纠删码模式</h2><p>Minio 使用纠删码<code>erasure code</code>和校验和<code>checksum</code>来保护数据免受硬件故障和无声数据损坏。 即便您丢失一半数量（N/2）的硬盘，您仍然可以恢复数据。</p><blockquote><p>纠删码是一种恢复丢失和损坏数据的数学算法， Minio 采用 Reed-Solomon code 将对象拆分成 N/2 数据和 N/2 奇偶校验块。 这就意味着如果是 12 块盘，一个对象会被分成 6 个数据块、6 个奇偶校验块，你可以丢失任意 6 块盘（不管其是存放的数据块还是奇偶校验块），你仍可以从剩下的盘中的数据进行恢复</p></blockquote><p>使用 Minio Docker 镜像，在 8 块盘中启动 Minio 服务，默认账号密码是minioadmin/minioadmin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 9001:9001 --name minio \</span><br><span class="line">  -v /mnt/data1:/data1 \</span><br><span class="line">  -v /mnt/data2:/data2 \</span><br><span class="line">  -v /mnt/data3:/data3 \</span><br><span class="line">  -v /mnt/data4:/data4 \</span><br><span class="line">  -v /mnt/data5:/data5 \</span><br><span class="line">  -v /mnt/data6:/data6 \</span><br><span class="line">  -v /mnt/data7:/data7 \</span><br><span class="line">  -v /mnt/data8:/data8 \</span><br><span class="line">  minio/minio server /data&#123;1...8&#125; --console-address <span class="string">":9001"</span></span><br></pre></td></tr></table></figure><h2 id="4、分布式集群搭建">4、分布式集群搭建</h2><h3 id="4-1-介绍">4.1 介绍</h3><p>分布式 Minio 可以让你将多块硬盘（甚至在不同的机器上）组成一个对象存储服务。由于硬盘分布在不同的节点上，分布式 Minio 避免了单点故障</p><p><img src="https://img-blog.csdnimg.cn/3b8d1dee8691494bbcd6ddbf4cf9d522.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-2-分布式-Minio-优势">4.2 分布式 Minio 优势</h3><ul><li><p><strong>数据保护</strong></p><p>分布式 Minio 采用 纠删码来防范多个节点宕机和位衰减<code>bit rot</code></p><p>分布式 Minio <strong>至少需要 4 个硬盘</strong>，使用分布式 Minio 自动引入了纠删码功能</p></li><li><p><strong>高可用</strong></p><p>单机 Minio 服务存在单点故障，相反，如果是一个有 N 块硬盘的分布式 Minio,只要有 N/2 硬盘在线，你的数据就是安全的。不过你需要至少有 N/2+1 个硬盘来创建新的对象</p><p>例如，一个 16 节点的 Minio 集群，每个节点 16 块硬盘，就算 8 台服务器宕机，这个集群仍然是可读的，不过你需要 9 台服务器才能写数据</p></li><li><p><strong>一致性</strong></p><p>Minio 在分布式和单机模式下，所有读写操作都严格遵守 <strong>read-after-write</strong> 一致性模型</p></li></ul><h3 id="4-3-Linux运行分布式-Minio">4.3 Linux运行分布式 Minio</h3><p>启动一个分布式 Minio 实例，你只需要<strong>把硬盘位置做为参数传给 minio server 命令</strong>即可（<strong>这里必须要四块及以上硬盘，模拟路径会报错</strong>），然后你需要在所有其它节点运行同样的命令。</p><blockquote><p>可以参考官网：<a href="https://docs.min.io/docs/distributed-minio-quickstart-guide.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/distributed-minio-quickstart-guide.html">https://docs.min.io/docs/distributed-minio-quickstart-guide.html</a></p></blockquote><ul><li><p>分布式 Minio 里所有的节点需要有同样的 access 秘钥和 secret 秘钥，这样这些节点才能建立联接。为了实现这个，你需要在执行 minio server 命令之前，先将 access 秘钥和 secret 秘钥 export 成环境变量。<strong>新版本使用 MINIO_ROOT_USER&amp;MINIO_ROOT_PASSWORD</strong></p></li><li><p>分布式 Minio 使用的磁盘里必须是干净的，里面没有数据</p></li><li><p>分布式 Minio 里的节点时间差不能超过 3 秒，可以使用NTP 来保证时间一致</p></li><li><p>在 Windows 下运行分布式 Minio 处于实验阶段</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载minio</span></span><br><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br><span class="line">chmod +x minio</span><br><span class="line">sudo cp minio /data/minio/run/minio</span><br><span class="line">sudo mv minio /usr/bin/minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备好四块硬盘并挂载其对应的/data/minio/data目录下，创建目录</span></span><br><span class="line"><span class="comment"># run：启动脚本及二进制文件目录；</span></span><br><span class="line"><span class="comment"># data：数据存储目录；</span></span><br><span class="line"><span class="comment"># /etc/minio：配置文件目录；</span></span><br><span class="line">mkdir -p /data/minio/&#123;run,data&#125; &amp;&amp; mkdir -p /etc/minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群启动文件,vim /data/minio/run/run.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=admin</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=password</span><br><span class="line"><span class="comment"># –config-dir：指定集群配置文件目</span></span><br><span class="line">/data/minio/run/minio server --address <span class="string">":9000"</span> --console-address <span class="string">":9001"</span> --config-dir /etc/minio \</span><br><span class="line">http://192.168.99.1/data/minio/data \</span><br><span class="line">http://192.168.99.2/data/minio/data \</span><br><span class="line">http://192.168.99.3/data/minio/data \</span><br><span class="line">http://192.168.99.4/data/minio/data</span><br></pre></td></tr></table></figure><p>配置为系统服务<code>vim /usr/lib/systemd/system/minio.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Minio service</span><br><span class="line">Documentation=https://docs.minio.io/</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/data/minio/run/</span><br><span class="line">ExecStart=/data/minio/run/run.sh</span><br><span class="line"> </span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>移动可执行文件以及启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给所有涉及到的文件或目录添加权限</span></span><br><span class="line">chmod +x /data/minio/run/minio &amp;&amp; chmod +x /data/minio/run/run.sh</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> minio &amp;&amp; systemctl start minio</span><br></pre></td></tr></table></figure><p>最后生产环境需要使用Nginx将集群地址进行代理，对外统一入口，可以参考下面docker的nginx配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">upstream minio&#123;</span><br><span class="line">        server 192.168.99.1:9000;</span><br><span class="line">        server 192.168.99.2:9000;</span><br><span class="line">        server 192.168.99.3:9000;</span><br><span class="line">        server 192.168.99.4:9000;</span><br><span class="line">&#125;</span><br><span class="line">upstream console &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server minio1:9001;</span><br><span class="line">        server minio2:9001;</span><br><span class="line">        server minio3:9001;</span><br><span class="line">        server minio4:9001;</span><br><span class="line">    &#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 9000;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://minio;</span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">                client_max_body_size 1000m;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 9001;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://console;</span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">                client_max_body_size 1000m;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-Docker-Compose-部署-MinIO">4.4 Docker Compose 部署 MinIO</h3><blockquote><p>参考：<a href="https://docs.min.io/docs/deploy-minio-on-docker-compose.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/deploy-minio-on-docker-compose.html">https://docs.min.io/docs/deploy-minio-on-docker-compose.html</a></p></blockquote><p>要在 Docker Compose 上部署分布式 MinIO，请下载<a href="https://raw.githubusercontent.com/minio/minio/master/docs/orchestration/docker-compose/docker-compose.yaml" target="_blank" rel="noopener" title="docker-compose.yaml">docker-compose.yaml</a>和<a href="https://raw.githubusercontent.com/minio/minio/master/docs/orchestration/docker-compose/nginx.conf" target="_blank" rel="noopener" title="nginx.conf">nginx.conf</a>到你当前的工作目录</p><p><code>vim docker-compose.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://docs.docker.com/compose/compose-file/compose-file-v3/</span></span><br><span class="line"><span class="comment"># Settings and configurations that are common for all containers</span></span><br><span class="line"><span class="attr">x-minio-common:</span> <span class="string">&amp;minio-common</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">quay.io/minio/minio:RELEASE.2022-09-07T22-25-02Z</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">server</span> <span class="string">--console-address</span> <span class="string">":9001"</span> <span class="string">http://minio&#123;1...4&#125;/data&#123;1...2&#125;</span></span><br><span class="line">  <span class="attr">expose:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9000"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9001"</span></span><br><span class="line">  <span class="comment"># environment:</span></span><br><span class="line">    <span class="comment"># MINIO_ROOT_USER: minioadmin</span></span><br><span class="line">    <span class="comment"># MINIO_ROOT_PASSWORD: minioadmin</span></span><br><span class="line">  <span class="attr">healthcheck:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost:9000/minio/health/live"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">    <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># starts 4 docker containers running minio server instances.</span></span><br><span class="line"><span class="comment"># using nginx reverse proxy, load balancing, you can access</span></span><br><span class="line"><span class="comment"># it through port 9000.</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio1:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*minio-common</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">minio1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data1-1:/data1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data1-2:/data2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio2:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*minio-common</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">minio2</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data2-1:/data1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data2-2:/data2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio3:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*minio-common</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">minio3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data3-1:/data1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data3-2:/data2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio4:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*minio-common</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">minio4</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data4-1:/data1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data4-2:/data2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19.2-alpine</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9000:9000"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9001:9001"</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## By default this config uses default local driver,</span></span><br><span class="line"><span class="comment">## For custom volumes replace with volume driver configuration.</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data1-1:</span></span><br><span class="line">  <span class="attr">data1-2:</span></span><br><span class="line">  <span class="attr">data2-1:</span></span><br><span class="line">  <span class="attr">data2-2:</span></span><br><span class="line">  <span class="attr">data3-1:</span></span><br><span class="line">  <span class="attr">data3-2:</span></span><br><span class="line">  <span class="attr">data4-1:</span></span><br><span class="line">  <span class="attr">data4-2:</span></span><br></pre></td></tr></table></figure><p><code>vim nginx.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  4096;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">    upstream minio &#123;</span><br><span class="line">        server minio1:9000;</span><br><span class="line">        server minio2:9000;</span><br><span class="line">        server minio3:9000;</span><br><span class="line">        server minio4:9000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream console &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server minio1:9001;</span><br><span class="line">        server minio2:9001;</span><br><span class="line">        server minio3:9001;</span><br><span class="line">        server minio4:9001;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       9000;</span><br><span class="line">        listen  [::]:9000;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># To allow special characters in headers</span></span><br><span class="line">        ignore_invalid_headers off;</span><br><span class="line">        <span class="comment"># Allow any size file to be uploaded.</span></span><br><span class="line">        <span class="comment"># Set to a value such as 1000m; to restrict file size to a specific value</span></span><br><span class="line">        client_max_body_size 0;</span><br><span class="line">        <span class="comment"># To disable buffering</span></span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_request_buffering off;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">            proxy_connect_timeout 300;</span><br><span class="line">            <span class="comment"># Default is HTTP/1, keepalive is only enabled in HTTP/1.1</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">            chunked_transfer_encoding off;</span><br><span class="line"></span><br><span class="line">            proxy_pass http://minio;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       9001;</span><br><span class="line">        listen  [::]:9001;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># To allow special characters in headers</span></span><br><span class="line">        ignore_invalid_headers off;</span><br><span class="line">        <span class="comment"># Allow any size file to be uploaded.</span></span><br><span class="line">        <span class="comment"># Set to a value such as 1000m; to restrict file size to a specific value</span></span><br><span class="line">        client_max_body_size 0;</span><br><span class="line">        <span class="comment"># To disable buffering</span></span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_request_buffering off;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># This is necessary to pass the correct IP to be hashed</span></span><br><span class="line">            real_ip_header X-Real-IP;</span><br><span class="line"></span><br><span class="line">            proxy_connect_timeout 300;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># To support websocket</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line">            </span><br><span class="line">            chunked_transfer_encoding off;</span><br><span class="line"></span><br><span class="line">            proxy_pass http://console;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后<code>docker-compose pull</code>和<code>docker-compose up</code>启动</p><h3 id="4-5-扩展现有的分布式集群">4.5 扩展现有的分布式集群</h3><p>例如我们是通过区的方式启动 MinIO 集群，命令行如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=admin</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=12345678</span><br><span class="line">minio server http://host&#123;1...32&#125;/<span class="built_in">export</span>&#123;1...32&#125;</span><br></pre></td></tr></table></figure><p>MinIO 支持通过命令，指定新的集群来扩展现有集群（纠删码模式），命令行如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=admin</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=12345678</span><br><span class="line">minio server http://host&#123;1...32&#125;/<span class="built_in">export</span>&#123;1...32&#125; http://host&#123;33...64&#125;/<span class="built_in">export</span>&#123;1...32&#125;</span><br></pre></td></tr></table></figure><p>现在整个集群就扩展了 1024 个磁盘，总磁盘变为 2048 个，新的对象上传请求会自动分配到最少使用的集群上。通过以上扩展策略，您就可以按需扩展您的集群。重新配置后重启集群，会立即在集群中生效，并对现有集群无影响。如上命令中，我们可以把原来的集群看做一个区，新增集群看做另一个区，新对象按每个区域中的可用空间比例放置在区域中。在每个区域内，基于确定性哈希算法确定位置。</p><blockquote><p><strong>说明:</strong> <strong>您添加的每个区域必须具有与原始区域相同的磁盘数量（纠删码集）大小，以便维持相同的数据冗余 SLA。</strong> 例如，第一个区有 8 个磁盘，您可以将集群扩展为 16 个、32 个或 1024 个磁盘的区域，您只需确保部署的 SLA 是原始区域的倍数即可。</p></blockquote><h1>三、Minio 客户端使用</h1><h2 id="1、介绍-v2">1、介绍</h2><blockquote><p>参考：<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a></p></blockquote><p>MinIO Client (mc)为 ls，cat，cp，mirror，diff，find 等 UNIX 命令提供了一种替代方案。它支持文件系统和兼容 Amazon S3 的云存储服务（AWS Signature v2 和 v4）</p><p>mc客户端的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.min.io/client/mc/release/linux-amd64/mc</span><br><span class="line">chmod +x mc</span><br><span class="line">./mc --<span class="built_in">help</span></span><br><span class="line">sudo mv mc /usr/<span class="built_in">local</span>/sbin/</span><br></pre></td></tr></table></figure><p>mc全部命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ls       列出文件和文件夹。</span><br><span class="line">mb       创建一个存储桶或一个文件夹。</span><br><span class="line">cat      显示文件和对象内容。</span><br><span class="line">pipe     将一个STDIN重定向到一个对象或者文件或者STDOUT。</span><br><span class="line">share    生成用于共享的URL。</span><br><span class="line">cp       拷贝文件和对象。</span><br><span class="line">mirror   给存储桶和文件夹做镜像。</span><br><span class="line">find     基于参数查找文件。</span><br><span class="line">diff     对两个文件夹或者存储桶比较差异。</span><br><span class="line">rm       删除文件和对象。</span><br><span class="line">events   管理对象通知。</span><br><span class="line">watch    监视文件和对象的事件。</span><br><span class="line">policy   管理访问策略。</span><br><span class="line">config   管理mc配置文件。</span><br><span class="line">update   检查软件更新。</span><br><span class="line">version  输出版本信息。</span><br></pre></td></tr></table></figure><h2 id="2、mc配置与基本操作">2、mc配置与基本操作</h2><p><code>mc</code>将所有的配置信息都存储在<code>~/.mc/config.json</code>文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询mc host配置</span></span><br><span class="line">mc config host ls</span><br><span class="line"><span class="comment"># 添加minio服务    </span></span><br><span class="line">mc config host add minio-server http://192.168.249.131:9000 minioadmin minioadmin</span><br><span class="line"><span class="comment"># 删除host</span></span><br><span class="line">mc config host remove minio-server</span><br><span class="line"><span class="comment"># 查询minio服务上的所有buckets(文件和文件夹)</span></span><br><span class="line">mc ls minio-server</span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">mc cp minio-server/fox.jpg  /tmp/ </span><br><span class="line"><span class="comment">#删除文件</span></span><br><span class="line">mc rm minio-server/fox/fox.jpg</span><br><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">mc cp zookeeper.out minio-server/fox/</span><br><span class="line"><span class="comment">#==================桶的管理==================</span></span><br><span class="line"><span class="comment"># 创建一个新的桶</span></span><br><span class="line">mc mb minio-server/bucket01</span><br><span class="line"><span class="comment"># 删除bucket</span></span><br><span class="line">mc rb minio-server/bucket02</span><br><span class="line"><span class="comment"># bucket不为空，可以强制删除（慎用）</span></span><br><span class="line">mc rb --force minio-server/bucket01</span><br><span class="line"><span class="comment"># 查询bucket03磁盘使用情况</span></span><br><span class="line">mc du minio-server/bucket03</span><br><span class="line"><span class="comment"># =====================数据迁移==================</span></span><br><span class="line">mc <span class="built_in">alias</span> <span class="built_in">set</span> minio1 http://172.20.10.2:9000 adminminio adminminio</span><br><span class="line">mc <span class="built_in">alias</span> <span class="built_in">set</span> minio2 http://172.20.10.3:9000 adminminio adminminio</span><br><span class="line"><span class="comment"># mc alias set 名称 服务地址 用户名 密码</span></span><br><span class="line"><span class="comment">#全量迁移,重名文件不覆盖,bucket不存在会自动创建</span></span><br><span class="line">mc mirror minio1 minio2</span><br><span class="line"><span class="comment">#只是迁移某个bucket,以test为例,目标的bucket需要提前建好</span></span><br><span class="line">mc mirror minio1/<span class="built_in">test</span> minio2/<span class="built_in">test</span></span><br><span class="line"><span class="comment">#覆盖重名文件,加--overwrite</span></span><br><span class="line">mc mirror --overwrite minio1/<span class="built_in">test</span> minio2/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 将本地文件夹递归镜像到Amazon S3云存储，并保留所有本地文件属性</span></span><br><span class="line">mc mirror -a backup/ s3/archive</span><br></pre></td></tr></table></figure><h2 id="3、mc-admin-使用">3、mc admin 使用</h2><h3 id="3-1-基本介绍">3.1 基本介绍</h3><blockquote><p>minIO Client（mc）提供了“ admin”子命令来对您的 MinIO 部署执行管理任务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">service     服务重启并停止所有MinIO服务器</span><br><span class="line">update      更新更新所有MinIO服务器</span><br><span class="line">info        信息显示MinIO服务器信息</span><br><span class="line">user        用户管理用户</span><br><span class="line">group       小组管理小组</span><br><span class="line">policy      MinIO服务器中定义的策略管理策略</span><br><span class="line">config      配置管理MinIO服务器配置</span><br><span class="line">heal        修复MinIO服务器上的磁盘，存储桶和对象</span><br><span class="line">profile     概要文件生成概要文件数据以进行调试</span><br><span class="line">top         顶部提供MinIO的顶部统计信息</span><br><span class="line">trace       跟踪显示MinIO服务器的http跟踪</span><br><span class="line">console     控制台显示MinIO服务器的控制台日志</span><br><span class="line">prometheus  Prometheus管理Prometheus配置</span><br><span class="line">kms         kms执行KMS管理操作</span><br></pre></td></tr></table></figure><h3 id="3-2-用户管理">3.2 用户管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mc admin user --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#新建用户</span></span><br><span class="line">mc admin user add minio-server fox</span><br><span class="line">mc admin user add minio-server fox02 12345678</span><br><span class="line"><span class="comment">#查看用户</span></span><br><span class="line">mc admin user list minio-server</span><br><span class="line"><span class="comment">#禁用用户</span></span><br><span class="line">mc admin user <span class="built_in">disable</span> minio-server fox02</span><br><span class="line"><span class="comment">#启用用户</span></span><br><span class="line">mc admin user <span class="built_in">enable</span> minio-server fox02</span><br><span class="line"><span class="comment">#查看用户信息</span></span><br><span class="line">mc admin user info minio-server fox</span><br><span class="line"><span class="comment">#删除用户</span></span><br><span class="line">mc admin user remove minio-server fox02</span><br></pre></td></tr></table></figure><h3 id="3-3-策略管理">3.3 策略管理</h3><p>policy 命令，用于添加，删除，列出策略，获取有关策略的信息并为 MinIO 服务器上的用户设置策略(创建用户之后还不能进行登录，必须绑定对应的策略)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mc admin policy --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#列出MinIO上的所有固定策略</span></span><br><span class="line">mc admin policy list minio-server</span><br><span class="line"><span class="comment"># 查看plicy信息</span></span><br><span class="line">mc admin policy info minio-server readwrite</span><br><span class="line"><span class="comment"># 为用户添加策略</span></span><br><span class="line">mc admin policy <span class="built_in">set</span> minio-server readwrite user=fox02</span><br><span class="line"><span class="comment"># 取消策略</span></span><br><span class="line">mc admin policy <span class="built_in">unset</span> minio-server readwrite user=fox02</span><br></pre></td></tr></table></figure><h3 id="3-4-添加用户权限自定义策略">3.4 添加用户权限自定义策略</h3><p>AWS Identity and Access Management (IAM) 是一种 Web 服务，可以帮助您安全地控制对 AWS 资源的访问。您可以使用 IAM 控制对哪个用户进行身份验证 (登录) 和授权 (具有权限) 以使用资源。</p><table><thead><tr><th>权限</th><th>解释</th></tr></thead><tbody><tr><td>consoleAdmin</td><td>控制台管理员</td></tr><tr><td>diagnostics</td><td>诊断</td></tr><tr><td>readonly</td><td>只读</td></tr><tr><td>readwrite</td><td>读写</td></tr><tr><td>writeonly</td><td>只写</td></tr></tbody></table><p>编写自己的自定义策略<code>vim mytest.json</code>，这里只能操作test桶，做到了资源隔离</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line"> <span class="attr">"Statement"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">   <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"s3:GetObject"</span>,</span><br><span class="line">                <span class="string">"s3:ListAllMyBuckets"</span>,</span><br><span class="line">                <span class="string">"s3:ListBucket"</span>,</span><br><span class="line">                <span class="string">"s3:PutObject"</span>,</span><br><span class="line">                <span class="string">"s3:DeleteObject"</span>,</span><br><span class="line">                <span class="string">"s3:GetBucketLocation"</span></span><br><span class="line">            ],</span><br><span class="line">   <span class="attr">"Resource"</span>: [</span><br><span class="line">    <span class="string">"arn:aws:s3:::test/*"</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Version</td><td>标识策略的版本号，Minio中一般为&quot;<strong>2012-10-17</strong>&quot;</td></tr><tr><td>Statement</td><td>策略授权语句，描述策略的详细信息，包含Effect（效果）、Action（动作）、Principal（用户）、Resource（资源）和Condition（条件）。其中Condition为可选</td></tr><tr><td>Effect</td><td>Effect（效果）作用包含两种：Allow（允许）和Deny（拒绝），系统预置策略仅包含允许的授权语句，自定义策略中可以同时包含允许和拒绝的授权语句，当策略中既有允许又有拒绝的授权语句时，遵循Deny优先的原则</td></tr><tr><td>Action</td><td>Action（动作）对资源的具体操作权限，格式为：服务名:资源类型:操作，支持单个或多个操作权限，支持通配符号*，通配符号表示所有。例如 s3:GetObject ，表示获取对象</td></tr><tr><td>Resource</td><td>Resource（资源）策略所作用的资源，支持通配符号*，通配符号表示所有。在JSON视图中，不带Resource表示对所有资源生效。Resource支持以下字符：-_0-9a-zA-Z*./\，如果Resource中包含不支持的字符，请采用通配符号*。例如：arn:aws:s3:::my-bucketname/myobject*\，表示minio中my-bucketname/myobject目录下所有对象文件</td></tr><tr><td>Condition</td><td>Condition（条件）您可以在创建自定义策略时，通过Condition元素来控制策略何时生效。Condition包括条件键和运算符，条件键表示策略语句的Condition元素，分为全局级条件键和服务级条件键。全局级条件键（前缀为g:）适用于所有操作，服务级条件键（前缀为服务缩写，如obs:）仅适用于对应服务的操作。运算符与条件键一起使用，构成完整的条件判断语句</td></tr></tbody></table><p>最后把权限给与用户，发现该用户只能操作对应的桶，实现权限分离。<strong>同时在Web界面也可以快速编辑授权用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加新的策略</span></span><br><span class="line">mc admin policy add minio-server mypolicy mytest.json</span><br><span class="line">mc admin policy list minio-server</span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">mc admin user add minio-server fox03 12345678</span><br><span class="line"><span class="comment"># 设置用户的访问策略</span></span><br><span class="line">mc admin policy <span class="built_in">set</span> minio-server mypolicy user=fox03</span><br></pre></td></tr></table></figure><h2 id="4、桶策略-匿名访问策略">4、桶策略(匿名访问策略)</h2><h3 id="4-1-桶策略简介">4.1 桶策略简介</h3><blockquote><p>桶策略和IAM用户权限不同，用户权限管理的是用户的登录/可读/可写等操作，桶策略管理的是匿名用户的访问与上传，也可以自定义操作。<br>参考文章：<a href="https://blog.csdn.net/weixin_45821811/article/details/120595435" target="_blank" rel="noopener" title="Minio 小技巧 | 通过编码设置桶策略，实现永久访问和下载">Minio 小技巧 | 通过编码设置桶策略，实现永久访问和下载</a></p></blockquote><p>mc的命令行客户端，在mc种对桶策略设置对应分别是 <code>none, download, upload, public </code>,与minio的匿名访问策略一一对应：</p><ul><li><p><code>download</code>(read only )允许未经认证的访问</p></li><li><p><code>upload</code> (write only)允许未经认证的上传</p></li><li><p><code>public</code>(read+write)允许读写</p></li><li><p><code>none</code>(none) 默认值，必须经过认证</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更改桶权限为public(简单操作，对桶进行全局操作，无论桶中文件名前缀是什么)，也可以对其中一个路径</span></span><br><span class="line">mc policy <span class="built_in">set</span> public minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 设置只读</span></span><br><span class="line">mc policy <span class="built_in">set</span> download minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 只上传</span></span><br><span class="line">mc policy <span class="built_in">set</span> upload minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 自定义桶策略</span></span><br><span class="line">mc policy <span class="built_in">set</span>-json /path/to/policy.json minio-server/<span class="built_in">test</span>/images</span><br><span class="line"><span class="comment"># 获取桶策略</span></span><br><span class="line">mc policy get minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 获取桶策略的json</span></span><br><span class="line">mc policy get-json minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 列出当前的策略</span></span><br><span class="line">mc policy list minio-server/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="4-2-自定义桶策略">4.2 自定义桶策略</h3><ul><li><p>Version：版本</p></li><li><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html" target="_blank" rel="noopener" title="Actions">Actions</a>– 对于每个资源，Amazon S3 支持一组操作。您可以使用操作关键字标识将允许（或拒绝）的资源操作</p></li><li><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-bucket-user-policy-specifying-principal-intro.html" target="_blank" rel="noopener" title="Principal">Principal</a> ：被允许访问语句中的操作和资源的帐户或用户。在存储桶策略中，委托人是作为此权限接收者的用户、账户、服务或其他实体</p></li><li><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/amazon-s3-policy-keys.html" target="_blank" rel="noopener" title="Condition">Condition</a>– 政策生效的条件。您可以使用 <code>AWS</code>范围的密钥和 <code>Amazon S3</code> 特定的密钥来指定 <code>Amazon S3</code> 访问策略中的条件</p></li><li><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-arn-format.html" target="_blank" rel="noopener" title="Resource">Resource</a>– 存储桶、对象、访问点和作业是您可以允许或拒绝权限的 Amazon S3 资源。在策略中，您使用 Amazon 资源名称 (ARN) 来标识资源</p></li><li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_effect.html" target="_blank" rel="noopener" title="Effect">Effect</a>：对于每个资源，Amazon S3 支持一组操作。您可以使用操作关键字标识将允许（或拒绝）的资源操作</p><p>如：该<code>s3:ListBucket</code>权限允许用户使用 Amazon S3 <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGET.html" target="_blank" rel="noopener" title="GET Bucket (List Objects)">GET Bucket (List Objects)</a>操作</p></li></ul><p>下面是自定义的桶策略，支持可读可写，完成后赋予相应的桶即可，<code>mc policy set-json /path/to/policy.json minio-server/test/images</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line"> <span class="string">"Statement"</span>: [</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">   <span class="string">"Principal"</span>: &#123;</span><br><span class="line">                <span class="string">"AWS"</span>: [</span><br><span class="line">                    <span class="string">"*"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">   <span class="string">"Action"</span>: [</span><br><span class="line">                <span class="string">"s3:GetBucketLocation"</span>,</span><br><span class="line">                <span class="string">"s3:ListBucket"</span>,</span><br><span class="line">                <span class="string">"s3:ListBucketMultipartUploads"</span></span><br><span class="line"></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"Resource"</span>: [</span><br><span class="line">    <span class="string">"arn:aws:s3:::test"</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> ,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">   <span class="string">"Action"</span>: [</span><br><span class="line">                <span class="string">"s3:GetObject"</span>,</span><br><span class="line">                <span class="string">"s3:PutObject"</span>,</span><br><span class="line">                <span class="string">"s3:DeleteObject"</span>,</span><br><span class="line">                <span class="string">"s3:AbortMultipartUpload"</span>,</span><br><span class="line">                <span class="string">"s3:ListMultipartUploadParts"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Principal"</span>: &#123;</span><br><span class="line">                <span class="string">"AWS"</span>: [</span><br><span class="line">                    <span class="string">"*"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">   <span class="string">"Resource"</span>: [</span><br><span class="line">    <span class="string">"arn:aws:s3:::test/*"</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-集成SpringBoot，编码设置桶策略">4.3 集成SpringBoot，编码设置桶策略</h3><p>第一种是json转string</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolicyJsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要在resource下先创建好文件</span></span><br><span class="line"><span class="comment">     * json转String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 这里是传入的桶名称，执行完后会替换掉原json文件中的MybuckerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">json2String</span><span class="params">(String path, String bucketName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(path);</span><br><span class="line">        InputStream in = resource.getInputStream();</span><br><span class="line">        <span class="comment">// 读取文件上的数据。</span></span><br><span class="line">        <span class="comment">// 将字节流向字符流的转换。</span></span><br><span class="line">        <span class="comment">// 读取</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(in, StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">// 创建字符流缓冲区</span></span><br><span class="line">        <span class="comment">// 缓冲</span></span><br><span class="line">        BufferedReader bufr = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufr.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.append(System.lineSeparator()+line);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">        JSONObject parse = (JSONObject) JSONObject.parse(result.toString());</span><br><span class="line">        JSONArray statement = (JSONArray) parse.get(<span class="string">"Statement"</span>);</span><br><span class="line">        JSONObject o = (JSONObject) statement.get(<span class="number">0</span>);</span><br><span class="line">        o.remove(<span class="string">"Resource"</span>);</span><br><span class="line">        o.fluentPut(<span class="string">"Resource"</span>, <span class="string">"arn:aws:s3:::"</span> + bucketName);</span><br><span class="line">        JSONObject o1 = (JSONObject) statement.get(<span class="number">1</span>);</span><br><span class="line">        o1.remove(<span class="string">"Resource"</span>);</span><br><span class="line">        o1.fluentPut(<span class="string">"Resource"</span>, <span class="string">"arn:aws:s3:::"</span> + bucketName + <span class="string">"/*"</span>);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">        <span class="keyword">return</span> parse.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，当然在管理后台也可以设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolicyService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 占位符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUCKET_PARAM = <span class="string">"$&#123;bucket&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bucket权限-读写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String READ_WRITE = <span class="string">"&#123;\"Version\":\"2012-10-17\",\"Statement\":[&#123;\"Effect\":\"Allow\",\"Principal\":&#123;\"AWS\":[\"*\"]&#125;,\"Action\":[\"s3:GetBucketLocation\",\"s3:ListBucket\",\"s3:ListBucketMultipartUploads\"],\"Resource\":[\"arn:aws:s3:::"</span> + BUCKET_PARAM + <span class="string">"\"]&#125;,&#123;\"Effect\":\"Allow\",\"Principal\":&#123;\"AWS\":[\"*\"]&#125;,\"Action\":[\"s3:DeleteObject\",\"s3:GetObject\",\"s3:ListMultipartUploadParts\",\"s3:PutObject\",\"s3:AbortMultipartUpload\"],\"Resource\":[\"arn:aws:s3:::"</span> + BUCKET_PARAM + <span class="string">"/*\"]&#125;]&#125;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bucket权限-只读</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WRITE_ONLY = <span class="string">"&#123;\"Version\":\"2012-10-17\",\"Statement\":[&#123;\"Effect\":\"Allow\",\"Principal\":&#123;\"AWS\":[\"*\"]&#125;,\"Action\":[\"s3:GetBucketLocation\",\"s3:ListBucketMultipartUploads\"],\"Resource\":[\"arn:aws:s3:::"</span> + BUCKET_PARAM + <span class="string">"\"]&#125;,&#123;\"Effect\":\"Allow\",\"Principal\":&#123;\"AWS\":[\"*\"]&#125;,\"Action\":[\"s3:AbortMultipartUpload\",\"s3:DeleteObject\",\"s3:ListMultipartUploadParts\",\"s3:PutObject\"],\"Resource\":[\"arn:aws:s3:::"</span> + BUCKET_PARAM + <span class="string">"/*\"]&#125;]&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给桶设置策略 ，可读可写等等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBucketPolicy</span><span class="params">(String bucketName)</span> </span>&#123;</span><br><span class="line">        String policy= PolicyJsonUtils.json2String(<span class="string">"policyJson.json"</span>,bucketName);</span><br><span class="line">        <span class="comment">//用工具类 就是把里面的常量替换出来就可以了，当时写了两种方式（喜欢那种就用那种吧）</span></span><br><span class="line">        MinioClient minioClient =</span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(<span class="string">"http://192.168.249.131:9000"</span>)</span><br><span class="line">                        .credentials(<span class="string">"minioadmin"</span>, <span class="string">"minioadmin"</span>)</span><br><span class="line">                        .build();</span><br><span class="line">        minioClient.setBucketPolicy(SetBucketPolicyArgs.builder().bucket(bucketName).</span><br><span class="line">                config(READ_WRITE.replace(BUCKET_PARAM, bucketName)).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里写桶的名字</span></span><br><span class="line">        setBucketPolicy(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、其他桶操作API">5、其他桶操作API</h2><blockquote><p>其他桶策略可以参考：<a href="https://yunyanchengyu.blog.csdn.net/article/details/120841843" target="_blank" rel="noopener" title="JAVA集成Minio之存储桶操作API使用详解">JAVA集成Minio之存储桶操作API使用详解</a><br>官方参考文档：<a href="https://docs.min.io/docs/java-client-api-reference.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a></p></blockquote><ul><li><p>桶是否存在</p></li><li><p>桶创建</p></li><li><p>查询存储桶信息列表</p></li><li><p>删除存储桶</p></li><li><p>加密桶</p></li><li><p>桶生命周期设置</p></li><li><p>桶的通知配置</p></li><li><p>桶的策略配置</p></li><li><p>桶的复制配置</p></li><li><p>存储桶标签</p></li><li><p>桶的多版本设置</p></li><li><p>桶的常用配置删除</p></li></ul><h1>四、Java整合Minio使用</h1><h2 id="1、Minio-Java-Client-使用">1、Minio Java Client 使用</h2><blockquote><p>MinIO Java Client SDK 提供简单的 API 来访问任何与 Amazon S3 兼容的对象存储服务。<br>官方 demo: <a href="https://xie.infoq.cn/link?target=https://github.com/minio/minio-java" title="https://github.com/minio/minio-java">https://github.com/minio/minio-java</a><br>官方文档：<a href="https://xie.infoq.cn/link?target=https://docs.min.io/docs/java-client-api-reference.html" title="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a><br>博客参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124675675" target="_blank" rel="noopener" title="https://blog.csdn.net/lemon_TT/article/details/124675675">https://blog.csdn.net/lemon_TT/article/details/124675675</a></p></blockquote><p>其他Minio对象操作可以参考：<a href="https://yunyanchengyu.blog.csdn.net/article/details/120849494" target="_blank" rel="noopener" title="JAVA集成Minio之对象操作API使用详解">JAVA集成Minio之对象操作API使用详解</a></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploader</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, InvalidKeyException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span></span><br><span class="line">     MinioClient minioClient =</span><br><span class="line">              MinioClient.builder()</span><br><span class="line">                      .endpoint(<span class="string">"http://192.168.249.131:9000"</span>)</span><br><span class="line">                      .credentials(<span class="string">"minioadmin"</span>, <span class="string">"minioadmin"</span>)</span><br><span class="line">                      .build();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建bucket</span></span><br><span class="line">      String bucketName = <span class="string">"test"</span>;</span><br><span class="line">      <span class="keyword">boolean</span> exists = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">      <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">        <span class="comment">// 不存在，创建bucket</span></span><br><span class="line">        minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 上传文件</span></span><br><span class="line">      minioClient.uploadObject(</span><br><span class="line">              UploadObjectArgs.builder()</span><br><span class="line">                      .bucket(bucketName)</span><br><span class="line">                      .object(<span class="string">"test.zip"</span>)</span><br><span class="line">                      .filename(<span class="string">"F:\\mall\\test.zip"</span>)</span><br><span class="line">                      .build());</span><br><span class="line">      System.out.println(<span class="string">"上传文件成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Error occurred: "</span> + e);</span><br><span class="line">      System.out.println(<span class="string">"HTTP trace: "</span> + e.httpTrace());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span></span><br><span class="line">        MinioClient minioClient =</span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(<span class="string">"http://192.168.249.131:9000"</span>)</span><br><span class="line">                        .credentials(<span class="string">"minioadmin"</span>, <span class="string">"minioadmin"</span>)</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Download object given the bucket, object name and output file name</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.downloadObject(</span><br><span class="line">                    DownloadObjectArgs.builder()</span><br><span class="line">                            .bucket(<span class="string">"test"</span>)</span><br><span class="line">                            .object(<span class="string">"小车操作记录.txt"</span>)</span><br><span class="line">                            .filename(<span class="string">"小车操作记录.txt"</span>)</span><br><span class="line">                            .build());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Spring-boot-整合-minio">2、Spring boot 整合 minio</h2><p>构建 MinioClient 对象，并交给 spring 管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"minio"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//yml</span></span><br><span class="line">minio:</span><br><span class="line">  endpoint: http:<span class="comment">//192.168.249.131:9000</span></span><br><span class="line">  accesskey: minioadmin</span><br><span class="line">  secretKey: minioadmin</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioProperties minioProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MinioClient <span class="title">minioClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MinioClient minioClient =</span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(minioProperties.getEndpoint())</span><br><span class="line">                        .credentials(minioProperties.getAccessKey(), minioProperties.getSecretKey())</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> minioClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现文件上传，下载，删除操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;minio.bucketName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">list</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取bucket列表</span></span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; myObjects = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        Iterator&lt;Result&lt;Item&gt;&gt; iterator = myObjects.iterator();</span><br><span class="line">        List&lt;Object&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String format = <span class="string">"&#123;'fileName':'%s','fileSize':'%s'&#125;"</span>;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Item item = iterator.next().get();</span><br><span class="line">            items.add(JSON.parse(String.format(format, item.objectName(), formatFileSize(item.size()))));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Res <span class="title">upload</span><span class="params">(@RequestParam(name = <span class="string">"file"</span>, required = <span class="keyword">false</span>)</span> MultipartFile[] file) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file == <span class="keyword">null</span> || file.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Res.error(<span class="string">"上传文件不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; orgfileNameList = <span class="keyword">new</span> ArrayList&lt;&gt;(file.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MultipartFile multipartFile : file) &#123;</span><br><span class="line">            String orgfileName = multipartFile.getOriginalFilename();</span><br><span class="line">            orgfileNameList.add(orgfileName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//文件上传</span></span><br><span class="line">                InputStream in = multipartFile.getInputStream();</span><br><span class="line">                minioClient.putObject(</span><br><span class="line">                        PutObjectArgs.builder().bucket(bucketName).object(orgfileName).stream(</span><br><span class="line">                                in, multipartFile.getSize(), -<span class="number">1</span>)</span><br><span class="line">                                .contentType(multipartFile.getContentType())</span><br><span class="line">                                .build());</span><br><span class="line">                in.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">                <span class="keyword">return</span> Res.error(<span class="string">"上传失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        data.put(<span class="string">"bucketName"</span>, bucketName);</span><br><span class="line">        data.put(<span class="string">"fileName"</span>, orgfileNameList);</span><br><span class="line">        <span class="keyword">return</span> Res.ok(<span class="string">"上传成功"</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/download/&#123;fileName&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(HttpServletResponse response, @PathVariable(<span class="string">"fileName"</span>)</span> String fileName) </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取对象信息</span></span><br><span class="line">            StatObjectResponse stat = minioClient.statObject(</span><br><span class="line">                    StatObjectArgs.builder().bucket(bucketName).object(fileName).build());</span><br><span class="line">            response.setContentType(stat.contentType());</span><br><span class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line">            <span class="comment">//文件下载</span></span><br><span class="line">            in = minioClient.getObject(</span><br><span class="line">                    GetObjectArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .object(fileName)</span><br><span class="line">                            .build());</span><br><span class="line">            IOUtils.copy(in, response.getOutputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    log.error(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/delete/&#123;fileName&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Res <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"fileName"</span>)</span> String fileName) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeObject(</span><br><span class="line">                    RemoveObjectArgs.builder().bucket(bucketName).object(fileName).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> Res.error(<span class="string">"删除失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Res.ok(<span class="string">"删除成功"</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">formatFileSize</span><span class="params">(<span class="keyword">long</span> fileS)</span> </span>&#123;</span><br><span class="line">        DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.00"</span>);</span><br><span class="line">        String fileSizeString = <span class="string">""</span>;</span><br><span class="line">        String wrongSize = <span class="string">"0B"</span>;</span><br><span class="line">        <span class="keyword">if</span> (fileS == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> wrongSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fileS &lt; <span class="number">1024</span>) &#123;</span><br><span class="line">            fileSizeString = df.format((<span class="keyword">double</span>) fileS) + <span class="string">" B"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileS &lt; <span class="number">1048576</span>) &#123;</span><br><span class="line">            fileSizeString = df.format((<span class="keyword">double</span>) fileS / <span class="number">1024</span>) + <span class="string">" KB"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileS &lt; <span class="number">1073741824</span>) &#123;</span><br><span class="line">            fileSizeString = df.format((<span class="keyword">double</span>) fileS / <span class="number">1048576</span>) + <span class="string">" MB"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fileSizeString = df.format((<span class="keyword">double</span>) fileS / <span class="number">1073741824</span>) + <span class="string">" GB"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileSizeString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、其他对象操作API使用详解">3、其他对象操作API使用详解</h2><blockquote><p>官方文档：<a href="https://docs.min.io/docs/java-client-api-reference.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a></p></blockquote><p><strong>上传对象</strong></p><ul><li><p>PutObject</p></li><li><p>uploadObject</p></li></ul><p><strong>获取对象</strong></p><ul><li><p>getObject</p></li><li><p>downloadObject</p></li><li><p>getPresignedObjectUrl</p></li><li><p>selectObjectContent</p></li><li><p>getPresignedPostFormData</p></li></ul><p><strong>复制对象</strong></p><p><strong>删除对象</strong></p><p><strong>对象信息查询及设置</strong></p><hr><p>参考文章</p><p><a href="https://juejin.cn/post/7001676085087698974" target="_blank" rel="noopener" title="minio快速入门">minio快速入门</a></p><p><a href="https://blog.csdn.net/qq_43437874/article/details/120855875" target="_blank" rel="noopener" title="Minio入门系列【10】Minio之权限控制策略">Minio入门系列【10】Minio之权限控制策略</a></p><p><a href="https://blogs.qianlongyun.cn/archives/1382.html/" target="_blank" rel="noopener" title="minio的桶匿名访问策略">minio的桶匿名访问策略</a></p><p><a href="https://xie.infoq.cn/article/66ffc331f851f5873a3e1b2d3" target="_blank" rel="noopener" title="分布式文件存储系统 Minio 实战">分布式文件存储系统 Minio 实战</a></p><p><a href="https://www.bilibili.com/video/BV1ff4y1K7QA" target="_blank" rel="noopener" title="B站最详细的分布式文件系统MinIO入门到实战">B站最详细的分布式文件系统MinIO入门到实战</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、MinIO介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、文件系统应用场景&quot;&gt;1、文件系统应用场景&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对象存储服务（Object Storage Service，OSS）是一种海量、安全、低成本、高可靠的云存储服&lt;br&gt;
务，适合存放任意类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成&lt;br&gt;
本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;互联网海量非结构化数据的存储需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;电商网站：海量商品图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视频网站：海量视频文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网盘 : 海量文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;社交网站：海量图片&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/124675675&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;MinIO分布式文件服务器搭建与入门&quot;&gt;MinIO分布式文件服务器搭建与入门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://www.shawn22.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot统一异常处理详解</title>
    <link href="https://www.shawn22.xyz/posts/f1e31382.html"/>
    <id>https://www.shawn22.xyz/posts/f1e31382.html</id>
    <published>2022-09-28T09:32:59.000Z</published>
    <updated>2022-09-28T09:48:19.190Z</updated>
    
    <content type="html"><![CDATA[<h1>SpringBoot统一异常处理详解</h1><h1>一、概述</h1><blockquote><p>后端规范入门参考：<a href="https://blog.csdn.net/lemon_TT/article/details/108309900" target="_blank" rel="noopener" title="Spring Boot后端接口规范">Spring Boot后端接口规范</a></p></blockquote><h2 id="1、统一异常处理介绍">1、统一异常处理介绍</h2><p><code>Spring</code>在3.2版本增加了一个注解<code>@ControllerAdvice</code>，可以与<code>@ExceptionHandler</code>、<code>@InitBinder</code>、<code>@ModelAttribute</code> 等注解注解配套使用。不过跟异常处理相关的只有注解<code>@ExceptionHandler</code>，从字面上看，就是 <strong>异常处理器</strong> 的意思</p><a id="more"></a><h2 id="2、原理和目标">2、原理和目标</h2><p>简单的说，该注解可以把异常处理器应用到所有控制器，而不是单个控制器。借助该注解，我们可以实现：在独立的某个地方，比如单独一个类，定义一套对各种异常的处理机制，然后在类的签名加上注解<code>@ControllerAdvice</code>，统一对 <code>不同阶段的</code>、<code>不同异常</code> 进行处理。这就是统一异常处理的原理。</p><p>对异常按阶段进行分类，大体可以分成：进入<code>Controller</code>前的异常 和 <code>Service</code> 层异常</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2c25f6ebfb33885a951bf4292f4f8c75.png" alt></p><p>目标就是消灭95%以上的 <code>try catch</code> 代码块，并以优雅的 <code>Assert</code>(断言) 方式来校验业务的异常情况，只关注业务逻辑，而不用花费大量精力写冗余的 <code>try catch</code> 代码块。</p><h1>二、Assert(断言)</h1><h2 id="1、概述">1、概述</h2><p>**Assert(断言)**是Spring 家族的 <code>org.springframework.util.Assert</code>，在我们写测试用例的时候经常会用到，使用断言能让我们编码的时候有一种非一般丝滑的感觉</p><p><code>Assert</code> 的部分源码，可以看到，<strong>Assert 其实就是帮我们把 if {…} 封装了一下</strong>，抛出的异常是<code>IllegalArgumentException()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Assert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Assert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notNull</span><span class="params">(@Nullable Object object, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Assert自定义实战">2、Assert自定义实战</h2><h3 id="2-1-自定义接口Assert">2.1 自定义接口Assert</h3><p>Assert断言方法是使用接口的默认方法定义的，然后有没有发现当断言失败后，抛出的异常不是具体的某个异常，而是交由2个<strong>newException</strong>接口方法提供。因为业务逻辑中出现的异常基本都是对应特定的场景，比如根据用户id获取用户信息，查询结果为null，此时抛出的异常可能为<code>UserNotFoundException</code>，并且有<strong>特定的异常码（比如7001）和异常信息&quot;用户不存在&quot;</strong>。所以具体抛出什么异常，有Assert的实现类决定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Assert</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseException <span class="title">newException</span><span class="params">(Object... args)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseException <span class="title">newException</span><span class="params">(Throwable t, Object... args)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;断言对象&lt;code&gt;obj&lt;/code&gt;非空。如果对象&lt;code&gt;obj&lt;/code&gt;为空，则抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 待判断对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">assertNotNull</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> newException(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;断言对象&lt;code&gt;obj&lt;/code&gt;非空。如果对象&lt;code&gt;obj&lt;/code&gt;为空，则抛出异常</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;异常信息&lt;code&gt;message&lt;/code&gt;支持传递参数方式，避免在判断之前进行字符串拼接操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 待判断对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args message占位符对应的参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">assertNotNull</span><span class="params">(Object obj, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> newException(args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-自定义异常">2.2 自定义异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IResponseEnum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;业务异常&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;业务处理时，出现异常，可以抛出该异常&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span>  <span class="title">BaseException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(IResponseEnum responseEnum, Object[] args, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(responseEnum, args, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(IResponseEnum responseEnum, Object[] args, String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(responseEnum, args, message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Enum整合">2.3 Enum整合</h3><p>代码示例中定义了两个枚举实例：<code>BAD_LICENCE_TYPE</code>、<code>LICENCE_NOT_FOUND</code>，分别对应了<code>BadLicenceTypeException</code>、<code>LicenceNotFoundException</code>两种异常。以后每增加一种异常情况，只需增加一个枚举实例即可，再也不用每一种异常都定义一个异常类了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BusinessExceptionAssert</span> <span class="keyword">extends</span> <span class="title">IResponseEnum</span>, <span class="title">Assert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> BaseException <span class="title">newException</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">        String msg = MessageFormat.format(<span class="keyword">this</span>.getMessage(), args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BusinessException(<span class="keyword">this</span>, args, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> BaseException <span class="title">newException</span><span class="params">(Throwable t, Object... args)</span> </span>&#123;</span><br><span class="line">        String msg = MessageFormat.format(<span class="keyword">this</span>.getMessage(), args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BusinessException(<span class="keyword">this</span>, args, msg, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResponseEnum implements BusinessExceptionAssert &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bad licence type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BAD_LICENCE_TYPE(<span class="number">7001</span>, <span class="string">"Bad licence type."</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Licence not found</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LICENCE_NOT_FOUND(<span class="number">7002</span>, <span class="string">"Licence not found."</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-实战检测">2.4 实战检测</h3><p>使用枚举类结合(继承)Assert，只需根据特定的异常情况定义不同的枚举实例，如上面的<code>BAD_LICENCE_TYPE</code>、<code>LICENCE_NOT_FOUND</code>，就能够针对不同情况抛出特定的异常（这里指携带特定的异常码和异常消息），这样既不用定义大量的异常类，同时还具备了断言的良好可读性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkNotNull</span><span class="params">(Licence licence)</span> </span>&#123;</span><br><span class="line">    ResponseEnum.LICENCE_NOT_FOUND.assertNotNull(licence,<span class="string">"测试"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 替代下面的方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkNotNull</span><span class="params">(Licence licence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (licence == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LicenceNotFoundException();</span><br><span class="line">        <span class="comment">// 或者这样</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="number">7001</span>, <span class="string">"Bad licence type."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、统一异常处理器</h1><h2 id="1、异常处理器说明">1、异常处理器说明</h2><h3 id="1-1-handleServletException">1.1 handleServletException</h3><p>一个http请求，在到达<code>Controller</code>前，会对该请求的请求信息与目标控制器信息做一系列校验</p><ul><li><p><code>NoHandlerFoundException</code>：首先根据请求Url查找有没有对应的控制器，若没有则会抛该异常，也就是大家非常熟悉的404异常，但是实际上当出现404的时候，默认是不抛异常的，而是 forward跳转到/error控制器，<strong>spring也提供了默认的error控制器</strong>，如果要抛出异常，需要配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.throw-exception-if-no-handler-found&#x3D;true</span><br><span class="line">spring.web.resources.add-mappings&#x3D;false</span><br></pre></td></tr></table></figure></li><li><p><code>HttpRequestMethodNotSupportedException</code>：若匹配到了（匹配结果是一个列表，不同的是http方法不同，如：Get、Post等），则尝试将请求的http方法与列表的控制器做匹配，若没有对应http方法的控制器，则抛该异常；</p></li><li><p><code>HttpMediaTypeNotSupportedException</code>：然后再对请求头与控制器支持的做比较，比如<code>content-type</code>请求头，若控制器的参数签名包含注解<code>@RequestBody</code>，但是请求的<code>content-type</code>请求头的值没有包含<code>application/json</code>，那么会抛该异常（当然，不止这种情况会抛这个异常）；</p></li><li><p><code>MissingPathVariableException</code>：未检测到路径参数。比如url为：<code>/licence/{licenceId}</code>，参数签名包含<code>@PathVariable(&quot;licenceId&quot;)</code>，当请求的url为<code>/licence</code>，在没有明确定义url为<code>/licence</code>的情况下，会被判定为：缺少路径参数；</p></li><li><p><code>MissingServletRequestParameterException</code>：缺少请求参数。比如定义了参数<code>@RequestParam(&quot;licenceId&quot;) String licenceId</code>，但发起请求时，未携带该参数，则会抛该异常；</p></li><li><p><code>TypeMismatchException</code>: 参数类型匹配失败。比如：接收参数为Long型，但传入的值确是一个字符串，那么将会出现类型转换失败的情况，这时会抛该异常；</p></li><li><p><code>HttpMessageNotReadableException</code>：与上面的<code>HttpMediaTypeNotSupportedException</code>举的例子完全相反，即请求头携带了<code>&quot;content-type: application/json;charset=UTF-8&quot;</code>，但接收参数却没有添加注解<code>@RequestBody</code>，或者请求体携带的 json 串反序列化成 pojo 的过程中失败了，也会抛该异常；</p></li><li><p><code>HttpMessageNotWritableException</code>：返回的 pojo 在序列化成 json 过程失败了，那么抛该异常；</p></li></ul><h3 id="1-2-handleBindException和handleValidException">1.2 <strong>handleBindException</strong>和<strong>handleValidException</strong></h3><p>参数校验异常</p><h3 id="1-3-handleBusinessException、handleBaseException">1.3 <strong>handleBusinessException、handleBaseException</strong></h3><p>处理自定义的业务异常，只是<code>handleBaseException</code>处理的是除了 <code>BusinessException</code> 意外的所有业务异常。就目前来看，这2个是可以合并成一个的</p><h3 id="1-4-handleException">1.4 <strong>handleException</strong></h3><p>处理所有未知的异常，比如操作数据库失败的异常。</p><blockquote><p>注：上面的<code>handleServletException</code>、<code>handleException</code> 这两个处理器，返回的异常信息，不同环境返回的可能不一样，以为这些异常信息都是框架自带的异常信息，一般都是英文的，不太好直接展示给用户看，所以统一返回<code>SERVER_ERROR</code>代表的异常信息</p></blockquote><h2 id="2、自定义统一异常处理器类">2、自定义统一异常处理器类</h2><p>将异常分成几类，实际上只有两大类，一类是<code>ServletException</code>、<code>ServiceException</code>，还记得上文提到的 <strong>按阶段分类</strong> 吗，即对应 进入<code>Controller</code>前的异常 和 <code>Service</code> 层异常；然后 <code>ServiceException</code> 再分成自定义异常、未知异常。对应关系如下：</p><ul><li><p>进入<code>Controller</code>前的异常: <strong>handleServletException、handleBindException、handleValidException</strong></p></li><li><p>自定义异常:** handleBusinessException、handleBaseException**</p></li><li><p>未知异常: <strong>handleException</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(UnifiedExceptionHandler<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UnifiedExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String ENV_PROD = <span class="string">"prod"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UnifiedMessageSource unifiedMessageSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.profiles.active&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String profile;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取国际化消息</span></span><br><span class="line"><span class="comment">     * 这里可以做处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(BaseException e)</span> </span>&#123;</span><br><span class="line">        String code = <span class="string">"response."</span> + e.getResponseEnum().toString();</span><br><span class="line">        String message = unifiedMessageSource.getMessage(code, e.getArgs());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message == <span class="keyword">null</span> || message.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = BusinessException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleBusinessException</span>(<span class="title">BaseException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(e.getResponseEnum().getCode(), getMessage(e));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = BaseException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleBaseException</span>(<span class="title">BaseException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(e.getResponseEnum().getCode(), getMessage(e));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Controller上一层相关异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;</span><br><span class="line">            NoHandlerFoundException<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpRequestMethodNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMediaTypeNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MissingPathVariableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MissingServletRequestParameterException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">TypeMismatchException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMessageNotReadableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMessageNotWritableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            // <span class="title">BindException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            // <span class="title">MethodArgumentNotValidException</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">            <span class="title">HttpMediaTypeNotAcceptableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">ServletRequestBindingException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">ConversionNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MissingServletRequestPartException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">AsyncRequestTimeoutException</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">    &#125;)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleServletException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">int</span> code = CommonResponseEnum.SERVER_ERROR.getCode();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServletResponseEnum servletExceptionEnum = ServletResponseEnum.valueOf(e.getClass().getSimpleName());</span><br><span class="line">            code = servletExceptionEnum.getCode();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e1) &#123;</span><br><span class="line">            log.error(<span class="string">"class [&#123;&#125;] not defined in enum &#123;&#125;"</span>, e.getClass().getName(), ServletResponseEnum<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ENV_PROD.equals(profile)) &#123;</span><br><span class="line">            <span class="comment">// 当为生产环境, 不适合把具体的异常信息展示给用户, 比如404.</span></span><br><span class="line">            code = CommonResponseEnum.SERVER_ERROR.getCode();</span><br><span class="line">            BaseException baseException = <span class="keyword">new</span> BaseException(CommonResponseEnum.SERVER_ERROR);</span><br><span class="line">            String message = getMessage(baseException);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(code, message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(code, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数绑定异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = BindException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleBindException</span>(<span class="title">BindException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(<span class="string">"参数绑定校验异常"</span>, e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapperBindingResult(e.getBindingResult());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数校验异常，将校验失败的所有异常组合成一条错误信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleValidException</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(<span class="string">"参数绑定校验异常"</span>, e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapperBindingResult(e.getBindingResult());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包装绑定异常结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bindingResult 绑定结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ErrorResponse <span class="title">wrapperBindingResult</span><span class="params">(BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        StringBuilder msg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class="line">            msg.append(<span class="string">", "</span>);</span><br><span class="line">            <span class="keyword">if</span> (error <span class="keyword">instanceof</span> FieldError) &#123;</span><br><span class="line">                msg.append(((FieldError) error).getField()).append(<span class="string">": "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            msg.append(error.getDefaultMessage() == <span class="keyword">null</span> ? <span class="string">""</span> : error.getDefaultMessage());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(ArgumentResponseEnum.VALID_ERROR.getCode(), msg.substring(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未定义异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ENV_PROD.equals(profile)) &#123;</span><br><span class="line">            <span class="comment">// 当为生产环境, 不适合把具体的异常信息展示给用户, 比如数据库异常信息.</span></span><br><span class="line">            <span class="keyword">int</span> code = CommonResponseEnum.SERVER_ERROR.getCode();</span><br><span class="line">            BaseException baseException = <span class="keyword">new</span> BaseException(CommonResponseEnum.SERVER_ERROR);</span><br><span class="line">            String message = getMessage(baseException);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(code, message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(CommonResponseEnum.SERVER_ERROR.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、其他类型统一处理器">3、其他类型统一处理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(NoLoginException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">noLoginExceptionHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">HttpServletResponse</span> <span class="title">response</span>,<span class="title">Exception</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        log.error(<span class="string">"[GlobalExceptionHandler][noLoginExceptionHandler] exception"</span>,e);</span><br><span class="line">        JsonResult jsonResult = <span class="keyword">new</span> JsonResult();</span><br><span class="line">        jsonResult.setCode(JsonResultCode.NO_LOGIN);</span><br><span class="line">        jsonResult.setMessage(<span class="string">"用户登录失效或者登录超时,请先登录"</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ServiceException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">businessExceptionHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">HttpServletResponse</span> <span class="title">response</span>,<span class="title">Exception</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        log.error(<span class="string">"[GlobalExceptionHandler][businessExceptionHandler] exception"</span>,e);</span><br><span class="line">        JsonResult jsonResult = <span class="keyword">new</span> JsonResult();</span><br><span class="line">        jsonResult.setCode(JsonResultCode.FAILURE);</span><br><span class="line">        jsonResult.setMessage(<span class="string">"业务异常,请联系管理员"</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">exceptionHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">HttpServletResponse</span> <span class="title">response</span>,<span class="title">Exception</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        log.error(<span class="string">"[GlobalExceptionHandler][exceptionHandler] exception"</span>,e);</span><br><span class="line">        JsonResult jsonResult = <span class="keyword">new</span> JsonResult();</span><br><span class="line">        jsonResult.setCode(JsonResultCode.FAILURE);</span><br><span class="line">        jsonResult.setMessage(<span class="string">"系统错误,请联系管理员"</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、统一返回结果">4、统一返回结果</h2><p><code>code</code>、<code>message</code> 是所有返回结果中必有的字段，而当需要返回数据时，则需要另一个字段 <code>data</code> 来表示。所以首先定义一个 <code>BaseResponse</code> 来作为所有返回结果的基类</p><p>然后定义一个通用返回结果类<code>CommonResponse</code>，继承 <code>BaseResponse</code>，而且多了字段 <code>data</code>；为了区分成功和失败返回结果，于是再定义一个 <code>ErrorResponse</code></p><p>最后还有一种常见的返回结果，即返回的数据带有分页信息，因为这种接口比较常见，所以有必要单独定义一个返回结果类 <code>QueryDataResponse</code>，该类继承自 <code>CommonResponse</code>，只是把 <code>data</code> 字段的类型限制为 <code>QueryDdata</code>，<code>QueryDdata</code>中定义了分页信息相应的字段，即<code>totalCount</code>、<code>pageNo</code>、 <code>pageSize</code>、<code>records</code>。其中比较常用的只有 <code>CommonResponse</code> 和 <code>QueryDataResponse</code>，但是名字又贼鬼死长，何不定义2个名字超简单的类来替代呢？于是 <code>R</code> 和 <code>QR</code> 诞生了，以后返回结果的时候只需这样写：<code>new R&lt;&gt;(data)</code>、<code>new QR&lt;&gt;(queryData)</code></p><blockquote><p>因为这一套统一异常处理可以说是通用的，所有可以设计成一个 <code>common</code>包，以后每一个新项目/模块只需引入该包即可</p></blockquote><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/lemon_TT/article/details/108309900" target="_blank" rel="noopener" title="Spring Boot后端接口规范">Spring Boot后端接口规范</a></p><p><a href="https://mp.weixin.qq.com/s/8GbIWyvxpY_4h-WPRrXslw" target="_blank" rel="noopener" title="减少 try catch ，可以这样干">减少 try catch ，可以这样干</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;SpringBoot统一异常处理详解&lt;/h1&gt;
&lt;h1&gt;一、概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;后端规范入门参考：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/108309900&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Spring Boot后端接口规范&quot;&gt;Spring Boot后端接口规范&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、统一异常处理介绍&quot;&gt;1、统一异常处理介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;在3.2版本增加了一个注解&lt;code&gt;@ControllerAdvice&lt;/code&gt;，可以与&lt;code&gt;@ExceptionHandler&lt;/code&gt;、&lt;code&gt;@InitBinder&lt;/code&gt;、&lt;code&gt;@ModelAttribute&lt;/code&gt; 等注解注解配套使用。不过跟异常处理相关的只有注解&lt;code&gt;@ExceptionHandler&lt;/code&gt;，从字面上看，就是 &lt;strong&gt;异常处理器&lt;/strong&gt; 的意思&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot事务详解</title>
    <link href="https://www.shawn22.xyz/posts/ac74b1f.html"/>
    <id>https://www.shawn22.xyz/posts/ac74b1f.html</id>
    <published>2022-09-28T09:32:50.000Z</published>
    <updated>2022-09-28T09:48:19.189Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><h2 id="1、介绍">1、介绍</h2><p>事务，就是一组操作数据库的动作集合。事务是现代数据库理论中的核心概念之一。如果一组处理步骤或者全部发生或者一步也不执行，我们称该组处理步骤为一个事务。当所有的步骤像一个操作一样被完整地执行，我们称该事务被提交。由于其中的一部分或多步执行失败，导致没有步骤被提交，则事务必须回滚到最初的系统状态。</p><a id="more"></a><h2 id="2、事务特点">2、事务特点</h2><ul><li><p><strong>原子性(Atomicity)</strong>：整个事务是一个整体，不可分割的最小工作单位。一个事务中的所有操作要么全部执行成功，要么全部都不执行。其中任何一条语句执行失败，都会导致事务回滚</p></li><li><p><strong>一致性(Consistency)</strong>：数据库的记录总是从一个一致性状态转变成另一个一致性状态。这里的一致性是语义上的一致性, 并不是语法上的一致性</p></li><li><p><strong>隔离性(Isolation)</strong>：一个事物的执行，不受其他事务的干扰，即并发执行的事物之间互不干扰</p></li><li><p><strong>持久性(Durability)</strong>：数据一旦提交，结果就是永久性的。并不应为宕机等情况丢失。一般理解就是写入硬盘保存成功</p></li></ul><h2 id="3、事务实现方式">3、事务实现方式</h2><h3 id="3-1-MySql事务实现方式">3.1 MySql事务实现方式</h3><ul><li><p>原子性和持久性利用redo log(重做日志) 实现</p></li><li><p>一致性利用undo log(回滚日志)实现</p></li><li><p>隔离性利用锁来实现</p></li></ul><h3 id="3-2-SpringBoot实现机制">3.2 SpringBoot实现机制</h3><p>Spring 为事务管理提供了丰富的功能支持。Spring 事务管理分为<strong>编码式和声明式</strong>的两种方式。</p><ul><li><p>编程式事务管理： 编程式事务管理使用 <strong>TransactionTemplate</strong> 或者直接使用底层的 PlatformTransactionManager。对于编程式事务管理，spring推荐使用<strong>TransactionTemplate</strong></p></li><li><p>声明式事务管理： 建立在AOP之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务</p></li><li><p>声明式事务管理不需要入侵代码，更快捷而且简单，推荐使用</p></li></ul><p>声明式事务有两种方式：</p><ul><li><p>一种是在配置文件(xml)中做相关的事务规则声明</p></li><li><p>另一种是基于 <strong>@Transactional</strong> 注解的方式。注释配置是目前流行的使用方式，推荐使用</p></li></ul><p>在应用系统调用声明了 <code>@Transactional</code> 的目标方法时，Spring Framework** 默认使用 AOP 代理**，在代码运行时生成一个代理对象，根据<code> @Transactional</code> 的属性配置信息，这个代理对象决定该声明 <code>@Transactional</code> 的目标方法是否由拦截器 <code>TransactionInterceptor</code>来使用拦截，在 <code>TransactionInterceptor</code>拦截时，会在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑，最后根据执行情况是否出现异常，利用抽象事务管理器 AbstractPlatformTransactionManager 操作数据源 DataSource 提交或回滚事务</p><blockquote><p>Spring AOP 代理有 <code>CglibAopProxy</code>和 <code>JdkDynamicAopProxy</code>两种，以 CglibAopProxy 为例，对于 CglibAopProxy，需要调用其内部类的 <code>DynamicAdvisedInterceptor</code>的 <code>intercept</code>方法。对于 <code>JdkDynamicAopProxy</code>，需要调用其 <code>invoke</code>方法</p></blockquote><h1>二、@Transactional详解</h1><h2 id="1、-Transactional常用配置">1、@Transactional常用配置</h2><table><thead><tr><th><strong>参 数 名 称</strong></th><th><strong>功 能 描 述</strong></th></tr></thead><tbody><tr><td>readOnly</td><td>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。例如：<code>@Transactional(readOnly=true)</code></td></tr><tr><td><strong>rollbackFor</strong></td><td><strong>rollbackFor 该属性用于设置需要进行回滚的异常类数组</strong>，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：指定单一异常类：<code>@Transactional(rollbackFor=RuntimeException.class)</code>指定多个异常类：<code>@Transactional(rollbackFor={RuntimeException.class,Exception.class})</code></td></tr><tr><td>rollbackForClassName</td><td>该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：指定单一异常类名称<code>@Transactional(rollbackForClassName=&quot;RuntimeException&quot;)</code>指定多个异常类名称：<code>@Transactional(rollbackForClassName={&quot;RuntimeException&quot;,&quot;Exception&quot;})</code></td></tr><tr><td>noRollbackFor</td><td>该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：指定单一异常类：<code>@Transactional(noRollbackFor=RuntimeException.class)</code>指定多个异常类：<code>@Transactional(noRollbackFor={RuntimeException.class, Exception.class})</code></td></tr><tr><td>noRollbackForClassName</td><td>该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：指定单一异常类名称：<code>@Transactional(noRollbackForClassName=&quot;RuntimeException&quot;)</code>指定多个异常类名称：<code>@Transactional(noRollbackForClassName={&quot;RuntimeException&quot;, &quot;Exception&quot;})</code></td></tr><tr><td><strong>propagation</strong></td><td>该属性用于设置事务的传播行为。例如：<code>@Transactional(propagation=Propagation.NOT_SUPPORTED, readOnly=true)</code></td></tr><tr><td><strong>isolation</strong></td><td>该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置</td></tr><tr><td>timeout</td><td>该属性用于设置事务的超时秒数，默认值为-1表示永不超时  事物超时设置：<code>@Transactional(timeout=30) </code>，设置为30秒</td></tr></tbody></table><h2 id="2、事务传播行为">2、事务传播行为</h2><p>Spring在TransactionDefinition接口中规定了7种类型的事务传播行为。Propagation枚举则引用了这些类型，开发过程中我们一般直接用Propagation枚举。例如<code>@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)</code>，常用的三项已经加粗</p><table><thead><tr><th><strong>事务传播行为类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>PROPAGATION_REQUIRED</strong></td><td>需要事务（<strong>默认</strong>）。若当前无事务，新建一个事务；若当前有事务，加入此事务中</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持事务。若当前没有事务以非事务方式执行；若当前有事务，加入此事务中</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>强制使用事务。若当前有事务，就使用当前事务；若当前没有事务，抛出IllegalTransactionStateException异常</td></tr><tr><td><strong>PROPAGATION_REQUIRES_NEW</strong></td><td>新建事务。无论当前是否有事务，都新建事务运行</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>不支持事务。若当前存在事务，把当前事务挂起，然后运行方法</td></tr><tr><td>PROPAGATION_NEVER</td><td>不使用事务。若当前方法存在事务，则抛出IllegalTransactionStateException异常，否则继续使用无事务机制运行</td></tr><tr><td><strong>PROPAGATION_NESTED</strong></td><td>嵌套。如果当前存在事务，则在嵌套事务内执行；如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作</td></tr></tbody></table><h2 id="3、事务5种隔离级别">3、事务5种隔离级别</h2><p>例如：<code>@Transactional(isolation = Isolation.READ_COMMITTED)</code></p><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>DEFAULT</td><td>这是一个<strong>PlatfromTransactionManager</strong>默认的隔离级别，使用数据库默认的事务隔离级别另外四个与JDBC的隔离级别相对应</td></tr><tr><td>READ_UNCOMMITTED</td><td>最低的隔离级别。事实上我们不应该称其为隔离级别，因为在事务完成前，其他事务可以看到该事务所修改的数据。而在其他事务提交前，该事务也可以看到其他事务所做的修改。可能导致脏，幻，不可重复读</td></tr><tr><td>READ_COMMITTED</td><td>大多数数据库的默认级别。在事务完成前，其他事务无法看到该事务所修改的数据。遗憾的是，在该事务提交后，你就可以查看其他事务插入或更新的数据。这意味着在事务的不同点上，如果其他事务修改了数据，你就会看到不同的数据。可防止脏读，但幻读和不可重复读仍可以发生</td></tr><tr><td>REPEATABLE_READ</td><td>比<strong>ISOLATION_READ_COMMITTED</strong>更严格，该隔离级别确保如果在事务中查询了某个数据集，你至少还能再次查询到相同的数据集，即使其他事务修改了所查询的数据。然而如果其他事务插入了新数据，你就可以查询到该新插入的数据。可防止脏读，不可重复读，但幻读仍可能发生</td></tr><tr><td>SERIALIZABLE</td><td>完全服从ACID的隔离级别，<strong>确保不发生脏读、不可重复读和幻影读</strong>。这在所有隔离级别中也是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。代价最大、可靠性最高的隔离级别，所有的事务都是按顺序一个接一个地执行。避免所有不安全读取</td></tr></tbody></table><h1>三、事务使用事项与场景</h1><h2 id="1、事务使用注意事项">1、事务使用注意事项</h2><ul><li><p><strong>在具体的类(或类的方法)上使用 @Transactional 注解</strong>，而不要使用在类所要实现的任何接口上</p></li><li><p><strong>@Transactional 注解应该只被应用在 public 修饰的方法上(注意)。</strong> 如果在 protected、private 或者 package-visible 的方法上使用 该注解，它也不会报错(IDEA会有提示)， 但事务并没有生效</p></li><li><p><strong>@Transactional是基于动态代理的(注意)</strong>，需要一个类调用另一个类，类内调用会失效</p></li><li><p>被外部调用的公共方法A有两个进行了数据操作的子方法B和子方法C的事务注解说明：</p><ul><li><p>被外部调用的公共方法A<strong>声明</strong>事务<code>@Transactional</code>，无论子方法B和C是不是本类的方法，无论子方法B和C是否声明事务，<strong>事务均由公共方法A控制</strong></p></li><li><p>被外部调用的公共方法A<strong>未声明</strong>事务<code>@Transactional</code>，子方法B和C若是其他类的方法且各自声明事务：<strong>事务由子方法B和C各自控制</strong></p></li><li><p>被外部调用的公共方法A<strong>未声明</strong>事务<code>@Transactional</code>，子方法B和C若是本类的方法，则即使子方法B和C各自声明事务，<strong>事务也不会生效</strong>，并且会报错(没有可用的transactional)</p></li><li><p>被外部调用的公共方法A<strong>声明</strong>事务<code>@Transactional</code>，子方法运行异常，但运行异常被子方法自己 <code>try-catch</code> 处理了，<strong>则事务回滚是不会生效的！</strong></p><p><strong>如果想要事务回滚生效，需要将子方法的事务控制交给调用的方法来处理：</strong></p><ul><li><p>方案1：子方法中不用 <code>try-catch</code> 处理运行异常</p></li><li><p>方案2：子方法的catch里面将运行异常抛出<code>throw new RuntimeException();</code></p></li></ul></li></ul></li><li><p>默认情况下，Spring会对<strong>unchecked异常</strong>进行事务回滚，也就是默认对 <code>RuntimeException()</code> 异常或是其子类进行事务回滚；如果是<strong>checked异常则不回滚</strong>，例如空指针异常、算数异常等会被回滚；文件读写、网络问题Spring就没法回滚。若想对所有异常(包括自定义异常)都起作用，注解上面需配置异常类型：<code>@Transactional(rollbackFor = Exception.class)</code></p></li><li><p>数据库要支持事务，如果是mysql，要<strong>使用innodb引擎</strong>，myisam不支持事务</p></li><li><p>事务<code>@Transactional</code>由spring控制时，它会在抛出异常的时候进行回滚。<strong>如果自己使用try-catch捕获处理了，是不生效的</strong>。如果想事务生效可以进行手动回滚或者在catch里面将异常抛出<code>throw new RuntimeException();</code>有两种方法</p><ul><li><p>方案一：手动抛出运行时异常(缺陷是不能在catch代码块自定义返回值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">      ....  </span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      logger.error(<span class="string">"fail"</span>,e);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方案二：手动进行回滚 <code>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly(); </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      log.error(<span class="string">"fail"</span>,e);</span><br><span class="line">      TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2、事务使用场景">2、事务使用场景</h2><h3 id="2-1-自动回滚">2.1 自动回滚</h3><p>直接抛出，不try/catch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">submitOrder</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;  </span><br><span class="line">     success();  </span><br><span class="line">     <span class="comment">//假如exception这个操作数据库的方法会抛出异常，方法success()对数据库的操作会回滚</span></span><br><span class="line">     exception(); </span><br><span class="line">     <span class="keyword">return</span> ApiReturnUtil.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-手动回滚">2.2 手动回滚</h3><p>进行try/catch，回滚并抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">submitOrder</span> ()</span>&#123;  </span><br><span class="line">    success();  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        exception(); </span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();     </span><br><span class="line">        <span class="comment">//手工回滚异常</span></span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        <span class="keyword">return</span> ApiReturnUtil.error();</span><br><span class="line">     &#125;  </span><br><span class="line">    <span class="keyword">return</span> ApiReturnUtil.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-回滚部分异常">2.3 回滚部分异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">submitOrder</span> ()</span>&#123;  </span><br><span class="line">    success();  </span><br><span class="line">    <span class="comment">//只回滚以下异常，设置回滚点</span></span><br><span class="line">    Object savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint();</span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        exception(); </span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();     </span><br><span class="line">        <span class="comment">//手工回滚异常，回滚到savePoint</span></span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br><span class="line">        <span class="keyword">return</span> ApiReturnUtil.error();</span><br><span class="line">     &#125;  </span><br><span class="line">    <span class="keyword">return</span> ApiReturnUtil.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-手动创建、提交、回滚事务">2.4 手动创建、提交、回滚事务</h3><p><code>PlatformTransactionManager </code>这个接口中定义了三个方法 getTransaction创建事务，commit 提交事务，rollback 回滚事务。它的实现类是 <code>AbstractPlatformTransactionManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSourceTransactionManager dataSourceTransactionManager;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">TransactionDefinition transactionDefinition;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 手动创建事务</span></span><br><span class="line">TransactionStatus transactionStatus = dataSourceTransactionManager.getTransaction(transactionDefinition);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 手动提交事务</span></span><br><span class="line">dataSourceTransactionManager.commit(transactionStatus);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 手动回滚事务。(最好是放在catch 里面，防止程序异常而事务一直卡在哪里未提交)</span></span><br><span class="line">dataSourceTransactionManager.rollback(transactionStatus);</span><br></pre></td></tr></table></figure><h2 id="3、事务其他情况">3、事务其他情况</h2><h3 id="3-1-事务提交方式">3.1 事务提交方式</h3><p><strong>默认情况下，数据库处于自动提交模式</strong>。每一条语句处于一个单独的事务中，在这条语句执行完毕时，如果执行成功则隐式的提交事务，如果执行失败则隐式的回滚事务。</p><p>对于正常的事务管理，是一组相关的操作处于一个事务之中，因此必须关闭数据库的自动提交模式。不过，这个我们不用担心，spring 会将底层连接的<strong>自动提交特性</strong>设置为 false 。也就是在使用 spring 进行事物管理的时候，spring 会将是否自动提交设置为<strong>false</strong>，等价于JDBC中的 <code>connection.setAutoCommit(false);</code> ，在执行完之后在进行提交 <code>connection.commit();</code> </p><p><strong>spring事务管理器回滚</strong>一个事务的推荐方法是在当前事务的上下文内抛出异常。spring事务管理器会捕捉任何未处理的异常，然后依据规则决定是否回滚抛出异常的事务。</p><h3 id="3-2-事务并发经典情况">3.2 事务并发经典情况</h3><ul><li><p><strong>第一类丢失更新</strong></p><p>在<strong>没有事务隔离</strong>的情况下，两个事务都同时更新一行数据，但是第二个事务却中途失败退出， 导致对数据的两个修改都失效了</p></li><li><p><strong>脏读</strong></p><p>脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</p></li><li><p><strong>不可重复读</strong></p><p>在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读</p></li><li><p><strong>第二类丢失更新</strong></p><p>不可重复读的特例，有两个并发事务同时读取同一行数据，然后其中一个对它进行修改提交，而另一个也进行了修改提交。这就会造成第一次写操作失效。</p></li><li><p><strong>幻读</strong></p><p>当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样</p></li></ul><h1>四、使用事务的一些错误</h1><h2 id="1、案例一">1、案例一</h2><h3 id="1-1-问题描述">1.1 问题描述</h3><p>两个使用Transaction注解的Service，A和B，在A中引入了B的方法用于更新数据 ，当A中捕捉到B中有异常时，回滚动作正常执行，但是当return时则出现<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> ServiceB serviceB;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      serviceB.methodB();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">serviceB</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-问题原因">1.2 问题原因</h3><p><code>@Transactional(propagation= Propagation.REQUIRED)</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是@Transactional的默认方式。在这种情况下，外层事务（ServiceA）和内层事务（ServiceB）就是一个事务，任何一个出现异常，都会在methodA执行完毕后回滚。</p><p>如果内层事务B抛出异常e（没有catch，继续向外层抛出），在内层事务结束时，spring会把事务B标记为&quot;<strong>rollback-only</strong>&quot;；这时外层事务A发现了异常e，如果外层事务A catch了异常并处理掉，那么外层事务A的方法会继续执行代码，直到外层事务也结束时，这时外层事务A想commit，因为正常结束没有向外抛异常，但是内外层事务AB是同一个事务，事务B（同时也是事务A）已经被内层方法标记为&quot;<strong>rollback-only</strong>&quot;，<strong>需要回滚，无法commit</strong>，这时spring就会抛出<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code>，意思是&quot;事务已经被标记为回滚，无法提交&quot;</p><h3 id="1-3-解决方案">1.3 解决方案</h3><ul><li><p>直接在外层事务的catch代码块中抛出捕获的内层事务的异常，两层事务有未捕获异常，都回滚（有时候这个异常就是交给外层处理的，抛出到更外层显得多此一举）；</p></li><li><p>在内层事务中做异常捕获处理，并且不向外抛异常，两层事务都不回滚</p></li><li><p>最好的方式：如果希望内层事务回滚，但不影响外层事务提交，需要将内层事务的传播方式指定为<code>@Transactional(propagation= Propagation.NESTED)</code>，外层事务的提交和回滚能够控制嵌套的内层事务回滚；而内层事务报错时，只回滚内层事务，外层事务可以继续提交。（JPA不支持NESTED，有时可以用REQUIRES_NEW替代一下）。  </p><p>详细说明参考：<a href="https://www.jianshu.com/p/8beab9f37e5b" target="_blank" rel="noopener" title="https://www.jianshu.com/p/8beab9f37e5b">https://www.jianshu.com/p/8beab9f37e5b</a></p></li><li><p>如果这个异常发生时，内层需要事务回滚的代码还没有执行，则可以<code>@Transactional(noRollbackFor = {内层抛出的异常}.class)</code>，指定内层也不为这个异常回滚。</p></li></ul><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/zzhongcy/article/details/102893309" target="_blank" rel="noopener" title="SpringBoot2异常处理回滚事务详解">SpringBoot2异常处理回滚事务详解</a></p><p><a href="https://blog.csdn.net/feiying0canglang/article/details/121369030" target="_blank" rel="noopener" title="事务传播机制--应用/实例/详解">事务传播机制–应用/实例/详解</a></p><p><a href="https://blog.csdn.net/huangsky001/article/details/113624169" target="_blank" rel="noopener" title="mysql事务详解">mysql事务详解</a></p><p><a href="https://www.jianshu.com/p/c6d4095f5833" target="_blank" rel="noopener" title="spring 事务传播行为之嵌套事务NESTED细节">spring 事务传播行为之嵌套事务NESTED细节</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;h2 id=&quot;1、介绍&quot;&gt;1、介绍&lt;/h2&gt;
&lt;p&gt;事务，就是一组操作数据库的动作集合。事务是现代数据库理论中的核心概念之一。如果一组处理步骤或者全部发生或者一步也不执行，我们称该组处理步骤为一个事务。当所有的步骤像一个操作一样被完整地执行，我们称该事务被提交。由于其中的一部分或多步执行失败，导致没有步骤被提交，则事务必须回滚到最初的系统状态。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Spring基础" scheme="https://www.shawn22.xyz/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Jackson序列化与反序列化</title>
    <link href="https://www.shawn22.xyz/posts/70fe9e1.html"/>
    <id>https://www.shawn22.xyz/posts/70fe9e1.html</id>
    <published>2022-09-28T09:32:36.000Z</published>
    <updated>2022-09-28T09:48:19.186Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Jackson简介</h1><h2 id="1、什么是Jackson">1、什么是Jackson</h2><blockquote><p>Jackson被认为是&quot;Java JSON库&quot;或&quot;Java最好的JSON解析器&quot;。或简单地被当作&quot;JSON for Java&quot;。不仅如此，Jackson 还是一套用于 Java（和 JVM 平台）的数据处理工具，包括流式 <a href="https://en.wikipedia.org/wiki/JSON" target="_blank" rel="noopener" title="JSON">JSON</a> parser / generator库、匹配 data-binding 库（<a href="https://so.csdn.net/so/search?q=POJO&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener" title="POJO">POJO</a>和JSON相互转换），还有一个额外的 data format 模块来处理 <a href="https://github.com/FasterXML/jackson-dataformats-binary/blob/master/avro" target="_blank" rel="noopener" title="Avro">Avro</a>, <a href="https://github.com/michel-kraemer/bson4jackson" target="_blank" rel="noopener" title="BSON">BSON</a>, <a href="https://github.com/FasterXML/jackson-dataformats-binary/blob/master/cbor" target="_blank" rel="noopener" title="CBOR">CBOR</a>, <a href="https://github.com/FasterXML/jackson-dataformats-text/blob/master/csv" target="_blank" rel="noopener" title="CSV">CSV</a>, <a href="https://github.com/FasterXML/jackson-dataformats-binary/tree/master/smile" target="_blank" rel="noopener" title="Smile">Smile</a>, <a href="https://github.com/FasterXML/jackson-dataformats-text/blob/master/properties" target="_blank" rel="noopener" title="(Java) Properties">(Java) Properties</a>, <a href="https://github.com/FasterXML/jackson-dataformats-binary/tree/master/protobuf" target="_blank" rel="noopener" title="Protobuf">Protobuf</a>, <a href="https://github.com/FasterXML/jackson-dataformats-text/blob/2.13/toml" target="_blank" rel="noopener" title="TOML">TOML</a>, <a href="https://github.com/FasterXML/jackson-dataformat-xml" target="_blank" rel="noopener" title="XML">XML</a>, <a href="https://github.com/FasterXML/jackson-dataformats-text/blob/master/yaml" target="_blank" rel="noopener" title="YAML">YAML</a> 这些数据编码，甚至还有大量的数据格式模块，来支持被广泛使用的数据类型如 <a href="https://github.com/FasterXML/jackson-datatypes-collections" target="_blank" rel="noopener" title="Guava">Guava</a>, <a href="https://github.com/FasterXML/jackson-datatype-joda" target="_blank" rel="noopener" title="Joda">Joda</a>, <a href="https://github.com/FasterXML/jackson-datatypes-collections" target="_blank" rel="noopener" title="PCollections">PCollections</a> 等等</p></blockquote><p>核心组件存在于他们自己的项目下，包括三个核心包(<a href="https://github.com/FasterXML/jackson-core" target="_blank" rel="noopener" title="streaming">streaming</a>, <a href="https://github.com/FasterXML/jackson-databind" target="_blank" rel="noopener" title="databind">databind</a>, <a href="https://github.com/FasterXML/jackson-annotations" target="_blank" rel="noopener" title="annotations">annotations</a>)；数据格式库；数据类型库；<a href="https://github.com/FasterXML/jackson-jaxrs-providers" target="_blank" rel="noopener" title="JAX-RS provider">JAX-RS provider</a>；和一个复杂的扩展模块—这个project 连接各个模块的中心枢纽</p><a id="more"></a><h2 id="2、核心模块">2、核心模块</h2><p>核心模块是扩展（模块）构建的基础。目前有3个模块 (Jackson 2.x为例) :</p><ul><li><p><a href="https://github.com/FasterXML/jackson-core" target="_blank" rel="noopener" title="Streaming">Streaming</a> (<a href="https://github.com/FasterXML/jackson-core/wiki" target="_blank" rel="noopener" title="docs">docs</a>) (“jackson-core”) 定义低级流 API，并包括 JSON 具体实现</p></li><li><p><a href="https://github.com/FasterXML/jackson-annotations" target="_blank" rel="noopener" title="Annotations">Annotations</a> (<a href="https://github.com/FasterXML/jackson-annotations/wiki" target="_blank" rel="noopener" title="docs">docs</a>) (“jackson-annotations”) 包含标准 Jackson 注解</p></li><li><p><a href="https://github.com/FasterXML/jackson-databind" target="_blank" rel="noopener" title="Databind">Databind</a> (<a href="https://github.com/FasterXML/jackson-databind/wiki" target="_blank" rel="noopener" title="docs">docs</a>) (“jackson-databind”) 实现data-binding (和 object serialization) ，支持 <code>streaming</code> 包; 它依赖于 <code>streaming</code> 和 <code>annotations</code> 包</p></li></ul><h1>二、ObjectMapper常见使用</h1><blockquote><p>ObjectMapper类(com.fasterxml.jackson.databind.ObjectMapper)是Jackson的主要类，它可以帮助我们快速的进行各个类型和Json类型的相互转换</p></blockquote><h2 id="1、ObjectMapper的常用配置">1、<strong>ObjectMapper的常用配置</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper <span class="title">getObjectMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.mapper;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">    mapper = <span class="keyword">new</span> ObjectMapper()</span><br><span class="line">    <span class="comment">//configure方法 配置一些需要的参数</span></span><br><span class="line">    <span class="comment">// 转换为格式化的json 显示出来的格式美化</span></span><br><span class="line">    mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class="line">    <span class="comment">//序列化的时候序列对象的那些属性  </span></span><br><span class="line">    <span class="comment">//JsonInclude.Include.NON_DEFAULT 属性为默认值不序列化 </span></span><br><span class="line">    <span class="comment">//JsonInclude.Include.ALWAYS      所有属性</span></span><br><span class="line">    <span class="comment">//JsonInclude.Include.NON_EMPTY   属性为 空（“”） 或者为 NULL 都不序列化 </span></span><br><span class="line">    <span class="comment">//JsonInclude.Include.NON_NULL    属性为NULL 不序列化</span></span><br><span class="line">    mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);  </span><br><span class="line">    <span class="comment">//反序列化时,遇到未知属性会不会报错 </span></span><br><span class="line">    <span class="comment">//true - 遇到没有的属性就报错 false - 没有的属性不会管，不会报错</span></span><br><span class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//如果是空对象的时候,不抛异常  </span></span><br><span class="line">    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="keyword">false</span>);  </span><br><span class="line">    <span class="comment">// 忽略 transient 修饰的属性</span></span><br><span class="line">    mapper.configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//修改序列化后日期格式</span></span><br><span class="line">    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);  </span><br><span class="line">    mapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">    <span class="comment">//处理不同的时区偏移格式</span></span><br><span class="line">    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">    mapper.registerModule(<span class="keyword">new</span> JavaTimeModule());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、ObjectMapper的常用方法">2、ObjectMapper的常用方法</h2><h3 id="2-1-json字符串转对象">2.1 json字符串转对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String jsonString = <span class="string">"&#123;\"name\":\"shawn\", \"age\":20&#125;"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将字符串转换为对象</span></span><br><span class="line">Student student = mapper.readValue(jsonString, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(student);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将对象转换为json字符串</span></span><br><span class="line">jsonString = mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonString);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">Student [ name: shawn, age: <span class="number">20</span> ]</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"Hyl"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-数组和对象之间转换">2.2 数组和对象之间转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象转为byte数组</span></span><br><span class="line"><span class="keyword">byte</span>[] byteArr = mapper.writeValueAsBytes(student);</span><br><span class="line">System.out.println(byteArr);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//byte数组转为对象</span></span><br><span class="line">Student student= mapper.readValue(byteArr, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(student);</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">[B@<span class="number">3327</span>bd23</span><br><span class="line">Student [ name: shawn, age: <span class="number">20</span> ]</span><br></pre></td></tr></table></figure><h3 id="2-3-集合和json字符串之间转换">2.3 集合和json字符串之间转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; studentList= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">studentList.add(<span class="keyword">new</span> Student(<span class="string">"shawn1"</span> ,<span class="number">20</span> , <span class="keyword">new</span> Date()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> Student(<span class="string">"shawn2"</span> ,<span class="number">21</span> , <span class="keyword">new</span> Date()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> Student(<span class="string">"shawn3"</span> ,<span class="number">22</span> , <span class="keyword">new</span> Date()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> Student(<span class="string">"shawn4"</span> ,<span class="number">23</span> , <span class="keyword">new</span> Date()));</span><br><span class="line"> </span><br><span class="line">String jsonStr = mapper.writeValueAsString(studentList);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line">        </span><br><span class="line">List&lt;Student&gt; studentList2 = mapper.readValue(jsonStr, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"字符串转集合："</span> + studentList2 );</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">[ &#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn1"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">20</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn2"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn3"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">22</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn4"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">23</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125; ]</span><br><span class="line">[&#123;name=shawn1, age=<span class="number">20</span>, sendTime=<span class="number">1525164212803</span>&#125;, &#123;name=shawn2, age=<span class="number">21</span>, sendTime=<span class="number">1525164212803</span>&#125;, &#123;name=shawn3, age=<span class="number">22</span>, sendTime=<span class="number">1525164212803</span>&#125;, &#123;name=shawn4, age=<span class="number">23</span>, sendTime=<span class="number">1525164212803</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-4-map和json字符串之间转换">2.4 map和json字符串之间转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; testMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">testMap.put(<span class="string">"name"</span>, <span class="string">"22"</span>);</span><br><span class="line">testMap.put(<span class="string">"age"</span>, <span class="number">20</span>);</span><br><span class="line">testMap.put(<span class="string">"date"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">testMap.put(<span class="string">"student"</span>, <span class="keyword">new</span> Student(<span class="string">"shawn"</span>, <span class="number">20</span>, <span class="keyword">new</span> Date()));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">String jsonStr = mapper.writeValueAsString(testMap);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line">Map&lt;String, Object&gt; testMapDes = mapper.readValue(jsonStr, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(testMapDes);</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"date"</span> : <span class="number">1525164212803</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"22"</span>,</span><br><span class="line">  <span class="string">"student"</span> : &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"shawn"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">20</span>,</span><br><span class="line">    <span class="string">"sendTime"</span> : <span class="number">1525164212803</span>,</span><br><span class="line">    <span class="string">"intList"</span> : <span class="keyword">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;date=<span class="number">1525164212803</span>, name=<span class="number">22</span>, student=&#123;name=shawn, age=<span class="number">20</span>, sendTime=<span class="number">1525164212803</span>, intList=<span class="keyword">null</span>&#125;, age=<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-日期转json字符串">2.5 日期转json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改时间格式</span></span><br><span class="line">mapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">Student student = <span class="keyword">new</span> Student (<span class="string">"shawn"</span>,<span class="number">21</span>, <span class="keyword">new</span> Date());</span><br><span class="line">student.setIntList(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">String jsonStr = mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="string">"2020-07-23 13:14:36"</span>,</span><br><span class="line">  <span class="string">"intList"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-readTree-方法">2.6 readTree()方法</h3><p>此方法更灵活，可以只将用户感兴趣的Json串信息值提取出来。主要利用ObjectMapper提供的readTree和Jackson提供的JsonNode类来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String test=<span class="string">"&#123;"</span>results<span class="string">":[&#123;"</span>objectID<span class="string">":357,"</span>geoPoints<span class="string">":[&#123;"</span>x<span class="string">":504604.59802246094,"</span>y<span class="string">":305569.9150390625&#125;]&#125;,&#123;"</span>objectID<span class="string">":358,"</span>geoPoints<span class="string">":[&#123;"</span>x<span class="string">":504602.2680053711,"</span>y<span class="string">":305554.43603515625&#125;]&#125;]&#125;"</span>;</span><br><span class="line"><span class="comment">//此Json串比较复杂，包含了嵌套数组的形式，具有通用性。</span></span><br><span class="line"><span class="comment">//2.2.2.2实现反序列化</span></span><br><span class="line">JsonNode node= objectMapper.readTree(test); <span class="comment">//将Json串以树状结构读入内存</span></span><br><span class="line">JsonNode contents=node.get(<span class="string">"results"</span>);<span class="comment">//得到results这个节点下的信息</span></span><br><span class="line"><span class="comment">//遍历results下的信息，size()函数可以得节点所包含的的信息的个数，类似于数组的长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contents.size();i++)  &#123;</span><br><span class="line">    <span class="comment">//读取节点下的某个子节点的值</span></span><br><span class="line">    System.out.println(contents.get(i).get(<span class="string">"objectID"</span>).getIntValue());</span><br><span class="line">    JsonNode geoNumber=contents.get(i).get(<span class="string">"geoPoints"</span>);</span><br><span class="line">    <span class="comment">//循环遍历子节点下的信息</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;geoNumber.size();j++)&#123;</span><br><span class="line">        System.out.println(geoNumber.get(j).get(<span class="string">"x"</span>).getDoubleValue()+<span class="string">"  "</span>+geoNumber.get(j).get(<span class="string">"y"</span>).getDoubleValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Java-Web与ObjectMapper">3、Java Web与ObjectMapper</h2><p>在开发 Spring Web 应用程序时，如果自定义了 ObjectMapper，并把它注册成了Bean，那很可能会导致 Spring Web 使用的 ObjectMapper 也被替换，导致 Bug。例如下面的bean，注册到Spring后就会把Spring原有的配置覆盖，导致原有的序列化配置丢失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">objectMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ObjectMapper objectMapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    objectMapper.configure(SerializationFeature.WRITE_ENUMS_USING_INDEX,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> objectMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对这个问题，有三种解决方法</p><ul><li><p>使用<code>objectMapper.configure(SerializationFeature.xxx,true);</code>把配置补齐</p></li><li><p>设置自定义类型，加上 <code>@JsonIgnoreProperties</code> 注解，开启 <strong>ignoreUnknown</strong><br>属性，以实现反序列化时忽略额外的数据</p></li><li><p>不要自定义 ObjectMapper，而是直接在配置文件设置相关参数，来修改<br>Spring 默认的 ObjectMapper 的功能，例如：<code>spring.jackson.serialization.write_enums_using_index=true</code></p></li></ul><p>另外，通过查找<code>JacksonProperties</code>类源码，可以发现很多配置类的属性，可以配合使用</p><h2 id="4、Redis序列化的一个例子">4、Redis序列化的一个例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">RedisTemplate&lt;String, T&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">    RedisTemplate&lt;String, T&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">    redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    objectMapper.enable(DeserializationFeature.USE_LONG_FOR_INTS);</span><br><span class="line">    <span class="comment">//把类型信息作为属性写入Value</span></span><br><span class="line">    objectMapper.activateDefaultTyping(objectMapper.getPolymorphicTypeValidator(), ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">    jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">    redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">    redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">    redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    redisTemplate.afterPropertiesSet();</span><br><span class="line">    <span class="keyword">return</span> redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="https://github.com/FasterXML/jackson-docs" target="_blank" rel="noopener" title="jackson官方文档地址">jackson官方文档地址</a></p><p><a href="https://blog.csdn.net/qq_46186167/article/details/123671712" target="_blank" rel="noopener" title="https://blog.csdn.net/qq_46186167/article/details/123671712">https://blog.csdn.net/qq_46186167/article/details/123671712</a></p><p><a href="https://www.tabnine.com/code/java/methods/com.fasterxml.jackson.databind.ObjectMapper/configure" target="_blank" rel="noopener" title="https://www.tabnine.com/code/java/methods/com.fasterxml.jackson.databind.ObjectMapper/configure">https://www.tabnine.com/code/java/methods/com.fasterxml.jackson.databind.ObjectMapper/configure</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Jackson简介&lt;/h1&gt;
&lt;h2 id=&quot;1、什么是Jackson&quot;&gt;1、什么是Jackson&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Jackson被认为是&amp;quot;Java JSON库&amp;quot;或&amp;quot;Java最好的JSON解析器&amp;quot;。或简单地被当作&amp;quot;JSON for Java&amp;quot;。不仅如此，Jackson 还是一套用于 Java（和 JVM 平台）的数据处理工具，包括流式 &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;JSON&quot;&gt;JSON&lt;/a&gt; parser / generator库、匹配 data-binding 库（&lt;a href=&quot;https://so.csdn.net/so/search?q=POJO&amp;amp;spm=1001.2101.3001.7020&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;POJO&quot;&gt;POJO&lt;/a&gt;和JSON相互转换），还有一个额外的 data format 模块来处理 &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-binary/blob/master/avro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Avro&quot;&gt;Avro&lt;/a&gt;, &lt;a href=&quot;https://github.com/michel-kraemer/bson4jackson&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;BSON&quot;&gt;BSON&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-binary/blob/master/cbor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;CBOR&quot;&gt;CBOR&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-text/blob/master/csv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;CSV&quot;&gt;CSV&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-binary/tree/master/smile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Smile&quot;&gt;Smile&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-text/blob/master/properties&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;(Java) Properties&quot;&gt;(Java) Properties&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-binary/tree/master/protobuf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Protobuf&quot;&gt;Protobuf&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-text/blob/2.13/toml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;TOML&quot;&gt;TOML&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformat-xml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;XML&quot;&gt;XML&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-text/blob/master/yaml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;YAML&quot;&gt;YAML&lt;/a&gt; 这些数据编码，甚至还有大量的数据格式模块，来支持被广泛使用的数据类型如 &lt;a href=&quot;https://github.com/FasterXML/jackson-datatypes-collections&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Guava&quot;&gt;Guava&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-datatype-joda&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Joda&quot;&gt;Joda&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-datatypes-collections&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;PCollections&quot;&gt;PCollections&lt;/a&gt; 等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;核心组件存在于他们自己的项目下，包括三个核心包(&lt;a href=&quot;https://github.com/FasterXML/jackson-core&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;streaming&quot;&gt;streaming&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-databind&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;databind&quot;&gt;databind&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-annotations&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;annotations&quot;&gt;annotations&lt;/a&gt;)；数据格式库；数据类型库；&lt;a href=&quot;https://github.com/FasterXML/jackson-jaxrs-providers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;JAX-RS provider&quot;&gt;JAX-RS provider&lt;/a&gt;；和一个复杂的扩展模块—这个project 连接各个模块的中心枢纽&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://www.shawn22.xyz/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot生产监控</title>
    <link href="https://www.shawn22.xyz/posts/f72e74db.html"/>
    <id>https://www.shawn22.xyz/posts/f72e74db.html</id>
    <published>2022-09-28T09:26:33.000Z</published>
    <updated>2022-09-28T09:48:19.187Z</updated>
    
    <content type="html"><![CDATA[<h1>一、健康监控简介</h1><h2 id="1、介绍">1、介绍</h2><p>开发完成后，生产就绪需要做哪些工作呢？我认为，以下三方面的工作最重要。</p><ul><li><strong>提供健康检测接口</strong>。传统采用 ping 的方式对应用进行探活检测并不准确。有的时候，应用的关键内部或外部依赖已经离线，导致其根本无法正常工作，但其对外的 Web 端口或管理端口是可以 ping 通的。我们应该提供一个专有的监控检测接口，并尽可能触达一些内部组件。</li><li><strong>暴露应用内部信息</strong>。应用内部诸如线程池、内存队列等组件，往往在应用内部扮演了重要的角色，如果应用或应用框架可以对外暴露这些重要信息，并加以监控，那么就有可能在诸如 OOM 等重大问题暴露之前发现蛛丝马迹，避免出现更大的问题。</li><li><strong>建立应用指标 Metrics 监控</strong>。Metrics 可以翻译为度量或者指标，指的是对于一些关键信息以可聚合的、数值的形式做定期统计，并绘制出各种趋势图表。这里的指标监控，包括两个方面：一是，应用内部重要组件的指标监控，比如 JVM 的一些指标、接口的 QPS 等；二是，应用的业务数据的监控，比如电商订单量、游戏在线人数等。</li></ul><a id="more"></a><h2 id="2、SpringBoot准备工作">2、SpringBoot准备工作</h2><p>Spring Boot 有一个 Actuator 模块，封装了诸如健康检测、应用内部信息、Metrics 指标等生产就绪的功能。今天这一讲后面的内容都是基于 Actuator 的，因此我们需要先完成 Actuator 的引入和配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Actuator 自带了很多开箱即用提供信息的端点（<strong>Endpoint</strong>），可以通过** JMX 或 Web **两种方式进行暴露。考虑到有些信息比较敏感，这些内置的端点默认不是完全开启的，你可以通过官网查看这些默认值。在这里，为了方便后续 Demo，我们设置所有端点通过 Web 方式开启。</p><p>默认情况下，Actuator 的 Web 访问方式的根地址为 <code>/actuator</code>，可以通过<code>management.endpoints.web.base-path</code> 参数进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45678</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/admin</span></span><br></pre></td></tr></table></figure><p>现在访问<code>http://localhost:45678/admin</code>可以查看 Actuator 的所有功能 URL </p><h2 id="3、其他">3、其他</h2><p>大部分端点提供的是只读信息，比如查询 Spring 的 Bean、ConfigurableEnvironment、定时任务、SpringBoot 自动配置、Spring MVC 映射等；少部分端点还提供了修改功能，比如优雅关闭程序、下载线程 Dump、下载堆 Dump、修改日志级别等。</p><p>我们可以访问这里，查看所有这些端点的功能，详细了解它们提供的信息以及实现的操作。此外推荐一个很好的工具， Spring Boot 管理工具Spring Boot Admin，它把大部分 Actuator 端点提供的功能封装为了 Web UI。可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124675465" target="_blank" rel="noopener" title="Spring Boot Admin服务监控">Spring Boot Admin服务监控</a></p><h1>二、健康检测触达关键组件</h1><h2 id="1、内置组件健康详情">1、内置组件健康详情</h2><p>健康检测接口可以让监控系统或发布工具知晓应用的真实健康状态，比 ping 应用端口更可靠。不过，要达到这种效果最关键的是，我们能确保健康检测接口可以探查到关键组件的状态。好在 <code>Spring Boot Actuator</code>帮我们预先实现了诸如数据库、InfluxDB、Elasticsearch、Redis、RabbitMQ 等三方系统的健康检测指示器 HealthIndicator。</p><p>通过 Spring Boot 的自动配置，这些指示器会自动生效。当这些组件有问题的时候，HealthIndicator 会返回 <code>DOWN </code>或 <code>OUT_OF_SERVICE </code>状态，health 端点 HTTP 响应状态码也会变为 503，我们可以以此来配置程序健康状态监控报警。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45678</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/admin</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>我们可以修改配置文件，把 management.endpoint.health.show-details 参数设置为 always，让所有用户都可以直接查看各个组件的健康情况（如果配置为 when-authorized，那么可以结合 management.endpoint.health.roles 配置授权的角色）。访问 health 端点可以看到，数据库、磁盘、RabbitMQ、Redis 等组件健康状态是 UP，整个应用的状态也是 UP</p><h2 id="2、自定义组件健康详情">2、自定义组件健康详情</h2><p>如果程序依赖一个很重要的三方服务，我们希望这个服务无法访问的时候，应用本身的健康状态也是 DOWN，首先创建User类以及配置bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如三方服务有一个 user 接口，出现异常的概率是 50%：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">        <span class="comment">//一半概率返回正确响应，一半概率抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (ThreadLocalRandom.current().nextInt() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">"name"</span> + id);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要实现这个 user 接口是否正确响应和程序整体的健康状态挂钩的话，很简单，只需定义一个 <code>UserServiceHealthIndicator</code>实现 <code>HealthIndicator</code>接口即可。</p><p>在 health 方法中，我们通过 RestTemplate 来访问这个 user 接口，如果结果正确则返回 <code>Health.up()</code>，并把调用执行耗时和结果作为补充信息加入 Health 对象中。如果调用接口出现异常，则返回 <code>Health.down()</code>，并把异常信息作为补充信息加入 Health 对象中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> userId = <span class="number">2L</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = restTemplate.getForObject(<span class="string">"http://localhost:8080/user?userId="</span> + userId, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (user != <span class="keyword">null</span> &amp;&amp; user.getUserId() == userId) &#123;</span><br><span class="line">                <span class="keyword">return</span> Health.up()</span><br><span class="line">                        .withDetail(<span class="string">"user"</span>, user)</span><br><span class="line">                        .withDetail(<span class="string">"took"</span>, System.currentTimeMillis() - begin)</span><br><span class="line">                        .build();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Health.down().withDetail(<span class="string">"took"</span>, System.currentTimeMillis() - begin).build();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            log.warn(<span class="string">"health check failed!"</span>, ex);</span><br><span class="line">            <span class="keyword">return</span> Health.down(ex).withDetail(<span class="string">"took"</span>, System.currentTimeMillis() - begin).build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问<code>http://localhost:45678/admin/health</code>即可发现<strong>UserService</strong>已经成功被检测<br><img src="https://img-blog.csdnimg.cn/e02064042e3d4cf6a6164031a8d3a181.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3、自定义多-HealthIndicator-聚合">3、自定义多 HealthIndicator 聚合</h2><p>我们再来看一个聚合多个 HealthIndicator 的案例，也就是定义一个 CompositeHealthContributor 来聚合多个 HealthContributor，实现一组线程池的监控</p><p>首先，在 ThreadPoolProvider 中定义两个线程池，其中 demoThreadPool 是包含一个工作线程的线程池，类型是 ArrayBlockingQueue，阻塞队列的长度为 10；还有一个 ioThreadPool 模拟 IO 操作线程池，核心线程数 10，最大线程数 50</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个工作线程的线程池，队列长度10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor demoThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">2</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>),</span><br><span class="line">            <span class="keyword">new</span> CustomizableThreadFactory(<span class="string">"springThread-pool-"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//核心线程数10，最大线程数50的线程池，队列长度50</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor ioThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            <span class="number">10</span>, <span class="number">50</span>,</span><br><span class="line">            <span class="number">2</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">100</span>),</span><br><span class="line">            <span class="keyword">new</span> CustomizableThreadFactory(<span class="string">"io-Thread-pool-"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">getDemoThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demoThreadPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">getIOThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ioThreadPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们定义一个接口，来把耗时很长的任务提交到这个 demoThreadPool 线程池，以模拟线程池队列满的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"slowTask"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slowTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolProvider.getDemoThreadPool().execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.HOURS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>做了这些准备工作后，让我们来真正实现自定义的 <code>HealthIndicator </code>类，用于单一线程池的健康状态。我们可以传入一个 <code>ThreadPoolExecutor</code>，通过判断队列剩余容量来确定这个组件的健康状态，有剩余量则返回 UP，否则返回 DOWN，并把线程池队列的两个重要数据，也就是当前队列元素个数和剩余量，作为补充信息加入 Health</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor threadPool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolHealthIndicator</span><span class="params">(ThreadPoolExecutor threadPool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threadPool = threadPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; detail = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        detail.put(<span class="string">"queue_size"</span>, threadPool.getQueue().size());</span><br><span class="line">        detail.put(<span class="string">"queue_remaining"</span>, threadPool.getQueue().remainingCapacity());</span><br><span class="line">        <span class="keyword">if</span> (threadPool.getQueue().remainingCapacity() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.up().withDetails(detail).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.down().withDetails(detail).build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个 <code>CompositeHealthContributor</code>，来聚合两个 <code>ThreadPoolHealthIndicator </code>的实例，分别对应 <code>ThreadPoolProvider </code>中定义的两个线程池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolsHealthContributor</span> <span class="keyword">implements</span> <span class="title">CompositeHealthContributor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, HealthContributor&gt; contributors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ThreadPoolsHealthContributor() &#123;</span><br><span class="line">        <span class="keyword">this</span>.contributors.put(<span class="string">"demoThreadPool"</span>, <span class="keyword">new</span> ThreadPoolHealthIndicator(ThreadPoolProvider.getDemoThreadPool()));</span><br><span class="line">        <span class="keyword">this</span>.contributors.put(<span class="string">"ioThreadPool"</span>, <span class="keyword">new</span> ThreadPoolHealthIndicator(ThreadPoolProvider.getIOThreadPool()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HealthContributor <span class="title">getContributor</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contributors.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;NamedContributor&lt;HealthContributor&gt;&gt; iterator() &#123;</span><br><span class="line">        <span class="keyword">return</span> contributors.entrySet().stream()</span><br><span class="line">                .map((entry) -&gt; NamedContributor.of(entry.getKey(), entry.getValue())).iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后当看到一个 <code>demoThreadPool </code>为 DOWN 导致父 <code>threadPools </code>为 DOWN，进一步导致整个程序的 <code>status </code>为 DOWN：</p><h1>三、对外暴露应用内部重要组件的状态</h1><h2 id="1、内部状态数据暴露">1、内部状态数据暴露</h2><p>除了可以把线程池的状态作为整个应用程序是否健康的依据外，我们还可以通过 Actuator 的 <code>InfoContributor </code>功能，对外暴露程序内部重要组件的状态数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolInfoContributor</span> <span class="keyword">implements</span> <span class="title">InfoContributor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map <span class="title">threadPoolInfo</span><span class="params">(ThreadPoolExecutor threadPool)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; info = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        info.put(<span class="string">"poolSize"</span>, threadPool.getPoolSize());</span><br><span class="line">        info.put(<span class="string">"corePoolSize"</span>, threadPool.getCorePoolSize());</span><br><span class="line">        info.put(<span class="string">"largestPoolSize"</span>, threadPool.getLargestPoolSize());</span><br><span class="line">        info.put(<span class="string">"maximumPoolSize"</span>, threadPool.getMaximumPoolSize());</span><br><span class="line">        info.put(<span class="string">"completedTaskCount"</span>, threadPool.getCompletedTaskCount());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contribute</span><span class="params">(Info.Builder builder)</span> </span>&#123;</span><br><span class="line">        builder.withDetail(<span class="string">"demoThreadPool"</span>, threadPoolInfo(ThreadPoolProvider.getDemoThreadPool()));</span><br><span class="line">        builder.withDetail(<span class="string">"ioThreadPool"</span>, threadPoolInfo(ThreadPoolProvider.getIOThreadPool()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 /admin/info 接口，可以看到这些数据</p><h2 id="2、JMX-MBean">2、JMX MBean</h2><p>如果开启了JMX，即<code>spring.jmx.enabled=true</code>，可以通过 jconsole 工具，在 <code>org.springframework.boot.Endpoint</code> 中找到 <code>Info </code>这个 MBean，然后执行 info 操作可以看到，我们刚才自定义的 <code>InfoContributor </code>输出的有关两个线程池的信息：</p><p><img src="https://img-blog.csdnimg.cn/15e05963b1704f188af9dc06d87d3aa8.png#pic_center" alt="在这里插入图片描述"></p><h1>四、指标 Metrics 快速定位</h1><p>指标是指一组和时间关联的、衡量某个维度能力的量化数值。通过收集指标并展现为曲线图、饼图等图表，可以帮助我们快速定位、分析问题</p><h1>五、总结</h1><p>健康检测可以帮我们实现负载均衡的联动；应用信息以及 Actuaor 提供的各种端点，可以帮我们查看应用内部情况，甚至对应用的一些参数进行调整；而指标监控，则有助于我们整体观察应用运行情况，帮助我们快速发现和定位问题</p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、健康监控简介&lt;/h1&gt;
&lt;h2 id=&quot;1、介绍&quot;&gt;1、介绍&lt;/h2&gt;
&lt;p&gt;开发完成后，生产就绪需要做哪些工作呢？我认为，以下三方面的工作最重要。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提供健康检测接口&lt;/strong&gt;。传统采用 ping 的方式对应用进行探活检测并不准确。有的时候，应用的关键内部或外部依赖已经离线，导致其根本无法正常工作，但其对外的 Web 端口或管理端口是可以 ping 通的。我们应该提供一个专有的监控检测接口，并尽可能触达一些内部组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;暴露应用内部信息&lt;/strong&gt;。应用内部诸如线程池、内存队列等组件，往往在应用内部扮演了重要的角色，如果应用或应用框架可以对外暴露这些重要信息，并加以监控，那么就有可能在诸如 OOM 等重大问题暴露之前发现蛛丝马迹，避免出现更大的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建立应用指标 Metrics 监控&lt;/strong&gt;。Metrics 可以翻译为度量或者指标，指的是对于一些关键信息以可聚合的、数值的形式做定期统计，并绘制出各种趋势图表。这里的指标监控，包括两个方面：一是，应用内部重要组件的指标监控，比如 JVM 的一些指标、接口的 QPS 等；二是，应用的业务数据的监控，比如电商订单量、游戏在线人数等。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JSON常用注解</title>
    <link href="https://www.shawn22.xyz/posts/c69f5ed2.html"/>
    <id>https://www.shawn22.xyz/posts/c69f5ed2.html</id>
    <published>2022-07-29T12:34:38.000Z</published>
    <updated>2022-07-29T12:37:35.189Z</updated>
    
    <content type="html"><![CDATA[<h1>一、介绍</h1><h2 id="1、前言">1、前言</h2><p>在使用Java开发时，一定会接触到Json，而选择前后端开发都是使用Json进行数据传输，以及和数据库打交道的Bean类，相信你一定遇到过字段类型不同而导致的烦恼，而使用这些注解可以很方便进行<strong>字段转换、字段忽略</strong>等等</p><p>这里我使用Spring自带的Jackson和阿里巴巴的FastJson作为记录</p><a id="more"></a><h2 id="2、依赖引入">2、依赖引入</h2><p>Jackson包默认依赖在<code>spring-boot-starter-web</code>下，如果需要使用FastJson包，则需要去除原有的Json依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>二、Jackson常用注解</h1><h2 id="1、-JsonIgnoreProperties">1、@JsonIgnoreProperties</h2><p>类别：类注解</p><p>作用：json序列化时将bean中的一些属性忽略掉，序列化和反序列化都受影响内部可以写多个属性，返回前端忽略该字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">allowGetters，allowSetters一起用用来控制字段忽视是在序列化还是反序列化</span></span><br><span class="line"><span class="comment">allowGetters=true：字段允许序列化，反序列的时候忽略该字段</span></span><br><span class="line"><span class="comment">allowSetters=true：字段允许反序列化，序列化的时候忽略该字段</span></span><br><span class="line"><span class="comment">ignoreUnknown=true：反序列化的时候忽视未知的字段，解决字段无法对应实体类会报错json解析异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonIgnoreProperties</span>(&#123;<span class="string">"name"</span>&#125;,&#123;<span class="string">"age"</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="2、-JsonIgnore">2、@JsonIgnore</h2><p>类别：属性或方法上的注解（最好是属性上）<br>作用：用来完全忽略被注解的字段和方法对应的属性，序列化和反序列化都受影响，返回前端忽略该字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure><h2 id="3、-JsonIgnoreType">3、@JsonIgnoreType</h2><p>类别：类注解<br>作用：类在序列化和反序列化的时候被忽略，只有在该类作为其他类的属性时才会被忽略，直接序列化、反序列化该类是正常的，主要用来对一些数据敏感的对象进行忽略，比如用户的凭据</p><h2 id="4、-JsonFormat">4、@JsonFormat</h2><p>类别：用于属性或方法上（最好是属性上）<br>作用：在需要查询出来的时间的数据库字段对应的实体类的属性上添加，返回的时候会自动格式化，可以在属性对应的get方法上，两种方式没有区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(pattern=<span class="string">"yyyy-MM-dd"</span>,timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想把前端日期字符串转换成Date格式 @DateTimeFormat(pattern="yyyy-MM-dd")</span></span><br></pre></td></tr></table></figure><h2 id="5、-JsonProperty">5、@JsonProperty</h2><p>类别：用于属性</p><p>作用：指定某个属性和json映射的名称</p><ul><li><p>前端传过来的参数，想用其他属性名接收，可以在属性上加此注解  </p></li><li><p>后端返回给前端数据时，前端要求指定key，可在属性上加此注解，就会以注解中的value返回</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这样前端接受的字段为user_name</span></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"user_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、-Transient">6、@Transient</h2><p>类别：用于属性或方法上（最好是属性上）  </p><p>作用：属性不与数据库表的字段映射—该字段在数据库中不存在，而需要使用。实体类中使用了@Table注解后，想要添加表中不存在的字段，就要使用@Transient这个注解；同时还有<strong>transient</strong>关键字标记的成员变量不参与序列化过程。</p><h2 id="7、-JsonSerialize">7、@JsonSerialize</h2><p>类别：用于属性或getter方法，在序列化时嵌入自定义代码</p><p>作用：需要<strong>使用 using 属性指定处理参数的类</strong>，该类需要继承 <code>JsonSerializer </code>类，并重写 <code>serialize()</code>。  若使用了 Lombok 需要自己定义相应的 get 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using = CustomDateSerialize<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Date</span> <span class="title">getDate</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDateSerialize</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义日期格式</span></span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Date date, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        jsonGenerator.writeString(simpleDateFormat.format(date));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、-JsonDeserialize">8、@JsonDeserialize</h2><p>类别：用于属性或者setter方法上，用于在反序列化时可以嵌入我们自定义的代码，类似于上面的<code>@JsonSerialize</code></p><p>作用：需要<strong>使用 using 属性指定处理参数的类</strong>，该类需要继承 <code>JsonSerializer </code>类，并重写 <code>serialize()</code>。  若使用了 Lombok 需要自己定义相应的 get 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在前端性别显示"男 / 女"；数据库中存储的是"1 / 0"，对应的 Pojo 也是使用的 Integer 类型</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4346092911489022673L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1 男，0 女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonDeserialize</span>(using = GenderJsonDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">setGender</span>(<span class="title">Integer</span> <span class="title">gender</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = GenderJsonSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Integer</span> <span class="title">getGender</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JsonDeserializer 作用是：处理参数，按照规则封装到指定的属性中，通过 jsonParser.getText() 获取参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenderJsonDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(jsonParser)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> gender = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (jsonParser.getText()) &#123; <span class="comment">// 通过getText获取参数</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"男"</span>:</span><br><span class="line">                gender = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"女"</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"传入的性别为非法字符"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JsonSerializer 作用是：处理属性，按照规则封装到指定的参数中，通过value获取属性通过 jsonGenerator.writeXxx() 写出参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenderJsonSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o.equals(<span class="number">1</span>)) &#123;</span><br><span class="line">            jsonGenerator.writeString(<span class="string">"男"</span>); <span class="comment">// 写出参数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o.equals(<span class="number">0</span>)) &#123;</span><br><span class="line">            jsonGenerator.writeString(<span class="string">"女"</span>); <span class="comment">// 写出参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、序列化其他相关注解">9、序列化其他相关注解</h2><h3 id="9-1-JsonPropertyOrder">9.1 @JsonPropertyOrder</h3><p>在将 java pojo 对象序列化成为 json 字符串时，使用 <code>@JsonPropertyOrder</code> 可以指定属性在 json 字符串中的顺序</p><h3 id="9-2-JsonInclude">9.2 @JsonInclude</h3><p>在将 java pojo 对象序列化成为 json 字符串时，使用 <code>@JsonInclude</code> 注解可以控制在哪些情况下才将被注解的属性转换成 json</p><ul><li><p>ALWAYS ：默认策略，任何情况下都序列化该字段  </p></li><li><p>NON_NULL：注解的字段为null不序列化  </p></li><li><p>NON_ABSENT：注解的字段为null的时候不序列化</p></li><li><p>NON_EMPTY ：注解的字段为null或为空不序列化  </p></li><li><p>NON_DEFAULT：字段是默认值的话就不序列化  </p></li><li><p>CUSTOM：自定义排除序列化规则，过滤器对象的 equals() 方法被调用并带有要序列化的值；  如果返回真值则排除（即过滤掉）</p></li><li><p>USE_DEFAULTS：伪值用于指示更高级别的默认值是有意义的，以避免覆盖包含值。  例如，如果返回一个属性，这将使用包含属性的类的默认值，如果有的话；  如果没有为此定义，则全局序列化包含详细信息。</p></li></ul><h3 id="9-3-JsonGetter、-JsonSetter注解">9.3 @JsonGetter、@JsonSetter注解</h3><p><code>@JsonGetter</code>和<code>@JsonSetter</code>注解只能用在getter和setter方法上，用来反序列化为指定字段名和序列化时为指定字段名，可以替换上面的@JsonProperty也可以被替换；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonGetter</span>(<span class="string">"USERNAME"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSetter</span>(<span class="string">"USERNAME"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4-JsonAnySetter和-JsonAnyGetter注解">9.4 @JsonAnySetter和@JsonAnyGetter注解</h3><ul><li><p><code>@JsonAnySetter</code>注解是在反序列化时实体对象不存在对应的属性时加上该 注解，不存在的属性都会放到Map中去</p></li><li><p><code>@JsonAnyGetter</code>注解在序列化时Map加上该属性可以将map中的属性序列化为指定字符串</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonAnyGetter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonAnySetter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Map&lt;String, String&gt; properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、FastJson常用注解</h1><blockquote><p>文档：<a href="https://www.w3cschool.cn/fastjson/fastjson-intro.html" target="_blank" rel="noopener" title="https://www.w3cschool.cn/fastjson/fastjson-intro.html">https://www.w3cschool.cn/fastjson/fastjson-intro.html</a><br>官方文档：<a href="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN" target="_blank" rel="noopener" title="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</a></p></blockquote><h2 id="1、介绍">1、介绍</h2><p>FastJson提供了4种注解,分别是<code>@JSONType</code>，<code>@JSONCreator</code>，<code>@JSONField</code>，<code>@JSONPOJOBuilder</code></p><h2 id="2、-JSONField">2、@JSONField</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若属性是私有的，必须有set*方法。否则无法反序列化。</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JSONField &#123;</span><br><span class="line">  <span class="comment">// 配置序列化和反序列化的顺序，1.1.42版本之后才⽀持</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">  <span class="comment">// 指定字段的名称</span></span><br><span class="line">  <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">  <span class="comment">// 指定字段的格式，对⽇期格式有⽤</span></span><br><span class="line">  <span class="function">String <span class="title">format</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">  <span class="comment">// 是否序列化</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">serialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">  <span class="comment">// 是否反序列化</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">deserialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>@JSONField(ordinal =0) 序列化字段的顺序，默认是0</p></li><li><p>@JSONField(name = “”)    用于解决属性名和key不一致的情况，当前端传过来的字段名不一样的时候，我们可以在字段名上加上这个注解</p></li><li><p>@JSONField(format = “yyyy-MM-dd HH:mm:ss”) ， 用在Date属性上，自动格式化日期</p></li><li><p>@JSONField(serialize = false)    是否要把这个字段序列化成JSON字符串，默认是true</p></li><li><p>@JSONField(deserialize = false)    字段是否需要进行反序列化，默认是true</p></li></ul><h2 id="3、-JSONType">3、@JSONType</h2><p>放在实体类上就会只装配列举的字段或者排除列举的成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不序列化这两个</span></span><br><span class="line"><span class="meta">@JSONType</span>(ignores = &#123;<span class="string">"id"</span>, <span class="string">"sex"</span>&#125;)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pojo2</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//序列化只序列化这两个属性</span></span><br><span class="line"><span class="class">@<span class="title">JSONType</span>(<span class="title">includes</span> </span>= &#123;<span class="string">"name"</span>, <span class="string">"sex"</span>&#125;)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pojo1</span></span></span><br></pre></td></tr></table></figure><hr><p><a href="https://juejin.cn/post/7115219049931341854" target="_blank" rel="noopener" title="https://juejin.cn/post/7115219049931341854">https://juejin.cn/post/7115219049931341854</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、前言&quot;&gt;1、前言&lt;/h2&gt;
&lt;p&gt;在使用Java开发时，一定会接触到Json，而选择前后端开发都是使用Json进行数据传输，以及和数据库打交道的Bean类，相信你一定遇到过字段类型不同而导致的烦恼，而使用这些注解可以很方便进行&lt;strong&gt;字段转换、字段忽略&lt;/strong&gt;等等&lt;/p&gt;
&lt;p&gt;这里我使用Spring自带的Jackson和阿里巴巴的FastJson作为记录&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://www.shawn22.xyz/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring事件监听</title>
    <link href="https://www.shawn22.xyz/posts/cb9972ff.html"/>
    <id>https://www.shawn22.xyz/posts/cb9972ff.html</id>
    <published>2022-07-29T12:34:30.000Z</published>
    <updated>2022-07-29T12:37:35.188Z</updated>
    
    <content type="html"><![CDATA[<h1>Spring事件监听器</h1><h1>一、简介</h1><h2 id="1、Spring事件监听基本原理">1、Spring事件监听基本原理</h2><blockquote><p>Spring的事件监听机制和发布订阅机制是很相似的：发布了一个事件后，监听该类型事件的所有监听器会触发相应的处理逻辑。</p></blockquote><p>正如Spring官方文档上所说的，<strong>整个上就是一个观察者的模式</strong>。那么，我们不妨猜测下，Spring是如何来实现事件发布监听的：底层使用一个集合存储了所有的监听器，当发布了一个事件后，遍历事件监听器集合，然后过滤符合事件类型的监听器，最后触发相应的事件处理逻辑。</p><a id="more"></a><h2 id="2、Spring中事件监听的相关规范">2、Spring中事件监听的相关规范</h2><p>在Spring中，事件监听机制主要涉及到了一下几个关键的规范（抽象类及接口）：<code>ApplicationEvent</code>、<code>ApplicationListener</code>、<code>ApplicationEventPublisher</code></p><ul><li><p><strong>ApplicationEvent</strong>: Spring的事件是符合jdk的规范的，这个抽象类继承了jdk内置的事件规范类<code>EventObject</code>（即jdk建议所有的事件都继承<code>EventObject</code>这个类）。<code>ApplicationEvent</code>是Spring家的事件规范。所以我们在自定义事件的时候，可以继承与<code>ApplicationEvent</code>，比如，Spring家自己关于容器上下文事件就又定义了一个容器上下文的时间规范<code>ApplicationContextEvent</code>，它同样是继承于<code>ApplicationEvent</code>的，只不过扩充了获取发出事件容器的方法；今后，我们同样可以在继承于<code>ApplicationEvent</code>的基础上定义自己的事件规范。</p></li><li><p><strong>ApplicationListener</strong>：这是一个函数式接口，同样时事件监听器的规范，当监听到自己监听的事件类型时就会调用<code>onApplicationEvent</code>方法来执行监听逻辑</p></li><li><p><strong>ApplicationEventPublisher</strong>：这同样是一个函数式接口，定义了事件发布的规范，任何的事件发布器<code>ApplicationEventPublisher</code>都是通过调用<code>publishEvent</code>来进行事件的发布</p></li></ul><h1>二、Spring事件监听器的使用</h1><h2 id="1、自定义事件创建">1、自定义事件创建</h2><p>在Spring中，所有的事件需要继承自ApplicationEvent，自定义事件的不同可以监听多个，一个最基础的MsgEvent如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须继承实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyEvent&#123;"</span> +</span><br><span class="line">                <span class="string">"msg='"</span> + msg + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、自定义监听器">2、自定义监听器</h2><h3 id="2-1-方法介绍">2.1 方法介绍</h3><p>springboot进行事件监听有四种方式，选择任意一种即可</p><ul><li><p>将监听器装载入spring容器（常用）</p></li><li><p>通过@EventListener注解实现事件监听（常用）</p></li><li><p>手工向ApplicationContext中添加监听器</p></li><li><p>在application.properties中配置监听器</p></li></ul><h3 id="2-2-将监听器装载入spring容器">2.2 将监听器装载入spring容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装载入spring容器中</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener1</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里可以自定义自己的方法</span></span><br><span class="line">        log.info(String.format(<span class="string">"%s监听到事件源：%s."</span>, MyListener1<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">event</span>.<span class="title">toString</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加@Component注解加入Spring容器，也可以手动加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(ListenerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        <span class="comment">//装载监听</span></span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> MyListener1());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过配置文<code>application.properties</code>中配置监听器：<code>context.listener.classes=com.listener.MyListener1</code></p><h3 id="2-3-EventListener注解实现事件监听">2.3 @EventListener注解实现事件监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener2</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 通过注解的方法</span></span><br><span class="line">    <span class="meta">@EventListener</span>(MyEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">consumer</span>(<span class="title">MyEvent</span> <span class="title">msgEvent</span>) </span>&#123;</span><br><span class="line">        log.info(String.format(<span class="string">"%s监听到事件源：%s."</span>, MsgPublisher<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">msgEvent</span>.<span class="title">toString</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、事件发布">3、事件发布</h2><p>前面是消费事件，消费的前提是有事件产生，在Spring中，发布事件主要需要借助<code>ApplicationContext</code>来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgPublisher</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发起事件通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        applicationContext.publishEvent(<span class="keyword">new</span> MyEvent1(<span class="keyword">this</span>, msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过注解的方法</span></span><br><span class="line">    <span class="meta">@EventListener</span>(MyEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">consumer</span>(<span class="title">MyEvent</span> <span class="title">msgEvent</span>) </span>&#123;</span><br><span class="line">        log.info(String.format(<span class="string">"%s监听到事件源：%s."</span>, MsgPublisher<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">msgEvent</span>.<span class="title">toString</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个只是测试，到时候spring直接调用即可</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MsgPublisher<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        MsgPublisher msgPublisher = context.getBean(MsgPublisher<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        msgPublisher.publish(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;Spring事件监听器&lt;/h1&gt;
&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;h2 id=&quot;1、Spring事件监听基本原理&quot;&gt;1、Spring事件监听基本原理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring的事件监听机制和发布订阅机制是很相似的：发布了一个事件后，监听该类型事件的所有监听器会触发相应的处理逻辑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正如Spring官方文档上所说的，&lt;strong&gt;整个上就是一个观察者的模式&lt;/strong&gt;。那么，我们不妨猜测下，Spring是如何来实现事件发布监听的：底层使用一个集合存储了所有的监听器，当发布了一个事件后，遍历事件监听器集合，然后过滤符合事件类型的监听器，最后触发相应的事件处理逻辑。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Spring基础" scheme="https://www.shawn22.xyz/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
