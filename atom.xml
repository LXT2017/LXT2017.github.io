<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星的猫(&gt;^ω^&lt;)喵</title>
  
  
  <link href="https://www.shawn22.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.shawn22.xyz/"/>
  <updated>2022-09-28T09:48:06.368Z</updated>
  <id>https://www.shawn22.xyz/</id>
  
  <author>
    <name>Shawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot重试策略Retry</title>
    <link href="https://www.shawn22.xyz/posts/60a09db8.html"/>
    <id>https://www.shawn22.xyz/posts/60a09db8.html</id>
    <published>2022-09-28T09:34:57.000Z</published>
    <updated>2022-09-28T09:48:06.368Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><h2 id="1、重试机制">1、重试机制</h2><blockquote><p>重试机制在网络服务中非常的重要，由于网路可能存在延迟，网络抖动，网络不稳定的情况。同时在分布式服务中网络的请求的高度密集，有些服务不一定能在规定的时间内完成访问。应该请求服务需要重试几次。以保证服务请求成功。</p></blockquote><p>例如对接支付接口时，因为回调比较重要，当访问失败时会进行重试，不过此时的重试机制时间是逐步加大，例如30s/1m/10m/1h等，最终到达阈值不在重试</p><p>对于重试是有场景限制的，不是什么场景都适合重试，<strong>比如参数校验不合法、写操作等（要考虑写是否幂等）都不适合重试</strong>。<strong>远程调用超时、网络突然中断可以重试</strong>。在微服务治理框架中，通常都有自己的重试与超时配置，比如<strong>dubbo可以设置retries=1，timeout=500调用失败只重试1次，超过500ms调用仍未返回则调用失败</strong>。比如外部 RPC 调用，或者数据入库等操作，<strong>如果一次操作失败，可以进行多次重试，提高调用成功的可能性</strong>。</p><a id="more"></a><h2 id="2、重试机制设计、共性和原理">2、重试机制设计、共性和原理</h2><ul><li><p>无侵入：这个好理解，不改动当前的业务逻辑，对于需要重试的地方，可以很简单的实现</p></li><li><p>可配置：包括重试次数，重试的间隔时间，是否使用异步方式等</p></li><li><p>通用性：最好是无改动(或者很小改动)的支持绝大部分的场景，拿过来直接可用</p></li><li><p>正常和重试优雅解耦，重试断言条件实例或逻辑异常实例是两者沟通的媒介</p></li><li><p>约定重试间隔，差异性重试策略，设置重试超时时间，进一步保证重试有效性以及重试流程稳定性</p></li><li><p>都使用了命令设计模式，通过委托重试对象完成相应的逻辑操作，同时内部封装实现重试逻辑</p></li><li><p><code>Spring-Retry</code>和<code>Guava-Retryer</code>工具都是线程安全的重试，能够支持并发业务场景的重试逻辑正确性</p></li></ul><h2 id="3、硬编码重试">3、硬编码重试</h2><p>本文会详细介绍<code>Spring-Retryr</code>和<code>Guava-Retry</code>两个重试组件，再次之前先看一下硬编码重试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldRetry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        callTry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callTry</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 最大调用次数</span></span><br><span class="line">        <span class="keyword">int</span> maxCount = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> retryCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(retryCount&gt;maxCount-<span class="number">1</span>)&#123;</span><br><span class="line">                log.info(<span class="string">"第&#123;&#125;次调用，重试次数达到上限，抛出异常，当前retryCount:&#123;&#125;"</span>,i,retryCount);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"重试次数达到上限"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// 模拟调用超时</span></span><br><span class="line">                queryOrder();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                retryCount++;</span><br><span class="line">                log.error(<span class="string">"第&#123;&#125;次调用出现异常，准备重试，当前retryCount:&#123;&#125;"</span>,i,retryCount);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">"接口调用超时"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>二、重试框架之Spring-Retry</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p>参考地址：<a href="https://github.com/spring-projects/spring-retry" target="_blank" rel="noopener" title="https://github.com/spring-projects/spring-retry">https://github.com/spring-projects/spring-retry</a></p></blockquote><p>Spring Retry 为 Spring 应用程序提供了声明性重试支持。它用于Spring批处理、Spring集成、Apache Hadoop(等等)。它主要是针对可能抛出异常的一些调用操作，进行有策略的重试</p><p>环境搭建首先进行<code>pom.xml</code>进入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、Spring-Retry的普通使用方式">2、Spring-Retry的普通使用方式</h2><h3 id="2-1-Demo搭建">2.1 Demo搭建</h3><p>准备一个任务方法，我这里是采用一个随机整数，根据不同的条件返回不同的值，或者抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryDemoTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">retryTask</span><span class="params">(String param)</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">"收到请求参数:&#123;&#125;"</span>,param);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = RandomUtils.nextInt(<span class="number">0</span>,<span class="number">11</span>);</span><br><span class="line">        log.info(<span class="string">"随机生成的数:&#123;&#125;"</span>,i);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"为0,抛出参数异常."</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数异常"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i  == <span class="number">1</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"为1,返回true."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"为2,返回false."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//为其他</span></span><br><span class="line">            log.info(<span class="string">"大于2,抛出自定义异常."</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemoteAccessException(<span class="string">"大于2,抛出远程访问异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务重试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRetryTemplateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试间隔时间ms,默认1000ms</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> fixedPeriodTime = <span class="number">1000L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大重试次数,默认为3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxRetryTimes = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示哪些异常需要重试,key表示异常的字节码,value为true表示需要重试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class&lt;? extends Throwable&gt;, Boolean&gt; exceptionMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        exceptionMap.put(RemoteAccessException<span class="class">.<span class="keyword">class</span>,<span class="title">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建重试模板实例</span></span><br><span class="line">        RetryTemplate retryTemplate = <span class="keyword">new</span> RetryTemplate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置重试回退操作策略，主要设置重试间隔时间</span></span><br><span class="line">        FixedBackOffPolicy backOffPolicy = <span class="keyword">new</span> FixedBackOffPolicy();</span><br><span class="line">        backOffPolicy.setBackOffPeriod(fixedPeriodTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置重试策略，主要设置重试次数</span></span><br><span class="line">        SimpleRetryPolicy retryPolicy = <span class="keyword">new</span> SimpleRetryPolicy(maxRetryTimes, exceptionMap);</span><br><span class="line"></span><br><span class="line">        retryTemplate.setRetryPolicy(retryPolicy);</span><br><span class="line">        retryTemplate.setBackOffPolicy(backOffPolicy);</span><br><span class="line"></span><br><span class="line">        Boolean execute = retryTemplate.execute(</span><br><span class="line">                <span class="comment">//RetryCallback 重试方法</span></span><br><span class="line">                retryContext -&gt; &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> b = RetryDemoTask.retryTask(<span class="string">"abc"</span>);</span><br><span class="line">                    log.info(<span class="string">"调用的结果:&#123;&#125;"</span>, b);</span><br><span class="line">                    <span class="keyword">return</span> b;</span><br><span class="line">                &#125;,</span><br><span class="line">                retryContext -&gt; &#123;</span><br><span class="line">                    <span class="comment">//RecoveryCallback 达到最大值的方法</span></span><br><span class="line">                    log.info(<span class="string">"已达到最大重试次数或抛出了不重试的异常~~~"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"执行结果:&#123;&#125;"</span>,execute);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>RetryTemplate</code> 承担了重试执行者的角色，它可以设置<code>SimpleRetryPolicy</code>(重试策略，设置重试上限，重试的根源实体)，<code>FixedBackOffPolicy</code>（固定的回退策略，设置执行重试回退的时间间隔）。</p></li><li><p><code>RetryTemplate</code>通过<code>execute</code>提交执行操作，需要准备<code>RetryCallback</code> 和<code>RecoveryCallback</code> 两个类实例，前者对应的就是重试回调逻辑实例，包装正常的功能操作，<code>RecoveryCallback</code>实现的是整个执行操作结束的恢复操作实例</p></li><li><p>只有在调用的时候抛出了异常，并且异常是在<code>exceptionMap</code>中配置的异常，才会执行重试操作，否则就调用到<code>excute</code>方法的第二个执行方法<code>RecoveryCallback</code>中</p></li></ul><h3 id="2-2-重试策略">2.2 重试策略</h3><ul><li><p><strong>NeverRetryPolicy：</strong> 只允许调用<code>RetryCallback</code>一次，不允许重试</p></li><li><p><strong>AlwaysRetryPolicy：</strong> 允许无限重试，直到成功，此方式逻辑不当会导致死循环</p></li><li><p><strong>SimpleRetryPolicy：</strong> 固定次数重试策略，默认重试最大次数为3次，<code>RetryTemplate</code>默认使用的策略</p></li><li><p><strong>TimeoutRetryPolicy：</strong> 超时时间重试策略，默认超时时间为1秒，在指定的超时时间内允许重试</p></li><li><p><strong>ExceptionClassifierRetryPolicy：</strong> 设置不同异常的重试策略，类似组合重试策略，区别在于这里只区分不同异常的重试</p></li><li><p><strong>CircuitBreakerRetryPolicy：</strong> 有熔断功能的重试策略，需设置3个参数<code>openTimeout</code>、<code>resetTimeout</code>和<code>delegate</code></p></li><li><p><strong>CompositeRetryPolicy：</strong> 组合重试策略，有两种组合方式，乐观组合重试策略是指只要有一个策略允许即可以重试，悲观组合重试策略是指只要有一个策略不允许即可以重试，但不管哪种组合方式，组合中的每一个策略都会执行</p></li></ul><h3 id="2-3-重试回退策略">2.3 重试回退策略</h3><p>重试回退策略，指的是每次重试是立即重试还是等待一段时间后重试。<strong>默认情况下是立即重试</strong>，如果需要配置等待一段时间后重试则需要指定回退策略<code>BackoffRetryPolicy</code>。</p><ul><li><p><strong>NoBackOffPolicy：</strong> 无退避算法策略，每次重试时立即重试</p></li><li><p><strong>FixedBackOffPolicy：</strong> 固定时间的退避策略，需设置参数<code>sleeper</code>和<code>backOffPeriod</code>，<code>sleeper</code>指定等待策略，默认是<code>Thread.sleep</code>，即线程休眠，<code>backOffPeriod</code>指定休眠时间，默认1秒</p></li><li><p><strong>UniformRandomBackOffPolicy：</strong> 随机时间退避策略，需设置<code>sleeper</code>、<code>minBackOffPeriod</code>和<code>maxBackOffPeriod</code>，该策略在<code>minBackOffPeriod</code>,<code>maxBackOffPeriod</code>之间取一个随机休眠时间，<code>minBackOffPeriod</code>默认500毫秒，<code>maxBackOffPeriod</code>默认1500毫秒</p></li><li><p><strong>ExponentialBackOffPolicy：</strong> 指数退避策略，需设置参数<code>sleeper</code>、<code>initialInterval</code>、<code>maxInterval</code>和<code>multiplie</code>r，<code>initialInterval</code>指定初始休眠时间，默认100毫秒，<code>maxInterval</code>指定最大休眠时间，默认30秒，<code>multiplier</code>指定乘数，即下一次休眠时间为<code>当前休眠时间*multiplier</code></p></li><li><p><strong>ExponentialRandomBackOffPolicy：</strong> 随机指数退避策略，引入随机乘数可以实现随机乘数回退</p></li></ul><p>我们可以根据自己的应用场景和需求，使用不同的策略，不过一般使用默认的就足够了。</p><h3 id="2-4-其他扩展">2.4 其他扩展</h3><p>配置重试策略和退避策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRetryConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"retryTemplateFixed"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryTemplate <span class="title">retryTemplateFixed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.重试策略</span></span><br><span class="line">        <span class="comment">// 触发条件</span></span><br><span class="line">        Map&lt;Class&lt;? extends Throwable&gt;, Boolean&gt; exceptionMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        exceptionMap.put(RemoteAccessException<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重试次数设置为3次</span></span><br><span class="line">        <span class="keyword">int</span> maxAttempts = <span class="number">3</span>;</span><br><span class="line">        SimpleRetryPolicy retryPolicy = <span class="keyword">new</span> SimpleRetryPolicy(maxAttempts, exceptionMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.重试间隔设置为1秒</span></span><br><span class="line">        FixedBackOffPolicy backOffPolicy = <span class="keyword">new</span> FixedBackOffPolicy();</span><br><span class="line">        backOffPolicy.setBackOffPeriod(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.构造RetryTemplate</span></span><br><span class="line">        RetryTemplate retryTemplate = <span class="keyword">new</span> RetryTemplate();</span><br><span class="line">        retryTemplate.setRetryPolicy(retryPolicy);</span><br><span class="line">        retryTemplate.setBackOffPolicy(backOffPolicy);</span><br><span class="line">        <span class="keyword">return</span> retryTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"retryTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryTemplate <span class="title">retryTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义简易重试策略，最大重试次数为3次,重试间隔为3s</span></span><br><span class="line">        <span class="keyword">return</span> RetryTemplate.builder()</span><br><span class="line">                .maxAttempts(<span class="number">3</span>)</span><br><span class="line">                .fixedBackoff(<span class="number">3000</span>)</span><br><span class="line">                .retryOn(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">build</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spring retry支持的重试策略和退避策略</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"retryTemplateDemo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryTemplate <span class="title">retryTemplateDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.重试策略</span></span><br><span class="line">        <span class="comment">// 不重试</span></span><br><span class="line">        NeverRetryPolicy neverRetryPolicy = <span class="keyword">new</span> NeverRetryPolicy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无限重试</span></span><br><span class="line">        AlwaysRetryPolicy alwaysRetryPolicy = <span class="keyword">new</span> AlwaysRetryPolicy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置不同异常的重试策略，类似组合重试策略，区别在于这里只区分不同异常的重试</span></span><br><span class="line">        ExceptionClassifierRetryPolicy exceptionClassifierRetryPolicy = <span class="keyword">new</span> ExceptionClassifierRetryPolicy();</span><br><span class="line">        <span class="keyword">final</span> Map&lt;Class&lt;? extends Throwable&gt;, RetryPolicy&gt; policyMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        policyMap.put(IOException<span class="class">.<span class="keyword">class</span>, <span class="title">alwaysRetryPolicy</span>)</span>;</span><br><span class="line">        policyMap.put(InterruptedIOException<span class="class">.<span class="keyword">class</span>, <span class="title">neverRetryPolicy</span>)</span>;</span><br><span class="line">        policyMap.put(UnknownHostException<span class="class">.<span class="keyword">class</span>, <span class="title">neverRetryPolicy</span>)</span>;</span><br><span class="line">        exceptionClassifierRetryPolicy.setPolicyMap(policyMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 固定次数重试，默认最大重试次数为5次，RetryTemplate默认重试策略</span></span><br><span class="line">        SimpleRetryPolicy simpleRetryPolicy = <span class="keyword">new</span> SimpleRetryPolicy();</span><br><span class="line">        simpleRetryPolicy.setMaxAttempts(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超时时间重试，默认超时时间为1秒，在指定的超时时间内重试</span></span><br><span class="line">        TimeoutRetryPolicy timeoutRetryPolicy = <span class="keyword">new</span> TimeoutRetryPolicy();</span><br><span class="line">        timeoutRetryPolicy.setTimeout(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 组合重试策略，有两种组合方式：</span></span><br><span class="line"><span class="comment">         *  1.悲观默认重试，有不重试的策略则不重试。</span></span><br><span class="line"><span class="comment">         *  2.乐观默认不重试，有需要重试的策略则重试。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CompositeRetryPolicy compositeRetryPolicy = <span class="keyword">new</span> CompositeRetryPolicy();</span><br><span class="line">        compositeRetryPolicy.setOptimistic(<span class="keyword">true</span>);</span><br><span class="line">        compositeRetryPolicy.setPolicies(<span class="keyword">new</span> RetryPolicy[]&#123;simpleRetryPolicy, timeoutRetryPolicy&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有熔断功能的重试</span></span><br><span class="line">        CircuitBreakerRetryPolicy circuitBreakerRetryPolicy = <span class="keyword">new</span> CircuitBreakerRetryPolicy(compositeRetryPolicy);</span><br><span class="line">        <span class="comment">// 5s内失败10次，则开启熔断</span></span><br><span class="line">        circuitBreakerRetryPolicy.setOpenTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 10s之后熔断恢复</span></span><br><span class="line">        circuitBreakerRetryPolicy.setResetTimeout(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.退避策略（上一次执行失败之后，间隔多久进行下一次重试）</span></span><br><span class="line">        <span class="comment">// 立即重试</span></span><br><span class="line">        NoBackOffPolicy noBackOffPolicy = <span class="keyword">new</span> NoBackOffPolicy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 固定时间后重试，默认1s</span></span><br><span class="line">        FixedBackOffPolicy fixedBackOffPolicy = <span class="keyword">new</span> FixedBackOffPolicy();</span><br><span class="line">        fixedBackOffPolicy.setBackOffPeriod(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机时间后重试（如下：从500ms到1500ms内取一个随机时间后进行重试）</span></span><br><span class="line">        UniformRandomBackOffPolicy uniformRandomBackOffPolicy = <span class="keyword">new</span> UniformRandomBackOffPolicy();</span><br><span class="line">        uniformRandomBackOffPolicy.setMinBackOffPeriod(<span class="number">500</span>);</span><br><span class="line">        uniformRandomBackOffPolicy.setMaxBackOffPeriod(<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指数退避策略（如下：初始休眠时间100ms，最大休眠时间30s，下一次休眠时间为当前休眠时间*2）</span></span><br><span class="line">        ExponentialBackOffPolicy exponentialBackOffPolicy = <span class="keyword">new</span> ExponentialBackOffPolicy();</span><br><span class="line">        exponentialBackOffPolicy.setInitialInterval(<span class="number">100</span>);</span><br><span class="line">        exponentialBackOffPolicy.setMaxInterval(<span class="number">30000</span>);</span><br><span class="line">        exponentialBackOffPolicy.setMultiplier(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机指数退避策略</span></span><br><span class="line">        ExponentialRandomBackOffPolicy exponentialRandomBackOffPolicy = <span class="keyword">new</span> ExponentialRandomBackOffPolicy();</span><br><span class="line">        exponentialRandomBackOffPolicy.setInitialInterval(<span class="number">100</span>);</span><br><span class="line">        exponentialRandomBackOffPolicy.setMaxInterval(<span class="number">30000</span>);</span><br><span class="line">        exponentialRandomBackOffPolicy.setMultiplier(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.return</span></span><br><span class="line">        RetryTemplate retryTemplate = <span class="keyword">new</span> RetryTemplate();</span><br><span class="line">        retryTemplate.setRetryPolicy(circuitBreakerRetryPolicy);</span><br><span class="line">        <span class="keyword">return</span> retryTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入RetryTemplate</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RetryTemplate retryTemplateFixed;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        Boolean execute = retryTemplateFixed.execute(</span><br><span class="line">                <span class="comment">// 重试回调</span></span><br><span class="line">                retryContext -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">                    <span class="keyword">boolean</span> b = RetryTask.retryTask(<span class="string">"abc"</span>);</span><br><span class="line">                    log.info(<span class="string">"调用的结果:&#123;&#125;"</span>, b);</span><br><span class="line">                    <span class="keyword">return</span> b;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 恢复回调（达到最大重试次数，或者抛出不满足重试条件的异常）</span></span><br><span class="line">                retryContext -&gt; &#123;</span><br><span class="line">                    log.info(<span class="string">"已达到最大重试次数或抛出了不重试的异常~~~"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"执行结果:&#123;&#125;"</span>,execute);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Spring-Retry注解式-推荐">3、Spring-Retry注解式(推荐)</h2><h3 id="3-1-注解介绍">3.1 注解介绍</h3><p>下面注解方法为常用方法，具体可以自己探索</p><p><strong>@EnableRetry</strong></p><p>表示是否开始重试组件</p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>proxyTargetClass</td><td>boolean</td><td>false</td><td>指示是否要创建基于子类的(CGLIB)代理，而不是创建标准的基于Java接口的代理</td></tr></tbody></table><p><strong>@Retryable</strong></p><p>标注此注解的方法在发送异常时会进行重试</p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>interceptor</td><td>String</td><td>“”</td><td>将interceptor的bean名称应用到retryable()，和其他的属性互斥</td></tr><tr><td>include</td><td>Class[]</td><td>{}</td><td>哪些异常可以触发重试 ，默认为空</td></tr><tr><td>exclude</td><td>Class[]</td><td>{}</td><td>哪些异常将不会触发重试，默认为空，如果和include属性同时为空，则所有的异常都将会触发重试</td></tr><tr><td>value</td><td>Class[]</td><td>{}</td><td>可重试的异常类型</td></tr><tr><td>label</td><td>String</td><td>“”</td><td>统计报告的唯—标签。如果没有提供，调用者可以选择忽略它，或者提供默认值</td></tr><tr><td>maxAttempts</td><td>int</td><td>3</td><td>尝试的最大次数(包括第一次失败)，默认为3次</td></tr><tr><td>backoff</td><td>@Backoff</td><td>@Backoff()</td><td>@Backoff @Backoff()指定用于重试此操作的backoff属性。默认为空</td></tr></tbody></table><p><strong>@Backoff</strong></p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>delay</td><td>long</td><td>0</td><td>如果不设置则默认使用1000 ms等待重试，和value同义词</td></tr><tr><td>maxDelay</td><td>long</td><td>0</td><td>最大重试等待时间</td></tr><tr><td>multiplier</td><td>long</td><td>0</td><td>用于计算下一个延迟延迟的乘数(大于0生效)</td></tr><tr><td>random</td><td>boolean</td><td>false</td><td>随机重试等待时间</td></tr></tbody></table><h3 id="3-2-注解式实战">3.2 注解式实战</h3><p>因为注解需要用到切面，所以需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置注解式重试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRetryDemo</span>   </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试所调用方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Retryable</span>(value = &#123;RemoteAccessException<span class="class">.<span class="keyword">class</span>&#125;,<span class="title">maxAttempts</span> </span>= <span class="number">3</span>,backoff = <span class="meta">@Backoff</span>(delay = <span class="number">2000L</span>,multiplier = <span class="number">2</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">call</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RetryDemoTask.retryTask(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 达到最大重试次数,或抛出了一个没有指定进行重试的异常</span></span><br><span class="line"><span class="comment">     * recover 机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">recover</span><span class="params">(Exception e,String param)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"达到最大重试次数,或抛出了一个没有指定进行重试的异常:"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 达到最大重试次数,或抛出了一个没有指定进行重试的异常</span></span><br><span class="line"><span class="comment">     * recover 机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">recover</span><span class="params">(Exception e,String param)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"达到最大重试次数,或抛出了一个没有指定进行重试的异常:"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以自定义异常的兜底方案，注意返回方法要对，否则会失效，会优先匹配子类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">recover1</span><span class="params">(RuntimeException npe, String param)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">"达到最大重试次数,或抛出了一个空指针异常:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，发现可以成功重试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetryApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> SpringRetryDemo springRetryDemo;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> abc = springRetryDemo.call(<span class="string">"abc"</span>);</span><br><span class="line">    log.info(<span class="string">"--结果是:&#123;&#125;--"</span>,abc);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、监听重试过程">4、监听重试过程</h2><h3 id="4-1-简介">4.1 简介</h3><ul><li><p>通过<strong>实现RetryListener接口</strong>，重写<code>open、close、onError</code>这三个方法，既可以完成对重试过程的追踪，也可以添加额外的处理逻辑；</p></li><li><p>通过<strong>继承RetryListenerSupport</strong>，也可以从<code>open、close、onError</code>这三个方法中，选择性的重写</p></li></ul><p>普通方式使用时(注解方式不需要)，在实例化RetryTemplate时，配置上该RetryListener实例即可：<code>retryTemplate.setListeners(new RetryListener[] {retryListenerTemplate});</code>另外每个RetryTemplate可以注册多个监听器，其中onOpen、onClose方法按照注册顺序执行，onError按照注册顺序的相反顺序执行</p><h3 id="4-2-实现RetryListener接口">4.2 实现<strong>RetryListener接口</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryListenerTemplate</span> <span class="keyword">implements</span> <span class="title">RetryListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 进入重试前调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">open</span><span class="params">(RetryContext retryContext, RetryCallback&lt;T, E&gt; retryCallback)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------进入重试方法(实现)--------------------------"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重试结束后调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(RetryContext retryContext, RetryCallback&lt;T, E&gt; retryCallback, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------重试方法结束(实现)--------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 捕获到异常时调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(RetryContext retryContext, RetryCallback&lt;T, E&gt; retryCallback, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------第"</span> + retryContext.getRetryCount() + <span class="string">"次重试(实现)--------------------------"</span>);</span><br><span class="line">        log.error(throwable.getMessage(), throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-继承RetryListenerSupport">4.3 <strong>继承RetryListenerSupport</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryListenerTemplate</span> <span class="keyword">extends</span> <span class="title">RetryListenerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">open</span><span class="params">(RetryContext context, RetryCallback&lt;T, E&gt; callback)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------进入重试方法(继承)--------------------------"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.open(context, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(RetryContext context, RetryCallback&lt;T, E&gt; callback, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------重试方法结束(继承)--------------------------"</span>);</span><br><span class="line">        <span class="keyword">super</span>.close(context, callback, throwable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, E extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(RetryContext context, RetryCallback&lt;T, E&gt; callback, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------------------第"</span> + context.getRetryCount() + <span class="string">"次重试(继承)--------------------------"</span>);</span><br><span class="line">        log.error(throwable.getMessage(), throwable);</span><br><span class="line">        <span class="keyword">super</span>.onError(context, callback, throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、重试框架之Guava-Retrying</h1><h2 id="1、介绍-v2">1、介绍</h2><blockquote><p>源码地址：<a href="https://github.com/rholder/guava-retrying" target="_blank" rel="noopener" title="https://github.com/rholder/guava-retrying">https://github.com/rholder/guava-retrying</a></p></blockquote><p><strong>Guava retryer工具</strong>与spring-retry类似，都是通过定义重试者角色来包装正常逻辑重试，但是Guava retryer有更优的策略定义，在支持重试次数和重试频度控制基础上，能够兼容<strong>支持多个异常或者自定义实体对象的重试源定义</strong>，让重试功能有更多的灵活性。</p><p>Guava Retryer也是线程安全的，入口调用逻辑采用的是<code>Java.util.concurrent.Callable</code>的call方法</p><p>首先需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.rholder<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava-retrying<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、Guava-Retrying普通使用方式-官方">2、Guava-Retrying普通使用方式(官方)</h2><h3 id="2-1-Demo实战">2.1 Demo实战</h3><p>首先创建一个服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryDemoTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">retryTask</span><span class="params">(String param)</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">"收到请求参数:&#123;&#125;"</span>,param);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = RandomUtils.nextInt(<span class="number">0</span>,<span class="number">11</span>);</span><br><span class="line">        log.info(<span class="string">"随机生成的数:&#123;&#125;"</span>,i);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"小于2,抛出参数异常."</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"参数异常"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i  &lt; <span class="number">5</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"小于5,返回true."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">7</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"小于7,返回false."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//为其他</span></span><br><span class="line">            log.info(<span class="string">"大于等于7,抛出自定义异常."</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemoteAccessException(<span class="string">"大于等于7,抛出自定义异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaRetryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// RetryerBuilder 构建重试实例 retryer,可以设置重试源且可以支持多个重试源，可以配置重试次数或重试超时时间，以及可以配置等待时间间隔</span></span><br><span class="line">        Retryer&lt;Boolean&gt; retryer = RetryerBuilder.&lt;Boolean&gt; newBuilder()</span><br><span class="line">                .retryIfExceptionOfType(RemoteAccessException<span class="class">.<span class="keyword">class</span>)//设置异常重试源</span></span><br><span class="line"><span class="class">                .<span class="title">retryIfResult</span>(<span class="title">res</span>-&gt; <span class="title">res</span></span>==<span class="keyword">false</span>)  <span class="comment">//设置根据结果重试</span></span><br><span class="line">                .withWaitStrategy(WaitStrategies.fixedWait(<span class="number">3</span>, TimeUnit.SECONDS)) <span class="comment">//设置等待间隔时间</span></span><br><span class="line">                .withStopStrategy(StopStrategies.stopAfterAttempt(<span class="number">3</span>)) <span class="comment">//设置最大重试次数</span></span><br><span class="line">                .withRetryListener(<span class="keyword">new</span> RetryListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> &lt;V&gt; <span class="function"><span class="keyword">void</span> <span class="title">onRetry</span><span class="params">(Attempt&lt;V&gt; attempt)</span> </span>&#123;</span><br><span class="line">                        log.info(<span class="string">"第【&#123;&#125;】次重试调用"</span>,attempt.getAttemptNumber());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .withBlockStrategy(l -&gt; &#123;</span><br><span class="line">                    log.info(<span class="string">"重试阻塞时间：&#123;&#125;"</span>,l);</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            retryer.call(() -&gt; RetryDemoTask.retryTask(<span class="string">"abc"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-重试机制">2.2 重试机制</h3><p>RetryerBuilder的<strong>retryIfXXX()<strong>方法用来设置</strong>在什么情况下进行重</strong>试，总体上可以分为<strong>根据执行异常进行重试</strong>和<strong>根据方法执行结果进行重试</strong>两类。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>retryIfException()</td><td>抛出 runtime 异常、checked 异常时都会重试，但是抛出 error 不会重试</td></tr><tr><td>retryIfRuntimeException()</td><td>会在抛 runtime 异常的时候才重试，checked 异常和error 都不重试</td></tr><tr><td>retryIfException(Predicate exceptionPredicate)</td><td>这里当发生异常时，会将异常传递给exceptionPredicate，那我们就可以通过传入的异常进行更加自定义的方式来决定什么时候进行重试</td></tr><tr><td>retryIfExceptionOfType(Class&lt;? extends Throwable&gt; exceptionClass)</td><td>许我们只在发生特定异常的时候才重试，比如NullPointerException 和 IllegalStateException 都属于 runtime 异常，也包括自定义的error</td></tr><tr><td>retryIfResult(@Nonnull Predicate resultPredicate)</td><td>传入的resultPredicate返回true时则进行重试</td></tr></tbody></table><h3 id="2-3-停止重试相关策略">2.3 停止重试相关策略</h3><p><strong>StopStrategy</strong></p><blockquote><p>停止重试策略用来决定什么时候不进行重试，其接口com.github.rholder.retry.StopStrategy，停止重试策略的实现类均在com.github.rholder.retry.StopStrategies中，它是一个策略工厂类</p></blockquote><ul><li><p> NeverStopStrategy：此策略将永远重试，永不停止</p></li><li><p>StopAfterAttemptStrategy：当执行次数到达指定次数之后停止重试</p></li><li><p>StopAfterDelayStrategy：当距离方法的第一次执行超出了指定的delay时间时停止，也就是说一直进行重试，当进行下一次重试的时候会判断从第一次执行到现在的所消耗的时间是否超过了这里指定的delay时间，查看其实现</p></li></ul><p><strong>WaitStrategy</strong></p><ul><li><p>IncrementingWaitStrategy：在决定任务间隔时间时，返回的是一个递增的间隔时间，即每次任务重试间隔时间逐步递增，越来越长</p></li><li><p>RandomWaitStrategy：返回一个随机的间隔时长，我们需要传入的就是一个最小间隔和最大间隔，然后随机返回介于两者之间的一个间隔时长</p></li><li><p>FixedWaitStrategy：返回一个固定时长的重试间隔</p></li><li><p>ExceptionWaitStrategy：由方法执行异常来决定是否重试任务之间进行间隔等待，以及间隔多久</p></li><li><p>FibonacciWaitStrategy：与IncrementingWaitStrategy有点相似，间隔时间都是随着重试次数的增加而递增的，不同的是，FibonacciWaitStrategy是按照斐波那契数列来进行计算的，使用这个策略时，我们需要传入一个乘数因子和最大间隔时长</p></li><li><p>ExponentialWaitStrategy：与IncrementingWaitStrategy、FibonacciWaitStrategy也类似，间隔时间都是随着重试次数的增加而递增的，但是该策略的递增是呈指数级递增</p></li><li><p>WaitStrategy：随机时间间隔以及不等待</p></li></ul><p><strong>RetryListener</strong></p><blockquote><p>当发生重试时，将会调用RetryListener的onRetry方法，此时我们可以进行比如记录日志等额外操作</p></blockquote><h2 id="3、Guava-Retrying注解式-非官方">3、Guava-Retrying注解式(非官方)</h2><p>因为注解需要用到切面，所以需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retry &#123;</span><br><span class="line">    <span class="comment">//指定异常时重试  由于pjp.proceed();需要try catch 异常，会有问题暂时没找到解决方法，先注释</span></span><br><span class="line">    Class[] exceptionClass() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出现Exception时重试</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">retryIfException</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//程序出现RuntimeException异常时重试</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">retryIfRuntimeException</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重试次数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">attemptNumber</span><span class="params">()</span> <span class="keyword">default</span> 3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重试间隔 ms</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">waitStrategySleepTime</span><span class="params">()</span> <span class="keyword">default</span> 1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持续时间; 期间</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">duration</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值为指定字符串时重试</span></span><br><span class="line">    <span class="function">String <span class="title">returnResult</span><span class="params">()</span> <span class="keyword">default</span> "willRetryString"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值为false时重试（默认关闭）  不支持同时设置指定返回字符串重试</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">closeReturnFalseRetry</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建AOP切面方法增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.retry.guavaRetrying.Retry)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodCallConstraintPointcut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"@annotation(com.example.retry.guavaRetrying.Retry)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">monitorAround</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        log.info(<span class="string">"进入重试切面"</span>);</span><br><span class="line">        Method method = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//判断注解是否method 上</span></span><br><span class="line">        <span class="keyword">if</span> (point.getSignature() <span class="keyword">instanceof</span> MethodSignature) &#123;</span><br><span class="line">            MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">            method = signature.getMethod();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Retry annotation = method.getDeclaredAnnotation(Retry<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//重试时间，重试次数</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.duration() &lt;= <span class="number">0</span> &amp;&amp; annotation.attemptNumber() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> point.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不能设置开启returnFalse重试 和指定返回值重试</span></span><br><span class="line">        <span class="keyword">if</span>(!annotation.closeReturnFalseRetry() &amp;&amp; !<span class="string">"willRertyString"</span>.equals(annotation.returnResult()))&#123;</span><br><span class="line">            <span class="keyword">return</span> point.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建builder</span></span><br><span class="line">        RetryerBuilder builder = RetryerBuilder.newBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重试次数</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.attemptNumber() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            builder.withStopStrategy(StopStrategies.stopAfterAttempt(annotation.attemptNumber()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出策略</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.duration() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            builder.withStopStrategy(StopStrategies.stopAfterDelay(annotation.duration(), TimeUnit.MILLISECONDS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重试间隔等待策略</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.waitStrategySleepTime() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            builder.withWaitStrategy(WaitStrategies.fixedWait(annotation.waitStrategySleepTime(), TimeUnit.MILLISECONDS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//停止重试的策略</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.exceptionClass().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; retryThrowable : annotation.exceptionClass()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (retryThrowable != <span class="keyword">null</span> &amp;&amp; Throwable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">retryThrowable</span>)) </span>&#123;</span><br><span class="line">                    builder.retryIfExceptionOfType(retryThrowable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//RuntimeException时重试</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.retryIfRuntimeException())&#123;</span><br><span class="line">            builder.retryIfRuntimeException();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (annotation.retryIfException())&#123;</span><br><span class="line">            builder.retryIfException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"willRertyString"</span>.equals(annotation.returnResult()))&#123;</span><br><span class="line">            builder.retryIfResult(s -&gt; Objects.equals(s, annotation.returnResult()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!annotation.closeReturnFalseRetry())&#123;</span><br><span class="line">            builder.retryIfResult(aBoolean -&gt; Objects.equals(aBoolean, annotation.closeReturnFalseRetry()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method finalMethod = method;</span><br><span class="line">        <span class="keyword">return</span> builder.build().call(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">"执行切面 "</span>+   finalMethod.getName());</span><br><span class="line">                <span class="keyword">return</span> point.proceed();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (Exception) throwable;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(throwable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retry</span>(retryIfException = <span class="keyword">true</span>, waitStrategySleepTime = <span class="number">1200</span>,attemptNumber = <span class="number">5</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 格式化时间</span></span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">            <span class="comment">// a为am/pm的标记</span></span><br><span class="line">            sdf.applyPattern(<span class="string">"yyyy-MM-dd HH:mm:ss a"</span>);</span><br><span class="line">            <span class="comment">// 获取当前时间</span></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            <span class="comment">// 输出已经格式化的现在时间（24小时制）</span></span><br><span class="line">            log.info(<span class="string">"现在时间："</span> + sdf.format(date));</span><br><span class="line">            <span class="keyword">int</span> a=<span class="number">1</span>/x;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"发生异常错误，错误原因："</span>,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"发生异常错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaRetryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AopTest aopTest;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            aopTest.test();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"测试错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>四、源码简析</h1><h2 id="1、Spring-Retry源码简析">1、Spring-Retry源码简析</h2><blockquote><p>参考文章：<a href="https://mp.weixin.qq.com/s/VA6KScOzSkGfZ65jUbVR6w" target="_blank" rel="noopener" title="https://mp.weixin.qq.com/s/VA6KScOzSkGfZ65jUbVR6w">https://mp.weixin.qq.com/s/VA6KScOzSkGfZ65jUbVR6w</a></p></blockquote><h2 id="2、Guava-Retrying源码简析">2、Guava-Retrying源码简析</h2><p>实现原理大概就是由上述各种策略配合从而达到了非常灵活的重试机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Attempt</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the result of the attempt, if any.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of the attempt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ExecutionException if an exception was thrown by the attempt. The thrown</span></span><br><span class="line"><span class="comment">     *                            exception is set as the cause of the ExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tells if the call returned a result or not</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the call returned a result, &lt;code&gt;false&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     *         if it threw an exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasResult</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tells if the call threw an exception or not</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the call threw an exception, &lt;code&gt;false&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     *         if it returned a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasException</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the result of the call</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the call didn't return a result, but threw an exception,</span></span><br><span class="line"><span class="comment">     *                               as indicated by &#123;<span class="doctag">@link</span> #hasResult()&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getResult</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the exception thrown by the call</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the exception thrown by the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the call didn't throw an exception,</span></span><br><span class="line"><span class="comment">     *                               as indicated by &#123;<span class="doctag">@link</span> #hasException()&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Throwable <span class="title">getExceptionCause</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number, starting from 1, of this attempt.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the attempt number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getAttemptNumber</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The delay since the start of the first attempt, in milliseconds.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the delay since the start of the first attempt, in milliseconds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelaySinceFirstAttempt</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过接口方法可以知道Attempt这个类包含了任务执行次数、任务执行异常、任务执行结果、以及首次执行任务至今的时间间隔，那么我们后续的不管重试时机、还是其他策略都是根据此值来决定。接下来看关键执行入口<code>Retryer##call</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">call</span><span class="params">(Callable&lt;V&gt; callable)</span> <span class="keyword">throws</span> ExecutionException, RetryException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行次数从1开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> attemptNumber = <span class="number">1</span>; ; attemptNumber++) &#123;</span><br><span class="line">        Attempt&lt;V&gt; attempt;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试执行</span></span><br><span class="line">            V result = attemptTimeLimiter.call(callable);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行成功则将结果封装为ResultAttempt</span></span><br><span class="line">            attempt = <span class="keyword">new</span> Retryer.ResultAttempt&lt;V&gt;(result, attemptNumber, TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// 执行异常则将结果封装为ExceptionAttempt</span></span><br><span class="line">            attempt = <span class="keyword">new</span> Retryer.ExceptionAttempt&lt;V&gt;(t, attemptNumber, TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里将执行结果传给RetryListener做一些额外事情</span></span><br><span class="line">        <span class="keyword">for</span> (RetryListener listener : listeners) &#123;</span><br><span class="line">            listener.onRetry(attempt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这个就是决定是否要进行重试的地方，如果不进行重试直接返回结果，执行成功就返回结果，执行失败就返回异常</span></span><br><span class="line">        <span class="keyword">if</span> (!rejectionPredicate.apply(attempt)) &#123;</span><br><span class="line">            <span class="keyword">return</span> attempt.get();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 到这里，说明需要进行重试，则此时先决定是否到达了停止重试的时机，如果到达了则直接返回异常</span></span><br><span class="line">        <span class="keyword">if</span> (stopStrategy.shouldStop(attempt)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RetryException(attemptNumber, attempt);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 决定重试时间间隔</span></span><br><span class="line">            <span class="keyword">long</span> sleepTime = waitStrategy.computeSleepTime(attempt);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 进行阻塞</span></span><br><span class="line">                blockStrategy.block(sleepTime);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RetryException(attemptNumber, attempt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_34850743/article/details/126820853" target="_blank" rel="noopener" title="重试组件 Spring Retry">重试组件 Spring Retry</a></p><p><a href="https://blog.csdn.net/zzzgd_666/article/details/84377962" target="_blank" rel="noopener" title="重试框架Guava-Retry和spring-Retry">重试框架Guava-Retry和spring-Retry</a></p><p><a href="https://mp.weixin.qq.com/s/VA6KScOzSkGfZ65jUbVR6w" target="_blank" rel="noopener" title="确实很优雅，所以我要扯下这个注解的神秘面纱">确实很优雅，所以我要扯下这个注解的神秘面纱</a></p><p><a href="https://blog.csdn.net/AS011x/article/details/126517681" target="_blank" rel="noopener" title="使用 Guava-Retry 优雅的实现重处理">使用 Guava-Retry 优雅的实现重处理</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;h2 id=&quot;1、重试机制&quot;&gt;1、重试机制&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;重试机制在网络服务中非常的重要，由于网路可能存在延迟，网络抖动，网络不稳定的情况。同时在分布式服务中网络的请求的高度密集，有些服务不一定能在规定的时间内完成访问。应该请求服务需要重试几次。以保证服务请求成功。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如对接支付接口时，因为回调比较重要，当访问失败时会进行重试，不过此时的重试机制时间是逐步加大，例如30s/1m/10m/1h等，最终到达阈值不在重试&lt;/p&gt;
&lt;p&gt;对于重试是有场景限制的，不是什么场景都适合重试，&lt;strong&gt;比如参数校验不合法、写操作等（要考虑写是否幂等）都不适合重试&lt;/strong&gt;。&lt;strong&gt;远程调用超时、网络突然中断可以重试&lt;/strong&gt;。在微服务治理框架中，通常都有自己的重试与超时配置，比如&lt;strong&gt;dubbo可以设置retries=1，timeout=500调用失败只重试1次，超过500ms调用仍未返回则调用失败&lt;/strong&gt;。比如外部 RPC 调用，或者数据入库等操作，&lt;strong&gt;如果一次操作失败，可以进行多次重试，提高调用成功的可能性&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Redis接口限流、分布式锁与幂等</title>
    <link href="https://www.shawn22.xyz/posts/dcc28633.html"/>
    <id>https://www.shawn22.xyz/posts/dcc28633.html</id>
    <published>2022-09-28T09:34:48.000Z</published>
    <updated>2022-09-28T09:47:35.105Z</updated>
    
    <content type="html"><![CDATA[<h1>一、概述</h1><h2 id="1、Redis概述">1、Redis概述</h2><blockquote><p>Redis参考文章：<a href="https://blog.csdn.net/lemon_TT/article/details/117711682" target="_blank" rel="noopener" title="Redis6.0学习笔记">Redis6.0学习笔记</a></p></blockquote><p>Redis 除了做缓存，还能干很多很多事情：<strong>分布式锁、限流、处理请求接口幂等性</strong>，本篇文章重点讲述SpringBoot通过注解和AOP的方式实现Redis的接口限流，Redis使用了Lua脚本实现原子操作；通过redis实现的分布式锁以及处理接口幂等等方案</p><a id="more"></a><h2 id="2、功能介绍">2、功能介绍</h2><h3 id="2-1-Redis限流">2.1 Redis限流</h3><blockquote><p>限流就是限制API访问频率，当访问频率超过某个阈值时进行拒绝访问等操作</p></blockquote><p>当然这是在代码层面进行的接口限流，现在分布式微服务接口限流基本是在网关处做接口限流/黑白名单等，例如Gateway/Nginx等，详情可以参考<a href="https://blog.csdn.net/lemon_TT/article/details/125726225" target="_blank" rel="noopener" title="Nginx高级篇">Nginx高级篇</a>和<a href="https://blog.csdn.net/lemon_TT/article/details/124675243" target="_blank" rel="noopener" title="SpringCloud Gateway 详解">SpringCloud Gateway 详解</a></p><h3 id="2-2-分布式锁">2.2 分布式锁</h3><p>为了保证一个方法在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用Java并发处理相关的API(如ReentrantLcok或synchronized)进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题</p><h3 id="2-3-接口幂等">2.3 接口幂等</h3><p>幂等性原本是数学上的概念，用在接口上就可以理解为：同一个接口，多次发出同一个请求，必须保证操作只执行一次。 调用接口发生异常并且重复尝试时，总是会造成系统所无法承受的损失，所以必须阻止这种现象的发生</p><h1>二、Redis接口限流实战</h1><h2 id="1、环境准备">1、环境准备</h2><p>首先我们创建一个 Spring Boot 工程，引入 Web 和 Redis 依赖，同时考虑到接口限流一般是通过注解来标记，而注解是通过 AOP 来解析的，所以我们还需要加上 AOP 的依赖，最终的依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后提前准备好一个** Redis 实例**，这里我们项目配置好之后，直接配置一下 Redis 的基本信息即可，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host&#x3D;localhost</span><br><span class="line">spring.redis.port&#x3D;6379</span><br><span class="line"># spring.redis.password&#x3D;123</span><br></pre></td></tr></table></figure><h2 id="2、限流注解">2、限流注解</h2><p>接下来我们创建一个限流注解，我们将<strong>限流分为两种情况</strong>：</p><ul><li><p>针对当前接口的全局性限流，例如该接口可以在 1 分钟内访问 100 次</p></li><li><p>针对某一个 IP 地址的限流，例如某个 IP 地址可以在 1 分钟内访问 100 次</p></li></ul><p>针对这两种情况，我们创建一个枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LimitType &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认策略全局限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据请求者IP进行限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来创建限流注解，第一个参数限流的 key，这个仅仅是一个前缀，将来完整的 key 是这个前缀再加上接口方法的完整路径，共同组成限流 key，这个 key 将被存入到 Redis 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RateLimiter &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> "rate_limit:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流时间,单位秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">time</span><span class="params">()</span> <span class="keyword">default</span> 60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> <span class="keyword">default</span> 100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">LimitType <span class="title">limitType</span><span class="params">()</span> <span class="keyword">default</span> LimitType.DEFAULT</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将来哪个接口需要限流，就在哪个接口上添加 <code>@RateLimiter</code> 注解，然后配置相关参数即可</p><h2 id="3、配置RedisTemplate">3、配置RedisTemplate</h2><blockquote><p>默认的 RedisTemplate 有一个小坑，就是序列化用的是 <code>JdkSerializationRedisSerializer</code>，直接用这个序列化工具将来存到 Redis 上的 key 和 value 都会莫名其妙多一些前缀，这就导致你用命令读取的时候可能会出错，此时当你在命令行操作的时候，get name 却获取不到你想要的数据，原因就是存到 redis 之后 name 前面多了一些字符，此时只能继续使用 RedisTemplate 将之读取出来</p></blockquote><p>因为Redis限流用到了Lua脚本，因此需要改写我们自己的序列化方案，使用 Spring Boot 中默认的 jackson 序列化方式来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编写自己的RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        <span class="comment">// 序列化时会自动增加类类型，否则无法反序列化</span></span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash采用String序列方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、开发-Lua-脚本">4、开发 Lua 脚本</h2><p>Redis 中的一些原子操作我们可以借助 Lua 脚本来实现，想要调用 Lua 脚本，我们有两种不同的思路</p><ul><li><p>在 Redis 服务端定义好 Lua 脚本，然后计算出来一个散列值，在 Java 代码中，通过这个散列值锁定要执行哪个 Lua 脚本</p></li><li><p><strong>直接在 Java 代码中将 Lua 脚本定义好，然后发送到 Redis 服务端去执行</strong></p></li></ul><p>Spring Data Redis 中也提供了操作 Lua 脚本的接口，还是比较方便的，所以我们这里就采用第二种方案，我们在 <strong>resources 目录下</strong>新建 lua 文件夹专门用来存放 lua 脚本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- tonumber 把字符串转为数字</span></span><br><span class="line"><span class="keyword">local</span> count = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">local</span> <span class="built_in">time</span> = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="comment">-- 执行具体的 redis 指令</span></span><br><span class="line"><span class="keyword">local</span> current = redis.call(<span class="string">'get'</span>, key)</span><br><span class="line"><span class="keyword">if</span> current <span class="keyword">and</span> <span class="built_in">tonumber</span>(current) &gt; count <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tonumber</span>(current)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">current = redis.call(<span class="string">'incr'</span>, key)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">tonumber</span>(current) == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">'expire'</span>, key, <span class="built_in">time</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">tonumber</span>(current)</span><br></pre></td></tr></table></figure><p>这个lua脚本执行流程</p><ul><li><p>首先获取到传进来的 key 以及 限流的 count 和时间 time</p></li><li><p>通过 get 获取到这个 key 对应的值，这个值就是当前时间窗内这个接口可以访问多少次</p></li><li><p>如果是第一次访问，此时拿到的结果为 nil，否则拿到的结果应该是一个数字，所以接下来就判断，如果拿到的结果是一个数字，并且这个数字还大于 count，那就说明已经超过流量限制了，那么直接返回查询的结果即可</p></li><li><p>如果拿到的结果为 nil，说明是第一次访问，此时就给当前 key 自增 1，然后设置一个过期时间</p></li><li><p>最后把自增 1 后的值返回</p></li></ul><p>最后在Spring中加载这个Lua脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultRedisScript&lt;Long&gt; <span class="title">limitScript</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        redisScript.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">"lua/limit.lua"</span>)));</span><br><span class="line">        redisScript.setResultType(Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> redisScript;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、全局类与工具类">5、全局类与工具类</h2><p>由于过载的时候是抛异常出来，所以我们还需要一个全局异常处理，其他详细可以参考<a href="https://blog.csdn.net/lemon_TT/article/details/108309900" target="_blank" rel="noopener" title="Spring Boot后端接口规范">Spring Boot后端接口规范</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalException</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ServiceException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Object</span>&gt; <span class="title">serviceException</span>(<span class="title">ServiceException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"status"</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IpUtils工具类，获取Ip或者Mac</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前网络ip</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddr</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String ipAddress = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">            ipAddress = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">            ipAddress = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">            ipAddress = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">            ipAddress = request.getRemoteAddr();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"127.0.0.1"</span>.equals(ipAddress) || <span class="string">"0:0:0:0:0:0:0:1"</span>.equals(ipAddress)) &#123;</span><br><span class="line">                <span class="comment">// 根据网卡取本机配置的IP</span></span><br><span class="line">                InetAddress inet = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inet = InetAddress.getLocalHost();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                ipAddress = inet.getHostAddress();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span></span><br><span class="line">        <span class="keyword">if</span> (ipAddress != <span class="keyword">null</span> &amp;&amp; ipAddress.length() &gt; <span class="number">15</span>) &#123; <span class="comment">// "***.***.***.***".length() = 15</span></span><br><span class="line">            <span class="keyword">if</span> (ipAddress.indexOf(<span class="string">","</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ipAddress = ipAddress.substring(<span class="number">0</span>, ipAddress.indexOf(<span class="string">","</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ipAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得MAC地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMACAddress</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        String macAddress = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(<span class="string">"nbtstat -A "</span> + ip);</span><br><span class="line">            InputStreamReader ir = <span class="keyword">new</span> InputStreamReader(p.getInputStream());</span><br><span class="line">            LineNumberReader input = <span class="keyword">new</span> LineNumberReader(ir);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                str = input.readLine();</span><br><span class="line">                <span class="keyword">if</span> (str != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (str.indexOf(<span class="string">"MAC Address"</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        macAddress = str.substring(str.indexOf(<span class="string">"MAC Address"</span>) + <span class="number">14</span>, str.length());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> macAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、注解AOP解析">6、注解AOP解析</h2><p>下面的切面就是拦截所有加了 <code>@RateLimiter</code> 注解的方法，在前置通知中对注解进行处理。</p><ul><li><p>首先获取到注解中的 key、time 以及 count 三个参数</p></li><li><p>获取一个组合的 key，所谓的组合的 key，就是在注解的 key 属性基础上，再加上方法的完整路径，如果是 IP 模式的话，就再加上 IP 地址。以 IP 模式为例，最终生成的 key 类似这样：<code>rate_limit:192.168.249.1-com.example.limiting.controller.HelloController-hello</code>（如果不是 IP 模式，那么生成的 key 中就不包含 IP 地址）</p></li><li><p>将生成的 key 放到集合中</p></li><li><p>通过<code> redisTemplate.execute</code> 方法取执行一个 Lua 脚本，第一个参数是脚本所封装的对象，第二个参数是 key，对应了脚本中的 KEYS，后面是可变长度的参数，对应了脚本中的 ARGV</p></li><li><p>将 Lua 脚本执行的结果与 count 进行比较，如果大于 count，就说明过载了，抛异常就行了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(RateLimiterAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisScript&lt;Long&gt; limitScript;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"@annotation(rateLimiter)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint point, RateLimiter rateLimiter)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 获取注解参数</span></span><br><span class="line">        String key = rateLimiter.key();</span><br><span class="line">        <span class="keyword">int</span> time = rateLimiter.time();</span><br><span class="line">        <span class="keyword">int</span> count = rateLimiter.count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取redis的key</span></span><br><span class="line">        String combineKey = getCombineKey(rateLimiter, point);</span><br><span class="line">        List&lt;Object&gt; keys = Collections.singletonList(combineKey);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long number = redisTemplate.execute(limitScript, keys, count, time);</span><br><span class="line">            <span class="keyword">if</span> (number==<span class="keyword">null</span> || number.intValue() &gt; count) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">"访问过于频繁，请稍候再试"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"限制请求'&#123;&#125;',当前请求'&#123;&#125;',缓存key'&#123;&#125;'"</span>, count, number.intValue(), combineKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务器限流异常，请稍候再试"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCombineKey</span><span class="params">(RateLimiter rateLimiter, JoinPoint point)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(rateLimiter.key());</span><br><span class="line">        <span class="keyword">if</span> (rateLimiter.limitType() == LimitType.IP) &#123;</span><br><span class="line">            <span class="comment">// 这个方法可以获取到当前线程的request和response</span></span><br><span class="line">            stringBuffer.append(IpUtils.getIpAddr(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest())).append(<span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        Class&lt;?&gt; targetClass = method.getDeclaringClass();</span><br><span class="line">        stringBuffer.append(targetClass.getName()).append(<span class="string">"-"</span>).append(method.getName());</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、接口测试">7、接口测试</h2><p>进行简单的测试，下面每一个 IP 地址，在 5 秒内只能访问 3 次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@RateLimiter</span>(time = <span class="number">5</span>,count = <span class="number">3</span>,limitType = LimitType.IP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello&gt;&gt;&gt;"</span>+<span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、Redis分布式锁</h1><h2 id="1、简介">1、简介</h2><blockquote><p><strong>分布式锁其实就是，控制分布式系统不同进程共同访问共享资源的一种锁的实现</strong>。如果不同的系统或同一个系统的不同主机之间共享了某个临界资源，往往需要互斥来防止彼此干扰，以保证一致性。</p></blockquote><p>分布式锁一般都使用Redis来实现，大概有以下几种方案，可以参考<a href="https://blog.csdn.net/weixin_38568503/article/details/124430481" target="_blank" rel="noopener" title="redis分布式锁">redis分布式锁</a></p><ul><li><p>SETNX + EXPIRE  </p></li><li><p>SETNX + value值是（系统时间+过期时间）  </p></li><li><p>使用Lua脚本(包含SETNX + EXPIRE两条指令)  </p></li><li><p>SET的扩展命令（SET EX PX NX）  </p></li><li><p>SET EX PX NX + 校验唯一随机值，再释放锁   (推荐)</p></li><li><p>开源框架Redisson (推荐)</p></li><li><p>多机实现的分布式锁Redlock (推荐)</p></li></ul><h2 id="2、AOP分布式锁原理">2、AOP分布式锁原理</h2><h3 id="2-1-实现流程">2.1 实现流程</h3><ul><li><p>新建注解 @interface，在注解里设定入参标志</p></li><li><p>增加 AOP 切点，扫描特定注解</p></li><li><p>建立 <code>@Aspect</code> 切面任务，注册 bean 和拦截特定方法</p></li><li><p>特定方法参数 ProceedingJoinPoint，对方法 <code>pjp.proceed()</code> 前后进行拦截</p></li><li><p>切点前进行加锁，任务执行后进行删除 key</p></li></ul><p><img src="https://img-blog.csdnimg.cn/b695cb94cd9f4b589fe02d2672881f99.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-2-核心步骤">2.2 核心步骤</h3><ul><li><strong>加锁</strong></li></ul><p>使用了 <code>StringRedisTemplate </code>的 <code>opsForValue.setIfAbsent</code> 方法，判断是否有 key，设定一个随机数 <code>UUID.random().toString</code>，生成一个随机数作为 value。从 redis 中获取锁之后，对 key 设定 expire 失效时间，到期后自动释放锁。按照这种设计，只有第一个成功设定 <code>Key</code> 的请求，才能进行后续的数据操作，后续其它请求由于无法获得🔐资源，将会失败结束。</p><ul><li><strong>超时问题</strong></li></ul><p>担心 <code>pjp.proceed()</code> 切点执行的方法太耗时，导致 <code>Redis</code> 中的 <code>key</code> 由于超时提前释放了。例如，线程 A 先获取锁，proceed 方法耗时，超过了锁超时时间，到期释放了锁，这时另一个线程 B 成功获取 <code>Redis</code> 锁，两个线程同时对同一批数据进行操作，导致数据不准确。</p><ul><li><strong>锁续时操作(任务不完成，锁不释放)</strong></li></ul><p>维护了一个定时线程池 <code>ScheduledExecutorService</code>，每隔 2s 去扫描加入队列中的 Task，判断是否失效时间是否快到了，公式为：【失效时间】&lt;= 【当前时间】+【失效间隔（三分之一超时）】</p><h2 id="3、AOP分布式锁实战">3、AOP分布式锁实战</h2><h3 id="3-1-业务属性枚举设定">3.1 业务属性枚举设定</h3><p>环境与Redis限流一样，首先创建注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RedisLockTypeEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义 key 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ONE(<span class="string">"Business1"</span>, <span class="string">"Test1"</span>),</span><br><span class="line"></span><br><span class="line">    TWO(<span class="string">"Business2"</span>, <span class="string">"Test2"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">    RedisLockTypeEnum(String code, String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUniqueKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s:%s"</span>, <span class="keyword">this</span>.getCode(), key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-任务队列保存参数">3.2 任务队列保存参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockDefinitionHolder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务唯一 key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String businessKey;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁时间 (秒 s)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long lockTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次更新时间（ms）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long lastModifyTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存当前线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Thread currentTread;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总共尝试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tryCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前尝试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新的时间周期（毫秒）,公式 = 加锁时间（转成毫秒） / 3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long modifyPeriod;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLockDefinitionHolder</span><span class="params">(String businessKey, Long lockTime, Long lastModifyTime, Thread currentTread, <span class="keyword">int</span> tryCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.businessKey = businessKey;</span><br><span class="line">        <span class="keyword">this</span>.lockTime = lockTime;</span><br><span class="line">        <span class="keyword">this</span>.lastModifyTime = lastModifyTime;</span><br><span class="line">        <span class="keyword">this</span>.currentTread = currentTread;</span><br><span class="line">        <span class="keyword">this</span>.tryCount = tryCount;</span><br><span class="line">        <span class="keyword">this</span>.modifyPeriod = lockTime * <span class="number">1000</span> / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-拦截的注解名声明">3.3 拦截的注解名声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisLockAnnotation &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 特定参数识别，默认取第 0 个下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lockFiled</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时重试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tryCount</span><span class="params">()</span> <span class="keyword">default</span> 3</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义加锁类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RedisLockTypeEnum <span class="title">typeEnum</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放时间，秒 s 单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">lockTime</span><span class="params">()</span> <span class="keyword">default</span> 30</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-核心切面拦截">3.4 核心切面拦截</h3><ul><li><p>解析注解参数，获取注解值和方法上的参数值</p></li><li><p>redis 加锁并且设置超时时间</p></li><li><p>将本次 Task 信息加入「延时」队列中，进行续时，方式提前释放锁</p></li><li><p>加了一个线程中断标志</p></li><li><p>结束请求，finally 中释放锁</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@annotation</span> 中的路径表示拦截特定注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.redislock.anno.RedisLockAnnotation)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redisLockPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"redisLockPC()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Method method = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 解析参数</span></span><br><span class="line">        <span class="comment">//判断注解是否method 上</span></span><br><span class="line">        <span class="keyword">if</span> (pjp.getSignature() <span class="keyword">instanceof</span> MethodSignature) &#123;</span><br><span class="line">            MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">            method = signature.getMethod();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RedisLockAnnotation annotation = method.getAnnotation(RedisLockAnnotation<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        RedisLockTypeEnum typeEnum = annotation.typeEnum();</span><br><span class="line">        Object[] params = pjp.getArgs();</span><br><span class="line">        String ukString = params[annotation.lockFiled()].toString();</span><br><span class="line">        <span class="comment">// 省略很多参数校验和判空</span></span><br><span class="line">        String businessKey = typeEnum.getUniqueKey(ukString);</span><br><span class="line">        String uniqueValue = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isSuccess = Boolean.TRUE.equals(redisTemplate.opsForValue().setIfAbsent(businessKey, uniqueValue));</span><br><span class="line">            <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"You can't do it，because another has get the lock =-="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"get the lock, businessKey is ["</span> + businessKey + <span class="string">"]"</span>);</span><br><span class="line">            redisTemplate.expire(businessKey, annotation.lockTime(), TimeUnit.SECONDS);</span><br><span class="line">            Thread currentThread = Thread.currentThread();</span><br><span class="line">            <span class="comment">// 将本次 Task 信息加入「延时」队列中</span></span><br><span class="line">            ScheduledExecutorService.holderList.add(<span class="keyword">new</span> RedisLockDefinitionHolder(businessKey, annotation.lockTime(), System.currentTimeMillis(),</span><br><span class="line">                    currentThread, annotation.tryCount()));</span><br><span class="line">            <span class="comment">// 执行业务操作</span></span><br><span class="line">            result = pjp.proceed();</span><br><span class="line">            <span class="comment">// 线程被中断，抛出异常，中断此次请求</span></span><br><span class="line">            <span class="keyword">if</span> (currentThread.isInterrupted()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException(<span class="string">"You had been interrupted =-="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e ) &#123;</span><br><span class="line">            log.error(<span class="string">"Interrupt exception, rollback transaction"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Interrupt exception, please send request again"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"has some error, please check again"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 请求结束后，强制删掉 key，释放锁</span></span><br><span class="line">            redisTemplate.delete(businessKey);</span><br><span class="line">            log.info(<span class="string">"release the lock, businessKey is ["</span> + businessKey + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-续时操作">3.5 续时操作</h3><p>这里加了「线程中断」<code>Thread#interrupt</code>，希望超过重试次数后，能让线程中断（仅供参考）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledExecutorService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扫描的任务队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentLinkedQueue&lt;RedisLockDefinitionHolder&gt; holderList = <span class="keyword">new</span> ConcurrentLinkedQueue();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池，维护keyAliveTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledThreadPoolExecutor SCHEDULER = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>,</span><br><span class="line">            <span class="keyword">new</span> BasicThreadFactory.Builder().namingPattern(<span class="string">"redisLock-schedule-pool"</span>).daemon(<span class="keyword">true</span>).build());</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 两秒执行一次「续时」操作</span></span><br><span class="line">        SCHEDULER.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 这里记得加 try-catch，否者报错后定时任务将不会再执行=-=</span></span><br><span class="line">            Iterator&lt;RedisLockDefinitionHolder&gt; iterator = holderList.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                RedisLockDefinitionHolder holder = iterator.next();</span><br><span class="line">                <span class="comment">// 判空</span></span><br><span class="line">                <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断 key 是否还有效，无效的话进行移除</span></span><br><span class="line">                <span class="keyword">if</span> (redisTemplate.opsForValue().get(holder.getBusinessKey()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 超时重试次数，超过时给线程设定中断</span></span><br><span class="line">                <span class="keyword">if</span> (holder.getCurrentCount() &gt; holder.getTryCount()) &#123;</span><br><span class="line">                    holder.getCurrentTread().interrupt();</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断是否进入最后三分之一时间</span></span><br><span class="line">                <span class="keyword">long</span> curTime = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">boolean</span> shouldExtend = (holder.getLastModifyTime() + holder.getModifyPeriod()) &lt;= curTime;</span><br><span class="line">                <span class="keyword">if</span> (shouldExtend) &#123;</span><br><span class="line">                    log.info(<span class="string">"超时增加"</span>);</span><br><span class="line">                    holder.setLastModifyTime(curTime);</span><br><span class="line">                    redisTemplate.expire(holder.getBusinessKey(), holder.getLockTime(), TimeUnit.SECONDS);</span><br><span class="line">                    log.info(<span class="string">"businessKey : ["</span> + holder.getBusinessKey() + <span class="string">"], try count : "</span> + holder.getCurrentCount());</span><br><span class="line">                    holder.setCurrentCount(holder.getCurrentCount() + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-测试">3.6 测试</h3><p>在一个入口方法中，使用该注解，然后在业务中模拟耗时请求，使用了 <code>Thread#sleep</code>。使用时，在方法上添加该注解，然后设定相应参数即可，根据 <code>typeEnum</code> 可以区分多种业务，限制该业务被同时操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@RedisLockAnnotation</span>(typeEnum = RedisLockTypeEnum.ONE, lockTime = <span class="number">3</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRedisLock</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> Long userId) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"睡眠执行前"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">            log.info(<span class="string">"睡眠执行后"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// log error</span></span><br><span class="line">            log.info(<span class="string">"has some error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、Redission分布式锁-AOP实现">4、Redission分布式锁(AOP实现)</h2><blockquote><p>Redission地址：<a href="https://github.com/redisson/redisson" target="_blank" rel="noopener" title="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p></blockquote><p>首先需要引入相关依赖，这里需要额外引入redission依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在applicatiion.properties创建参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host&#x3D;localhost</span><br><span class="line">spring.redis.port&#x3D;6379</span><br><span class="line"># spring.redis.password&#x3D;123</span><br><span class="line">spring.redis.database&#x3D;0</span><br><span class="line">spring.redis.timeout&#x3D;5000ms</span><br><span class="line">#redisson客户端连接超时时间(ms)</span><br><span class="line">redisson.timeout&#x3D;10000</span><br></pre></td></tr></table></figure><h3 id="4-1-注解创建">4.1 注解创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisDistributedLock &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要锁哪几个位置的参数，默认不锁参数</span></span><br><span class="line"><span class="comment">     * (如果锁参数, 需要指定参数的索引比如锁第一个参数和第二个参数则传&#123;0, 1&#125;</span></span><br><span class="line"><span class="comment">     * 锁参数之后, 锁的key就会拼接此参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span>[] lockIndex() <span class="keyword">default</span> &#123;-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认包名加方法名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间 单位：毫秒</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     过期时间一定是要长于业务的执行时间.</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">expire</span><span class="params">()</span> <span class="keyword">default</span> 30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁超时时间 单位：毫秒</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     结合业务,建议该时间不宜设置过长,特别在并发高的情况下.</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> 3000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间类型，默认毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TimeUnit <span class="title">timeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-创建切面增强">4.2 创建切面增强</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.redislock.anno.RedisDistributedLock)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"myAdvice()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 获取注解</span></span><br><span class="line">        MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        RedisDistributedLock annotation = signature.getMethod().getAnnotation(RedisDistributedLock<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成key</span></span><br><span class="line">        StringBuilder keyBuilder = <span class="keyword">new</span> StringBuilder(getKey(proceedingJoinPoint, annotation));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果锁参数, 需要将参数拼接到key上</span></span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        <span class="keyword">int</span>[] lockIndex = annotation.lockIndex();</span><br><span class="line">        <span class="keyword">if</span> (lockIndex.length &gt; <span class="number">0</span> &amp;&amp; lockIndex[<span class="number">0</span>] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index : lockIndex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= args.length || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数索引lockIndex: "</span> + index + <span class="string">" 异常"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                keyBuilder.append(<span class="string">"."</span>).append(args[index].toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止key值太长，用根据其生成的hash值做key</span></span><br><span class="line">        <span class="comment">// String lockKey = DigestUtils.md5DigestAsHex(keyBuilder.toString().getBytes());</span></span><br><span class="line">        String key = keyBuilder.toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Boolean success = <span class="keyword">null</span>;</span><br><span class="line">        RLock lock = redissonClient.getLock(key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//lock提供带timeout参数，timeout结束强制解锁，防止死锁</span></span><br><span class="line">            success = lock.tryLock(annotation.timeout(), annotation.expire(), annotation.timeUnit());</span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                log.info(Thread.currentThread().getName() + <span class="string">" 加锁成功"</span>);</span><br><span class="line">                <span class="comment">// 放行方法执行</span></span><br><span class="line">                <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(Thread.currentThread().getName() + <span class="string">" 加锁失败"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"操作频繁, 稍后重试"</span>); <span class="comment">// 此处可以用return 返回错误 需要跟切的方法的返回值保持一致</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(success)) &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">                log.info(Thread.currentThread().getName() + <span class="string">" 解锁成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getKey</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint, RedisDistributedLock annotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(annotation.key())) &#123;</span><br><span class="line">            <span class="keyword">return</span> annotation.key();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceedingJoinPoint.getSignature().getDeclaringTypeName() + <span class="string">"."</span> + proceedingJoinPoint.getSignature()</span><br><span class="line">                .getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-测试">4.3 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动加锁模拟 设置锁的时间为300秒 5分钟, 在5分钟之内若方法没有执行完成则自动解锁, 获取锁的等待时间为2秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@RedisDistributedLock</span>(timeUnit = TimeUnit.SECONDS, expire = <span class="number">300</span>, timeout = <span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"id = ["</span> + id + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-Redission其他">4.4 Redission其他</h3><p>Redission还有以下几种锁以及集群操作，详情可以参考：<a href="https://blog.csdn.net/qq_1757537040/article/details/122782123" target="_blank" rel="noopener" title="springboot整合redission分布式锁的实现方式含集群解决方案（技术篇）">springboot整合redission分布式锁的实现方式含集群解决方案（技术篇）</a></p><ul><li><p>可重入锁（Reentrant Lock）</p></li><li><p>公平锁（Fair Lock）</p></li><li><p>读写锁（ReadWriteLock）</p></li><li><p>信号量（Semaphore）</p></li><li><p>闭锁（CountDownLatch）</p></li></ul><h1>四、Redis接口幂等</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p>幂等性，就是只多次操作的结果是一致的</p></blockquote><p><strong>产生的问题</strong></p><ul><li><p>前端重复提交。比如这个业务处理需要2秒钟，我在2秒之内，提交按钮连续点了3次，如果非幂等性接口，那么后端就会处理3次。如果是查询，自然是没有影响的，因为查询本身就是幂等操作，但如果是新增，本来只是新增1条记录的，连点3次，就增加了3条，这显然不行。</p></li><li><p>响应超时而导致请求重试：在微服务相互调用的过程中，假如订单服务调用支付服务，支付服务支付成功了，但是订单服务接收支付服务返回的信息时超时了，于是订单服务进行重试，又去请求支付服务，结果支付服务又扣了一遍用户的钱。</p></li></ul><p><strong>解决方案</strong></p><ul><li><p>数据库记录状态机制：即每次操作前先查询状态，根据数据库记录的状态来判断是否要继续执行操作。比如订单服务调用支付服务，每次调用之前，先查询该笔订单的支付状态，从而避免重复操作。</p></li><li><p>token机制：请求业务接口之前，先请求token接口（会将生成的token放入redis中）获取一个token，然后请求业务接口时，带上token。在进行业务操作之前，我们先获取请求中携带的token，看看在redis中是否有该token，有的话，就删除，删除成功说明token校验通过，并且继续执行业务操作；如果redis中没有该token，说明已经被删除了，也就是已经执行过业务操作了，就不让其再进行业务操作。大致流程如下：</p></li></ul><p><img src="https://img-blog.csdnimg.cn/30757728bc9844d8bf4271d625caf91d.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、防重-Token-令牌流程">2、防重 Token 令牌流程</h2><ul><li><p>服务端提供获取 Token 的接口，该 Token 可以是一个序列号，也可以是一个分布式 ID 或者 UUID 串</p></li><li><p>客户端调用接口获取 Token，这时候服务端会生成一个 Token 串</p></li><li><p>然后将该串存入 Redis 数据库中，以该 Token 作为 Redis 的键（注意设置过期时间）</p></li><li><p>将 Token 返回到客户端，客户端拿到后应存到表单隐藏域中</p></li><li><p>客户端在执行提交表单时，把 Token 存入到 Headers 中，执行业务请求带上该 Headers</p></li><li><p>服务端接收到请求后从 Headers 中拿到 Token，然后根据 Token 到 Redis 中查找该 key 是否存在</p></li><li><p>服务端根据 Redis 中是否存该 key 进行判断，如果存在就将该 key 删除，然后正常执行业务逻辑。如果不存在就抛异常，返回重复提交的错误信息</p></li></ul><h2 id="3、放重Token实战">3、放重Token实战</h2><h3 id="3-1-注解创建">3.1 注解创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)  <span class="comment">//使用于方法</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ApiIdempotent &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-配置返回渲染">3.2 配置返回渲染</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletUtils</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderString</span><span class="params">(HttpServletResponse response, String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-放重Token生成与验证">3.3 放重Token生成与验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenUtilService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入 Redis 的 Token 键的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IDEMPOTENT_TOKEN_PREFIX = <span class="string">"idempotent_token:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 Token 存入 Redis，并返回该 Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 用于辅助验证的 value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的 Token 串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化生成 ID 工具对象</span></span><br><span class="line">        String token = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 设置存入 Redis 的 Key</span></span><br><span class="line">        String key = IDEMPOTENT_TOKEN_PREFIX + token;</span><br><span class="line">        <span class="comment">// 存储 Token 到 Redis，且设置过期时间为5分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(key, value, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 返回 Token</span></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 Token 正确性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value 存储在Redis中的辅助验证信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验证结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validToken</span><span class="params">(String token, String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置 Lua 脚本，其中 KEYS[1] 是 key，KEYS[2] 是 value</span></span><br><span class="line">        String script = <span class="string">"if redis.call('get', KEYS[1]) == KEYS[2] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 根据 Key 前缀拼接 Key</span></span><br><span class="line">        String key = IDEMPOTENT_TOKEN_PREFIX + token;</span><br><span class="line">        <span class="comment">// 执行 Lua 脚本</span></span><br><span class="line">        Long result = redisTemplate.execute(redisScript, Arrays.asList(key, value));</span><br><span class="line">        <span class="comment">// 根据返回结果判断是否成功成功匹配并删除 Redis 键值对，若果结果不为空和0，则验证通过</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result != <span class="number">0L</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"验证 token=&#123;&#125;,key=&#123;&#125;,value=&#123;&#125; 成功"</span>, token, key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"验证 token=&#123;&#125;,key=&#123;&#125;,value=&#123;&#125; 失败"</span>, token, key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、配置拦截器">3.4、配置拦截器</h3><p>首先创建自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiIdempotentInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtilService tokenUtilService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//校验是否有执行方法</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//若没有对应的方法执行器，就直接放行</span></span><br><span class="line">        &#125;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        Method method = handlerMethod.getMethod();</span><br><span class="line">        ApiIdempotent annotation = method.getAnnotation(ApiIdempotent<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//若是没有幂等性注解直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//解析对应的请求头</span></span><br><span class="line">            String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">            <span class="keyword">if</span> (ObjectUtils.isEmpty(token)) &#123;</span><br><span class="line">                ServletUtils.renderString(response, <span class="string">"请携带token令牌"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若是校验失败直接进行响应</span></span><br><span class="line">            <span class="keyword">if</span> (!tokenUtilService.validToken(token, <span class="string">"shawn"</span>)) &#123;</span><br><span class="line">                ServletUtils.renderString(response, <span class="string">"重复提交失败！"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置spring拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApiIdempotentInterceptor apiIdempotentInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(apiIdempotentInterceptor);</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    http请求时编码</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpMessageConverter&lt;String&gt; <span class="title">responseBodyConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringHttpMessageConverter converter = <span class="keyword">new</span> StringHttpMessageConverter(</span><br><span class="line">                StandardCharsets.UTF_8);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统配置参数编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line">        converters.add(responseBodyConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-测试">3.5 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Token 接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Token 串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/token"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取用户信息（这里使用模拟数据）</span></span><br><span class="line">        <span class="comment">// 注：这里存储该内容只是举例，其作用为辅助验证，使其验证逻辑更安全，如这里存储用户信息，其目的为:</span></span><br><span class="line">        <span class="comment">// - 1)、使用"token"验证 Redis 中是否存在对应的 Key</span></span><br><span class="line">        <span class="comment">// - 2)、使用"用户信息"验证 Redis 的 Value 是否匹配。</span></span><br><span class="line">        String userInfo = <span class="string">"changlu"</span>;</span><br><span class="line">        <span class="comment">// 获取 Token 字符串，并返回</span></span><br><span class="line">        <span class="keyword">return</span> tokenService.generateToken(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口幂等性测试接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 幂等 Token 串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testToken"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test1</span><span class="params">(@RequestHeader(value = <span class="string">"token"</span>)</span> String token) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取用户信息（这里使用模拟数据）</span></span><br><span class="line">        String userInfo = <span class="string">"shawn"</span>;</span><br><span class="line">        <span class="comment">// 根据 Token 和与用户相关的信息到 Redis 验证是否存在对应的信息</span></span><br><span class="line">        <span class="keyword">boolean</span> result = tokenService.validToken(token, userInfo);</span><br><span class="line">        <span class="comment">// 根据验证结果响应不同信息</span></span><br><span class="line">        <span class="keyword">return</span> result ? <span class="string">"正常调用"</span> : <span class="string">"重复调用"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口式的放重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiIdempotent</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testToken2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sucess"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://mp.weixin.qq.com/s/hp66aCiT2FDriau72paqOQ" target="_blank" rel="noopener" title="SpringBoot + 一个注解，轻松实现 Redis 分布式锁">SpringBoot + 一个注解，轻松实现 Redis 分布式锁</a></p><p><a href="https://blog.csdn.net/qq_1757537040/article/details/122782123" target="_blank" rel="noopener" title="springboot整合redission分布式锁的实现方式含集群解决方案（技术篇）">springboot整合redission分布式锁的实现方式含集群解决方案（技术篇）</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、概述&lt;/h1&gt;
&lt;h2 id=&quot;1、Redis概述&quot;&gt;1、Redis概述&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis参考文章：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/117711682&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Redis6.0学习笔记&quot;&gt;Redis6.0学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis 除了做缓存，还能干很多很多事情：&lt;strong&gt;分布式锁、限流、处理请求接口幂等性&lt;/strong&gt;，本篇文章重点讲述SpringBoot通过注解和AOP的方式实现Redis的接口限流，Redis使用了Lua脚本实现原子操作；通过redis实现的分布式锁以及处理接口幂等等方案&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>常见Shell编程脚本</title>
    <link href="https://www.shawn22.xyz/posts/4c942ca3.html"/>
    <id>https://www.shawn22.xyz/posts/4c942ca3.html</id>
    <published>2022-09-28T09:34:40.000Z</published>
    <updated>2022-09-28T09:41:49.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Linux运维监控相关">一、Linux运维监控相关</h2><h3 id="1、创建-Linux-系统账户及密码">1、创建 Linux 系统账户及密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 通过位置变量创建 Linux 系统账户及密码</span></span><br><span class="line"><span class="comment">#$1 是执行脚本的第一个参数,$2 是执行脚本的第二个参数</span></span><br><span class="line">useradd    <span class="string">"<span class="variable">$1</span>"</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$2</span>"</span>  |  passwd  ‐‐stdin  <span class="string">"<span class="variable">$1</span>"</span></span><br></pre></td></tr></table></figure><p>提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户不输入账户名,则提示必须输入账户名并退出脚本;如果用户不输入密码,则统一使用默认的 123456 作为默认密码</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本:提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户</span></span><br><span class="line"><span class="comment"># 不输入账户名,则提示必须输入账户名并退出脚本;如果用户不输入密码,则统一使用默</span></span><br><span class="line"><span class="comment"># 认的 123456 作为默认密码。</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入新建用户名："</span> name</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$name</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"必须输入新建的账户名"</span></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">sudo useradd <span class="variable">$name</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"user <span class="variable">$&#123;name&#125;</span> is created successfully!!!"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"user <span class="variable">$&#123;name&#125;</span> is created failly!!!"</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">stty -<span class="built_in">echo</span>   <span class="comment">#关闭shell的回显功能，即输入密码时不显示在屏幕上</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"passwd："</span> pass</span><br><span class="line">stty <span class="built_in">echo</span>    <span class="comment">#打开shell的回显功能</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$pass</span> ];<span class="keyword">then</span></span><br><span class="line">  pass=<span class="variable">$&#123;pass:-123456&#125;</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span> | sudo passwd <span class="variable">$name</span> --stdin  &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;name&#125;</span>'s password is set successfully"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;name&#125;</span>'s password is set failly!!!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>使用 user.txt 文件中的人员名单,在计算机中自动创建对应的账户并配置初始密码本脚本执行,需要提前准备一个 user.txt 文件,该文件中包含有若干用户名信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 user.txt 文件中的人员名单,在计算机中自动创建对应的账户并配置初始密码</span></span><br><span class="line"><span class="comment"># 本脚本执行,需要提前准备一个 user.txt 文件,该文件中包含有若干用户名信息</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat user.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     useradd  <span class="variable">$i</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"123456"</span> | passwd ‐‐stdin <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="2、备份日志">2、备份日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 每周5凌晨三点 使用 tar 命令备份/var/log 下的所有日志文件</span></span><br><span class="line"><span class="comment"># vim  /root/logbak.sh</span></span><br><span class="line"><span class="comment"># 编写备份脚本,备份后的文件名包含日期标签,防止后面的备份将前面的备份数据覆盖</span></span><br><span class="line"><span class="comment"># 注意 date 命令需要使用反引号括起来,反引号在键盘&lt;tab&gt;键上面</span></span><br><span class="line">tar  -czf  <span class="built_in">log</span>-`date +%Y%m%d`.tar.gz  /var/<span class="built_in">log</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># crontab ‐e  #编写计划任务,执行备份脚本</span></span><br><span class="line">00  03  *  *  5  /root/logbak.sh</span><br></pre></td></tr></table></figure><h3 id="3、测试-192-168-4-0-24-整个网段中哪些主机处于开机状态-哪些主机处于关机状态">3、测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机</span></span><br><span class="line"><span class="comment"># 状态(for 版本)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 每隔0.3秒ping一次，一共ping2次，并以1毫秒为单位设置ping的超时时间</span></span><br><span class="line">     ping -c2 -i0.3 -W1 192.168.4.<span class="variable">$i</span>  &amp;&gt;/dev/null</span><br><span class="line">    <span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"192.168.4.<span class="variable">$i</span> is up"</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">echo</span>  <span class="string">"192.168.4.<span class="variable">$i</span> is down"</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#============================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机</span></span><br><span class="line"><span class="comment"># 状态(while 版本) </span></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 254 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     ping -c2 -i0.3 -W1 192.168.4.<span class="variable">$i</span>  &amp;&gt;/dev/null</span><br><span class="line">     <span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"192.168.4.<span class="variable">$i</span> is up"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">echo</span>  <span class="string">"192.168.4.<span class="variable">$i</span> is down"</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">     <span class="built_in">let</span> i++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本测试 192.168.4.0/24 整个网段中哪些主机处于开机状态,哪些主机处于关机</span></span><br><span class="line"><span class="comment"># 状态(多进程版)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义一个函数,ping 某一台主机,并检测主机的存活状态</span></span><br><span class="line"><span class="function"><span class="title">myping</span></span>()&#123;</span><br><span class="line">ping -c2 -i0.3 -W1 192.168.4.<span class="variable">$1</span>  &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span>  [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> is up"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> is down"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     myping 192.168.4.<span class="variable">$i</span> &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 使用&amp;符号,将执行的函数放入后台执行</span></span><br><span class="line"><span class="comment"># 这样做的好处是不需要等待ping第一台主机的回应,就可以继续并发ping第二台主机,依次类推。</span></span><br></pre></td></tr></table></figure><h3 id="4、进度条">4、进度条</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 编写脚本,显示进度条</span></span><br><span class="line"><span class="function"><span class="title">jindu</span></span>()&#123;</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     <span class="built_in">echo</span> -n <span class="string">'#'</span></span><br><span class="line">     sleep 0.2</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">jindu &amp;</span><br><span class="line">cp -a <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line">killall <span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"拷贝完成"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================动态时针版本；定义一个显示进度的函数,屏幕快速显示|  / ‐ \</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 进度条,动态时针版本</span></span><br><span class="line"><span class="comment"># 定义一个显示进度的函数,屏幕快速显示|  / ‐ \</span></span><br><span class="line"><span class="function"><span class="title">rotate_line</span></span>()&#123;</span><br><span class="line">INTERVAL=0.5  <span class="comment">#设置间隔时间</span></span><br><span class="line">COUNT=<span class="string">"0"</span>     <span class="comment">#设置4个形状的编号,默认编号为 0(不代表任何图像)</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  COUNT=`expr <span class="variable">$COUNT</span> + 1` <span class="comment">#执行循环,COUNT 每次循环加 1,(分别代表4种不同的形状)</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$COUNT</span> <span class="keyword">in</span>          <span class="comment">#判断 COUNT 的值,值不一样显示的形状就不一样</span></span><br><span class="line">  <span class="string">"1"</span>)                    <span class="comment">#值为 1 显示‐</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">'‐'</span><span class="string">"\b\c"</span></span><br><span class="line">          sleep <span class="variable">$INTERVAL</span></span><br><span class="line">          ;;</span><br><span class="line">    <span class="string">"2"</span>)                  <span class="comment">#值为 2 显示\\,第一个\是转义</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">'\\'</span><span class="string">"\b\c"</span></span><br><span class="line">          sleep <span class="variable">$INTERVAL</span></span><br><span class="line">          ;;</span><br><span class="line">    <span class="string">"3"</span>)                  <span class="comment">#值为 3 显示|</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">"|\b\c"</span></span><br><span class="line">          sleep <span class="variable">$INTERVAL</span></span><br><span class="line">          ;;</span><br><span class="line">   <span class="string">"4"</span>)                   <span class="comment">#值为 4 显示/</span></span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">"/\b\c"</span></span><br><span class="line">          sleep <span class="variable">$INTERVAL</span></span><br><span class="line">          ;;</span><br><span class="line">    *)                    <span class="comment">#值为其他时,将 COUNT 重置为 0</span></span><br><span class="line">          COUNT=<span class="string">"0"</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">rotate_line</span><br><span class="line"></span><br><span class="line"><span class="comment">#====================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 显示进度条(回旋镖版)</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     clear</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..20&#125;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">         <span class="built_in">echo</span> -e <span class="string">"\033[3;<span class="variable">$&#123;i&#125;</span>H*"</span></span><br><span class="line">         sleep 0.1</span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">     clear</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> &#123;20..1&#125;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">         <span class="built_in">echo</span> -e <span class="string">"\033[3;<span class="variable">$&#123;i&#125;</span>H*"</span></span><br><span class="line">         sleep 0.1</span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">     clear</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================================\</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示进度条(数字版) </span></span><br><span class="line"><span class="comment"># echo 使用‐e 选项后,在打印参数中可以指定 H,设置需要打印内容的 x,y 轴的定位坐标</span></span><br><span class="line"><span class="comment"># 设置需要打印内容在第几行,第几列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[6;8H["</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[6;9H<span class="variable">$i</span>%"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[6;13H]"</span></span><br><span class="line">    sleep 0.1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="5、批量修改扩展名脚本">5、批量修改扩展名脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写批量修改扩展名脚本,如批量将 txt 文件修改为 doc 文件 </span></span><br><span class="line"><span class="comment"># 执行脚本时,需要给脚本添加位置参数</span></span><br><span class="line"><span class="comment"># 脚本名  txt  doc(可以将 txt 的扩展名修改为 doc)</span></span><br><span class="line"><span class="comment"># 脚本名  doc  jpg(可以将 doc 的扩展名修改为 jpg)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls *.<span class="variable">$1</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     mv <span class="variable">$i</span> <span class="variable">$&#123;i%.*&#125;</span>.<span class="variable">$2</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="6、使用-expect-工具自动交互密码远程其他主机安装-httpd-软件">6、使用 expect 工具自动交互密码远程其他主机安装 httpd 软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 expect 工具自动交互密码远程其他主机安装 httpd 软件 </span></span><br><span class="line"><span class="comment"># 删除~/.ssh/known_hosts 后,ssh 远程任何主机都会询问是否确认要连接该主机</span></span><br><span class="line">rm  ‐rf  ~/.ssh/known_hosts</span><br><span class="line">expect &lt;&lt;EOF</span><br><span class="line">spawn ssh 192.168.4.254</span><br><span class="line">expect <span class="string">"yes/no"</span> &#123;send <span class="string">"yes\r"</span>&#125;</span><br><span class="line"><span class="comment"># 根据自己的实际情况将密码修改为真实的密码字串</span></span><br><span class="line">expect <span class="string">"password"</span> &#123;send  <span class="string">"密码\r"</span>&#125;</span><br><span class="line">expect <span class="string">"#"</span> &#123;send  <span class="string">"yum ‐y install httpd\r"</span>&#125;</span><br><span class="line">expect <span class="string">"#"</span> &#123;send  <span class="string">"exit\r"</span>&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="7、一键部署LNMP">7、一键部署LNMP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 一键部署 LNMP(RPM 包版本)</span></span><br><span class="line"><span class="comment"># 使用 yum 安装部署 LNMP,需要提前配置好 yum 源,否则该脚本会失败</span></span><br><span class="line"><span class="comment"># 本脚本使用于 centos7.2 或 RHEL7.2</span></span><br><span class="line">yum ‐y install httpd</span><br><span class="line">yum ‐y install mariadb mariadb‐devel mariadb‐server</span><br><span class="line">yum ‐y install php  php‐mysql</span><br><span class="line"> </span><br><span class="line">systemctl start httpd mariadb</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment">#==========================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 一键部署 LNMP(源码安装版本)</span></span><br><span class="line">menu()</span><br><span class="line">&#123;</span><br><span class="line">clear</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"  ##############‐‐‐‐Menu‐‐‐‐##############"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# 1. Install Nginx"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# 2. Install MySQL"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# 3. Install PHP"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# 4. Exit Program"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"  ########################################"</span></span><br><span class="line">&#125;</span><br><span class="line">choice()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"Please choice a menu[1‐9]:"</span> select</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">install_nginx()</span><br><span class="line">&#123;</span><br><span class="line">  id nginx &amp;&gt;/dev/null</span><br><span class="line">  <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    useradd -s /sbin/nologin nginx</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -f nginx‐1.8.0.tar.gz ];<span class="keyword">then</span></span><br><span class="line">    tar -xf nginx‐1.8.0.tar.gz</span><br><span class="line">    <span class="built_in">cd</span> nginx‐1.8.0</span><br><span class="line">    yum -y install  gcc pcre‐devel openssl‐devel zlib‐devel make</span><br><span class="line">    ./configure ‐‐prefix=/usr/<span class="built_in">local</span>/nginx ‐‐with‐http_ssl_module</span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    ln -s /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/sbin/</span><br><span class="line">    <span class="built_in">cd</span> ..</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"没有 Nginx 源码包"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">install_mysql()</span><br><span class="line">&#123;</span><br><span class="line">  yum -y install gcc gcc‐c++ cmake ncurses‐devel perl</span><br><span class="line">  id mysql &amp;&gt;/dev/null</span><br><span class="line">  <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    useradd -s /sbin/nologin mysql</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -f mysql‐5.6.25.tar.gz ];<span class="keyword">then</span></span><br><span class="line">    tar -xf mysql‐5.6.25.tar.gz</span><br><span class="line">    <span class="built_in">cd</span> mysql‐5.6.25</span><br><span class="line">    cmake .</span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    /usr/<span class="built_in">local</span>/mysql/scripts/mysql_install_db ‐‐user=mysql ‐‐datadir=/usr/<span class="built_in">local</span>/mysql/data/</span><br><span class="line">‐‐basedir=/usr/<span class="built_in">local</span>/mysql/</span><br><span class="line">    chown -R root.mysql /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">    chown -R mysql /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">    /bin/cp -f /usr/<span class="built_in">local</span>/mysql/support‐files/mysql.server /etc/init.d/mysqld</span><br><span class="line">    chmod +x /etc/init.d/mysqld</span><br><span class="line">    /bin/cp -f /usr/<span class="built_in">local</span>/mysql/support‐files/my‐default.cnf /etc/my.cnf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"/usr/local/mysql/lib/"</span> &gt;&gt; /etc/ld.so.conf</span><br><span class="line">    ldconfig</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'PATH=\$PATH:/usr/local/mysql/bin/'</span> &gt;&gt; /etc/profile</span><br><span class="line">    <span class="built_in">export</span> PATH</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">"没有 mysql 源码包"</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">install_php()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">#安装 php 时没有指定启动哪些模块功能,如果的用户可以根据实际情况自行添加额外功能如‐‐with‐gd 等</span></span><br><span class="line">yum  -y  install  gcc  libxml2‐devel</span><br><span class="line"><span class="keyword">if</span> [ -f mhash‐0.9.9.9.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  tar -xf mhash‐0.9.9.9.tar.gz</span><br><span class="line">  <span class="built_in">cd</span> mhash‐0.9.9.9</span><br><span class="line">  ./configure</span><br><span class="line">  make</span><br><span class="line">  make install</span><br><span class="line">  <span class="built_in">cd</span> ..</span><br><span class="line"><span class="keyword">if</span> [ ! ‐f /usr/lib/libmhash.so ];<span class="keyword">then</span></span><br><span class="line">  ln -s /usr/<span class="built_in">local</span>/lib/libmhash.so /usr/lib/</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">ldconfig</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"没有 mhash 源码包文件"</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f libmcrypt‐2.5.8.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  tar -xf libmcrypt‐2.5.8.tar.gz</span><br><span class="line">  <span class="built_in">cd</span> libmcrypt‐2.5.8</span><br><span class="line">  ./configure</span><br><span class="line">  make</span><br><span class="line">  make install</span><br><span class="line">  <span class="built_in">cd</span> ..</span><br><span class="line">  <span class="keyword">if</span> [ ! -f /usr/lib/libmcrypt.so ];<span class="keyword">then</span>  </span><br><span class="line">    ln -s /usr/<span class="built_in">local</span>/lib/libmcrypt.so /usr/lib/</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  ldconfig</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"没有 libmcrypt 源码包文件"</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f php‐5.4.24.tar.gz ];<span class="keyword">then</span></span><br><span class="line">  tar -xf php‐5.4.24.tar.gz</span><br><span class="line">  <span class="built_in">cd</span> php‐5.4.24</span><br><span class="line">  ./configure  ‐‐prefix=/usr/<span class="built_in">local</span>/php5  ‐‐with‐mysql=/usr/<span class="built_in">local</span>/mysql  ‐‐<span class="built_in">enable</span>‐fpm    ‐‐</span><br><span class="line">  <span class="built_in">enable</span>‐mbstring  ‐‐with‐mcrypt  ‐‐with‐mhash  ‐‐with‐config‐file‐path=/usr/<span class="built_in">local</span>/php5/etc  ‐‐with‐</span><br><span class="line">  mysqli=/usr/<span class="built_in">local</span>/mysql/bin/mysql_config</span><br><span class="line">  make &amp;&amp; make install</span><br><span class="line">  /bin/cp -f php.ini‐production /usr/<span class="built_in">local</span>/php5/etc/php.ini</span><br><span class="line">  /bin/cp -f /usr/<span class="built_in">local</span>/php5/etc/php‐fpm.conf.default /usr/<span class="built_in">local</span>/php5/etc/php‐fpm.conf</span><br><span class="line">  <span class="built_in">cd</span> ..</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"没有 php 源码包文件"</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  menu</span><br><span class="line">  choice</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$select</span> <span class="keyword">in</span></span><br><span class="line">  1)</span><br><span class="line">    install_nginx</span><br><span class="line">    ;;</span><br><span class="line">  2)</span><br><span class="line">    install_mysql</span><br><span class="line">    ;;</span><br><span class="line">  3)</span><br><span class="line">    install_php</span><br><span class="line">    ;;</span><br><span class="line">  4)</span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> Sorry!</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装 LAMP 环境(yum 版本) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 本脚本适用于 RHEL7(RHEL6 中数据库为 mysql)</span></span><br><span class="line">yum makecache &amp;&gt;/dev/null</span><br><span class="line">num=$(yum repolist | awk <span class="string">'/repolist/&#123;print $2&#125;'</span> | sed <span class="string">'s/,//'</span>)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -lt 0 ];<span class="keyword">then</span></span><br><span class="line">  yum -y install httpd</span><br><span class="line">  yum -y install mariadb mariadb-server mariadb-devel</span><br><span class="line">  yum -y install php php-mysql</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"未配置 yum 源..."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="8、根据-md5-校验码-检测文件是否被修改">8、根据 md5 校验码,检测文件是否被修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 根据 md5 校验码,检测文件是否被修改 </span></span><br><span class="line"><span class="comment"># 本示例脚本检测的是/etc 目录下所有的 conf 结尾的文件,根据实际情况,您可以修改为其他目录或文件</span></span><br><span class="line"><span class="comment"># 本脚本在目标数据没有被修改时执行一次,当怀疑数据被人篡改,再执行一次</span></span><br><span class="line"><span class="comment"># 将两次执行的结果做对比,MD5 码发生改变的文件,就是被人篡改的文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ls /etc/*.conf)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  md5sum <span class="string">"<span class="variable">$i</span>"</span> &gt;&gt; /var/<span class="built_in">log</span>/conf_file.log</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="9、查看有多少远程的-IP-在连接本机’">9、查看有多少远程的 IP 在连接本机’</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看有多少远程的 IP 在连接本机(不管是通过 ssh 还是 web 还是 ftp 都统计) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 netstat ‐atn 可以查看本机所有连接的状态,‐a 查看所有,</span></span><br><span class="line"><span class="comment"># -t仅显示 tcp 连接的信息,‐n 数字格式显示</span></span><br><span class="line"><span class="comment"># Local Address(第四列是本机的 IP 和端口信息)</span></span><br><span class="line"><span class="comment"># Foreign Address(第五列是远程主机的 IP 和端口信息)</span></span><br><span class="line"><span class="comment"># 使用 awk 命令仅显示第 5 列数据,再显示第 1 列 IP 地址的信息</span></span><br><span class="line"><span class="comment"># sort 可以按数字大小排序,最后使用 uniq 将多余重复的删除,并统计重复的次数</span></span><br><span class="line">netstat -atn  |  awk  <span class="string">'&#123;print $5&#125;'</span>  | awk  <span class="string">'&#123;print $1&#125;'</span> | sort -nr  |  uniq -c</span><br></pre></td></tr></table></figure><h3 id="10、监控内存和磁盘容量，小于给定值时报警">10、监控内存和磁盘容量，小于给定值时报警</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 实时监控本机内存和硬盘剩余空间,剩余内存小于500M、根分区剩余空间小于1000M时,发送报警邮件给root管理员</span></span><br><span class="line"><span class="comment"># 提取根分区剩余空间</span></span><br><span class="line">disk_size=$(df / | awk <span class="string">'/\//&#123;print $4&#125;'</span>)</span><br><span class="line"><span class="comment"># 提取内存剩余空间</span></span><br><span class="line">mem_size=$(free | awk <span class="string">'/Mem/&#123;print $4&#125;'</span>)</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 注意内存和磁盘提取的空间大小都是以 Kb 为单位</span></span><br><span class="line"><span class="keyword">if</span>  [  <span class="variable">$disk_size</span> -le 512000 -a <span class="variable">$mem_size</span> -le 1024000  ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    mail -s <span class="string">"Warning"</span>  root  &lt;&lt;EOF</span><br><span class="line">  Insufficient resources,资源不足</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="11、使用死循环实时显示-eth0-网卡发送的数据包流量"><strong>11、使用死循环实时显示 eth0 网卡发送的数据包流量</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 使用死循环实时显示 eth0 网卡发送的数据包流量 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span>  <span class="string">'本地网卡 eth0 流量信息如下: '</span></span><br><span class="line">    ifconfig eth0 | grep <span class="string">"RX pack"</span> | awk <span class="string">'BEGIN&#123;OFS=""&#125;;&#123;print $6,$7&#125;'</span></span><br><span class="line">    ifconfig eth0 | grep <span class="string">"TX pack"</span> | awk <span class="string">'BEGIN&#123;OFS=""&#125;;&#123;print $6,$7&#125;'</span></span><br><span class="line">     sleep 5</span><br><span class="line">    clear</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="12、-apache-服务器的监控">12、 apache 服务器的监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计 13:30 到 14:30 所有访问 apache 服务器的请求有多少个</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># awk 使用‐F 选项指定文件内容的分隔符是/或者:</span></span><br><span class="line"><span class="comment"># 条件判断$7:$8 大于等于 13:30,并且要求,$7:$8 小于等于 14:30</span></span><br><span class="line"><span class="comment"># 最后使用 wc ‐l 统计这样的数据有多少行,即多少个</span></span><br><span class="line">awk -F <span class="string">"[ /:]"</span> <span class="string">'$7":"$8&gt;="13:30" &amp;&amp; $7":"$8&lt;="14:30"'</span> /var/<span class="built_in">log</span>/httpd/access_log |wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment">#===============================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计 13:30 到 14:30 所有访问本机 Aapche 服务器的远程 IP 地址是什么 </span></span><br><span class="line"><span class="comment"># awk 使用‐F 选项指定文件内容的分隔符是/或者:</span></span><br><span class="line"><span class="comment"># 条件判断$7:$8 大于等于 13:30,并且要求,$7:$8 小于等于 14:30</span></span><br><span class="line"><span class="comment"># 日志文档内容里面,第 1 列是远程主机的 IP 地址,使用 awk 单独显示第 1 列即可</span></span><br><span class="line">awk -F <span class="string">"[ /:]"</span> <span class="string">'$7":"$8&gt;="13:30" &amp;&amp; $7":"$8&lt;="14:30"&#123;print $1&#125;'</span> /var/<span class="built_in">log</span>/httpd/access_log</span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计每个远程 IP 访问了本机 apache 几次? </span></span><br><span class="line">awk  <span class="string">'&#123;ip[$1]++&#125;END&#123;for(i in ip)&#123;print ip[i],i&#125;&#125;'</span>  /var/<span class="built_in">log</span>/httpd/access_log</span><br></pre></td></tr></table></figure><h3 id="13、统计当前-Linux-系统中可以登录计算机的账户">13、统计当前 Linux 系统中可以登录计算机的账户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计当前 Linux 系统中可以登录计算机的账户有多少个</span></span><br><span class="line"><span class="comment">#方法 1:</span></span><br><span class="line">grep <span class="string">"bash$"</span> /etc/passwd | wc -l</span><br><span class="line"><span class="comment">#方法 2:</span></span><br><span class="line">awk -f: <span class="string">'/bash$/&#123;x++&#125;end&#123;print x&#125;'</span>  /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 显示当前计算机中所有账户的用户名称</span></span><br><span class="line"><span class="comment"># 下面使用3种不同的方式列出计算机中所有账户的用户名</span></span><br><span class="line"><span class="comment"># 指定以:为分隔符,打印/etc/passwd 文件的第 1 列</span></span><br><span class="line">awk -F: <span class="string">'&#123;print $1&#125;'</span> /etc/passwd</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定以:为分隔符,打印/etc/passwd 文件的第 1 列</span></span><br><span class="line">cut -d: -f1 /etc/passwd</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 sed 的替换功能,将/etc/passwd 文件中:后面的所有内容替换为空(仅显示用户名)</span></span><br><span class="line">sed <span class="string">'s/:.*//'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="14、统计-var-log-有多少个文件-并显示这些文件名">14、统计/var/log 有多少个文件,并显示这些文件名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计/var/log 有多少个文件,并显示这些文件名 </span></span><br><span class="line"><span class="comment"># 使用 ls 递归显示所有,再判断是否为文件,如果是文件则计数器加 1</span></span><br><span class="line"><span class="built_in">cd</span>  /var/<span class="built_in">log</span></span><br><span class="line">sum=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls -r *`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="keyword">if</span> [ -f <span class="variable">$i</span> ];<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">let</span> sum++</span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"文件名:<span class="variable">$i</span>"</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"总文件数量为:<span class="variable">$sum</span>"</span></span><br></pre></td></tr></table></figure><h3 id="15、自动为其他脚本添加解释器信息">15、自动为其他脚本添加解释器信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自动为其他脚本添加解释器信息#!/bin/bash,如脚本名为 test.sh 则效果如下: </span></span><br><span class="line"><span class="comment"># ./test.sh  abc.sh  自动为 abc.sh 添加解释器信息</span></span><br><span class="line"><span class="comment"># ./test.sh  user.sh  自动为 user.sh 添加解释器信息</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 先使用 grep 判断对象脚本是否已经有解释器信息,如果没有则使用 sed 添加解释器以及描述信息</span></span><br><span class="line"><span class="keyword">if</span>  !  grep  -q  <span class="string">"^#!"</span>  <span class="variable">$1</span>; <span class="keyword">then</span></span><br><span class="line">sed  <span class="string">'1i #!/bin/bash'</span>  <span class="variable">$1</span></span><br><span class="line">sed  <span class="string">'2i #Description: '</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 因为每个脚本的功能不同,作用不同,所以在给对象脚本添加完解释器信息,以及 Description 后还希望</span></span><br><span class="line"><span class="comment"># 继续编辑具体的脚本功能的描述信息,这里直接使用 vim 把对象脚本打开,并且光标跳转到该文件的第 2 行</span></span><br><span class="line">vim +2 <span class="variable">$1</span></span><br></pre></td></tr></table></figure><h3 id="16、nginx-启动脚本">16、nginx 启动脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写 nginx 启动脚本 </span></span><br><span class="line"><span class="comment"># 本脚本编写完成后,放置在/etc/init.d/目录下,就可以被 Linux 系统自动识别到该脚本</span></span><br><span class="line"><span class="comment"># 如果本脚本名为/etc/init.d/nginx,则 service nginx start 就可以启动该服务</span></span><br><span class="line"><span class="comment"># service nginx stop 就可以关闭服务</span></span><br><span class="line"><span class="comment"># service nginx restart 可以重启服务</span></span><br><span class="line"><span class="comment"># service nginx status 可以查看服务状态</span></span><br><span class="line"> </span><br><span class="line">program=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">pid=/usr/<span class="built_in">local</span>/nginx/logs/nginx.pid</span><br><span class="line"><span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$pid</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">"nginx 服务已经处于开启状态"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="variable">$program</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -! -f <span class="variable">$pid</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"nginx 服务已经关闭"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="variable">$program</span> -s stop</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"关闭服务 ok"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">status</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$pid</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"服务正在运行..."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"服务已经关闭"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">  start;;</span><br><span class="line">stop)</span><br><span class="line">  stop;;</span><br><span class="line">restart)</span><br><span class="line">  stop</span><br><span class="line">  sleep 1</span><br><span class="line">  start;;</span><br><span class="line">status)</span><br><span class="line">  status;;</span><br><span class="line">*)</span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">"你输入的语法格式错误"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="17、切割-Nginx-日志文件-防止单个文件过大-后期处理很困难">17、切割 Nginx 日志文件(防止单个文件过大,后期处理很困难)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mkdir  /data/scripts</span></span><br><span class="line"><span class="comment">#vim   /data/scripts/nginx_log.sh  </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 切割 Nginx 日志文件(防止单个文件过大,后期处理很困难) </span></span><br><span class="line">logs_path=<span class="string">"/usr/local/nginx/logs/"</span></span><br><span class="line">mv <span class="variable">$&#123;logs_path&#125;</span>access.log <span class="variable">$&#123;logs_path&#125;</span>access_$(date -d <span class="string">"yesterday"</span> +<span class="string">"%Y%m%d"</span>).<span class="built_in">log</span></span><br><span class="line"><span class="built_in">kill</span> -USR1  `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br><span class="line"> </span><br><span class="line"><span class="comment"># chmod +x  /data/scripts/nginx_log.sh</span></span><br><span class="line"><span class="comment"># crontab  ‐e                    #脚本写完后,将脚本放入计划任务每天执行一次脚本</span></span><br><span class="line">0  1  *  *   *   /data/scripts/nginx_log.sh</span><br></pre></td></tr></table></figure><h3 id="18、检测-MySQL-数据库连接数量">18、检测 MySQL 数据库连接数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检测 MySQL 数据库连接数量 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 本脚本每 2 秒检测一次 MySQL 并发连接数,可以将本脚本设置为开机启动脚本,或在特定时间段执行</span></span><br><span class="line"><span class="comment"># 以满足对 MySQL 数据库的监控需求,查看 MySQL 连接是否正常</span></span><br><span class="line"><span class="comment"># 本案例中的用户名和密码需要根据实际情况修改后方可使用</span></span><br><span class="line">log_file=/var/<span class="built_in">log</span>/mysql_count.log</span><br><span class="line">user=shawn</span><br><span class="line">passwd=shawn</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sleep 2</span><br><span class="line">    count=`mysqladmin  -u<span class="string">"<span class="variable">$user</span>"</span>  -p<span class="string">"<span class="variable">$passwd</span>"</span> status |awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"`date +%Y‐%m‐%d` 并发连接数为:<span class="variable">$count</span>"</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="19、检测-MySQL-服务是否存活">19、检测 MySQL 服务是否存活</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检测 MySQL 服务是否存活 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># host 为你需要检测的 MySQL 主机的 IP 地址,user 为 MySQL 账户名,passwd 为密码</span></span><br><span class="line"><span class="comment"># 这些信息需要根据实际情况修改后方可使用</span></span><br><span class="line"></span><br><span class="line">host=127.0.0.1</span><br><span class="line">user=shawn</span><br><span class="line">passwd=shawn</span><br><span class="line">mysqladmin -h<span class="string">"<span class="variable">$host</span>"</span> -u<span class="string">"<span class="variable">$user</span>"</span> -p<span class="string">"<span class="variable">$passwd</span>"</span> ping &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Mysql is UP"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Mysql is down"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="20、备份-MySQL">20、备份 MySQL </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 备份 MySQL 的 shell 脚本(mysqldump版本) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义变量 user(数据库用户名),passwd(数据库密码),date(备份的时间标签)</span></span><br><span class="line"><span class="comment"># dbname(需要备份的数据库名称,根据实际需求需要修改该变量的值,默认备份 mysql 数据库)</span></span><br><span class="line">user=root</span><br><span class="line">passwd=123456</span><br><span class="line">dbname=mysql</span><br><span class="line">date=$(date +%Y%m%d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试备份目录是否存在,不存在则自动创建该目录</span></span><br><span class="line">[ ! -d /mysqlbackup ] &amp;&amp; mkdir /mysqlbackup</span><br><span class="line"><span class="comment"># 使用 mysqldump 命令备份数据库</span></span><br><span class="line">mysqldump -u<span class="string">"<span class="variable">$user</span>"</span> -p<span class="string">"<span class="variable">$passwd</span>"</span> <span class="string">"<span class="variable">$dbname</span>"</span> &gt; /mysqlbackup/<span class="string">"<span class="variable">$dbname</span>"</span>-<span class="variable">$&#123;date&#125;</span>.sql</span><br></pre></td></tr></table></figure><h3 id="21、将文件中所有的小写字母转换为大写字母">21、将文件中所有的小写字母转换为大写字母</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将文件中所有的小写字母转换为大写字母 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># $1是位置参数,是你需要转换大小写字母的文件名称</span></span><br><span class="line"><span class="comment"># 执行脚本,给定一个文件名作为参数,脚本就会将该文件中所有的小写字母转换为大写字母</span></span><br><span class="line">tr <span class="string">"[a‐z]"</span> <span class="string">"[A‐Z]"</span> &lt; <span class="variable">$1</span></span><br></pre></td></tr></table></figure><h3 id="22、非交互自动生成-SSH-密钥文件">22、非交互自动生成 SSH 密钥文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 非交互自动生成 SSH 密钥文件 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># ‐t 指定 SSH 密钥的算法为 RSA 算法;‐N 设置密钥的密码为空;‐f 指定生成的密钥文件&gt;存放在哪里</span></span><br><span class="line">rm  -rf  ~/.ssh/&#123;known_hosts,id_rsa*&#125;</span><br><span class="line">ssh‐keygen -t RSA -N <span class="string">''</span> -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="23、检查特定的软件包是否已经安装">23、检查特定的软件包是否已经安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检查特定的软件包是否已经安装 </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"你需要制定一个软件包名称作为脚本参数"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"用法:<span class="variable">$0</span> 软件包名称 ..."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># $@提取所有的位置变量的值,相当于$*</span></span><br><span class="line"><span class="keyword">for</span> package <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> rpm -q <span class="variable">$&#123;package&#125;</span> &amp;&gt;/dev/null ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;package&#125;</span>\033[32m 已经安装\033[0m"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;package&#125;</span>\033[34;1m 未安装\033[0m"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="24、监控-HTTP-服务器的状态-测试返回码">24、监控 HTTP 服务器的状态(测试返回码)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 监控 HTTP 服务器的状态(测试返回码)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置变量,url为你需要检测的目标网站的网址(IP 或域名),比如百度</span></span><br><span class="line">url=http://183.232.231.172/index.html</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义函数 check_http:</span></span><br><span class="line"><span class="comment"># 使用 curl 命令检查 http 服务器的状态</span></span><br><span class="line"><span class="comment"># ‐m 设置curl不管访问成功或失败,最大消耗的时间为 5 秒,5 秒连接服务为相应则视为无法连接</span></span><br><span class="line"><span class="comment"># ‐s 设置静默连接,不显示连接时的连接速度、时间消耗等信息</span></span><br><span class="line"><span class="comment"># ‐o 将 curl 下载的页面内容导出到/dev/null(默认会在屏幕显示页面内容)</span></span><br><span class="line"><span class="comment"># ‐w 设置curl命令需要显示的内容%&#123;http_code&#125;,指定curl返回服务器的状态码</span></span><br><span class="line">check_http()</span><br><span class="line">&#123;</span><br><span class="line">        status_code=$(curl -m 5 -s -o /dev/null -w %&#123;http_code&#125; <span class="variable">$url</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        check_http</span><br><span class="line">        date=$(date +%Y%m%d‐%H:%M:%S)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成报警邮件的内容</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"当前时间为:<span class="variable">$date</span></span></span><br><span class="line"><span class="string">        <span class="variable">$url</span> 服务器异常,状态码为<span class="variable">$&#123;status_code&#125;</span>.</span></span><br><span class="line"><span class="string">        请尽快排查异常."</span> &gt; /tmp/http$$.pid</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定测试服务器状态的函数,并根据返回码决定是发送邮件报警还是将正常信息写入日志</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$status_code</span> -ne 200 ];<span class="keyword">then</span></span><br><span class="line">                mail -s Warning root &lt; /tmp/http$$.pid</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$url</span> 连接正常"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        sleep 5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="25、自动添加防火墙规则-开启某些服务或端口-适用于-RHEL7">25、自动添加防火墙规则,开启某些服务或端口(适用于 RHEL7)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自动添加防火墙规则,开启某些服务或端口(适用于 RHEL7)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 设置变量定义需要添加到防火墙规则的服务和端口号</span></span><br><span class="line"><span class="comment"># 使用 firewall‐cmd ‐‐get‐services 可以查看 firewall 支持哪些服务</span></span><br><span class="line">service=<span class="string">"nfs http ssh"</span></span><br><span class="line">port=<span class="string">"80 22 8080"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 循环将每个服务添加到防火墙规则中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$service</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Adding <span class="variable">$i</span> service to firewall"</span></span><br><span class="line">    firewall‐cmd  --add-service=<span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#循环将每个端口添加到防火墙规则中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$port</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Adding <span class="variable">$i</span> Port to firewall"</span></span><br><span class="line">    firewall‐cmd --add-port=<span class="variable">$&#123;i&#125;</span>/tcp</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#将以上设置的临时防火墙规则,转换为永久有效的规则(确保重启后有效)</span></span><br><span class="line">firewall‐cmd  --runtime-to-permanent</span><br></pre></td></tr></table></figure><h3 id="26、使用脚本自动创建逻辑卷">26、使用脚本自动创建逻辑卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用脚本自动创建逻辑卷 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 清屏,显示警告信息,创建将磁盘转换为逻辑卷会删除数据</span></span><br><span class="line">clear</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m           !!!!!!警告(Warning)!!!!!!\033[0m"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"+++++++++++++++++++++++++++++++++++++++++++++++++"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"脚本会将整个磁盘转换为 PV,并删除磁盘上所有数据!!!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This Script will destroy all data on the Disk"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"+++++++++++++++++++++++++++++++++++++++++++++++++"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请问是否继续 y/n?:"</span> sure</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试用户输入的是否为 y,如果不是则退出脚本</span></span><br><span class="line">[ <span class="variable">$sure</span> != y ] &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提示用户输入相关参数(磁盘、卷组名称等数据),并测试用户是否输入了这些值,如果没有输入,则脚本退出</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入磁盘名称,如/dev/vdb:"</span> disk</span><br><span class="line">[ -z <span class="variable">$disk</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"没有输入磁盘名称"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入卷组名称:"</span> vg_name</span><br><span class="line">[ -z <span class="variable">$vg_name</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"没有输入卷组名称"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入逻辑卷名称:"</span> lv_name</span><br><span class="line">[ -z <span class="variable">$lv_name</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"没有输入逻辑卷名称"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入逻辑卷大小:"</span> lv_size</span><br><span class="line">[ -z <span class="variable">$lv_size</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"没有输入逻辑卷大小"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用命令创建逻辑卷</span></span><br><span class="line">pvcreate <span class="variable">$disk</span></span><br><span class="line">vgcreate <span class="variable">$vg_name</span> <span class="variable">$disk</span></span><br><span class="line">lvcreate -L <span class="variable">$&#123;lv_size&#125;</span>M -n <span class="variable">$&#123;lv_name&#125;</span>  <span class="variable">$&#123;vg_name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="27、显示-CPU-厂商信息">27、显示 CPU 厂商信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示 CPU 厂商信息 </span></span><br><span class="line">awk <span class="string">'/vendor_id/&#123;print $3&#125;'</span> /proc/cpuinfo | uniq</span><br></pre></td></tr></table></figure><h3 id="28、删除某个目录下大小为-0-的文件">28、删除某个目录下大小为 0 的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除某个目录下大小为 0 的文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#/var/www/html 为测试目录,脚本会清空该目录下所有 0 字节的文件</span></span><br><span class="line">dir=<span class="string">"/var/www/html"</span></span><br><span class="line">find <span class="variable">$dir</span> -<span class="built_in">type</span> f -size 0 -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><h3 id="29、查找-Linux-系统中的僵尸进程">29、查找 Linux 系统中的僵尸进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查找 Linux 系统中的僵尸进程</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># awk 判断 ps 命令输出的第 8 列为 Z 是,显示该进程的 PID 和进程命令</span></span><br><span class="line">ps aux | awk <span class="string">'&#123;if($8 == "Z")&#123;print $2,$11&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="30、生成随机密码">30、生成随机密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成随机密码(urandom 版本) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># /dev/urandom 文件是 Linux 内置的随机设备文件</span></span><br><span class="line"><span class="comment"># cat /dev/urandom 可以看看里面的内容,ctrl+c 退出查看</span></span><br><span class="line"><span class="comment"># 查看该文件内容后,发现内容有些太随机,包括很多特殊符号,我们需要的密码不希望使用这些符号</span></span><br><span class="line"><span class="comment"># tr ‐dc '_A‐Za‐z0‐9' &lt; /dev/urandom</span></span><br><span class="line"><span class="comment"># 该命令可以将随机文件中其他的字符删除,仅保留大小写字母,数字,下划线,但是内容还是太多</span></span><br><span class="line"><span class="comment"># 我们可以继续将优化好的内容通过管道传递给 head 命令,在大量数据中仅显示头 10 个字节</span></span><br><span class="line"><span class="comment"># 注意 A 前面有个下划线</span></span><br><span class="line">tr -dc <span class="string">'_A‐Za‐z0‐9'</span> &lt;/dev/urandom | head -c 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成随机密码(字串截取版本) </span></span><br><span class="line"><span class="comment"># 设置变量 key,存储密码的所有可能性(密码库),如果还需要其他字符请自行添加其他密码字符</span></span><br><span class="line"><span class="comment"># 使用$#统计密码库的长度</span></span><br><span class="line">key=<span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></span><br><span class="line">num=<span class="variable">$&#123;#key&#125;</span></span><br><span class="line"><span class="comment"># 设置初始密码为空</span></span><br><span class="line">pass=<span class="string">''</span></span><br><span class="line"><span class="comment"># 循环 8 次,生成随机密码</span></span><br><span class="line"><span class="comment"># 每次都是随机数对密码库的长度取余,确保提取的密码字符不超过密码库的长度</span></span><br><span class="line"><span class="comment"># 每次循环提取一位随机密码,并将该随机密码追加到 pass 变量的最后</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..8&#125;</span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">  index=$[RANDOM%num]</span><br><span class="line">  pass=<span class="variable">$pass</span><span class="variable">$&#123;key:$index:1&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=============================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 生成随机密码(UUID 版本,16 进制密码) </span></span><br><span class="line">uuidgen</span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成随机密码(进程 ID 版本,数字密码)</span></span><br><span class="line"><span class="built_in">echo</span> $$</span><br></pre></td></tr></table></figure><h3 id="31、测试用户名与密码是否正确">31、测试用户名与密码是否正确</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试用户名与密码是否正确</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#用户名为 tom 并且密码为 123456,则提示登录成功,否则提示登录失败</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入用户名:"</span>  user</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入密码:"</span>    pass</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$user</span>"</span> == <span class="string">'tom'</span> -a <span class="string">"<span class="variable">$pass</span>"</span> == <span class="string">'123456'</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Login successful"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Login Failed"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================================</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 循环测试用户名与密码是否正确 </span></span><br><span class="line"><span class="comment"># 循环测试用户的账户名和密码,最大测试 3 次,输入正确提示登录成功,否则提示登录失败</span></span><br><span class="line"><span class="comment"># 用户名为 tom 并且密码为 123456  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..3&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"请输入用户名:"</span> user</span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"请输入密码:"</span>   pass</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$user</span>"</span> == <span class="string">'tom'</span> -a <span class="string">"<span class="variable">$pass</span>"</span> == <span class="string">'123456'</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Login successful"</span></span><br><span class="line">     <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Login Failed"</span></span><br></pre></td></tr></table></figure><h3 id="32、Shell-脚本的-fork-炸弹">32、Shell 脚本的 fork 炸弹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Shell 脚本的 fork 炸弹 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 快速消耗计算机资源,致使计算机死机</span></span><br><span class="line"><span class="comment"># 定义函数名为.(点), 函数中递归调用自己并放入后台执行</span></span><br><span class="line">.() &#123; .|.&amp; &#125;;.</span><br></pre></td></tr></table></figure><h3 id="33、批量下载有序文件-pdf、图片、视频等等">33、批量下载有序文件(pdf、图片、视频等等)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 批量下载有序文件(pdf、图片、视频等等)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 本脚本准备有序的网络资料进行批量下载操作(如 01.jpg,02.jpg,03.jpg)</span></span><br><span class="line"><span class="comment"># 设置资源来源的域名连接</span></span><br><span class="line">url=<span class="string">"http://www.baidu.com/"</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">"开始下载..."</span></span><br><span class="line">sleep 2</span><br><span class="line"><span class="built_in">type</span>=jpg</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 100`</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"正在下载<span class="variable">$i</span>.<span class="variable">$type</span>"</span></span><br><span class="line">  curl <span class="variable">$url</span>/<span class="variable">$i</span>.<span class="variable">$type</span> -o /tmp/<span class="variable">$&#123;i&#125;</span><span class="variable">$type</span></span><br><span class="line">     sleep 1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#curl 使用-o 选项指定下载文件另存到哪里.</span></span><br></pre></td></tr></table></figure><h3 id="34、自动对磁盘分区、格式化、挂载">34、自动对磁盘分区、格式化、挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 自动对磁盘分区、格式化、挂载</span></span><br><span class="line"><span class="comment"># 对虚拟机的 vdb 磁盘进行分区格式化,使用&lt;&lt;将需要的分区指令导入给程序 fdisk</span></span><br><span class="line"><span class="comment"># n(新建分区),p(创建主分区),1(分区编号为 1),两个空白行(两个回车,相当于将整个磁盘分一个区)</span></span><br><span class="line"><span class="comment"># 注意:1 后面的两个回车(空白行)是必须的!</span></span><br><span class="line">fdisk /dev/vdb &lt;&lt; EOF</span><br><span class="line">n</span><br><span class="line">p</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">wq</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment">#格式化刚刚创建好的分区</span></span><br><span class="line">mkfs.xfs   /dev/vdb1</span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建挂载点目录</span></span><br><span class="line"><span class="keyword">if</span> [ -e /data ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">mkdir /data</span><br><span class="line"> </span><br><span class="line"><span class="comment">#自动挂载刚刚创建的分区,并设置开机自动挂载该分区</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/dev/vdb1     /data    xfs    defaults        1 2'</span>  &gt;&gt; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure><h3 id="35、使用-tar-命令打包备份到-data目录">35、使用 tar 命令打包备份到/data目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 制定目录路径,脚本自动将该目录使用 tar 命令打包备份到/data目录 </span></span><br><span class="line"> </span><br><span class="line">[ ! -d /data ] &amp;&amp; mkdir /data</span><br><span class="line">[ -z <span class="variable">$1</span> ] &amp;&amp; <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span> ];<span class="keyword">then</span></span><br><span class="line">  tar -czf /data/<span class="variable">$1</span>.-`date +%Y%m%d`.tar.gz <span class="variable">$1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"该目录不存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="36、循环关闭局域网中所有主机">36、循环关闭局域网中所有主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 循环关闭局域网中所有主机 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 假设本机为 192.168.4.100,编写脚本关闭除自己外的其他所有主机</span></span><br><span class="line"><span class="comment"># 脚本执行,需要提前给所有其他主机传递 ssh 密钥,满足无密码连接</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  [ <span class="variable">$i</span> -eq 100 ] &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"正在关闭 192.168.4.<span class="variable">$i</span>..."</span></span><br><span class="line">  ssh 192.168.4.<span class="variable">$i</span> poweroff</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="37、获取本机-MAC-地址">37、获取本机 MAC 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取本机 MAC 地址</span></span><br><span class="line">ifconfig eth0|grep ether|awk <span class="string">'BEGIN&#123;printf "本机MAC地址信如下:"&#125;&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="38、自动配置-rsynd-服务器的配置文件-rsyncd-conf">38、自动配置 rsynd 服务器的配置文件 rsyncd.conf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自动配置 rsynd 服务器的配置文件 rsyncd.conf</span></span><br><span class="line"><span class="comment"># See rsyncd.conf man page for more options.</span></span><br><span class="line"></span><br><span class="line">[ ! -d /home/ftp ] &amp;&amp; mkdir /home/ftp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'uid = nobody</span></span><br><span class="line"><span class="string">gid = nobody</span></span><br><span class="line"><span class="string">use chroot = yes</span></span><br><span class="line"><span class="string">max connections = 4</span></span><br><span class="line"><span class="string">pid file = /var/run/rsyncd.pid</span></span><br><span class="line"><span class="string">exclude = lost+found/</span></span><br><span class="line"><span class="string">transfer logging = yes</span></span><br><span class="line"><span class="string">timeout = 900</span></span><br><span class="line"><span class="string">ignore nonreadable = yes</span></span><br><span class="line"><span class="string">dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2</span></span><br><span class="line"><span class="string">[ftp]</span></span><br><span class="line"><span class="string">    path = /home/ftp</span></span><br><span class="line"><span class="string">    comment = share'</span> &gt; /etc/rsyncd.conf</span><br></pre></td></tr></table></figure><h3 id="39、修改-Linux-系统的最大打开文件数量">39、修改 Linux 系统的最大打开文件数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改 Linux 系统的最大打开文件数量 </span></span><br><span class="line"><span class="comment"># 往/etc/security/limits.conf 文件的末尾追加两行配置参数,修改最大打开文件数量为 65536</span></span><br><span class="line">cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF</span><br><span class="line">* soft nofile  65536</span><br><span class="line">* hard nofile  65536</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="40、设置-Python-支持自动命令补齐功能">40、设置 Python 支持自动命令补齐功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置 Python 支持自动命令补齐功能 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Summary:Enable tab complete for python</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"> </span><br><span class="line">Needs import readline and rlcompleter module</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">import readline</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">import rlcompleter</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">help</span>(rlcompleter) display detail: readline.parse_and_bind(<span class="string">'tab: complete'</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">man python display detail: PYTHONSTARTUP variable</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>  [ ! -f /usr/bin/tab.py ];<span class="keyword">then</span></span><br><span class="line">  cat &gt;&gt; /usr/bin/tab.py &lt;&lt;EOF</span><br><span class="line">import readline</span><br><span class="line">import rlcompleter</span><br><span class="line">readline.parse_and_bind(<span class="string">'tab: complete'</span>)</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">sed  -i <span class="string">'$a export PYTHONSTARTUP=/usr/bin/tab.py'</span> /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="41、自动修改计划任务配置文件">41、自动修改计划任务配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自动修改计划任务配置文件 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入分钟信息(00‐59):"</span> min</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入小时信息(00‐24):"</span> hour</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入日期信息(01‐31):"</span> date</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入月份信息(01‐12):"</span> month</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入星期信息(00‐06):"</span> weak</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入计划任务需要执行的命令或脚本:"</span> program</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$min</span> <span class="variable">$hour</span> <span class="variable">$date</span> <span class="variable">$month</span> <span class="variable">$weak</span> <span class="variable">$program</span>"</span> &gt;&gt; /etc/crontab</span><br></pre></td></tr></table></figure><h3 id="42、找出-etc-passwd-中能登录的用户-并将对应在-etc-shadow-中第二列密码提出处理">42、找出/etc/passwd 中能登录的用户,并将对应在/etc/shadow 中第二列密码提出处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 找出/etc/passwd 中能登录的用户,并将对应在/etc/shadow 中第二列密码提出处理</span></span><br><span class="line"> </span><br><span class="line">user=$(awk -F: <span class="string">'/bash$/&#123;print $1&#125;'</span> /etc/passwd)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$user</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  awk -F: -v x=<span class="variable">$i</span> <span class="string">'$1==x&#123;print $1,$2&#125;'</span> /etc/shadow</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="43、统计-etc-passwd-中-root-出现的次数">43、统计/etc/passwd 中 root 出现的次数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计/etc/passwd 中 root 出现的次数 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#每读取一行文件内容,即从第 1 列循环到最后 1 列,依次判断是否包含 root 关键词,如果包含则 x++</span></span><br><span class="line">awk -F: <span class="string">'&#123;i=1;while(i&lt;=NF)&#123;if($i~/root/)&#123;x++&#125;;i++&#125;&#125; END&#123;print "root 出现次数为"x&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="44、统计-Linux-进程相关数量信息">44、统计 Linux 进程相关数量信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计 Linux 进程相关数量信息 </span></span><br><span class="line"> </span><br><span class="line">running=0</span><br><span class="line">sleeping=0</span><br><span class="line">stoped=0</span><br><span class="line">zombie=0</span><br><span class="line"><span class="comment"># 在 proc 目录下所有以数字开始的都是当前计算机正在运行的进程的进程 PID</span></span><br><span class="line"><span class="comment"># 每个 PID 编号的目录下记录有该进程相关的信息</span></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> /proc/[1‐9]*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  procs=$[procs+1]</span><br><span class="line">  <span class="built_in">stat</span>=$(awk <span class="string">'&#123;print $3&#125;'</span> <span class="variable">$pid</span>/<span class="built_in">stat</span>)</span><br><span class="line"><span class="comment"># 每个 pid 目录下都有一个 stat 文件,该文件的第 3 列是该进程的状态信息</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$stat</span> <span class="keyword">in</span></span><br><span class="line">    R)</span><br><span class="line">    running=$[running+1]</span><br><span class="line">    ;;</span><br><span class="line">    T)</span><br><span class="line">    stoped=$[stoped+1]</span><br><span class="line">    ;;</span><br><span class="line">    S)</span><br><span class="line">    sleeping=$[sleeping+1]</span><br><span class="line">    ;;</span><br><span class="line">    Z)</span><br><span class="line">     zombie=$[zombie+1]</span><br><span class="line">     ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"进程统计信息如下"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"总进程数量为:<span class="variable">$procs</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Running 进程数为:<span class="variable">$running</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Stoped 进程数为:<span class="variable">$stoped</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Sleeping 进程数为:<span class="variable">$sleeping</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Zombie 进程数为:<span class="variable">$zombie</span>"</span></span><br></pre></td></tr></table></figure><h3 id="45、显示本机-Linux-系统上所有开放的端口列表">45、显示本机 Linux 系统上所有开放的端口列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示本机 Linux 系统上所有开放的端口列表 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 从端口列表中观测有没有没用的端口,有的话可以将该端口对应的服务关闭,防止意外的攻击可能性</span></span><br><span class="line">ss -nutlp | awk <span class="string">'&#123;print $1,$5&#125;'</span> | awk -F<span class="string">"[: ]"</span> <span class="string">'&#123;print "协议:"$1,"端口号:"$NF&#125;'</span> | grep <span class="string">"[0‐9]"</span> | uniq</span><br></pre></td></tr></table></figure><h3 id="46、将-Linux-系统中-UID-大于等于-1000-的普通用户都删除">46、将 Linux 系统中 UID 大于等于 1000 的普通用户都删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将 Linux 系统中 UID 大于等于 1000 的普通用户都删除 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 先用 awk 提取所有 uid 大于等于 1000 的普通用户名称</span></span><br><span class="line"><span class="comment"># 再使用 for 循环逐个将每个用户删除即可</span></span><br><span class="line">user=$(awk -F: <span class="string">'$3&gt;=1000&#123;print $1&#125;'</span> /etc/passwd)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$user</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     userdel -r <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="47、脚本快速克隆-KVM-虚拟机">47、脚本快速克隆 KVM 虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写脚本快速克隆 KVM 虚拟机</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 本脚本针对 RHEL7.2 或 Centos7.2</span></span><br><span class="line"><span class="comment"># 本脚本需要提前准备一个 qcow2 格式的虚拟机模板,</span></span><br><span class="line"><span class="comment"># 名称为/var/lib/libvirt/images  /.rh7_template 的虚拟机模板</span></span><br><span class="line"><span class="comment"># 该脚本使用 qemu‐img 命令快速创建快照虚拟机</span></span><br><span class="line"><span class="comment"># 脚本使用 sed 修改模板虚拟机的配置文件,将虚拟机名称、UUID、磁盘文件名、MAC 地址</span></span><br><span class="line"><span class="comment"># exit code:  </span></span><br><span class="line"><span class="comment">#    65 ‐&gt; user input nothing</span></span><br><span class="line"><span class="comment">#    66 ‐&gt; user input is not a number</span></span><br><span class="line"><span class="comment">#    67 ‐&gt; user input out of range</span></span><br><span class="line"><span class="comment">#    68 ‐&gt; vm disk image exists</span></span><br><span class="line"> </span><br><span class="line">IMG_DIR=/var/lib/libvirt/images</span><br><span class="line">BASEVM=rh7_template</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Enter VM number: "</span> VMNUM</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$VMNUM</span> -le 9 ];<span class="keyword">then</span></span><br><span class="line">VMNUM=0<span class="variable">$VMNUM</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;VMNUM&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"You must input a number."</span></span><br><span class="line">    <span class="built_in">exit</span> 65</span><br><span class="line"><span class="keyword">elif</span> [[  <span class="variable">$&#123;VMNUM&#125;</span> =~ [a‐z]  ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"You must input a number."</span></span><br><span class="line">    <span class="built_in">exit</span> 66</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$&#123;VMNUM&#125;</span> -lt 1 -o <span class="variable">$&#123;VMNUM&#125;</span> -gt 99 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Input out of range"</span></span><br><span class="line">    <span class="built_in">exit</span> 67</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">NEWVM=rh7_node<span class="variable">$&#123;VMNUM&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$IMG_DIR</span>/<span class="variable">$&#123;NEWVM&#125;</span>.img ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"File exists."</span></span><br><span class="line">    <span class="built_in">exit</span> 68</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">"Creating Virtual Machine disk image......\t"</span></span><br><span class="line">qemu‐img create -f qcow2 ‐b <span class="variable">$IMG_DIR</span>/.<span class="variable">$&#123;BASEVM&#125;</span>.img <span class="variable">$IMG_DIR</span>/<span class="variable">$&#123;NEWVM&#125;</span>.img &amp;&gt; /dev/null</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[32;1m[OK]\e[0m"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#virsh dumpxml $&#123;BASEVM&#125; &gt; /tmp/myvm.xml</span></span><br><span class="line">cat /var/lib/libvirt/images/.rhel7.xml &gt; /tmp/myvm.xml</span><br><span class="line">sed -i <span class="string">"/&lt;name&gt;<span class="variable">$&#123;BASEVM&#125;</span>/s/<span class="variable">$&#123;BASEVM&#125;</span>/<span class="variable">$&#123;NEWVM&#125;</span>/"</span> /tmp/myvm.xml</span><br><span class="line">sed -i <span class="string">"/uuid/s/&lt;uuid&gt;.*&lt;\/uuid&gt;/&lt;uuid&gt;<span class="variable">$(uuidgen)</span>&lt;\/uuid&gt;/"</span> /tmp/myvm.xml</span><br><span class="line">sed -i <span class="string">"/<span class="variable">$&#123;BASEVM&#125;</span>\.img/s/<span class="variable">$&#123;BASEVM&#125;</span>/<span class="variable">$&#123;NEWVM&#125;</span>/"</span> /tmp/myvm.xml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改 MAC 地址,本例使用的是常量,每位使用该脚本的用户需要根据实际情况修改这些值 </span></span><br><span class="line"><span class="comment"># 最好这里可以使用便利,这样更适合于批量操作,可以克隆更多虚拟机 </span></span><br><span class="line">sed -i <span class="string">"/mac /s/a1/0c/"</span> /tmp/myvm.xml</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -en <span class="string">"Defining new virtual machine......\t\t"</span></span><br><span class="line">virsh define /tmp/myvm.xml &amp;&gt; /dev/null</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[32;1m[OK]\e[0m"</span></span><br></pre></td></tr></table></figure><h3 id="48、使用脚本开启关闭虚拟机">48、使用脚本开启关闭虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用脚本开启关闭虚拟机 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本通过调用virsh命令实现对虚拟机的管理,如果没有该命令,需要安装 libvirt‐client 软件包</span></span><br><span class="line"><span class="comment"># $1是脚本的第1个参数,$2是脚本的第2个参数</span></span><br><span class="line"><span class="comment"># 第1个参数是你希望对虚拟机进行的操作指令,第2个参数是虚拟机名称</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  list)</span><br><span class="line">    virsh list --all</span><br><span class="line">    ;;</span><br><span class="line">  start)</span><br><span class="line">    virsh start <span class="variable">$2</span></span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    virsh destroy <span class="variable">$2</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="built_in">enable</span>)</span><br><span class="line">    virsh autostart <span class="variable">$2</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="built_in">disable</span>)</span><br><span class="line">    virsh autostart --<span class="built_in">disable</span> <span class="variable">$2</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span> list"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span> [start|stop|enable|disable]  VM_name"</span></span><br><span class="line">    cat &lt;&lt; EOF</span><br><span class="line">    <span class="comment">#list      显示虚拟机列表</span></span><br><span class="line">    <span class="comment">#start     启动虚拟机</span></span><br><span class="line">    <span class="comment">#stop      关闭虚拟机</span></span><br><span class="line">    <span class="comment">#enable    设置虚拟机为开机自启</span></span><br><span class="line">    <span class="comment">#disable   关闭虚拟机开机自启功能</span></span><br><span class="line">    EOF</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="49、调整虚拟机内存参数的-shell-脚本">49、调整虚拟机内存参数的 shell 脚本 </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调整虚拟机内存参数的 shell 脚本 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本通过调用 virsh 命令实现对虚拟机的管理,如果没有该命令,需要安装 libvirt‐client 软件包</span></span><br><span class="line">cat &lt;&lt; EOF</span><br><span class="line">1.调整虚拟机最大内存数值</span><br><span class="line">2.调整实际分配给虚拟机的内存数值</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请选择[1‐2]:"</span> select</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$select</span> <span class="keyword">in</span></span><br><span class="line">  1)</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">"请输入虚拟机名称"</span> name</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">"请输入最大内存数值(单位:k):"</span> size</span><br><span class="line">      virsh setmaxmem <span class="variable">$name</span> --size <span class="variable">$size</span> --config</span><br><span class="line">      ;;</span><br><span class="line">  2)</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">"请输入虚拟机名称"</span> name</span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">"请输入实际分配内存数值(单位:k):"</span> size</span><br><span class="line">      virsh setmem <span class="variable">$name</span> <span class="variable">$size</span></span><br><span class="line">      ;;</span><br><span class="line">  *)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Error"</span></span><br><span class="line">      ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="50、查看-KVM-虚拟机中的网卡信息-不需要进入启动或进入虚拟机">50、查看 KVM 虚拟机中的网卡信息(不需要进入启动或进入虚拟机) </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看 KVM 虚拟机中的网卡信息(不需要进入启动或进入虚拟机) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 该脚本使用 guestmount 工具,可以将虚拟机的磁盘系统挂载到真实机文件系统中</span></span><br><span class="line"><span class="comment"># Centos7.2 中安装 libguestfs‐tools‐c 可以获得 guestmount 工具</span></span><br><span class="line"><span class="comment"># 虚拟机可以启动或者不启动都不影响该脚本的使用</span></span><br><span class="line"><span class="comment"># 将虚拟机磁盘文件挂载到文件系统后,就可以直接读取磁盘文件中的网卡配置文件中的数据</span></span><br><span class="line">clear</span><br><span class="line">mountpoint=<span class="string">"/media/virtimage"</span></span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; mkdir <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"输入虚拟机名称:"</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请稍后..."</span></span><br><span class="line"><span class="comment"># 如果有设备挂载到该挂载点,则先 umount 卸载</span></span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">"<span class="variable">$mountpoint</span>"</span> ;<span class="keyword">then</span></span><br><span class="line">  umount <span class="variable">$mountpoint</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 只读的方式,将虚拟机的磁盘文件挂载到特定的目录下,这里是/media/virtimage 目录</span></span><br><span class="line">guestmount -r -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m<span class="variable">$name</span> 虚拟机中网卡列表如下:\033[0m"</span></span><br><span class="line">dev=$(ls /media/virtimage/etc/sysconfig/network‐scripts/ifcfg-* |awk -F<span class="string">"[/‐]"</span> <span class="string">'&#123;print $9&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$dev</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"+++++++++++++++++++++++++++++++++++++++++++"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m 网卡 IP 地址信息如下:\033[0m"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$dev</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$i</span>:"</span></span><br><span class="line">  grep -q <span class="string">"IPADDR"</span> /media/virtimage/etc/sysconfig/network‐scripts/ifcfg-<span class="variable">$i</span> || <span class="built_in">echo</span> <span class="string">"未配置 IP地址"</span></span><br><span class="line">  awk -F= <span class="string">'/IPADDR/&#123;print $2&#125;'</span> /media/virtimage/etc/sysconfig/network-scripts/ifcfg-<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"+++++++++++++++++++++++++++++++++++++++++++"</span></span><br></pre></td></tr></table></figure><h3 id="51、不登陆虚拟机-修改虚拟机网卡-IP-地址">51、不登陆虚拟机,修改虚拟机网卡 IP 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 不登陆虚拟机,修改虚拟机网卡 IP 地址 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 该脚本使用 guestmount 工具,Centos7.2 中安装 libguestfs‐tools‐c 可以获得 guestmount 工具</span></span><br><span class="line"><span class="comment"># 脚本在不登陆虚拟机的情况下,修改虚拟机的 IP 地址信息</span></span><br><span class="line"><span class="comment"># 在某些环境下,虚拟机没有 IP 或 IP 地址与真实主机不在一个网段</span></span><br><span class="line"><span class="comment"># 真实主机在没有 virt‐manger 图形的情况下,远程连接虚拟机很麻烦</span></span><br><span class="line"><span class="comment"># 该脚本可以解决类似的问题</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入虚拟机名称:"</span> name</span><br><span class="line"><span class="keyword">if</span> virsh domstate <span class="variable">$name</span> | grep -q running ;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"修改虚拟机网卡数据,需要关闭虚拟机"</span></span><br><span class="line">  virsh destroy <span class="variable">$name</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">mountpoint=<span class="string">"/media/virtimage"</span></span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; mkdir <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请稍后..."</span></span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">"<span class="variable">$mountpoint</span>"</span> ;<span class="keyword">then</span></span><br><span class="line">  umount <span class="variable">$mountpoint</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">guestmount  -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入需要修改的网卡名称:"</span> dev</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入 IP 地址:"</span> addr</span><br><span class="line"><span class="comment"># 判断原本网卡配置文件中是否有 IP 地址,有就修改该 IP,没有就添加一个新的 IP 地址</span></span><br><span class="line"><span class="keyword">if</span> grep -q <span class="string">"IPADDR"</span>  <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg‐<span class="variable">$dev</span> ;<span class="keyword">then</span></span><br><span class="line">  sed -i <span class="string">"/IPADDR/s/=.*/=<span class="variable">$addr</span>/"</span>  <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg‐<span class="variable">$dev</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"IPADDR=<span class="variable">$addr</span>"</span> &gt;&gt; <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg‐<span class="variable">$dev</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 如果网卡配置文件中有客户配置的 IP 地址,则脚本提示修改 IP 完成</span></span><br><span class="line">awk -F= -v x=<span class="variable">$addr</span> <span class="string">'$2==x&#123;print "完成..."&#125;'</span>  <span class="variable">$mountpoint</span>/etc/sysconfig/network‐scripts/ifcfg-<span class="variable">$dev</span></span><br></pre></td></tr></table></figure><h3 id="52、破解虚拟机密码-无密码登陆虚拟机系统">52、破解虚拟机密码,无密码登陆虚拟机系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 破解虚拟机密码,无密码登陆虚拟机系统 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 该脚本使用 guestmount 工具,Centos7.2 中安装 libguestfs‐tools‐c 可以获得 guestmount 工具</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入虚拟机名称:"</span> name</span><br><span class="line"><span class="keyword">if</span> virsh domstate <span class="variable">$name</span> | grep -q running ;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"破解,需要关闭虚拟机"</span></span><br><span class="line">  virsh destroy <span class="variable">$name</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">mountpoint=<span class="string">"/media/virtimage"</span></span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; mkdir <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请稍后..."</span></span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">"<span class="variable">$mountpoint</span>"</span> ;<span class="keyword">then</span></span><br><span class="line">  umount <span class="variable">$mountpoint</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">guestmount -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span></span><br><span class="line"><span class="comment"># 将 passwd 中密码占位符号 x 删除,该账户即可实现无密码登陆系统</span></span><br><span class="line">sed -i <span class="string">"/^root/s/x//"</span> <span class="variable">$mountpoint</span>/etc/passwd</span><br></pre></td></tr></table></figure><h3 id="53、Shell-脚本对信号的处理-执行脚本后-按键盘-Ctrl-C-无法终止">53、Shell 脚本对信号的处理,执行脚本后,按键盘 Ctrl+C 无法终止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Shell 脚本对信号的处理,执行脚本后,按键盘 Ctrl+C 无法终止的脚本 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 trap 命令可以拦截用户通过键盘或 kill 命令发送过来的信号</span></span><br><span class="line"><span class="comment"># 使用 kill ‐l 可以查看 Linux 系统中所有的信号列表,其中 2 代表 Ctrl+C</span></span><br><span class="line"><span class="comment"># trap 当发现有用户 ctrl+C 希望终端脚本时,就执行 echo "暂停 10s";sleep 10 这两条命令</span></span><br><span class="line"><span class="comment"># 另外用户使用命令:[ kill ‐2 脚本的 PID ] 也可以中断脚本和 Ctrl+C 一样的效果,都会被 trap 拦截</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">'echo "暂停 10s";sleep 10'</span> 2</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"go go go"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="54、一键部署-memcached">54、一键部署 memcached</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一键部署 memcached </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本用源码来安装 memcached 服务器</span></span><br><span class="line"><span class="comment"># 注意:如果软件的下载链接过期了,请更新 memcached 的下载链接</span></span><br><span class="line">wget http://www.memcached.org/files/memcached-1.5.1.tar.gz</span><br><span class="line">yum -y install gcc</span><br><span class="line">tar -xf  memcached‐1.5.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> memcached‐1.5.1</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="55、一键配置-VNC-远程桌面服务器-无密码版本">55、一键配置 VNC 远程桌面服务器(无密码版本)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一键配置 VNC 远程桌面服务器(无密码版本)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本配置的 VNC 服务器,客户端无需密码即可连接</span></span><br><span class="line"><span class="comment"># 客户端仅有查看远程桌面的权限,没有鼠标和键盘的操作权限</span></span><br><span class="line"> </span><br><span class="line">rpm --quiet -q tigervnc‐server</span><br><span class="line"><span class="keyword">if</span> [  $? -ne  0 ];<span class="keyword">then</span></span><br><span class="line">  yum  -y  tigervnc‐server</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">x0vncserver AcceptKeyEvents=0 AlwaysShared=1 \</span><br><span class="line">AcceptPointerEvents=0 SecurityTypes=None  rfbport=5908</span><br></pre></td></tr></table></figure><h3 id="56、关闭-SELinux">56、关闭 SELinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭 SELinux </span></span><br><span class="line"> </span><br><span class="line">sed -i  <span class="string">'/^SELINUX/s/=.*/=disabled/'</span> /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h3 id="57、查看所有虚拟机磁盘使用量以及CPU使用量信息">57、查看所有虚拟机磁盘使用量以及CPU使用量信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看所有虚拟机磁盘使用量以及CPU使用量信息 </span></span><br><span class="line"> </span><br><span class="line">virt‐df</span><br><span class="line"><span class="built_in">read</span> -n1 <span class="string">"按任意键继续"</span> key</span><br><span class="line">virt‐top</span><br></pre></td></tr></table></figure><h3 id="58、根据计算机当前时间-返回问候语-可以将该脚本设置为开机启动">58、根据计算机当前时间,返回问候语,可以将该脚本设置为开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 根据计算机当前时间,返回问候语,可以将该脚本设置为开机启动 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 00‐12 点为早晨,12‐18 点为下午,18‐24 点为晚上</span></span><br><span class="line"><span class="comment"># 使用 date 命令获取时间后,if 判断时间的区间,确定问候语内容</span></span><br><span class="line">tm=$(date +%H)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$tm</span> -le 12 ];<span class="keyword">then</span></span><br><span class="line">  msg=<span class="string">"Good Morning <span class="variable">$USER</span>"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$tm</span> -gt 12 -a <span class="variable">$tm</span> -le 18 ];<span class="keyword">then</span></span><br><span class="line">    msg=<span class="string">"Good Afternoon <span class="variable">$USER</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    msg=<span class="string">"Good Night <span class="variable">$USER</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"当前时间是:<span class="variable">$(date +"%Y‐%m‐%d %H:%M:%S")</span>"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[34m<span class="variable">$msg</span>\033[0m"</span></span><br></pre></td></tr></table></figure><h3 id="59、读取用户输入的账户名称-将账户名写入到数组保存">59、读取用户输入的账户名称,将账户名写入到数组保存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 读取用户输入的账户名称,将账户名写入到数组保存 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义数组名称为 name,数组的下标为 i,小标从 0 开始,每输入一个账户名,下标加 1,继续存下一个账户</span></span><br><span class="line"><span class="comment"># 最后,输入 over,脚本输出总结性信息后脚本退出</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"请输入账户名,输入 over 结束:"</span> key</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$key</span> == <span class="string">"over"</span> ];<span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    name[<span class="variable">$i</span>]=<span class="variable">$key</span></span><br><span class="line">    <span class="built_in">let</span> i++</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"总账户名数量:<span class="variable">$&#123;#name[*]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;name[@]&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="60、判断文件或目录是否存在">60、判断文件或目录是否存在</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 判断文件或目录是否存在 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ] ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"未输入任何参数,请输入参数"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"用法:<span class="variable">$0</span> [文件名|目录名]"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$1</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"该文件,存在"</span></span><br><span class="line">  ls -l <span class="variable">$1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"没有该文件"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -d  <span class="variable">$1</span> ];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"该目录,存在"</span></span><br><span class="line">     ls -ld  <span class="variable">$2</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"没有该目录"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="61、打印各种格式的时间">61、打印各种格式的时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印各种时间格式 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示星期简称(如:Sun)"</span></span><br><span class="line">date +%a</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示星期全称(如:Sunday)"</span></span><br><span class="line">date +%A</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示月份简称(如:Jan)"</span></span><br><span class="line">date +%b</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示月份全称(如:January)"</span></span><br><span class="line">date +%B</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示数字月份(如:12)"</span></span><br><span class="line">date +%m</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示数字日期(如:01 号)"</span></span><br><span class="line">date +%d</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示数字年(如:01 号)"</span></span><br><span class="line">date +%Y <span class="built_in">echo</span> <span class="string">"显示年‐月‐日"</span></span><br><span class="line">date +%F</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示小时(24 小时制)"</span></span><br><span class="line">date +%H</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示分钟(00..59)"</span></span><br><span class="line">date +%M</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示秒"</span></span><br><span class="line">date +%S</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"显示纳秒"</span></span><br><span class="line">date +%N</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"组合显示"</span></span><br><span class="line">date +<span class="string">"%Y%m%d %H:%M:%S"</span></span><br></pre></td></tr></table></figure><h3 id="62、使用-egrep-过滤-MAC-地址">62、使用 egrep 过滤 MAC 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 egrep 过滤 MAC 地址 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># MAC 地址由 16 进制组成,如 AA:BB:CC:DD:EE:FF</span></span><br><span class="line"><span class="comment"># [0‐9a‐fA‐F]&#123;2&#125;表示一段十六进制数值,&#123;5&#125;表示连续出现5组前置:的十六进制</span></span><br><span class="line">egrep <span class="string">"[0‐9a‐fA‐F]&#123;2&#125;(:[0‐9a‐fA‐F]&#123;2&#125;)&#123;5&#125;"</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><h3 id="63、生成签名私钥和证书">63、生成签名私钥和证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 生成签名私钥和证书 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入存放证书的目录:"</span> dir</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$dir</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"该目录不存在"</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入密钥名称:"</span> name</span><br><span class="line"><span class="comment"># 使用 openssl 生成私钥</span></span><br><span class="line">openssl genrsa -out <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;name&#125;</span>.key</span><br><span class="line"><span class="comment"># 使用 openssl 生成证书 #subj 选项可以在生成证书时,非交互自动填写 Common Name 信息</span></span><br><span class="line">openssl req -new -x509 -key <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;name&#125;</span>.key -subj <span class="string">"/CN=common"</span> -out <span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;name&#125;</span>.crt</span><br></pre></td></tr></table></figure><h3 id="64、使用awk编写的wc程序">64、使用awk编写的wc程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用awk编写的wc程序 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自定义变量 chars 变量存储字符个数,自定义变量 words 变量存储单词个数</span></span><br><span class="line"><span class="comment"># awk 内置变量 NR 存储行数</span></span><br><span class="line"><span class="comment"># length()为 awk 内置函数,用来统计每行的字符数量,因为每行都会有一个隐藏的$,所以每次统计后都+1</span></span><br><span class="line"><span class="comment"># wc 程序会把文件结尾符$也统计在内,可以使用 cat ‐A 文件名,查看该隐藏字符</span></span><br><span class="line">awk <span class="string">'&#123;chars+=length($0)+1;words+=NF&#125; END&#123;print NR,words,chars&#125;'</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><h2 id="二、游戏相关">二、游戏相关</h2><h3 id="1、猜数字游戏">1、猜数字游戏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 脚本生成一个 100 以内的随机数,提示用户猜数字,根据用户的输入,提示用户猜对了,</span></span><br><span class="line"><span class="comment"># 猜小了或猜大了,直至用户猜对脚本结束。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># RANDOM 为系统自带的系统变量,值为 0‐32767的随机数</span></span><br><span class="line"><span class="comment"># 使用取余算法将随机数变为 1‐100 的随机数</span></span><br><span class="line">num=$[RANDOM%100+1]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$num</span>"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 read 提示用户猜数字</span></span><br><span class="line"><span class="comment"># 使用 if 判断用户猜数字的大小关系:‐eq(等于),‐ne(不等于),‐gt(大于),‐ge(大于等于),</span></span><br><span class="line"><span class="comment"># ‐lt(小于),‐le(小于等于)</span></span><br><span class="line"><span class="keyword">while</span>  :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">read</span> -p <span class="string">"计算机生成了一个 1‐100 的随机数,你猜: "</span> cai</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$cai</span> -eq <span class="variable">$num</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">"恭喜,猜对了"</span></span><br><span class="line">         <span class="built_in">exit</span></span><br><span class="line">      <span class="keyword">elif</span> [ <span class="variable">$cai</span> -gt <span class="variable">$num</span> ]</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">"Oops,猜大了"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">"Oops,猜小了"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="2、石头、剪刀、布游戏">2、石头、剪刀、布游戏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写脚本,实现人机&lt;石头,剪刀,布&gt;游戏</span></span><br><span class="line">game=(石头 剪刀 布)</span><br><span class="line">num=$[RANDOM%3]</span><br><span class="line">computer=<span class="variable">$&#123;game[$num]&#125;</span></span><br><span class="line"><span class="comment"># 通过随机数获取计算机的出拳</span></span><br><span class="line"><span class="comment"># 出拳的可能性保存在一个数组中,game[0],game[1],game[2]分别是 3 中不同的可能</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"请根据下列提示选择您的出拳手势"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1.石头"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2.剪刀"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"3.布"</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请选择 1‐3:"</span> person</span><br><span class="line"><span class="keyword">case</span>  <span class="variable">$person</span>  <span class="keyword">in</span></span><br><span class="line">1)</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"平局"</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 1 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"你赢"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"计算机赢"</span></span><br><span class="line">  <span class="keyword">fi</span>;;</span><br><span class="line">2)   </span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"计算机赢"</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 1 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"平局"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你赢"</span></span><br><span class="line">  <span class="keyword">fi</span>;;</span><br><span class="line">3)</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你赢"</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -eq 1 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"计算机赢"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"平局"</span></span><br><span class="line">  <span class="keyword">fi</span>;;</span><br><span class="line">*)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"必须输入 1‐3 的数字"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="3、9-9-乘法表">3、9*9 乘法表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 9*9 乘法表(编写 shell 脚本,打印 9*9 乘法表) </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 9`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> `seq <span class="variable">$i</span>`</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">         <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$j</span>*<span class="variable">$i</span>=$[i*j]  "</span></span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="4、点名器脚本">4、点名器脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编写一个点名器脚本</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 该脚本,需要提前准备一个 user.txt 文件</span></span><br><span class="line"><span class="comment"># 该文件中需要包含所有姓名的信息,一行一个姓名,脚本每次随机显示一个姓名</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment">#统计 user 文件中有多少用户</span></span><br><span class="line">line=`cat user.txt |wc ‐l`</span><br><span class="line">num=$[RANDOM%line+1]</span><br><span class="line">sed -n <span class="string">"<span class="variable">$&#123;num&#125;</span>p"</span>  user.txt</span><br><span class="line">sleep 0.2</span><br><span class="line">clear</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="5、对-100-以内的所有正整数相加求和">5、对 100 以内的所有正整数相加求和</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 对 100 以内的所有正整数相加求和(1+2+3+4...+100)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#seq 100 可以快速自动生成 100 个整数</span></span><br><span class="line">sum=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 100`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    sum=$[sum+i]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"总和是:<span class="variable">$sum</span>"</span></span><br></pre></td></tr></table></figure><h3 id="6、打印国际象棋棋盘">6、打印国际象棋棋盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印国际象棋棋盘</span></span><br><span class="line"><span class="comment"># 设置两个变量,i 和 j,一个代表行,一个代表列,国际象棋为 8*8 棋盘</span></span><br><span class="line"><span class="comment"># i=1 是代表准备打印第一行棋盘,第 1 行棋盘有灰色和蓝色间隔输出,总共为 8 列</span></span><br><span class="line"><span class="comment"># i=1,j=1 代表第 1 行的第 1 列;i=2,j=3 代表第 2 行的第 3 列</span></span><br><span class="line"><span class="comment"># 棋盘的规律是 i+j 如果是偶数,就打印蓝色色块,如果是奇数就打印灰色色块</span></span><br><span class="line"><span class="comment"># 使用 echo ‐ne 打印色块,并且打印完成色块后不自动换行,在同一行继续输出其他色块</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..8&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> &#123;1..8&#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      sum=$[i+j]</span><br><span class="line">    <span class="keyword">if</span> [  $[sum%2] -eq 0 ];<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> -ne <span class="string">"\033[46m  \033[0m"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> -ne <span class="string">"\033[47m  \033[0m"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="7、提示用户输入年份后判断该年是否为闰年">7、提示用户输入年份后判断该年是否为闰年</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提示用户输入年份后判断该年是否为闰年</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 能被4整除并且并不能被100整除的年份是闰年</span></span><br><span class="line"><span class="comment"># 能被400整除的年份也是闰年</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入一个年份:"</span> year</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$year</span>"</span> = <span class="string">""</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"没有输入年份"</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#使用正则测试变量 year 中是否包含大小写字母</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$year</span>"</span> =~ [a‐Z] ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你输入的不是数字"</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 判断是否为闰年</span></span><br><span class="line"><span class="keyword">if</span> [ $[year % 4] -eq 0 ] &amp;&amp; [ $[year % 100] -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$year</span>年是闰年"</span>  </span><br><span class="line"><span class="keyword">elif</span> [ $[year % 400] -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$year</span>年是闰年"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$year</span>年不是闰年"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="8、使用脚本循环创建三位数字的文本文件-111-999-的文件">8、使用脚本循环创建三位数字的文本文件(111-999 的文件)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用脚本循环创建三位数字的文本文件(111-999 的文件) </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> &#123;1..9&#125;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> &#123;1..9&#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      touch /tmp/<span class="variable">$i</span><span class="variable">$j</span><span class="variable">$k</span>.txt</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="9、从键盘读取一个论坛积分-判断论坛用户等级">9、从键盘读取一个论坛积分,判断论坛用户等级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 从键盘读取一个论坛积分,判断论坛用户等级</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#等级分类如下:</span></span><br><span class="line"><span class="comment">#  大于等于 90        神功绝世</span></span><br><span class="line"><span class="comment">#  大于等于 80,小于 90       登峰造极</span></span><br><span class="line"><span class="comment">#  大于等于 70,小于 80       炉火纯青</span></span><br><span class="line"><span class="comment">#  大于等于 60,小于 70       略有小成</span></span><br><span class="line"><span class="comment">#  小于 60               初学乍练</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入积分(0‐100):"</span> JF</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$JF</span> -ge 90 ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,神功绝世"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$JF</span> -ge 80 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,登峰造极"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$JF</span> -ge 70 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,炉火纯青"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$JF</span> -lt 60 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,略有小成"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$JF</span> 分,初学乍练"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="10、判断用户输入的数据类型-字母、数字或其他">10、判断用户输入的数据类型(字母、数字或其他) </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 判断用户输入的数据类型(字母、数字或其他) </span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入一个字符:"</span> KEY</span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$KEY</span>"</span> <span class="keyword">in</span></span><br><span class="line">  [a‐z]|[A‐Z])</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"字母"</span> </span><br><span class="line">    ;;</span><br><span class="line">  [0‐9])</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"数字"</span> </span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"空格、功能键或其他控制字符"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="11、打印斐波那契数列">11、打印斐波那契数列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印斐波那契数列(该数列的特点是后一个数字,永远都是前 2 个数字之和) </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 斐波那契数列后一个数字永远是前 2 个数字之和</span></span><br><span class="line"><span class="comment"># 如:0  1  1  2  3  5  8  13 ... ...</span></span><br><span class="line">list=(0 1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 2 11`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  list[<span class="variable">$i</span>]=`expr <span class="variable">$&#123;list[‐1]&#125;</span> + <span class="variable">$&#123;list[‐2]&#125;</span>`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list[@]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="12、判断用户输入的是-Yes-或-NO">12、判断用户输入的是 Yes 或 NO</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 判断用户输入的是 Yes 或 NO </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">read</span> -p  <span class="string">"Are you sure?[y/n]:"</span>  sure</span><br><span class="line"><span class="keyword">case</span>  <span class="variable">$sure</span>  <span class="keyword">in</span></span><br><span class="line">  y|Y|Yes|YES)  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"you enter <span class="variable">$a</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    n|N|NO|no)</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"you enter <span class="variable">$a</span>"</span></span><br><span class="line">     ;;</span><br><span class="line">    *)</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"error"</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="13、使用-shell-脚本打印图形">13、使用 shell 脚本打印图形</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 shell 脚本打印如下图形: </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打印第一组图片</span></span><br><span class="line"><span class="comment"># for(())为类 C 语言的语法格式,也可以使用 for i  in;do  ;done 的格式替换</span></span><br><span class="line"><span class="comment"># for((i=1;i&lt;=9;i++))循环会执行 9 次,i 从 1 开始到 9,每循环一次 i 自加 1</span></span><br><span class="line">clear</span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=9; i++ ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$i</span>"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">read</span>  -n1  <span class="string">"按任意键继续"</span>  key</span><br><span class="line"><span class="comment">#打印第二组图片</span></span><br><span class="line">clear</span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=5; i++ )) </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">" |"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"_ "</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">read</span>  -n1  <span class="string">"按任意键继续"</span>  key</span><br><span class="line"><span class="comment">#打印第三组图片</span></span><br><span class="line">clear</span><br><span class="line"><span class="keyword">for</span> (( i=1; i&lt;=5; i++ ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">" *"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> (( i=5; i&gt;=1; i-- ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> (( j=1; j&lt;=i; j++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">" *"</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="14、统计双色球各个数字的中奖概率">14、统计双色球各个数字的中奖概率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计双色球各个数字的中奖概率 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 往期双色球中奖号码如下:</span></span><br><span class="line"><span class="comment"># 01 04 11 28 31 32  16</span></span><br><span class="line"><span class="comment"># 04 07 08 18 23 24  02</span></span><br><span class="line"><span class="comment"># 02 05 06 16 28 29  04</span></span><br><span class="line"><span class="comment"># 04 19 22 27 30 33  01</span></span><br><span class="line"><span class="comment"># 05 10 18 19 30 31  03</span></span><br><span class="line"><span class="comment"># 02 06 11 12 19 29  06</span></span><br><span class="line"><span class="comment"># 统计篮球和红球数据出现的概率次数(篮球不分顺序,统计所有篮球混合在一起的概率)</span></span><br><span class="line">awk <span class="string">'&#123;print $1"\n"$2"\n"$3"\n"$4"\n"$5"\n"$6&#125;'</span> 1.txt | sort | uniq -c | sort</span><br><span class="line">awk <span class="string">'&#123;print $7&#125;'</span> 1.txt | sort | uniq -c | sort</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Linux运维监控相关&quot;&gt;一、Linux运维监控相关&lt;/h2&gt;
&lt;h3 id=&quot;1、创建-Linux-系统账户及密码&quot;&gt;1、创建 Linux 系统账户及密码&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通过位置变量创建 Linux 系统账户及密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#$1 是执行脚本的第一个参数,$2 是执行脚本的第二个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useradd    &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;  |  passwd  ‐‐stdin  &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示用户输入用户名和密码,脚本自动创建相应的账户及配置密码。如果用户不输入账户名,则提示必须输入账户名并退出脚本;如果用户不输入密码,则统一使用默认的 123456 作为默认密码&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://www.shawn22.xyz/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux-Systemd教程</title>
    <link href="https://www.shawn22.xyz/posts/523c86a2.html"/>
    <id>https://www.shawn22.xyz/posts/523c86a2.html</id>
    <published>2022-09-28T09:34:28.000Z</published>
    <updated>2022-09-28T09:42:03.361Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Systemd 概述</h1><h2 id="1、简介">1、简介</h2><p>Systemd 是一系列工具的集合，其作用也远远不仅是启动操作系统，它还接管了后台服务、结束、状态查询，以及日志归档、设备管理、电源管理、定时任务等许多职责，并支持通过特定事件（如插入特定 USB 设备）和特定端口数据触发的 On-demand（按需）任务。</p><p>Systemd 的后台服务还有一个特殊的身份——它是系统中 PID 值为 1 的进程。</p><h2 id="2、Systemd-架构">2、Systemd 架构</h2><p><img src="https://img-blog.csdnimg.cn/b4d8019a19b54fe3a57a30c21a0c6934.png" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="3、Systemd系统管理">3、Systemd系统管理</h2><p>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面，systemctl是 Systemd 的主命令，用于管理系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ===============systemctl是 Systemd 的主命令，用于管理系统=================</span></span><br><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">sudo systemctl reboot</span><br><span class="line"><span class="comment"># 关闭系统，切断电源</span></span><br><span class="line">sudo systemctl poweroff</span><br><span class="line"><span class="comment"># CPU停止工作</span></span><br><span class="line">sudo systemctl halt</span><br><span class="line"><span class="comment"># 暂停系统</span></span><br><span class="line">sudo systemctl <span class="built_in">suspend</span></span><br><span class="line"><span class="comment"># 让系统进入冬眠状态</span></span><br><span class="line">sudo systemctl hibernate</span><br><span class="line"><span class="comment"># 让系统进入交互式休眠状态</span></span><br><span class="line">sudo systemctl hybrid-sleep</span><br><span class="line"><span class="comment"># 启动进入救援状态（单用户状态）</span></span><br><span class="line">sudo systemctl rescue</span><br><span class="line"></span><br><span class="line"><span class="comment">#================systemd-analyze命令用于查看启动耗时======================</span></span><br><span class="line"><span class="comment"># 查看启动耗时</span></span><br><span class="line">systemd-analyze</span><br><span class="line"><span class="comment"># 查看每个服务的启动耗时</span></span><br><span class="line">systemd-analyze blame</span><br><span class="line"><span class="comment"># 显示瀑布状的启动过程流</span></span><br><span class="line">systemd-analyze critical-chain</span><br><span class="line"><span class="comment"># 显示指定服务的启动流</span></span><br><span class="line">systemd-analyze critical-chain atd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===============hostnamectl命令用于查看当前主机的信息=======================</span></span><br><span class="line"><span class="comment"># 显示当前主机的信息</span></span><br><span class="line">hostnamectl</span><br><span class="line"><span class="comment"># 设置主机名。</span></span><br><span class="line">sudo hostnamectl <span class="built_in">set</span>-hostname rhel7</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================localectl命令用于查看本地化设置============================</span></span><br><span class="line"><span class="comment"># 查看本地化设置</span></span><br><span class="line">localectl</span><br><span class="line"><span class="comment"># 设置本地化参数。</span></span><br><span class="line">sudo localectl <span class="built_in">set</span>-locale LANG=en_GB.utf8</span><br><span class="line">sudo localectl <span class="built_in">set</span>-keymap en_GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================timedatectl命令用于查看当前时区设置=======================</span></span><br><span class="line"><span class="comment"># 查看当前时区设置</span></span><br><span class="line">timedatectl</span><br><span class="line"><span class="comment"># 显示所有可用的时区</span></span><br><span class="line">timedatectl list-timezones</span><br><span class="line"><span class="comment"># 设置当前时区</span></span><br><span class="line">sudo timedatectl <span class="built_in">set</span>-timezone America/New_York</span><br><span class="line">sudo timedatectl <span class="built_in">set</span>-time YYYY-MM-DD</span><br><span class="line">sudo timedatectl <span class="built_in">set</span>-time HH:MM:SS</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================loginctl命令用于查看当前登录的用户========================</span></span><br><span class="line"><span class="comment"># 列出当前session</span></span><br><span class="line">loginctl list-sessions</span><br><span class="line"><span class="comment"># 列出当前登录用户</span></span><br><span class="line">loginctl list-users</span><br><span class="line"><span class="comment"># 列出显示指定用户的信息</span></span><br><span class="line">loginctl show-user shawn</span><br></pre></td></tr></table></figure><h2 id="4、Systemd-的-Unit-文件">4、Systemd 的 Unit 文件</h2><blockquote><p>Systemd 可以管理所有系统资源，不同的资源统称为 Unit（单位）。在 Systemd 的生态圈中，Unit 文件统一了过去各种不同系统资源配置格式，例如服务的启/停、定时任务、设备自动挂载、网络配置、虚拟内存配置等。而 Systemd 通过不同的文件后缀来区分这些配置文件</p></blockquote><h3 id="4-1-12-种-Unit-文件类型">4.1 12 种 Unit 文件类型</h3><ul><li><p>automount：用于控制自动挂载文件系统，相当于 SysV-init 的 autofs 服务</p></li><li><p>device：对于 /dev 目录下的设备，主要用于定义设备之间的依赖关系</p></li><li><p>mount：定义系统结构层次中的一个挂载点，可以替代过去的 /etc/fstab 配置文件</p></li><li><p>path：用于监控指定目录或文件的变化，并触发其它 Unit 运行</p></li><li><p>scope：这种 Unit 文件不是用户创建的，而是 Systemd 运行时产生的，描述一些系统服务的分组信息</p></li><li><p>service：封装守护进程的启动、停止、重启和重载操作，是<strong>最常见的一种 Unit 文件</strong></p></li><li><p>slice：用于表示一个 CGroup 的树，通常用户不会自己创建这样的 Unit 文件</p></li><li><p>snapshot：用于表示一个由 systemctl snapshot 命令创建的 Systemd Units 运行状态快照</p></li><li><p>socket：<strong>监控来自于系统或网络的数据消息，用于实现基于数据自动触发服务启动</strong></p></li><li><p>swap：定义一个用户做虚拟内存的交换分区</p></li><li><p>target：用于对 Unit 文件进行逻辑分组，引导其它 Unit 的执行。它替代了 SysV-init 运行级别的作用，并提供更灵活的基于特定设备事件的启动方式</p></li><li><p>timer：<strong>用于配置在特定时间触发的任务，替代了 Crontab 的功能</strong></p></li></ul><h3 id="4-2-Systemd-目录">4.2 Systemd 目录</h3><p>Unit 文件按照 Systemd 约定，应该被放置指定的三个系统目录之一中。这三个目录是有优先级的，如下所示，越靠上的优先级越高。因此，在三个目录中有同名文件的时候，只有优先级最高的目录里的那个文件会被使用。</p><ul><li><p><code>/etc/systemd/system</code>：系统或用户自定义的配置文件</p></li><li><p><code>/run/systemd/system</code>：软件运行时生成的配置文件</p></li><li><p><code>/usr/lib/systemd/system</code>：系统或第三方软件安装时添加的配置文件</p><ul><li><p>CentOS ：Unit 文件指向该目录</p></li><li><p>ubuntu ：被移到了 /lib/systemd/system</p></li></ul></li></ul><p>Systemd 默认从目录 <code>/etc/systemd/system/</code> 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 <code>/usr/lib/systemd/system/</code>，真正的配置文件存放在那个目录</p><h3 id="4-3-Unit-和-Target">4.3 Unit 和 Target</h3><ul><li><p><strong>Unit 是 Systemd 管理系统资源的基本单元</strong>，可以认为每个系统资源就是一个 Unit，并使用一个 Unit 文件定义。在 Unit 文件中需要包含相应服务的描述、属性以及需要运行的命令</p></li><li><p>Target 是 Systemd 中用于指定系统资源启动组的方式，相当于 SysV-init 中的运行级别</p></li></ul><p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于&quot;状态点&quot;，启动某个 Target 就好比启动到某种状态。</p><h1>二、Systemd Service Unit</h1><h2 id="1、简介-v2">1、简介</h2><p>Systemd 服务的 Unit 文件可以分为三个配置区段：</p><ul><li><p>Unit 和 Install 段：所有 Unit 文件通用，用于配置服务（或其它系统资源）的描述、依赖和随系统启动的方式</p></li><li><p>Service 段：服务（Service）类型的 Unit 文件（后缀为 .service）特有的，用于定义服务的具体管理和操作方法</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Hello World</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStartPre=-/usr/bin/docker <span class="built_in">kill</span> busybox1</span><br><span class="line">ExecStartPre=-/usr/bin/docker rm busybox1</span><br><span class="line">ExecStartPre=/usr/bin/docker pull busybox</span><br><span class="line">ExecStart=/usr/bin/docker run --name busybox1 busybox /bin/ sh -c <span class="string">"while true; do echo Hello World; sleep 1; done"</span></span><br><span class="line">ExecStop=<span class="string">"/usr/bin/docker stop busybox1"</span></span><br><span class="line">ExecStopPost=<span class="string">"/usr/bin/docker rm busybox1"</span></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="2、Service类型Unit结构详解-常用">2、Service类型Unit结构详解(常用)</h2><h3 id="2-1-Unit段">2.1 Unit段</h3><ul><li><p>Description：描述这个 Unit 文件的信息</p></li><li><p>Documentation：指定服务的文档，可以是一个或多个文档的 URL 路径</p></li><li><p>Requires：依赖的其它 Unit 列表，列在其中的 Unit 模板会在这个服务启动时的同时被启动。并且，如果其中任意一个服务启动失败，这个服务也会被终止</p></li><li><p>Wants：与 Requires 相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模板启动是否成功</p></li><li><p>After：与 Requires 相似，但是在后面列出的所有模块全部启动完成以后，才会启动当前的服务</p></li><li><p>Before：与 After 相反，在启动指定的任务一个模块之间，都会首先确证当前服务已经运行</p></li><li><p>Binds To：与 Requires 相似，失败时失败，成功时成功，但是在这些模板中有任意一个出现意外结束或重启时，这个服务也会跟着终止或重启</p></li><li><p>Part Of：一个 Bind To 作用的子集，仅在列出的任务模块失败或重启时，终止或重启当前服务，而不会随列出模板的启动而启动</p></li><li><p>OnFailure：当这个模板启动失败时，就会自动启动列出的每个模块</p></li><li><p>Conflicts：与这个模块有冲突的模块，如果列出的模块中有已经在运行的，这个服务就不能启动，反之亦然</p></li></ul><h3 id="2-2-Install-段">2.2 Install 段</h3><p>这部分配置的目标模块通常是特定运行目标的 <strong>.target</strong> 文件，用来使得服务在系统启动时自动运行。这个区段可以包含三种启动约束：</p><ul><li><p>WantedBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入 <code>/etc/systemd/system</code> 目录下面以 <code>&lt;Target 名&gt; + .wants</code> 后缀构成的子目录中，如 <code>/etc/systemd/system/multi-user.target.wants/</code></p></li><li><p>RequiredBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入 <code>/etc/systemd/system</code> 目录下面以 <code>&lt;Target 名&gt; + .required</code> 后缀构成的子目录中</p></li><li><p>Also：当前 Unit <code>enable/disable</code> 时，<strong>同时 enable/disable 的其他 Unit</strong></p></li><li><p>Alias：<strong>当前 Unit 可用于启动的别名</strong></p></li></ul><h3 id="2-3-Service-段-重要">2.3 Service 段(重要)</h3><p>用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段分为服务生命周期和服务上下文配置两个方面</p><p><strong>服务生命周期控制相关</strong></p><ul><li><p>Type：<strong>定义启动时的进程行为</strong>，它有以下几种值：</p><ul><li><p>Type=simple：默认值，执行ExecStart指定的命令，启动主进程</p></li><li><p>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</p></li><li><p>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</p></li><li><p>Type=dbus：当前服务通过D-Bus启动</p></li><li><p>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</p></li><li><p>Type=idle：若有其他任务执行完毕，当前服务才会运行</p></li></ul></li><li><p>RemainAfterExit：值为 true 或 false（默认）。当配置为 true 时，Systemd 只会负责启动服务进程，之后即便服务进程退出了，Systemd 也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。</p></li><li><p><strong>ExecStart</strong>：启动当前服务的命令</p></li><li><p>ExecStartPre：启动当前服务之前执行的命令</p></li><li><p>ExecStartPost：启动当前服务之后执行的命令</p></li><li><p><strong>ExecReload</strong>：重启当前服务时执行的命令</p></li><li><p><strong>ExecStop</strong>：停止当前服务时执行的命令</p></li><li><p>ExecStopPost：停止当其服务之后执行的命令</p></li><li><p>RestartSec：自动重启当前服务间隔的秒数</p></li><li><p><strong>Restart</strong>：定义何种情况 Systemd 会自动重启当前服务，可能的值包括 always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</p></li><li><p>TimeoutStartSec：启动服务时等待的秒数，这一配置<strong>对于使用 Docker 容器</strong>而言显得尤为重要，因其第一次运行时可能需要下载镜像，严重延时会容易被 Systemd 误判为启动失败杀死。通常，对于这种服务，将此值指定为 0，从而关闭超时检测</p></li><li><p>TimeoutStopSec：停止服务时的等待秒数，如果超过这个时间仍然没有停止，Systemd 会使用 SIGKILL 信号强行杀死服务的进程</p></li><li><p>KillMode：定义 Systemd 如何停止 sshd 服务。</p><ul><li><p>control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉</p></li><li><p>process：只杀主进程</p></li><li><p>mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号</p></li><li><p>none：没有进程会被杀掉，只是执行服务的 stop 命令。</p></li></ul></li></ul><p><strong>服务上下文配置相关</strong></p><ul><li><p>Environment：为服务指定环境变量</p></li><li><p>EnvironmentFile：指定加载一个包含服务所需的环境变量的列表的文件，文件中的每一行都是一个环境变量的定义，该文件内部的<code>key=value</code>键值对，可以用<code>$key</code>的形式，在当前配置文件中获取</p></li><li><p>Nice：服务的进程优先级，值越小优先级越高，默认为 0。其中 -20 为最高优先级，19 为最低优先级</p></li><li><p>WorkingDirectory：指定服务的工作目录</p></li><li><p>RootDirectory：指定服务进程的根目录（/ 目录）。如果配置了这个参数，服务将无法访问指定目录以外的任何文件</p></li><li><p>User：指定运行服务的用户</p></li><li><p>Group：指定运行服务的用户组</p></li><li><p>MountFlags：服务的 Mount Namespace 配置，会影响进程上下文中挂载点的信息，即服务是否会继承主机上已有挂载点，以及如果服务运行执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为 shared、slaved 或 private</p><ul><li><p>shared：服务与主机共用一个 Mount Namespace，继承主机挂载点，且服务挂载或卸载设备会真实地反映到主机上</p></li><li><p>slave：服务使用独立的 Mount Namespace，它会继承主机挂载点，但服务对挂载点的操作只有在自己的 Namespace 内生效，不会反映到主机上</p></li><li><p>private：服务使用独立的 Mount Namespace，它在启动时没有任何任何挂载点，服务对挂载点的操作也不会反映到主机上</p></li></ul></li><li><p>LimitCPU / LimitSTACK / LimitNOFILE / LimitNPROC 等：限制特定服务的系统资源量，例如 CPU、程序堆栈、文件句柄数量、子进程数量等</p></li><li><p>日志相关类，这里输出到journal，否则默认syslog</p><p>StandardError=journal</p><p>StandardOutput=journal</p><p>StandardInput=null</p></li></ul><blockquote><p>注意：<strong>如果在 ExecStart、ExecStop 等属性中使用了 Linux 命令，则必须要写出完整的绝对路径</strong>。对于 <code>ExecStartPre </code>和 <code>ExecStartPost </code>辅助命令，若<strong>前面有个 “-” 符号，表示忽略这些命令的出错</strong>。因为有些 “辅助” 命令本来就不一定成功，比如尝试清空一个文件，但文件可能不存在。</p></blockquote><h2 id="3、Unit-文件占位符和模板">3、Unit 文件占位符和模板</h2><h3 id="3-1-Unit-文件占位符">3.1 Unit 文件占位符</h3><p>在 Unit 文件中，有时会需要使用到一些与运行环境有关的信息，例如节点 ID、运行服务的用户等。这些信息可以使用占位符来表示，然后在实际运行被动态地替换实际的值。</p><ul><li><p>%n：完整的 Unit 文件名字，包括 .service 后缀名</p></li><li><p>%p：Unit 模板文件名中 @ 符号之前的部分，不包括 @ 符号</p></li><li><p>%i：Unit 模板文件名中 @ 符号之后的部分，不包括 @ 符号和 .service 后缀名</p></li><li><p>%t：存放系统运行文件的目录，通常是 “run”</p></li><li><p>%u：运行服务的用户，如果 Unit 文件中没有指定，则默认为 root</p></li><li><p>%U：运行服务的用户 ID</p></li><li><p>%h：运行服务的用户 Home 目录，即 %{HOME} 环境变量的值</p></li><li><p>%s：运行服务的用户默认 Shell 类型，即 %{SHELL} 环境变量的值</p></li><li><p>%m：实际运行节点的 Machine ID，对于运行位置每个的服务比较有用</p></li><li><p>%b：Boot ID，这是一个随机数，每个节点各不相同，并且每次节点重启时都会改变</p></li><li><p>%H：实际运行节点的主机名</p></li><li><p>%v：内核版本，即 “uname -r” 命令输出的内容</p></li><li><p>%%：在 Unit 模板文件中表示一个普通的百分号</p></li></ul><h3 id="3-2-Unit模板">3.2 Unit模板</h3><p>在现实中，往往有一些应用需要被复制多份运行。例如，用于同一个负载均衡器分流的多个服务实例，或者为每个 SSH 连接建立一个独立的 sshd 服务进程。Unit 模板文件的写法与普通的服务 Unit 文件基本相同，不过 Unit 模板的文件名是以 @ 符号结尾的。通过模板启动服务实例时，需要在其文件名的 @ 字符后面附加一个参数字符串。</p><p>例如apache@.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Advanced Service Template</span><br><span class="line">After=etcd.service docker.servi</span><br></pre></td></tr></table></figure><p>在服务启动时需要在 @ 后面放置一个用于区分服务实例的附加字符参数，通常这个参数用于监控的端口号或控制台 TTY 编译号，<code>systemctl start apache@8080.service</code></p><p>Systemd 在运行服务时，总是会先尝试找到一个完整匹配的 Unit 文件，如果没有找到，才会尝试选择匹配模板。例如上面的命令，System 首先会在约定的目录下寻找名为 apache@8080.service 的文件，如果没有找到，而文件名中包含 @ 字符，它就会尝试去掉后缀参数匹配模板文件。对于 apache@8080.service，systemd 会找到 apache@.service 模板文件，并通过这个模板文件将服务实例化。</p><h1>三、Systemd 的资源管理</h1><h2 id="1、Unit-管理">1、Unit 管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=========================查看当前系统的所有 Unit=========================</span></span><br><span class="line"><span class="comment"># 列出正在运行的 Unit</span></span><br><span class="line">systemctl list-units</span><br><span class="line"><span class="comment"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span><br><span class="line">systemctl list-units --all</span><br><span class="line"><span class="comment"># 列出所有没有运行的 Unit</span></span><br><span class="line">systemctl list-units --all --state=inactive</span><br><span class="line"><span class="comment"># 列出所有加载失败的 Unit</span></span><br><span class="line">systemctl list-units --failed</span><br><span class="line"><span class="comment"># 列出所有正在运行的、类型为 service 的 Unit</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span>=service</span><br><span class="line"><span class="comment"># 查看 Unit 配置文件的内容</span></span><br><span class="line">systemctl cat docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================查看 Unit 的状态===================================</span></span><br><span class="line"><span class="comment"># enabled：已建立启动链接</span></span><br><span class="line"><span class="comment"># disabled：没建立启动链接</span></span><br><span class="line"><span class="comment"># static：该配置文件没有 [Install] 部分（无法执行），只能作为其他配置文件的依赖</span></span><br><span class="line"><span class="comment"># masked：该配置文件被禁止建立启动链接</span></span><br><span class="line"><span class="comment"># 显示系统状态</span></span><br><span class="line">systemctl status</span><br><span class="line"><span class="comment"># 显示单个 Unit 的状态</span></span><br><span class="line">systemctl status bluetooth.service</span><br><span class="line"><span class="comment"># 显示远程主机的某个 Unit 的状态</span></span><br><span class="line">systemctl -H root@shawn.example.com status httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#========================Unit 的管理=======================================</span></span><br><span class="line"><span class="comment"># 立即启动一个服务</span></span><br><span class="line">sudo systemctl start apache.service</span><br><span class="line"><span class="comment"># 立即停止一个服务</span></span><br><span class="line">sudo systemctl stop apache.service</span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">sudo systemctl restart apache.service</span><br><span class="line"><span class="comment"># 杀死一个服务的所有子进程</span></span><br><span class="line">sudo systemctl <span class="built_in">kill</span> apache.service</span><br><span class="line"><span class="comment"># 重新加载一个服务的配置文件</span></span><br><span class="line">sudo systemctl reload apache.service</span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 显示某个 Unit 的所有底层参数</span></span><br><span class="line">systemctl show httpd.service</span><br><span class="line"><span class="comment"># 显示某个 Unit 的指定属性的值</span></span><br><span class="line">systemctl show -p CPUShares httpd.service</span><br><span class="line"><span class="comment"># 设置某个 Unit 的指定属性</span></span><br><span class="line">sudo systemctl <span class="built_in">set</span>-property httpd.service CPUShares=500</span><br><span class="line"></span><br><span class="line"><span class="comment">#===============================查看 Unit 的依赖关系==========================</span></span><br><span class="line"><span class="comment"># 列出一个 Unit 的所有依赖，默认不会列出 target 类型</span></span><br><span class="line">systemctl list-dependencies nginx.service</span><br><span class="line"><span class="comment"># 列出一个 Unit 的所有依赖，包括 target 类型</span></span><br><span class="line">systemctl list-dependencies --all nginx.service</span><br></pre></td></tr></table></figure><h2 id="2、服务的生命周期">2、服务的生命周期</h2><p>当一个新的 Unit 文件被放入 <code>/etc/systemd/system/</code> 或 <code>/usr/lib/systemd/system/</code> 目录中时，它是不会被自识识别的</p><h3 id="2-1-服务的激活">2.1 服务的激活</h3><ul><li><p>systemctl enable：在<code> /etc/systemd/system/</code> 建立服务的符号链接，指向 <code>/usr/lib/systemd/system/</code> 中</p></li><li><p>systemctl start：依次启动定义在 Unit 文件中的 <strong>ExecStartPre</strong>、**ExecStart **和 **ExecStartPost **命令</p></li></ul><h3 id="2-2-服务的启动和停止">2.2 服务的启动和停止</h3><ul><li><p>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令</p></li><li><p>systemctl stop：依次停止定义在 Unit 文件中的 ExecStopPre、ExecStop 和 ExecStopPost 命令</p></li><li><p>systemctl restart：重启服务</p></li><li><p>systemctl kill：立即杀死服务</p></li></ul><h3 id="2-3-服务的开机启动和取消">2.3 服务的开机启动和取消</h3><ul><li><p>systemctl enable：除了激活服务以外，也可以置服务为开机启动</p></li><li><p>systemctl disable：取消服务的开机启动</p></li></ul><h3 id="2-4-服务的修改和移除">2.4 服务的修改和移除</h3><ul><li><p>systemctl daemon-reload：Systemd 会将 Unit 文件的内容写到缓存中，因此当 Unit 文件被更新时，需要告诉 Systemd 重新读取所有的 Unit 文件</p></li><li><p>systemctl reset-failed：移除标记为丢失的 Unit 文件。在删除 Unit 文件后，由于缓存的关系，即使通过 daemon-reload 更新了缓存，在 list-units 中依然会显示标记为 not-found 的 Unit。</p></li></ul><h2 id="3、Target-管理">3、Target 管理</h2><p>Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。在传统的 SysV-init 启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统的所有 Target</span></span><br><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=target</span><br><span class="line"><span class="comment"># 查看一个 Target 包含的所有 Unit</span></span><br><span class="line">systemctl list-dependencies multi-user.target</span><br><span class="line"><span class="comment"># 查看启动时的默认 Target</span></span><br><span class="line">systemctl get-default</span><br><span class="line"><span class="comment"># 设置启动时的默认 Target</span></span><br><span class="line">sudo systemctl <span class="built_in">set</span>-default multi-user.target</span><br><span class="line"><span class="comment"># 切换 Target 时，默认不关闭前一个 Target 启动的进程，systemctl isolate 命令改变这种行为，关闭前一个 Target 里面所有不属于后一个 Target 的进程</span></span><br><span class="line">sudo systemctl isolate multi-user.target</span><br><span class="line"><span class="comment"># 查看配置文件</span></span><br><span class="line">systemctl cat multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务</span></span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启相关服务</span></span><br><span class="line">sudo systemctl restart foobar</span><br></pre></td></tr></table></figure><p><strong>Target 与 SysV-init 进程的主要区别：</strong></p><ul><li><p>默认的 RunLevel（在 <code>/etc/inittab</code> 文件设置）现在被默认的 Target 取代，位置是 <code>/etc/systemd/system/default.target</code>，通常符号链接到<code>graphical.target</code>（图形界面）或者<code>multi-user.target</code>（多用户命令行）</p></li><li><p>启动脚本的位置，以前是 <code>/etc/init.d</code> 目录，符号链接到不同的 RunLevel 目录 （比如 <code>/etc/rc3.d</code>、<code>/etc/rc5.d</code> 等），现在则存放在 <code>/lib/systemd/system</code> 和 <code>/etc/systemd/system</code> 目录</p></li><li><p>配置文件的位置，以前 init 进程的配置文件是 <code>/etc/inittab</code>，各种服务的配置文件存放在 <code>/etc/sysconfig</code> 目录。现在的配置文件主要存放在<code> /lib/systemd</code> 目录，在 <code>/etc/systemd</code> 目录里面的修改可以覆盖原始设置</p></li></ul><h2 id="4、日志管理">4、日志管理</h2><p>Systemd 通过其标准日志服务 **Journald **提供的配套程序 <strong>journalctl 将其管理的所有后台进程打印到 std:out（即控制台）的输出重定向到了日志文件</strong>。Systemd 的日志文件是二进制格式的，必须使用 Journald 提供的 journalctl 来查看，默认不带任何参数时会输出系统和所有后台进程的混合日志。<strong>默认日志最大限制为所在文件系统容量的 10%</strong>，可以修改<code>/etc/systemd/journald.conf</code> 中的 <code>SystemMaxUse </code>来指定该最大限制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class="line">sudo journalctl</span><br><span class="line"><span class="comment"># 查看内核日志（不显示应用日志）：--dmesg 或 -k</span></span><br><span class="line">sudo journalctl -k</span><br><span class="line"><span class="comment"># 查看系统本次启动的日志（其中包括了内核日志和各类系统服务的控制台输出）：--system 或 -b</span></span><br><span class="line">sudo journalctl -b</span><br><span class="line">sudo journalctl -b -0</span><br><span class="line"><span class="comment"># 查看上一次启动的日志（需更改设置）</span></span><br><span class="line">sudo journalctl -b -1</span><br><span class="line"><span class="comment"># 查看指定服务的日志：--unit 或 -u</span></span><br><span class="line">sudo journalctl -u docker.servcie</span><br><span class="line"><span class="comment"># 查看指定服务的日志</span></span><br><span class="line">sudo journalctl /usr/lib/systemd/systemd</span><br><span class="line"><span class="comment"># 实时滚动显示最新日志</span></span><br><span class="line">sudo journalctl -f</span><br><span class="line"><span class="comment"># 查看指定时间的日志</span></span><br><span class="line">sudo journalctl --since=<span class="string">"2021-10-30 18:17:16"</span></span><br><span class="line">sudo journalctl --since <span class="string">"20 min ago"</span></span><br><span class="line">sudo journalctl --since yesterday</span><br><span class="line">sudo journalctl --since <span class="string">"2022-01-10"</span> --until <span class="string">"2022-01-11 03:00"</span></span><br><span class="line">sudo journalctl --since 09:00 --until <span class="string">"1 hour ago"</span></span><br><span class="line"><span class="comment"># 显示尾部的最新 10 行日志：--lines 或 -n</span></span><br><span class="line">sudo journalctl -n</span><br><span class="line"><span class="comment"># 显示尾部指定行数的日志</span></span><br><span class="line">sudo journalctl -n 20</span><br><span class="line"><span class="comment"># 将最新的日志显示在前面</span></span><br><span class="line">sudo journalctl -r -u docker.service</span><br><span class="line"><span class="comment"># 改变输出的格式：--output 或 -o</span></span><br><span class="line">sudo journalctl -r -u docker.service -o json-pretty</span><br><span class="line"><span class="comment"># 查看指定进程的日志</span></span><br><span class="line">sudo journalctl _PID=1</span><br><span class="line"><span class="comment"># 查看某个路径的脚本的日志</span></span><br><span class="line">sudo journalctl /usr/bin/bash</span><br><span class="line"><span class="comment"># 查看指定用户的日志</span></span><br><span class="line">sudo journalctl _UID=33 --since today</span><br><span class="line"><span class="comment"># 查看某个 Unit 的日志</span></span><br><span class="line">sudo journalctl -u nginx.service</span><br><span class="line">sudo journalctl -u nginx.service --since today</span><br><span class="line"><span class="comment"># 实时滚动显示某个 Unit 的最新日志</span></span><br><span class="line">sudo journalctl -u nginx.service -f</span><br><span class="line"><span class="comment"># 合并显示多个 Unit 的日志</span></span><br><span class="line">journalctl -u nginx.service -u php-fpm.service --since today</span><br><span class="line"><span class="comment"># 查看指定优先级（及其以上级别）的日志，共有 8 级</span></span><br><span class="line"><span class="comment"># 0: emerg</span></span><br><span class="line"><span class="comment"># 1: alert</span></span><br><span class="line"><span class="comment"># 2: crit</span></span><br><span class="line"><span class="comment"># 3: err</span></span><br><span class="line"><span class="comment"># 4: warning</span></span><br><span class="line"><span class="comment"># 5: notice</span></span><br><span class="line"><span class="comment"># 6: info</span></span><br><span class="line"><span class="comment"># 7: debug</span></span><br><span class="line">sudo journalctl -p err -b</span><br><span class="line"><span class="comment"># 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class="line">sudo journalctl --no-pager</span><br><span class="line"><span class="comment"># 以 JSON 格式（单行）输出</span></span><br><span class="line">sudo journalctl -b -u nginx.service -o json</span><br><span class="line"><span class="comment"># 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class="line">sudo journalctl -b -u nginx.service -o json-pretty</span><br><span class="line"><span class="comment"># 显示日志占据的硬盘空间</span></span><br><span class="line">sudo journalctl --disk-usage</span><br><span class="line"><span class="comment"># 指定日志文件占据的最大空间</span></span><br><span class="line">sudo journalctl --vacuum-size=1G</span><br><span class="line"><span class="comment"># 指定日志文件保存多久</span></span><br><span class="line">sudo journalctl --vacuum-time=1years</span><br></pre></td></tr></table></figure><h1>四、Systemd 实战</h1><h2 id="1、Systemd-路径介绍">1、Systemd 路径介绍</h2><ul><li><p><code>/usr/lib/systemd/system</code>： 用户自己定义的单元文件，安装包相关配置，一般是供应商提供的操作系统资源，。通常，只允许包管理工具(yum/dnf/rpm/apt)进行包安装的过程中操作此路径；</p></li><li><p><code>/lib/systemd/system</code>： 系统默认的单元文件，指向<code>/usr/lib/systemd/system</code></p></li><li><p><code>/etc/systemd/system</code>：用户安装的软件的单元文件，本地配置文件，系统管理员手动软件安装包或脚本放置于此（一般为链接文件）</p></li></ul><p><strong>service设定文件</strong></p><ul><li><p><code>/usr/lib/systemd/system/*.service</code>: 预设设定文件</p></li><li><p><code>/etc/systemd/system/system/*.service.d</code>/: 用户个性化设定文件，会被加入设定</p></li><li><p><code>/etc/systemd/system/system/*.service.wants/</code>: 链接文件，启动该服务后推荐启动的其他服务</p></li><li><p><code>/etc/systemd/system/system/*.service.requires/</code>: 链接文件，启动该服务之前，需要预先启动的服务</p></li><li><p>/run/systemd/generator.late 使用 systemd-sysv-generator工具处理 SysV init脚本（即：/etc/init.d/*），自动生成.service文件</p></li></ul><h2 id="2、路径的区别与优先级">2、路径的区别与优先级</h2><h3 id="2-1-区别">2.1 区别</h3><ul><li><p>/usr/lib/systemd/system/ 软件包安装的单元</p></li><li><p>/etc/systemd/system/ 系统管理员安装的单元, 优先级更高</p></li></ul><h3 id="2-2-优先级">2.2 优先级</h3><p>systemd的使用大幅提高了系统服务的运行效率, 而unit的文件位置一般主要有三个目录：</p><ul><li><p><code>/etc/systemd/system</code></p></li><li><p><code>/run/systemd/system</code></p></li><li><p><code>lib/systemd/system</code></p></li></ul><p>这三个目录的配置文件优先级依次从高到低，如果同一选项三个地方都配置了，优先级高的会覆盖优先级低的。</p><p>系统安装时，默认会将unit文件放在<code>/lib/systemd/system</code>目录。如果我们想要修改系统默认的配置，比如nginx.service，一般有两种方法：</p><ul><li><p>在<code>/etc/systemd/system</code>目录下创建<code>nginx.service</code>文件，里面写上我们自己的配置。</p></li><li><p>在<code>/etc/systemd/system</code>下面创建<code>nginx.service.d</code>目录，在这个目录里面新建任何以.conf结尾的文件，然后写入我们自己的配置。推荐这种做法。</p></li></ul><p><code>/run/systemd/system</code>这个目录一般是进程在运行时动态创建unit文件的目录，一般很少修改，除非是修改程序运行时的一些参数时，即Session级别的，才在这里做修改。</p><h2 id="3、实战">3、实战</h2><p>创建文件<code>vim /usr/lib/systemd/system/test.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Advanced Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStartPre=-/bin/bash -c <span class="string">"echo ExecStartPre"</span></span><br><span class="line">ExecStartPre=-/bin/bash -c <span class="string">"echo ExecStartPre1"</span></span><br><span class="line">ExecStartPre=-/bin/bash -c <span class="string">"echo ExecStartPre2"</span></span><br><span class="line">ExecStart=/bin/bash -c <span class="string">"echo ExecStart"</span></span><br><span class="line">ExecStartPost=/bin/bash -c <span class="string">"echo ExecStartPost"</span></span><br><span class="line">ExecStop=/bin/bash -c <span class="string">"echo ExecStop"</span></span><br><span class="line">ExecStopPost=/bin/bash -c <span class="string">"echo ExecStopPost"</span></span><br><span class="line"><span class="comment"># 日志输出</span></span><br><span class="line">StandardOutput=journal</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>创建完成后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">systemctl start test.service</span><br><span class="line"><span class="comment"># 开机自启，即链接到/etc/systemd/system/multi-user.target.wants</span></span><br><span class="line">systemctl <span class="built_in">enable</span> test.service</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status test.service</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">sudo journalctl -r -u test.service</span><br></pre></td></tr></table></figure><h1>五、systemd.timer定时任务</h1><h2 id="1、介绍">1、介绍</h2><p>所谓定时任务，就是未来的某个或多个时点，预定要执行的任务，比如每五分钟收一次邮件、每天半夜两点分析一下日志等等。Linux 系统通常都使用 <a href="https://wiki.archlinux.org/index.php/Cron_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener" title="cron">cron</a> 设置定时任务，但是 Systemd 也有这个功能，而且优点显著</p><ul><li><p>自动生成日志，配合 Systemd 的日志工具，很方便除错</p></li><li><p>可以设置内存和 CPU 的使用额度，比如最多使用50%的 CPU</p></li><li><p>任务可以拆分，依赖其他 Systemd 单元，完成非常复杂的任务</p></li></ul><p><strong>Service 单元只是定义了如何执行任务，要定时执行这个 Service，还必须定义 Timer 单元</strong></p><h2 id="2、Timer单元">2、Timer单元</h2><p>上面新建了<code>test.service</code>服务，这里继续在<code>/usr/lib/systemd/system</code>里创建<code>test.timer</code>(一般建议同名)文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My <span class="built_in">test</span> Time</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnBootSec=2m</span><br><span class="line">OnUnitActiveSec=10s</span><br><span class="line"><span class="comment"># OnCalendar=Sun,Wed 03:30:00</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=timers.target</span><br></pre></td></tr></table></figure><ul><li><p>定时器单元文件中必须包含一个 <strong>[Timer]</strong></p></li><li><p>通过同时使用 OnBootSec= 与 OnUnitActiveSec= 指令， 就可以实现在系统启动后的某个时间点启动匹配单元， 并且之后每隔一段时间周期性的反复启动匹配单元</p></li><li><p>时间单位后缀：<strong>us(微秒), ms(毫秒), s(秒), m(分), h(时), d(天), w(周)</strong>。 如果省略了时间单位，那么表示使用<strong>默认单位&quot;秒&quot;</strong></p></li><li><p>Unit= 该定时器单元的匹配单元， 也就是要被该定时器启动的单元。默认值是与此定时器单元同名的服务单元</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动刚刚新建的这个定时器</span></span><br><span class="line">sudo systemctl start test.timer</span><br><span class="line"><span class="comment"># 查看这个定时器的状态</span></span><br><span class="line">systemctl status test.timer</span><br><span class="line"><span class="comment"># 查看所有正在运行的定时器</span></span><br><span class="line">systemctl list-timers</span><br><span class="line"><span class="comment"># 关闭这个定时器</span></span><br><span class="line">sudo systemctl stop myscript.timer</span><br><span class="line"><span class="comment"># 下次开机，自动运行这个定时器</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> myscript.timer</span><br><span class="line"><span class="comment"># 关闭定时器的开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> myscript.timer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看整个日志</span></span><br><span class="line">sudo journalctl</span><br><span class="line"><span class="comment"># 查看 test.timer 的日志</span></span><br><span class="line">sudo journalctl -u test.timer</span><br><span class="line"><span class="comment"># 查看 test.timer 和 test.service 的日志</span></span><br><span class="line">sudo journalctl -u <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 从结尾开始查看最新日志</span></span><br><span class="line">sudo journalctl -f</span><br><span class="line"><span class="comment"># 从结尾开始查看 test.timer 的日志</span></span><br><span class="line">journalctl -f -u test.timer</span><br></pre></td></tr></table></figure><h2 id="3、Timer详解">3、Timer详解</h2><h3 id="3-1-Timer单位">3.1 Timer单位</h3><p> Timer 单元文件分成几个部分</p><p>**[Unit]**部分定义元数据。</p><p>**[Timer]**部分定制定时器。Systemd 提供以下一些字段</p><ul><li><p><code>OnActiveSec</code>：定时器生效后，多少时间开始执行任务</p></li><li><p><code>OnBootSec</code>：系统启动后，多少时间开始执行任务</p></li><li><p><code>OnStartupSec</code>：Systemd 进程启动后，多少时间开始执行任务</p></li><li><p><code>OnUnitActiveSec</code>：该单元上次执行后，等多少时间再次执行</p></li><li><p><code>OnUnitInactiveSec</code>： 定时器上次关闭后多少时间，再次执行</p></li><li><p><code>OnCalendar</code>：基于绝对时间，而不是相对时间执行</p></li><li><p><code>AccuracySec</code>：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒</p></li><li><p><code>Unit</code>：真正要执行的任务，默认是同名的带有<code>.service</code>后缀的单元</p></li><li><p><code>Persistent</code>：如果设置了该字段，即使定时器到时没有启动，也会自动执行相应的单元</p></li><li><p><code>WakeSystem</code>：如果系统休眠，是否自动唤醒系统</p></li></ul><p>举例脚本里面，<code>OnUnitActiveSec=1h</code>表示一小时执行一次任务。其他的写法还有<code>OnUnitActiveSec=*-*-* 02:00:00</code>表示每天凌晨两点执行，<code>OnUnitActiveSec=Mon *-*-* 02:00:00</code>表示每周一凌晨两点执行，具体请参考<a href="https://www.freedesktop.org/software/systemd/man/systemd.time.html" target="_blank" rel="noopener" title="官方文档">官方文档</a></p><h3 id="3-2-Install-和-target">3.2 [Install] 和 target</h3><ul><li><p><code>test.timer</code>文件里面，还有一个<code>[Install]</code>部分，定义开机自启动（<code>systemctl enable</code>）和关闭开机自启动（<code>systemctl disable</code>）这个单元时，所要执行的命令。上面脚本中，<code>[Install]</code>部分只写了一个字段，即<code>WantedBy=multi-user.target</code>。它的意思是，如果执行了<code>systemctl enable test.timer</code>（只要开机，定时器自动生效），那么该定时器归属于<code>multi-user.target</code>。</p></li><li><p>所谓 Target 指的是一组相关进程，有点像 init 进程模式下面的启动级别。启动某个Target 的时候，属于这个 Target 的所有进程都会全部启动。<code>multi-user.target</code>是一个最常用的 Target，意为多用户模式。也就是说，当系统以多用户模式启动时，就会一起启动<code>test.timer</code>。它背后的操作其实很简单，执行<code>systemctl enable test.timer</code>命令时，就会在<code>multi-user.target.wants</code>目录里面创建一个符号链接，指向<code>test.timer</code></p></li></ul><hr><p><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener" title="Systemd 入门教程：命令篇">Systemd 入门教程：命令篇</a></p><p><a href="https://cloud.tencent.com/developer/article/1516125" target="_blank" rel="noopener" title="Systemd 服务管理教程">Systemd 服务管理教程</a></p><p><a href="https://blog.csdn.net/greatyoulv/article/details/111301528" target="_blank" rel="noopener" title="systemd.timer定时任务">systemd.timer定时任务</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Systemd 概述&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;Systemd 是一系列工具的集合，其作用也远远不仅是启动操作系统，它还接管了后台服务、结束、状态查询，以及日志归档、设备管理、电源管理、定时任务等许多职责，并支持通过特定事件（如插入特定 USB 设备）和特定端口数据触发的 On-demand（按需）任务。&lt;/p&gt;
&lt;p&gt;Systemd 的后台服务还有一个特殊的身份——它是系统中 PID 值为 1 的进程。&lt;/p&gt;
&lt;h2 id=&quot;2、Systemd-架构&quot;&gt;2、Systemd 架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/b4d8019a19b54fe3a57a30c21a0c6934.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://www.shawn22.xyz/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记</title>
    <link href="https://www.shawn22.xyz/posts/bbbabdc0.html"/>
    <id>https://www.shawn22.xyz/posts/bbbabdc0.html</id>
    <published>2022-09-28T09:33:48.000Z</published>
    <updated>2022-09-28T09:44:33.147Z</updated>
    
    <content type="html"><![CDATA[<h1>一、CICD环境介绍与安装</h1><h2 id="1、简介">1、简介</h2><blockquote><p>Jenkins，原名 Hudson，2011 年改为现在的名字。它是一个开源的实现持续集成的软件工具。<br>官方网站：<a href="https://www.jenkins.io/" target="_blank" rel="noopener">https://www.jenkins.io/</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/ebe57cb4d97a4292a3e7380541501708.png#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h2 id="2、Docker安装">2、Docker安装</h2><blockquote><p>Docker官网安装文档：<a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener" title="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p></blockquote><p>Centos7安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新yum源</span></span><br><span class="line">yum update</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 添加镜像</span></span><br><span class="line"><span class="comment"># 国外镜像</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 阿里镜像</span></span><br><span class="line">https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 查看源中可使用版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">yum install docker</span><br><span class="line"><span class="comment"># 配置开机启动项</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p>Ubuntu安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文本处理的流编辑器 -i直接修改读取的文件内容，而不是输出到终端</span></span><br><span class="line"><span class="comment"># sed -i 's/原字符串/新字符串/' /home/1.txt</span></span><br><span class="line"><span class="comment"># 下面这个是修改ubuntu的源</span></span><br><span class="line">sudo sed -i <span class="string">'s/cn.archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install curl</span><br><span class="line"><span class="comment"># 抓取docker安装脚本到一个文件中</span></span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="comment"># 执行脚本，通过脚本下载 推荐设置阿里云镜像下载加速 默认管理员登陆不加sudo；有警告就忽略</span></span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"></span><br><span class="line"><span class="comment">#==========解决每次输入sudo问题===========</span></span><br><span class="line"><span class="comment"># 将当前用户加入到docker组，这样每次使用就不需要sudo了</span></span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line"><span class="comment"># 更新用户组,这样才能生效</span></span><br><span class="line">newgrp - docker</span><br><span class="line">sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#============加速器================</span></span><br><span class="line"><span class="comment"># 加速器网址：https://www.daocloud.io/mirror#accelerator-doc，可能有时会失效</span></span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line"><span class="comment"># 查看配置文件，自己添加加速器</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># &#123;"registry-mirrors": ["http://hub-mirror.c.163.com"]&#125;</span></span><br><span class="line"><span class="comment"># 最后要重启</span></span><br><span class="line">sudo systemctl restart docker.service</span><br><span class="line"><span class="comment"># 安装ssh</span></span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#===========docker-compose=============</span></span><br><span class="line"><span class="comment"># 在官网下载符合条件的：https://github.com/docker/compose/releases</span></span><br><span class="line"><span class="comment"># wget也可以使用来下载</span></span><br><span class="line">mv /usr/<span class="built_in">local</span>/bin/docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 放在bin目录下，在其他位置可以直接使用</span></span><br><span class="line">sudo mv /usr/<span class="built_in">local</span>/bin/docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo install docker-compose-linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><h2 id="3、GitLab安装使用">3、GitLab安装使用</h2><h3 id="3-1-介绍">3.1 介绍</h3><blockquote><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的Web服务，相当于github和Gitee代码托管平台，只是GitLab是私有的代码托管平台<br>官方网站：<a href="https://about.gitlab.com/" target="_blank" rel="noopener" title="https://about.gitlab.com/">https://about.gitlab.com/</a></p></blockquote><p>安装所需最小配置，内存至少4G，安装文档：<a href="https://gitlab.cn/install/" target="_blank" rel="noopener" title="https://gitlab.cn/install/">https://gitlab.cn/install/</a></p><h3 id="3-2-手动安装">3.2 手动安装</h3><p>Centos系统下的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server perl</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line"><span class="comment"># 配置镜像</span></span><br><span class="line">curl -fsSL https://packages.gitlab.cn/repository/raw/scripts/setup.sh | /bin/bash</span><br><span class="line"><span class="comment"># 开始安装，这边填写你的主机地址，也可以做好域名映射的域名</span></span><br><span class="line">sudo EXTERNAL_URL=<span class="string">"http://192.168.44.103"</span> yum install -y gitlab-jh</span><br></pre></td></tr></table></figure><p>Ubuntu系统下的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装必要软件包</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install build-essential curl file git ca-certificates wget</span><br><span class="line"><span class="comment"># 配置极狐GitLab 软件源镜像</span></span><br><span class="line">curl -fsSL https://packages.gitlab.cn/repository/raw/scripts/setup.sh | /bin/bash</span><br><span class="line"><span class="comment"># 执行如下命令开始安装</span></span><br><span class="line">sudo EXTERNAL_URL=<span class="string">"https://gitlab.example.com"</span> apt-get install gitlab-jh</span><br></pre></td></tr></table></figure><h3 id="3-3-Docker安装">3.3 Docker安装</h3><blockquote><p>GitLab文档地址：<a href="https://docs.gitlab.cn/jh/install/docker.html" target="_blank" rel="noopener" title="https://docs.gitlab.cn/jh/install/docker.html">https://docs.gitlab.cn/jh/install/docker.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --hostname 192.168.44.103 \</span><br><span class="line">  --publish 443:443 --publish 80:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/<span class="built_in">log</span>/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab:Z \</span><br><span class="line">  --shm-size 256m \</span><br><span class="line">  registry.gitlab.cn/omnibus/gitlab-jh:latest</span><br></pre></td></tr></table></figure><h3 id="3-4-注意事项">3.4 注意事项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitlab常用命令</span></span><br><span class="line">gitlab-ctl start                  <span class="comment"># 启动所有 gitlab 组件</span></span><br><span class="line">gitlab-ctl stop                   <span class="comment"># 停止所有 gitlab 组件</span></span><br><span class="line">gitlab-ctl restart                <span class="comment"># 重启所有 gitlab 组件</span></span><br><span class="line">gitlab-ctl status                 <span class="comment"># 查看服务状态</span></span><br><span class="line">gitlab-ctl reconfigure            <span class="comment"># 启动服务</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb         <span class="comment"># 修改默认的配置文件</span></span><br><span class="line">gitlab-ctl tail                   <span class="comment"># 查看日志</span></span><br></pre></td></tr></table></figure><p>如果不在安装过程中指定了自定义密码，否则将随机生成一个密码并存储在 <code>/etc/gitlab/initial_root_password</code> 文件中(出于安全原因，24 小时后，此文件会被第一次 <code>gitlab-ctl reconfigure</code> 自动删除，因此若使用随机密码登录，建议安装成功初始登录成功之后，立即修改初始密码）。使用此密码和用户名 <code>root</code> 登录。</p><p>安装成功后访问<code>http://你指定的ip或域名</code>即可访问，如果需要修改，可以进入<code>/etc/gitlab/gitlab.rb</code>进行修改，改完重启</p><h2 id="4、JDK与Maven安装">4、JDK与Maven安装</h2><p>将JDK和maven安装在Jenkins服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=============================在线安装==================================</span></span><br><span class="line"><span class="comment"># Centos的搜索与安装</span></span><br><span class="line">yum search java|grep jdk</span><br><span class="line">yum install java-1.8.0-openjdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu的搜索与安装</span></span><br><span class="line">apt-cache search openjdk</span><br><span class="line">sudo apt-get install openjdk-8-jdk  -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================离线安装==================</span></span><br><span class="line"><span class="comment"># java下载地址：https://www.oracle.com/java/technologies/downloads/#java17</span></span><br><span class="line"><span class="comment"># 然后解压好</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim ~/.bashrc  <span class="comment">#输入小写i进入insert模式</span></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_162</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#==================================maven====================</span></span><br><span class="line"><span class="comment"># 下载安装,官网：https://maven.apache.org/</span></span><br><span class="line">wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz</span><br><span class="line">tar -zxvf apache-maven-3.8.6-bin.tar.gz</span><br><span class="line">mv apache-maven-3.8.6 /usr/<span class="built_in">local</span>/maven</span><br></pre></td></tr></table></figure><h2 id="5、Jenkins安装">5、Jenkins安装</h2><blockquote><p>官网地址：<a href="https://www.jenkins.io/" target="_blank" rel="noopener" title="https://www.jenkins.io/">https://www.jenkins.io/</a>，建议机器内存0.5G以上</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">机器要求：</span><br><span class="line">256 MB 内存，建议大于 512 MB</span><br><span class="line">10 GB 的硬盘空间（用于 Jenkins 和 Docker 镜像）</span><br><span class="line">需要安装以下软件：</span><br><span class="line">Java 8 ( JRE 或者 JDK 都可以)</span><br><span class="line">Docker （导航到网站顶部的Get Docker链接以访问适合您平台的Docker下载）</span><br></pre></td></tr></table></figure><p>下载地址：<a href="https://www.jenkins.io/zh/download/" target="_blank" rel="noopener" title="https://www.jenkins.io/zh/download/">https://www.jenkins.io/zh/download/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.jenkins.io/war-stable/2.346.3/jenkins.war</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">java -jar jenkins.war</span><br><span class="line"><span class="comment"># docker安装</span></span><br><span class="line">docker pull jenkins/jenkins:lts-jdk11</span><br><span class="line"><span class="comment"># 同时安装好git</span></span><br></pre></td></tr></table></figure><p>启动后访问http://ip:8080，密码默认在<code>/home/shawn/.jenkins/secrets/initialAdminPassword</code>，也可以在控制看到，进入后选择推荐安装</p><h1>二、Jenkins + Git + Maven 自动化部署配置</h1><h2 id="1、Jenkins拉取构建jar包">1、Jenkins拉取构建jar包</h2><h3 id="1-1-maven换源">1.1 maven换源</h3><p>进入maven的配置文件<code>vim /usr/local/maven/conf/settings.xml</code>，找到镜像源并替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>$&#123;user.home&#125;/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--This sends everything else to /public --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--This is used to direct the public snapshots repo in the </span></span><br><span class="line"><span class="comment">        profile below over to a different nexus group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--This is used to direct the public snapshots repo in the </span></span><br><span class="line"><span class="comment">        profile below over to a different nexus group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public-snapshots1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>public-snapshots1<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/repositories/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-全局配置">1.2 全局配置</h3><p>系统管理→全局工具配置→配置系统全局maven，注意填写自己的maven路径，然后下载好git</p><p><img src="https://img-blog.csdnimg.cn/1adea6f9867941fda7e7acd5ef2dfed4.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-3-自动拉取构建初体验">1.3 自动拉取构建初体验</h3><p>选择新建任务→构建一个maven项目，其他暂时默认，仓库去gitlab获取链接，这里使用了http，使用不需要凭证，同时选择好自己想拉取的分支，如果报错，需要安装git</p><p><img src="https://img-blog.csdnimg.cn/f974771d3da54e898957c1b8e7e44f45.png#pic_center" alt="在这里插入图片描述"><br><code>pom.xml</code>位置，如果项目里面有多个子项目，那需要添加前缀</p><p><img src="https://img-blog.csdnimg.cn/67501cfff02944e68e7fd167adef4fcc.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-4-构建注意事项">1.4 构建注意事项</h3><p>如果控制台报错<code>No compiler is provided in this environment.Perhaps you are running on a &quot;JRE rather than a JDK?</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认yum安装java的时候会显示安装的是openjdk1.8 实则实际上只安装了jre</span></span><br><span class="line">yum install -y java-devel</span><br><span class="line"><span class="comment"># ubuntu正常</span></span><br></pre></td></tr></table></figure><h2 id="2、自动发布并运行">2、自动发布并运行</h2><h3 id="2-1-插件安装与配置">2.1 插件安装与配置</h3><p>系统管理→插件管理→安装插件→<strong>publish over ssh</strong></p><p>安装好插件好，进入系统管理→系统管理，配置好对目标服务器的ssh，设置好登录地点目录</p><p><img src="https://img-blog.csdnimg.cn/003c35d511b644dfb1f8b283d4c0159f.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-2-自动发布">2.2 自动发布</h3><p>在原来的任务选择配置进行修改，选择构建后的操作，选择我们刚刚配置好的服务器，配置构建后出发的选项，<code>Source files</code>代表要传送的文件，<code>Remove prefix</code>表示去除的前缀，<code>Remote directory</code>表示要创建的目录，最后是要运行的命令，构建结束后，远程服务器存在文件<code>/home/shawn/jenkins/jenkin.jar</code></p><p><img src="https://img-blog.csdnimg.cn/49e0156b51584d7a86678a4bee74081c.png#pic_center" alt="在这里插入图片描述"></p><p><strong>超时机制</strong></p><p>输出命令时一定要注意不要让窗口卡主，不然Jenkins会认为认为一直没完成</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工作目录为服务器配置的，我这里就是/home/shawn</span></span><br><span class="line"><span class="string">nohup</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/home/shawn/jenkins/jenkins*.jar</span> <span class="string">--server.port=8989</span>  <span class="string">&gt;mylog.log</span> <span class="number">2</span><span class="string">&gt;&amp;1</span>  <span class="string">&amp;</span></span><br></pre></td></tr></table></figure><p><strong>数据流重定向</strong></p><p>数据流重定向就是将某个命令执行后应该要出现在屏幕上的数据传输到其他地方</p><ul><li><p>标准输入（stdin）：代码为0，使用&lt;或&lt;&lt;;</p></li><li><p>标准输出（stdout）：代码为1，使用&gt;或&gt;&gt;;</p></li><li><p>标准错误输出（stderr）：代码为2，使用2&gt;或2&gt;&gt;</p></li><li><p>&gt; 覆盖写</p></li><li><p>&gt;&gt; 追加写</p></li></ul><h3 id="2-3-自动发布前清理">2.3 自动发布前清理</h3><p>在构建前进行服务器清理，在<code>Pre Steps</code>的命令行下填写在构建前要运行的命令<code>./clean.sh jenkins</code>，同时在目标服务器上编写脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#删除历史数据</span></span><br><span class="line">rm -rf jenkins</span><br><span class="line">appname=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#获取传入的参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"arg:<span class="variable">$1</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取正在运行的jar包pid</span></span><br><span class="line">pid=`ps -ef | grep <span class="variable">$1</span> | grep <span class="string">'java -jar'</span> | awk <span class="string">'&#123;printf $2&#125;'</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pid</span></span><br><span class="line"><span class="comment">#如果pid为空，提示一下，否则，执行kill命令</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$pid</span> ];</span><br><span class="line"><span class="comment">#使用-z 做空值判断</span></span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$appname</span> not started"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$appname</span> stoping...."</span></span><br><span class="line">check=`ps -ef | grep -w <span class="variable">$pid</span> | grep java`</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$check</span> ];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$appname</span> pid:<span class="variable">$pid</span> is stop"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$appname</span> stop failed"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1>三、自动构建触几种方式</h1><h2 id="1、触发远程构建-gitlab上改动自动构建">1、触发远程构建/gitlab上改动自动构建</h2><blockquote><p>代码改动(提交，合并等)自动可以使用gitlab的webhook回调钩子调起Jenkins的启动任务接口，进行自动打包构建与运行</p></blockquote><p>首先在构建触发器中配置接口和token</p><p><img src="https://img-blog.csdnimg.cn/15fa2fc75b044757baa283c2ebee7e28.png#pic_center" alt="在这里插入图片描述"></p><p>因为需要权限认证，所以需要安装一个插件<code>Build Authorization Token Root</code>，安装完插件后，要访问<code>http://192.168.249.129:8080/buildByToken/build?job=first&amp;token=123456</code>即可无需认证触发构建</p><p>然后进入GitlLab或者远程代码仓库，找到<strong>Webhook选项</strong>，将调起Jenkins的启动任务接口填入，如果GitLab发现不让本地访问，调用<code>菜单→管理员→设置→网络→出战请求→允许来自 web hooks 和服务对本地网络的请求</code>就可</p><h2 id="2、定时构建">2、定时构建</h2><blockquote><p>参考网站：<a href="https://crontab.guru" target="_blank" rel="noopener" title="https://crontab.guru">https://crontab.guru</a><br>Jenkins cron不是标准的cron表达式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第一个 * 表示每个小时的第几分钟，取值0~59</span><br><span class="line">H * * * *</span><br><span class="line">H：每小时执行一次</span><br><span class="line">第二颗 * 表示小时，取值0~23</span><br><span class="line">* 15 * * * 表示每天下午3点</span><br><span class="line">* 1 * * *  表示每天凌晨1点</span><br><span class="line">第三颗 * 表示一个月的第几天，取值1~31</span><br><span class="line">* 1 5 * *  表示每月5日凌晨1点</span><br><span class="line">第四颗 * 表示第几月，取值1~12</span><br><span class="line">* 15 5 1 *  表示每年几月执行</span><br><span class="line">第五颗 * 表示一周中的第几天，取值0~7，其中0和7代表的都是周日</span><br></pre></td></tr></table></figure><p><code>H * * * *</code>表示一小时内的任意时间</p><p><code>*/10 * * * *</code>每10分钟</p><p><code>H/10 * * * *</code>每10分钟,可能是7,17,27，起始时间hash，步长不变</p><p><code>45 3 * * 1-6</code> 每个周一至周六，凌晨3点45 执行1次</p><p><code>45 3-5 * * 1-6</code> 每个周一至周六，凌晨3点45 ，凌晨4点45，凌晨5点45 各执行1次</p><p><code>H(40-48) 3-5 * * 1-6</code> 在40~48之间取值 其他同上</p><p><code>45 3-5/2 * * 1-6</code> 每个周一至周六，凌晨3点45 ，凌晨5点45 各执行1次</p><p><code>45 0-6/2 * * 1-6 * * 1-6</code> 0点开始，每间隔2小时执行一次 0:45、2:45、4:45</p><h2 id="3、源码变更构建">3、源码变更构建</h2><p>使用<strong>Poll SCM</strong> 方式与<strong>Build periodically</strong>一样，会主动定期检查代码托管服务器上是否有变化，一旦发生变化执行job构建</p><h2 id="4、所有构建方式介绍">4、所有构建方式介绍</h2><ul><li><p>快照依赖构建/Build whenever a SNAPSHOT dependency is built</p><ul><li>当依赖的快照被构建时执行本job</li></ul></li><li><p>触发远程构建 (例如,使用脚本)</p><ul><li>远程调用本job的restapi时执行本job</li></ul></li><li><p>job依赖构建/Build after other projects are built</p><ul><li>当依赖的job被构建时执行本job</li></ul></li><li><p>定时构建/Build periodically</p><ul><li>使用cron表达式定时构建本job</li></ul></li><li><p>向GitHub提交代码时触发Jenkins自动构建/GitHub hook trigger for GITScm polling</p><ul><li>Github-WebHook出发时构建本job</li></ul></li><li><p>定期检查代码变更/Poll SCM</p><ul><li>使用cron表达式定时检查代码变更，变更后构建本job</li></ul></li></ul><h2 id="5、测试报告邮件通知">5、测试报告邮件通知</h2><p>首先开启163邮箱的SMTP服务，记录下自己的授权码，比如我的<code>SUUJPSARCHWKHWAP</code>，然后进入<strong>首页→系统管理→系统配置</strong></p><ul><li><p>首先找到<strong>Jenkins Location</strong>，填写系统管理员邮件地址(授权smtp的163邮箱)账号</p></li><li><p>找到<strong>Extended E-mail Notification</strong>，推荐插件安装自动安装，填写好SMTP server(<a href="http://smtp.163.com" target="_blank" rel="noopener">smtp.163.com</a>)，端口25，创建好账户和密码(授权码)，设置好默认发送邮箱，在Default Triggers里选择相应的触发条件</p></li><li><p><strong>邮件通知</strong>是内置的，选择好SMTP服务器，使用SAMTP认证，这里用户名要去掉邮箱尾缀，密码还是授权码，端口25，可以测试发送，最后保存</p></li></ul><p>最后在任务中进行配置设置要发送的邮箱</p><h2 id="6、自动化部署到docker容器中">6、自动化部署到docker容器中</h2><p>原理和前面一样，构建前清除docker，然后把构建的包发送，最后发送启动docker</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jarfile/demo*.jar /root/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/root/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><h1>四、Jenkins集群/并发构建</h1><blockquote><p>集群化构建可以有效提升构建效率，尤其是团队项目比较多或是子项目比较多的时候，可以并发在多台机器上执行构建</p></blockquote><p>这里我们一模一样克隆一台jenkins机器，从机无需启动jenkins，只需要java和maven构建环境，进入<strong>系统管理→节点管理</strong>，可以看到本机就是一个主节点，然后我们<strong>新建节点</strong>，取名jenkin-01，注意标签的填写，后面流水线需要依赖这个；填好并发依赖数量，主机名</p><p><img src="https://img-blog.csdnimg.cn/6ef1108654404e71b7e5c39ede33bfcf.png#pic_center" alt="在这里插入图片描述"></p><p>然后进入我们的任务配置，在general中勾选<strong>在必要的时候并发构建</strong>，这样就可以进行集群化构建了</p><h1>五、流水线pipline</h1><h2 id="1、介绍">1、介绍</h2><p>流水线既能作为任务的本身，也能作为<code>Jenkinsfile</code></p><p>使用流水线可以让我们的任务从ui手动操作，转换为代码化，像docker的dockerfile一样，从shell命令到配置文件，更适合大型项目，可以让团队其他开发者同时参与进来，同时也可以编辑开发Jenkinswebui不能完成的更复杂的构建逻辑，作为开发者可读性也更好。</p><h2 id="2、流水线语法">2、流水线语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pipeline：整条流水线</span><br><span class="line">agent：指定执行器</span><br><span class="line">stages：所有阶段</span><br><span class="line">stage：某一阶段，可有多个</span><br><span class="line">steps：阶段内的每一步，可执行命令</span><br></pre></td></tr></table></figure><h2 id="3、简单流水线测试">3、简单流水线测试</h2><p><strong>首页→新建任务→选择流水线</strong>，选择最简单的脚本进行测试</p><p><strong>post</strong>：流水线完成后可执行的任务</p><ul><li><p>always 无论流水线或者阶段的完成状态。</p></li><li><p>changed 只有当流水线或者阶段完成状态与之前不同时。</p></li><li><p>failure 只有当流水线或者阶段状态为&quot;failure&quot;运行。</p></li><li><p>success 只有当流水线或者阶段状态为&quot;success&quot;运行。</p></li><li><p>unstable 只有当流水线或者阶段状态为&quot;unstable&quot;运行。例如：测试失败。</p></li><li><p>aborted 只有当流水线或者阶段状态为&quot;aborted &quot;运行。例如：手动取消。</p></li></ul><p>**agent：**可以指定执行节点</p><ul><li><p>label 指定运行job的节点标签</p></li><li><p>any 不指定，由Jenkins分配</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label <span class="string">"jenkins-01"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'拉取代码'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">                    sleep 10       </span></span><br><span class="line"><span class="string">                   "</span><span class="string">""</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'拉取代码完成'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'执行构建'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'执行构建完成'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"完成"</span></span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"失败"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外全新的流水线控制ui，可重复执行某阶段代码，插件中心搜索Blue Ocean安装即可，<strong>同时流水线编码可在流水线语法页面进行在线生成</strong></p><h2 id="4、pipeline自动化构建示例">4、pipeline自动化构建示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    tools &#123;</span><br><span class="line">        maven <span class="string">"maven3"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">"拉取代码"</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                git branch: <span class="string">'main'</span>, credentialsId: <span class="string">'gitlab'</span>, url: <span class="string">'http://192.168.44.103/root/java-project.git'</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'拉取成功'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">"执行构建"</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">            //    sh <span class="string">"mvn --version"</span></span><br><span class="line">                sh <span class="string">""</span><span class="string">" </span></span><br><span class="line"><span class="string">                cd demo-1</span></span><br><span class="line"><span class="string">                mvn clean package</span></span><br><span class="line"><span class="string">                "</span><span class="string">""</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'构建完成'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">"clean test server"</span>)&#123;</span><br><span class="line">            steps&#123;     </span><br><span class="line">sshPublisher(publishers: [sshPublisherDesc(configName: <span class="string">'testserver'</span>, transfers: [sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">''</span>, execCommand: <span class="string">''</span><span class="string">'rm -rf *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">docker stop demo</span></span><br><span class="line"><span class="string">docker rm demo</span></span><br><span class="line"><span class="string">docker rmi demo</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">'[, ]+'</span>, remoteDirectory: <span class="string">''</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">''</span>, sourceFiles: <span class="string">'/root'</span>)], usePromotionTimestamp: <span class="literal">false</span>, useWorkspaceInPromotion: <span class="literal">false</span>, verbose: <span class="literal">false</span>)])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">"发送jar包到测试服务器"</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">                sshPublisher(publishers: [sshPublisherDesc(configName: <span class="string">'testserver'</span>, transfers: [sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">''</span>, execCommand: <span class="string">''</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">'[, ]+'</span>, remoteDirectory: <span class="string">'/jarfile'</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">'demo-1/target'</span>, sourceFiles: <span class="string">'**/demo*.jar'</span>), sshTransfer(cleanRemote: <span class="literal">false</span>, excludes: <span class="string">''</span>, execCommand: <span class="string">''</span><span class="string">'docker build -t demo .</span></span><br><span class="line"><span class="string">docker run -d -p 8080:8080 --name demo demo'</span><span class="string">''</span>, execTimeout: 120000, flatten: <span class="literal">false</span>, makeEmptyDirs: <span class="literal">false</span>, noDefaultExcludes: <span class="literal">false</span>, patternSeparator: <span class="string">'[, ]+'</span>, remoteDirectory: <span class="string">'/'</span>, remoteDirectorySDF: <span class="literal">false</span>, removePrefix: <span class="string">'demo-1/docker'</span>, sourceFiles: <span class="string">'demo-1/docker/dockerfile'</span>)], usePromotionTimestamp: <span class="literal">false</span>, useWorkspaceInPromotion: <span class="literal">false</span>, verbose: <span class="literal">false</span>)])</span><br><span class="line">   </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'jar send over!'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、多分支job">5、多分支job</h2><blockquote><p>简单来说就是一个仓库分支对应一个job，例如测试CICD和生产环境CICD</p></blockquote><p>首页进入首页或者blue Ocean首页，创建多分支流水线，填写对应的git仓库，选择立刻扫描，此时如果是多模块项目，需要在配置里修改<code>Jenkinsfile</code>文件位置，默认该文件需要在根目录，点击立刻扫描，jenkins就会默认去代码仓库找Jenkinsfile文件并自动替我们执行，同时也可以单独对某一个分支进行扫描构建</p><h2 id="6、两种流水线总结">6、两种流水线总结</h2><h3 id="6-1-声明式流水线">6.1 声明式流水线</h3><p><strong>好处</strong></p><ul><li><p>更像是在Jenkins web ui中的操作</p></li><li><p>可读性比较高</p></li><li><p>可以使用blue ocean自动生成</p></li><li><p>支持语法检查</p></li></ul><p><strong>坏处</strong></p><ul><li>代码逻辑能力比脚本式弱，不能完成特别复杂的任务</li></ul><h3 id="6-2-脚本式流水线">6.2 脚本式流水线</h3><p><strong>好处</strong></p><ul><li><p>更少的代码和弱规范要求</p></li><li><p>更灵活的自定义代码操作</p></li><li><p>不受约束，可以构建特别复杂的工作流和流水线</p></li></ul><p><strong>坏处</strong></p><ul><li><p>读写对编程要求比较高</p></li><li><p>比声明式流水线代码更复杂</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、CICD环境介绍与安装&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Jenkins，原名 Hudson，2011 年改为现在的名字。它是一个开源的实现持续集成的软件工具。&lt;br&gt;
官方网站：&lt;a href=&quot;https://www.jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jenkins.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/ebe57cb4d97a4292a3e7380541501708.png#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="Linux运维" scheme="https://www.shawn22.xyz/tags/Linux%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>分布式文件存储系统MinIO笔记</title>
    <link href="https://www.shawn22.xyz/posts/5ce99483.html"/>
    <id>https://www.shawn22.xyz/posts/5ce99483.html</id>
    <published>2022-09-28T09:33:33.000Z</published>
    <updated>2022-09-28T09:43:37.794Z</updated>
    
    <content type="html"><![CDATA[<h1>一、MinIO介绍</h1><h2 id="1、文件系统应用场景">1、文件系统应用场景</h2><blockquote><p>对象存储服务（Object Storage Service，OSS）是一种海量、安全、低成本、高可靠的云存储服<br>务，适合存放任意类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成<br>本</p></blockquote><p>互联网海量非结构化数据的存储需求</p><ul><li><p>电商网站：海量商品图片</p></li><li><p>视频网站：海量视频文件</p></li><li><p>网盘 : 海量文件</p></li><li><p>社交网站：海量图片</p></li></ul><p>参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124675675" target="_blank" rel="noopener" title="MinIO分布式文件服务器搭建与入门">MinIO分布式文件服务器搭建与入门</a></p><a id="more"></a><h2 id="2、MinIO介绍">2、MinIO介绍</h2><p>MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。  </p><p>MinIO是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p><p><strong>文档地址</strong></p><ul><li><p>官方文档：<a href="https://min.io/" target="_blank" rel="noopener" title="https://min.io/">https://min.io/</a>(推荐，更新快)</p></li><li><p>官方中文文档：<a href="http://www.minio.org.cn/" target="_blank" rel="noopener" title="http://www.minio.org.cn/">http://www.minio.org.cn/</a></p></li></ul><h2 id="3、MinIO优点">3、MinIO优点</h2><ul><li><p>部署简单: 一个single二进制文件即是一切，还可支持各种平台</p></li><li><p>minio支持海量存储，可按zone扩展(原zone不受任何影响)，支持单个对象最大5TB</p></li><li><p>兼容Amazon S3接口，充分考虑开发人员的需求和体验</p></li><li><p>低冗余且磁盘损坏高容忍，标准且最高的数据冗余系数为2(即存储一个1M的数据对象，实际占用  </p><p>磁盘空间为2M)。但在任意n/2块disk损坏的情况下依然可以读出数据(n为一个纠删码集合(Erasure  </p><p>Coding Set)中的disk数量)。并且这种损坏恢复是基于单个对象的，而不是基于整个存储卷的</p></li><li><p>读写性能优异<br><img src="https://img-blog.csdnimg.cn/acd45f10727743f7b4619a64b70a2050.png#pic_center" alt="在这里插入图片描述"></p></li></ul><h2 id="4、MinIO的基础概念">4、MinIO的基础概念</h2><ul><li><p><strong>Object</strong>：存储到 Minio 的基本对象，如文件、字节流，Anything…</p></li><li><p><strong>Bucket</strong>：用来存储 Object 的逻辑空间。每个 Bucket 之间的数据是相互隔离的。对于客户端而  </p><p>言，就相当于一个存放文件的顶层文件夹。</p></li><li><p>Drive：即存储数据的磁盘，在 MinIO 启动时，以参数的方式传入。Minio 中所有的对象数据都会  </p><p>存储在 Drive 里。</p></li><li><p>Set ：即一组 Drive 的集合，分布式部署根据集群规模自动划分一个或多个 Set ，每个 Set 中的  </p><p>Drive 分布在不同位置。一个对象存储在一个 Set 上。（For example: {1…64} is divided into 4  </p><p>sets each of size 16.）  </p><ul><li><p>一个对象存储在一个Set上</p></li><li><p>一个集群划分为多个Set</p></li><li><p>一个Set包含的Drive数量是固定的，默认由系统根据集群规模自动计算得出</p></li><li><p>一个SET中的Drive尽可能分布在不同的节点上</p></li></ul></li></ul><h2 id="5、纠删码EC（Erasure-Code）">5、纠删码EC（Erasure Code）</h2><p>MinIO 使用<strong>纠删码机制来保证高可靠性</strong>，使用 highwayhash 来处理数据损坏（ Bit Rot Protection ）</p><p>关于纠删码，简单来说就是可以通过数学计算，把丢失的数据进行还原，它可以将n份原始数据，增加m份数据，并能通过n+m份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。</p><h2 id="6、存储形式">6、存储形式</h2><p>文件对象上传到 MinIO ，会在对应的数据存储磁盘中，以 Bucket 名称为目录，文件名称为下一级目<br>录，文件名下是 part.1 和 xl.meta(老版本，最新版本如下图)，前者是编码数据块及检验块，后者是元数据文件。</p><p><img src="https://img-blog.csdnimg.cn/fcdd1c0c76f4403f97743c0f25d347f1.png#pic_center" alt="在这里插入图片描述"></p><h2 id="7、存储方案">7、存储方案</h2><p><img src="https://img-blog.csdnimg.cn/77ca62e8d6f346079927a342763c7461.png#pic_center" alt="在这里插入图片描述"></p><h1>二、Minio环境搭建</h1><h2 id="1、介绍">1、介绍</h2><blockquote><p>官方文档：<a href="https://docs.min.io/docs/" target="_blank" rel="noopener" title="https://docs.min.io/docs/">https://docs.min.io/docs/</a><br>中文文档：<a href="http://docs.minio.org.cn/docs/" target="_blank" rel="noopener" title="http://docs.minio.org.cn/docs/">http://docs.minio.org.cn/docs/</a> （没有及时更新，容易被坑）</p></blockquote><p><strong>minio支持多种server启动模式</strong></p><ul><li><p>单机模式(无EC码)</p></li><li><p>单机模式(有EC码)</p></li><li><p>集群且有EC码</p></li></ul><h2 id="2、单机部署">2、单机部署</h2><h3 id="2-1-单机部署">2.1 单机部署</h3><p>minio server的standalone模式，即要管理的磁盘都在host本地。该启动模式一般仅用于实验环境、测试环境的验证和学习使用。在standalone模式下，还可以分为<strong>non-erasure code mode</strong>和<strong>erasure code</strong></p><ul><li><p><strong>modenon-erasure code mode</strong></p><p>在此启动模式下，对于每一份对象数据，minio直接在data下面存储这份数据，不会建立副本，也不会启用纠删码机制。因此，这种模式无论是服务实例还是磁盘都是“单点”，无任何高可用保障，磁盘损坏就表示数据丢失</p></li><li><p><strong>erasure code mode</strong>此模式为minio server实例传入多个本地磁盘参数。一旦遇到多于一个磁盘参数，minio server会自动启用erasure code mode。erasure code对磁盘的个数是有要求的，如不满足要求，实例启动将失败。 erasure code启用后，要求传给minio server的endpoint(standalone模式下，即本地磁盘上的目录)至少为4个</p></li></ul><h3 id="2-2-基于Linux部署">2.2 基于Linux部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 国外资源，龟速下载</span></span><br><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio </span><br><span class="line">chmod +x minio</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=admin</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=12345678</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认的配置目录是$&#123;HOME&#125;/.minio，可以通过–config-dir命令自定义配置目录</span></span><br><span class="line"><span class="comment"># ./minio server --config-dir /mnt/config /mnt/data</span></span><br><span class="line"><span class="comment">## minio 存储目录；--console-address 是 UI 界面的端口</span></span><br><span class="line">./minio server --console-address <span class="string">":9001"</span> /data</span><br></pre></td></tr></table></figure><h3 id="2-3-基于docker部署-推荐">2.3 基于docker部署(推荐)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br><span class="line"><span class="comment"># --console-address 是 UI 界面的端口</span></span><br><span class="line"><span class="comment"># --console-address 是 UI 界面的端口</span></span><br><span class="line">docker run --name minio -p 9000:9000 -p 9001:9001 \</span><br><span class="line">-d --restart=always -e <span class="string">"MINIO_ACCESS_KEY=admin"</span> -e <span class="string">"MINIO_SECRET_KEY=password"</span> \</span><br><span class="line">-v ~/minio/data:/data -v ~/minio/config:/root/.minio \</span><br><span class="line">minio/minio server  --console-address <span class="string">":9001"</span> /data</span><br></pre></td></tr></table></figure><p>非root启动，<code>MINIO_ROOT_USER</code>是新版本的变量定义，<code>MINIO_ACCESS_KEY</code>是老版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 9000:9000 \</span><br><span class="line">-p 9001:9001 \</span><br><span class="line">--user $(id -u):$(id -g) \</span><br><span class="line">--name minio \</span><br><span class="line">-e <span class="string">"MINIO_ROOT_USER=admin"</span> \</span><br><span class="line">-e <span class="string">"MINIO_ROOT_PASSWORD=password"</span> \</span><br><span class="line">-v <span class="variable">$&#123;HOME&#125;</span>/minio/data:/data \</span><br><span class="line">quay.io/minio/minio server /data --console-address <span class="string">":9001"</span></span><br></pre></td></tr></table></figure><h2 id="3、minio-纠删码模式">3、minio 纠删码模式</h2><p>Minio 使用纠删码<code>erasure code</code>和校验和<code>checksum</code>来保护数据免受硬件故障和无声数据损坏。 即便您丢失一半数量（N/2）的硬盘，您仍然可以恢复数据。</p><blockquote><p>纠删码是一种恢复丢失和损坏数据的数学算法， Minio 采用 Reed-Solomon code 将对象拆分成 N/2 数据和 N/2 奇偶校验块。 这就意味着如果是 12 块盘，一个对象会被分成 6 个数据块、6 个奇偶校验块，你可以丢失任意 6 块盘（不管其是存放的数据块还是奇偶校验块），你仍可以从剩下的盘中的数据进行恢复</p></blockquote><p>使用 Minio Docker 镜像，在 8 块盘中启动 Minio 服务，默认账号密码是minioadmin/minioadmin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 9001:9001 --name minio \</span><br><span class="line">  -v /mnt/data1:/data1 \</span><br><span class="line">  -v /mnt/data2:/data2 \</span><br><span class="line">  -v /mnt/data3:/data3 \</span><br><span class="line">  -v /mnt/data4:/data4 \</span><br><span class="line">  -v /mnt/data5:/data5 \</span><br><span class="line">  -v /mnt/data6:/data6 \</span><br><span class="line">  -v /mnt/data7:/data7 \</span><br><span class="line">  -v /mnt/data8:/data8 \</span><br><span class="line">  minio/minio server /data&#123;1...8&#125; --console-address <span class="string">":9001"</span></span><br></pre></td></tr></table></figure><h2 id="4、分布式集群搭建">4、分布式集群搭建</h2><h3 id="4-1-介绍">4.1 介绍</h3><p>分布式 Minio 可以让你将多块硬盘（甚至在不同的机器上）组成一个对象存储服务。由于硬盘分布在不同的节点上，分布式 Minio 避免了单点故障</p><p><img src="https://img-blog.csdnimg.cn/3b8d1dee8691494bbcd6ddbf4cf9d522.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-2-分布式-Minio-优势">4.2 分布式 Minio 优势</h3><ul><li><p><strong>数据保护</strong></p><p>分布式 Minio 采用 纠删码来防范多个节点宕机和位衰减<code>bit rot</code></p><p>分布式 Minio <strong>至少需要 4 个硬盘</strong>，使用分布式 Minio 自动引入了纠删码功能</p></li><li><p><strong>高可用</strong></p><p>单机 Minio 服务存在单点故障，相反，如果是一个有 N 块硬盘的分布式 Minio,只要有 N/2 硬盘在线，你的数据就是安全的。不过你需要至少有 N/2+1 个硬盘来创建新的对象</p><p>例如，一个 16 节点的 Minio 集群，每个节点 16 块硬盘，就算 8 台服务器宕机，这个集群仍然是可读的，不过你需要 9 台服务器才能写数据</p></li><li><p><strong>一致性</strong></p><p>Minio 在分布式和单机模式下，所有读写操作都严格遵守 <strong>read-after-write</strong> 一致性模型</p></li></ul><h3 id="4-3-Linux运行分布式-Minio">4.3 Linux运行分布式 Minio</h3><p>启动一个分布式 Minio 实例，你只需要<strong>把硬盘位置做为参数传给 minio server 命令</strong>即可（<strong>这里必须要四块及以上硬盘，模拟路径会报错</strong>），然后你需要在所有其它节点运行同样的命令。</p><blockquote><p>可以参考官网：<a href="https://docs.min.io/docs/distributed-minio-quickstart-guide.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/distributed-minio-quickstart-guide.html">https://docs.min.io/docs/distributed-minio-quickstart-guide.html</a></p></blockquote><ul><li><p>分布式 Minio 里所有的节点需要有同样的 access 秘钥和 secret 秘钥，这样这些节点才能建立联接。为了实现这个，你需要在执行 minio server 命令之前，先将 access 秘钥和 secret 秘钥 export 成环境变量。<strong>新版本使用 MINIO_ROOT_USER&amp;MINIO_ROOT_PASSWORD</strong></p></li><li><p>分布式 Minio 使用的磁盘里必须是干净的，里面没有数据</p></li><li><p>分布式 Minio 里的节点时间差不能超过 3 秒，可以使用NTP 来保证时间一致</p></li><li><p>在 Windows 下运行分布式 Minio 处于实验阶段</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载minio</span></span><br><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br><span class="line">chmod +x minio</span><br><span class="line">sudo cp minio /data/minio/run/minio</span><br><span class="line">sudo mv minio /usr/bin/minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备好四块硬盘并挂载其对应的/data/minio/data目录下，创建目录</span></span><br><span class="line"><span class="comment"># run：启动脚本及二进制文件目录；</span></span><br><span class="line"><span class="comment"># data：数据存储目录；</span></span><br><span class="line"><span class="comment"># /etc/minio：配置文件目录；</span></span><br><span class="line">mkdir -p /data/minio/&#123;run,data&#125; &amp;&amp; mkdir -p /etc/minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群启动文件,vim /data/minio/run/run.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=admin</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=password</span><br><span class="line"><span class="comment"># –config-dir：指定集群配置文件目</span></span><br><span class="line">/data/minio/run/minio server --address <span class="string">":9000"</span> --console-address <span class="string">":9001"</span> --config-dir /etc/minio \</span><br><span class="line">http://192.168.99.1/data/minio/data \</span><br><span class="line">http://192.168.99.2/data/minio/data \</span><br><span class="line">http://192.168.99.3/data/minio/data \</span><br><span class="line">http://192.168.99.4/data/minio/data</span><br></pre></td></tr></table></figure><p>配置为系统服务<code>vim /usr/lib/systemd/system/minio.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Minio service</span><br><span class="line">Documentation=https://docs.minio.io/</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/data/minio/run/</span><br><span class="line">ExecStart=/data/minio/run/run.sh</span><br><span class="line"> </span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>移动可执行文件以及启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给所有涉及到的文件或目录添加权限</span></span><br><span class="line">chmod +x /data/minio/run/minio &amp;&amp; chmod +x /data/minio/run/run.sh</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> minio &amp;&amp; systemctl start minio</span><br></pre></td></tr></table></figure><p>最后生产环境需要使用Nginx将集群地址进行代理，对外统一入口，可以参考下面docker的nginx配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">upstream minio&#123;</span><br><span class="line">        server 192.168.99.1:9000;</span><br><span class="line">        server 192.168.99.2:9000;</span><br><span class="line">        server 192.168.99.3:9000;</span><br><span class="line">        server 192.168.99.4:9000;</span><br><span class="line">&#125;</span><br><span class="line">upstream console &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server minio1:9001;</span><br><span class="line">        server minio2:9001;</span><br><span class="line">        server minio3:9001;</span><br><span class="line">        server minio4:9001;</span><br><span class="line">    &#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 9000;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://minio;</span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">                client_max_body_size 1000m;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 9001;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://console;</span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">                client_max_body_size 1000m;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-Docker-Compose-部署-MinIO">4.4 Docker Compose 部署 MinIO</h3><blockquote><p>参考：<a href="https://docs.min.io/docs/deploy-minio-on-docker-compose.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/deploy-minio-on-docker-compose.html">https://docs.min.io/docs/deploy-minio-on-docker-compose.html</a></p></blockquote><p>要在 Docker Compose 上部署分布式 MinIO，请下载<a href="https://raw.githubusercontent.com/minio/minio/master/docs/orchestration/docker-compose/docker-compose.yaml" target="_blank" rel="noopener" title="docker-compose.yaml">docker-compose.yaml</a>和<a href="https://raw.githubusercontent.com/minio/minio/master/docs/orchestration/docker-compose/nginx.conf" target="_blank" rel="noopener" title="nginx.conf">nginx.conf</a>到你当前的工作目录</p><p><code>vim docker-compose.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://docs.docker.com/compose/compose-file/compose-file-v3/</span></span><br><span class="line"><span class="comment"># Settings and configurations that are common for all containers</span></span><br><span class="line"><span class="attr">x-minio-common:</span> <span class="string">&amp;minio-common</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">quay.io/minio/minio:RELEASE.2022-09-07T22-25-02Z</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">server</span> <span class="string">--console-address</span> <span class="string">":9001"</span> <span class="string">http://minio&#123;1...4&#125;/data&#123;1...2&#125;</span></span><br><span class="line">  <span class="attr">expose:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9000"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9001"</span></span><br><span class="line">  <span class="comment"># environment:</span></span><br><span class="line">    <span class="comment"># MINIO_ROOT_USER: minioadmin</span></span><br><span class="line">    <span class="comment"># MINIO_ROOT_PASSWORD: minioadmin</span></span><br><span class="line">  <span class="attr">healthcheck:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost:9000/minio/health/live"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">    <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># starts 4 docker containers running minio server instances.</span></span><br><span class="line"><span class="comment"># using nginx reverse proxy, load balancing, you can access</span></span><br><span class="line"><span class="comment"># it through port 9000.</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio1:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*minio-common</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">minio1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data1-1:/data1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data1-2:/data2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio2:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*minio-common</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">minio2</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data2-1:/data1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data2-2:/data2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio3:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*minio-common</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">minio3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data3-1:/data1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data3-2:/data2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio4:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*minio-common</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">minio4</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data4-1:/data1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data4-2:/data2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.19.2-alpine</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9000:9000"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9001:9001"</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## By default this config uses default local driver,</span></span><br><span class="line"><span class="comment">## For custom volumes replace with volume driver configuration.</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data1-1:</span></span><br><span class="line">  <span class="attr">data1-2:</span></span><br><span class="line">  <span class="attr">data2-1:</span></span><br><span class="line">  <span class="attr">data2-2:</span></span><br><span class="line">  <span class="attr">data3-1:</span></span><br><span class="line">  <span class="attr">data3-2:</span></span><br><span class="line">  <span class="attr">data4-1:</span></span><br><span class="line">  <span class="attr">data4-2:</span></span><br></pre></td></tr></table></figure><p><code>vim nginx.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  4096;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">    upstream minio &#123;</span><br><span class="line">        server minio1:9000;</span><br><span class="line">        server minio2:9000;</span><br><span class="line">        server minio3:9000;</span><br><span class="line">        server minio4:9000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream console &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server minio1:9001;</span><br><span class="line">        server minio2:9001;</span><br><span class="line">        server minio3:9001;</span><br><span class="line">        server minio4:9001;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       9000;</span><br><span class="line">        listen  [::]:9000;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># To allow special characters in headers</span></span><br><span class="line">        ignore_invalid_headers off;</span><br><span class="line">        <span class="comment"># Allow any size file to be uploaded.</span></span><br><span class="line">        <span class="comment"># Set to a value such as 1000m; to restrict file size to a specific value</span></span><br><span class="line">        client_max_body_size 0;</span><br><span class="line">        <span class="comment"># To disable buffering</span></span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_request_buffering off;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">            proxy_connect_timeout 300;</span><br><span class="line">            <span class="comment"># Default is HTTP/1, keepalive is only enabled in HTTP/1.1</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">            chunked_transfer_encoding off;</span><br><span class="line"></span><br><span class="line">            proxy_pass http://minio;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       9001;</span><br><span class="line">        listen  [::]:9001;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># To allow special characters in headers</span></span><br><span class="line">        ignore_invalid_headers off;</span><br><span class="line">        <span class="comment"># Allow any size file to be uploaded.</span></span><br><span class="line">        <span class="comment"># Set to a value such as 1000m; to restrict file size to a specific value</span></span><br><span class="line">        client_max_body_size 0;</span><br><span class="line">        <span class="comment"># To disable buffering</span></span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_request_buffering off;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment"># This is necessary to pass the correct IP to be hashed</span></span><br><span class="line">            real_ip_header X-Real-IP;</span><br><span class="line"></span><br><span class="line">            proxy_connect_timeout 300;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># To support websocket</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line">            </span><br><span class="line">            chunked_transfer_encoding off;</span><br><span class="line"></span><br><span class="line">            proxy_pass http://console;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后<code>docker-compose pull</code>和<code>docker-compose up</code>启动</p><h3 id="4-5-扩展现有的分布式集群">4.5 扩展现有的分布式集群</h3><p>例如我们是通过区的方式启动 MinIO 集群，命令行如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=admin</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=12345678</span><br><span class="line">minio server http://host&#123;1...32&#125;/<span class="built_in">export</span>&#123;1...32&#125;</span><br></pre></td></tr></table></figure><p>MinIO 支持通过命令，指定新的集群来扩展现有集群（纠删码模式），命令行如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=admin</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=12345678</span><br><span class="line">minio server http://host&#123;1...32&#125;/<span class="built_in">export</span>&#123;1...32&#125; http://host&#123;33...64&#125;/<span class="built_in">export</span>&#123;1...32&#125;</span><br></pre></td></tr></table></figure><p>现在整个集群就扩展了 1024 个磁盘，总磁盘变为 2048 个，新的对象上传请求会自动分配到最少使用的集群上。通过以上扩展策略，您就可以按需扩展您的集群。重新配置后重启集群，会立即在集群中生效，并对现有集群无影响。如上命令中，我们可以把原来的集群看做一个区，新增集群看做另一个区，新对象按每个区域中的可用空间比例放置在区域中。在每个区域内，基于确定性哈希算法确定位置。</p><blockquote><p><strong>说明:</strong> <strong>您添加的每个区域必须具有与原始区域相同的磁盘数量（纠删码集）大小，以便维持相同的数据冗余 SLA。</strong> 例如，第一个区有 8 个磁盘，您可以将集群扩展为 16 个、32 个或 1024 个磁盘的区域，您只需确保部署的 SLA 是原始区域的倍数即可。</p></blockquote><h1>三、Minio 客户端使用</h1><h2 id="1、介绍-v2">1、介绍</h2><blockquote><p>参考：<a href="https://docs.min.io/docs/minio-client-quickstart-guide.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/minio-client-quickstart-guide.html">https://docs.min.io/docs/minio-client-quickstart-guide.html</a></p></blockquote><p>MinIO Client (mc)为 ls，cat，cp，mirror，diff，find 等 UNIX 命令提供了一种替代方案。它支持文件系统和兼容 Amazon S3 的云存储服务（AWS Signature v2 和 v4）</p><p>mc客户端的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.min.io/client/mc/release/linux-amd64/mc</span><br><span class="line">chmod +x mc</span><br><span class="line">./mc --<span class="built_in">help</span></span><br><span class="line">sudo mv mc /usr/<span class="built_in">local</span>/sbin/</span><br></pre></td></tr></table></figure><p>mc全部命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ls       列出文件和文件夹。</span><br><span class="line">mb       创建一个存储桶或一个文件夹。</span><br><span class="line">cat      显示文件和对象内容。</span><br><span class="line">pipe     将一个STDIN重定向到一个对象或者文件或者STDOUT。</span><br><span class="line">share    生成用于共享的URL。</span><br><span class="line">cp       拷贝文件和对象。</span><br><span class="line">mirror   给存储桶和文件夹做镜像。</span><br><span class="line">find     基于参数查找文件。</span><br><span class="line">diff     对两个文件夹或者存储桶比较差异。</span><br><span class="line">rm       删除文件和对象。</span><br><span class="line">events   管理对象通知。</span><br><span class="line">watch    监视文件和对象的事件。</span><br><span class="line">policy   管理访问策略。</span><br><span class="line">config   管理mc配置文件。</span><br><span class="line">update   检查软件更新。</span><br><span class="line">version  输出版本信息。</span><br></pre></td></tr></table></figure><h2 id="2、mc配置与基本操作">2、mc配置与基本操作</h2><p><code>mc</code>将所有的配置信息都存储在<code>~/.mc/config.json</code>文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询mc host配置</span></span><br><span class="line">mc config host ls</span><br><span class="line"><span class="comment"># 添加minio服务    </span></span><br><span class="line">mc config host add minio-server http://192.168.249.131:9000 minioadmin minioadmin</span><br><span class="line"><span class="comment"># 删除host</span></span><br><span class="line">mc config host remove minio-server</span><br><span class="line"><span class="comment"># 查询minio服务上的所有buckets(文件和文件夹)</span></span><br><span class="line">mc ls minio-server</span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">mc cp minio-server/fox.jpg  /tmp/ </span><br><span class="line"><span class="comment">#删除文件</span></span><br><span class="line">mc rm minio-server/fox/fox.jpg</span><br><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">mc cp zookeeper.out minio-server/fox/</span><br><span class="line"><span class="comment">#==================桶的管理==================</span></span><br><span class="line"><span class="comment"># 创建一个新的桶</span></span><br><span class="line">mc mb minio-server/bucket01</span><br><span class="line"><span class="comment"># 删除bucket</span></span><br><span class="line">mc rb minio-server/bucket02</span><br><span class="line"><span class="comment"># bucket不为空，可以强制删除（慎用）</span></span><br><span class="line">mc rb --force minio-server/bucket01</span><br><span class="line"><span class="comment"># 查询bucket03磁盘使用情况</span></span><br><span class="line">mc du minio-server/bucket03</span><br><span class="line"><span class="comment"># =====================数据迁移==================</span></span><br><span class="line">mc <span class="built_in">alias</span> <span class="built_in">set</span> minio1 http://172.20.10.2:9000 adminminio adminminio</span><br><span class="line">mc <span class="built_in">alias</span> <span class="built_in">set</span> minio2 http://172.20.10.3:9000 adminminio adminminio</span><br><span class="line"><span class="comment"># mc alias set 名称 服务地址 用户名 密码</span></span><br><span class="line"><span class="comment">#全量迁移,重名文件不覆盖,bucket不存在会自动创建</span></span><br><span class="line">mc mirror minio1 minio2</span><br><span class="line"><span class="comment">#只是迁移某个bucket,以test为例,目标的bucket需要提前建好</span></span><br><span class="line">mc mirror minio1/<span class="built_in">test</span> minio2/<span class="built_in">test</span></span><br><span class="line"><span class="comment">#覆盖重名文件,加--overwrite</span></span><br><span class="line">mc mirror --overwrite minio1/<span class="built_in">test</span> minio2/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 将本地文件夹递归镜像到Amazon S3云存储，并保留所有本地文件属性</span></span><br><span class="line">mc mirror -a backup/ s3/archive</span><br></pre></td></tr></table></figure><h2 id="3、mc-admin-使用">3、mc admin 使用</h2><h3 id="3-1-基本介绍">3.1 基本介绍</h3><blockquote><p>minIO Client（mc）提供了“ admin”子命令来对您的 MinIO 部署执行管理任务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">service     服务重启并停止所有MinIO服务器</span><br><span class="line">update      更新更新所有MinIO服务器</span><br><span class="line">info        信息显示MinIO服务器信息</span><br><span class="line">user        用户管理用户</span><br><span class="line">group       小组管理小组</span><br><span class="line">policy      MinIO服务器中定义的策略管理策略</span><br><span class="line">config      配置管理MinIO服务器配置</span><br><span class="line">heal        修复MinIO服务器上的磁盘，存储桶和对象</span><br><span class="line">profile     概要文件生成概要文件数据以进行调试</span><br><span class="line">top         顶部提供MinIO的顶部统计信息</span><br><span class="line">trace       跟踪显示MinIO服务器的http跟踪</span><br><span class="line">console     控制台显示MinIO服务器的控制台日志</span><br><span class="line">prometheus  Prometheus管理Prometheus配置</span><br><span class="line">kms         kms执行KMS管理操作</span><br></pre></td></tr></table></figure><h3 id="3-2-用户管理">3.2 用户管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mc admin user --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#新建用户</span></span><br><span class="line">mc admin user add minio-server fox</span><br><span class="line">mc admin user add minio-server fox02 12345678</span><br><span class="line"><span class="comment">#查看用户</span></span><br><span class="line">mc admin user list minio-server</span><br><span class="line"><span class="comment">#禁用用户</span></span><br><span class="line">mc admin user <span class="built_in">disable</span> minio-server fox02</span><br><span class="line"><span class="comment">#启用用户</span></span><br><span class="line">mc admin user <span class="built_in">enable</span> minio-server fox02</span><br><span class="line"><span class="comment">#查看用户信息</span></span><br><span class="line">mc admin user info minio-server fox</span><br><span class="line"><span class="comment">#删除用户</span></span><br><span class="line">mc admin user remove minio-server fox02</span><br></pre></td></tr></table></figure><h3 id="3-3-策略管理">3.3 策略管理</h3><p>policy 命令，用于添加，删除，列出策略，获取有关策略的信息并为 MinIO 服务器上的用户设置策略(创建用户之后还不能进行登录，必须绑定对应的策略)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mc admin policy --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#列出MinIO上的所有固定策略</span></span><br><span class="line">mc admin policy list minio-server</span><br><span class="line"><span class="comment"># 查看plicy信息</span></span><br><span class="line">mc admin policy info minio-server readwrite</span><br><span class="line"><span class="comment"># 为用户添加策略</span></span><br><span class="line">mc admin policy <span class="built_in">set</span> minio-server readwrite user=fox02</span><br><span class="line"><span class="comment"># 取消策略</span></span><br><span class="line">mc admin policy <span class="built_in">unset</span> minio-server readwrite user=fox02</span><br></pre></td></tr></table></figure><h3 id="3-4-添加用户权限自定义策略">3.4 添加用户权限自定义策略</h3><p>AWS Identity and Access Management (IAM) 是一种 Web 服务，可以帮助您安全地控制对 AWS 资源的访问。您可以使用 IAM 控制对哪个用户进行身份验证 (登录) 和授权 (具有权限) 以使用资源。</p><table><thead><tr><th>权限</th><th>解释</th></tr></thead><tbody><tr><td>consoleAdmin</td><td>控制台管理员</td></tr><tr><td>diagnostics</td><td>诊断</td></tr><tr><td>readonly</td><td>只读</td></tr><tr><td>readwrite</td><td>读写</td></tr><tr><td>writeonly</td><td>只写</td></tr></tbody></table><p>编写自己的自定义策略<code>vim mytest.json</code>，这里只能操作test桶，做到了资源隔离</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line"> <span class="attr">"Statement"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">   <span class="attr">"Action"</span>: [</span><br><span class="line">                <span class="string">"s3:GetObject"</span>,</span><br><span class="line">                <span class="string">"s3:ListAllMyBuckets"</span>,</span><br><span class="line">                <span class="string">"s3:ListBucket"</span>,</span><br><span class="line">                <span class="string">"s3:PutObject"</span>,</span><br><span class="line">                <span class="string">"s3:DeleteObject"</span>,</span><br><span class="line">                <span class="string">"s3:GetBucketLocation"</span></span><br><span class="line">            ],</span><br><span class="line">   <span class="attr">"Resource"</span>: [</span><br><span class="line">    <span class="string">"arn:aws:s3:::test/*"</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Version</td><td>标识策略的版本号，Minio中一般为&quot;<strong>2012-10-17</strong>&quot;</td></tr><tr><td>Statement</td><td>策略授权语句，描述策略的详细信息，包含Effect（效果）、Action（动作）、Principal（用户）、Resource（资源）和Condition（条件）。其中Condition为可选</td></tr><tr><td>Effect</td><td>Effect（效果）作用包含两种：Allow（允许）和Deny（拒绝），系统预置策略仅包含允许的授权语句，自定义策略中可以同时包含允许和拒绝的授权语句，当策略中既有允许又有拒绝的授权语句时，遵循Deny优先的原则</td></tr><tr><td>Action</td><td>Action（动作）对资源的具体操作权限，格式为：服务名:资源类型:操作，支持单个或多个操作权限，支持通配符号*，通配符号表示所有。例如 s3:GetObject ，表示获取对象</td></tr><tr><td>Resource</td><td>Resource（资源）策略所作用的资源，支持通配符号*，通配符号表示所有。在JSON视图中，不带Resource表示对所有资源生效。Resource支持以下字符：-_0-9a-zA-Z*./\，如果Resource中包含不支持的字符，请采用通配符号*。例如：arn:aws:s3:::my-bucketname/myobject*\，表示minio中my-bucketname/myobject目录下所有对象文件</td></tr><tr><td>Condition</td><td>Condition（条件）您可以在创建自定义策略时，通过Condition元素来控制策略何时生效。Condition包括条件键和运算符，条件键表示策略语句的Condition元素，分为全局级条件键和服务级条件键。全局级条件键（前缀为g:）适用于所有操作，服务级条件键（前缀为服务缩写，如obs:）仅适用于对应服务的操作。运算符与条件键一起使用，构成完整的条件判断语句</td></tr></tbody></table><p>最后把权限给与用户，发现该用户只能操作对应的桶，实现权限分离。<strong>同时在Web界面也可以快速编辑授权用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加新的策略</span></span><br><span class="line">mc admin policy add minio-server mypolicy mytest.json</span><br><span class="line">mc admin policy list minio-server</span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">mc admin user add minio-server fox03 12345678</span><br><span class="line"><span class="comment"># 设置用户的访问策略</span></span><br><span class="line">mc admin policy <span class="built_in">set</span> minio-server mypolicy user=fox03</span><br></pre></td></tr></table></figure><h2 id="4、桶策略-匿名访问策略">4、桶策略(匿名访问策略)</h2><h3 id="4-1-桶策略简介">4.1 桶策略简介</h3><blockquote><p>桶策略和IAM用户权限不同，用户权限管理的是用户的登录/可读/可写等操作，桶策略管理的是匿名用户的访问与上传，也可以自定义操作。<br>参考文章：<a href="https://blog.csdn.net/weixin_45821811/article/details/120595435" target="_blank" rel="noopener" title="Minio 小技巧 | 通过编码设置桶策略，实现永久访问和下载">Minio 小技巧 | 通过编码设置桶策略，实现永久访问和下载</a></p></blockquote><p>mc的命令行客户端，在mc种对桶策略设置对应分别是 <code>none, download, upload, public </code>,与minio的匿名访问策略一一对应：</p><ul><li><p><code>download</code>(read only )允许未经认证的访问</p></li><li><p><code>upload</code> (write only)允许未经认证的上传</p></li><li><p><code>public</code>(read+write)允许读写</p></li><li><p><code>none</code>(none) 默认值，必须经过认证</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更改桶权限为public(简单操作，对桶进行全局操作，无论桶中文件名前缀是什么)，也可以对其中一个路径</span></span><br><span class="line">mc policy <span class="built_in">set</span> public minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 设置只读</span></span><br><span class="line">mc policy <span class="built_in">set</span> download minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 只上传</span></span><br><span class="line">mc policy <span class="built_in">set</span> upload minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 自定义桶策略</span></span><br><span class="line">mc policy <span class="built_in">set</span>-json /path/to/policy.json minio-server/<span class="built_in">test</span>/images</span><br><span class="line"><span class="comment"># 获取桶策略</span></span><br><span class="line">mc policy get minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 获取桶策略的json</span></span><br><span class="line">mc policy get-json minio-server/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 列出当前的策略</span></span><br><span class="line">mc policy list minio-server/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="4-2-自定义桶策略">4.2 自定义桶策略</h3><ul><li><p>Version：版本</p></li><li><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html" target="_blank" rel="noopener" title="Actions">Actions</a>– 对于每个资源，Amazon S3 支持一组操作。您可以使用操作关键字标识将允许（或拒绝）的资源操作</p></li><li><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-bucket-user-policy-specifying-principal-intro.html" target="_blank" rel="noopener" title="Principal">Principal</a> ：被允许访问语句中的操作和资源的帐户或用户。在存储桶策略中，委托人是作为此权限接收者的用户、账户、服务或其他实体</p></li><li><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/amazon-s3-policy-keys.html" target="_blank" rel="noopener" title="Condition">Condition</a>– 政策生效的条件。您可以使用 <code>AWS</code>范围的密钥和 <code>Amazon S3</code> 特定的密钥来指定 <code>Amazon S3</code> 访问策略中的条件</p></li><li><p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-arn-format.html" target="_blank" rel="noopener" title="Resource">Resource</a>– 存储桶、对象、访问点和作业是您可以允许或拒绝权限的 Amazon S3 资源。在策略中，您使用 Amazon 资源名称 (ARN) 来标识资源</p></li><li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_effect.html" target="_blank" rel="noopener" title="Effect">Effect</a>：对于每个资源，Amazon S3 支持一组操作。您可以使用操作关键字标识将允许（或拒绝）的资源操作</p><p>如：该<code>s3:ListBucket</code>权限允许用户使用 Amazon S3 <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGET.html" target="_blank" rel="noopener" title="GET Bucket (List Objects)">GET Bucket (List Objects)</a>操作</p></li></ul><p>下面是自定义的桶策略，支持可读可写，完成后赋予相应的桶即可，<code>mc policy set-json /path/to/policy.json minio-server/test/images</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line"> <span class="string">"Statement"</span>: [</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">   <span class="string">"Principal"</span>: &#123;</span><br><span class="line">                <span class="string">"AWS"</span>: [</span><br><span class="line">                    <span class="string">"*"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">   <span class="string">"Action"</span>: [</span><br><span class="line">                <span class="string">"s3:GetBucketLocation"</span>,</span><br><span class="line">                <span class="string">"s3:ListBucket"</span>,</span><br><span class="line">                <span class="string">"s3:ListBucketMultipartUploads"</span></span><br><span class="line"></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"Resource"</span>: [</span><br><span class="line">    <span class="string">"arn:aws:s3:::test"</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> ,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">   <span class="string">"Action"</span>: [</span><br><span class="line">                <span class="string">"s3:GetObject"</span>,</span><br><span class="line">                <span class="string">"s3:PutObject"</span>,</span><br><span class="line">                <span class="string">"s3:DeleteObject"</span>,</span><br><span class="line">                <span class="string">"s3:AbortMultipartUpload"</span>,</span><br><span class="line">                <span class="string">"s3:ListMultipartUploadParts"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Principal"</span>: &#123;</span><br><span class="line">                <span class="string">"AWS"</span>: [</span><br><span class="line">                    <span class="string">"*"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">   <span class="string">"Resource"</span>: [</span><br><span class="line">    <span class="string">"arn:aws:s3:::test/*"</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-集成SpringBoot，编码设置桶策略">4.3 集成SpringBoot，编码设置桶策略</h3><p>第一种是json转string</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolicyJsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要在resource下先创建好文件</span></span><br><span class="line"><span class="comment">     * json转String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 这里是传入的桶名称，执行完后会替换掉原json文件中的MybuckerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">json2String</span><span class="params">(String path, String bucketName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(path);</span><br><span class="line">        InputStream in = resource.getInputStream();</span><br><span class="line">        <span class="comment">// 读取文件上的数据。</span></span><br><span class="line">        <span class="comment">// 将字节流向字符流的转换。</span></span><br><span class="line">        <span class="comment">// 读取</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(in, StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">// 创建字符流缓冲区</span></span><br><span class="line">        <span class="comment">// 缓冲</span></span><br><span class="line">        BufferedReader bufr = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufr.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.append(System.lineSeparator()+line);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">        JSONObject parse = (JSONObject) JSONObject.parse(result.toString());</span><br><span class="line">        JSONArray statement = (JSONArray) parse.get(<span class="string">"Statement"</span>);</span><br><span class="line">        JSONObject o = (JSONObject) statement.get(<span class="number">0</span>);</span><br><span class="line">        o.remove(<span class="string">"Resource"</span>);</span><br><span class="line">        o.fluentPut(<span class="string">"Resource"</span>, <span class="string">"arn:aws:s3:::"</span> + bucketName);</span><br><span class="line">        JSONObject o1 = (JSONObject) statement.get(<span class="number">1</span>);</span><br><span class="line">        o1.remove(<span class="string">"Resource"</span>);</span><br><span class="line">        o1.fluentPut(<span class="string">"Resource"</span>, <span class="string">"arn:aws:s3:::"</span> + bucketName + <span class="string">"/*"</span>);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">        <span class="keyword">return</span> parse.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，当然在管理后台也可以设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolicyService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 占位符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUCKET_PARAM = <span class="string">"$&#123;bucket&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bucket权限-读写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String READ_WRITE = <span class="string">"&#123;\"Version\":\"2012-10-17\",\"Statement\":[&#123;\"Effect\":\"Allow\",\"Principal\":&#123;\"AWS\":[\"*\"]&#125;,\"Action\":[\"s3:GetBucketLocation\",\"s3:ListBucket\",\"s3:ListBucketMultipartUploads\"],\"Resource\":[\"arn:aws:s3:::"</span> + BUCKET_PARAM + <span class="string">"\"]&#125;,&#123;\"Effect\":\"Allow\",\"Principal\":&#123;\"AWS\":[\"*\"]&#125;,\"Action\":[\"s3:DeleteObject\",\"s3:GetObject\",\"s3:ListMultipartUploadParts\",\"s3:PutObject\",\"s3:AbortMultipartUpload\"],\"Resource\":[\"arn:aws:s3:::"</span> + BUCKET_PARAM + <span class="string">"/*\"]&#125;]&#125;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bucket权限-只读</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WRITE_ONLY = <span class="string">"&#123;\"Version\":\"2012-10-17\",\"Statement\":[&#123;\"Effect\":\"Allow\",\"Principal\":&#123;\"AWS\":[\"*\"]&#125;,\"Action\":[\"s3:GetBucketLocation\",\"s3:ListBucketMultipartUploads\"],\"Resource\":[\"arn:aws:s3:::"</span> + BUCKET_PARAM + <span class="string">"\"]&#125;,&#123;\"Effect\":\"Allow\",\"Principal\":&#123;\"AWS\":[\"*\"]&#125;,\"Action\":[\"s3:AbortMultipartUpload\",\"s3:DeleteObject\",\"s3:ListMultipartUploadParts\",\"s3:PutObject\"],\"Resource\":[\"arn:aws:s3:::"</span> + BUCKET_PARAM + <span class="string">"/*\"]&#125;]&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给桶设置策略 ，可读可写等等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBucketPolicy</span><span class="params">(String bucketName)</span> </span>&#123;</span><br><span class="line">        String policy= PolicyJsonUtils.json2String(<span class="string">"policyJson.json"</span>,bucketName);</span><br><span class="line">        <span class="comment">//用工具类 就是把里面的常量替换出来就可以了，当时写了两种方式（喜欢那种就用那种吧）</span></span><br><span class="line">        MinioClient minioClient =</span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(<span class="string">"http://192.168.249.131:9000"</span>)</span><br><span class="line">                        .credentials(<span class="string">"minioadmin"</span>, <span class="string">"minioadmin"</span>)</span><br><span class="line">                        .build();</span><br><span class="line">        minioClient.setBucketPolicy(SetBucketPolicyArgs.builder().bucket(bucketName).</span><br><span class="line">                config(READ_WRITE.replace(BUCKET_PARAM, bucketName)).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里写桶的名字</span></span><br><span class="line">        setBucketPolicy(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、其他桶操作API">5、其他桶操作API</h2><blockquote><p>其他桶策略可以参考：<a href="https://yunyanchengyu.blog.csdn.net/article/details/120841843" target="_blank" rel="noopener" title="JAVA集成Minio之存储桶操作API使用详解">JAVA集成Minio之存储桶操作API使用详解</a><br>官方参考文档：<a href="https://docs.min.io/docs/java-client-api-reference.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a></p></blockquote><ul><li><p>桶是否存在</p></li><li><p>桶创建</p></li><li><p>查询存储桶信息列表</p></li><li><p>删除存储桶</p></li><li><p>加密桶</p></li><li><p>桶生命周期设置</p></li><li><p>桶的通知配置</p></li><li><p>桶的策略配置</p></li><li><p>桶的复制配置</p></li><li><p>存储桶标签</p></li><li><p>桶的多版本设置</p></li><li><p>桶的常用配置删除</p></li></ul><h1>四、Java整合Minio使用</h1><h2 id="1、Minio-Java-Client-使用">1、Minio Java Client 使用</h2><blockquote><p>MinIO Java Client SDK 提供简单的 API 来访问任何与 Amazon S3 兼容的对象存储服务。<br>官方 demo: <a href="https://xie.infoq.cn/link?target=https://github.com/minio/minio-java" title="https://github.com/minio/minio-java">https://github.com/minio/minio-java</a><br>官方文档：<a href="https://xie.infoq.cn/link?target=https://docs.min.io/docs/java-client-api-reference.html" title="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a><br>博客参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124675675" target="_blank" rel="noopener" title="https://blog.csdn.net/lemon_TT/article/details/124675675">https://blog.csdn.net/lemon_TT/article/details/124675675</a></p></blockquote><p>其他Minio对象操作可以参考：<a href="https://yunyanchengyu.blog.csdn.net/article/details/120849494" target="_blank" rel="noopener" title="JAVA集成Minio之对象操作API使用详解">JAVA集成Minio之对象操作API使用详解</a></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploader</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, InvalidKeyException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span></span><br><span class="line">     MinioClient minioClient =</span><br><span class="line">              MinioClient.builder()</span><br><span class="line">                      .endpoint(<span class="string">"http://192.168.249.131:9000"</span>)</span><br><span class="line">                      .credentials(<span class="string">"minioadmin"</span>, <span class="string">"minioadmin"</span>)</span><br><span class="line">                      .build();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建bucket</span></span><br><span class="line">      String bucketName = <span class="string">"test"</span>;</span><br><span class="line">      <span class="keyword">boolean</span> exists = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">      <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">        <span class="comment">// 不存在，创建bucket</span></span><br><span class="line">        minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 上传文件</span></span><br><span class="line">      minioClient.uploadObject(</span><br><span class="line">              UploadObjectArgs.builder()</span><br><span class="line">                      .bucket(bucketName)</span><br><span class="line">                      .object(<span class="string">"test.zip"</span>)</span><br><span class="line">                      .filename(<span class="string">"F:\\mall\\test.zip"</span>)</span><br><span class="line">                      .build());</span><br><span class="line">      System.out.println(<span class="string">"上传文件成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Error occurred: "</span> + e);</span><br><span class="line">      System.out.println(<span class="string">"HTTP trace: "</span> + e.httpTrace());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span></span><br><span class="line">        MinioClient minioClient =</span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(<span class="string">"http://192.168.249.131:9000"</span>)</span><br><span class="line">                        .credentials(<span class="string">"minioadmin"</span>, <span class="string">"minioadmin"</span>)</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Download object given the bucket, object name and output file name</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.downloadObject(</span><br><span class="line">                    DownloadObjectArgs.builder()</span><br><span class="line">                            .bucket(<span class="string">"test"</span>)</span><br><span class="line">                            .object(<span class="string">"小车操作记录.txt"</span>)</span><br><span class="line">                            .filename(<span class="string">"小车操作记录.txt"</span>)</span><br><span class="line">                            .build());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Spring-boot-整合-minio">2、Spring boot 整合 minio</h2><p>构建 MinioClient 对象，并交给 spring 管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"minio"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//yml</span></span><br><span class="line">minio:</span><br><span class="line">  endpoint: http:<span class="comment">//192.168.249.131:9000</span></span><br><span class="line">  accesskey: minioadmin</span><br><span class="line">  secretKey: minioadmin</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioProperties minioProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MinioClient <span class="title">minioClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MinioClient minioClient =</span><br><span class="line">                MinioClient.builder()</span><br><span class="line">                        .endpoint(minioProperties.getEndpoint())</span><br><span class="line">                        .credentials(minioProperties.getAccessKey(), minioProperties.getSecretKey())</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> minioClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现文件上传，下载，删除操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinioController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;minio.bucketName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">list</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取bucket列表</span></span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; myObjects = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        Iterator&lt;Result&lt;Item&gt;&gt; iterator = myObjects.iterator();</span><br><span class="line">        List&lt;Object&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String format = <span class="string">"&#123;'fileName':'%s','fileSize':'%s'&#125;"</span>;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Item item = iterator.next().get();</span><br><span class="line">            items.add(JSON.parse(String.format(format, item.objectName(), formatFileSize(item.size()))));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Res <span class="title">upload</span><span class="params">(@RequestParam(name = <span class="string">"file"</span>, required = <span class="keyword">false</span>)</span> MultipartFile[] file) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file == <span class="keyword">null</span> || file.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Res.error(<span class="string">"上传文件不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; orgfileNameList = <span class="keyword">new</span> ArrayList&lt;&gt;(file.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MultipartFile multipartFile : file) &#123;</span><br><span class="line">            String orgfileName = multipartFile.getOriginalFilename();</span><br><span class="line">            orgfileNameList.add(orgfileName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//文件上传</span></span><br><span class="line">                InputStream in = multipartFile.getInputStream();</span><br><span class="line">                minioClient.putObject(</span><br><span class="line">                        PutObjectArgs.builder().bucket(bucketName).object(orgfileName).stream(</span><br><span class="line">                                in, multipartFile.getSize(), -<span class="number">1</span>)</span><br><span class="line">                                .contentType(multipartFile.getContentType())</span><br><span class="line">                                .build());</span><br><span class="line">                in.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">                <span class="keyword">return</span> Res.error(<span class="string">"上传失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        data.put(<span class="string">"bucketName"</span>, bucketName);</span><br><span class="line">        data.put(<span class="string">"fileName"</span>, orgfileNameList);</span><br><span class="line">        <span class="keyword">return</span> Res.ok(<span class="string">"上传成功"</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/download/&#123;fileName&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(HttpServletResponse response, @PathVariable(<span class="string">"fileName"</span>)</span> String fileName) </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取对象信息</span></span><br><span class="line">            StatObjectResponse stat = minioClient.statObject(</span><br><span class="line">                    StatObjectArgs.builder().bucket(bucketName).object(fileName).build());</span><br><span class="line">            response.setContentType(stat.contentType());</span><br><span class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line">            <span class="comment">//文件下载</span></span><br><span class="line">            in = minioClient.getObject(</span><br><span class="line">                    GetObjectArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .object(fileName)</span><br><span class="line">                            .build());</span><br><span class="line">            IOUtils.copy(in, response.getOutputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    log.error(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/delete/&#123;fileName&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Res <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"fileName"</span>)</span> String fileName) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeObject(</span><br><span class="line">                    RemoveObjectArgs.builder().bucket(bucketName).object(fileName).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> Res.error(<span class="string">"删除失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Res.ok(<span class="string">"删除成功"</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">formatFileSize</span><span class="params">(<span class="keyword">long</span> fileS)</span> </span>&#123;</span><br><span class="line">        DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.00"</span>);</span><br><span class="line">        String fileSizeString = <span class="string">""</span>;</span><br><span class="line">        String wrongSize = <span class="string">"0B"</span>;</span><br><span class="line">        <span class="keyword">if</span> (fileS == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> wrongSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fileS &lt; <span class="number">1024</span>) &#123;</span><br><span class="line">            fileSizeString = df.format((<span class="keyword">double</span>) fileS) + <span class="string">" B"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileS &lt; <span class="number">1048576</span>) &#123;</span><br><span class="line">            fileSizeString = df.format((<span class="keyword">double</span>) fileS / <span class="number">1024</span>) + <span class="string">" KB"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileS &lt; <span class="number">1073741824</span>) &#123;</span><br><span class="line">            fileSizeString = df.format((<span class="keyword">double</span>) fileS / <span class="number">1048576</span>) + <span class="string">" MB"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fileSizeString = df.format((<span class="keyword">double</span>) fileS / <span class="number">1073741824</span>) + <span class="string">" GB"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileSizeString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、其他对象操作API使用详解">3、其他对象操作API使用详解</h2><blockquote><p>官方文档：<a href="https://docs.min.io/docs/java-client-api-reference.html" target="_blank" rel="noopener" title="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a></p></blockquote><p><strong>上传对象</strong></p><ul><li><p>PutObject</p></li><li><p>uploadObject</p></li></ul><p><strong>获取对象</strong></p><ul><li><p>getObject</p></li><li><p>downloadObject</p></li><li><p>getPresignedObjectUrl</p></li><li><p>selectObjectContent</p></li><li><p>getPresignedPostFormData</p></li></ul><p><strong>复制对象</strong></p><p><strong>删除对象</strong></p><p><strong>对象信息查询及设置</strong></p><hr><p>参考文章</p><p><a href="https://juejin.cn/post/7001676085087698974" target="_blank" rel="noopener" title="minio快速入门">minio快速入门</a></p><p><a href="https://blog.csdn.net/qq_43437874/article/details/120855875" target="_blank" rel="noopener" title="Minio入门系列【10】Minio之权限控制策略">Minio入门系列【10】Minio之权限控制策略</a></p><p><a href="https://blogs.qianlongyun.cn/archives/1382.html/" target="_blank" rel="noopener" title="minio的桶匿名访问策略">minio的桶匿名访问策略</a></p><p><a href="https://xie.infoq.cn/article/66ffc331f851f5873a3e1b2d3" target="_blank" rel="noopener" title="分布式文件存储系统 Minio 实战">分布式文件存储系统 Minio 实战</a></p><p><a href="https://www.bilibili.com/video/BV1ff4y1K7QA" target="_blank" rel="noopener" title="B站最详细的分布式文件系统MinIO入门到实战">B站最详细的分布式文件系统MinIO入门到实战</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、MinIO介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、文件系统应用场景&quot;&gt;1、文件系统应用场景&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对象存储服务（Object Storage Service，OSS）是一种海量、安全、低成本、高可靠的云存储服&lt;br&gt;
务，适合存放任意类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成&lt;br&gt;
本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;互联网海量非结构化数据的存储需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;电商网站：海量商品图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视频网站：海量视频文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网盘 : 海量文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;社交网站：海量图片&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/124675675&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;MinIO分布式文件服务器搭建与入门&quot;&gt;MinIO分布式文件服务器搭建与入门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://www.shawn22.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot统一异常处理详解</title>
    <link href="https://www.shawn22.xyz/posts/f1e31382.html"/>
    <id>https://www.shawn22.xyz/posts/f1e31382.html</id>
    <published>2022-09-28T09:32:59.000Z</published>
    <updated>2022-09-28T09:46:31.859Z</updated>
    
    <content type="html"><![CDATA[<h1>SpringBoot统一异常处理详解</h1><h1>一、概述</h1><blockquote><p>后端规范入门参考：<a href="https://blog.csdn.net/lemon_TT/article/details/108309900" target="_blank" rel="noopener" title="Spring Boot后端接口规范">Spring Boot后端接口规范</a></p></blockquote><h2 id="1、统一异常处理介绍">1、统一异常处理介绍</h2><p><code>Spring</code>在3.2版本增加了一个注解<code>@ControllerAdvice</code>，可以与<code>@ExceptionHandler</code>、<code>@InitBinder</code>、<code>@ModelAttribute</code> 等注解注解配套使用。不过跟异常处理相关的只有注解<code>@ExceptionHandler</code>，从字面上看，就是 <strong>异常处理器</strong> 的意思</p><a id="more"></a><h2 id="2、原理和目标">2、原理和目标</h2><p>简单的说，该注解可以把异常处理器应用到所有控制器，而不是单个控制器。借助该注解，我们可以实现：在独立的某个地方，比如单独一个类，定义一套对各种异常的处理机制，然后在类的签名加上注解<code>@ControllerAdvice</code>，统一对 <code>不同阶段的</code>、<code>不同异常</code> 进行处理。这就是统一异常处理的原理。</p><p>对异常按阶段进行分类，大体可以分成：进入<code>Controller</code>前的异常 和 <code>Service</code> 层异常</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2c25f6ebfb33885a951bf4292f4f8c75.png" alt></p><p>目标就是消灭95%以上的 <code>try catch</code> 代码块，并以优雅的 <code>Assert</code>(断言) 方式来校验业务的异常情况，只关注业务逻辑，而不用花费大量精力写冗余的 <code>try catch</code> 代码块。</p><h1>二、Assert(断言)</h1><h2 id="1、概述">1、概述</h2><p>**Assert(断言)**是Spring 家族的 <code>org.springframework.util.Assert</code>，在我们写测试用例的时候经常会用到，使用断言能让我们编码的时候有一种非一般丝滑的感觉</p><p><code>Assert</code> 的部分源码，可以看到，<strong>Assert 其实就是帮我们把 if {…} 封装了一下</strong>，抛出的异常是<code>IllegalArgumentException()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Assert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Assert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notNull</span><span class="params">(@Nullable Object object, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Assert自定义实战">2、Assert自定义实战</h2><h3 id="2-1-自定义接口Assert">2.1 自定义接口Assert</h3><p>Assert断言方法是使用接口的默认方法定义的，然后有没有发现当断言失败后，抛出的异常不是具体的某个异常，而是交由2个<strong>newException</strong>接口方法提供。因为业务逻辑中出现的异常基本都是对应特定的场景，比如根据用户id获取用户信息，查询结果为null，此时抛出的异常可能为<code>UserNotFoundException</code>，并且有<strong>特定的异常码（比如7001）和异常信息&quot;用户不存在&quot;</strong>。所以具体抛出什么异常，有Assert的实现类决定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Assert</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseException <span class="title">newException</span><span class="params">(Object... args)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BaseException <span class="title">newException</span><span class="params">(Throwable t, Object... args)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;断言对象&lt;code&gt;obj&lt;/code&gt;非空。如果对象&lt;code&gt;obj&lt;/code&gt;为空，则抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 待判断对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">assertNotNull</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> newException(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;断言对象&lt;code&gt;obj&lt;/code&gt;非空。如果对象&lt;code&gt;obj&lt;/code&gt;为空，则抛出异常</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;异常信息&lt;code&gt;message&lt;/code&gt;支持传递参数方式，避免在判断之前进行字符串拼接操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 待判断对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args message占位符对应的参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">assertNotNull</span><span class="params">(Object obj, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> newException(args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-自定义异常">2.2 自定义异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IResponseEnum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;业务异常&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;业务处理时，出现异常，可以抛出该异常&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span>  <span class="title">BaseException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(IResponseEnum responseEnum, Object[] args, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(responseEnum, args, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(IResponseEnum responseEnum, Object[] args, String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(responseEnum, args, message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Enum整合">2.3 Enum整合</h3><p>代码示例中定义了两个枚举实例：<code>BAD_LICENCE_TYPE</code>、<code>LICENCE_NOT_FOUND</code>，分别对应了<code>BadLicenceTypeException</code>、<code>LicenceNotFoundException</code>两种异常。以后每增加一种异常情况，只需增加一个枚举实例即可，再也不用每一种异常都定义一个异常类了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BusinessExceptionAssert</span> <span class="keyword">extends</span> <span class="title">IResponseEnum</span>, <span class="title">Assert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> BaseException <span class="title">newException</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">        String msg = MessageFormat.format(<span class="keyword">this</span>.getMessage(), args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BusinessException(<span class="keyword">this</span>, args, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> BaseException <span class="title">newException</span><span class="params">(Throwable t, Object... args)</span> </span>&#123;</span><br><span class="line">        String msg = MessageFormat.format(<span class="keyword">this</span>.getMessage(), args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BusinessException(<span class="keyword">this</span>, args, msg, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResponseEnum implements BusinessExceptionAssert &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bad licence type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BAD_LICENCE_TYPE(<span class="number">7001</span>, <span class="string">"Bad licence type."</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Licence not found</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LICENCE_NOT_FOUND(<span class="number">7002</span>, <span class="string">"Licence not found."</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-实战检测">2.4 实战检测</h3><p>使用枚举类结合(继承)Assert，只需根据特定的异常情况定义不同的枚举实例，如上面的<code>BAD_LICENCE_TYPE</code>、<code>LICENCE_NOT_FOUND</code>，就能够针对不同情况抛出特定的异常（这里指携带特定的异常码和异常消息），这样既不用定义大量的异常类，同时还具备了断言的良好可读性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkNotNull</span><span class="params">(Licence licence)</span> </span>&#123;</span><br><span class="line">    ResponseEnum.LICENCE_NOT_FOUND.assertNotNull(licence,<span class="string">"测试"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 替代下面的方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkNotNull</span><span class="params">(Licence licence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (licence == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> LicenceNotFoundException();</span><br><span class="line">        <span class="comment">// 或者这样</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="number">7001</span>, <span class="string">"Bad licence type."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、统一异常处理器</h1><h2 id="1、异常处理器说明">1、异常处理器说明</h2><h3 id="1-1-handleServletException">1.1 handleServletException</h3><p>一个http请求，在到达<code>Controller</code>前，会对该请求的请求信息与目标控制器信息做一系列校验</p><ul><li><p><code>NoHandlerFoundException</code>：首先根据请求Url查找有没有对应的控制器，若没有则会抛该异常，也就是大家非常熟悉的404异常，但是实际上当出现404的时候，默认是不抛异常的，而是 forward跳转到/error控制器，<strong>spring也提供了默认的error控制器</strong>，如果要抛出异常，需要配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.throw-exception-if-no-handler-found&#x3D;true</span><br><span class="line">spring.web.resources.add-mappings&#x3D;false</span><br></pre></td></tr></table></figure></li><li><p><code>HttpRequestMethodNotSupportedException</code>：若匹配到了（匹配结果是一个列表，不同的是http方法不同，如：Get、Post等），则尝试将请求的http方法与列表的控制器做匹配，若没有对应http方法的控制器，则抛该异常；</p></li><li><p><code>HttpMediaTypeNotSupportedException</code>：然后再对请求头与控制器支持的做比较，比如<code>content-type</code>请求头，若控制器的参数签名包含注解<code>@RequestBody</code>，但是请求的<code>content-type</code>请求头的值没有包含<code>application/json</code>，那么会抛该异常（当然，不止这种情况会抛这个异常）；</p></li><li><p><code>MissingPathVariableException</code>：未检测到路径参数。比如url为：<code>/licence/{licenceId}</code>，参数签名包含<code>@PathVariable(&quot;licenceId&quot;)</code>，当请求的url为<code>/licence</code>，在没有明确定义url为<code>/licence</code>的情况下，会被判定为：缺少路径参数；</p></li><li><p><code>MissingServletRequestParameterException</code>：缺少请求参数。比如定义了参数<code>@RequestParam(&quot;licenceId&quot;) String licenceId</code>，但发起请求时，未携带该参数，则会抛该异常；</p></li><li><p><code>TypeMismatchException</code>: 参数类型匹配失败。比如：接收参数为Long型，但传入的值确是一个字符串，那么将会出现类型转换失败的情况，这时会抛该异常；</p></li><li><p><code>HttpMessageNotReadableException</code>：与上面的<code>HttpMediaTypeNotSupportedException</code>举的例子完全相反，即请求头携带了<code>&quot;content-type: application/json;charset=UTF-8&quot;</code>，但接收参数却没有添加注解<code>@RequestBody</code>，或者请求体携带的 json 串反序列化成 pojo 的过程中失败了，也会抛该异常；</p></li><li><p><code>HttpMessageNotWritableException</code>：返回的 pojo 在序列化成 json 过程失败了，那么抛该异常；</p></li></ul><h3 id="1-2-handleBindException和handleValidException">1.2 <strong>handleBindException</strong>和<strong>handleValidException</strong></h3><p>参数校验异常</p><h3 id="1-3-handleBusinessException、handleBaseException">1.3 <strong>handleBusinessException、handleBaseException</strong></h3><p>处理自定义的业务异常，只是<code>handleBaseException</code>处理的是除了 <code>BusinessException</code> 意外的所有业务异常。就目前来看，这2个是可以合并成一个的</p><h3 id="1-4-handleException">1.4 <strong>handleException</strong></h3><p>处理所有未知的异常，比如操作数据库失败的异常。</p><blockquote><p>注：上面的<code>handleServletException</code>、<code>handleException</code> 这两个处理器，返回的异常信息，不同环境返回的可能不一样，以为这些异常信息都是框架自带的异常信息，一般都是英文的，不太好直接展示给用户看，所以统一返回<code>SERVER_ERROR</code>代表的异常信息</p></blockquote><h2 id="2、自定义统一异常处理器类">2、自定义统一异常处理器类</h2><p>将异常分成几类，实际上只有两大类，一类是<code>ServletException</code>、<code>ServiceException</code>，还记得上文提到的 <strong>按阶段分类</strong> 吗，即对应 进入<code>Controller</code>前的异常 和 <code>Service</code> 层异常；然后 <code>ServiceException</code> 再分成自定义异常、未知异常。对应关系如下：</p><ul><li><p>进入<code>Controller</code>前的异常: <strong>handleServletException、handleBindException、handleValidException</strong></p></li><li><p>自定义异常:** handleBusinessException、handleBaseException**</p></li><li><p>未知异常: <strong>handleException</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(UnifiedExceptionHandler<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UnifiedExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String ENV_PROD = <span class="string">"prod"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UnifiedMessageSource unifiedMessageSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.profiles.active&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String profile;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取国际化消息</span></span><br><span class="line"><span class="comment">     * 这里可以做处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(BaseException e)</span> </span>&#123;</span><br><span class="line">        String code = <span class="string">"response."</span> + e.getResponseEnum().toString();</span><br><span class="line">        String message = unifiedMessageSource.getMessage(code, e.getArgs());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message == <span class="keyword">null</span> || message.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = BusinessException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleBusinessException</span>(<span class="title">BaseException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(e.getResponseEnum().getCode(), getMessage(e));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = BaseException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleBaseException</span>(<span class="title">BaseException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(e.getResponseEnum().getCode(), getMessage(e));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Controller上一层相关异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;</span><br><span class="line">            NoHandlerFoundException<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpRequestMethodNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMediaTypeNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MissingPathVariableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MissingServletRequestParameterException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">TypeMismatchException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMessageNotReadableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMessageNotWritableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            // <span class="title">BindException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            // <span class="title">MethodArgumentNotValidException</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">            <span class="title">HttpMediaTypeNotAcceptableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">ServletRequestBindingException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">ConversionNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MissingServletRequestPartException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">AsyncRequestTimeoutException</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">    &#125;)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleServletException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">int</span> code = CommonResponseEnum.SERVER_ERROR.getCode();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServletResponseEnum servletExceptionEnum = ServletResponseEnum.valueOf(e.getClass().getSimpleName());</span><br><span class="line">            code = servletExceptionEnum.getCode();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e1) &#123;</span><br><span class="line">            log.error(<span class="string">"class [&#123;&#125;] not defined in enum &#123;&#125;"</span>, e.getClass().getName(), ServletResponseEnum<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ENV_PROD.equals(profile)) &#123;</span><br><span class="line">            <span class="comment">// 当为生产环境, 不适合把具体的异常信息展示给用户, 比如404.</span></span><br><span class="line">            code = CommonResponseEnum.SERVER_ERROR.getCode();</span><br><span class="line">            BaseException baseException = <span class="keyword">new</span> BaseException(CommonResponseEnum.SERVER_ERROR);</span><br><span class="line">            String message = getMessage(baseException);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(code, message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(code, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数绑定异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = BindException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleBindException</span>(<span class="title">BindException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(<span class="string">"参数绑定校验异常"</span>, e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapperBindingResult(e.getBindingResult());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数校验异常，将校验失败的所有异常组合成一条错误信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleValidException</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(<span class="string">"参数绑定校验异常"</span>, e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapperBindingResult(e.getBindingResult());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包装绑定异常结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bindingResult 绑定结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ErrorResponse <span class="title">wrapperBindingResult</span><span class="params">(BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        StringBuilder msg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class="line">            msg.append(<span class="string">", "</span>);</span><br><span class="line">            <span class="keyword">if</span> (error <span class="keyword">instanceof</span> FieldError) &#123;</span><br><span class="line">                msg.append(((FieldError) error).getField()).append(<span class="string">": "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            msg.append(error.getDefaultMessage() == <span class="keyword">null</span> ? <span class="string">""</span> : error.getDefaultMessage());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(ArgumentResponseEnum.VALID_ERROR.getCode(), msg.substring(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未定义异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorResponse</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ENV_PROD.equals(profile)) &#123;</span><br><span class="line">            <span class="comment">// 当为生产环境, 不适合把具体的异常信息展示给用户, 比如数据库异常信息.</span></span><br><span class="line">            <span class="keyword">int</span> code = CommonResponseEnum.SERVER_ERROR.getCode();</span><br><span class="line">            BaseException baseException = <span class="keyword">new</span> BaseException(CommonResponseEnum.SERVER_ERROR);</span><br><span class="line">            String message = getMessage(baseException);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(code, message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponse(CommonResponseEnum.SERVER_ERROR.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、其他类型统一处理器">3、其他类型统一处理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(NoLoginException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">noLoginExceptionHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">HttpServletResponse</span> <span class="title">response</span>,<span class="title">Exception</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        log.error(<span class="string">"[GlobalExceptionHandler][noLoginExceptionHandler] exception"</span>,e);</span><br><span class="line">        JsonResult jsonResult = <span class="keyword">new</span> JsonResult();</span><br><span class="line">        jsonResult.setCode(JsonResultCode.NO_LOGIN);</span><br><span class="line">        jsonResult.setMessage(<span class="string">"用户登录失效或者登录超时,请先登录"</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ServiceException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">businessExceptionHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">HttpServletResponse</span> <span class="title">response</span>,<span class="title">Exception</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        log.error(<span class="string">"[GlobalExceptionHandler][businessExceptionHandler] exception"</span>,e);</span><br><span class="line">        JsonResult jsonResult = <span class="keyword">new</span> JsonResult();</span><br><span class="line">        jsonResult.setCode(JsonResultCode.FAILURE);</span><br><span class="line">        jsonResult.setMessage(<span class="string">"业务异常,请联系管理员"</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">exceptionHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">HttpServletResponse</span> <span class="title">response</span>,<span class="title">Exception</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        log.error(<span class="string">"[GlobalExceptionHandler][exceptionHandler] exception"</span>,e);</span><br><span class="line">        JsonResult jsonResult = <span class="keyword">new</span> JsonResult();</span><br><span class="line">        jsonResult.setCode(JsonResultCode.FAILURE);</span><br><span class="line">        jsonResult.setMessage(<span class="string">"系统错误,请联系管理员"</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、统一返回结果">4、统一返回结果</h2><p><code>code</code>、<code>message</code> 是所有返回结果中必有的字段，而当需要返回数据时，则需要另一个字段 <code>data</code> 来表示。所以首先定义一个 <code>BaseResponse</code> 来作为所有返回结果的基类</p><p>然后定义一个通用返回结果类<code>CommonResponse</code>，继承 <code>BaseResponse</code>，而且多了字段 <code>data</code>；为了区分成功和失败返回结果，于是再定义一个 <code>ErrorResponse</code></p><p>最后还有一种常见的返回结果，即返回的数据带有分页信息，因为这种接口比较常见，所以有必要单独定义一个返回结果类 <code>QueryDataResponse</code>，该类继承自 <code>CommonResponse</code>，只是把 <code>data</code> 字段的类型限制为 <code>QueryDdata</code>，<code>QueryDdata</code>中定义了分页信息相应的字段，即<code>totalCount</code>、<code>pageNo</code>、 <code>pageSize</code>、<code>records</code>。其中比较常用的只有 <code>CommonResponse</code> 和 <code>QueryDataResponse</code>，但是名字又贼鬼死长，何不定义2个名字超简单的类来替代呢？于是 <code>R</code> 和 <code>QR</code> 诞生了，以后返回结果的时候只需这样写：<code>new R&lt;&gt;(data)</code>、<code>new QR&lt;&gt;(queryData)</code></p><blockquote><p>因为这一套统一异常处理可以说是通用的，所有可以设计成一个 <code>common</code>包，以后每一个新项目/模块只需引入该包即可</p></blockquote><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/lemon_TT/article/details/108309900" target="_blank" rel="noopener" title="Spring Boot后端接口规范">Spring Boot后端接口规范</a></p><p><a href="https://mp.weixin.qq.com/s/8GbIWyvxpY_4h-WPRrXslw" target="_blank" rel="noopener" title="减少 try catch ，可以这样干">减少 try catch ，可以这样干</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;SpringBoot统一异常处理详解&lt;/h1&gt;
&lt;h1&gt;一、概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;后端规范入门参考：&lt;a href=&quot;https://blog.csdn.net/lemon_TT/article/details/108309900&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Spring Boot后端接口规范&quot;&gt;Spring Boot后端接口规范&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、统一异常处理介绍&quot;&gt;1、统一异常处理介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;在3.2版本增加了一个注解&lt;code&gt;@ControllerAdvice&lt;/code&gt;，可以与&lt;code&gt;@ExceptionHandler&lt;/code&gt;、&lt;code&gt;@InitBinder&lt;/code&gt;、&lt;code&gt;@ModelAttribute&lt;/code&gt; 等注解注解配套使用。不过跟异常处理相关的只有注解&lt;code&gt;@ExceptionHandler&lt;/code&gt;，从字面上看，就是 &lt;strong&gt;异常处理器&lt;/strong&gt; 的意思&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot事务详解</title>
    <link href="https://www.shawn22.xyz/posts/ac74b1f.html"/>
    <id>https://www.shawn22.xyz/posts/ac74b1f.html</id>
    <published>2022-09-28T09:32:50.000Z</published>
    <updated>2022-09-28T09:45:22.574Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><h2 id="1、介绍">1、介绍</h2><p>事务，就是一组操作数据库的动作集合。事务是现代数据库理论中的核心概念之一。如果一组处理步骤或者全部发生或者一步也不执行，我们称该组处理步骤为一个事务。当所有的步骤像一个操作一样被完整地执行，我们称该事务被提交。由于其中的一部分或多步执行失败，导致没有步骤被提交，则事务必须回滚到最初的系统状态。</p><a id="more"></a><h2 id="2、事务特点">2、事务特点</h2><ul><li><p><strong>原子性(Atomicity)</strong>：整个事务是一个整体，不可分割的最小工作单位。一个事务中的所有操作要么全部执行成功，要么全部都不执行。其中任何一条语句执行失败，都会导致事务回滚</p></li><li><p><strong>一致性(Consistency)</strong>：数据库的记录总是从一个一致性状态转变成另一个一致性状态。这里的一致性是语义上的一致性, 并不是语法上的一致性</p></li><li><p><strong>隔离性(Isolation)</strong>：一个事物的执行，不受其他事务的干扰，即并发执行的事物之间互不干扰</p></li><li><p><strong>持久性(Durability)</strong>：数据一旦提交，结果就是永久性的。并不应为宕机等情况丢失。一般理解就是写入硬盘保存成功</p></li></ul><h2 id="3、事务实现方式">3、事务实现方式</h2><h3 id="3-1-MySql事务实现方式">3.1 MySql事务实现方式</h3><ul><li><p>原子性和持久性利用redo log(重做日志) 实现</p></li><li><p>一致性利用undo log(回滚日志)实现</p></li><li><p>隔离性利用锁来实现</p></li></ul><h3 id="3-2-SpringBoot实现机制">3.2 SpringBoot实现机制</h3><p>Spring 为事务管理提供了丰富的功能支持。Spring 事务管理分为<strong>编码式和声明式</strong>的两种方式。</p><ul><li><p>编程式事务管理： 编程式事务管理使用 <strong>TransactionTemplate</strong> 或者直接使用底层的 PlatformTransactionManager。对于编程式事务管理，spring推荐使用<strong>TransactionTemplate</strong></p></li><li><p>声明式事务管理： 建立在AOP之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务</p></li><li><p>声明式事务管理不需要入侵代码，更快捷而且简单，推荐使用</p></li></ul><p>声明式事务有两种方式：</p><ul><li><p>一种是在配置文件(xml)中做相关的事务规则声明</p></li><li><p>另一种是基于 <strong>@Transactional</strong> 注解的方式。注释配置是目前流行的使用方式，推荐使用</p></li></ul><p>在应用系统调用声明了 <code>@Transactional</code> 的目标方法时，Spring Framework** 默认使用 AOP 代理**，在代码运行时生成一个代理对象，根据<code> @Transactional</code> 的属性配置信息，这个代理对象决定该声明 <code>@Transactional</code> 的目标方法是否由拦截器 <code>TransactionInterceptor</code>来使用拦截，在 <code>TransactionInterceptor</code>拦截时，会在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑，最后根据执行情况是否出现异常，利用抽象事务管理器 AbstractPlatformTransactionManager 操作数据源 DataSource 提交或回滚事务</p><blockquote><p>Spring AOP 代理有 <code>CglibAopProxy</code>和 <code>JdkDynamicAopProxy</code>两种，以 CglibAopProxy 为例，对于 CglibAopProxy，需要调用其内部类的 <code>DynamicAdvisedInterceptor</code>的 <code>intercept</code>方法。对于 <code>JdkDynamicAopProxy</code>，需要调用其 <code>invoke</code>方法</p></blockquote><h1>二、@Transactional详解</h1><h2 id="1、-Transactional常用配置">1、@Transactional常用配置</h2><table><thead><tr><th><strong>参 数 名 称</strong></th><th><strong>功 能 描 述</strong></th></tr></thead><tbody><tr><td>readOnly</td><td>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。例如：<code>@Transactional(readOnly=true)</code></td></tr><tr><td><strong>rollbackFor</strong></td><td><strong>rollbackFor 该属性用于设置需要进行回滚的异常类数组</strong>，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：指定单一异常类：<code>@Transactional(rollbackFor=RuntimeException.class)</code>指定多个异常类：<code>@Transactional(rollbackFor={RuntimeException.class,Exception.class})</code></td></tr><tr><td>rollbackForClassName</td><td>该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：指定单一异常类名称<code>@Transactional(rollbackForClassName=&quot;RuntimeException&quot;)</code>指定多个异常类名称：<code>@Transactional(rollbackForClassName={&quot;RuntimeException&quot;,&quot;Exception&quot;})</code></td></tr><tr><td>noRollbackFor</td><td>该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：指定单一异常类：<code>@Transactional(noRollbackFor=RuntimeException.class)</code>指定多个异常类：<code>@Transactional(noRollbackFor={RuntimeException.class, Exception.class})</code></td></tr><tr><td>noRollbackForClassName</td><td>该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：指定单一异常类名称：<code>@Transactional(noRollbackForClassName=&quot;RuntimeException&quot;)</code>指定多个异常类名称：<code>@Transactional(noRollbackForClassName={&quot;RuntimeException&quot;, &quot;Exception&quot;})</code></td></tr><tr><td><strong>propagation</strong></td><td>该属性用于设置事务的传播行为。例如：<code>@Transactional(propagation=Propagation.NOT_SUPPORTED, readOnly=true)</code></td></tr><tr><td><strong>isolation</strong></td><td>该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置</td></tr><tr><td>timeout</td><td>该属性用于设置事务的超时秒数，默认值为-1表示永不超时  事物超时设置：<code>@Transactional(timeout=30) </code>，设置为30秒</td></tr></tbody></table><h2 id="2、事务传播行为">2、事务传播行为</h2><p>Spring在TransactionDefinition接口中规定了7种类型的事务传播行为。Propagation枚举则引用了这些类型，开发过程中我们一般直接用Propagation枚举。例如<code>@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)</code>，常用的三项已经加粗</p><table><thead><tr><th><strong>事务传播行为类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>PROPAGATION_REQUIRED</strong></td><td>需要事务（<strong>默认</strong>）。若当前无事务，新建一个事务；若当前有事务，加入此事务中</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持事务。若当前没有事务以非事务方式执行；若当前有事务，加入此事务中</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>强制使用事务。若当前有事务，就使用当前事务；若当前没有事务，抛出IllegalTransactionStateException异常</td></tr><tr><td><strong>PROPAGATION_REQUIRES_NEW</strong></td><td>新建事务。无论当前是否有事务，都新建事务运行</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>不支持事务。若当前存在事务，把当前事务挂起，然后运行方法</td></tr><tr><td>PROPAGATION_NEVER</td><td>不使用事务。若当前方法存在事务，则抛出IllegalTransactionStateException异常，否则继续使用无事务机制运行</td></tr><tr><td><strong>PROPAGATION_NESTED</strong></td><td>嵌套。如果当前存在事务，则在嵌套事务内执行；如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作</td></tr></tbody></table><h2 id="3、事务5种隔离级别">3、事务5种隔离级别</h2><p>例如：<code>@Transactional(isolation = Isolation.READ_COMMITTED)</code></p><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>DEFAULT</td><td>这是一个<strong>PlatfromTransactionManager</strong>默认的隔离级别，使用数据库默认的事务隔离级别另外四个与JDBC的隔离级别相对应</td></tr><tr><td>READ_UNCOMMITTED</td><td>最低的隔离级别。事实上我们不应该称其为隔离级别，因为在事务完成前，其他事务可以看到该事务所修改的数据。而在其他事务提交前，该事务也可以看到其他事务所做的修改。可能导致脏，幻，不可重复读</td></tr><tr><td>READ_COMMITTED</td><td>大多数数据库的默认级别。在事务完成前，其他事务无法看到该事务所修改的数据。遗憾的是，在该事务提交后，你就可以查看其他事务插入或更新的数据。这意味着在事务的不同点上，如果其他事务修改了数据，你就会看到不同的数据。可防止脏读，但幻读和不可重复读仍可以发生</td></tr><tr><td>REPEATABLE_READ</td><td>比<strong>ISOLATION_READ_COMMITTED</strong>更严格，该隔离级别确保如果在事务中查询了某个数据集，你至少还能再次查询到相同的数据集，即使其他事务修改了所查询的数据。然而如果其他事务插入了新数据，你就可以查询到该新插入的数据。可防止脏读，不可重复读，但幻读仍可能发生</td></tr><tr><td>SERIALIZABLE</td><td>完全服从ACID的隔离级别，<strong>确保不发生脏读、不可重复读和幻影读</strong>。这在所有隔离级别中也是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。代价最大、可靠性最高的隔离级别，所有的事务都是按顺序一个接一个地执行。避免所有不安全读取</td></tr></tbody></table><h1>三、事务使用事项与场景</h1><h2 id="1、事务使用注意事项">1、事务使用注意事项</h2><ul><li><p><strong>在具体的类(或类的方法)上使用 @Transactional 注解</strong>，而不要使用在类所要实现的任何接口上</p></li><li><p><strong>@Transactional 注解应该只被应用在 public 修饰的方法上(注意)。</strong> 如果在 protected、private 或者 package-visible 的方法上使用 该注解，它也不会报错(IDEA会有提示)， 但事务并没有生效</p></li><li><p><strong>@Transactional是基于动态代理的(注意)</strong>，需要一个类调用另一个类，类内调用会失效</p></li><li><p>被外部调用的公共方法A有两个进行了数据操作的子方法B和子方法C的事务注解说明：</p><ul><li><p>被外部调用的公共方法A<strong>声明</strong>事务<code>@Transactional</code>，无论子方法B和C是不是本类的方法，无论子方法B和C是否声明事务，<strong>事务均由公共方法A控制</strong></p></li><li><p>被外部调用的公共方法A<strong>未声明</strong>事务<code>@Transactional</code>，子方法B和C若是其他类的方法且各自声明事务：<strong>事务由子方法B和C各自控制</strong></p></li><li><p>被外部调用的公共方法A<strong>未声明</strong>事务<code>@Transactional</code>，子方法B和C若是本类的方法，则即使子方法B和C各自声明事务，<strong>事务也不会生效</strong>，并且会报错(没有可用的transactional)</p></li><li><p>被外部调用的公共方法A<strong>声明</strong>事务<code>@Transactional</code>，子方法运行异常，但运行异常被子方法自己 <code>try-catch</code> 处理了，<strong>则事务回滚是不会生效的！</strong></p><p><strong>如果想要事务回滚生效，需要将子方法的事务控制交给调用的方法来处理：</strong></p><ul><li><p>方案1：子方法中不用 <code>try-catch</code> 处理运行异常</p></li><li><p>方案2：子方法的catch里面将运行异常抛出<code>throw new RuntimeException();</code></p></li></ul></li></ul></li><li><p>默认情况下，Spring会对<strong>unchecked异常</strong>进行事务回滚，也就是默认对 <code>RuntimeException()</code> 异常或是其子类进行事务回滚；如果是<strong>checked异常则不回滚</strong>，例如空指针异常、算数异常等会被回滚；文件读写、网络问题Spring就没法回滚。若想对所有异常(包括自定义异常)都起作用，注解上面需配置异常类型：<code>@Transactional(rollbackFor = Exception.class)</code></p></li><li><p>数据库要支持事务，如果是mysql，要<strong>使用innodb引擎</strong>，myisam不支持事务</p></li><li><p>事务<code>@Transactional</code>由spring控制时，它会在抛出异常的时候进行回滚。<strong>如果自己使用try-catch捕获处理了，是不生效的</strong>。如果想事务生效可以进行手动回滚或者在catch里面将异常抛出<code>throw new RuntimeException();</code>有两种方法</p><ul><li><p>方案一：手动抛出运行时异常(缺陷是不能在catch代码块自定义返回值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">      ....  </span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      logger.error(<span class="string">"fail"</span>,e);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方案二：手动进行回滚 <code>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly(); </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      log.error(<span class="string">"fail"</span>,e);</span><br><span class="line">      TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2、事务使用场景">2、事务使用场景</h2><h3 id="2-1-自动回滚">2.1 自动回滚</h3><p>直接抛出，不try/catch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">submitOrder</span>() <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;  </span><br><span class="line">     success();  </span><br><span class="line">     <span class="comment">//假如exception这个操作数据库的方法会抛出异常，方法success()对数据库的操作会回滚</span></span><br><span class="line">     exception(); </span><br><span class="line">     <span class="keyword">return</span> ApiReturnUtil.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-手动回滚">2.2 手动回滚</h3><p>进行try/catch，回滚并抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">submitOrder</span> ()</span>&#123;  </span><br><span class="line">    success();  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        exception(); </span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();     </span><br><span class="line">        <span class="comment">//手工回滚异常</span></span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        <span class="keyword">return</span> ApiReturnUtil.error();</span><br><span class="line">     &#125;  </span><br><span class="line">    <span class="keyword">return</span> ApiReturnUtil.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-回滚部分异常">2.3 回滚部分异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">submitOrder</span> ()</span>&#123;  </span><br><span class="line">    success();  </span><br><span class="line">    <span class="comment">//只回滚以下异常，设置回滚点</span></span><br><span class="line">    Object savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint();</span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        exception(); </span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        e.printStackTrace();     </span><br><span class="line">        <span class="comment">//手工回滚异常，回滚到savePoint</span></span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br><span class="line">        <span class="keyword">return</span> ApiReturnUtil.error();</span><br><span class="line">     &#125;  </span><br><span class="line">    <span class="keyword">return</span> ApiReturnUtil.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-手动创建、提交、回滚事务">2.4 手动创建、提交、回滚事务</h3><p><code>PlatformTransactionManager </code>这个接口中定义了三个方法 getTransaction创建事务，commit 提交事务，rollback 回滚事务。它的实现类是 <code>AbstractPlatformTransactionManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSourceTransactionManager dataSourceTransactionManager;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">TransactionDefinition transactionDefinition;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 手动创建事务</span></span><br><span class="line">TransactionStatus transactionStatus = dataSourceTransactionManager.getTransaction(transactionDefinition);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 手动提交事务</span></span><br><span class="line">dataSourceTransactionManager.commit(transactionStatus);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 手动回滚事务。(最好是放在catch 里面，防止程序异常而事务一直卡在哪里未提交)</span></span><br><span class="line">dataSourceTransactionManager.rollback(transactionStatus);</span><br></pre></td></tr></table></figure><h2 id="3、事务其他情况">3、事务其他情况</h2><h3 id="3-1-事务提交方式">3.1 事务提交方式</h3><p><strong>默认情况下，数据库处于自动提交模式</strong>。每一条语句处于一个单独的事务中，在这条语句执行完毕时，如果执行成功则隐式的提交事务，如果执行失败则隐式的回滚事务。</p><p>对于正常的事务管理，是一组相关的操作处于一个事务之中，因此必须关闭数据库的自动提交模式。不过，这个我们不用担心，spring 会将底层连接的<strong>自动提交特性</strong>设置为 false 。也就是在使用 spring 进行事物管理的时候，spring 会将是否自动提交设置为<strong>false</strong>，等价于JDBC中的 <code>connection.setAutoCommit(false);</code> ，在执行完之后在进行提交 <code>connection.commit();</code> </p><p><strong>spring事务管理器回滚</strong>一个事务的推荐方法是在当前事务的上下文内抛出异常。spring事务管理器会捕捉任何未处理的异常，然后依据规则决定是否回滚抛出异常的事务。</p><h3 id="3-2-事务并发经典情况">3.2 事务并发经典情况</h3><ul><li><p><strong>第一类丢失更新</strong></p><p>在<strong>没有事务隔离</strong>的情况下，两个事务都同时更新一行数据，但是第二个事务却中途失败退出， 导致对数据的两个修改都失效了</p></li><li><p><strong>脏读</strong></p><p>脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</p></li><li><p><strong>不可重复读</strong></p><p>在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读</p></li><li><p><strong>第二类丢失更新</strong></p><p>不可重复读的特例，有两个并发事务同时读取同一行数据，然后其中一个对它进行修改提交，而另一个也进行了修改提交。这就会造成第一次写操作失效。</p></li><li><p><strong>幻读</strong></p><p>当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样</p></li></ul><h1>四、使用事务的一些错误</h1><h2 id="1、案例一">1、案例一</h2><h3 id="1-1-问题描述">1.1 问题描述</h3><p>两个使用Transaction注解的Service，A和B，在A中引入了B的方法用于更新数据 ，当A中捕捉到B中有异常时，回滚动作正常执行，但是当return时则出现<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> ServiceB serviceB;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      serviceB.methodB();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">serviceB</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-问题原因">1.2 问题原因</h3><p><code>@Transactional(propagation= Propagation.REQUIRED)</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是@Transactional的默认方式。在这种情况下，外层事务（ServiceA）和内层事务（ServiceB）就是一个事务，任何一个出现异常，都会在methodA执行完毕后回滚。</p><p>如果内层事务B抛出异常e（没有catch，继续向外层抛出），在内层事务结束时，spring会把事务B标记为&quot;<strong>rollback-only</strong>&quot;；这时外层事务A发现了异常e，如果外层事务A catch了异常并处理掉，那么外层事务A的方法会继续执行代码，直到外层事务也结束时，这时外层事务A想commit，因为正常结束没有向外抛异常，但是内外层事务AB是同一个事务，事务B（同时也是事务A）已经被内层方法标记为&quot;<strong>rollback-only</strong>&quot;，<strong>需要回滚，无法commit</strong>，这时spring就会抛出<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code>，意思是&quot;事务已经被标记为回滚，无法提交&quot;</p><h3 id="1-3-解决方案">1.3 解决方案</h3><ul><li><p>直接在外层事务的catch代码块中抛出捕获的内层事务的异常，两层事务有未捕获异常，都回滚（有时候这个异常就是交给外层处理的，抛出到更外层显得多此一举）；</p></li><li><p>在内层事务中做异常捕获处理，并且不向外抛异常，两层事务都不回滚</p></li><li><p>最好的方式：如果希望内层事务回滚，但不影响外层事务提交，需要将内层事务的传播方式指定为<code>@Transactional(propagation= Propagation.NESTED)</code>，外层事务的提交和回滚能够控制嵌套的内层事务回滚；而内层事务报错时，只回滚内层事务，外层事务可以继续提交。（JPA不支持NESTED，有时可以用REQUIRES_NEW替代一下）。  </p><p>详细说明参考：<a href="https://www.jianshu.com/p/8beab9f37e5b" target="_blank" rel="noopener" title="https://www.jianshu.com/p/8beab9f37e5b">https://www.jianshu.com/p/8beab9f37e5b</a></p></li><li><p>如果这个异常发生时，内层需要事务回滚的代码还没有执行，则可以<code>@Transactional(noRollbackFor = {内层抛出的异常}.class)</code>，指定内层也不为这个异常回滚。</p></li></ul><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/zzhongcy/article/details/102893309" target="_blank" rel="noopener" title="SpringBoot2异常处理回滚事务详解">SpringBoot2异常处理回滚事务详解</a></p><p><a href="https://blog.csdn.net/feiying0canglang/article/details/121369030" target="_blank" rel="noopener" title="事务传播机制--应用/实例/详解">事务传播机制–应用/实例/详解</a></p><p><a href="https://blog.csdn.net/huangsky001/article/details/113624169" target="_blank" rel="noopener" title="mysql事务详解">mysql事务详解</a></p><p><a href="https://www.jianshu.com/p/c6d4095f5833" target="_blank" rel="noopener" title="spring 事务传播行为之嵌套事务NESTED细节">spring 事务传播行为之嵌套事务NESTED细节</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;h2 id=&quot;1、介绍&quot;&gt;1、介绍&lt;/h2&gt;
&lt;p&gt;事务，就是一组操作数据库的动作集合。事务是现代数据库理论中的核心概念之一。如果一组处理步骤或者全部发生或者一步也不执行，我们称该组处理步骤为一个事务。当所有的步骤像一个操作一样被完整地执行，我们称该事务被提交。由于其中的一部分或多步执行失败，导致没有步骤被提交，则事务必须回滚到最初的系统状态。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Spring基础" scheme="https://www.shawn22.xyz/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Jackson序列化与反序列化</title>
    <link href="https://www.shawn22.xyz/posts/70fe9e1.html"/>
    <id>https://www.shawn22.xyz/posts/70fe9e1.html</id>
    <published>2022-09-28T09:32:36.000Z</published>
    <updated>2022-09-28T09:42:14.729Z</updated>
    
    <content type="html"><![CDATA[<h1>一、Jackson简介</h1><h2 id="1、什么是Jackson">1、什么是Jackson</h2><blockquote><p>Jackson被认为是&quot;Java JSON库&quot;或&quot;Java最好的JSON解析器&quot;。或简单地被当作&quot;JSON for Java&quot;。不仅如此，Jackson 还是一套用于 Java（和 JVM 平台）的数据处理工具，包括流式 <a href="https://en.wikipedia.org/wiki/JSON" target="_blank" rel="noopener" title="JSON">JSON</a> parser / generator库、匹配 data-binding 库（<a href="https://so.csdn.net/so/search?q=POJO&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener" title="POJO">POJO</a>和JSON相互转换），还有一个额外的 data format 模块来处理 <a href="https://github.com/FasterXML/jackson-dataformats-binary/blob/master/avro" target="_blank" rel="noopener" title="Avro">Avro</a>, <a href="https://github.com/michel-kraemer/bson4jackson" target="_blank" rel="noopener" title="BSON">BSON</a>, <a href="https://github.com/FasterXML/jackson-dataformats-binary/blob/master/cbor" target="_blank" rel="noopener" title="CBOR">CBOR</a>, <a href="https://github.com/FasterXML/jackson-dataformats-text/blob/master/csv" target="_blank" rel="noopener" title="CSV">CSV</a>, <a href="https://github.com/FasterXML/jackson-dataformats-binary/tree/master/smile" target="_blank" rel="noopener" title="Smile">Smile</a>, <a href="https://github.com/FasterXML/jackson-dataformats-text/blob/master/properties" target="_blank" rel="noopener" title="(Java) Properties">(Java) Properties</a>, <a href="https://github.com/FasterXML/jackson-dataformats-binary/tree/master/protobuf" target="_blank" rel="noopener" title="Protobuf">Protobuf</a>, <a href="https://github.com/FasterXML/jackson-dataformats-text/blob/2.13/toml" target="_blank" rel="noopener" title="TOML">TOML</a>, <a href="https://github.com/FasterXML/jackson-dataformat-xml" target="_blank" rel="noopener" title="XML">XML</a>, <a href="https://github.com/FasterXML/jackson-dataformats-text/blob/master/yaml" target="_blank" rel="noopener" title="YAML">YAML</a> 这些数据编码，甚至还有大量的数据格式模块，来支持被广泛使用的数据类型如 <a href="https://github.com/FasterXML/jackson-datatypes-collections" target="_blank" rel="noopener" title="Guava">Guava</a>, <a href="https://github.com/FasterXML/jackson-datatype-joda" target="_blank" rel="noopener" title="Joda">Joda</a>, <a href="https://github.com/FasterXML/jackson-datatypes-collections" target="_blank" rel="noopener" title="PCollections">PCollections</a> 等等</p></blockquote><p>核心组件存在于他们自己的项目下，包括三个核心包(<a href="https://github.com/FasterXML/jackson-core" target="_blank" rel="noopener" title="streaming">streaming</a>, <a href="https://github.com/FasterXML/jackson-databind" target="_blank" rel="noopener" title="databind">databind</a>, <a href="https://github.com/FasterXML/jackson-annotations" target="_blank" rel="noopener" title="annotations">annotations</a>)；数据格式库；数据类型库；<a href="https://github.com/FasterXML/jackson-jaxrs-providers" target="_blank" rel="noopener" title="JAX-RS provider">JAX-RS provider</a>；和一个复杂的扩展模块—这个project 连接各个模块的中心枢纽</p><a id="more"></a><h2 id="2、核心模块">2、核心模块</h2><p>核心模块是扩展（模块）构建的基础。目前有3个模块 (Jackson 2.x为例) :</p><ul><li><p><a href="https://github.com/FasterXML/jackson-core" target="_blank" rel="noopener" title="Streaming">Streaming</a> (<a href="https://github.com/FasterXML/jackson-core/wiki" target="_blank" rel="noopener" title="docs">docs</a>) (“jackson-core”) 定义低级流 API，并包括 JSON 具体实现</p></li><li><p><a href="https://github.com/FasterXML/jackson-annotations" target="_blank" rel="noopener" title="Annotations">Annotations</a> (<a href="https://github.com/FasterXML/jackson-annotations/wiki" target="_blank" rel="noopener" title="docs">docs</a>) (“jackson-annotations”) 包含标准 Jackson 注解</p></li><li><p><a href="https://github.com/FasterXML/jackson-databind" target="_blank" rel="noopener" title="Databind">Databind</a> (<a href="https://github.com/FasterXML/jackson-databind/wiki" target="_blank" rel="noopener" title="docs">docs</a>) (“jackson-databind”) 实现data-binding (和 object serialization) ，支持 <code>streaming</code> 包; 它依赖于 <code>streaming</code> 和 <code>annotations</code> 包</p></li></ul><h1>二、ObjectMapper常见使用</h1><blockquote><p>ObjectMapper类(com.fasterxml.jackson.databind.ObjectMapper)是Jackson的主要类，它可以帮助我们快速的进行各个类型和Json类型的相互转换</p></blockquote><h2 id="1、ObjectMapper的常用配置">1、<strong>ObjectMapper的常用配置</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper mapper;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper <span class="title">getObjectMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.mapper;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">    mapper = <span class="keyword">new</span> ObjectMapper()</span><br><span class="line">    <span class="comment">//configure方法 配置一些需要的参数</span></span><br><span class="line">    <span class="comment">// 转换为格式化的json 显示出来的格式美化</span></span><br><span class="line">    mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class="line">    <span class="comment">//序列化的时候序列对象的那些属性  </span></span><br><span class="line">    <span class="comment">//JsonInclude.Include.NON_DEFAULT 属性为默认值不序列化 </span></span><br><span class="line">    <span class="comment">//JsonInclude.Include.ALWAYS      所有属性</span></span><br><span class="line">    <span class="comment">//JsonInclude.Include.NON_EMPTY   属性为 空（“”） 或者为 NULL 都不序列化 </span></span><br><span class="line">    <span class="comment">//JsonInclude.Include.NON_NULL    属性为NULL 不序列化</span></span><br><span class="line">    mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);  </span><br><span class="line">    <span class="comment">//反序列化时,遇到未知属性会不会报错 </span></span><br><span class="line">    <span class="comment">//true - 遇到没有的属性就报错 false - 没有的属性不会管，不会报错</span></span><br><span class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//如果是空对象的时候,不抛异常  </span></span><br><span class="line">    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="keyword">false</span>);  </span><br><span class="line">    <span class="comment">// 忽略 transient 修饰的属性</span></span><br><span class="line">    mapper.configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//修改序列化后日期格式</span></span><br><span class="line">    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);  </span><br><span class="line">    mapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">    <span class="comment">//处理不同的时区偏移格式</span></span><br><span class="line">    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">    mapper.registerModule(<span class="keyword">new</span> JavaTimeModule());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、ObjectMapper的常用方法">2、ObjectMapper的常用方法</h2><h3 id="2-1-json字符串转对象">2.1 json字符串转对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String jsonString = <span class="string">"&#123;\"name\":\"shawn\", \"age\":20&#125;"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将字符串转换为对象</span></span><br><span class="line">Student student = mapper.readValue(jsonString, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(student);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将对象转换为json字符串</span></span><br><span class="line">jsonString = mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonString);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">Student [ name: shawn, age: <span class="number">20</span> ]</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"Hyl"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-数组和对象之间转换">2.2 数组和对象之间转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象转为byte数组</span></span><br><span class="line"><span class="keyword">byte</span>[] byteArr = mapper.writeValueAsBytes(student);</span><br><span class="line">System.out.println(byteArr);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//byte数组转为对象</span></span><br><span class="line">Student student= mapper.readValue(byteArr, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(student);</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">[B@<span class="number">3327</span>bd23</span><br><span class="line">Student [ name: shawn, age: <span class="number">20</span> ]</span><br></pre></td></tr></table></figure><h3 id="2-3-集合和json字符串之间转换">2.3 集合和json字符串之间转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; studentList= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">studentList.add(<span class="keyword">new</span> Student(<span class="string">"shawn1"</span> ,<span class="number">20</span> , <span class="keyword">new</span> Date()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> Student(<span class="string">"shawn2"</span> ,<span class="number">21</span> , <span class="keyword">new</span> Date()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> Student(<span class="string">"shawn3"</span> ,<span class="number">22</span> , <span class="keyword">new</span> Date()));</span><br><span class="line">studentList.add(<span class="keyword">new</span> Student(<span class="string">"shawn4"</span> ,<span class="number">23</span> , <span class="keyword">new</span> Date()));</span><br><span class="line"> </span><br><span class="line">String jsonStr = mapper.writeValueAsString(studentList);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line">        </span><br><span class="line">List&lt;Student&gt; studentList2 = mapper.readValue(jsonStr, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"字符串转集合："</span> + studentList2 );</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">[ &#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn1"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">20</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn2"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn3"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">22</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn4"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">23</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="number">1525164212803</span></span><br><span class="line">&#125; ]</span><br><span class="line">[&#123;name=shawn1, age=<span class="number">20</span>, sendTime=<span class="number">1525164212803</span>&#125;, &#123;name=shawn2, age=<span class="number">21</span>, sendTime=<span class="number">1525164212803</span>&#125;, &#123;name=shawn3, age=<span class="number">22</span>, sendTime=<span class="number">1525164212803</span>&#125;, &#123;name=shawn4, age=<span class="number">23</span>, sendTime=<span class="number">1525164212803</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-4-map和json字符串之间转换">2.4 map和json字符串之间转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; testMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">testMap.put(<span class="string">"name"</span>, <span class="string">"22"</span>);</span><br><span class="line">testMap.put(<span class="string">"age"</span>, <span class="number">20</span>);</span><br><span class="line">testMap.put(<span class="string">"date"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">testMap.put(<span class="string">"student"</span>, <span class="keyword">new</span> Student(<span class="string">"shawn"</span>, <span class="number">20</span>, <span class="keyword">new</span> Date()));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">String jsonStr = mapper.writeValueAsString(testMap);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line">Map&lt;String, Object&gt; testMapDes = mapper.readValue(jsonStr, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(testMapDes);</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"date"</span> : <span class="number">1525164212803</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"22"</span>,</span><br><span class="line">  <span class="string">"student"</span> : &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"shawn"</span>,</span><br><span class="line">    <span class="string">"age"</span> : <span class="number">20</span>,</span><br><span class="line">    <span class="string">"sendTime"</span> : <span class="number">1525164212803</span>,</span><br><span class="line">    <span class="string">"intList"</span> : <span class="keyword">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;date=<span class="number">1525164212803</span>, name=<span class="number">22</span>, student=&#123;name=shawn, age=<span class="number">20</span>, sendTime=<span class="number">1525164212803</span>, intList=<span class="keyword">null</span>&#125;, age=<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-日期转json字符串">2.5 日期转json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改时间格式</span></span><br><span class="line">mapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">Student student = <span class="keyword">new</span> Student (<span class="string">"shawn"</span>,<span class="number">21</span>, <span class="keyword">new</span> Date());</span><br><span class="line">student.setIntList(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">String jsonStr = mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line"> </span><br><span class="line">结果：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"shawn"</span>,</span><br><span class="line">  <span class="string">"age"</span> : <span class="number">21</span>,</span><br><span class="line">  <span class="string">"sendTime"</span> : <span class="string">"2020-07-23 13:14:36"</span>,</span><br><span class="line">  <span class="string">"intList"</span> : [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-readTree-方法">2.6 readTree()方法</h3><p>此方法更灵活，可以只将用户感兴趣的Json串信息值提取出来。主要利用ObjectMapper提供的readTree和Jackson提供的JsonNode类来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String test=<span class="string">"&#123;"</span>results<span class="string">":[&#123;"</span>objectID<span class="string">":357,"</span>geoPoints<span class="string">":[&#123;"</span>x<span class="string">":504604.59802246094,"</span>y<span class="string">":305569.9150390625&#125;]&#125;,&#123;"</span>objectID<span class="string">":358,"</span>geoPoints<span class="string">":[&#123;"</span>x<span class="string">":504602.2680053711,"</span>y<span class="string">":305554.43603515625&#125;]&#125;]&#125;"</span>;</span><br><span class="line"><span class="comment">//此Json串比较复杂，包含了嵌套数组的形式，具有通用性。</span></span><br><span class="line"><span class="comment">//2.2.2.2实现反序列化</span></span><br><span class="line">JsonNode node= objectMapper.readTree(test); <span class="comment">//将Json串以树状结构读入内存</span></span><br><span class="line">JsonNode contents=node.get(<span class="string">"results"</span>);<span class="comment">//得到results这个节点下的信息</span></span><br><span class="line"><span class="comment">//遍历results下的信息，size()函数可以得节点所包含的的信息的个数，类似于数组的长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contents.size();i++)  &#123;</span><br><span class="line">    <span class="comment">//读取节点下的某个子节点的值</span></span><br><span class="line">    System.out.println(contents.get(i).get(<span class="string">"objectID"</span>).getIntValue());</span><br><span class="line">    JsonNode geoNumber=contents.get(i).get(<span class="string">"geoPoints"</span>);</span><br><span class="line">    <span class="comment">//循环遍历子节点下的信息</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;geoNumber.size();j++)&#123;</span><br><span class="line">        System.out.println(geoNumber.get(j).get(<span class="string">"x"</span>).getDoubleValue()+<span class="string">"  "</span>+geoNumber.get(j).get(<span class="string">"y"</span>).getDoubleValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Java-Web与ObjectMapper">3、Java Web与ObjectMapper</h2><p>在开发 Spring Web 应用程序时，如果自定义了 ObjectMapper，并把它注册成了Bean，那很可能会导致 Spring Web 使用的 ObjectMapper 也被替换，导致 Bug。例如下面的bean，注册到Spring后就会把Spring原有的配置覆盖，导致原有的序列化配置丢失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">objectMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ObjectMapper objectMapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    objectMapper.configure(SerializationFeature.WRITE_ENUMS_USING_INDEX,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> objectMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对这个问题，有三种解决方法</p><ul><li><p>使用<code>objectMapper.configure(SerializationFeature.xxx,true);</code>把配置补齐</p></li><li><p>设置自定义类型，加上 <code>@JsonIgnoreProperties</code> 注解，开启 <strong>ignoreUnknown</strong><br>属性，以实现反序列化时忽略额外的数据</p></li><li><p>不要自定义 ObjectMapper，而是直接在配置文件设置相关参数，来修改<br>Spring 默认的 ObjectMapper 的功能，例如：<code>spring.jackson.serialization.write_enums_using_index=true</code></p></li></ul><p>另外，通过查找<code>JacksonProperties</code>类源码，可以发现很多配置类的属性，可以配合使用</p><h2 id="4、Redis序列化的一个例子">4、Redis序列化的一个例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">RedisTemplate&lt;String, T&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">    RedisTemplate&lt;String, T&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">    redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    objectMapper.enable(DeserializationFeature.USE_LONG_FOR_INTS);</span><br><span class="line">    <span class="comment">//把类型信息作为属性写入Value</span></span><br><span class="line">    objectMapper.activateDefaultTyping(objectMapper.getPolymorphicTypeValidator(), ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">    jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">    redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">    redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">    redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    redisTemplate.afterPropertiesSet();</span><br><span class="line">    <span class="keyword">return</span> redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="https://github.com/FasterXML/jackson-docs" target="_blank" rel="noopener" title="jackson官方文档地址">jackson官方文档地址</a></p><p><a href="https://blog.csdn.net/qq_46186167/article/details/123671712" target="_blank" rel="noopener" title="https://blog.csdn.net/qq_46186167/article/details/123671712">https://blog.csdn.net/qq_46186167/article/details/123671712</a></p><p><a href="https://www.tabnine.com/code/java/methods/com.fasterxml.jackson.databind.ObjectMapper/configure" target="_blank" rel="noopener" title="https://www.tabnine.com/code/java/methods/com.fasterxml.jackson.databind.ObjectMapper/configure">https://www.tabnine.com/code/java/methods/com.fasterxml.jackson.databind.ObjectMapper/configure</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、Jackson简介&lt;/h1&gt;
&lt;h2 id=&quot;1、什么是Jackson&quot;&gt;1、什么是Jackson&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Jackson被认为是&amp;quot;Java JSON库&amp;quot;或&amp;quot;Java最好的JSON解析器&amp;quot;。或简单地被当作&amp;quot;JSON for Java&amp;quot;。不仅如此，Jackson 还是一套用于 Java（和 JVM 平台）的数据处理工具，包括流式 &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;JSON&quot;&gt;JSON&lt;/a&gt; parser / generator库、匹配 data-binding 库（&lt;a href=&quot;https://so.csdn.net/so/search?q=POJO&amp;amp;spm=1001.2101.3001.7020&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;POJO&quot;&gt;POJO&lt;/a&gt;和JSON相互转换），还有一个额外的 data format 模块来处理 &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-binary/blob/master/avro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Avro&quot;&gt;Avro&lt;/a&gt;, &lt;a href=&quot;https://github.com/michel-kraemer/bson4jackson&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;BSON&quot;&gt;BSON&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-binary/blob/master/cbor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;CBOR&quot;&gt;CBOR&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-text/blob/master/csv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;CSV&quot;&gt;CSV&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-binary/tree/master/smile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Smile&quot;&gt;Smile&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-text/blob/master/properties&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;(Java) Properties&quot;&gt;(Java) Properties&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-binary/tree/master/protobuf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Protobuf&quot;&gt;Protobuf&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-text/blob/2.13/toml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;TOML&quot;&gt;TOML&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformat-xml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;XML&quot;&gt;XML&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-text/blob/master/yaml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;YAML&quot;&gt;YAML&lt;/a&gt; 这些数据编码，甚至还有大量的数据格式模块，来支持被广泛使用的数据类型如 &lt;a href=&quot;https://github.com/FasterXML/jackson-datatypes-collections&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Guava&quot;&gt;Guava&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-datatype-joda&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;Joda&quot;&gt;Joda&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-datatypes-collections&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;PCollections&quot;&gt;PCollections&lt;/a&gt; 等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;核心组件存在于他们自己的项目下，包括三个核心包(&lt;a href=&quot;https://github.com/FasterXML/jackson-core&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;streaming&quot;&gt;streaming&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-databind&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;databind&quot;&gt;databind&lt;/a&gt;, &lt;a href=&quot;https://github.com/FasterXML/jackson-annotations&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;annotations&quot;&gt;annotations&lt;/a&gt;)；数据格式库；数据类型库；&lt;a href=&quot;https://github.com/FasterXML/jackson-jaxrs-providers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;JAX-RS provider&quot;&gt;JAX-RS provider&lt;/a&gt;；和一个复杂的扩展模块—这个project 连接各个模块的中心枢纽&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://www.shawn22.xyz/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot生产监控</title>
    <link href="https://www.shawn22.xyz/posts/f72e74db.html"/>
    <id>https://www.shawn22.xyz/posts/f72e74db.html</id>
    <published>2022-09-28T09:26:33.000Z</published>
    <updated>2022-09-28T09:45:57.904Z</updated>
    
    <content type="html"><![CDATA[<h1>一、健康监控简介</h1><h2 id="1、介绍">1、介绍</h2><p>开发完成后，生产就绪需要做哪些工作呢？我认为，以下三方面的工作最重要。</p><ul><li><strong>提供健康检测接口</strong>。传统采用 ping 的方式对应用进行探活检测并不准确。有的时候，应用的关键内部或外部依赖已经离线，导致其根本无法正常工作，但其对外的 Web 端口或管理端口是可以 ping 通的。我们应该提供一个专有的监控检测接口，并尽可能触达一些内部组件。</li><li><strong>暴露应用内部信息</strong>。应用内部诸如线程池、内存队列等组件，往往在应用内部扮演了重要的角色，如果应用或应用框架可以对外暴露这些重要信息，并加以监控，那么就有可能在诸如 OOM 等重大问题暴露之前发现蛛丝马迹，避免出现更大的问题。</li><li><strong>建立应用指标 Metrics 监控</strong>。Metrics 可以翻译为度量或者指标，指的是对于一些关键信息以可聚合的、数值的形式做定期统计，并绘制出各种趋势图表。这里的指标监控，包括两个方面：一是，应用内部重要组件的指标监控，比如 JVM 的一些指标、接口的 QPS 等；二是，应用的业务数据的监控，比如电商订单量、游戏在线人数等。</li></ul><a id="more"></a><h2 id="2、SpringBoot准备工作">2、SpringBoot准备工作</h2><p>Spring Boot 有一个 Actuator 模块，封装了诸如健康检测、应用内部信息、Metrics 指标等生产就绪的功能。今天这一讲后面的内容都是基于 Actuator 的，因此我们需要先完成 Actuator 的引入和配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Actuator 自带了很多开箱即用提供信息的端点（<strong>Endpoint</strong>），可以通过** JMX 或 Web **两种方式进行暴露。考虑到有些信息比较敏感，这些内置的端点默认不是完全开启的，你可以通过官网查看这些默认值。在这里，为了方便后续 Demo，我们设置所有端点通过 Web 方式开启。</p><p>默认情况下，Actuator 的 Web 访问方式的根地址为 <code>/actuator</code>，可以通过<code>management.endpoints.web.base-path</code> 参数进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45678</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/admin</span></span><br></pre></td></tr></table></figure><p>现在访问<code>http://localhost:45678/admin</code>可以查看 Actuator 的所有功能 URL </p><h2 id="3、其他">3、其他</h2><p>大部分端点提供的是只读信息，比如查询 Spring 的 Bean、ConfigurableEnvironment、定时任务、SpringBoot 自动配置、Spring MVC 映射等；少部分端点还提供了修改功能，比如优雅关闭程序、下载线程 Dump、下载堆 Dump、修改日志级别等。</p><p>我们可以访问这里，查看所有这些端点的功能，详细了解它们提供的信息以及实现的操作。此外推荐一个很好的工具， Spring Boot 管理工具Spring Boot Admin，它把大部分 Actuator 端点提供的功能封装为了 Web UI。可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124675465" target="_blank" rel="noopener" title="Spring Boot Admin服务监控">Spring Boot Admin服务监控</a></p><h1>二、健康检测触达关键组件</h1><h2 id="1、内置组件健康详情">1、内置组件健康详情</h2><p>健康检测接口可以让监控系统或发布工具知晓应用的真实健康状态，比 ping 应用端口更可靠。不过，要达到这种效果最关键的是，我们能确保健康检测接口可以探查到关键组件的状态。好在 <code>Spring Boot Actuator</code>帮我们预先实现了诸如数据库、InfluxDB、Elasticsearch、Redis、RabbitMQ 等三方系统的健康检测指示器 HealthIndicator。</p><p>通过 Spring Boot 的自动配置，这些指示器会自动生效。当这些组件有问题的时候，HealthIndicator 会返回 <code>DOWN </code>或 <code>OUT_OF_SERVICE </code>状态，health 端点 HTTP 响应状态码也会变为 503，我们可以以此来配置程序健康状态监控报警。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45678</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/admin</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>我们可以修改配置文件，把 management.endpoint.health.show-details 参数设置为 always，让所有用户都可以直接查看各个组件的健康情况（如果配置为 when-authorized，那么可以结合 management.endpoint.health.roles 配置授权的角色）。访问 health 端点可以看到，数据库、磁盘、RabbitMQ、Redis 等组件健康状态是 UP，整个应用的状态也是 UP</p><h2 id="2、自定义组件健康详情">2、自定义组件健康详情</h2><p>如果程序依赖一个很重要的三方服务，我们希望这个服务无法访问的时候，应用本身的健康状态也是 DOWN，首先创建User类以及配置bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如三方服务有一个 user 接口，出现异常的概率是 50%：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@RequestParam(<span class="string">"userId"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">        <span class="comment">//一半概率返回正确响应，一半概率抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (ThreadLocalRandom.current().nextInt() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">"name"</span> + id);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要实现这个 user 接口是否正确响应和程序整体的健康状态挂钩的话，很简单，只需定义一个 <code>UserServiceHealthIndicator</code>实现 <code>HealthIndicator</code>接口即可。</p><p>在 health 方法中，我们通过 RestTemplate 来访问这个 user 接口，如果结果正确则返回 <code>Health.up()</code>，并把调用执行耗时和结果作为补充信息加入 Health 对象中。如果调用接口出现异常，则返回 <code>Health.down()</code>，并把异常信息作为补充信息加入 Health 对象中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> userId = <span class="number">2L</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = restTemplate.getForObject(<span class="string">"http://localhost:8080/user?userId="</span> + userId, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (user != <span class="keyword">null</span> &amp;&amp; user.getUserId() == userId) &#123;</span><br><span class="line">                <span class="keyword">return</span> Health.up()</span><br><span class="line">                        .withDetail(<span class="string">"user"</span>, user)</span><br><span class="line">                        .withDetail(<span class="string">"took"</span>, System.currentTimeMillis() - begin)</span><br><span class="line">                        .build();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Health.down().withDetail(<span class="string">"took"</span>, System.currentTimeMillis() - begin).build();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            log.warn(<span class="string">"health check failed!"</span>, ex);</span><br><span class="line">            <span class="keyword">return</span> Health.down(ex).withDetail(<span class="string">"took"</span>, System.currentTimeMillis() - begin).build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问<code>http://localhost:45678/admin/health</code>即可发现<strong>UserService</strong>已经成功被检测<br><img src="https://img-blog.csdnimg.cn/e02064042e3d4cf6a6164031a8d3a181.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3、自定义多-HealthIndicator-聚合">3、自定义多 HealthIndicator 聚合</h2><p>我们再来看一个聚合多个 HealthIndicator 的案例，也就是定义一个 CompositeHealthContributor 来聚合多个 HealthContributor，实现一组线程池的监控</p><p>首先，在 ThreadPoolProvider 中定义两个线程池，其中 demoThreadPool 是包含一个工作线程的线程池，类型是 ArrayBlockingQueue，阻塞队列的长度为 10；还有一个 ioThreadPool 模拟 IO 操作线程池，核心线程数 10，最大线程数 50</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个工作线程的线程池，队列长度10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor demoThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">2</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>),</span><br><span class="line">            <span class="keyword">new</span> CustomizableThreadFactory(<span class="string">"springThread-pool-"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//核心线程数10，最大线程数50的线程池，队列长度50</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor ioThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            <span class="number">10</span>, <span class="number">50</span>,</span><br><span class="line">            <span class="number">2</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">100</span>),</span><br><span class="line">            <span class="keyword">new</span> CustomizableThreadFactory(<span class="string">"io-Thread-pool-"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">getDemoThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demoThreadPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">getIOThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ioThreadPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们定义一个接口，来把耗时很长的任务提交到这个 demoThreadPool 线程池，以模拟线程池队列满的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"slowTask"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slowTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolProvider.getDemoThreadPool().execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.HOURS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>做了这些准备工作后，让我们来真正实现自定义的 <code>HealthIndicator </code>类，用于单一线程池的健康状态。我们可以传入一个 <code>ThreadPoolExecutor</code>，通过判断队列剩余容量来确定这个组件的健康状态，有剩余量则返回 UP，否则返回 DOWN，并把线程池队列的两个重要数据，也就是当前队列元素个数和剩余量，作为补充信息加入 Health</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor threadPool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolHealthIndicator</span><span class="params">(ThreadPoolExecutor threadPool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threadPool = threadPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; detail = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        detail.put(<span class="string">"queue_size"</span>, threadPool.getQueue().size());</span><br><span class="line">        detail.put(<span class="string">"queue_remaining"</span>, threadPool.getQueue().remainingCapacity());</span><br><span class="line">        <span class="keyword">if</span> (threadPool.getQueue().remainingCapacity() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.up().withDetails(detail).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.down().withDetails(detail).build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个 <code>CompositeHealthContributor</code>，来聚合两个 <code>ThreadPoolHealthIndicator </code>的实例，分别对应 <code>ThreadPoolProvider </code>中定义的两个线程池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolsHealthContributor</span> <span class="keyword">implements</span> <span class="title">CompositeHealthContributor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, HealthContributor&gt; contributors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ThreadPoolsHealthContributor() &#123;</span><br><span class="line">        <span class="keyword">this</span>.contributors.put(<span class="string">"demoThreadPool"</span>, <span class="keyword">new</span> ThreadPoolHealthIndicator(ThreadPoolProvider.getDemoThreadPool()));</span><br><span class="line">        <span class="keyword">this</span>.contributors.put(<span class="string">"ioThreadPool"</span>, <span class="keyword">new</span> ThreadPoolHealthIndicator(ThreadPoolProvider.getIOThreadPool()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HealthContributor <span class="title">getContributor</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contributors.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;NamedContributor&lt;HealthContributor&gt;&gt; iterator() &#123;</span><br><span class="line">        <span class="keyword">return</span> contributors.entrySet().stream()</span><br><span class="line">                .map((entry) -&gt; NamedContributor.of(entry.getKey(), entry.getValue())).iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后当看到一个 <code>demoThreadPool </code>为 DOWN 导致父 <code>threadPools </code>为 DOWN，进一步导致整个程序的 <code>status </code>为 DOWN：</p><h1>三、对外暴露应用内部重要组件的状态</h1><h2 id="1、内部状态数据暴露">1、内部状态数据暴露</h2><p>除了可以把线程池的状态作为整个应用程序是否健康的依据外，我们还可以通过 Actuator 的 <code>InfoContributor </code>功能，对外暴露程序内部重要组件的状态数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolInfoContributor</span> <span class="keyword">implements</span> <span class="title">InfoContributor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map <span class="title">threadPoolInfo</span><span class="params">(ThreadPoolExecutor threadPool)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; info = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        info.put(<span class="string">"poolSize"</span>, threadPool.getPoolSize());</span><br><span class="line">        info.put(<span class="string">"corePoolSize"</span>, threadPool.getCorePoolSize());</span><br><span class="line">        info.put(<span class="string">"largestPoolSize"</span>, threadPool.getLargestPoolSize());</span><br><span class="line">        info.put(<span class="string">"maximumPoolSize"</span>, threadPool.getMaximumPoolSize());</span><br><span class="line">        info.put(<span class="string">"completedTaskCount"</span>, threadPool.getCompletedTaskCount());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contribute</span><span class="params">(Info.Builder builder)</span> </span>&#123;</span><br><span class="line">        builder.withDetail(<span class="string">"demoThreadPool"</span>, threadPoolInfo(ThreadPoolProvider.getDemoThreadPool()));</span><br><span class="line">        builder.withDetail(<span class="string">"ioThreadPool"</span>, threadPoolInfo(ThreadPoolProvider.getIOThreadPool()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 /admin/info 接口，可以看到这些数据</p><h2 id="2、JMX-MBean">2、JMX MBean</h2><p>如果开启了JMX，即<code>spring.jmx.enabled=true</code>，可以通过 jconsole 工具，在 <code>org.springframework.boot.Endpoint</code> 中找到 <code>Info </code>这个 MBean，然后执行 info 操作可以看到，我们刚才自定义的 <code>InfoContributor </code>输出的有关两个线程池的信息：</p><p><img src="https://img-blog.csdnimg.cn/15e05963b1704f188af9dc06d87d3aa8.png#pic_center" alt="在这里插入图片描述"></p><h1>四、指标 Metrics 快速定位</h1><p>指标是指一组和时间关联的、衡量某个维度能力的量化数值。通过收集指标并展现为曲线图、饼图等图表，可以帮助我们快速定位、分析问题</p><h1>五、总结</h1><p>健康检测可以帮我们实现负载均衡的联动；应用信息以及 Actuaor 提供的各种端点，可以帮我们查看应用内部情况，甚至对应用的一些参数进行调整；而指标监控，则有助于我们整体观察应用运行情况，帮助我们快速发现和定位问题</p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、健康监控简介&lt;/h1&gt;
&lt;h2 id=&quot;1、介绍&quot;&gt;1、介绍&lt;/h2&gt;
&lt;p&gt;开发完成后，生产就绪需要做哪些工作呢？我认为，以下三方面的工作最重要。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提供健康检测接口&lt;/strong&gt;。传统采用 ping 的方式对应用进行探活检测并不准确。有的时候，应用的关键内部或外部依赖已经离线，导致其根本无法正常工作，但其对外的 Web 端口或管理端口是可以 ping 通的。我们应该提供一个专有的监控检测接口，并尽可能触达一些内部组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;暴露应用内部信息&lt;/strong&gt;。应用内部诸如线程池、内存队列等组件，往往在应用内部扮演了重要的角色，如果应用或应用框架可以对外暴露这些重要信息，并加以监控，那么就有可能在诸如 OOM 等重大问题暴露之前发现蛛丝马迹，避免出现更大的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建立应用指标 Metrics 监控&lt;/strong&gt;。Metrics 可以翻译为度量或者指标，指的是对于一些关键信息以可聚合的、数值的形式做定期统计，并绘制出各种趋势图表。这里的指标监控，包括两个方面：一是，应用内部重要组件的指标监控，比如 JVM 的一些指标、接口的 QPS 等；二是，应用的业务数据的监控，比如电商订单量、游戏在线人数等。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JSON常用注解</title>
    <link href="https://www.shawn22.xyz/posts/c69f5ed2.html"/>
    <id>https://www.shawn22.xyz/posts/c69f5ed2.html</id>
    <published>2022-07-29T12:34:38.000Z</published>
    <updated>2022-07-29T12:37:35.189Z</updated>
    
    <content type="html"><![CDATA[<h1>一、介绍</h1><h2 id="1、前言">1、前言</h2><p>在使用Java开发时，一定会接触到Json，而选择前后端开发都是使用Json进行数据传输，以及和数据库打交道的Bean类，相信你一定遇到过字段类型不同而导致的烦恼，而使用这些注解可以很方便进行<strong>字段转换、字段忽略</strong>等等</p><p>这里我使用Spring自带的Jackson和阿里巴巴的FastJson作为记录</p><a id="more"></a><h2 id="2、依赖引入">2、依赖引入</h2><p>Jackson包默认依赖在<code>spring-boot-starter-web</code>下，如果需要使用FastJson包，则需要去除原有的Json依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>二、Jackson常用注解</h1><h2 id="1、-JsonIgnoreProperties">1、@JsonIgnoreProperties</h2><p>类别：类注解</p><p>作用：json序列化时将bean中的一些属性忽略掉，序列化和反序列化都受影响内部可以写多个属性，返回前端忽略该字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">allowGetters，allowSetters一起用用来控制字段忽视是在序列化还是反序列化</span></span><br><span class="line"><span class="comment">allowGetters=true：字段允许序列化，反序列的时候忽略该字段</span></span><br><span class="line"><span class="comment">allowSetters=true：字段允许反序列化，序列化的时候忽略该字段</span></span><br><span class="line"><span class="comment">ignoreUnknown=true：反序列化的时候忽视未知的字段，解决字段无法对应实体类会报错json解析异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonIgnoreProperties</span>(&#123;<span class="string">"name"</span>&#125;,&#123;<span class="string">"age"</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="2、-JsonIgnore">2、@JsonIgnore</h2><p>类别：属性或方法上的注解（最好是属性上）<br>作用：用来完全忽略被注解的字段和方法对应的属性，序列化和反序列化都受影响，返回前端忽略该字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure><h2 id="3、-JsonIgnoreType">3、@JsonIgnoreType</h2><p>类别：类注解<br>作用：类在序列化和反序列化的时候被忽略，只有在该类作为其他类的属性时才会被忽略，直接序列化、反序列化该类是正常的，主要用来对一些数据敏感的对象进行忽略，比如用户的凭据</p><h2 id="4、-JsonFormat">4、@JsonFormat</h2><p>类别：用于属性或方法上（最好是属性上）<br>作用：在需要查询出来的时间的数据库字段对应的实体类的属性上添加，返回的时候会自动格式化，可以在属性对应的get方法上，两种方式没有区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(pattern=<span class="string">"yyyy-MM-dd"</span>,timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想把前端日期字符串转换成Date格式 @DateTimeFormat(pattern="yyyy-MM-dd")</span></span><br></pre></td></tr></table></figure><h2 id="5、-JsonProperty">5、@JsonProperty</h2><p>类别：用于属性</p><p>作用：指定某个属性和json映射的名称</p><ul><li><p>前端传过来的参数，想用其他属性名接收，可以在属性上加此注解  </p></li><li><p>后端返回给前端数据时，前端要求指定key，可在属性上加此注解，就会以注解中的value返回</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这样前端接受的字段为user_name</span></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"user_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、-Transient">6、@Transient</h2><p>类别：用于属性或方法上（最好是属性上）  </p><p>作用：属性不与数据库表的字段映射—该字段在数据库中不存在，而需要使用。实体类中使用了@Table注解后，想要添加表中不存在的字段，就要使用@Transient这个注解；同时还有<strong>transient</strong>关键字标记的成员变量不参与序列化过程。</p><h2 id="7、-JsonSerialize">7、@JsonSerialize</h2><p>类别：用于属性或getter方法，在序列化时嵌入自定义代码</p><p>作用：需要<strong>使用 using 属性指定处理参数的类</strong>，该类需要继承 <code>JsonSerializer </code>类，并重写 <code>serialize()</code>。  若使用了 Lombok 需要自己定义相应的 get 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using = CustomDateSerialize<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Date</span> <span class="title">getDate</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDateSerialize</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义日期格式</span></span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Date date, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        jsonGenerator.writeString(simpleDateFormat.format(date));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、-JsonDeserialize">8、@JsonDeserialize</h2><p>类别：用于属性或者setter方法上，用于在反序列化时可以嵌入我们自定义的代码，类似于上面的<code>@JsonSerialize</code></p><p>作用：需要<strong>使用 using 属性指定处理参数的类</strong>，该类需要继承 <code>JsonSerializer </code>类，并重写 <code>serialize()</code>。  若使用了 Lombok 需要自己定义相应的 get 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在前端性别显示"男 / 女"；数据库中存储的是"1 / 0"，对应的 Pojo 也是使用的 Integer 类型</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4346092911489022673L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1 男，0 女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonDeserialize</span>(using = GenderJsonDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">setGender</span>(<span class="title">Integer</span> <span class="title">gender</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = GenderJsonSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Integer</span> <span class="title">getGender</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JsonDeserializer 作用是：处理参数，按照规则封装到指定的属性中，通过 jsonParser.getText() 获取参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenderJsonDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(jsonParser)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> gender = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (jsonParser.getText()) &#123; <span class="comment">// 通过getText获取参数</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"男"</span>:</span><br><span class="line">                gender = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"女"</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"传入的性别为非法字符"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JsonSerializer 作用是：处理属性，按照规则封装到指定的参数中，通过value获取属性通过 jsonGenerator.writeXxx() 写出参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenderJsonSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o.equals(<span class="number">1</span>)) &#123;</span><br><span class="line">            jsonGenerator.writeString(<span class="string">"男"</span>); <span class="comment">// 写出参数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o.equals(<span class="number">0</span>)) &#123;</span><br><span class="line">            jsonGenerator.writeString(<span class="string">"女"</span>); <span class="comment">// 写出参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、序列化其他相关注解">9、序列化其他相关注解</h2><h3 id="9-1-JsonPropertyOrder">9.1 @JsonPropertyOrder</h3><p>在将 java pojo 对象序列化成为 json 字符串时，使用 <code>@JsonPropertyOrder</code> 可以指定属性在 json 字符串中的顺序</p><h3 id="9-2-JsonInclude">9.2 @JsonInclude</h3><p>在将 java pojo 对象序列化成为 json 字符串时，使用 <code>@JsonInclude</code> 注解可以控制在哪些情况下才将被注解的属性转换成 json</p><ul><li><p>ALWAYS ：默认策略，任何情况下都序列化该字段  </p></li><li><p>NON_NULL：注解的字段为null不序列化  </p></li><li><p>NON_ABSENT：注解的字段为null的时候不序列化</p></li><li><p>NON_EMPTY ：注解的字段为null或为空不序列化  </p></li><li><p>NON_DEFAULT：字段是默认值的话就不序列化  </p></li><li><p>CUSTOM：自定义排除序列化规则，过滤器对象的 equals() 方法被调用并带有要序列化的值；  如果返回真值则排除（即过滤掉）</p></li><li><p>USE_DEFAULTS：伪值用于指示更高级别的默认值是有意义的，以避免覆盖包含值。  例如，如果返回一个属性，这将使用包含属性的类的默认值，如果有的话；  如果没有为此定义，则全局序列化包含详细信息。</p></li></ul><h3 id="9-3-JsonGetter、-JsonSetter注解">9.3 @JsonGetter、@JsonSetter注解</h3><p><code>@JsonGetter</code>和<code>@JsonSetter</code>注解只能用在getter和setter方法上，用来反序列化为指定字段名和序列化时为指定字段名，可以替换上面的@JsonProperty也可以被替换；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonGetter</span>(<span class="string">"USERNAME"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSetter</span>(<span class="string">"USERNAME"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4-JsonAnySetter和-JsonAnyGetter注解">9.4 @JsonAnySetter和@JsonAnyGetter注解</h3><ul><li><p><code>@JsonAnySetter</code>注解是在反序列化时实体对象不存在对应的属性时加上该 注解，不存在的属性都会放到Map中去</p></li><li><p><code>@JsonAnyGetter</code>注解在序列化时Map加上该属性可以将map中的属性序列化为指定字符串</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonAnyGetter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonAnySetter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Map&lt;String, String&gt; properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、FastJson常用注解</h1><blockquote><p>文档：<a href="https://www.w3cschool.cn/fastjson/fastjson-intro.html" target="_blank" rel="noopener" title="https://www.w3cschool.cn/fastjson/fastjson-intro.html">https://www.w3cschool.cn/fastjson/fastjson-intro.html</a><br>官方文档：<a href="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN" target="_blank" rel="noopener" title="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</a></p></blockquote><h2 id="1、介绍">1、介绍</h2><p>FastJson提供了4种注解,分别是<code>@JSONType</code>，<code>@JSONCreator</code>，<code>@JSONField</code>，<code>@JSONPOJOBuilder</code></p><h2 id="2、-JSONField">2、@JSONField</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若属性是私有的，必须有set*方法。否则无法反序列化。</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JSONField &#123;</span><br><span class="line">  <span class="comment">// 配置序列化和反序列化的顺序，1.1.42版本之后才⽀持</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">  <span class="comment">// 指定字段的名称</span></span><br><span class="line">  <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">  <span class="comment">// 指定字段的格式，对⽇期格式有⽤</span></span><br><span class="line">  <span class="function">String <span class="title">format</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">  <span class="comment">// 是否序列化</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">serialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">  <span class="comment">// 是否反序列化</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">deserialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>@JSONField(ordinal =0) 序列化字段的顺序，默认是0</p></li><li><p>@JSONField(name = “”)    用于解决属性名和key不一致的情况，当前端传过来的字段名不一样的时候，我们可以在字段名上加上这个注解</p></li><li><p>@JSONField(format = “yyyy-MM-dd HH:mm:ss”) ， 用在Date属性上，自动格式化日期</p></li><li><p>@JSONField(serialize = false)    是否要把这个字段序列化成JSON字符串，默认是true</p></li><li><p>@JSONField(deserialize = false)    字段是否需要进行反序列化，默认是true</p></li></ul><h2 id="3、-JSONType">3、@JSONType</h2><p>放在实体类上就会只装配列举的字段或者排除列举的成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不序列化这两个</span></span><br><span class="line"><span class="meta">@JSONType</span>(ignores = &#123;<span class="string">"id"</span>, <span class="string">"sex"</span>&#125;)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pojo2</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//序列化只序列化这两个属性</span></span><br><span class="line"><span class="class">@<span class="title">JSONType</span>(<span class="title">includes</span> </span>= &#123;<span class="string">"name"</span>, <span class="string">"sex"</span>&#125;)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pojo1</span></span></span><br></pre></td></tr></table></figure><hr><p><a href="https://juejin.cn/post/7115219049931341854" target="_blank" rel="noopener" title="https://juejin.cn/post/7115219049931341854">https://juejin.cn/post/7115219049931341854</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、前言&quot;&gt;1、前言&lt;/h2&gt;
&lt;p&gt;在使用Java开发时，一定会接触到Json，而选择前后端开发都是使用Json进行数据传输，以及和数据库打交道的Bean类，相信你一定遇到过字段类型不同而导致的烦恼，而使用这些注解可以很方便进行&lt;strong&gt;字段转换、字段忽略&lt;/strong&gt;等等&lt;/p&gt;
&lt;p&gt;这里我使用Spring自带的Jackson和阿里巴巴的FastJson作为记录&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://www.shawn22.xyz/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring事件监听</title>
    <link href="https://www.shawn22.xyz/posts/cb9972ff.html"/>
    <id>https://www.shawn22.xyz/posts/cb9972ff.html</id>
    <published>2022-07-29T12:34:30.000Z</published>
    <updated>2022-07-29T12:37:35.188Z</updated>
    
    <content type="html"><![CDATA[<h1>Spring事件监听器</h1><h1>一、简介</h1><h2 id="1、Spring事件监听基本原理">1、Spring事件监听基本原理</h2><blockquote><p>Spring的事件监听机制和发布订阅机制是很相似的：发布了一个事件后，监听该类型事件的所有监听器会触发相应的处理逻辑。</p></blockquote><p>正如Spring官方文档上所说的，<strong>整个上就是一个观察者的模式</strong>。那么，我们不妨猜测下，Spring是如何来实现事件发布监听的：底层使用一个集合存储了所有的监听器，当发布了一个事件后，遍历事件监听器集合，然后过滤符合事件类型的监听器，最后触发相应的事件处理逻辑。</p><a id="more"></a><h2 id="2、Spring中事件监听的相关规范">2、Spring中事件监听的相关规范</h2><p>在Spring中，事件监听机制主要涉及到了一下几个关键的规范（抽象类及接口）：<code>ApplicationEvent</code>、<code>ApplicationListener</code>、<code>ApplicationEventPublisher</code></p><ul><li><p><strong>ApplicationEvent</strong>: Spring的事件是符合jdk的规范的，这个抽象类继承了jdk内置的事件规范类<code>EventObject</code>（即jdk建议所有的事件都继承<code>EventObject</code>这个类）。<code>ApplicationEvent</code>是Spring家的事件规范。所以我们在自定义事件的时候，可以继承与<code>ApplicationEvent</code>，比如，Spring家自己关于容器上下文事件就又定义了一个容器上下文的时间规范<code>ApplicationContextEvent</code>，它同样是继承于<code>ApplicationEvent</code>的，只不过扩充了获取发出事件容器的方法；今后，我们同样可以在继承于<code>ApplicationEvent</code>的基础上定义自己的事件规范。</p></li><li><p><strong>ApplicationListener</strong>：这是一个函数式接口，同样时事件监听器的规范，当监听到自己监听的事件类型时就会调用<code>onApplicationEvent</code>方法来执行监听逻辑</p></li><li><p><strong>ApplicationEventPublisher</strong>：这同样是一个函数式接口，定义了事件发布的规范，任何的事件发布器<code>ApplicationEventPublisher</code>都是通过调用<code>publishEvent</code>来进行事件的发布</p></li></ul><h1>二、Spring事件监听器的使用</h1><h2 id="1、自定义事件创建">1、自定义事件创建</h2><p>在Spring中，所有的事件需要继承自ApplicationEvent，自定义事件的不同可以监听多个，一个最基础的MsgEvent如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须继承实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyEvent&#123;"</span> +</span><br><span class="line">                <span class="string">"msg='"</span> + msg + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、自定义监听器">2、自定义监听器</h2><h3 id="2-1-方法介绍">2.1 方法介绍</h3><p>springboot进行事件监听有四种方式，选择任意一种即可</p><ul><li><p>将监听器装载入spring容器（常用）</p></li><li><p>通过@EventListener注解实现事件监听（常用）</p></li><li><p>手工向ApplicationContext中添加监听器</p></li><li><p>在application.properties中配置监听器</p></li></ul><h3 id="2-2-将监听器装载入spring容器">2.2 将监听器装载入spring容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装载入spring容器中</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener1</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里可以自定义自己的方法</span></span><br><span class="line">        log.info(String.format(<span class="string">"%s监听到事件源：%s."</span>, MyListener1<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">event</span>.<span class="title">toString</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加@Component注解加入Spring容器，也可以手动加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(ListenerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        <span class="comment">//装载监听</span></span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> MyListener1());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过配置文<code>application.properties</code>中配置监听器：<code>context.listener.classes=com.listener.MyListener1</code></p><h3 id="2-3-EventListener注解实现事件监听">2.3 @EventListener注解实现事件监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener2</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 通过注解的方法</span></span><br><span class="line">    <span class="meta">@EventListener</span>(MyEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">consumer</span>(<span class="title">MyEvent</span> <span class="title">msgEvent</span>) </span>&#123;</span><br><span class="line">        log.info(String.format(<span class="string">"%s监听到事件源：%s."</span>, MsgPublisher<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">msgEvent</span>.<span class="title">toString</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、事件发布">3、事件发布</h2><p>前面是消费事件，消费的前提是有事件产生，在Spring中，发布事件主要需要借助<code>ApplicationContext</code>来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgPublisher</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发起事件通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        applicationContext.publishEvent(<span class="keyword">new</span> MyEvent1(<span class="keyword">this</span>, msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过注解的方法</span></span><br><span class="line">    <span class="meta">@EventListener</span>(MyEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">consumer</span>(<span class="title">MyEvent</span> <span class="title">msgEvent</span>) </span>&#123;</span><br><span class="line">        log.info(String.format(<span class="string">"%s监听到事件源：%s."</span>, MsgPublisher<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">msgEvent</span>.<span class="title">toString</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个只是测试，到时候spring直接调用即可</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MsgPublisher<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        MsgPublisher msgPublisher = context.getBean(MsgPublisher<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        msgPublisher.publish(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;Spring事件监听器&lt;/h1&gt;
&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;h2 id=&quot;1、Spring事件监听基本原理&quot;&gt;1、Spring事件监听基本原理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring的事件监听机制和发布订阅机制是很相似的：发布了一个事件后，监听该类型事件的所有监听器会触发相应的处理逻辑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正如Spring官方文档上所说的，&lt;strong&gt;整个上就是一个观察者的模式&lt;/strong&gt;。那么，我们不妨猜测下，Spring是如何来实现事件发布监听的：底层使用一个集合存储了所有的监听器，当发布了一个事件后，遍历事件监听器集合，然后过滤符合事件类型的监听器，最后触发相应的事件处理逻辑。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Spring基础" scheme="https://www.shawn22.xyz/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java实现文件变化监听</title>
    <link href="https://www.shawn22.xyz/posts/f1ddc9b.html"/>
    <id>https://www.shawn22.xyz/posts/f1ddc9b.html</id>
    <published>2022-07-29T12:34:20.000Z</published>
    <updated>2022-07-29T12:37:35.189Z</updated>
    
    <content type="html"><![CDATA[<h1>一、前言</h1><h2 id="1、简介">1、简介</h2><p>在平时的开发过程中，会有很多场景需要实时监听文件的变化，如下：</p><ul><li>通过实时监控 mysql 的 binlog 日志实现数据同步</li><li>修改配置文件后，希望系统可以实时感知</li><li>应用系统将日志写入文件中，日志监控系统可以实时抓取日志，分析日志内容并进行报警</li><li>类似 ide 工具，可以实时感知管理的工程下的文件变更</li></ul><a id="more"></a><h2 id="2、三种方法介绍">2、三种方法介绍</h2><ul><li><p><strong>定时任务 + File#lastModified</strong></p></li><li><p><strong>WatchService</strong></p></li><li><p><strong>Apache Commons-IO</strong></p></li></ul><h1>二、三种方法实现</h1><h2 id="1、定时任务-File-lastModified">1、定时任务 + File#lastModified</h2><blockquote><p>通过定时任务，轮训查询文件的最后修改时间，与上一次进行对比。如果发生变化，则说明文件已经修改，进行重新加载或对应的业务逻辑处理</p></blockquote><p>对于文件低频变动的场景，这种方案实现简单，基本上可以满足需求。但该方案如果用在文件目录的变化上，缺点就有些明显了，比如：操作频繁，效率都损耗在遍历、保存状态、对比状态上了，无法充分利用OS的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWatchDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> LAST_TIME = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相对路径代表这个功能相同的目录下</span></span><br><span class="line">        String fileName = <span class="string">"static/test.json"</span>;</span><br><span class="line">        <span class="comment">// 创建文件，仅为实例，实践中由其他程序触发文件的变更</span></span><br><span class="line">        createFile(fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环执行</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">long</span> timestamp = readLastModified(fileName);</span><br><span class="line">            <span class="keyword">if</span> (timestamp != LAST_TIME) &#123;</span><br><span class="line">                System.out.println(<span class="string">"文件已被更新："</span> + timestamp);</span><br><span class="line">                LAST_TIME = timestamp;</span><br><span class="line">                <span class="comment">// 重新加载，文件内容</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"文件未更新"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> result = file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">"创建文件："</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件最后修改时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">readLastModified</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        <span class="keyword">return</span> file.lastModified();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时该方案存在<a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8177809" target="_blank" rel="noopener" title="Bug">Bug</a>：在Java8和9的某些版本下，lastModified方法返回时间戳并不是毫秒，而是秒，也就是说返回结果的后三位始终为0</p><h2 id="2、WatchService">2、WatchService</h2><h3 id="2-1-介绍">2.1 介绍</h3><blockquote><p>在Java 7中新增了<code>java.nio.file.WatchService</code>，通过它可以实现文件变动的监听。WatchService是基于操作系统的文件系统监控器，可以监控系统所有文件的变化，无需遍历、无需比较，是一种基于信号收发的监控，效率高</p></blockquote><p>相对于方案一，实现起来简单，效率高。不足的地方也很明显，<strong>只能监听当前目录下的文件和目录，不能监视子目录</strong>。另外对于jdk8之后版本来说，该方案已经实现实时监听，不存在准实时的问题</p><h3 id="2-2-简单示例">2.2 简单示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WatchServiceDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 这里的监听必须是目录</span></span><br><span class="line">        Path path = Paths.get(<span class="string">"static"</span>);</span><br><span class="line">        <span class="comment">// 创建WatchService，它是对操作系统的文件监视器的封装，相对之前，不需要遍历文件目录，效率要高很多</span></span><br><span class="line">        WatchService watcher = FileSystems.getDefault().newWatchService();</span><br><span class="line">        <span class="comment">// 注册指定目录使用的监听器，监视目录下文件的变化；</span></span><br><span class="line">        <span class="comment">// PS：Path必须是目录，不能是文件；</span></span><br><span class="line">        <span class="comment">// StandardWatchEventKinds.ENTRY_MODIFY，表示监视文件的修改事件</span></span><br><span class="line">        path.register(watcher, <span class="keyword">new</span> WatchEvent.Kind[]&#123;StandardWatchEventKinds.ENTRY_MODIFY&#125;,</span><br><span class="line">                SensitivityWatchEventModifier.LOW);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个线程，等待目录下的文件发生变化</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取目录的变化:</span></span><br><span class="line">                <span class="comment">// take()是一个阻塞方法，会等待监视器发出的信号才返回。</span></span><br><span class="line">                <span class="comment">// 还可以使用watcher.poll()方法，非阻塞方法，会立即返回当时监视器中是否有信号。</span></span><br><span class="line">                <span class="comment">// 返回结果WatchKey，是一个单例对象，与前面的register方法返回的实例是同一个；</span></span><br><span class="line">                WatchKey key = watcher.take();</span><br><span class="line">                <span class="comment">// 处理文件变化事件：</span></span><br><span class="line">                <span class="comment">// key.pollEvents()用于获取文件变化事件，只能获取一次，不能重复获取，类似队列的形式。</span></span><br><span class="line">                <span class="keyword">for</span> (WatchEvent&lt;?&gt; event : key.pollEvents()) &#123;</span><br><span class="line">                    <span class="comment">// event.kind()：事件类型</span></span><br><span class="line">                    <span class="keyword">if</span> (event.kind() == StandardWatchEventKinds.OVERFLOW) &#123;</span><br><span class="line">                        <span class="comment">//事件可能lost or discarded</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 返回触发事件的文件或目录的路径（相对路径）</span></span><br><span class="line">                    Path fileName = (Path) event.context();</span><br><span class="line">                    System.out.println(<span class="string">"文件更新: "</span> + fileName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 每次调用WatchService的take()或poll()方法时需要通过本方法重置</span></span><br><span class="line">                <span class="keyword">if</span> (!key.reset()) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-完整示例">2.3 完整示例</h3><p>创建<code>FileWatchedListener</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileWatchedListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCreated</span><span class="params">(WatchEvent&lt;Path&gt; watchEvent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDeleted</span><span class="params">(WatchEvent&lt;Path&gt; watchEvent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onModified</span><span class="params">(WatchEvent&lt;Path&gt; watchEvent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onOverflowed</span><span class="params">(WatchEvent&lt;Path&gt; watchEvent)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>FileWatchedAdapter </code>实现类，实现文件监听的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWatchedAdapter</span> <span class="keyword">implements</span> <span class="title">FileWatchedListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreated</span><span class="params">(WatchEvent&lt;Path&gt; watchEvent)</span> </span>&#123;</span><br><span class="line">        Path fileName = watchEvent.context();</span><br><span class="line">        System.out.println(String.format(<span class="string">"文件【%s】被创建，时间：%s"</span>, fileName, now()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDeleted</span><span class="params">(WatchEvent&lt;Path&gt; watchEvent)</span> </span>&#123;</span><br><span class="line">        Path fileName = watchEvent.context();</span><br><span class="line">        System.out.println(String.format(<span class="string">"文件【%s】被删除，时间：%s"</span>, fileName, now()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onModified</span><span class="params">(WatchEvent&lt;Path&gt; watchEvent)</span> </span>&#123;</span><br><span class="line">        Path fileName = watchEvent.context();</span><br><span class="line">        System.out.println(String.format(<span class="string">"文件【%s】被修改，时间：%s"</span>, fileName, now()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOverflowed</span><span class="params">(WatchEvent&lt;Path&gt; watchEvent)</span> </span>&#123;</span><br><span class="line">        Path fileName = watchEvent.context();</span><br><span class="line">        System.out.println(String.format(<span class="string">"文件【%s】被丢弃，时间：%s"</span>, fileName, now()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">now</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span>);</span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(Calendar.getInstance().getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>FileWatchedService </code>监听类，监听文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWatchedService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WatchService watchService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileWatchedListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 要监听的目录，注意该 Path 只能是目录，否则会报错 java.nio.file.NotDirectoryException: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 自定义的 listener，用来处理监听到的创建、修改、删除事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileWatchedService</span><span class="params">(Path path, FileWatchedListener listener)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        watchService = FileSystems.getDefault().newWatchService();</span><br><span class="line">        path.register(watchService,</span><br><span class="line">                <span class="comment">/// 监听文件创建事件</span></span><br><span class="line">                StandardWatchEventKinds.ENTRY_CREATE,</span><br><span class="line">                <span class="comment">/// 监听文件删除事件</span></span><br><span class="line">                StandardWatchEventKinds.ENTRY_DELETE,</span><br><span class="line">                <span class="comment">/// 监听文件修改事件</span></span><br><span class="line">                StandardWatchEventKinds.ENTRY_MODIFY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            WatchKey watchKey = watchService.take();</span><br><span class="line">            List&lt;WatchEvent&lt;?&gt;&gt; watchEventList = watchKey.pollEvents();</span><br><span class="line">            <span class="keyword">for</span> (WatchEvent&lt;?&gt; watchEvent : watchEventList) &#123;</span><br><span class="line">                WatchEvent.Kind&lt;?&gt; kind = watchEvent.kind();</span><br><span class="line"></span><br><span class="line">                WatchEvent&lt;Path&gt; curEvent = (WatchEvent&lt;Path&gt;) watchEvent;</span><br><span class="line">                <span class="keyword">if</span> (kind == StandardWatchEventKinds.OVERFLOW) &#123;</span><br><span class="line">                    listener.onOverflowed(curEvent);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (kind == StandardWatchEventKinds.ENTRY_CREATE) &#123;</span><br><span class="line">                    listener.onCreated(curEvent);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (kind == StandardWatchEventKinds.ENTRY_MODIFY) &#123;</span><br><span class="line">                    listener.onModified(curEvent);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (kind == StandardWatchEventKinds.ENTRY_DELETE) &#123;</span><br><span class="line">                    listener.onDeleted(curEvent);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * WatchKey 有两个状态：</span></span><br><span class="line"><span class="comment">             * &#123;<span class="doctag">@link</span> sun.nio.fs.AbstractWatchKey.State.READY ready&#125; 就绪状态：表示可以监听事件</span></span><br><span class="line"><span class="comment">             * &#123;<span class="doctag">@link</span> sun.nio.fs.AbstractWatchKey.State.SIGNALLED signalled&#125; 有信息状态：表示已经监听到事件，不可以接续监听事件</span></span><br><span class="line"><span class="comment">             * 每次处理完事件后，必须调用 reset 方法重置 watchKey 的状态为 ready，否则 watchKey 无法继续监听事件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (!watchKey.reset()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Path path = Paths.get(<span class="string">"static"</span>);</span><br><span class="line">            FileWatchedService fileWatchedService = <span class="keyword">new</span> FileWatchedService(path, <span class="keyword">new</span> FileWatchedAdapter());</span><br><span class="line">            fileWatchedService.watch();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Apache-Commons-IO">3、Apache Commons-IO</h2><h3 id="3-1-介绍与环境准备">3.1 介绍与环境准备</h3><p><code>commons-io</code>对实现文件监听的实现位于<code>org.apache.commons.io.monitor</code>包下，基本使用流程如下：</p><ul><li><p>自定义文件监听类并继承 <code>FileAlterationListenerAdaptor</code> 实现对文件与目录的创建、修改、删除事件的处理；</p></li><li><p>自定义文件监控类，通过指定目录创建一个观察者 <code>FileAlterationObserver</code>；</p></li><li><p>向监视器添加文件系统观察器，并添加文件监听器；</p></li><li><p>调用并执行。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意，不同的版本需要不同的JDK支持，2.7需要Java 8及以上版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-原理讲解">3.2 原理讲解</h3><p>该方案中监听器本身会启动一个线程定时处理。在每次运行时，都会先调用事件监听处理类的onStart方法，然后检查是否有变动，并调用对应事件的方法；比如，onChange文件内容改变，检查完后，再调用onStop方法，释放当前线程占用的CPU资源，等待下次间隔时间到了被再次唤醒运行。</p><p>监听器是<strong>基于文件目录为根源的</strong>，也可以可以设置过滤器，来实现对应文件变动的监听。过滤器的设置可查看<code>FileAlterationObserver</code>的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileAlterationObserver</span><span class="params">(String directoryName, FileFilter fileFilter, IOCase caseSensitivity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> File(directoryName), fileFilter, caseSensitivity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-实战演示">3.2 实战演示</h3><p>创建文件监听器。根据需要在不同的方法内实现对应的业务逻辑处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileListener</span> <span class="keyword">extends</span> <span class="title">FileAlterationListenerAdaptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(FileAlterationObserver observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart(observer);</span><br><span class="line">        <span class="comment">// System.out.println("一轮轮询开始，被监视路径：" + observer.getDirectory());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectoryCreate</span><span class="params">(File directory)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建文件夹："</span> + directory.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectoryChange</span><span class="params">(File directory)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改文件夹："</span> + directory.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectoryDelete</span><span class="params">(File directory)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除文件夹："</span> + directory.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileCreate</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        String compressedPath = file.getAbsolutePath();</span><br><span class="line">        System.out.println(<span class="string">"新建文件："</span> + compressedPath);</span><br><span class="line">        <span class="keyword">if</span> (file.canRead()) &#123;</span><br><span class="line">            <span class="comment">// TODO 读取或重新加载文件内容</span></span><br><span class="line">            System.out.println(<span class="string">"文件变更，进行处理"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileChange</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        String compressedPath = file.getAbsolutePath();</span><br><span class="line">        System.out.println(<span class="string">"修改文件："</span> + compressedPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileDelete</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除文件："</span> + file.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(FileAlterationObserver observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop(observer);</span><br><span class="line">        <span class="comment">// System.out.println("一轮轮询结束，被监视路径：" + fileAlterationObserver.getDirectory());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装一个文件监控的工具类，核心就是创建一个观察者<code>FileAlterationObserver</code>，将文件路径Path和监听器<code>FileAlterationListener</code>进行封装，然后交给<code>FileAlterationMonitor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMonitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileAlterationMonitor monitor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileMonitor</span><span class="params">(<span class="keyword">long</span> interval)</span> </span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> FileAlterationMonitor(interval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给文件添加监听</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path     文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 文件监听器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">(String path, FileAlterationListener listener)</span> </span>&#123;</span><br><span class="line">        FileAlterationObserver observer = <span class="keyword">new</span> FileAlterationObserver(<span class="keyword">new</span> File(path));</span><br><span class="line">        monitor.addObserver(observer);</span><br><span class="line">        observer.addListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        monitor.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        monitor.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 监控间隔</span></span><br><span class="line">        FileMonitor fileMonitor = <span class="keyword">new</span> FileMonitor(<span class="number">10_000L</span>);</span><br><span class="line">        fileMonitor.monitor(<span class="string">"static"</span>, <span class="keyword">new</span> FileListener());</span><br><span class="line">        fileMonitor.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p><p><a href="https://segmentfault.com/a/1190000041913336" target="_blank" rel="noopener" title="https://segmentfault.com/a/1190000041913336">https://segmentfault.com/a/1190000041913336</a></p><p><a href="https://blog.csdn.net/claram/article/details/97919664" target="_blank" rel="noopener" title="https://blog.csdn.net/claram/article/details/97919664">https://blog.csdn.net/claram/article/details/97919664</a></p><p><a href="https://mp.weixin.qq.com/s/McM52HwV2e-uTWJt8qSdCw" target="_blank" rel="noopener" title="https://mp.weixin.qq.com/s/McM52HwV2e-uTWJt8qSdCw">https://mp.weixin.qq.com/s/McM52HwV2e-uTWJt8qSdCw</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、前言&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;在平时的开发过程中，会有很多场景需要实时监听文件的变化，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过实时监控 mysql 的 binlog 日志实现数据同步&lt;/li&gt;
&lt;li&gt;修改配置文件后，希望系统可以实时感知&lt;/li&gt;
&lt;li&gt;应用系统将日志写入文件中，日志监控系统可以实时抓取日志，分析日志内容并进行报警&lt;/li&gt;
&lt;li&gt;类似 ide 工具，可以实时感知管理的工程下的文件变更&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://www.shawn22.xyz/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean初始化</title>
    <link href="https://www.shawn22.xyz/posts/c6a1d53.html"/>
    <id>https://www.shawn22.xyz/posts/c6a1d53.html</id>
    <published>2022-07-29T12:34:10.000Z</published>
    <updated>2022-07-29T12:37:35.187Z</updated>
    
    <content type="html"><![CDATA[<p># 一、Bean的生命周期</p><blockquote><p><a href="https://juejin.cn/post/6844904065457979405" target="_blank" rel="noopener" title="如何记忆 Spring Bean 的生命周期">如何记忆 Spring Bean 的生命周期</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/bc9990a8b19544388b6d193b745135a2.png#pic_center" alt></p><a id="more"></a><h1>二、Spring初始化Bean几种方式</h1><h2 id="1、初始化介绍">1、初始化介绍</h2><blockquote><p>执行顺序：Constructor &gt; @PostConstruct &gt; InitializingBean &gt; init-method</p></blockquote><ul><li><p>实现InitializingBean接口，重写afterPropertiesSet方法</p></li><li><p>&lt;Bean&gt;元素上添加init-method初始化</p></li><li><p>使用@PostConstruct注解</p></li></ul><h2 id="2、-PostConstruct注解">2、@PostConstruct注解</h2><blockquote><p>javaEE5引入了@PostConstruct和@PreDestroy两个作用于Servlet生命周期的注解，实现Bean初始化之前和销毁之前的自定义操作</p></blockquote><p><strong>@PostConstruct是Java自己的注解</strong></p><p><strong>@PostConstruct该注解被用来修饰一个非静态的void()方法</strong></p><p><strong>@PostConstruct修饰的方法会在服务器加载Servlet的时候运行,并且只会被服务器执行一次</strong></p><p><strong>@PostConstruct在构造函数之后执行,init()方法之前执行</strong></p><p>假设类<strong>UserController</strong>有个成员变量<strong>UserService</strong>被**@Autowired**修饰，那么UserService的注入是在UserController的构造方法之后执行的。如果想在UserController对象生成时候完成某些初始化操作，而偏偏这些初始化操作又依赖于依赖注入的对象，那么就无法在构造函数中实现（ps：spring启动时初始化异常），例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用userService的自定义初始化方法，此时userService为null，报错</span></span><br><span class="line">    userService.userServiceInit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用<code>@PostConstruct</code>注解来完成初始化，<code>@PostConstruct</code>注解的方法将会在UserService注入完成后被自动调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 初始化方法</span></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userService.userServiceInit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**总结：**类初始化调用顺序：构造方法<code>Constructor </code>&gt; <code>@Autowired</code> &gt; <code>@PostConstruct</code></p><h2 id="3、InitializingBean接口">3、InitializingBean接口</h2><blockquote><p>InitializingBean是Spring提供的拓展性接口，InitializingBean接口为bean提供了属性初始化后的处理方法，它只有一个afterPropertiesSet方法，凡是继承该接口的类，在bean的属性初始化后都会执行该方法。</p></blockquote><p> 除了采用注解完成初始化，也可以通过实现InitializingBean完成类的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 初始化方法</span></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userService.userServiceInit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较常见的如<code>SqlSessionFactoryBean</code>，它就是通过实现<code>InitializingBean</code>完成初始化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// buildSqlSessionFactory()是完成初始化的核心方法，必须在构造方法调用后执行</span></span><br><span class="line"> <span class="keyword">this</span>.sqlSessionFactory = buildSqlSessionFactory(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、-Bean的initMethod属性">4、@Bean的initMethod属性</h2><p>initMethod属性通过bean标签中的initMethod来配置实例化之后的初始化方法的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userService.userServiceInit();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化指向init()方法</span></span><br><span class="line">  <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserController <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserController();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、三种方式执行顺序">5、三种方式执行顺序</h2><p>通过启动日志我们可以看出执行顺序优先级：<strong>构造方法 &gt; postConstruct &gt;afterPropertiesSet &gt; init方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInitializingBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInitializingBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是MyInitializingBean构造方法执行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是afterPropertiesSet方法执行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是postConstruct方法执行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是init方法执行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">config</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyInitializingBean <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyInitializingBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//==================执行结果===================</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">我是MyInitializingBean构造方法执行...</span></span><br><span class="line"><span class="comment">我是postConstruct方法执行...</span></span><br><span class="line"><span class="comment">我是afterPropertiesSet方法执行...</span></span><br><span class="line"><span class="comment">我是init方法执行...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="6、总结">6、总结</h2><ul><li><p>Spring为bean提供了两种初始化bean的方式，实现InitializingBean接口，实现afterPropertiesSet方法，或者在配置文件中通过init-method指定，两种方式可以同时使用。</p></li><li><p>实现InitializingBean接口是直接调用afterPropertiesSet方法，比通过反射调用init-method指定的方法效率要高一点，但是init-method方式消除了对spring的依赖。</p></li><li><p>如果调用afterPropertiesSet方法时出错，则不调用init-method指定的方法。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;# 一、Bean的生命周期&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844904065457979405&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;如何记忆 Spring Bean 的生命周期&quot;&gt;如何记忆 Spring Bean 的生命周期&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/bc9990a8b19544388b6d193b745135a2.png#pic_center&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Spring基础" scheme="https://www.shawn22.xyz/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Web消息推送之SSE</title>
    <link href="https://www.shawn22.xyz/posts/448ccb52.html"/>
    <id>https://www.shawn22.xyz/posts/448ccb52.html</id>
    <published>2022-07-29T12:30:45.000Z</published>
    <updated>2022-07-29T12:40:09.304Z</updated>
    
    <content type="html"><![CDATA[<h1>一、消息推送简介</h1><h2 id="1、消息推送介绍">1、消息推送介绍</h2><p>消息推送(<code>push</code>)通常是指网站的运营工作等人员，通过某种工具对用户当前网页或移动设备APP进行的主动消息推送。推送的场景比较多，比如有人关注我的公众号，这时我就会收到一条推送消息，以此来吸引我点击打开应用，消息推送一般又分为<code>web端消息推送</code>和<code>移动端消息推送</code>。</p><p>另外注意主流浏览器只支持<strong>6个连接</strong></p><a id="more"></a><h2 id="2、几种方式介绍">2、几种方式介绍</h2><blockquote><p>详情可以参考：<a href="https://mp.weixin.qq.com/s/zF-RBfHXJVvxaho3fRSogA" target="_blank" rel="noopener" title="我有 7种 实现web实时消息推送的方案，7种">我有 7种 实现web实时消息推送的方案，7种</a></p></blockquote><ul><li><p><strong>短轮询</strong></p><p>客户端定期向服务器发送请求。如果服务器有更新，它会向客户端发送响应并关闭连接。如果服务器没有更新，它也会向客户端发送一个响应并关闭连接。</p></li><li><p><strong>长轮询</strong></p><p>客户端向服务器发送请求。如果服务器有更新，它会向客户端发送响应并关闭连接。如果服务器没有更新，它会保持连接直到更新可用。当更新可用时，服务器向客户端发送响应并关闭连接。如果更新在某个超时时间内不可用，服务器会向客户端发送响应并关闭连接。</p></li><li><p><strong>iframe流</strong></p><p>iframe流就是在页面中插入一个隐藏的<code>&lt;iframe&gt;</code>标签，通过在<code>src</code>中请求消息数量API接口，由此在服务端和客户端之间创建一条长连接，服务端持续向<code>iframe</code>传输数据</p></li><li><p><strong>SSE (推荐的方式)</strong></p><p>SSE 是一种在基于浏览器的 Web 应用程序中仅从服务器向客户端发送文本消息的技术。SSE基于 HTTP 协议中的持久连接， 具有由 W3C 标准化的网络协议和 EventSource 客户端接口，作为 HTML5 标准套件的一部分</p></li><li><p><strong>MQTT</strong></p><p>该协议将消息的发布者（<code>publisher</code>）与订阅者（<code>subscriber</code>）进行分离，因此可以在不可靠的网络环境中，为远程连接的设备提供可靠的消息服务，使用方式与传统的MQ有点类似，可以做智能家居通讯</p></li><li><p><strong>websocket</strong></p><p>WebSocket 是一种在 Web 应用程序中实现同时、双向、实时通信的技术。WebSocket 基于 HTTP 以外的协议（TCP），因此可能需要额外设置网络基础设施（代理服务器、NAT、防火墙等）</p></li><li><p><strong>三方平台 (例如极光推送)</strong></p></li></ul><h1>二、SSE原理介绍</h1><h2 id="1、SSE基础概念">1、SSE基础概念</h2><p>SSE(<code>Server Sent Event</code>)，直译为服务器发送事件，顾名思义，也就是客户端可以获取到服务器发送的事件。我们常见的 http 交互方式是客户端发起请求，服务端响应，然后一次请求完毕；但是在 sse 的场景下，客户端发起请求，连接一直保持，服务端有数据就可以返回数据给客户端，这个返回可以是多次间隔的方式</p><h2 id="2、SSE特点">2、SSE特点</h2><ul><li><p>长连接</p></li><li><p>服务端可以向客户端推送信息</p></li></ul><p>从 sse 的特点出发，我们可以大致的判断出它的应用场景，需要轮询获取服务端最新数据的 case 下，多半是可以用它的。比如显示当前网站在线的实时人数，法币汇率显示当前实时汇率，电商大促的实时成交额等等</p><h2 id="3、SSE与WebSocket异同">3、SSE与WebSocket异同</h2><blockquote><p>WebSocket可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124172948" target="_blank" rel="noopener" title="SpringBoot项目整合WebSocket几种方式">SpringBoot项目整合WebSocket几种方式</a></p></blockquote><p><strong>sse 是单通道，只能服务端向客户端发消息；而 webscoket 是双通道</strong></p><table><thead><tr><th><strong>sse</strong></th><th><strong>websocket</strong></th></tr></thead><tbody><tr><td>http 协议</td><td>独立的 websocket 协议</td></tr><tr><td>轻量，使用简单</td><td>相对复杂</td></tr><tr><td>默认支持断线重连</td><td>需要自己实现断线重连</td></tr><tr><td>文本传输</td><td>二进制传输</td></tr><tr><td>支持自定义发送的消息类型</td><td>-</td></tr></tbody></table><h1>三、SSE推送实现</h1><h2 id="1、概述">1、概述</h2><h3 id="1-1-使用Spring-MVC来发送事件">1.1 使用Spring MVC来发送事件</h3><ol><li><p>使用 <code>@RestController</code> 注解创建一个控制器类（Controller）</p></li><li><p>创建一个方法来创建一个客户端连接，它返回一个 <strong>SseEmitter</strong>，处理 GET 请求并产生（produces）文本/事件流 (<code>text/event-stream</code>)</p></li><li><p>创建一个新的 SseEmitter, 保存它并从方法中返回</p></li><li><p>在另一个线程中异步发送事件, 先拿到保存的 SseEmitter 并根据需要多次调用调用<code>SseEmitter.send() </code>方法</p></li><li><p>完成事件发送, 调用 <code>SseEmitter.complete()</code> 方法</p></li><li><p>要异常完成发送事件，请调用 <code>SseEmitter.completeWithError()</code> 方法</p></li></ol><h3 id="1-2-使用Spring-Web-Flux发送">1.2 使用Spring Web Flux发送</h3><blockquote><p>可以参考：<a href="https://blog.csdn.net/lemon_TT/article/details/124675141" target="_blank" rel="noopener" title="WebFlux入门详解">WebFlux入门详解</a></p></blockquote><ol><li><p>使用 <code>@RestController</code> 注解创建一个控制器类（Controller）</p></li><li><p>创建一个方法来创建一个客户端连接，它返回一个 <strong>Flux</strong>，处理 GET 请求并产生（produces）文本/事件流 (<code>text/event-stream</code>)</p></li><li><p>创建一个新的 Flux对象且在方法中返回它</p></li></ol><h2 id="2、SSE使用场景">2、SSE使用场景</h2><p>在<code>web</code>端消息推送功能中，由于传统的<code>HTTP</code>协议是由客户端主动发起请求，服务端才会响应。基本的<code>ajax</code>轮询技术便是如此。而在<code>SSE</code>中，浏览发送一个请求给服务端，通过响应头中的<code>Content-Type:text/event-stream</code>等<strong>向客户端声名这是一个长连接，发送的是流数据，这样客户端就不会关闭连接，一直等待服务端发送数据</strong>。</p><p>如果服务器返回的数据中包含了<strong>事件标识符</strong>，<strong>浏览器会记录最后一次接收的事件的标识符。如果与服务器的连接中断，当浏览器再次进行连接时，会通过</strong><strong><strong><strong>头</strong></strong></strong><strong>来声明最后一次接收的事件的标识符。服务器端可以通过浏览器发送的事件标识符来确定从哪个事件来继续连接</strong></p><h2 id="3、SSE注意事项">3、SSE注意事项</h2><ul><li><p><strong>保证数据的完整性</strong>  ：客户端在每次接收到消息时，会把消息的<code>id</code> 字段作为内部属性 <code>Last-Event-ID</code>储存起来。<code>SSE</code><strong>默认支持断线重连机制</strong>，在连接断开时会 触发<code>EventSource</code>的<code>error</code>事件，同时自动重连。再次连接成功时 <code>EventSource</code>会把<code>Last-Event-ID</code>属性作为请求头发送给服务器，这样服务器就可以根据这个<code>Last-Event-ID</code>作出相应的处理。这里需要注意⚠️的是，<code>id</code>字段不是必须的，服务器有可能不会在消息中带上<code>id</code>字段，这样子客户端就不会存在<code>Last-Event-ID</code>这个属性。所以为了保证数据可靠，我们需要在每条消息上带上<code>id</code>字段。</p></li><li><p><code>SSE</code>不支持<code>IE</code>浏览器</p></li></ul><h2 id="4、实战">4、实战</h2><p>后端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sse"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SseEmitterServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SseEmitterServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前连接数,不准确，如果用户多次刷新会导致偏少</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用map对象，便于根据userId来获取对应的SseEmitter，或者放redis里面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, SseEmitter&gt; sseEmitterMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建用户连接并返回 SseEmitter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SseEmitter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/subscribe/&#123;userId&#125;"</span>, produces = &#123;MediaType.TEXT_EVENT_STREAM_VALUE&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SseEmitter <span class="title">subscribe</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> String userId) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置超时时间，0表示不过期。默认30秒，超过时间未完成会抛出异常：AsyncRequestTimeoutException</span></span><br><span class="line">        SseEmitter sseEmitter = <span class="keyword">new</span> SseEmitter(<span class="number">30_000L</span>);</span><br><span class="line">        <span class="comment">// 设置前端的重试时间为15s，如果不加这个发送一下，前端就不会显示连接成功</span></span><br><span class="line">        sseEmitter.send(<span class="string">"连接成功"</span>);</span><br><span class="line">        <span class="comment">// 注册回调</span></span><br><span class="line">        sseEmitter.onCompletion(completionCallBack(userId));</span><br><span class="line">        sseEmitter.onError(errorCallBack(userId));</span><br><span class="line">        sseEmitter.onTimeout(timeoutCallBack(userId));</span><br><span class="line">        sseEmitterMap.put(userId, sseEmitter);</span><br><span class="line">        <span class="comment">// 数量+1</span></span><br><span class="line">        count.getAndIncrement();</span><br><span class="line">        logger.info(<span class="string">"创建新的sse连接，当前用户：&#123;&#125;"</span>, userId);</span><br><span class="line">        <span class="keyword">return</span> sseEmitter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给指定用户发送信息  -- 单播</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String userId, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sseEmitterMap.containsKey(userId)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// sseEmitterMap.get(userId).send(message, MediaType.APPLICATION_JSON);</span></span><br><span class="line">                System.out.println(userId + <span class="string">"=="</span> + message);</span><br><span class="line">                sseEmitterMap.get(userId).send(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                logger.error(<span class="string">"用户[&#123;&#125;]推送异常:&#123;&#125;"</span>, userId, e.getMessage());</span><br><span class="line">                removeUser(userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向多人发布消息   -- 组播</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupId 开头标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">groupSendMessage</span><span class="params">(String groupId, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(sseEmitterMap)) &#123;</span><br><span class="line">            <span class="comment">/*Set&lt;String&gt; ids = sseEmitterMap.keySet().stream().filter(m -&gt; m.startsWith(groupId)).collect(Collectors.toSet());</span></span><br><span class="line"><span class="comment">            batchSendMessage(message, ids);*/</span></span><br><span class="line">            sseEmitterMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k.startsWith(groupId)) &#123;</span><br><span class="line">                        v.send(message, MediaType.APPLICATION_JSON);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    logger.error(<span class="string">"用户[&#123;&#125;]推送异常:&#123;&#125;"</span>, k, e.getMessage());</span><br><span class="line">                    removeUser(k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发所有人   -- 广播</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchSendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        sseEmitterMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                v.send(message, MediaType.APPLICATION_JSON);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                logger.error(<span class="string">"用户[&#123;&#125;]推送异常:&#123;&#125;"</span>, k, e.getMessage());</span><br><span class="line">                removeUser(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchSendMessage</span><span class="params">(String message, Set&lt;String&gt; ids)</span> </span>&#123;</span><br><span class="line">        ids.forEach(userId -&gt; sendMessage(userId, message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除用户连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/close/&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeUser</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> String userId) </span>&#123;</span><br><span class="line">        sseEmitterMap.remove(userId);</span><br><span class="line">        <span class="comment">// 数量-1</span></span><br><span class="line">        count.getAndDecrement();</span><br><span class="line">        logger.info(<span class="string">"移除用户：&#123;&#125;"</span>, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前连接信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(sseEmitterMap.keySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前连接数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getUserCount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Runnable <span class="title">completionCallBack</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">            logger.info(<span class="string">"结束连接：&#123;&#125;"</span>, userId);</span><br><span class="line"><span class="comment">//            removeUser(userId);</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Runnable <span class="title">timeoutCallBack</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">            logger.info(<span class="string">"连接超时：&#123;&#125;"</span>, userId);</span><br><span class="line">            removeUser(userId);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Consumer&lt;Throwable&gt; <span class="title">errorCallBack</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> throwable -&gt; &#123;</span><br><span class="line">            logger.info(<span class="string">"连接异常：&#123;&#125;"</span>, userId);</span><br><span class="line">            removeUser(userId);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SseEmitter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeSse()"</span>&gt;</span>关闭连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> source = <span class="literal">null</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 用时间戳模拟登录用户</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> userId = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.EventSource) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 建立连接</span></span></span><br><span class="line"><span class="actionscript">        source = <span class="keyword">new</span> EventSource(<span class="string">'http://localhost:8080/sse/subscribe/'</span> + userId);</span></span><br><span class="line"><span class="actionscript">    setMessageInnerHTML(<span class="string">"连接用户="</span> + userId);</span></span><br><span class="line">        /**</span><br><span class="line">         * 连接一旦建立，就会触发open事件</span><br><span class="line"><span class="actionscript">         * 另一种写法：source.onopen = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;&#125;</span></span><br><span class="line">         */</span><br><span class="line"><span class="actionscript">        source.addEventListener(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            setMessageInnerHTML(<span class="string">"建立连接。。。"</span>);</span></span><br><span class="line"><span class="actionscript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 客户端收到服务器发来的数据</span><br><span class="line"><span class="actionscript">         * 另一种写法：source.onmessage = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;&#125;</span></span><br><span class="line">         */</span><br><span class="line"><span class="actionscript">        source.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">            setMessageInnerHTML(e.data);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 如果发生通信错误（比如连接中断），就会触发error事件</span><br><span class="line">         * 或者：</span><br><span class="line"><span class="actionscript">         * 另一种写法：source.onerror = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;&#125;</span></span><br><span class="line">         */</span><br><span class="line"><span class="actionscript">        source.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line">            if (e.readyState === EventSource.CLOSED) &#123;</span><br><span class="line"><span class="actionscript">                setMessageInnerHTML(<span class="string">"连接关闭"</span>);</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.target.readyState === EventSource.CONNECTING) &#123; </span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'Connecting...'</span>);</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        setMessageInnerHTML(<span class="string">"你的浏览器不支持SSE"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 监听窗口关闭事件，主动去关闭sse连接，如果服务端设置永不过期，浏览器关闭后手动清理服务端数据</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        closeSse();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 关闭Sse连接</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">closeSse</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        source.close();</span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        httpRequest.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:8080/sse/close/'</span> + userId, <span class="literal">true</span>);</span></span><br><span class="line">        httpRequest.send();</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"close"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 将消息显示在网页上</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">setMessageInnerHTML</span><span class="params">(innerHTML)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>).innerHTML += innerHTML + <span class="string">'&lt;br/&gt;'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="https://zhuanlan.zhihu.com/p/444011262" target="_blank" rel="noopener" title="https://zhuanlan.zhihu.com/p/444011262">https://zhuanlan.zhihu.com/p/444011262</a></p><p><a href="https://blog.csdn.net/m0_50596083/article/details/124600126" target="_blank" rel="noopener" title="Server side event (SSE)实现消息推送功能">Server side event (SSE)实现消息推送功能</a></p><p><a href="https://www.cnblogs.com/yihuihui/p/12622729.html" target="_blank" rel="noopener" title="[SpringBoot WEB 系列]SSE 服务器发送事件详解">[SpringBoot WEB 系列]SSE 服务器发送事件详解</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、消息推送简介&lt;/h1&gt;
&lt;h2 id=&quot;1、消息推送介绍&quot;&gt;1、消息推送介绍&lt;/h2&gt;
&lt;p&gt;消息推送(&lt;code&gt;push&lt;/code&gt;)通常是指网站的运营工作等人员，通过某种工具对用户当前网页或移动设备APP进行的主动消息推送。推送的场景比较多，比如有人关注我的公众号，这时我就会收到一条推送消息，以此来吸引我点击打开应用，消息推送一般又分为&lt;code&gt;web端消息推送&lt;/code&gt;和&lt;code&gt;移动端消息推送&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;另外注意主流浏览器只支持&lt;strong&gt;6个连接&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器线上优化</title>
    <link href="https://www.shawn22.xyz/posts/fd4941ce.html"/>
    <id>https://www.shawn22.xyz/posts/fd4941ce.html</id>
    <published>2022-07-29T12:30:28.000Z</published>
    <updated>2022-07-29T12:37:35.190Z</updated>
    
    <content type="html"><![CDATA[<p># 一、服务器配置选择</p><h2 id="1、介绍">1、介绍</h2><p>服务器一般是由CPU、内存、磁盘和网卡组成，因此选择服务器配置就是选择CPU核数、内存大小、磁盘大小及类型、网络带宽。</p><p>但是，服务器配置的选择是很难标准化的，也就是说很难推断出&quot;一台需要达到1000TPS的后端服务器&quot;的配置应该是什么样的。因为<strong>软件的最终运行性能与软件的实现方式是紧密相关</strong>的，即使是同一个后端应用程序中的两个接口，由于具体功能的差别，性能也会有所差别。因此，服务器配置的选择应该基于具体的测试结果。<strong>一开始可以选用配置较低的服务器做调优和测试，并以该服务器的测试结果作为选择服务器的依据</strong>。</p><a id="more"></a><h2 id="2、配置选择举例">2、配置选择举例</h2><p>以一个<strong>订单业务为例</strong>，经过测试后，一台配置为4核 CPU 、16GB内存、10Mbps带宽、50GB机械磁盘的服务器的测试结果为：<strong>支持50并发量和300TPS吞吐量</strong>（增大并发量后会出现超时报错）。而在压力测试过程中， CPU 的使用率接近75%，内存使用率在 50％以下，带宽使用率在50％以下，除去日志以外无磁盘操作。</p><p>因此可以认为，一台配置为4核 CPU ( CPU 使用率需要在75％以下）、8GB内存（内存使用率可以接近100%)、 5Mbps 带宽（带宽使用率可以接近100%）的服务器，可以满足订单接口支持50并发量、300TPS吞吐量的压力。如果需要达到200并发数、2400TPS吞吐量的目标的话，则需要8台配置为4核 CPU 、8GB内存、5Mbps带宽的服务器，或者1台配置为32核 CPU 、64GB内存、40Mbps带宽的服务器。当然，最终的服务器配置还是需要通过测试来验证</p><blockquote><p>注意：在以上订单接口的例子中，后端服务器和数据库等服务器需要一起调试，避免后端服务器性能过剩，而数据库等服务器性能不足的情况发生。另外，以上选择服务器配置的方法不一定适用于所有场景，请斟酌参考。</p></blockquote><h1>二、服务器负载分析</h1><h2 id="1、介绍-v2">1、介绍</h2><p>在性能调优时，需要先对服务器负载进行分析，通常而言，我们主要分析CPU使用率、内存使用率、磁盘I/O，服务器负载和带宽使用情况</p><h2 id="2、CPU使用率">2、CPU使用率</h2><p><strong>CPU使用率反应的是CPU的忙碌情况</strong>。当CPU达到100%时，部分进程会进入等待状态，CPU暂时不会对其进行处理。在实际情况下，为了应对一下突发性的请求压力，<strong>服务器CPU使用率一般需要在75%以下</strong>。如果一台服务器的CPU使用率多次高于75%，这时候就考虑增加新的服务器。</p><h2 id="3、内存使用率">3、内存使用率</h2><p>内存使用率反应的是内存的使用情况。内存用于存放程序的代码及数据，一般分为物理内存和虚拟内存，其中物理内存指的是服务器的内存，而虚拟内存指的是硬盘的一块空间。当物理内存使用率达到100%时将会使用虚拟内存。需要注意的是，虚拟内存的读写速度远远低于物理内存，如果程序被放在了虚拟内存执行，那么程序的执行效率会变得很低。<strong>一般而言，服务器的物理内存应该保持在80%以下，虚拟内存使用率保持在0%</strong></p><h2 id="4、平均负载">4、平均负载</h2><p>平均负载指的是<strong>单位时间内平均的活跃进程数</strong>，是一个表示服务器负载的指标。一般情况下需要保证平均负载的值小于当前服务器的CPU核数。<strong>一般情况下服务器的平均负载需要小于当前服务器的CPU核数</strong>，为了应对突发状况，**服务器的平均负载应该在cpu核心数*75%**以下。监控里三个数分别代表1分钟，5分钟，15分钟的平均负载</p><p>以上几种可以使用htop明显的观察</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Centos安装</span></span><br><span class="line">yum install htop -y</span><br><span class="line"><span class="comment">#ubuntu安装</span></span><br><span class="line">sudo apt install htop</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">htop</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3b41b8236592471f973c89ab1054100b.png#pic_center" alt></p><h2 id="5、iostat查看磁盘I-O">5、iostat查看磁盘I/O</h2><p>磁盘I/O指的是磁盘的读写，在软件系统中，日志、文件操作、数据库操作都会造成磁盘读写压力，其中又以数据库操作为甚，在高并发情况下往往数据库会首先成为系统的瓶颈。磁盘监控可以使用iostat工具，可以很方便查看磁盘的使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install sysstat -y</span><br><span class="line">sudo apt install sysstat </span><br><span class="line"><span class="comment"># 查看磁盘总体读写情况， 1代表每1秒读取一次数据</span></span><br><span class="line">iostat -x 1</span><br></pre></td></tr></table></figure><p>输入<code>iostat</code>命令后，磁盘总体读写情况如上所示。磁盘负载主要关注2个指标：<code>%idle</code>，<code>%util</code></p><ul><li><p><code>%idle</code>:表示CPU<strong>除去等待磁盘I/O以外</strong>的空闲时间百分比，这个指标应该要保证在70%以上</p></li><li><p><code>%util</code>:该设备用于I/O操作的时间百分比，这个指标需要保证在70%以下，当到达100%时表示已经满负载。为了降低磁盘负载，可以采用性能更高的磁盘（OSD，PCIE）或者降低磁盘的操作频率（异步写、合并写）</p></li></ul><h2 id="6、网络使用情况">6、网络使用情况</h2><p>网络使用情况也是监控的重要指标。当带宽不足时会大大增加请求的响应时间。为了防止突发性并发压力，应该保证服务器的带宽使用率在80%以上。这里需要注意的是，物理网卡限制了服务器所能使用的最大宽带。查看网络使用情况推荐使用<code>nload</code>工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">yum install nload -y</span><br><span class="line">sudo apt install nload</span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line">nload</span><br></pre></td></tr></table></figure><p>输入<code>nload</code>命令后，网络使用情况分为流入网卡的数据与流出网卡的数据。流入网卡的对应下行带宽的网速，流出网卡的数据对应上行带宽的网速。如果 “当前网速” 持续接近 “最大网速” 时，代表带宽使用率已经接近100%。</p><p>指标说明：</p><ul><li><p>Curr：当前网速</p></li><li><p>Avg：平均网速</p></li><li><p>Min：最小网速</p></li><li><p>Max：最大网速</p></li><li><p>Ttl：总流量</p></li></ul><h1>三、服务器内核参数调优</h1><h2 id="1、介绍-v3">1、介绍</h2><p>光有强大的物理性能是不够的，还需要对内核参数进行调优，这样才能在高并发压力下充分体现服务器应有的性能。当然，并不是所有的服务器都需要做高并发性能调优，一般来说，只需要对要处理高并发请求的服务器进行内核参数调优即可，常见的包括：前端服务器，后端服务器，数据库服务器。</p><p>服务器常见的调优参数主要有两个：<strong>单个进程最大打开文件数 和 TCP相关设置</strong></p><h2 id="2、单个进程最大打开文件数">2、单个进程最大打开文件数</h2><p>修改单个文件最大打开文件数，只需要编辑<code>/etc/security/limits.conf</code>文件，在文件末尾加上以下四句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中* 代表所有用户，65536代表修改的值，重启后生效</span></span><br><span class="line">* soft  nofile  65535</span><br><span class="line">* hard  nofile  65535</span><br><span class="line">* soft  nproc  65535</span><br><span class="line">* hard  nproc  65535</span><br></pre></td></tr></table></figure><h2 id="3、TCP相关设置">3、TCP相关设置</h2><p>修改TCP相关参数，可以优化TCP高并发通信，编辑<code>/etc/sysctl.conf</code>文件，添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为防止洪水攻击，高并发系统需要将此项关闭</span></span><br><span class="line">net.ipv4.tcp_syncookies = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启TCP连接重用，允许处理TIME-WAIT状态的连接重新用于新的TCP连接</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启快速回收TCP连接中处于TIME-WAIT状态的连接</span></span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改超时时间（ s )，该值表示如果连接由本端关闭，则连接处于 FIN-WAIT-2状态的时间为 </span></span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 keepalive（长连接）启用的时候，TCP发送 keepalive 消息（探测包）的时间间隔（ s ),默认为2个小时</span></span><br><span class="line">net.ipv4.tcp_keepalive_time =1200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器对外连接的端口范围，影响该服务器与其他服务器的连接数</span></span><br><span class="line">net.ipv4.ip_local_port_range =102465535</span><br><span class="line"></span><br><span class="line"><span class="comment"># SYN队列的长度，可以容纳更多等待连接的网络连接数，默认为1024 </span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 65535</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保持 TIME_WAIT 状态连接的最大数量，如果超过此值，TIME_WAIT 将立刻被清除并打印警告信息，默认为180000</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets =5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</span></span><br><span class="line">net.core.netdev_max_backlog =65535</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP最大连接数</span></span><br><span class="line">net.core.somaxconn = 65535</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预留用于接收缓冲的内存默认值（字节） </span></span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预留用于接收缓冲的内存最大值（字节） </span></span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预留用于发送缓冲的内存默认值（字节） </span></span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预留用于发送缓冲的内存最大值（字节） </span></span><br><span class="line">net.core.wmem_maX = 16777216</span><br><span class="line"></span><br><span class="line"><span class="comment"># 避免时间戳异常</span></span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统中最多有多少个 TCP 套接字不被关联到任何一个用户文件句柄上，如果超过这个数字，连接将即刻被复位并打印警告信息，这个限制仅仅是为了防止简单的DoS 攻击</span></span><br><span class="line">net.ipv4.tcp_max_orphans =3276800</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://mp.weixin.qq.com/s/AyEb4fDsTvvfOG1Lgb1bzw" target="_blank" rel="noopener" title="https://mp.weixin.qq.com/s/AyEb4fDsTvvfOG1Lgb1bzw">https://mp.weixin.qq.com/s/AyEb4fDsTvvfOG1Lgb1bzw</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;# 一、服务器配置选择&lt;/p&gt;
&lt;h2 id=&quot;1、介绍&quot;&gt;1、介绍&lt;/h2&gt;
&lt;p&gt;服务器一般是由CPU、内存、磁盘和网卡组成，因此选择服务器配置就是选择CPU核数、内存大小、磁盘大小及类型、网络带宽。&lt;/p&gt;
&lt;p&gt;但是，服务器配置的选择是很难标准化的，也就是说很难推断出&amp;quot;一台需要达到1000TPS的后端服务器&amp;quot;的配置应该是什么样的。因为&lt;strong&gt;软件的最终运行性能与软件的实现方式是紧密相关&lt;/strong&gt;的，即使是同一个后端应用程序中的两个接口，由于具体功能的差别，性能也会有所差别。因此，服务器配置的选择应该基于具体的测试结果。&lt;strong&gt;一开始可以选用配置较低的服务器做调优和测试，并以该服务器的测试结果作为选择服务器的依据&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="linux基础" scheme="https://www.shawn22.xyz/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java打印文件</title>
    <link href="https://www.shawn22.xyz/posts/70045a4c.html"/>
    <id>https://www.shawn22.xyz/posts/70045a4c.html</id>
    <published>2022-07-11T12:05:54.000Z</published>
    <updated>2022-07-11T12:11:48.625Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><p>在我们的实际工作中，经常需要实现打印功能。但由于历史原因，Java 提供的打印功能一直都比较弱。实际上最初的 jdk 根本不支持打印，直到 jdk1.1 才引入了很轻量的打印支持。实际上，SUN 公司也一直致力于 Java 打印功能的完善，而 Java2 平台则终于有了一个健壮的打印模式的开端， jdk1.4 则提供了一套完整的&quot;Java 打印服务 API&quot; （Java Print Service API），它对已有的打印功能是积极的补充。</p><a id="more"></a><p>这里打印对象主要是图片和pdf文件两种常见形式，其他office文件可以通过相应程序转成pdf进行打印，比如<strong>aspose(收费，需要破解)/openoffice(需要先搭建本地服务)/Jacob(只有windows)</strong></p><h1>二、打印实践</h1><p>首先要保证电脑GUI打印能正常运行，否则连打印机都没有连接，那怎么打印？</p><h2 id="1、JPG图片打印">1、JPG图片打印</h2><p>打印JPG图片格式的文件，本次采用的Java原生的打印方式。jdk1.4之后对打印功能有了很好的支持。Java 的打印 API 主要存在于<code> java.awt.print</code> 包中。而 jdk1.4 新增的类则主要存在于 javax.print 包及其相应的子包 <code>javax.print.event </code>和 <code>javax.print.attribute</code> 中。其中** javax.print 包中主要包含打印服务的相关类，而 javax.print.event 则包含打印事件的相关定义，javax.print.attribute 则包括打印服务的可用属性列表等**。可以很好的解决打印JPG图片格式的需求。</p><ul><li><p>优点：jdk的原生支持的打印功能，可直接使用，支持设置各项打印参数。</p></li><li><p>缺点：局限性较大，只能打印一些图片和文本格式的文件。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> printerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> PrintException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JPGPrint</span><span class="params">(File file,String printerName)</span> <span class="keyword">throws</span> PrintException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="keyword">null</span>||printerName==<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"缺少打印文件或者缺少打印机参数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        InputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置打印格式，如果未确定类型，可选择autosense</span></span><br><span class="line">            <span class="comment">// 设置为jpg格式</span></span><br><span class="line">            DocFlavor flavor = DocFlavor.INPUT_STREAM.JPEG;</span><br><span class="line">            <span class="comment">// 设置打印参数</span></span><br><span class="line">            PrintRequestAttributeSet hashset = <span class="keyword">new</span> HashPrintRequestAttributeSet();</span><br><span class="line">            <span class="comment">//份数</span></span><br><span class="line">            hashset.add(<span class="keyword">new</span> Copies(<span class="number">1</span>));</span><br><span class="line">            <span class="comment">//装订</span></span><br><span class="line">            <span class="comment">//hashset.add(Finishings.STAPLE);</span></span><br><span class="line">            <span class="comment">//单双面</span></span><br><span class="line">            hashset.add(Sides.DUPLEX);</span><br><span class="line">            <span class="comment">// 颜色</span></span><br><span class="line">            hashset.add(Chromaticity.COLOR);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 定位打印服务</span></span><br><span class="line">            PrintService printService = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (printerName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//获得本台电脑连接的所有打印机</span></span><br><span class="line">                PrintService[] printServices = PrinterJob.lookupPrintServices();</span><br><span class="line">                <span class="keyword">if</span>(printServices == <span class="keyword">null</span> || printServices.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">"打印失败，未找到可用打印机，请检查。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//匹配指定打印机</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; printServices.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (printServices[i].getName().contains(printerName)) &#123;</span><br><span class="line">                        printService = printServices[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(printService==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.print(<span class="string">"打印失败，未找到名称为"</span> + printerName + <span class="string">"的打印机，请检查。"</span>);</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 构造待打印的文件流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            Doc doc = <span class="keyword">new</span> SimpleDoc(fis, flavor, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 创建打印作业</span></span><br><span class="line">            DocPrintJob job = printService.createPrintJob();</span><br><span class="line">            job.print(doc, hashset);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e1) &#123;</span><br><span class="line">            System.err.println(<span class="string">"文件未找到"</span>);</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭打印的文件流</span></span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JPGPrint(<span class="keyword">new</span> File(<span class="string">"D:\\share\\111.jpg"</span>),<span class="string">"MI"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、图片-pdf原生打印">2、图片/pdf原生打印</h2><p>这里pdf打印可能和硬件有关系，需要安装Adobe Reader，而且现在pdf也不使用此方法打印，可以用作借鉴</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> printerName 打印机名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 打印份数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">paperPrint</span><span class="params">(File file, String printerName, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建打印请求属性集</span></span><br><span class="line">        DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;</span><br><span class="line">        <span class="comment">// 设置打印格式</span></span><br><span class="line">        PrintRequestAttributeSet pras = <span class="keyword">new</span> HashPrintRequestAttributeSet();</span><br><span class="line">        <span class="comment">// 查找所有的打印服务</span></span><br><span class="line">        PrintService[] printServices = PrintServiceLookup.lookupPrintServices(flavor, pras);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印服务</span></span><br><span class="line">        PrintService printService = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (PrintService ps : printServices) &#123;</span><br><span class="line">            String psName = ps.toString();</span><br><span class="line">            <span class="comment">// 选用指定打印机，需要精确查询打印机就用equals，模糊查询用contains，这里使用了模糊查找</span></span><br><span class="line">            <span class="keyword">if</span> (psName.contains(printerName)) &#123;</span><br><span class="line">                printService=ps;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果找不到打印机</span></span><br><span class="line">        <span class="keyword">if</span>(printService == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"找不到打印机"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 文件不存在</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists() || !file.isFile()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"文件不存在"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String fileName = file.getName();</span><br><span class="line">        <span class="comment">// 获取图片后缀名，设置打印文件格式</span></span><br><span class="line">        String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">switch</span> (suffix) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"jpg"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"jpeg"</span>:</span><br><span class="line">                flavor = DocFlavor.INPUT_STREAM.JPEG;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"png"</span>:</span><br><span class="line">                flavor = DocFlavor.INPUT_STREAM.PNG;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"pdf"</span>:</span><br><span class="line">                flavor = DocFlavor.INPUT_STREAM.PDF;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"gif"</span>:</span><br><span class="line">                flavor = DocFlavor.INPUT_STREAM.GIF;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.err.println(<span class="string">"其他类别文件不支持打印"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置打印文件名</span></span><br><span class="line">        pras.add(<span class="keyword">new</span> JobName(fileName, Locale.CHINA));</span><br><span class="line">        <span class="comment">// 设置打印方向</span></span><br><span class="line">        pras.add(OrientationRequested.LANDSCAPE);</span><br><span class="line">        <span class="comment">// 设置打印区域</span></span><br><span class="line">        <span class="comment">//MediaPrintableArea mp = new MediaPrintableArea(0, 100, 230, 203, Size2DSyntax.MM);</span></span><br><span class="line">        <span class="comment">//pras.add(mp);</span></span><br><span class="line">        <span class="comment">// 设置彩打或者黑白打印</span></span><br><span class="line">        pras.add(Chromaticity.MONOCHROME);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            HashDocAttributeSet das = <span class="keyword">new</span> HashDocAttributeSet();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">                <span class="comment">// 使用打印服务生成打印任务</span></span><br><span class="line">                DocPrintJob job = printService.createPrintJob();</span><br><span class="line">                <span class="comment">// 获取需要打印的文档类doc</span></span><br><span class="line">                SimpleDoc doc = <span class="keyword">new</span> SimpleDoc(fis, flavor, das);</span><br><span class="line">                <span class="comment">// 监听打印任务</span></span><br><span class="line">                job.addPrintJobListener(<span class="keyword">new</span> PrintJobListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDataTransferCompleted</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"成功发送任务："</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobCompleted</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"打印任务完成！"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobFailed</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"打印任务失败："</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobCanceled</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"取消打印任务！"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobNoMoreEvents</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"没有更多方法提供打印机调用！"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJobRequiresAttention</span><span class="params">(PrintJobEvent pje)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"纸张已用完"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                job.print(doc, pras);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrintException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        paperPrint(<span class="keyword">new</span> File(<span class="string">"D:\\share\\111.png"</span>),<span class="string">"MI"</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//paperPrint(new File("D:\\share\\123.pdf"),"MI",1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、PDF文件格式打印实现">3、PDF文件格式打印实现</h2><p>这里使用Apache <strong>PDFbox</strong>来实现进行PDF文件格式的打印。Apache PDFbox是一个开源的、基于Java的、支持PDF文档生成的工具库，它可以用于创建新的PDF文档，修改现有的PDF文档，还可以从PDF文档中提取所需的内容。Apache PDFBox还包含了数个命令行工具。在此，我们只研究打印功能。</p><ul><li>优点：功能强大，开源软件，较完美的解决了PDF格式文件的一系列处理，使用方便</li></ul><p>首先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrinterJob <span class="title">getPrintServiceByName</span><span class="params">(String printerName)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        PrinterJob job = PrinterJob.getPrinterJob();</span><br><span class="line">        <span class="comment">// 遍历查询打印机名称</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (PrintService ps : PrinterJob.lookupPrintServices()) &#123;</span><br><span class="line">            String psName = ps.toString();</span><br><span class="line">            <span class="comment">// 选用指定打印机，需要精确查询打印机就用equals，模糊查询用contains，这里使用了模糊查找</span></span><br><span class="line">            <span class="keyword">if</span> (psName.contains(printerName)) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                job.setPrintService(ps);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            System.err.println(<span class="string">"未找到打印机"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"打印失败，未找到名称为"</span> + printerName + <span class="string">"的打印机，请检查你的打印机名字"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取打印纸的大小范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Paper <span class="title">getPaper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Paper paper = <span class="keyword">new</span> Paper();</span><br><span class="line">        <span class="comment">// 默认为A4纸张，对应像素宽和高分别为 595, 842</span></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">595</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">842</span>;</span><br><span class="line">        <span class="comment">// 设置边距，单位是像素，10mm边距，对应 28px</span></span><br><span class="line">        <span class="keyword">int</span> marginLeft = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> marginRight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> marginTop = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> marginBottom = <span class="number">0</span>;</span><br><span class="line">        paper.setSize(width, height);</span><br><span class="line">        <span class="comment">// 下面一行代码，解决了打印内容为空的问题</span></span><br><span class="line">        paper.setImageableArea(marginLeft, marginRight, width - (marginLeft + marginRight), height - (marginTop + marginBottom));</span><br><span class="line">        <span class="keyword">return</span> paper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置打印属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">paperPDFPrint</span><span class="params">(PDDocument document, PrinterJob job)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置纸张及缩放</span></span><br><span class="line">            PDFPrintable pdfPrintable = <span class="keyword">new</span> PDFPrintable(document, Scaling.ACTUAL_SIZE);</span><br><span class="line">            <span class="comment">// 设置多页打印</span></span><br><span class="line">            Book book = <span class="keyword">new</span> Book();</span><br><span class="line">            <span class="comment">// 设置打印格式</span></span><br><span class="line">            PageFormat pageFormat = <span class="keyword">new</span> PageFormat();</span><br><span class="line">            <span class="comment">//设置纸张</span></span><br><span class="line">            pageFormat.setPaper(getPaper());</span><br><span class="line">            <span class="comment">// 设置打印纸的方向,这是纵向</span></span><br><span class="line">            pageFormat.setOrientation(PageFormat.PORTRAIT);</span><br><span class="line">            <span class="comment">// 设置一些属性 是否缩放 打印张数等</span></span><br><span class="line">            book.append(pdfPrintable, pageFormat, document.getNumberOfPages());</span><br><span class="line">            job.setPageable(book);</span><br><span class="line">            <span class="comment">// 设置打印份数</span></span><br><span class="line">            job.setCopies(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//添加打印属性</span></span><br><span class="line">            HashPrintRequestAttributeSet pars = <span class="keyword">new</span> HashPrintRequestAttributeSet();</span><br><span class="line">            <span class="comment">// 设置单双页</span></span><br><span class="line">            pars.add(Sides.ONE_SIDED);</span><br><span class="line">            <span class="comment">// 设置彩打或者黑白打印</span></span><br><span class="line">            pars.add(Chromaticity.MONOCHROME);</span><br><span class="line">            <span class="comment">// 打印质量</span></span><br><span class="line">            pars.add(PrintQuality.NORMAL);</span><br><span class="line">            <span class="comment">// 这是直接打印</span></span><br><span class="line">            job.print(pars);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrinterException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"未正常连接打印机"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.err.println(<span class="string">"打印机打印异常"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印pdf文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> printerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PDDocument <span class="title">printPdf</span><span class="params">(String pdfPath, String printerName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(pdfPath);</span><br><span class="line">        PDDocument document = PDDocument.load(file);</span><br><span class="line">        PrinterJob job = getPrintServiceByName(printerName);</span><br><span class="line">        paperPDFPrint(document, job);</span><br><span class="line">        <span class="keyword">return</span> document;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          printPdf(<span class="string">"D:\\share\\123.pdf"</span>,<span class="string">"MI"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/vatxiongxiaohui/article/details/83985896" target="_blank" rel="noopener" title="https://blog.csdn.net/vatxiongxiaohui/article/details/83985896">https://blog.csdn.net/vatxiongxiaohui/article/details/83985896</a></p><p><a href="https://blog.csdn.net/weixin_45944086/article/details/108148264" target="_blank" rel="noopener" title="https://blog.csdn.net/weixin_45944086/article/details/108148264">https://blog.csdn.net/weixin_45944086/article/details/108148264</a></p><p><a href="https://blog.csdn.net/weixin_46031754/article/details/121670267" target="_blank" rel="noopener" title="https://blog.csdn.net/weixin_46031754/article/details/121670267">https://blog.csdn.net/weixin_46031754/article/details/121670267</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;p&gt;在我们的实际工作中，经常需要实现打印功能。但由于历史原因，Java 提供的打印功能一直都比较弱。实际上最初的 jdk 根本不支持打印，直到 jdk1.1 才引入了很轻量的打印支持。实际上，SUN 公司也一直致力于 Java 打印功能的完善，而 Java2 平台则终于有了一个健壮的打印模式的开端， jdk1.4 则提供了一套完整的&amp;quot;Java 打印服务 API&amp;quot; （Java Print Service API），它对已有的打印功能是积极的补充。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://www.shawn22.xyz/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合office转换与预览</title>
    <link href="https://www.shawn22.xyz/posts/a7f4aa25.html"/>
    <id>https://www.shawn22.xyz/posts/a7f4aa25.html</id>
    <published>2022-07-11T11:59:32.000Z</published>
    <updated>2022-07-11T12:12:30.160Z</updated>
    
    <content type="html"><![CDATA[<h1>一、介绍</h1><h2 id="1、简介">1、简介</h2><p>有时候我们需要在程序中使用到office的转换和预览功能，本文就针对这个需求记录了两种较为简单的office转换和功能：aspose和jodconverter。当然还有其他开源第三方(<a href="https://kkfileview.keking.cn/zh-cn/index.html" target="_blank" rel="noopener" title="kkfileview">kkfileview</a>)</p><a id="more"></a><h2 id="2、aspose简介">2、aspose简介</h2><p>Aspose.Total是Aspose公司旗下的最全的一套office文档管理方案，主要提供.net跟java两个开发语言的控件套包，通过它，可以有计划地操纵一些商业中最流行的<a href="https://baike.so.com/doc/146245-154529.html" target="_blank" rel="noopener" title="文件格式">文件格式</a>：Word, Excel, PowerPoint, Project,等office文档以及PDF文档。</p><p>但是不足的是aspose包是收费的，并且单独收费，网上有很多资料和程序可以参考下载，这里提供一个下载地址<a href="https://download.csdn.net/download/lemon_TT/85099711" target="_blank" rel="noopener" title="aspose相关jar包下载">aspose相关jar包下载</a>；</p><h2 id="3、jodconverter简介">3、jodconverter简介</h2><p>JODConverter是 Java OpenDocument 转换器，可在不同办公格式之间转换文档。它利用Apache OpenOffice或LibreOffice，它们为当今可用的 OpenDocument 和 Microsoft Office 格式提供可以说是最好的免费导入/导出过滤器。<strong>JODConverter自动执行 OpenOffice/LibreOffice 支持的所有转换</strong>。但要求在本机率先安装好相应的程序，目标是完成<strong>office文档-&gt;pdf</strong></p><p>但是其优点是免费，可以在win/linux上使用，这里更加推荐libreoffice</p><ul><li><p><a href="https://zh-cn.libreoffice.org/download/libreoffice/" target="_blank" rel="noopener" title="libreoffice官网下载地址">libreoffice官网下载地址</a></p></li><li><p><a href="https://www.openoffice.org/zh-cn/download/" target="_blank" rel="noopener" title="openoffice官网下载地址">openoffice官网下载地址</a></p></li></ul><h1>二、springboot整合aspose实战</h1><h2 id="1、前期依赖准备">1、前期依赖准备</h2><h3 id="1-1-介绍">1.1 介绍</h3><p>下载好相关依赖包后，就需要在springboot项目里引入相关jar包还有<code>License.xml</code>文件，<code>License.xml</code>文件就放在<strong>reseources</strong>目录下，这里有两种方式引入jar包，项目直接引入以及在maven添加本地包，其中<code>License.xml</code>文件内容如下，word,excel转pdf可共用一个license.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">License</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Products</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Product</span>&gt;</span>Aspose.Total for Java<span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Product</span>&gt;</span>Aspose.Excel for Java<span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Products</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditionType</span>&gt;</span>Enterprise<span class="tag">&lt;/<span class="name">EditionType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SubscriptionExpiry</span>&gt;</span>20991231<span class="tag">&lt;/<span class="name">SubscriptionExpiry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LicenseExpiry</span>&gt;</span>20991231<span class="tag">&lt;/<span class="name">LicenseExpiry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SerialNumber</span>&gt;</span>8bfe198c-7f0c-4ef8-8ff0-acc3237bf0d7<span class="tag">&lt;/<span class="name">SerialNumber</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Signature</span>&gt;</span>sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=<span class="tag">&lt;/<span class="name">Signature</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">License</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-项目直接引入jar包">1.2 项目直接引入jar包</h3><p>其他三个包同理<br><img src="https://img-blog.csdnimg.cn/1d7b401bc8a4493b9d3a0531c1579023.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加本地的jacob.jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aspose<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="comment">&lt;!--自定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspose-slides<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="comment">&lt;!--自定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>15.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  <span class="comment">&lt;!--自定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/lib/aspose.slides-15.9.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果把lib放在和pom.xml同级目录下--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;systemPath&gt;$&#123;pom.basedir&#125;/lib/aspose.slides-15.9.0.jar&lt;/systemPath&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后在pom.xml引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-maven添加本地包">1.3 maven添加本地包</h3><p>其他三个包同理，直接在命令行添加安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file  -Dfile=D:\share\aspose\jar\aspose-words-14.9.0-jdk16.jar -DgroupId=com.aspose -DartifactId=aspose-words -Dversion=14.9.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure><p>其次在pom.xml文件上直接使用即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aspose<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspose-words<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>14.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、office转pdf实现">2、office转pdf实现</h2><p>这里主要介绍word/ppt/excel转pdf以及其在线预览，另外还有pdf转png/jpg</p><blockquote><p>文件上传可以参考<a href="https://blog.csdn.net/lemon_TT/article/details/121688406" target="_blank" rel="noopener" title="SpringBoot文件上传与校验">SpringBoot文件上传与校验</a></p></blockquote><h3 id="2-1-word转pdf">2.1 word转pdf</h3><p>这里还可以控制生成水印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aspose.words.*;</span><br><span class="line"><span class="keyword">import</span> com.aspose.words.Shape;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * word转pdf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordToPdfUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  word转pdf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inPath word文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outPath 输出路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doc2pdf</span><span class="params">(String inPath, String outPath)</span> </span>&#123;</span><br><span class="line">        String str =<span class="string">"sdojfiosdjoifjiosiojsdf"</span>;</span><br><span class="line">        FileOutputStream os =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 新建一个空白pdf文档</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(outPath);</span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="comment">// Address是将要被转化的word文档</span></span><br><span class="line">            Document doc = <span class="keyword">new</span> Document(inPath);</span><br><span class="line">            <span class="comment">//添加水印</span></span><br><span class="line">            insertWatermarkText(doc,str);</span><br><span class="line">            <span class="comment">//保存pdf文件</span></span><br><span class="line">            <span class="comment">//全面支持DOC, DOCX, OOXML, RTF HTML, OpenDocument, PDF, EPUB, XPS, SWF 相互转换</span></span><br><span class="line">            doc.save(os, SaveFormat.PDF);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: PDF生成水印</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertWatermarkText</span><span class="params">(Document doc, String watermarkText)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!watermarkText.equals(<span class="string">""</span>)&amp;&amp;<span class="keyword">null</span>!=watermarkText)&#123;</span><br><span class="line">            Shape watermark = <span class="keyword">new</span> Shape(doc, ShapeType.TEXT_PLAIN_TEXT);</span><br><span class="line">            <span class="comment">//水印内容</span></span><br><span class="line">            watermark.getTextPath().setText(watermarkText);</span><br><span class="line">            <span class="comment">//水印字体</span></span><br><span class="line">            watermark.getTextPath().setFontFamily(<span class="string">"宋体"</span>);</span><br><span class="line">            <span class="comment">//水印宽度</span></span><br><span class="line">            watermark.setWidth(<span class="number">400</span>);</span><br><span class="line">            <span class="comment">//水印高度</span></span><br><span class="line">            watermark.setHeight(<span class="number">100</span>);</span><br><span class="line">            <span class="comment">//旋转水印</span></span><br><span class="line">            watermark.setRotation(-<span class="number">30</span>);</span><br><span class="line">            <span class="comment">//水印颜色</span></span><br><span class="line">            watermark.getFill().setColor(Color.lightGray);</span><br><span class="line">            watermark.setStrokeColor(Color.lightGray);</span><br><span class="line">            watermark.setRelativeHorizontalPosition(RelativeHorizontalPosition.PAGE);</span><br><span class="line">            watermark.setRelativeVerticalPosition(RelativeVerticalPosition.PAGE);</span><br><span class="line">            watermark.setWrapType(WrapType.NONE);</span><br><span class="line">            watermark.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">            watermark.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            Paragraph watermarkPara = <span class="keyword">new</span> Paragraph(doc);</span><br><span class="line">            watermarkPara.appendChild(watermark);</span><br><span class="line">            <span class="keyword">for</span> (Section sect : doc.getSections())</span><br><span class="line">            &#123;</span><br><span class="line">                insertWatermarkIntoHeader(watermarkPara, sect, HeaderFooterType.HEADER_PRIMARY);</span><br><span class="line">                insertWatermarkIntoHeader(watermarkPara, sect, HeaderFooterType.HEADER_FIRST);</span><br><span class="line">                insertWatermarkIntoHeader(watermarkPara, sect, HeaderFooterType.HEADER_EVEN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertWatermarkIntoHeader</span><span class="params">(Paragraph watermarkPara, Section sect, <span class="keyword">int</span> headerType)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HeaderFooter header = sect.getHeadersFooters().getByHeaderFooterType(headerType);</span><br><span class="line">        <span class="keyword">if</span> (header == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            header = <span class="keyword">new</span> HeaderFooter(sect.getDocument(), headerType);</span><br><span class="line">            sect.getHeadersFooters().add(header);</span><br><span class="line">        &#125;</span><br><span class="line">        header.appendChild(watermarkPara.deepClone(<span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        doc2pdf(<span class="string">"D:\\share\\1234.doc"</span>,<span class="string">"D:\\share\\1234.pdf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Excel转pdf">2.2 Excel转pdf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aspose.cells.License;</span><br><span class="line"><span class="keyword">import</span> com.aspose.cells.PdfSaveOptions;</span><br><span class="line"><span class="keyword">import</span> com.aspose.cells.SaveFormat;</span><br><span class="line"><span class="keyword">import</span> com.aspose.cells.Workbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel转pdf帮助类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelToPdfUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * excel转pdf方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Address 原路径excel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> putPath 转换pdf后的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">excel2pdf</span><span class="params">(String Address, String putPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 验证License 若不验证则转化出的pdf文档会有水印产生</span></span><br><span class="line">        <span class="keyword">if</span> (!getLicense()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOS=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 原始excel路径</span></span><br><span class="line">            Workbook wb = <span class="keyword">new</span> Workbook(Address);</span><br><span class="line"></span><br><span class="line">            fileOS = <span class="keyword">new</span> FileOutputStream(putPath);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] autoDrawSheets=&#123;<span class="number">3</span>&#125;;</span><br><span class="line">            <span class="comment">//当excel中对应的sheet页宽度太大时，在PDF中会拆断并分页。此处等比缩放。</span></span><br><span class="line">            autoDraw(wb,autoDrawSheets);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] showSheets=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="comment">//隐藏workbook中不需要的sheet页。</span></span><br><span class="line">            printSheetPage(wb,showSheets);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置一页，即长页</span></span><br><span class="line">            <span class="comment">// PdfSaveOptions pdfSaveOptions = new PdfSaveOptions();</span></span><br><span class="line">            <span class="comment">// pdfSaveOptions.setOnePagePerSheet(true);</span></span><br><span class="line">            <span class="comment">// wb.save(fileOS, pdfSaveOptions);</span></span><br><span class="line"></span><br><span class="line">            wb.save(fileOS,SaveFormat.PDF);</span><br><span class="line">            fileOS.flush();</span><br><span class="line">            fileOS.close();</span><br><span class="line">            System.out.println(<span class="string">"转换完毕"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            fileOS.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置打印的sheet 自动拉伸比例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wb</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 自动拉伸的页的sheet数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">autoDraw</span><span class="params">(Workbook wb,<span class="keyword">int</span>[] page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=page&amp;&amp;page.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; page.length; i++) &#123;</span><br><span class="line">                wb.getWorksheets().get(i).getHorizontalPageBreaks().clear();</span><br><span class="line">                wb.getWorksheets().get(i).getVerticalPageBreaks().clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 隐藏workbook中不需要的sheet页。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wb</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 显示页的sheet数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSheetPage</span><span class="params">(Workbook wb,<span class="keyword">int</span>[] page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">1</span>; i &lt; wb.getWorksheets().getCount(); i++)  &#123;</span><br><span class="line">            wb.getWorksheets().get(i).setVisible(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==page||page.length==<span class="number">0</span>)&#123;</span><br><span class="line">            wb.getWorksheets().get(<span class="number">0</span>).setVisible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; page.length; i++) &#123;</span><br><span class="line">                wb.getWorksheets().get(i).setVisible(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLicense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = ExcelToPdfUtils<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">                            .<span class="title">getClassLoader</span>()</span></span><br><span class="line">                            .getResourceAsStream("license.xml");</span><br><span class="line">            <span class="comment">// license.xml这个文件你放在静态文件资源目录下就行了</span></span><br><span class="line">            License aposeLic = <span class="keyword">new</span> License();</span><br><span class="line">            aposeLic.setLicense(is);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        excel2pdf(<span class="string">"D:\\share\\excel.xlsx"</span>,<span class="string">"D:\\share\\excel.pdf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-ppt转pdf">2.3 ppt转pdf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aspose.slides.License;</span><br><span class="line"><span class="keyword">import</span> com.aspose.slides.Presentation;</span><br><span class="line"><span class="keyword">import</span> com.aspose.slides.SaveFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ppt 转pdf  帮助类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PptToPdfUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取license</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLicense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// license路径</span></span><br><span class="line">            InputStream license = PptToPdfUtils.class.getClassLoader().getResourceAsStream("license.xml");</span><br><span class="line">            License aposeLic = <span class="keyword">new</span> License();</span><br><span class="line">            aposeLic.setLicense(license);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ppt 转pdf 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Address ppt原路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outPath pdf转出路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ppt2pdf</span><span class="params">(String Address,String outPath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 验证License</span></span><br><span class="line">        <span class="keyword">if</span> (!getLicense()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 输出pdf路径</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(outPath);</span><br><span class="line">            <span class="comment">//输入ppt路径</span></span><br><span class="line">            Presentation pres = <span class="keyword">new</span> Presentation(Address);</span><br><span class="line">            FileOutputStream fileOS = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            pres.save(fileOS, SaveFormat.Pdf);</span><br><span class="line">            fileOS.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ppt2pdf(<span class="string">"D:\\share\\ppt.pptx"</span>,<span class="string">"D:\\share\\ppt.pdf"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-pdf转图片">2.4 pdf转图片</h3><p>首先需要在pom.xml中引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工具类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.PDDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.PDPageTree;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.rendering.PDFRenderer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pdf 转图片 帮助类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PdftoImageUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  pdf 转图片方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address pdf原文件地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toImagepath  转换后图片存放地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>   图片地址集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">pdfToImageFile</span><span class="params">(String address, String toImagepath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PDDocument doc = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        InputStream stream = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// pdf路径</span></span><br><span class="line">            stream = <span class="keyword">new</span> FileInputStream(address);</span><br><span class="line">            <span class="comment">// 加载解析PDF文件</span></span><br><span class="line">            doc = PDDocument.load(stream);</span><br><span class="line">            PDFRenderer pdfRenderer = <span class="keyword">new</span> PDFRenderer(doc);</span><br><span class="line">            PDPageTree pages = doc.getPages();</span><br><span class="line">            <span class="keyword">int</span> pageCount = pages.getCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageCount; i++) &#123;</span><br><span class="line">                BufferedImage bim = pdfRenderer.renderImageWithDPI(i, <span class="number">200</span>);</span><br><span class="line">                os = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                ImageIO.write(bim, <span class="string">"jpg"</span>, os);</span><br><span class="line">                <span class="keyword">byte</span>[] dataList = os.toByteArray();</span><br><span class="line">                <span class="comment">//获取当前时间  保存图片规则</span></span><br><span class="line">                Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                <span class="comment">//可以方便地修改日期格式</span></span><br><span class="line">                SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>);</span><br><span class="line">                String format = dateFormat.format(date).replace(<span class="string">":"</span>,<span class="string">"/"</span>);</span><br><span class="line">                <span class="comment">//随机数</span></span><br><span class="line">                <span class="keyword">int</span> anInt = <span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>);</span><br><span class="line">                String imageAddress=toImagepath+<span class="string">"/"</span>+format+<span class="string">"/hello_"</span> + anInt + <span class="string">".jpg"</span>;</span><br><span class="line">                strings.add(imageAddress);</span><br><span class="line">                <span class="comment">// jpg文件转出路径</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(imageAddress);</span><br><span class="line">                <span class="keyword">if</span> (!file.getParentFile().exists()) &#123;</span><br><span class="line">                    <span class="comment">// 不存在则创建父目录及子文件</span></span><br><span class="line">                    file.getParentFile().mkdirs();</span><br><span class="line">                    file.createNewFile();</span><br><span class="line">                &#125;</span><br><span class="line">                out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                out.write(dataList);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> strings;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (doc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                doc.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        pdfToImageFile(<span class="string">"D:\\share\\菜单.pdf"</span>,<span class="string">"D:\\share\\菜单.jpg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-pdf添加水印">2.5 pdf添加水印</h3><p>首先添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itextpdf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext-asian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工具包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itextpdf.text.DocumentException;</span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.Element;</span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.Rectangle;</span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.pdf.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给pdf添加水印工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PdfWithWatermarkUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * pdf添加水印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputFile 需要添加水印的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile 添加完水印的文件存放路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cover 是否覆盖</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">addwaterMark</span><span class="params">(String inputFile, String outputFile,<span class="keyword">boolean</span> cover)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String waterMarkName = <span class="string">"测试水印"</span>;</span><br><span class="line">        <span class="comment">//水印字体透明度</span></span><br><span class="line">        <span class="keyword">float</span> opacity = <span class="number">0.3f</span>;</span><br><span class="line">        <span class="comment">//水印字体大小</span></span><br><span class="line">        <span class="keyword">int</span> fontsize = <span class="number">30</span>;</span><br><span class="line">        <span class="comment">//水印倾斜角度（0-360）</span></span><br><span class="line">        <span class="keyword">int</span> angle = <span class="number">30</span>;</span><br><span class="line">        <span class="comment">//数值越大每页竖向水印越少</span></span><br><span class="line">        <span class="keyword">int</span> heightdensity = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//数值越大每页横向水印越少</span></span><br><span class="line">        <span class="keyword">int</span> widthdensity = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!cover)&#123;</span><br><span class="line">            File file=<span class="keyword">new</span> File(outputFile);</span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        File file=<span class="keyword">new</span> File(inputFile);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PdfReader reader = <span class="keyword">null</span>;</span><br><span class="line">        PdfStamper stamper = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> interval = -<span class="number">5</span>;</span><br><span class="line">            reader = <span class="keyword">new</span> PdfReader(inputFile);</span><br><span class="line">            stamper = <span class="keyword">new</span> PdfStamper(reader, <span class="keyword">new</span> FileOutputStream(outputFile));</span><br><span class="line">            BaseFont base = BaseFont.createFont(<span class="string">"STSong-Light"</span>, <span class="string">"UniGB-UCS2-H"</span>, BaseFont.EMBEDDED);</span><br><span class="line">            Rectangle pageRect = <span class="keyword">null</span>;</span><br><span class="line">            PdfGState gs = <span class="keyword">new</span> PdfGState();</span><br><span class="line">            <span class="comment">//这里是透明度设置</span></span><br><span class="line">            gs.setFillOpacity(opacity);</span><br><span class="line">            <span class="comment">//这里是条纹不透明度</span></span><br><span class="line">            gs.setStrokeOpacity(<span class="number">0.2f</span>);</span><br><span class="line">            <span class="keyword">int</span> total = reader.getNumberOfPages() + <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Pdf页数："</span> + reader.getNumberOfPages());</span><br><span class="line">            JLabel label = <span class="keyword">new</span> JLabel();</span><br><span class="line">            FontMetrics metrics;</span><br><span class="line">            <span class="keyword">int</span> textH = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> textW = <span class="number">0</span>;</span><br><span class="line">            label.setText(waterMarkName);</span><br><span class="line">            metrics = label.getFontMetrics(label.getFont());</span><br><span class="line">            <span class="comment">//字符串的高,   只和字体有关</span></span><br><span class="line">            textH = metrics.getHeight();</span><br><span class="line">            <span class="comment">//字符串的宽</span></span><br><span class="line">            textW = metrics.stringWidth(label.getText());</span><br><span class="line">            PdfContentByte under;</span><br><span class="line">            <span class="comment">//这个循环是确保每一张PDF都加上水印</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; total; i++) &#123;</span><br><span class="line">                pageRect = reader.getPageSizeWithRotation(i);</span><br><span class="line">                under = stamper.getOverContent(i);  <span class="comment">//在内容上方添加水印</span></span><br><span class="line">                <span class="comment">//under = stamper.getUnderContent(i);  //在内容下方添加水印</span></span><br><span class="line">                under.saveState();</span><br><span class="line">                under.setGState(gs);</span><br><span class="line">                under.beginText();</span><br><span class="line">                <span class="comment">//under.setColorFill(BaseColor.PINK);  //添加文字颜色  不能动态改变 放弃使用</span></span><br><span class="line">                under.setFontAndSize(base, fontsize); <span class="comment">//这里是水印字体大小</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> height = textH; height &lt; pageRect.getHeight() * <span class="number">2</span>; height = height + textH * heightdensity) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> width = textW; width &lt; pageRect.getWidth() * <span class="number">1.5</span> + textW; width = width + textW * widthdensity) &#123;</span><br><span class="line">                        <span class="comment">// rotation:倾斜角度</span></span><br><span class="line">                        under.showTextAligned(Element.ALIGN_LEFT, waterMarkName, width - textW, height - textH, angle);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//添加水印文字</span></span><br><span class="line">                under.endText();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"添加水印成功！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加水印失败！错误信息为: "</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加水印失败！错误信息为: "</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">if</span> (stamper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stamper.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、office在线预览-简单版">3、office在线预览(简单版)</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">upload:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\\share\\</span></span><br></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 查看对应的.pdf文件是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2021/3/12</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkFileExist</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="comment">// 文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;<span class="comment">//文件是否存在</span></span><br><span class="line">            file.delete();<span class="comment">//删除文件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> WXK</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 返回预览pdf流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2021/3/11</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">previewFile</span><span class="params">(String filePath, HttpServletResponse res)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 发送给客户端的数据</span></span><br><span class="line">        OutputStream outputStream = res.getOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 读取filename</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(filePath));</span><br><span class="line">            <span class="keyword">int</span> i = bis.read(buff);</span><br><span class="line">            <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buff, <span class="number">0</span>, buff.length);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">                i = bis.read(buff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller层，启动后访问接口即可成功在线预览，还可以直接下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.mx80.utils.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;upload.path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String path;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"preview"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">previewFile</span><span class="params">(String fileName, HttpServletResponse response)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//response.setContentType("text/html;charset=UTF-8");</span></span><br><span class="line">            String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"PDF"</span>.equalsIgnoreCase(suffix))&#123;</span><br><span class="line">                String newFileName = <span class="keyword">new</span> String(fileName.getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1);</span><br><span class="line">                <span class="comment">// 设置扩展头，当Content-Type 的类型为要下载的类型时 , 这个信息头会告诉浏览器这个文件的名字和类型。</span></span><br><span class="line">                <span class="comment">//response.setHeader("Content-Disposition", "attachment;filename=" + newFileName);</span></span><br><span class="line">                <span class="keyword">if</span>(FileUtil.checkFileExist(path + fileName))&#123;</span><br><span class="line">                    FileUtil.previewFile(path + fileName,response);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String oldPath = path + fileName;</span><br><span class="line">            String filePath = path + fileName.substring(<span class="number">0</span>,fileName.lastIndexOf(<span class="string">"."</span>)) + <span class="string">".pdf"</span>;</span><br><span class="line">            <span class="keyword">if</span>( FileUtil.checkFileExist(filePath))&#123;</span><br><span class="line">                FileUtil.previewFile(filePath,response);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"XLSX"</span>.equalsIgnoreCase(suffix) || <span class="string">"XLS"</span>.equalsIgnoreCase(suffix))&#123;</span><br><span class="line">                    ExcelToPdfUtils.excel2pdf(oldPath,filePath);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"PPT"</span>.equalsIgnoreCase(suffix)||<span class="string">"pptx"</span>.equalsIgnoreCase(suffix))&#123;</span><br><span class="line">                    PptToPdfUtils.ppt2pdf(oldPath,filePath);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//DOC, DOCX, OOXML, RTF HTML, OpenDocument, PDF, EPUB, XPS, SWF</span></span><br><span class="line">                    WordToPdfUtils.doc2pdf(oldPath,filePath);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(FileUtil.checkFileExist(filePath))&#123;</span><br><span class="line">                    FileUtil.previewFile(filePath,response);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 转换完毕删除文件</span></span><br><span class="line">                <span class="comment">//FileUtil.deleteFile(filePath);</span></span><br><span class="line">                System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"previewPdf"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">previewPdf</span><span class="params">(String fileName, HttpServletResponse response)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//response.setContentType("text/html;charset=UTF-8");</span></span><br><span class="line">            String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"PDF"</span>.equalsIgnoreCase(suffix))&#123;</span><br><span class="line">                String realFileName = fileName.substring(<span class="number">0</span>,fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">                String inPath = path + fileName;</span><br><span class="line">                String outPath = path + realFileName + <span class="string">"(水印).pdf"</span>;</span><br><span class="line">                String newFileName = <span class="keyword">new</span> String(fileName.getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1);</span><br><span class="line">                <span class="comment">// 设置扩展头，当Content-Type 的类型为要下载的类型时 , 这个信息头会告诉浏览器这个文件的名字和类型。</span></span><br><span class="line">                <span class="comment">//response.setHeader("Content-Disposition", "attachment;filename=" + newFileName);</span></span><br><span class="line">                PdfWithWatermarkUtils.addwaterMark(inPath,outPath,<span class="keyword">true</span>);</span><br><span class="line">                FileUtil.previewFile(outPath,response);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 转换完毕删除文件</span></span><br><span class="line">                <span class="comment">//FileUtil.deleteFile(outPath);</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">"文件不是pdf"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、SpringBoot集成jodconverter实战</h1><h2 id="1、前期依赖准备-v2">1、前期依赖准备</h2><p>首先下载好OpenOffice或LibreOffice，并在<code>pom.xml</code>引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--转换工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jodconverter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jodconverter-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jodconverter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jodconverter-local<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jodconverter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jodconverter-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其次在<code>application.yml</code>设置相关参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># word 转 pdf 相关配置</span></span><br><span class="line"><span class="attr">jodconverter:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="comment"># 嵌入式调用</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># libreOffice根目录</span></span><br><span class="line">    <span class="comment">#    office-home: /opt/libreoffice7.2</span></span><br><span class="line">    <span class="attr">officeHome:</span> <span class="string">C:\Program</span> <span class="string">Files\LibreOffice</span></span><br><span class="line">    <span class="comment"># 任务执行的超时时间 默认120000 毫秒</span></span><br><span class="line">    <span class="attr">taskExecutionTimeout:</span> <span class="number">12000</span></span><br><span class="line">    <span class="comment"># 任务队列的超时时间 默认30000 毫秒</span></span><br><span class="line">    <span class="attr">taskQueueTimeout:</span> <span class="number">120000</span></span><br><span class="line">    <span class="comment"># 端口（线程）</span></span><br><span class="line">    <span class="attr">portNumbers:</span> <span class="string">[</span> <span class="number">2002</span><span class="string">,</span> <span class="number">2003</span><span class="string">,</span> <span class="number">2004</span><span class="string">,</span> <span class="number">2005</span> <span class="string">]</span></span><br><span class="line">    <span class="comment"># 一个进程的超时时间 默认120000 毫秒</span></span><br><span class="line">    <span class="attr">processTimeout:</span> <span class="number">120000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 文件上传限制大小</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">10MB</span></span><br></pre></td></tr></table></figure><h2 id="2、office转pdf实战">2、office转pdf实战</h2><p>这里是我的controller类，可以简单参考，这里只做了文件上传和下载，预览和下载其实一个道理，可以参考上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jodController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JodService jodService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/upload"</span>, consumes = <span class="string">"multipart/*"</span>, headers = <span class="string">"content-type=multipart/form-data"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">uploadPolicy</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过request拿到上传文件的用户的用户名</span></span><br><span class="line">        HttpServletRequest request =</span><br><span class="line">                ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">        Principal userPrincipal = request.getUserPrincipal();</span><br><span class="line">        String s = jodService.uploadPolicy(file);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/codpreview"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;InputStreamSource&gt; <span class="title">previewPolicy</span><span class="params">(HttpServletResponse response, @RequestParam(<span class="string">"file"</span>)</span> String filePreName) <span class="keyword">throws</span>  UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file = jodService.downloadFile(filePreName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">        String fileName = filePreName+ <span class="string">".pdf"</span>;</span><br><span class="line">        <span class="comment">// 如果文件存在</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            FileSystemResource resource = <span class="keyword">new</span> FileSystemResource(file);</span><br><span class="line">            HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">            headers.add(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + <span class="keyword">new</span> String(fileName.getBytes(StandardCharsets.UTF_8), <span class="string">"ISO8859-1"</span>));</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                    <span class="comment">// 指定文件的contentType</span></span><br><span class="line">                    .contentType(MediaType.APPLICATION_OCTET_STREAM)</span><br><span class="line">                    .headers(headers)</span><br><span class="line">                    .body(resource);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果文件不存在，返回404响应</span></span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的service类，包含下载和文件转换，这里我把文件都保存在了<code>target/classes/static/docs</code>下面了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JodService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FILE_SUFFIX = <span class="string">".doc.docx.pdf.xlsx"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FILE_PATH = <span class="string">"/static/docs/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 传入的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> policy_id 文件主键，如果为小于0，插入失败；如果大于0，插入成功。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadPolicy</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//文件为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件为空"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">assert</span> fileName != <span class="keyword">null</span>;</span><br><span class="line">        String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">'.'</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (!FILE_SUFFIX.contains(suffix)) &#123;</span><br><span class="line">            <span class="comment">//文件未命名</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件未命名"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String filePrefix = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd-HHmmssS"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">            String newFileName = filePrefix + <span class="string">"."</span> + suffix;</span><br><span class="line">            File path = <span class="keyword">new</span> File(ResourceUtils.getURL(<span class="string">"classpath:"</span>).getPath());</span><br><span class="line">            <span class="keyword">if</span> (!path.exists()) &#123;</span><br><span class="line">                path = <span class="keyword">new</span> File(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            File upload = <span class="keyword">new</span> File(path.getAbsolutePath(), FILE_PATH + newFileName);</span><br><span class="line">            <span class="keyword">if</span> (!upload.exists()) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> b = upload.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            file.transferTo(upload);</span><br><span class="line">            <span class="keyword">if</span> (!suffix.contains(<span class="string">"pdf"</span>)) &#123;</span><br><span class="line">                <span class="comment">// 异步转换</span></span><br><span class="line">                <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                    convertPdf(filePrefix, suffix);</span><br><span class="line">                &#125;).start();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> filePrefix;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 保存文件失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"文件保存失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    DocumentConverter converter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 需要在启动类上加<span class="doctag">@EnableAsync</span>才可以生效</span></span><br><span class="line"><span class="comment">    * 文件转换类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertPdf</span><span class="params">(String filePrefix, String fileType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File rootPath = <span class="keyword">new</span> File(ResourceUtils.getURL(<span class="string">"classpath:"</span>).getPath());</span><br><span class="line">            File sourceFile = <span class="keyword">new</span> File(rootPath.getAbsolutePath(), FILE_PATH + filePrefix + <span class="string">"."</span> + fileType);</span><br><span class="line">            String sourceFilePath = sourceFile.getAbsolutePath();</span><br><span class="line">            File newFile = <span class="keyword">new</span> File(sourceFilePath.substring(<span class="number">0</span>, sourceFilePath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">".pdf"</span>);</span><br><span class="line">            <span class="comment">// convert方法指定源文件对象/输入流</span></span><br><span class="line">            <span class="comment">// to方法指定目标文件对象/输出流(源文件可以不存在，如果不存在则会创建)</span></span><br><span class="line">            <span class="comment">// todo: 目标文件的后缀要和即将转换的文件类型一致，否则会造成文件损坏</span></span><br><span class="line">            <span class="comment">// todo: as方法接受的时DocumentFormat对象，我们可以使用默认注册完的DocumentFormat对象，</span></span><br><span class="line">            <span class="comment">// execute方法是执行转换的方法，方法没有返回值，是同步执行</span></span><br><span class="line">            converter.convert(sourceFile).to(newFile).as(DefaultDocumentFormatRegistry.PDF).execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OfficeException | FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载pdf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePreName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">downloadFile</span><span class="params">(String filePreName)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(</span><br><span class="line">                <span class="keyword">new</span> File(ResourceUtils.getURL(<span class="string">"classpath:"</span>).getPath()).getAbsolutePath(),</span><br><span class="line">                FILE_PATH + filePreName + <span class="string">".pdf"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p><p><a href="https://blog.csdn.net/WXk_wer/article/details/116977449" target="_blank" rel="noopener" title="https://blog.csdn.net/WXk_wer/article/details/116977449">https://blog.csdn.net/WXk_wer/article/details/116977449</a></p><p><a href="https://blog.csdn.net/weixin_46031754/article/details/121670267" target="_blank" rel="noopener" title="https://blog.csdn.net/weixin_46031754/article/details/121670267">https://blog.csdn.net/weixin_46031754/article/details/121670267</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;有时候我们需要在程序中使用到office的转换和预览功能，本文就针对这个需求记录了两种较为简单的office转换和功能：aspose和jodconverter。当然还有其他开源第三方(&lt;a href=&quot;https://kkfileview.keking.cn/zh-cn/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;kkfileview&quot;&gt;kkfileview&lt;/a&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot接口加密与解密</title>
    <link href="https://www.shawn22.xyz/posts/1f359a4a.html"/>
    <id>https://www.shawn22.xyz/posts/1f359a4a.html</id>
    <published>2022-07-11T11:58:59.000Z</published>
    <updated>2022-07-11T12:11:59.670Z</updated>
    
    <content type="html"><![CDATA[<h1>一、对称/非对称加密</h1><h2 id="1、简介">1、简介</h2><p><strong>对称加密</strong>只有一个秘钥，加密和解密都是用同一个秘钥，所以叫做对称加密。</p><p><strong>非对称加密</strong>有两个秘钥，一个是公钥，一个是私钥。非对称的特点在于，公钥加密的私钥可以解密，但私钥加密的，公钥解不出来，只能验证是否由私钥进行加密</p><p>目前常见的加密方式是有两种，一种是<strong>对称加密(AES为代表）</strong>，一种是<strong>非对称加密（RSA为代表）</strong></p><a id="more"></a><h2 id="2、RSA和AES介绍">2、RSA和AES介绍</h2><h3 id="2-1-RSA">2.1 RSA</h3><p><strong>特点</strong>：只需交换公钥；公/秘钥机制，公钥加密，私钥解密(或者私钥加密，公钥解密)；公钥负责加密，私钥负责解密；私钥负责签名，公钥负责验证</p><p><strong>缺点</strong>：加解密速度慢，特别是解密</p><h3 id="2-2-AES">2.2 AES</h3><p><strong>特点</strong>：加解密用同一秘钥</p><p><strong>优点</strong>：速度快，效率高；</p><p><strong>缺点</strong>：秘钥交换问题</p><h2 id="3、RSA-AES组合">3、RSA/AES组合</h2><p><strong>对称加密（AES）的优势在于加密较快，<strong>但</strong>劣势</strong>在于秘钥一旦给出去就<strong>不安全</strong>了。<strong>非对称加密（RSA）的优势在于安全</strong>，就算提供公钥出去，别人也解密不了数据，但<strong>劣势是加密速度较慢</strong></p><p>实际使用的过程中常常将<strong>两者组合使用（AES+RSA）</strong>，这样可以安全的传输AES秘钥，避免了RSA加密的慢速度</p><ul><li><p>生成一个随机AES秘钥字符串</p></li><li><p>使用RSA公钥加密AES秘钥，然后再用AES秘钥加密真正的内容</p></li><li><p>把skey=加密的AES秘钥，body=AES秘钥加密的内容传过去</p></li><li><p>对面使用RSA私钥解密AES秘钥，然后用AES秘钥解密出内容</p></li></ul><h2 id="4、Base64编码的作用">4、Base64编码的作用</h2><p><strong>加密后的数据可能不具备可读性</strong>，因此我们一般需要对加密后的数据再使用 Base64 算法进行编码，<strong>获取可读字符串</strong>。换言之，AES 或者RSA加密方法的返回值是一个 Base64 编码之后的字符串，AES或者RSA 解密方法的参数也是一个 Base64 编码之后的字符串，先对该字符串进行解码，然后再解密。</p><h1>二、Java实现加解密/加验签</h1><h2 id="1、全局Config">1、全局Config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AES_ALGORITHM = <span class="string">"AES/CBC/PKCS5Padding"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RSA_ALGORITHM = <span class="string">"RSA/ECB/OAEPWithSHA-256AndMGF1Padding"</span>;</span><br><span class="line">    <span class="comment">//必须是PKCS8格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_PRIVATE_KEY = <span class="string">"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAO/8ucCgOTJ7DCPC"</span> +</span><br><span class="line">            <span class="string">"rCCL1VKDnUX61QnxwbAvpGp1/lletEIcjUouM7F0VvMHzViNLvpw7N7NBHPa+5gO"</span> +</span><br><span class="line">            <span class="string">"js68t9hKMUh+a6RTE34SWIqSDRPCzDKVWugsFb04o3vRl3rZ1z6B+QDdW7xwOhEr"</span> +</span><br><span class="line">            <span class="string">"PPoEqmjjIOjQPcU6xs0SPzSimOa1AgMBAAECgYAO5m0OBaSnerZNPhf7yVLMVbmd"</span> +</span><br><span class="line">            <span class="string">"D67MeEMjUkHuDjdlixi8BhPLqESzXtrLKg/Y0KM7D2nVh3sgSldWoIjDUzpCx8Z2"</span> +</span><br><span class="line">            <span class="string">"yHLU1K2wakMdBgEF3xeJPxxZRpP+earl0SyLTA4hMxl48uAjn/mkPgzoMgQkqyQz"</span> +</span><br><span class="line">            <span class="string">"5HOWjjsCLJFyEvqmoQJBAP5cBk0KXpHnCMgOupbi/pXDyaF1o+dCE97GaEdrV/0P"</span> +</span><br><span class="line">            <span class="string">"uwDfYDYfY3wzd1QM7C4b4MmE+SNVpC0W9PyaMONJlN0CQQDxiPiGdwX9actMNJea"</span> +</span><br><span class="line">            <span class="string">"JZ+k3BjCN+mM6Px7j/mtYcXWNZkyCXSXUBI62drZ0htenrh2qwichMlMgNJClvG6"</span> +</span><br><span class="line">            <span class="string">"Gu+5AkEA30R7q2gstrkrNh/nnMZHXcJr3DPc2QNhWayin/4TT+hc51krpJZMxxqN"</span> +</span><br><span class="line">            <span class="string">"5dMqBRcnavwzi9aCs6lxBcF6pCdUaQJANhd7uPls4PzRZ6abkQz9/LjB3rUQ29rN"</span> +</span><br><span class="line">            <span class="string">"uIpc2yR7XuawAVG2x7BJ9N4XMhLoyD75hrH1AsCGKFjtPbZ6OjiQGQJAF2DbIodC"</span> +</span><br><span class="line">            <span class="string">"uYb6eMZ8ux1Ab0wBEWWc5+iGgEVBNh22uZ/klE1/C0+KKzZhqgzaA/vPapq6dhuJ"</span> +</span><br><span class="line">            <span class="string">"sNXlJia10PwYrQ=="</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_PUBLIC_KEY = <span class="string">"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDv/LnAoDkyewwjwqwgi9VSg51F"</span> +</span><br><span class="line">            <span class="string">"+tUJ8cGwL6Rqdf5ZXrRCHI1KLjOxdFbzB81YjS76cOzezQRz2vuYDo7OvLfYSjFI"</span> +</span><br><span class="line">            <span class="string">"fmukUxN+EliKkg0TwswylVroLBW9OKN70Zd62dc+gfkA3Vu8cDoRKzz6BKpo4yDo"</span> +</span><br><span class="line">            <span class="string">"0D3FOsbNEj80opjmtQIDAQAB"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_PRIVATE_KEY = <span class="string">"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAPGkxlAJPKR3BRxT"</span> +</span><br><span class="line">            <span class="string">"PIeB3pDv117j8XbpuEik5UIOlY3GUtAV1sad5NNDUAnP/DB80yAQ8ycm9Xdkutuo"</span> +</span><br><span class="line">            <span class="string">"f25Xlb7w0bRQNpfJlijx9eF8PsB6t63r8KAfWJlqbNHgN8AMK9P5XzVyN4YiEnUl"</span> +</span><br><span class="line">            <span class="string">"Jh/EYiwLiYzflNnmnnfRrI4nUo8fAgMBAAECgYEAvwTxm81heeV4Tcbi33/jUBG4"</span> +</span><br><span class="line">            <span class="string">"4BMzCzyA6DQp4wkiYju3tTS+Xq3seLEKcWdPxYi3YO7lODsM6j/fksrlSXXFMe1i"</span> +</span><br><span class="line">            <span class="string">"ZAF3FNuDVZPz2zdFYS8vh6kdlDHMJAUnU/POMMWJ880MQDtkwTuzH8Tao8OKcAP4"</span> +</span><br><span class="line">            <span class="string">"kc0QuG00wOrmuE+5gZECQQD9bqZkJsN+tj3+pxs57azy6B6gOqgm54/ujB+u63XU"</span> +</span><br><span class="line">            <span class="string">"rO9Sf57asgF4OfUFltaVhjlUMSrWcgp6f4HSy7hBSKJpAkEA9BeML5iDIHOgTIws"</span> +</span><br><span class="line">            <span class="string">"+ID55ELbzO7A/YtcYnUU09mkKCdonMXbXke+EhLApf5vX9ZmreoEfJCdsTnMEcQi"</span> +</span><br><span class="line">            <span class="string">"fkjkRwJBALpf2TXl2/cfhs/zjG45f+rTEVK8UFTsDklb+yDkQC87TnTZLbWfGr2T"</span> +</span><br><span class="line">            <span class="string">"wcFugDhOEXL9BYfXLiWQB6VB9Crug6ECQGEmTiFTbj0oSBCvaeauTsdO5PS3whAn"</span> +</span><br><span class="line">            <span class="string">"u2lkeBmpcfCZXsWm6hyoKTpARHTMw789Mjjd/1Mkq96xxkr76U6h7FkCQHRc2elg"</span> +</span><br><span class="line">            <span class="string">"Dh84wqHIptwa+moosVvd7aSzktuOB4CQRO10qKkSHVFuI+sl47A4KGzH/nX9ydUm"</span> +</span><br><span class="line">            <span class="string">"tpsTnQAlXwBczd4="</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_PUBLIC_KEY = <span class="string">"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDxpMZQCTykdwUcUzyHgd6Q79de"</span> +</span><br><span class="line">            <span class="string">"4/F26bhIpOVCDpWNxlLQFdbGneTTQ1AJz/wwfNMgEPMnJvV3ZLrbqH9uV5W+8NG0"</span> +</span><br><span class="line">            <span class="string">"UDaXyZYo8fXhfD7Aeret6/CgH1iZamzR4DfADCvT+V81cjeGIhJ1JSYfxGIsC4mM"</span> +</span><br><span class="line">            <span class="string">"35TZ5p530ayOJ1KPHwIDAQAB"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、RSA非对称加密">2、RSA非对称加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.OAEPParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.PSource;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.MGF1ParameterSpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Base64Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSACipher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥字符串（经过base64编码）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title">getPublicKey</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 按照X.509标准对其进行编码的密钥</span></span><br><span class="line">        X509EncodedKeySpec keySpec = <span class="keyword">new</span> X509EncodedKeySpec(Base64Utils.decode(key.getBytes()));</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="comment">// 生成公钥</span></span><br><span class="line">        PublicKey publicKey = keyFactory.generatePublic(keySpec);</span><br><span class="line">        <span class="keyword">return</span> publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥字符串（经过base64编码）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title">getPrivateKey</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 按照PKCS8格式标准对其进行编码的密钥，首先要将key进行base64解码</span></span><br><span class="line">        PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(Base64Utils.decode(key.getBytes()));</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="comment">// 生成私钥</span></span><br><span class="line">        PrivateKey privateKey = keyFactory.generatePrivate(keySpec);</span><br><span class="line">        <span class="keyword">return</span> privateKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> raw       待加密明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密后的密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(String publicKey, <span class="keyword">byte</span>[] raw) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Key key = getPublicKey(publicKey);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(Config.RSA_ALGORITHM);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key, <span class="keyword">new</span> OAEPParameterSpec(<span class="string">"SHA-256"</span>, <span class="string">"MGF1"</span>, MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT));</span><br><span class="line">        <span class="keyword">byte</span>[] encryption = cipher.doFinal(raw);</span><br><span class="line">        <span class="comment">// 最后将加密后的数据进行base64编码</span></span><br><span class="line">        <span class="keyword">return</span> Base64Utils.encode(encryption);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> enc  待解密密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的明文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(String privateKey, <span class="keyword">byte</span>[] enc) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Key key = getPrivateKey(privateKey);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(Config.RSA_ALGORITHM);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, key, <span class="keyword">new</span> OAEPParameterSpec(<span class="string">"SHA-256"</span>, <span class="string">"MGF1"</span>, MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT));</span><br><span class="line">        <span class="comment">// 先进行base64解密，然后解码</span></span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(Base64Utils.decode(enc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content    要进行签名的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String privateKey, <span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// privateKey进行base64编码，然后生成PKCS8格式私钥</span></span><br><span class="line">            PKCS8EncodedKeySpec priPKCS8 = <span class="keyword">new</span> PKCS8EncodedKeySpec(Base64Utils.decode(privateKey.getBytes()));</span><br><span class="line">            KeyFactory key = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            PrivateKey priKey = key.generatePrivate(priPKCS8);</span><br><span class="line">            <span class="comment">// 签名摘要算法</span></span><br><span class="line">            Signature signature = Signature.getInstance(<span class="string">"SHA256WithRSA"</span>);</span><br><span class="line">            <span class="comment">// 用私钥初始化此对象以进行签名</span></span><br><span class="line">            signature.initSign(priKey);</span><br><span class="line">            <span class="comment">// 使用指定的字节数组更新签名或验证</span></span><br><span class="line">            signature.update(content);</span><br><span class="line">            <span class="comment">// 获得签名字节</span></span><br><span class="line">            <span class="keyword">byte</span>[] signed = signature.sign();</span><br><span class="line">            <span class="comment">// 进行base64编码返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(Base64Utils.encode(signed));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content   要验签的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign      签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验签结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSign</span><span class="params">(String publicKey, <span class="keyword">byte</span>[] content, String sign)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="comment">// 进行base64解码</span></span><br><span class="line">            <span class="keyword">byte</span>[] encodedKey = Base64Utils.decodeFromString(publicKey);</span><br><span class="line">            <span class="comment">// 生成公钥</span></span><br><span class="line">            PublicKey pubKey = keyFactory.generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(encodedKey));</span><br><span class="line">            <span class="comment">// 签名摘要算法</span></span><br><span class="line">            Signature signature = Signature.getInstance(<span class="string">"SHA256WithRSA"</span>);</span><br><span class="line">            <span class="comment">// 用公钥初始化签名</span></span><br><span class="line">            signature.initVerify(pubKey);</span><br><span class="line">            <span class="comment">// 使用指定的字节数组更新签名或验证</span></span><br><span class="line">            signature.update(content);</span><br><span class="line">            <span class="comment">// base64解码后进行验证</span></span><br><span class="line">            <span class="keyword">return</span> signature.verify(Base64Utils.decodeFromString(sign));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//客户端代码</span></span><br><span class="line">        String text = <span class="string">"hello"</span>;</span><br><span class="line">        <span class="comment">//使用服务端公钥加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] encryptText = RSACipher.encrypt(Config.SERVER_PUBLIC_KEY, text.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"加密后:\n"</span> + <span class="keyword">new</span> String(encryptText));</span><br><span class="line">        <span class="comment">//使用客户端私钥签名</span></span><br><span class="line">        String signature = RSACipher.sign(Config.CLIENT_PRIVATE_KEY, encryptText);</span><br><span class="line">        System.out.println(<span class="string">"签名:\n"</span> + signature);</span><br><span class="line">        <span class="comment">//服务端代码</span></span><br><span class="line">        <span class="comment">//使用客户端公钥验签</span></span><br><span class="line">        <span class="keyword">boolean</span> result = RSACipher.checkSign(Config.CLIENT_PUBLIC_KEY, encryptText, signature);</span><br><span class="line">        System.out.println(<span class="string">"验签:\n"</span> + result);</span><br><span class="line">        <span class="comment">//使用服务端私钥解密</span></span><br><span class="line">        <span class="keyword">byte</span>[] decryptText = RSACipher.decrypt(Config.SERVER_PRIVATE_KEY, encryptText);</span><br><span class="line">        System.out.println(<span class="string">"解密后:\n"</span> + <span class="keyword">new</span> String(decryptText));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">加密后:</span><br><span class="line">ODdEkwo1RgRW8UMoHXPKe9Gwcp6lTCkg4P/Ra3gfkrO+Fw6pSgo0H54nMC5sYSsoUVy1wy2/QXeLSwR6Obfl7SU7DeW+XdGee83O2kgdsDQPbYFwlPYTd0cdOmWwZxtgEOIB9d5G75Iut4kci15vrhXZVtku92U+<span class="number">7</span>aNwtYimSDQ=</span><br><span class="line">签名:</span><br><span class="line">RL1qIScizRyu79/y+r2TN2FL/bSQDxnDj4JlDwSZM6XZR7CL7u5ZjLNHbsSYpHaCv9qKMS4ump50LyF+go05dsPjWZOvFNkgcm9LepkDP1qm8AzKdTGwlzhdBmy2397Ed8uBrQocFGj/<span class="number">721</span>Y2xM/Db0nt7r54zKZkDXbMMlsd9k=</span><br><span class="line">验签:</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">解密后:</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="3、AES对称加密">3、AES对称加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.Base64Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESCipher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecureRandom random = <span class="keyword">new</span> SecureRandom();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机16位key，key必须要是10的整数倍，否则会出错</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandom</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        StringBuilder ret = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 输出字母还是数字</span></span><br><span class="line">            <span class="keyword">boolean</span> isChar = (random.nextInt(<span class="number">2</span>) % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 字符串</span></span><br><span class="line">            <span class="keyword">if</span> (isChar) &#123;</span><br><span class="line">                <span class="comment">// 取得大写字母还是小写字母</span></span><br><span class="line">                <span class="keyword">int</span> choice = random.nextInt(<span class="number">2</span>) % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">65</span> : <span class="number">97</span>;</span><br><span class="line">                ret.append((<span class="keyword">char</span>) (choice + random.nextInt(<span class="number">26</span>)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 数字</span></span><br><span class="line">                ret.append(random.nextInt(<span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密方法，使用key充当向量iv，增加加密算法的强度</span></span><br><span class="line"><span class="comment">     * 更加安全</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> raw 需要加密的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(<span class="keyword">byte</span>[] key, String raw)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 第一次加密</span></span><br><span class="line">        SecretKeySpec secretKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">        <span class="comment">// 获取二次加密的key</span></span><br><span class="line">        SecretKeySpec secondSecretKey = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, <span class="string">"AES"</span>);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(Config.AES_ALGORITHM);</span><br><span class="line">        <span class="comment">// 向量iv，增加加密算法的强度</span></span><br><span class="line">        IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(key);</span><br><span class="line">        <span class="comment">// 初始化加密器</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, secondSecretKey, iv);</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] result = cipher.doFinal(raw.getBytes());</span><br><span class="line">        <span class="comment">// 进行base64编码</span></span><br><span class="line">        <span class="keyword">return</span> Base64Utils.encodeToString(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密方法，使用key充当向量iv，增加加密算法的强度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> enc 待解密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] key, String enc)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SecretKeySpec secretKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">        <span class="comment">// 二次加密</span></span><br><span class="line">        SecretKeySpec secondSecretKey = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, <span class="string">"AES"</span>);</span><br><span class="line"></span><br><span class="line">        Cipher cipher = Cipher.getInstance(Config.AES_ALGORITHM);</span><br><span class="line">        IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(key);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, secondSecretKey, iv);</span><br><span class="line">        <span class="comment">// 首先进行base64解码</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Base64Utils.decodeFromString(enc);</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        <span class="keyword">byte</span>[] result = cipher.doFinal(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端代码</span></span><br><span class="line">        String text = <span class="string">"hello"</span>;</span><br><span class="line">        <span class="comment">//随机生成16位aes密钥，也可以自己指定16位</span></span><br><span class="line">        <span class="keyword">byte</span>[] aesKey = getRandom(<span class="number">16</span>).getBytes();</span><br><span class="line"></span><br><span class="line">        String encryptText = AESCipher.encrypt(aesKey, text);</span><br><span class="line">        System.out.println(<span class="string">"加密后:\n"</span> + encryptText);</span><br><span class="line">        String decryptText = AESCipher.decrypt(aesKey, encryptText);</span><br><span class="line">        System.out.println(<span class="string">"解密后:\n"</span> + decryptText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加密后:</span><br><span class="line">hwkYAF9eXj/dytmDBD30xg==</span><br><span class="line">解密后:</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h1>三、加解密 starter实战</h1><h2 id="1、介绍">1、介绍</h2><p>加密解密本身并不是难事，问题是在何时去处理？定义一个过滤器，将请求和响应分别拦截下来进行处理也是一个办法，这种方式虽然粗暴，但是灵活，因为可以拿到一手的请求参数和响应数据。不过 SpringMVC 中给我们提供了 <code>ResponseBodyAdvice</code>和 <code>RequestBodyAdvice</code>，利用这两个工具可以对请求和响应进行预处理，非常方便。</p><blockquote><p>参考：<br><a href="https://blog.csdn.net/qq_34975710/article/details/116450371" target="_blank" rel="noopener" title="RSA+AES混合加密-JavaWeb">RSA+AES混合加密-JavaWeb</a><a href="https://blog.csdn.net/lemon_TT/article/details/113345061" target="_blank" rel="noopener" title="SpringBoot自定义starter">SpringBoot自定义starter</a></p></blockquote><h2 id="2、前期准备">2、前期准备</h2><h3 id="2-1-引入依赖">2.1 引入依赖</h3><p>因为我们这个工具是为 Web 项目开发的，以后必然使用在 Web 环境中，所以这里添加依赖时 scope 设置为 provided</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>scope几个属性介绍</strong></p><ul><li><p>compile：默认值 他表示被依赖项目需要参与当前项目的编译，还有后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去</p></li><li><p>test：依赖项目仅仅参与测试相关的工作，包括测试代码的编译和执行，不会被打包，例如：junit</p></li><li><p>runtime：表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过了编译而已。例如JDBC驱动，适用运行和测试阶段</p></li><li><p>provided：打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作</p></li><li><p>system：从参与度来说，和provided相同，不过被依赖项不会从maven仓库下载，而是从本地文件系统拿。需要添加systemPath的属性来定义路径</p></li></ul><h3 id="2-2-封装公共相应类">2.2 封装公共相应类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RespBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">ok</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean(<span class="number">200</span>, msg, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">ok</span><span class="params">(String msg, Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean(<span class="number">200</span>, msg, obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">error</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean(<span class="number">500</span>, msg, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title">error</span><span class="params">(String msg, Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RespBean(<span class="number">500</span>, msg, obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RespBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RespBean</span><span class="params">(Integer status, String msg, Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">setObj</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-定义加解密工具类">2.3 定义加解密工具类</h3><p>加密这块有多种方案可以选择，对称加密、非对称加密，其中对称加密又可以使用 AES、DES、3DES 等不同算法，这里我们使用 Java 自带的 Cipher 来实现对称加密，使用 AES 算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AES_ALGORITHM = <span class="string">"AES/ECB/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 cipher</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Cipher <span class="title">getCipher</span><span class="params">(<span class="keyword">byte</span>[] key, <span class="keyword">int</span> model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(AES_ALGORITHM);</span><br><span class="line">        cipher.init(model, secretKeySpec);</span><br><span class="line">        <span class="keyword">return</span> cipher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES加密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Cipher cipher = getCipher(key, Cipher.ENCRYPT_MODE);</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(cipher.doFinal(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cipher cipher = getCipher(key, Cipher.DECRYPT_MODE);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(Base64.getDecoder().decode(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-定义两个注解">2.4 定义两个注解</h3><p>接下来我们定义两个注解 <code>@Decrypt</code> 和 <code>@Encrypt</code>。在以后使用的过程中，哪个接口方法添加了 @Encrypt 注解就对哪个接口的数据加密返回，哪个接口/参数添加了 @Decrypt 注解就对哪个接口/参数进行解密。另外就是 <code>@Decrypt</code> 可以用在参数上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Decrypt &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Encrypt &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-设置自定义key">2.5 设置自定义key</h3><p>定义一个 EncryptProperties 类来读取用户配置的 key，这样就可以自定义key。这里设置了默认值，以后如果用户想自己配置 key，只需要在 application.properties 中配置 <code>spring.encrypt.key=xxx</code> 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.encrypt"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这一块一定要16位或者整数倍，最多256</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DEFAULT_KEY = <span class="string">"www.shawn222.com"</span>;</span><br><span class="line">    <span class="keyword">private</span> String key = DEFAULT_KEY;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、接口加密与解密">3、接口加密与解密</h2><h3 id="3-1-介绍">3.1 介绍</h3><p><code>ResponseBodyAdvice</code> 在你使用了 <code>@ResponseBody</code> 注解的时候才会生效，<code>RequestBodyAdvice</code> 在你使用了 <code>@RequestBody</code> 注解的时候才会生效，换言之，前后端都是 JSON 交互的时候，这两个才有用</p><h3 id="3-2-接口加密">3.2 接口加密</h3><p>我们自定义 <code>EncryptResponse </code>类实现 <code>ResponseBodyAdvice</code>接口，泛型表示接口的返回类型，这里一共要实现两个方法</p><ul><li><p><strong>supports</strong>：这个方法用来判断什么样的接口需要加密，参数 returnType 表示返回类型，我们这里的判断逻辑就是方法是否含有 <code>@Encrypt</code> 注解，如果有，表示该接口需要加密处理，如果没有，表示该接口不需要加密处理。</p></li><li><p><strong>beforeBodyWrite</strong>：这个方法会在数据响应之前执行，也就是我们先对响应数据进行二次处理，处理完成后，才会转成 json 返回。我们这里的处理方式很简单，RespBean 中的 status 是状态码就不用加密了，另外两个字段重新加密后重新设置值即可。</p></li></ul><p>另外需要注意，自定义的 ResponseBodyAdvice 需要用 <code>@ControllerAdvice</code> 注解来标记。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(EncryptProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ControllerAdvice</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EncryptResponse</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">RespBean</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EncryptProperties encryptProperties;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> returnType.hasMethodAnnotation(Encrypt<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">beforeBodyWrite</span><span class="params">(RespBean body, MethodParameter returnType, MediaType selectedContentType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = encryptProperties.getKey().getBytes();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (body.getMsg()!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                body.setMsg(AESUtils.encrypt(body.getMsg().getBytes(),keyBytes));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (body.getObj() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                body.setObj(AESUtils.encrypt(om.writeValueAsBytes(body.getObj()), keyBytes));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-接口解密">3.3 接口解密</h3><p>首先大家注意，DecryptRequest 类我们没有直接实现 <code>RequestBodyAdvice</code> 接口，而是继承自 RequestBodyAdviceAdapter 类，该类是 RequestBodyAdvice 接口的子类，并且实现了接口中的一些方法，这样当我们继承自 RequestBodyAdviceAdapter 时，就只需要根据自己实际需求实现某几个方法即可。</p><ul><li><p><strong>supports</strong>：该方法用来判断哪些接口需要处理接口解密，我们这里的判断逻辑是方法上或者参数上含有 <code>@Decrypt</code> 注解的接口，处理解密问题。</p></li><li><p><strong>beforeBodyRead</strong>：这个方法会在参数转换成具体的对象之前执行，我们先从流中加载到数据，然后对数据进行解密，解密完成后再重新构造 HttpInputMessage 对象返回。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(EncryptProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ControllerAdvice</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DecryptRequest</span> <span class="keyword">extends</span> <span class="title">RequestBodyAdviceAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EncryptProperties encryptProperties;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter methodParameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> methodParameter.hasMethodAnnotation(Decrypt<span class="class">.<span class="keyword">class</span>) || <span class="title">methodParameter</span>.<span class="title">hasParameterAnnotation</span>(<span class="title">Decrypt</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpInputMessage <span class="title">beforeBodyRead</span><span class="params">(<span class="keyword">final</span> HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] body = <span class="keyword">new</span> <span class="keyword">byte</span>[inputMessage.getBody().available()];</span><br><span class="line">        inputMessage.getBody().read(body);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] decrypt = AESUtils.decrypt(body, encryptProperties.getKey().getBytes());</span><br><span class="line">            <span class="keyword">final</span> ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(decrypt);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HttpInputMessage() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> bais;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> inputMessage.getHeaders();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.beforeBodyRead(inputMessage, parameter, targetType, converterType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、打包发布starter">4、打包发布starter</h2><h3 id="4-1-定义自动化配置类">4.1 定义自动化配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 换成自己的包路径</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.example.encryption"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，<code>resources </code>目录下定义 <code>META</code>-INF，然后再定义 <code>spring.factories</code> 文件，这样当项目启动时，就会自动加载该配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.encryption.EncryptAutoConfiguration</span><br></pre></td></tr></table></figure><p>安装到本地仓库比较简单，直接 <code>mvn install</code>，或者在 IDEA 中，点击右边的 Maven，然后双击 install</p><h3 id="4-2-发布线上使用">4.2 发布线上使用</h3><p>发不到线上我们可以使用 <a href="https://jitpack.io/" target="_blank" rel="noopener" title="JitPack">JitPack</a>来做。首先我们在 GitHub 上创建一个仓库，将我们的代码上传上去，上传成功后，点击右边的 <code>Create a new release</code> 按钮，发布一个正式版</p><p>发布成功后，打开 <strong>jitpack</strong>，输入仓库的完整路径，点击 lookup 按钮，查找到之后，再点击 <code>Get it</code> 按钮完成构建，构建成功后，JitPack 上会给出项目引用方式，新建项目时引入即可</p><h2 id="5、新项目使用">5、新项目使用</h2><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类，第一个接口使用了 <code>@Encrypt</code> 注解，所以会对该接口的数据进行加密（如果不使用该注解就不加密），第二个接口使用了 <code>@Decrypt</code> 所以会对上传的参数进行解密，注意 <code>@Decrypt</code> 注解既可以放在方法上也可以放在参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@Encrypt</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId((<span class="keyword">long</span>) <span class="number">99</span>);</span><br><span class="line">        user.setUsername(<span class="string">"javaboy"</span>);</span><br><span class="line">        <span class="keyword">return</span> RespBean.ok(<span class="string">"ok"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">addUser</span><span class="params">(@RequestBody @Decrypt User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"user = "</span> + user);</span><br><span class="line">        <span class="keyword">return</span> RespBean.ok(<span class="string">"ok"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p><p><a href="https://mp.weixin.qq.com/s/Upa9UIqB32ssujigewygZA" target="_blank" rel="noopener" title="如何优雅的实现 SpringBoot 接口参数加密解密？">如何优雅的实现 SpringBoot 接口参数加密解密？</a></p><p><a href="https://bigzuo.github.io/2019/03/27/java-cipher-tutorial/" target="_blank" rel="noopener" title="为什么使用 Java Cipher 要指定转换模式？">为什么使用 Java Cipher 要指定转换模式？</a></p><p><a href="https://www.hutool.cn/docs/#/crypto/%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener" title="Hutool加密解密">Hutool加密解密</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、对称/非对称加密&lt;/h1&gt;
&lt;h2 id=&quot;1、简介&quot;&gt;1、简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;对称加密&lt;/strong&gt;只有一个秘钥，加密和解密都是用同一个秘钥，所以叫做对称加密。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非对称加密&lt;/strong&gt;有两个秘钥，一个是公钥，一个是私钥。非对称的特点在于，公钥加密的私钥可以解密，但私钥加密的，公钥解不出来，只能验证是否由私钥进行加密&lt;/p&gt;
&lt;p&gt;目前常见的加密方式是有两种，一种是&lt;strong&gt;对称加密(AES为代表）&lt;/strong&gt;，一种是&lt;strong&gt;非对称加密（RSA为代表）&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Redis键通知相关小记(EVENT NOTIFICATION)</title>
    <link href="https://www.shawn22.xyz/posts/15b88caa.html"/>
    <id>https://www.shawn22.xyz/posts/15b88caa.html</id>
    <published>2022-07-11T11:58:49.000Z</published>
    <updated>2022-07-11T12:13:09.111Z</updated>
    
    <content type="html"><![CDATA[<h1>一、事件通知介绍</h1><h2 id="1、前言">1、前言</h2><blockquote><p>官方参考文档：<a href="https://redis.io/docs/manual/keyspace-notifications/" target="_blank" rel="noopener" title="https://redis.io/docs/manual/keyspace-notifications/">https://redis.io/docs/manual/keyspace-notifications/</a></p></blockquote><p>从Redis 2.8.0开始，Redis加入了<strong>发布/订阅模式</strong>以及<strong>键空间消息提醒（keyspace notification）功能</strong>。键空间消息提醒提供了允许客户端通过订阅指定信道获取Redis数据变化的能力。需要注意的是，<strong>键空间消息提醒并非可靠的</strong>，它不会对订阅端是否接收到消息进行确认。例如某个订阅的客户端暂时断开连接，在其直到恢复连接期间发生的事件将无法再次获得。</p><a id="more"></a><h2 id="2、配置详解">2、配置详解</h2><blockquote><p>各版本Redis配置文件：<a href="https://redis.io/docs/manual/config/" target="_blank" rel="noopener" title="https://redis.io/docs/manual/config/">https://redis.io/docs/manual/config/</a></p></blockquote><p>可以通过对redis的<code>redis.conf</code>文件中配置<code>notify-keyspace-events</code>参数可以指定服务器发送哪种类型的通知。下面对于一些参数的描述。默认情况下此功能是关闭的。</p><table><thead><tr><th>字符</th><th>通知</th></tr></thead><tbody><tr><td>K</td><td>键空间通知，所有通知以 <strong>keyspace@</strong> 为前缀</td></tr><tr><td>E</td><td>键事件通知，所有通知以 <strong>keyevent@</strong> 为前缀</td></tr><tr><td>g</td><td>DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</td></tr><tr><td>$</td><td>字符串命令的通知</td></tr><tr><td>l</td><td>列表命令的通知</td></tr><tr><td>s</td><td>集合命令的通知</td></tr><tr><td>h</td><td>哈希命令的通知</td></tr><tr><td>z</td><td>有序集合命令的通知</td></tr><tr><td>x</td><td>过期事件：每当有过期键被删除时发送</td></tr><tr><td>e</td><td>驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</td></tr><tr><td>A</td><td>参数 g$lshzxe 的别名</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; CONFIG GET notify-keyspace-events</span><br><span class="line">1) <span class="string">"notify-keyspace-events"</span></span><br><span class="line">2) <span class="string">""</span></span><br><span class="line">redis&gt; CONFIG SET notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line">redis&gt; CONFIG GET notify-keyspace-events</span><br><span class="line">1) <span class="string">"notify-keyspace-events"</span></span><br><span class="line">2) <span class="string">"AKE"</span></span><br></pre></td></tr></table></figure><p>在上述示例中将<code>notify-keyspace-events</code>配置为<code>KEA</code>，代表除未命中外的所有事件。其中，<code>K</code>与<code>E</code>代表事件的两种类型——<code>Keyspace</code>与<code>Keyevent</code>。</p><p><code>Keyspace</code>代表与事件名称相关的消息，例如订阅对指定键进行的操作事件；<code>Keyevent</code>代表与键名称相关的消息，例如订阅发生键过期事件的相关键名称。</p><h2 id="3、订阅指定事件">3、订阅指定事件</h2><p>在完成配置后，可通过<code>SUBSCRIBE</code>命令订阅指定信道实现对一个或多个指定事件的订阅。例如通过订阅<code>__keyevent@0__:expired</code>实现订阅数据库0中的键过期事件</p><p>订阅的信道的格式为<code>__&lt;type&gt;@&lt;db&gt;__:&lt;event&gt;</code>，其包括了事件类型（<code>keyspace</code>或<code>keyevent</code>）、数据库（例如数据库<code>0</code>）以及事件（例如<code>expired</code>）三部分组成。另外，也可以通过<code>PSUBSCRIBE</code>命令订阅一个或多个复合正则表达式匹配的信道。例如通过订阅<code>__key*@*__:*</code>订阅Redis中所有数据库中的所有事件。</p><h2 id="4、命令事件">4、命令事件</h2><p>Redis为许多命令提供了不同的事件，在本文中将选择其中部分命令及其对应的事件进行介绍：</p><ul><li><p><code>DEL</code>：在某个键被删除时产生<code>del</code>事件</p></li><li><p><code>EXPIRE</code>、<code>PEXPIRE</code>、<code>EXPIREAT</code>以及<code>PEXPIREAT</code>：当设置正数过期时间或未来时间的时间戳，则产生<code>expire</code>事件，否则产生<code>del</code>事件（将立即被删除）</p></li><li><p><code>SET</code>以及同类的<code>SETEX</code>、<code>SETNX</code>、<code>GETSET</code>：产生<code>set</code>事件，若使用<code>SETEX</code>则也会产生<code>expire</code>事件</p></li><li><p><code>MSET</code>：将会为每个键都产生一个<code>set</code>事件</p></li><li><p><code>LPUSH</code>、<code>LPUSHX</code>与<code>RPUSH</code>、<code>RPUSHX</code>：根据插入的方向分别产生<code>lpush</code>或<code>rpush</code>事件</p></li><li><p><code>RPOP</code>、<code>LPOP</code>：分别产生<code>rpop</code>与<code>lpop</code>事件，若移出的是列表中的最后一个元素，将会同时产生<code>del</code>事件</p></li><li><p><code>LSET</code>：产生<code>lset</code>事件</p></li><li><p><code>LREM</code>：产生<code>lrem</code>事件，同样若移除的元素为列表中的最后一个元素时将同时产生<code>del</code>事件</p></li><li><p><code>HSET</code>、<code>HSETNX</code>以及<code>HMSET</code>：产生一个<code>hset</code>事件</p></li><li><p><code>HDEL</code>：产生一个<code>hdel</code>事件，且在移除后哈希表为空的情况下产生<code>del</code>事件</p></li><li><p><code>SADD</code>：产生一个<code>sadd</code>事件</p></li><li><p><code>SREM</code>：产生一个<code>srem</code>事件，且在移除后集合为空的情况下产生<code>del</code>事件</p></li><li><p><code>SMOVE</code>：原键中产生<code>srem</code>事件且在目标键中产生<code>sadd</code>事件</p></li><li><p><code>SINTERSTORE</code>、<code>SUNIONSTORE</code>、<code>SDIFFSTORE</code>：分别产生<code>sinterstore</code>、<code>sunionstore</code>以及<code>sdiffstore</code>事件，且在结果为空集且目标键存在的情况下，将会产生<code>del</code>事件</p></li><li><p><code>ZADD</code>：无论添加几个元素都只产生一个<code>zadd</code>事件</p></li><li><p><code>ZREM</code>：无论移除几个元素都只产生一个<code>zrem</code>事件，当移除后有序集合为空时产生<code>del</code>事件</p></li><li><p><code>XADD</code>：产生<code>xadd</code>事件，若使用<code>MAXLEN</code>子命令可能会同时产生<code>xtrim</code>事件</p></li><li><p><code>XDEL</code>：产生<code>xdel</code>事件</p></li><li><p><code>PERSIST</code>：如果对应的键所关联的过期事件成功被移除，则产生<code>persist</code>事件</p></li><li><p>在键发生过期时产生<code>expired</code>事件</p></li><li><p>在达到<code>maxmemory</code>设定的内存值后发生键淘汰时产生<code>evicted</code>事件</p></li><li><p>……</p></li></ul><p>关于更多的命令相关事件，请参考<a href="https://redis.io/topics/notifications" target="_blank" rel="noopener" title="keyspace notification相关文档">keyspace notification相关文档</a></p><h2 id="5、一些示例">5、一些示例</h2><p>订阅键过期事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis1&gt; SUBSCRIBE __keyevent@0__:expired</span><br><span class="line">1) <span class="string">"subscribe"</span></span><br><span class="line">2) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># redis2&gt; SETEX greeting 1 "hello world"</span></span><br><span class="line"><span class="comment"># 等待1秒后：</span></span><br><span class="line">1) <span class="string">"message"</span></span><br><span class="line">2) <span class="string">"__keyevent@0__:expired"</span></span><br><span class="line">3) <span class="string">"greeting"</span></span><br></pre></td></tr></table></figure><p>订阅所有事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis1&gt; PSUBSCRIBE __key*@*__:*</span><br><span class="line">1) <span class="string">"psubscribe"</span></span><br><span class="line">2) <span class="string">"__key*@*__:*"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># redis2&gt; SET greeting "hello world"</span></span><br><span class="line">1) <span class="string">"pmessage"</span></span><br><span class="line">2) <span class="string">"__key*@*__:*"</span></span><br><span class="line">3) <span class="string">"__keyspace@0__:greeting"</span></span><br><span class="line">4) <span class="string">"set"</span></span><br><span class="line">1) <span class="string">"pmessage"</span></span><br><span class="line">2) <span class="string">"__key*@*__:*"</span></span><br><span class="line">3) <span class="string">"__keyevent@0__:set"</span></span><br><span class="line">4) <span class="string">"greeting"</span></span><br></pre></td></tr></table></figure><h1>二、SpringBoot实现Redis失效监听事件</h1><h2 id="1、场景说明">1、场景说明</h2><p>基于Redis的主动事件的处理，比如：当用户购买了会员卡十分钟内没有付款，需要通过小程序或者APP向用户主动推送购买会员卡的优势，引导用户继续完成支付并购买等，类似的场景需要用户在<strong>指定的时间点后</strong>主动通知或者继续引导，使用 <strong>Redis过期键Event</strong>优雅、快捷的实现。</p><p>因为Redis的订阅/发布是<strong>没有ACK确认机制</strong>的，因此可能会丢失消息，如果要保证消息可靠，应该选择MQ消息队列实现，</p><h2 id="2、代码实现-Redis单机版">2、代码实现(Redis单机版)</h2><h3 id="2-1-环境准备">2.1 环境准备</h3><p>引入对应redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置<code>application.yml</code>连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">20000</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">50</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>最后更改<code>redis.conf</code> 配置 <code>notify-keyspace-events</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认</span></span><br><span class="line">notify-keyspace-events <span class="string">""</span> </span><br><span class="line"><span class="comment"># 更改为</span></span><br><span class="line">notify-keyspace-events Ex</span><br></pre></td></tr></table></figure><h3 id="2-2-配置监听Bean">2.2 配置监听Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key过期事件订阅需要</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(RedisMessageListenerContainer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">RedisMessageListenerContainer</span> <span class="title">container</span>(<span class="title">RedisConnectionFactory</span> <span class="title">connectionFactory</span>) </span>&#123;</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        <span class="comment">//连接池的设置</span></span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-配置监听key">2.3 配置监听key</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyExpirationListener</span> <span class="keyword">extends</span> <span class="title">KeyExpirationEventMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SET_NX = <span class="string">"setnx:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer database = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisKeyExpirationListener</span><span class="params">(RedisMessageListenerContainer listenerContainer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(listenerContainer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(RedisMessageListenerContainer listenerContainer)</span> </span>&#123;</span><br><span class="line">        String topic = <span class="string">"__keyevent@"</span>+database+<span class="string">"__:expired"</span>;</span><br><span class="line">        log.info(<span class="string">"配置监听哪个频道:"</span>+topic);</span><br><span class="line">        PatternTopic patternTopic = <span class="keyword">new</span> PatternTopic(topic);</span><br><span class="line">        <span class="comment">// 频道可以是多，多个传list</span></span><br><span class="line">        listenerContainer.addMessageListener(<span class="keyword">this</span>,patternTopic);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取过期的key,可以做自己的业务</span></span><br><span class="line">        String expiredKey = message.toString();</span><br><span class="line">        <span class="comment">// 寻找需要的key前缀</span></span><br><span class="line">        <span class="keyword">if</span>(!expiredKey.startsWith(<span class="string">"test"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 利用redis setIfAbsent命令,如果为空set返回true,如果不为空返回false,类似setnx加锁操作</span></span><br><span class="line">        Boolean aBoolean = stringRedisTemplate.opsForValue().setIfAbsent(SET_NX + expiredKey, String.valueOf(System.currentTimeMillis()),<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (aBoolean)&#123;</span><br><span class="line">            <span class="comment">// 避免多个服务监听情况下重复消费，也可以加锁与解锁</span></span><br><span class="line">            <span class="comment">// 注意：只能获取失效的key值，不能获取key对应的value值</span></span><br><span class="line">            System.out.println(expiredKey);</span><br><span class="line">            <span class="comment">// 这里可以进行相应的业务代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Redis集群事件监听">3、Redis集群事件监听</h2><p>这里就简单说一下思路，因为不能监听集群，那就建立多个redis连接，分别对每个redis的key过期进行监听，相当于注册多个监听器，最后进行过期key的筛选即可</p><h1>三、一些问题</h1><blockquote><p>参考：<a href="https://www.cnblogs.com/Finley/p/16395466.html" target="_blank" rel="noopener" title="领导：谁再用 Redis 过期监听实现关闭订单，立马滚蛋！">领导：谁再用 Redis 过期监听实现关闭订单，立马滚蛋！</a></p></blockquote><p>对于延时任务一般实现的方法有几种：</p><ol><li><p>使用 rocketmq、rabbitmq、pulsar 等消息队列的延时投递功能</p></li><li><p>使用 redisson 提供的 DelayedQueue</p></li></ol><p>有一些方案虽然广为流传但存在着致命缺陷，不要用来实现延时任务</p><ol><li><p>使用 redis 的过期监听</p></li><li><p>使用 rabbitmq 的死信队列</p></li><li><p>使用非持久化的时间轮</p></li></ol><p><a href="https://blog.csdn.net/lemon_TT/article/details/117711682" target="_blank" rel="noopener" title="Redis6.0学习笔记">Redis6.0学习笔记</a></p><p><a href="https://www.jianshu.com/p/0a081dc2f4a2" target="_blank" rel="noopener" title="Redis过期监听机制实现订单超时处理">Redis过期监听机制实现订单超时处理</a></p><p><a href="https://blog.csdn.net/z69183787/article/details/106664711" target="_blank" rel="noopener" title="Redis集群下过期key监听">Redis集群下过期key监听</a></p><p><a href="https://www.jianshu.com/p/50247eef431c" target="_blank" rel="noopener" title="SpringBoot监听redis过期key">SpringBoot监听redis过期key</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、事件通知介绍&lt;/h1&gt;
&lt;h2 id=&quot;1、前言&quot;&gt;1、前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;官方参考文档：&lt;a href=&quot;https://redis.io/docs/manual/keyspace-notifications/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;https://redis.io/docs/manual/keyspace-notifications/&quot;&gt;https://redis.io/docs/manual/keyspace-notifications/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从Redis 2.8.0开始，Redis加入了&lt;strong&gt;发布/订阅模式&lt;/strong&gt;以及&lt;strong&gt;键空间消息提醒（keyspace notification）功能&lt;/strong&gt;。键空间消息提醒提供了允许客户端通过订阅指定信道获取Redis数据变化的能力。需要注意的是，&lt;strong&gt;键空间消息提醒并非可靠的&lt;/strong&gt;，它不会对订阅端是否接收到消息进行确认。例如某个订阅的客户端暂时断开连接，在其直到恢复连接期间发生的事件将无法再次获得。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
