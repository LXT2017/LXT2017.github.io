<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星的猫(&gt;^ω^&lt;)喵</title>
  
  
  <link href="https://www.shawn22.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.shawn22.xyz/"/>
  <updated>2021-05-01T06:26:51.496Z</updated>
  <id>https://www.shawn22.xyz/</id>
  
  <author>
    <name>Shawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>＜img＞标签src缓存问题</title>
    <link href="https://www.shawn22.xyz/posts/d39ecf00.html"/>
    <id>https://www.shawn22.xyz/posts/d39ecf00.html</id>
    <published>2021-05-01T06:26:28.000Z</published>
    <updated>2021-05-01T06:26:51.496Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述：">问题描述：</h4><p>最近在使用vue做目标检测算法可视化的时候发现了一个问题，我在前端传入原始图片到后端，经过后端算法检测后生成检测图片，前端vue直接调用该图片路径。本来想着输入不同图片，后端会不断覆盖result.jpg，最终前端也会实时变化，但是最终结果出现了意外，如图后连输入图不管如何变化，结果图都是同一张图片。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html部分</span></span><br><span class="line">&lt;el-image <span class="class"><span class="keyword">class</span></span>=<span class="string">"originImg"</span> :src=<span class="string">"resulturl"</span>/&gt;</span><br><span class="line"><span class="comment">//js部分</span></span><br><span class="line"><span class="keyword">this</span>.resulturl=<span class="string">"http://localhost:5000/static/images/result.jpg"</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210430142255885.png" alt="在这里插入图片描述"></p><h4 id="问题原因">问题原因</h4><p>因为src后面的请求路径不变，所以浏览器就认为是同一个图片，就不会重新发送请求，导致获得的一直是第一张缓存图片。</p><blockquote><p>浏览器缓存知识：<a href="https://www.cnblogs.com/chengxs/p/10396066.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxs/p/10396066.html</a></p></blockquote><h4 id="解决方法">解决方法</h4><p>因为浏览器缓存的img是根据scr属性的，只要告诉浏览器这个图片和原来的缓存图片不一样浏览器就会重新进行请求了，即在请求图片后面添加<code>&quot;?tempid=&quot;+Math.random()</code>字符串。比如我的，成功解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.resulturl=<span class="string">"http://localhost:5000/static/images/result.jpg?tempid="</span>+<span class="built_in">Math</span>.random();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;问题描述：&quot;&gt;问题描述：&lt;/h4&gt;
&lt;p&gt;最近在使用vue做目标检测算法可视化的时候发现了一个问题，我在前端传入原始图片到后端，经过后端算法检测后生成检测图片，前端vue直接调用该图片路径。本来想着输入不同图片，后端会不断覆盖result.jpg，最终前端也会实时变化，但是最终结果出现了意外，如图后连输入图不管如何变化，结果图都是同一张图片。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SSH原理与使用</title>
    <link href="https://www.shawn22.xyz/posts/ec679095.html"/>
    <id>https://www.shawn22.xyz/posts/ec679095.html</id>
    <published>2021-03-26T11:19:37.000Z</published>
    <updated>2021-03-26T11:20:41.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、SSH介绍">一、SSH介绍</h2><p>SSH是Secure Shell Protocol的简写，用于加密两台计算机之间的通信，并且支持各种身份验证机制。SSH先对联机数据包通过加密技术进行加密处理，加密后在进行数据传输。确保了传递的数据安全。</p><a id="more"></a><ul><li>SSH是安全的加密协议，用于远程连接linux服务器。</li><li>SSH默认端口是22，安全协议版本SSHv2，除了2之外还有SSHv1（有漏洞）。</li><li>SSH服务端主要包含两个服务功能SSH远程连接和SFTP服务。</li><li>Linux SSH客户端包含ssh远程连接命令，以及远程拷贝scp命令等。</li></ul><p>而SSH 的软件架构是服务器-客户端模式（Server - Client）。在这个架构中，SSH 软件分成两个部分：向服务器发出请求的部分，称为客户端（client），OpenSSH 的实现为 ssh；接收客户端发出的请求的部分，称为服务器（server），OpenSSH 的实现为 sshd。</p><h2 id="二、SSH登录">二、SSH登录</h2><h3 id="1、基本用法">1、基本用法</h3><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user指的是你远程主机的名字，host指的是ip或者局域网的主机名</span></span><br><span class="line">ssh user@host</span><br><span class="line"><span class="comment"># 如果本地用户名与远程用户名一致，登录时可以省略用户名。</span></span><br><span class="line">ssh host</span><br><span class="line"><span class="comment">#SSH的默认端口是22，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口，注意端口开放。</span></span><br><span class="line">ssh -p 2222 user@hostSSH</span><br></pre></td></tr></table></figure><h3 id="2、口令登录">2、口令登录</h3><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。整个过程是这样的：</p><ol><li>远程主机收到用户的登录请求，把自己的公钥发给用户。</li><li>用户使用这个公钥，将登录密码加密后，发送回来。</li><li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li></ol><p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/1739730?fr=aladdin" target="_blank" rel="noopener">&quot;中间人攻击&quot;</a>（Man-in-the-middle attack）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure><p>第一次登录对方主机，系统会出现一个警告提示，意思是无法确认远程主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？经过用户的考虑后接受，之后进行口令的输入，如果密码正确，就可以登录了。当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p><h3 id="3、公钥登录">3、公钥登录</h3><p>使用密码登录，每次都必须输入密码，非常麻烦。SSH还提供了公钥登录，可以省去输入密码的步骤。</p><p>所谓&quot;公钥登录&quot;，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p><p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#程序会询问一系列问题，然后生成密钥，默认rsa算法</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment">#通常做法是使用-t参数，指定密钥的加密算法</span></span><br><span class="line">ssh-keygen -t dsa</span><br></pre></td></tr></table></figure><p>执行<code>ssh-keygen</code>命令以后，会出现第一个问题，询问密钥保存的文件名，默认是<code>~/.ssh/id_rsa</code>文件，这个是私钥的文件名，对应的公钥文件<code>~/.ssh/id_rsa.pub</code>是自动生成的。用户的密钥一般都放在主目录的<code>.ssh</code>目录里面。</p><p>生成密钥以后，公钥必须上传到服务器，才能使用公钥登录。</p><p><strong>手动上传公钥</strong></p><p>OpenSSH 规定，用户公钥保存在服务器的<code>~/.ssh/authorized_keys</code>文件。你要以哪个用户的身份登录到服务器，密钥就必须保存在该用户主目录的<code>~/.ssh/authorized_keys</code>文件。只要把公钥添加到这个文件之中，就相当于公钥上传到服务器了。每个公钥占据一行。如果该文件不存在，可以手动创建。</p><p><strong><code>ssh-copy-id</code>命令：自动上传公钥</strong></p><p>OpenSSH 自带一个<code>ssh-copy-id</code>命令，可以自动将公钥拷贝到远程服务器的<code>~/.ssh/authorized_keys</code>文件。如果<code>~/.ssh/authorized_keys</code>文件不存在，<code>ssh-copy-id</code>命令会自动创建该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要把工作目录切换到~/.ssh/下</span></span><br><span class="line">ssh-copy-id -i id_rsa user@host</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-i</code>参数用来指定公钥文件，<code>user</code>是所要登录的账户名，<code>host</code>是服务器地址。如果省略用户名，默认为当前的本机用户名。执行完该命令，公钥就会拷贝到服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SSH 就会自动采用密钥登录，不再提示输入密码。</span></span><br><span class="line">ssh user@host</span><br></pre></td></tr></table></figure><p>从此ssh登录，为了安全性就不需要密码登录了，具体方法就是打开服务器 sshd 的配置文件<code>/etc/ssh/sshd_config</code>，将<code>PasswordAuthentication</code>这一项设为<code>no</code>，最后重启sshd。</p><h2 id="三、SSH端口转发">三、SSH端口转发</h2><h3 id="1、动态转发">1、动态转发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -D <span class="built_in">local</span>-port tunnel-host [-N]</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">ssh -D 8080 user@host</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-D</code>表示动态转发，<code>local-port</code>是本地端口，<code>tunnel-host</code>是 SSH 服务器，<code>-N</code>表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。</p><p>SSH会建立一个socket，去监听本地的端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果某个本地端口原来是一个不加密端口，现在将变成一个加密端口。</p><h3 id="2、本地转发">2、本地转发</h3><p>本地转发（local forwarding）指的是，SSH 服务器作为中介的跳板机，建立本地计算机与特定目标网站之间的加密连接。本地转发是在本地计算机的 SSH 客户端建立的转发规则。</p><p>它会指定一个本地端口（local-port），所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host），然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L <span class="built_in">local</span>-port:target-host:target-port tunnel-host [-N] [-f]</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-L</code>参数表示本地转发，<code>local-port</code>是本地端口，<code>target-host</code>是你想要访问的目标服务器，<code>target-port</code>是目标服务器的端口，<code>tunnel-host</code>是 SSH 跳板机。<code>-N</code>参数表示不在 SSH 跳板机执行远程命令，让 SSH 只充当隧道。另外还有一个<code>-f</code>参数表示 SSH 连接在后台运行。</p><p>举例来说，现在有一台 SSH 跳板机<code>root@10.16.22.123</code>，我们可以通过本地访问<code>http://localhost:16006</code>即可访问到跳板机的<code>127.0.0.1:6006</code>端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本机运行</span></span><br><span class="line">ssh -L 16006:127.0.0.1:6006 root@10.16.22.123</span><br></pre></td></tr></table></figure><h3 id="3、远程端口转发">3、远程端口转发</h3><p>远程端口指的是在远程 SSH 服务器建立的转发规则。</p><p>这种场景比较特殊，主要针对内网的情况。本地计算机在外网，SSH 跳板机和目标服务器都在内网，而且本地计算机无法访问内网之中的 SSH 跳板机，但是 SSH 跳板机可以访问本机计算机。</p><p>由于本机无法访问内网 SSH 跳板机，就无法从外网发起 SSH 隧道，建立端口转发。必须反过来，从 SSH 跳板机发起隧道，建立端口转发，这时就形成了远程端口转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R <span class="built_in">local</span>-port:target-host:target-port <span class="built_in">local</span> [-N] [-f]</span><br></pre></td></tr></table></figure><p>上面的命令，首先需要注意，不是在本机执行的，而是在 SSH 跳板机执行的，从跳板机去连接本地计算机。<code>-R</code>参数表示远程端口转发，<code>local-port</code>是本地计算机的端口，<code>target-host</code>和<code>target-port</code>是目标服务器(内网机器)及其端口，<code>local</code>是本地计算机。</p><p>举例来说，目标服务器在内网但可以访问外网，而跳板机不能直接访问内网，这时候就需要用远程端口转发，即可以直接使用跳板机访问内网</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内网机器运行，将内网服务器的22端口转发到跳板机的2222端口</span></span><br><span class="line">ssh -R 2222:localhost:22 root@114.215.200.71 -N -f</span><br><span class="line"><span class="comment">#在跳板机进行登录，即可访问内网目标服务器，注意端口开放，以及用户名的修改，localhost不变，其中若因为网络问题断线，可以下载autossh</span></span><br><span class="line">ssh shawn@localhost -p 2222</span><br></pre></td></tr></table></figure><h2 id="四、SSH其他命令">四、SSH其他命令</h2><h3 id="1、scp命令">1、scp命令</h3><p><code>scp</code>是 SSH 提供的一个客户端程序，用来在两台主机之间加密传送文件（即复制文件）。<code>scp</code>主要用于以下三种复制操作：</p><ul><li>本地复制到远程。</li><li>远程复制到本地。</li><li>两个远程系统之间的复制。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">scp <span class="built_in">source</span> destination</span><br><span class="line"><span class="comment">#上传design.tar.gz到服务器/shawn目录下,也可以反过来</span></span><br><span class="line">scp design.tar.gz root@114.215.200.70:/shawn</span><br><span class="line"><span class="comment">#上传目录</span></span><br><span class="line">scp -r 目录 用户名@ip:服务器绝对路径目录</span><br></pre></td></tr></table></figure><h3 id="2、sftp-命令">2、sftp 命令</h3><p><code>sftp</code>是 SSH 提供的一个客户端应用程序，主要用来安全地访问 FTP。因为 FTP 是不加密协议，很不安全，<code>sftp</code>就相当于将 FTP 放入了 SSH。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接</span></span><br><span class="line">sftp username@hostname</span><br><span class="line"><span class="comment"># 本地文件传输到远程主机。</span></span><br><span class="line">put localfile</span><br><span class="line"><span class="comment"># 远程文件传输到本地。</span></span><br><span class="line">get remotefile</span><br></pre></td></tr></table></figure><h3 id="3、rsync-命令">3、rsync 命令</h3><p>rsync 是一个常用的 Linux 应用程序，用于文件同步。</p><hr><p>参考文章:</p><p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a></p><p><a href="https://wangdoc.com/ssh/port-forwarding.html" target="_blank" rel="noopener">https://wangdoc.com/ssh/port-forwarding.html</a></p><p><a href="https://abcdabcd987.com/ssh/" target="_blank" rel="noopener">https://abcdabcd987.com/ssh/</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、SSH介绍&quot;&gt;一、SSH介绍&lt;/h2&gt;
&lt;p&gt;SSH是Secure Shell Protocol的简写，用于加密两台计算机之间的通信，并且支持各种身份验证机制。SSH先对联机数据包通过加密技术进行加密处理，加密后在进行数据传输。确保了传递的数据安全。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程几种实现方式</title>
    <link href="https://www.shawn22.xyz/posts/d5b482ca.html"/>
    <id>https://www.shawn22.xyz/posts/d5b482ca.html</id>
    <published>2021-03-19T03:15:27.000Z</published>
    <updated>2021-03-19T03:16:54.569Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、继承Thread类">1、继承Thread类</h4><blockquote><p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//4.创建Thread类的子类对象</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//5.开启线程</span></span><br><span class="line">        mt.setName(<span class="string">"多线程"</span>);</span><br><span class="line">        mt.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()  + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.继承Thread</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过匿名类创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//重写run方法,将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"thread"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实现Runnable接口">2、实现Runnable接口</h4><blockquote><p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p><p><code>public void run()</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//4,创建Runnable的子类对象</span></span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//5,将其当作参数传递给Thread的构造函数</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(mr,<span class="string">"myrunnable"</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()  + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1,定义一个类实现Runnable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部匿名类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//1,将Runnable的子类对象传递给Thread的构造方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//2,重写run方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//3,将要执行的代码写在run方法中</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//4,开启线程</span></span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、通过-Callable-和-Future-创建线程">3、通过 Callable 和 Future 创建线程</h4><ol><li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li><li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li><li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li><li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MyCallable mc = <span class="keyword">new</span> MyCallable(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;Integer&gt; f = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">        <span class="keyword">new</span> Thread(f).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(f.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="comment">//实现从1加到100并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCallable</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= number; x++) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、创建线程的三种方法对比">4、创建线程的三种方法对比</h4><ol><li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li><li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li></ol><h4 id="5、线程池">5、线程池</h4><p>Java中创建和销毁一个线程是比较昂贵的操作，需要系统调用。频繁创建和销毁线程会影响系统性能。于是线程池应运而生。其好处是可以抛出异常和有返回值。</p><ul><li>创建线程池对象</li><li>创建Runnable实例</li><li>提交Runnable实例</li><li>关闭线程池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交Runnable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以执行Runnable对象或者Callable对象代表的线程</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        pool.submit(<span class="keyword">new</span> MyRunnable());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1,定义一个类实现Runnable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提交Callable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以执行Runnable对象或者Callable对象代表的线程</span></span><br><span class="line">        Future&lt;Integer&gt; f1 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">100</span>));</span><br><span class="line">        Future&lt;Integer&gt; f2 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// V get()</span></span><br><span class="line">        Integer i1 = f1.get();</span><br><span class="line">        Integer i2 = f2.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="comment">//实现从1加到100并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCallable</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= number; x++) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://www.runoob.com/java/java-multithreading.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-multithreading.html</a></p><p><a href="https://blog.csdn.net/qq_40298054/article/details/87870297" target="_blank" rel="noopener">https://blog.csdn.net/qq_40298054/article/details/87870297</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1、继承Thread类&quot;&gt;1、继承Thread类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="多线程" scheme="https://www.shawn22.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令操作</title>
    <link href="https://www.shawn22.xyz/posts/2940781e.html"/>
    <id>https://www.shawn22.xyz/posts/2940781e.html</id>
    <published>2021-03-15T11:19:17.000Z</published>
    <updated>2021-03-15T11:22:29.690Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、文件目录操作">1、文件目录操作</h4><h5 id="ls命令">ls命令</h5><p>所有ls可以进行组合使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls -a <span class="comment">#列出目录所有文件，包含以.开始的隐藏文件</span></span><br><span class="line">ls -A <span class="comment">#列出除.及..的其它文件</span></span><br><span class="line">ls -r <span class="comment">#反序排列</span></span><br><span class="line">ls -t <span class="comment">#以文件修改时间排序</span></span><br><span class="line">ls -S <span class="comment">#以文件大小排序</span></span><br><span class="line">ls -h <span class="comment">#以易读大小显示</span></span><br><span class="line">ls -l <span class="comment">#除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出当前目录中以“l"开头的目录的详细内容</span></span><br><span class="line">ls -l l*</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="cd命令">cd命令</h5><p>切换目录，其中 ./指当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入根目录</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="comment">#进去当前账户home目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><h5 id="pwd命令">pwd命令</h5><p>查看当前工作目录路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示当前目录</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment">#显示当前软连接的实际目录</span></span><br><span class="line"><span class="built_in">pwd</span> -P</span><br></pre></td></tr></table></figure><h5 id="mkdir-命令">mkdir 命令</h5><p>创建文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在当前目录下创建目录</span></span><br><span class="line">mkdir <span class="built_in">test</span></span><br><span class="line"><span class="comment">#在/tmp下创建建目录(不存在就创建)</span></span><br><span class="line">mkdir -p /tmp/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h5 id="rmdir命令">rmdir命令</h5><p>删除文件夹，递归删除多个目录需要添加<code>-P</code>，另外只能删除空目录</p><h5 id="mv命令">mv命令</h5><p>移动或修改文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重命名，不同路径代表移动文件</span></span><br><span class="line">mv test.txt test.json</span><br><span class="line"><span class="comment">#将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</span></span><br><span class="line">mv -i log1.txt log2.txt</span><br><span class="line"><span class="comment">#将本级所有文件移动到上一级</span></span><br><span class="line">mv * ../</span><br></pre></td></tr></table></figure><h5 id="cp命令">cp命令</h5><p>复制文件或目录到新的路径，和mv操作类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-i <span class="comment">#提示</span></span><br><span class="line">-r <span class="comment">#复制目录及目录内所有项目</span></span><br><span class="line">-a <span class="comment">#复制的文件与原文件时间一样</span></span><br><span class="line">-p <span class="comment">#连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</span></span><br></pre></td></tr></table></figure><h5 id="rm命令">rm命令</h5><p>删除文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-f  <span class="comment">#忽略不存在的文件，不会出现警告，强制删除！</span></span><br><span class="line">-r  <span class="comment">#递归删除目录！</span></span><br><span class="line">-i  <span class="comment">#提示，删除询问是否删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除任何 .log 文件，删除前逐一询问确认</span></span><br><span class="line">rm -i *.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h5 id="ln命令">ln命令</h5><blockquote><p>硬链接：A—B，假设B是A的硬链接，那么他们两个指向了同一个文件！允许一个文件拥有多个路径，用户可以通过这种机制建立硬链接到一些重要文件上，防止误删！<br>软链接： 类似Window下的快捷方式，删除的源文件，快捷方式也访问不了！</p></blockquote><ul><li>-b 删除，覆盖以前建立的链接</li><li>-d 允许超级用户制作目录的硬链接</li><li>-f 强制执行</li><li>-i 交互模式，文件存在则提示用户是否覆盖</li><li>-n 把符号链接视为一般目录</li><li>-s 软链接(符号链接)</li><li>-v 显示详细的处理过程</li></ul><p><code> ln [参数][源文件或目录][目标文件或目录]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建软连接</span></span><br><span class="line">ln -s test1.log link2013</span><br></pre></td></tr></table></figure><h5 id="tar命令">tar命令</h5><p>文件打包与解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件打包</span></span><br><span class="line">tar -zcvf 打包名 文件</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">tar -zcvf design.tar.gz design/</span><br><span class="line"><span class="comment">#文件解压</span></span><br><span class="line">tar -zxvf 文件名</span><br></pre></td></tr></table></figure><h5 id="scp命令">scp命令</h5><p>Linux远程拷贝文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">scp 文件名 用户名@ip:服务器绝对路径目录</span><br><span class="line"><span class="comment">#上传design.tar.gz到服务器/shawn目录下</span></span><br><span class="line">scp design.tar.gz root@114.215.200.70:/shawn</span><br><span class="line"><span class="comment">#上传目录</span></span><br><span class="line">scp -r 目录 用户名@ip:服务器绝对路径目录</span><br></pre></td></tr></table></figure><h5 id="echo命令">echo命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若不存在就创建，存在就覆盖，使用&gt;&gt;为追加</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello world'</span> &gt; hw.text</span><br></pre></td></tr></table></figure><h5 id="find命令">find命令</h5><p><code>find 目录 参数</code></p><h5 id="touch命令">touch命令</h5><p>创建新文件，也可以使用vim/vi创建</p><h4 id="2、文件基本属性">2、文件基本属性</h4><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。在Linux中我们可以使用 <code>ll</code> 或者 <code>ls –l </code>命令来显示一个文件的属性以及文件所属的用户和组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx.   1 root root    7 5月  11 2019 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   5 root root 4096 11月 14 14:11 boot</span><br><span class="line">drwxr-xr-x    7 root root   73 1月   2 11:29 data</span><br></pre></td></tr></table></figure><p>在Linux中第一个字符代表这个文件是目录、文件或者链接文件等等。</p><ul><li>==当为【d】则是目录==</li><li>==当为【-】则是文件==</li><li>==若是【l】则标识为链接文档（link file）==</li><li>若是【b】则表示为装置文件里面的可供储存的接口设备（可随机存取装置）</li><li>若是【c】则表示为装置文件里面的串行端口设备，例如键盘、鼠标（一次性读取装置）。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/363003_1227493859FdXT.png" alt="363003_1227493859FdXT"></p><p>从左至右用0-9这些数字来表示。<br>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。<br>其中：</p><ul><li>第1、4、7位表示读权限，如果用&quot;r&quot;字符表示，则有读权限，如果用&quot;-&quot;字符表示，则没有读权限；</li><li>第2、5、8位表示写权限，如果用&quot;w&quot;字符表示，则有写权限，如果用&quot;-&quot;字符表示没有写权限；</li><li>第3、6、9位表示可执行权限，如果用&quot;x&quot;字符表示，则有执行权限，如果用&quot;-&quot;字符表示，则没有执行权限。</li></ul><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><h5 id="chgrp命令">chgrp命令</h5><p>更改文件属组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-R表示递归更改文件属组，就是在更改某个文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</span></span><br><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><h5 id="chown命令">chown命令</h5><p>更改文件的属主，也可以同时更改文件的属组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chown [-R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名:属组名 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#将install.log的拥有者与属组改回root</span></span><br><span class="line">chown root:root install.log</span><br></pre></td></tr></table></figure><h5 id="chmod命令-重要">chmod命令(重要)</h5><p>更改文件9个属性</p><p>Linux文件属性由两种设置方法，一种是数字，一种是符号。Linux文件的基本权限就有9个，分别是owner、group、others三种分别各有自己的read、write、execute权限。其中</p><ul><li>r:4</li><li>w:2</li><li>x:1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将test目录下所有文件启动所有权限</span></span><br><span class="line">chmod -R 777 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="3、文件内容查看">3、文件内容查看</h4><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl  显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>可以使用*man [命令]*来查看各个命令的使用文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat 文件</span><br><span class="line">nl [-bnw] 文件</span><br><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure><h4 id="4、磁盘管理">4、磁盘管理</h4><h5 id="df命令">df命令</h5><p>检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p><code>df [-ahikHTm] [目录或文件名]</code></p><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><h5 id="du命令">du命令</h5><p><code>du [-ahskm] 文件或目录名称</code></p><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G/M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询目录大小</span></span><br><span class="line">du -sh design/</span><br></pre></td></tr></table></figure><h4 id="5、账户管理">5、账户管理</h4><h5 id="useradd命令">useradd命令</h5><p>添加用户</p><ul><li>-m： 自动创建这个用户的主目录 /home/shawn</li><li>-G : 给用户分配组！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建用户，主目录 /home/shawn，本质往/etc/passwd写入了信息</span></span><br><span class="line">useradd -m shawn</span><br></pre></td></tr></table></figure><h5 id="userdel命令">userdel命令</h5><p>删除用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加上-r即删除时将目录空间一并删除</span></span><br><span class="line">userdel [-r] shawn</span><br></pre></td></tr></table></figure><h5 id="usermod命令">usermod命令</h5><p>修改账户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改主目录</span></span><br><span class="line">usermod -d /home/shawn22 shawn</span><br></pre></td></tr></table></figure><h5 id="passwd命令">passwd命令</h5><p>用户口令的管理，用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p><code>passwd 选项 用户名</code></p><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><blockquote><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p></blockquote><h4 id="6、进程管理">6、进程管理</h4><ul><li>在Linux中，每一个程序都是有自己的一个进程，每一个进程都有一个id号</li><li>每一个进程呢，都会有一个父进程！</li><li>进程可以有两种存在方式：前台/后台运行</li><li>一般的话服务都是后台运行的，基本的程序都是前台运行的！</li></ul><h5 id="ps命令">ps命令</h5><p>查看系统当前正在执行的各种进程信息</p><p><code>ps -xx</code></p><p>命令参数：</p><ul><li>a  显示所有进程</li><li>-a 显示同一终端下的所有程序</li><li>-A 显示所有进程</li><li>c  显示进程的真实名称</li><li>-N 反向选择</li><li>-e 等于“-A”</li><li>e  显示环境变量</li><li>f  显示程序间的关系</li><li>-H 显示树状结构</li><li>r  显示当前终端的进程</li><li>T  显示当前终端的所有程序</li><li>u  指定用户的所有进程</li><li>-au 显示较详细的资讯</li><li>-aux 显示所有包含其他使用者的行程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ps -aux 查看所有的进程</span></span><br><span class="line">ps -aux|grep mysql </span><br><span class="line"><span class="comment"># |  在Linux这个叫做管道符    A|B </span></span><br><span class="line"><span class="comment"># grep 查找文件中符合条件的字符串！</span></span><br><span class="line"><span class="comment"># 看父进程我们一般可以通过目录树结构来查看！</span></span><br><span class="line">ps -ef|grep mysql </span><br><span class="line"><span class="comment">#进程树，-p显示父id， -u显示用户组</span></span><br><span class="line">pstree -pu</span><br></pre></td></tr></table></figure><h5 id="kill命令">kill命令</h5><p>杀死进程，结束任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#表示强制结束该进程,进程id可通过ps查看</span></span><br><span class="line"><span class="built_in">kill</span> -9 进程的id</span><br></pre></td></tr></table></figure><h5 id="nohup命令-后台">nohup命令(后台)</h5><p>后台执行程序(no hang up不挂起)</p><p><code>nohup command &gt; myout.file 2&gt;&amp;1 &amp;</code></p><ul><li>command&gt;out.file是将command的输出重定向到out.file文件，即输出内容不打印到屏幕上，而是输出到out.file文件中</li><li>2&gt;&amp;1 也就表示将错误重定向到标准输出上</li><li>&amp; 放在命令到结尾，表示后台运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动python程序并将输出输出到python.txt文件中，后台</span></span><br><span class="line">nohup python tools/train.py&gt; python.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li>ctrl + z 可以将一个正在前台执行的命令放到后台，并且处于暂停状态。</li><li>Ctrl+c 终止前台命令。</li><li>jobs 查看当前有多少在后台运行的命令。jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1、文件目录操作&quot;&gt;1、文件目录操作&lt;/h4&gt;
&lt;h5 id=&quot;ls命令&quot;&gt;ls命令&lt;/h5&gt;
&lt;p&gt;所有ls可以进行组合使用&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls -a &lt;span class=&quot;comment&quot;&gt;#列出目录所有文件，包含以.开始的隐藏文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -A &lt;span class=&quot;comment&quot;&gt;#列出除.及..的其它文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -r &lt;span class=&quot;comment&quot;&gt;#反序排列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -t &lt;span class=&quot;comment&quot;&gt;#以文件修改时间排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -S &lt;span class=&quot;comment&quot;&gt;#以文件大小排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -h &lt;span class=&quot;comment&quot;&gt;#以易读大小显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -l &lt;span class=&quot;comment&quot;&gt;#除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#列出当前目录中以“l&quot;开头的目录的详细内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -l l*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合ElasticSearch7.x</title>
    <link href="https://www.shawn22.xyz/posts/803c8798.html"/>
    <id>https://www.shawn22.xyz/posts/803c8798.html</id>
    <published>2021-03-15T11:16:04.000Z</published>
    <updated>2021-03-15T11:22:29.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介和下载">一、简介和下载</h2><h4 id="1、windows-es下载安装">1、windows es下载安装</h4><blockquote><p>**Elasticsearch(ES)**是一个基于<a href="https://zh.wikipedia.org/wiki/Lucene" target="_blank" rel="noopener">Lucene</a>库的<a href="https://zh.wikipedia.org/wiki/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E" target="_blank" rel="noopener">搜索引擎</a>。它提供了一个分布式、支持多租户的<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E6%96%87%E6%AA%A2%E7%B4%A2" target="_blank" rel="noopener">全文搜索</a>引擎，具有<a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a> Web接口和无模式<a href="https://zh.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">JSON</a>文档。Elasticsearch是用<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener">Java</a>开发的，并在<a href="https://zh.wikipedia.org/wiki/Apache%E8%AE%B8%E5%8F%AF%E8%AF%81" target="_blank" rel="noopener">Apache许可证</a>下作为开源软件发布。Elasticsearch可以用于搜索各种文档。它提供可扩展的搜索，具有接近实时的搜索，并支持多租户。</p></blockquote><p><a href="https://elasticsearch.cn/download/" target="_blank" rel="noopener">Elasticsearch下载地址</a></p><a id="more"></a><p>这里我选择了7.10.2，并使用迅雷下载，速度还可以</p><p>解压后目录结构</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">bin</span> <span class="comment">#启动文件</span></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line"><span class="string">log4j2</span> <span class="comment">#日志配置文件</span></span><br><span class="line"><span class="string">jvm.options</span> <span class="comment">#java虚拟机相关配置</span></span><br><span class="line"><span class="string">elasticsearch.yml</span> <span class="comment">#elasticsearch的配置文件 默认9200端口</span></span><br><span class="line"><span class="string">lib</span> <span class="comment">#相关jar包</span></span><br><span class="line"><span class="string">logs</span> <span class="comment">#日志</span></span><br><span class="line"><span class="string">modules</span> <span class="comment">#功能模块</span></span><br><span class="line"><span class="string">plugins</span> <span class="comment">#插件</span></span><br></pre></td></tr></table></figure><p>进入bin目录双击<code>elasticsearch.bat</code>，然后访问<code>http://127.0.0.1:9200/</code>,成功出现以下json信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"SHAWN"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span>: <span class="string">"jsUcSDzlQ_W7ikv3MOWrBw"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: &#123;</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"7.10.2"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span>: <span class="string">"zip"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span>: <span class="string">"747e1cc71def077253878a59143c1f785afa92b9"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span>: <span class="string">"2021-01-13T00:42:12.435326Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span>: <span class="string">"8.7.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span>: <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span>: <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、可视化插件">2、可视化插件</h4><ol><li>github地址：<a href="https://github.com/mobz/elasticsearch-head%EF%BC%8C%E6%8C%89%E6%93%8D%E4%BD%9C%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%EF%BC%9B%E8%8B%A5%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head，按操作运行项目；若出现跨域问题进行配置</a></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: "*"</span><br></pre></td></tr></table></figure><ol start="2"><li>google商店搜索ElasticSearch Head，安装插件</li></ol><h4 id="3、Kibana-下载与安装">3、Kibana 下载与安装</h4><blockquote><p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。<br>Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。<br>Logstash 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。<br>Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好Web 界面，可以帮助汇总、分析和搜索重要数据日志。</p></blockquote><p><a href="https://elasticsearch.cn/download/" target="_blank" rel="noopener">Kibana 下载地址</a></p><p>注意要和ES版本一致</p><p>解压打开<code>bin/kibana.bat</code>浏览器<code>http://localhost:5601/</code></p><p>汉化，在<code>config/kibana.yml</code>下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n.locale: "zh-CN"</span><br></pre></td></tr></table></figure><h2 id="二、核心概念">二、核心概念</h2><ol><li>索引</li><li>字段类型(mapping)</li><li>文档(documents)（倒排索引）</li></ol><h2 id="三、IK分词器">三、IK分词器</h2><blockquote><p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，比<br>如果要使用中文，建议使用ik分词器！</p></blockquote><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">下载安装地址</a></p><p>下载完成后放入es plugins中（注意版本匹配），之后重启es</p><p><code>ik_smart</code>最少切分，<code>ik_max_word</code>最细粒度划分，穷尽词库可能</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Kibana 控制台进行访问</span></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"中国共产党"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"中国共产党"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ik分词器增加自己目录</p></blockquote><p>在插件目录下<code>config/IKAnalyzer.cfg.xml</code>进行配置</p><h2 id="四、ES基础测试">四、ES基础测试</h2><h4 id="1-创建一个索引">1.创建一个索引</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># put /索引名/~类型名~/文档id</span><br><span class="line">PUT /test1/type1/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"shawn"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="string">"18"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符串类型<br>text、keyword</li><li>数值类型<br>long，integer，short，byte，double，float，half float，scaled float</li><li>日期类型<br>date</li><li>te布尔值类型<br>boolean</li><li>二进制类型<br>binary</li></ul><h4 id="2-映射，默认是-doc">2.映射，默认是_doc</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /test2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>:&#123;</span><br><span class="line">      <span class="attr">"name"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"address"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"age"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-更新-有值就更新">3.更新(有值就更新)</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /test1/type1/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"shawn"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="string">"20"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、简单查询">4、简单查询</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test1/_search?q=name:shawn</span><br></pre></td></tr></table></figure><h4 id="5、复杂操作搜索">5、复杂操作搜索</h4><p>select（排序，分页，高亮，模糊查询，精准查询！）,里面可以有很多查询操作，和mysql类似</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>:&#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"shawn"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"18"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_source"</span>: [<span class="string">"name"</span>,<span class="string">"age"</span>],</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre_tags"</span>:<span class="string">"&lt;p class='key' style='color:red'&gt;"</span>,</span><br><span class="line"><span class="attr">"post_tags"</span>:<span class="string">"&lt;/p&gt;"</span>,</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>text</code>类型可以被分词 <code>keyword</code>不能被分词</p><ul><li>匹配</li><li>按照条件匹配</li><li>精确匹配</li><li>区间范围匹配</li><li>匹配字段过滤</li><li>多条件查询</li><li>高亮查询</li></ul><h2 id="五、springboot整合es">五、springboot整合es</h2><h4 id="1、引入maven依赖">1、引入maven依赖</h4><p>我的springboot版本是<code>2.4.2</code>，es版本是7.10.2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;7.10.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;7.10.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.70&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2、创建配置文件">2、创建配置文件</h4><p>创建<code>config/ElasticSearchConfig.java</code>配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();</span><br><span class="line">        COMMON_OPTIONS = builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"127.0.0.1"</span>, <span class="number">9200</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、创建实体类">3、创建实体类</h4><p>创建<code>pojo/User.java</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、测试文件">4、测试文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试索引的创建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建索引请求</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="comment">// 客户端执行请求</span></span><br><span class="line">        CreateIndexResponse createIndexResponse =</span><br><span class="line">                client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(createIndexResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testExistIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> exists = client.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(delete.isAcknowledged());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加文档</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"shawn"</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">// 创建请求</span></span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="comment">// 规则</span></span><br><span class="line">        request.id(<span class="string">"1"</span>);</span><br><span class="line">        request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">        request.timeout(<span class="string">"1s"</span>);</span><br><span class="line">        <span class="comment">// 将微码数据放入请求 json</span></span><br><span class="line">        request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">        <span class="comment">// 客户端发送请求</span></span><br><span class="line">        IndexResponse index = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(index.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文档</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testIsExists</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="comment">// 不获取返回的source上下文</span></span><br><span class="line">        getRequest.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">boolean</span> exists = client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"shawn_index"</span>,<span class="string">"1"</span>);</span><br><span class="line">        GetResponse documentFields = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 打印文档</span></span><br><span class="line">        System.out.println(documentFields.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"shawn_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">        request.timeout(<span class="string">"1s"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"shawn22"</span>,<span class="number">22</span>);</span><br><span class="line">        request.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line">        UpdateResponse update = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 打印文档</span></span><br><span class="line">        System.out.println(update.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"shawn_index"</span>,<span class="string">"1"</span>);</span><br><span class="line">        DeleteResponse delete = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 打印文档</span></span><br><span class="line">        System.out.println(delete.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特殊的，真的项目一般都会批量插入数据！</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        BulkRequest bulkRequest=<span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">"10s"</span>);</span><br><span class="line">        ArrayList&lt;User&gt; userlist=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userlist.add(<span class="keyword">new</span> User(<span class="string">"shawn1"</span>,<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//批处理请求</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; userlist.size();i++)&#123;</span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                <span class="keyword">new</span> IndexRequest(<span class="string">"shawn_index"</span>)</span><br><span class="line">                        .id(<span class="string">""</span>+(i+<span class="number">1</span>))</span><br><span class="line">                        .source(JSON.toJSONString(userlist.get(i)),XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line">        BulkResponse bulk = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(bulk.hasFailures());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 构建搜索条件</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="comment">// 查询条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">// 匹配所有</span></span><br><span class="line">        <span class="comment">// QueryBuilders.matchAllQuery();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// termquery精确匹配</span></span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"name"</span>, <span class="string">"shawn1"</span>);</span><br><span class="line">        searchSourceBuilder.query(termQueryBuilder);</span><br><span class="line">        searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        searchSourceBuilder.from(<span class="number">1</span>);</span><br><span class="line">        searchSourceBuilder.size(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// // 高亮</span></span><br><span class="line">        <span class="comment">// HighlightBuilder highlightBuilder = new HighlightBuilder();</span></span><br><span class="line">        <span class="comment">// highlightBuilder.field("name");</span></span><br><span class="line">        <span class="comment">// // 关闭多个高亮匹配</span></span><br><span class="line">        <span class="comment">// highlightBuilder.requireFieldMatch(false);</span></span><br><span class="line">        <span class="comment">// highlightBuilder.preTags("&lt;span style='color:red'&gt;");</span></span><br><span class="line">        <span class="comment">// highlightBuilder.postTags("&lt;/span&gt;");</span></span><br><span class="line">        <span class="comment">// searchSourceBuilder.highlighter(highlightBuilder);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行搜索</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 解析结果</span></span><br><span class="line">        System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">        System.out.println(<span class="string">"========================="</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// // 如果高亮了需要解析高亮字段</span></span><br><span class="line">        <span class="comment">// ArrayList&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// for (SearchHit hit : searchResponse.getHits()) &#123;</span></span><br><span class="line">        <span class="comment">//     // 解析高亮</span></span><br><span class="line">        <span class="comment">//     Map&lt;String, HighlightField&gt; highlightFieldMap = hit.getHighlightFields();</span></span><br><span class="line">        <span class="comment">//     HighlightField highlightField = highlightFieldMap.get("name");</span></span><br><span class="line">        <span class="comment">//     Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span></span><br><span class="line">        <span class="comment">//     // 替换原来的</span></span><br><span class="line">        <span class="comment">//     if(highlightField!=null)&#123;</span></span><br><span class="line">        <span class="comment">//         Text[] fragments = highlightField.fragments();</span></span><br><span class="line">        <span class="comment">//         String n_highlightField = "";</span></span><br><span class="line">        <span class="comment">//         for (Text text : fragments) &#123;</span></span><br><span class="line">        <span class="comment">//             n_highlightField += text;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         sourceAsMap.put("name",n_highlightField);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     list.add(sourceAsMap);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、简介和下载&quot;&gt;一、简介和下载&lt;/h2&gt;
&lt;h4 id=&quot;1、windows-es下载安装&quot;&gt;1、windows es下载安装&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;**Elasticsearch(ES)**是一个基于&lt;a href=&quot;https://zh.wikipedia.org/wiki/Lucene&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lucene&lt;/a&gt;库的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;搜索引擎&lt;/a&gt;。它提供了一个分布式、支持多租户的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%A8%E6%96%87%E6%AA%A2%E7%B4%A2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;全文搜索&lt;/a&gt;引擎，具有&lt;a href=&quot;https://zh.wikipedia.org/wiki/HTTP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP&lt;/a&gt; Web接口和无模式&lt;a href=&quot;https://zh.wikipedia.org/wiki/JSON&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JSON&lt;/a&gt;文档。Elasticsearch是用&lt;a href=&quot;https://zh.wikipedia.org/wiki/Java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java&lt;/a&gt;开发的，并在&lt;a href=&quot;https://zh.wikipedia.org/wiki/Apache%E8%AE%B8%E5%8F%AF%E8%AF%81&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache许可证&lt;/a&gt;下作为开源软件发布。Elasticsearch可以用于搜索各种文档。它提供可扩展的搜索，具有接近实时的搜索，并支持多租户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://elasticsearch.cn/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Elasticsearch下载地址&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="ElasticSearch" scheme="https://www.shawn22.xyz/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot日志总结</title>
    <link href="https://www.shawn22.xyz/posts/ece49569.html"/>
    <id>https://www.shawn22.xyz/posts/ece49569.html</id>
    <published>2021-03-15T11:11:23.000Z</published>
    <updated>2021-03-15T11:22:29.693Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中，我们经常使用 <code>System.out.println()</code> 来打印一些信息，但是这样不好，因为大量的使用 <code>System.out</code> 会增加资源的消耗，而且部署在Linux上时只能通过日志来查看输出。我们实际项目中使用的是 <code>slf4j</code> 的 <code>logback</code> 来输出日志,<code>slf4j+logback</code>也是springboot的默认日志框架，当然<code>logback</code>也可以换成性能更好的<code>log4j2</code>框架。</p><a id="more"></a><h2 id="1-slf4j-介绍">1. slf4j 介绍</h2><blockquote><p>SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。</p></blockquote><p>slf4j要求我们只需要按统一的方式写记录日志的代码，而无需关心日志是通过哪个日志系统，以什么风格输出的。因为它们取决于部署项目时绑定的日志系统。</p><p>首先需要添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面的springboot依赖已经包含上面的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日志的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Test<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//logger.info("test");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种方法通过注解方式，需要安装好Lombok插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// log.info("test");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-application-yml-中对日志的配置">2. application.yml 中对日志的配置</h2><p><code>application.yml</code> 文件是 Spring Boot 中唯一一个需要配置的文件，一开始创建工程的时候是 <code>application.properties</code> 文件(*注：同一优先级位置同时有 <code>application.properties </code>和 <code>application.yml </code>，那么 <code>application.yml</code> 里的属性会覆盖 <code>application.properties </code>里的属性)</p><p>这里我们对 application.yml 文件中对日志的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  config: classpath:logback.xml </span><br><span class="line">  level:</span><br><span class="line">    com.test: trace</span><br></pre></td></tr></table></figure><p><code>logging.config</code> 是用来指定项目启动的时候，读取哪个配置文件，这里指定的是日志配置文件是根路径下的 <code>logback.xml</code> 文件，关于日志的相关配置信息，都放在 <code>logback.xml</code> 文件中了。<code>logging.level</code> 是用来指定具体的 mapper 中日志的输出级别，上面的配置表示 <code>com.test</code> 包下的所有日志输出级别为 trace，会打印出所以debug以上信息。在生产环境上，将这个日志级别再设置成 error 级别即可。当然在 application.yml 中还可以显示定义其他例如<code>logging.pattern.console</code>等配置信息。</p><p>常用的日志级别按照从高到低依次为：ERROR、WARN、INFO、DEBUG。</p><p><em>对于classpath路径，src 路径下的文件 在编译后都会放到 WEB-INF/classes 路径下。默认classpath 就是指这里。用maven构建 项目时，resources 目录就是默认的classpath</em></p><h2 id="3-logback-xml-配置文件解析">3. logback.xml 配置文件解析</h2><p>在上面 <code>application.yml</code> 文件中，我们指定了日志配置文件 <code>logback.xml</code>，<code>logback.xml</code> 文件中主要用来做日志的相关配置。在 <code>logback.xml</code> 中，我们可以定义日志输出的格式、路径、控制台输出格式、文件大小、保存时长等等。下面来分析一下：</p><h3 id="3-1-定义日志输出格式和存储路径">3.1 定义日志输出格式和存储路径</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"%date&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_PATH"</span> <span class="attr">value</span>=<span class="string">"D:/logs/demo.%d&#123;yyyy-MM-dd&#125;.%i.log"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">日志输出格式:</span><br><span class="line">%d表示日期时间，</span><br><span class="line">%thread表示线程名，</span><br><span class="line">%-5level :级别从左显示5个字符宽度</span><br><span class="line">%logger&#123;50&#125;表示logger名字最长50个字符,否则按照句点分割。</span><br><span class="line">%msg:日志消息，</span><br><span class="line">%n是换行符</span><br><span class="line"></span><br><span class="line">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure><p>对于“FILE_PATH” 文件路径，日志都会存储在该路径下。<code>%i</code> 表示第 i 个文件，当日志文件达到指定大小时，会将日志生成到新的文件里，这里的 i 就是文件索引，日志文件允许的大小可以设置。这里需要注意的是，不管是 windows 系统还是 Linux 系统，日志存储的路径必须要是绝对路径。</p><p>如果想在控制台换成彩色打印输出，可以在<code>&lt;configuration&gt;</code>里添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 彩色日志配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;green&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;)&#123;red&#125; %clr($&#123;PID:-&#125;)&#123;magenta&#125; %clr(---)&#123;blue&#125; %clr([%30.30t])&#123;yellow&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;blue&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-定义控制台输出">3.2 定义控制台输出</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照上面配置的LOG_PATTERN来打印日志，若彩色打印，将pattern中名字换成彩色日志格式即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>&lt;appender&gt;</code> 节点设置个控制台输出（<code>class=&quot;ch.qos.logback.core.ConsoleAppender&quot;</code>）的配置，定义为 “CONSOLE”。使用上面定义好的输出格式（LOG_PATTERN）来输出，使用 <code>${}</code> 引用进来即可。</p><h3 id="3-3-定义日志文件的相关参数">3.3 定义日志文件的相关参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按照上面配置的FILE_PATH路径来保存日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;FILE_PATH&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志保存30天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单个日志文件的最大，超过则新建日志文件存储 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>30MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按照上面配置的LOG_PATTERN来打印日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>&lt;appender&gt;</code> 定义一个名为 “FILE” 的文件配置，主要是配置日志文件保存的时间、单个日志文件存储的大小、以及文件保存的路径和日志的输出格式。</p><h3 id="3-4-定义日志输出级别">3.4 定义日志输出级别</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.test"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--在这里可以配置多种文件输出，只需要配置好相应的appender--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了上面那些定义后，最后我们使用 <code>&lt;logger&gt;</code> 来定义一下项目中默认的日志输出级别，这里定义级别为 INFO，然后针对 INFO 级别的日志，使用 <code>&lt;root&gt;</code> 引用上面定义好的控制台日志输出和日志文件的参数。这样 logback.xml 文件中的配置就设置完了。</p><h2 id="4-Springboot默认日志logback切换为log4j2">4.Springboot默认日志logback切换为log4j2</h2><p>首先 ，引入log4j2的starter，将logback.xml改为log4j2的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后需要排除spring自带的日志框架logback依赖，如果项目中只引入了web的starter，则可以在web starter中排除掉logging</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果项目中引入的不止web starter，此时我们需要在spring-boot-starter中排除logging的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://blog.csdn.net/java821643/article/details/88753898" target="_blank" rel="noopener">https://blog.csdn.net/java821643/article/details/88753898</a></p><p><a href="http://logback.qos.ch/manual/index.html" target="_blank" rel="noopener">http://logback.qos.ch/manual/index.html</a></p><p><a href="https://blog.csdn.net/weixin_39370859/article/details/105039787" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39370859/article/details/105039787</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在开发中，我们经常使用 &lt;code&gt;System.out.println()&lt;/code&gt; 来打印一些信息，但是这样不好，因为大量的使用 &lt;code&gt;System.out&lt;/code&gt; 会增加资源的消耗，而且部署在Linux上时只能通过日志来查看输出。我们实际项目中使用的是 &lt;code&gt;slf4j&lt;/code&gt; 的 &lt;code&gt;logback&lt;/code&gt; 来输出日志,&lt;code&gt;slf4j+logback&lt;/code&gt;也是springboot的默认日志框架，当然&lt;code&gt;logback&lt;/code&gt;也可以换成性能更好的&lt;code&gt;log4j2&lt;/code&gt;框架。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="日志" scheme="https://www.shawn22.xyz/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot异步、邮件、定时任务</title>
    <link href="https://www.shawn22.xyz/posts/87f335be.html"/>
    <id>https://www.shawn22.xyz/posts/87f335be.html</id>
    <published>2021-03-15T11:07:24.000Z</published>
    <updated>2021-03-15T11:29:44.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、异步任务">一、异步任务</h2><p>首先在service服务类上添加注解<code>@Async</code>，然后在Application启动类上添加<code>@EnableAsync</code>注解即可</p><a id="more"></a><h2 id="二、邮件任务">二、邮件任务</h2><h3 id="1、引入maven依赖">1、引入maven依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、配置yml文件">2、配置yml文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">your</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">your</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="comment">#开启加密验证</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail.smtl.ssl.enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里需要注意开通<code>POP3/SMTP服务</code>，以QQ邮箱为例，<code>首页-&gt;设置-&gt;账户</code>找到<code>POP3/SMTP服务</code>并开启，开启后会获得一个password，而username就填你的邮箱地址</p><p><img src="https://img-blog.csdnimg.cn/20210315192806333.png" alt="在这里插入图片描述"></p><h3 id="3、编写发送邮件服务类">3、编写发送邮件服务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LearnApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSenderImpl javaMailSender;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//简单邮件</span></span><br><span class="line">        SimpleMailMessage mailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">//邮件主题</span></span><br><span class="line">        mailMessage.setSubject(<span class="string">"hello shawn"</span>);</span><br><span class="line">        <span class="comment">//正文</span></span><br><span class="line">        mailMessage.setText(<span class="string">"很高兴认识你"</span>);</span><br><span class="line">        <span class="comment">//接受者的邮箱地址</span></span><br><span class="line">        mailMessage.setTo(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line">        <span class="comment">//发送者的邮箱地址</span></span><br><span class="line">        mailMessage.setFrom(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        javaMailSender.send(mailMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException, ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//复杂邮件</span></span><br><span class="line">        MimeMessage mailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">//组装</span></span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mailMessage,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//邮件主题</span></span><br><span class="line">        helper.setSubject(<span class="string">"hello shawn"</span>);</span><br><span class="line">        <span class="comment">//正文，可以支持html解析</span></span><br><span class="line">        helper.setText(<span class="string">"&lt;p style='color:red'&gt;很高兴认识你&lt;p&gt;"</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//附件</span></span><br><span class="line">        helper.addAttachment(<span class="string">"1.jpg"</span>,<span class="keyword">new</span> File(<span class="string">"C:\\Users\\Shawn\\Desktop\\1.jpg"</span>));</span><br><span class="line"> <span class="comment">//接受者的邮箱地址</span></span><br><span class="line">        helper.setTo(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line">         <span class="comment">//发送者的邮箱地址</span></span><br><span class="line">        helper.setFrom(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        javaMailSender.send(mailMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、定时任务">三、定时任务</h2><p>首先在主启动类上添加<code>@EnableScheduling</code>，之后在服务类上添加<code>@Scheduled(cron=&quot;xxx&quot;)</code>，例如<code>@Scheduled(cron=&quot;0 * * * * 0-7&quot;)</code>，cron顺序分别为<code>秒，分，时，日，月，周几</code></p><p><a href="https://crontab.guru/" target="_blank" rel="noopener">cron在线生成网站</a></p><p><strong>常用表达式例子</strong></p><p><strong>0 0 2 1 * ? *</strong>  表示在每月的1日的凌晨2点调整任务</p><p><strong>0 15 10 ? * MON-FRI</strong>  表示周一到周五每天上午10:15执行作业</p><p><strong>0 15 10 ? 6L 2002-2006</strong>  表示2002-2006年的每个月的最后一个星期五上午10:15执行作</p><p><strong>0 0 10,14,16 * * ?</strong>  每天上午10点，下午2点，4点</p><p><strong>0 0/30 9-17 * * ?</strong>  朝九晚五工作时间内每半小时</p><p><strong>0 0 12 ? * WED</strong>   表示每个星期三中午12点</p><p><strong>0 0 12 * * ?</strong>  每天中午12点触发</p><p><strong>0 15 10 ? * *</strong>   每天上午10:15触发</p><p><strong>0 15 10 * * ?</strong>   每天上午10:15触发</p><p><strong>0 15 10 * * ? *</strong>   每天上午10:15触发<br><strong>0 15 10 * * ? 2005</strong>   2005年的每天上午10:15触发<br><strong>0 * 14 * * ?</strong>   在每天下午2点到下午2:59期间的每1分钟触发<br><strong>0 0/5 14 * * ?</strong>   在每天下午2点到下午2:55期间的每5分钟触发<br><strong>0 0/5 14,18 * * ?</strong>   在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发<br><strong>0 0-5 14 * * ?</strong>   在每天下午2点到下午2:05期间的每1分钟触发<br><strong>0 10,44 14 ? 3 WED</strong>   每年三月的星期三的下午2:10和2:44触发<br><strong>0 15 10 ? * MON-FRI</strong>   周一至周五的上午10:15触发<br><strong>0 15 10 15 * ?</strong>   每月15日上午10:15触发<br><strong>0 15 10 L * ?</strong>   每月最后一日的上午10:15触发<br><strong>0 15 10 ? * 6L</strong>   每月的最后一个星期五上午10:15触发<br><strong>0 15 10 ? * 6L 2002-2005</strong>  2002年至2005年的每月的最后一个星期五上午10:15触发<br><strong>0 15 10 ? * 6#3</strong>  每月的第三个星期五上午10:15触发</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、异步任务&quot;&gt;一、异步任务&lt;/h2&gt;
&lt;p&gt;首先在service服务类上添加注解&lt;code&gt;@Async&lt;/code&gt;，然后在Application启动类上添加&lt;code&gt;@EnableAsync&lt;/code&gt;注解即可&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="任务" scheme="https://www.shawn22.xyz/tags/%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="SpringBoot" scheme="https://www.shawn22.xyz/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>spring整合POI及EasyExcel</title>
    <link href="https://www.shawn22.xyz/posts/d48f4301.html"/>
    <id>https://www.shawn22.xyz/posts/d48f4301.html</id>
    <published>2021-03-15T09:48:40.000Z</published>
    <updated>2021-03-15T11:22:29.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、POI与EasyExcel介绍">1、POI与EasyExcel介绍</h3><p>Apache POI官网: <a href="https://poi.apache.org/" target="_blank" rel="noopener">https://poi.apache.org/</a></p><blockquote><p>Apache POI 简介是用Java编写的免费开源的跨平台的 Java API，Apache POI提供API给Java程式对Microsoft Office（Excel、WORD、PowerPoint、Visio等）格式档案读和写的功能。</p></blockquote><a id="more"></a><p>基本功能**(原生)</p><ol><li>HSSF – 提供读写Microsoft Excel各式档案的功能。(03版本)</li><li>XSSF – 提供读写Microsoft Excel OOXML各式档案的功能。(07版本)</li><li>HWPF – 提供读写Microsoft Word各式档案的功能。</li><li>HSLF – 提供读写Microsof PowerPoint格式档案的功能。</li><li>HDGF – 提供读写Microsoft Visio格式档案的功能。</li></ol><p>Easy Excel官方文档：<a href="https://www.yuque.com/easyexcel/doc/easyexcel" target="_blank" rel="noopener">https://www.yuque.com/easyexcel/doc/easyexcel</a></p><blockquote><p>Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，能够原本一个3M的excel用POI sax依然需要100M左右内存降低到几M，并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。在上层做了模型转换的封装，让使用者更加简单方便</p></blockquote><h3 id="2、POI-Excel操作">2、POI-Excel操作</h3><p><strong>导入maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--xls(03)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--xlsx(07)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日期格式化工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==注:== 03版本和07版本存在兼容性问题，03版本最多支持65535行</p><p><strong>POI-Excel写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelWriteTest</span> </span>&#123;</span><br><span class="line">    String path = <span class="string">"./"</span>;</span><br><span class="line">    <span class="comment">// 基本写</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建一个工作簿(03版本）</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">//07版本</span></span><br><span class="line">        <span class="comment">// Workbook workbook = new XSSFWorkbook();</span></span><br><span class="line">        <span class="comment">// 2、创建一个工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet(<span class="string">"shawn科技"</span>);</span><br><span class="line">        <span class="comment">// 3、创建一行</span></span><br><span class="line">        Row row1 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 4、创建一个单元格（1,1）</span></span><br><span class="line">        Cell cell11 = row1.createCell(<span class="number">0</span>);</span><br><span class="line">        cell11.setCellValue(<span class="string">"今日新增访客"</span>);</span><br><span class="line">        <span class="comment">// （1,2）</span></span><br><span class="line">        Cell cell12 = row1.createCell(<span class="number">1</span>);</span><br><span class="line">        cell12.setCellValue(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 第二行</span></span><br><span class="line">        Row row2 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        Cell cell21 = row2.createCell(<span class="number">0</span>);</span><br><span class="line">        cell21.setCellValue(<span class="string">"统计时间"</span>);</span><br><span class="line">        <span class="comment">// (2,2)</span></span><br><span class="line">        Cell cell22 = row2.createCell(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 注意是joda的DateTime</span></span><br><span class="line">        String s = <span class="keyword">new</span> DateTime().toString(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        cell22.setCellValue(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成一张表（IO流，03版本）</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(path+<span class="string">"shanw科技.xls"</span>);</span><br><span class="line">        <span class="comment">// 07版本</span></span><br><span class="line">        <span class="comment">// FileOutputStream fileOutputStream = new FileOutputStream(path+"shanw科技.xlsx");</span></span><br><span class="line">        workbook.write(fileOutputStream);</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        System.out.println(<span class="string">"版本生成完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//大数据写</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWriteBigData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 时间</span></span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建一个工作簿(03版本）</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">// 07版本</span></span><br><span class="line">        <span class="comment">// Workbook workbook = new XSSFWorkbook();</span></span><br><span class="line">        <span class="comment">// 07版本加速，会产生临时文件</span></span><br><span class="line">        <span class="comment">// Workbook workbook = new SXSSFWorkbook();</span></span><br><span class="line">        <span class="comment">// 2、创建一个工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet(<span class="string">"shawn科技"</span>);</span><br><span class="line">        <span class="comment">// 写入数据，07版本没有限制，但是会比较慢</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">0</span>; rowNum &lt; <span class="number">65536</span>; rowNum++)&#123;</span><br><span class="line">            Row row = sheet.createRow(rowNum);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>; cellNum &lt; <span class="number">10</span>; cellNum++)&#123;</span><br><span class="line">                Cell cell = row.createCell(cellNum);</span><br><span class="line">                cell.setCellValue(cellNum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成一张表（IO流，03版本）</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(path+<span class="string">"shawn科技.xls"</span>);</span><br><span class="line">        <span class="comment">// 07版本</span></span><br><span class="line">        <span class="comment">// FileOutputStream fileOutputStream = new FileOutputStream(path+"shanw科技.xlsx");</span></span><br><span class="line">        workbook.write(fileOutputStream);</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">// 如果开启了SXSSFWorkbook，清除临时文件</span></span><br><span class="line">        <span class="comment">// ((SXSSFWorkbook)workbook).dispose();</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"时间为"</span>+(<span class="keyword">double</span>)(end-begin)/<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>POI-Excel读</strong></p><p>其中表格<code>会员消费商品明细表.xls</code>内容如下</p><table><thead><tr><th>卡号</th><th>持卡人</th><th>手机号</th><th>消费日期</th><th>小票号</th><th>商品编号</th></tr></thead><tbody><tr><td>100088</td><td>shawn</td><td>12333333333</td><td>2021/2/22</td><td>0000201510200146</td><td>PV700012</td></tr><tr><td>100089</td><td>shawn22</td><td>12333333333</td><td>2021/2/22</td><td>0000201510200146</td><td>PV700006</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelReadTest</span> </span>&#123;</span><br><span class="line">    String path = <span class="string">"./"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本读操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文件流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(path + <span class="string">"shawn科技.xls"</span>);</span><br><span class="line">        <span class="comment">// 创建工作簿03版本，07版本相对应变化</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(fileInputStream);</span><br><span class="line">        Sheet sheetAt = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        Row row = sheetAt.getRow(<span class="number">0</span>);</span><br><span class="line">        Cell cell = row.getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//类型注意</span></span><br><span class="line">        <span class="comment">// cell.getNumericCellValue();</span></span><br><span class="line">        System.out.println(cell.getStringCellValue());</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取内容</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCellType</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文件流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(path + <span class="string">"会员消费商品明细表.xls"</span>);</span><br><span class="line">        <span class="comment">// 创建工作簿03版本，07版本相对应变化</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(fileInputStream);</span><br><span class="line">        <span class="comment">//获取标题，假设这个文件标题都在第一行</span></span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        Row rowTitle = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (rowTitle != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 重要</span></span><br><span class="line">            <span class="keyword">int</span> physicalNumberOfCells = rowTitle.getPhysicalNumberOfCells();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>; cellNum &lt; physicalNumberOfCells; cellNum++) &#123;</span><br><span class="line">                Cell cell = rowTitle.getCell(cellNum);</span><br><span class="line">                <span class="keyword">if</span> (cell != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String stringCellValue = cell.getStringCellValue();</span><br><span class="line">                    System.out.print(stringCellValue + <span class="string">"|"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取表中内容，可以封装成工具类使用，03版本和07有区别</span></span><br><span class="line">        <span class="keyword">int</span> physicalNumberOfRows = sheet.getPhysicalNumberOfRows();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">1</span>; rowNum &lt; physicalNumberOfRows; rowNum++) &#123;</span><br><span class="line">            Row rowData = sheet.getRow(rowNum);</span><br><span class="line">            <span class="keyword">if</span> (rowData != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//读取列</span></span><br><span class="line">                <span class="keyword">int</span> cellCount = rowTitle.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>; cellNum &lt; cellCount; cellNum++) &#123;</span><br><span class="line">                    System.out.print(<span class="string">"【"</span> + (rowNum + <span class="number">1</span>) + <span class="string">"-"</span> + (cellNum + <span class="number">1</span>) + <span class="string">"】"</span>);</span><br><span class="line"></span><br><span class="line">                    Cell cell = rowData.getCell(cellNum);</span><br><span class="line">                    <span class="keyword">if</span> (cell != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        CellType cellType = cell.getCellType();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//判断单元格数据类型</span></span><br><span class="line">                        String cellValue = <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">switch</span> (cellType) &#123;</span><br><span class="line">                            <span class="keyword">case</span> STRING:<span class="comment">//字符串</span></span><br><span class="line">                                System.out.print(<span class="string">"【STRING】"</span>);</span><br><span class="line">                                cellValue = cell.getStringCellValue();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">case</span> BOOLEAN:<span class="comment">//布尔</span></span><br><span class="line">                                System.out.print(<span class="string">"【BOOLEAN】"</span>);</span><br><span class="line">                                cellValue = String.valueOf(cell.getBooleanCellValue());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">case</span> BLANK:<span class="comment">//空</span></span><br><span class="line">                                System.out.print(<span class="string">"【BLANK】"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">case</span> NUMERIC:</span><br><span class="line">                                System.out.print(<span class="string">"【NUMERIC】"</span>);</span><br><span class="line">                                <span class="comment">//cellValue = String.valueOf(cell.getNumericCellValue());</span></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;<span class="comment">//日期</span></span><br><span class="line">                                    System.out.print(<span class="string">"【日期】"</span>);</span><br><span class="line">                                    Date date = cell.getDateCellValue();</span><br><span class="line">                                    cellValue = <span class="keyword">new</span> DateTime(date).toString(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="comment">// 不是日期格式，则防止当数字过长时以科学计数法显示</span></span><br><span class="line">                                    System.out.print(<span class="string">"【转换成字符串】"</span>);</span><br><span class="line">                                    cell.setCellType(CellType.STRING);</span><br><span class="line">                                    cellValue = cell.toString();</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">case</span> ERROR:</span><br><span class="line">                                System.out.print(<span class="string">"【数据类型错误】"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        System.out.println(cellValue);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 公式，了解</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFormula</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(path + <span class="string">"计算公式.xls"</span>);</span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(is);</span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 读取第五行第一列</span></span><br><span class="line">        Row row = sheet.getRow(<span class="number">4</span>);</span><br><span class="line">        Cell cell = row.getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//公式计算器</span></span><br><span class="line">        FormulaEvaluator formulaEvaluator = <span class="keyword">new</span> HSSFFormulaEvaluator((HSSFWorkbook) workbook);</span><br><span class="line">        <span class="comment">// 输出单元内容</span></span><br><span class="line">        CellType cellType = cell.getCellType();</span><br><span class="line">        <span class="keyword">switch</span> (cellType) &#123;</span><br><span class="line">            <span class="keyword">case</span> FORMULA:<span class="comment">//公式</span></span><br><span class="line">                <span class="comment">//得到公式</span></span><br><span class="line">                String formula = cell.getCellFormula();</span><br><span class="line">                System.out.println(formula);</span><br><span class="line">                CellValue evaluate = formulaEvaluator.evaluate(cell);</span><br><span class="line">                <span class="comment">//String cellValue = String.valueOf(evaluate.getNumberValue());</span></span><br><span class="line">                String cellValue = evaluate.formatAsString();</span><br><span class="line">                System.out.println(cellValue);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、EasyExcel操作">3、EasyExcel操作</h3><p>Easy Excel官方文档：<a href="https://www.yuque.com/easyexcel/doc/easyexcel" target="_blank" rel="noopener">https://www.yuque.com/easyexcel/doc/easyexcel</a></p><p>导入maven依赖，注意里面已经存在<code>poi</code>和<code>poi-ooxml</code>依赖，需要注释刚才我们自己加上去的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>读写都在文档中已详细写明</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1、POI与EasyExcel介绍&quot;&gt;1、POI与EasyExcel介绍&lt;/h3&gt;
&lt;p&gt;Apache POI官网: &lt;a href=&quot;https://poi.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://poi.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache POI 简介是用Java编写的免费开源的跨平台的 Java API，Apache POI提供API给Java程式对Microsoft Office（Excel、WORD、PowerPoint、Visio等）格式档案读和写的功能。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="POI" scheme="https://www.shawn22.xyz/tags/POI/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis学习笔记</title>
    <link href="https://www.shawn22.xyz/posts/5177b49d.html"/>
    <id>https://www.shawn22.xyz/posts/5177b49d.html</id>
    <published>2021-03-15T09:45:36.000Z</published>
    <updated>2021-03-15T11:22:29.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介">一、简介</h2><h3 id="MyBatis是什么">MyBatis是什么</h3><ul><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的<strong>持久层框架</strong>。</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li>MyBatis 可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（ Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li></ul><blockquote><p><a href="https://mybatis.org/mybatis-3/index.html" target="_blank" rel="noopener">Mabits官方文档</a></p></blockquote><a id="more"></a><h2 id="二、Mybatis配置">二、Mybatis配置</h2><h3 id="1-数据准备">1.数据准备</h3><p>在MySQL数据库创建一数据库实例<code>learnmybatis</code>，在其创建一张表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">last_name <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">gender <span class="built_in">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建对应的JavaBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter and setter and toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom.xml中引入依赖，注意引入最新版</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyBatis 的配置文件包含了影响 MyBatis 行为甚深的设置（ settings）和属性（ properties）信息。文档的顶层结构如下：</p><ul><li>configuration 配置<ul><li>properties 属性</li><li>settings 设置</li><li>typeAliases 类型命名</li><li>typeHandlers 类型处理器</li><li>objectFactory 对象工厂</li><li>plugins 插件</li><li>environments 环境<ul><li>environment 环境变量<ul><li>transactionManager 事务管理器</li><li>dataSource 数据源</li></ul></li></ul></li><li>databaseIdProvider 数据库厂商标识</li><li>mappers 映射器</li></ul></li></ul><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="2-Mybatis全局配置">2.Mybatis全局配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/learnmybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里填写resource下的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"c01/EmployeeMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-全局配置文件-properties外部引入">3.全局配置文件-properties外部引入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、mybatis可以使用properties来引入外部properties配置文件的内容；</span></span><br><span class="line"><span class="comment">resource：引入类路径下的资源</span></span><br><span class="line"><span class="comment">url：引入网络路径或者磁盘路径下的资源</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span> =<span class="string">"dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在resource下中创建dbconfig.properties文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;learnmybatis?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure><h3 id="4-配置文件常用配置">4.配置文件常用配置</h3><ul><li><strong>settings-运行时行为设置</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">2、settings包含很多重要的设置项</span></span><br><span class="line"><span class="comment">setting:用来设置每一个设置项</span></span><br><span class="line"><span class="comment">name：设置项名</span></span><br><span class="line"><span class="comment">value：设置项取值</span></span><br><span class="line"><span class="comment">这里设置驼峰命名法</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">更多设置</a></p><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">类型处理器</a></p><ul><li><strong>typeAliases-别名</strong></li></ul><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。可以在xml配置<code>&lt;typeAliases&gt;</code>，也可以在类上加注解<code>@Alias</code>不过为了好排查，一般都写全类名。</p><ul><li><strong>enviroments-运行环境</strong><ul><li>id：指定当前环境的唯一标识</li><li>transactionManager、和dataSource都必须有</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="三、Mybatis-常用操作">三、Mybatis 常用操作</h2><h3 id="1-基础操作">1.基础操作</h3><ul><li>cache –命名空间的二级缓存配置</li><li>cache-ref – 其他命名空间缓存配置的引用。</li><li>resultMap – 自定义结果集映射</li><li>parameterMap – <strong>已废弃</strong>！老式风格的参数映射</li><li>sql –抽取可重用语句块。</li><li>insert – 映射插入语句</li><li>update – 映射更新语句</li><li>delete – 映射删除语句</li><li>select – 映射查询语句</li></ul><p><code>EmployeeMapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EmployeeMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里修改自己的mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">select * from employee where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void addEmp(Employee employee); </span></span><br><span class="line"><span class="comment">    插入自增返回主键 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmp"</span> <span class="attr">parameterType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line">insert into employee(last_name,email,gender) </span><br><span class="line">values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void updateEmp(Employee employee);  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">update employee </span><br><span class="line">set last_name=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void deleteEmpById(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteEmpById"</span>&gt;</span></span><br><span class="line">delete from employee where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>parameterType：参数类型，可以省略，</li><li>获取自增主键的值：<ul><li>mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；</li><li>useGeneratedKeys=“true”；使用自增主键获取主键值策略</li><li>keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性</li></ul></li></ul><h3 id="2-映射文件-参数处理">2.映射文件-参数处理</h3><p>4种映射文件，多个参数会被封装成 一个map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多个参数，不能直写id或lastName，否则抛出 org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [1, 0, param1, param2]--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdAndLastName"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> select * from tbl_employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdAndLastName2"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> select * from employee where id = #&#123;0&#125; and last_name=#&#123;1&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdAndLastName3"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> select * from employee where id = #&#123;param1&#125; and last_name=#&#123;param2&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdAndLastName4"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> select * from employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdAndLastName</span><span class="params">(Integer id, String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdAndLastName2</span><span class="params">(Integer id, String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdAndLastName3</span><span class="params">(Integer id, String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdAndLastName4</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"lastName"</span>)</span>String name)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>参数处理#{}与${}取值区别</strong></p><ul><li><code>#{}</code> : 是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入</li><li><code>${}</code> : 取出的值<strong>直接拼装</strong>在sql语句中；会有安全问题；</li></ul><h3 id="3-Mybatis-高级操作-一对多、多对一">3.Mybatis 高级操作(一对多、多对一)</h3><p><strong>select-记录封装map</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条记录封装一个map：Map&lt;Integer,Employee&gt;:键是这条记录的主键，值是记录封装后的javaBean</span></span><br><span class="line"><span class="comment">//@MapKey:告诉mybatis封装这个map的时候使用哪个属性作为map的key</span></span><br><span class="line"><span class="meta">@MapKey</span>(<span class="string">"lastName"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Employee&gt; <span class="title">getEmpByLastNameLikeReturnMap</span><span class="params">(String lastName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一条记录的map；key就是列名，值就是对应的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getEmpByIdReturnMap</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>select-resultMap-自定义结果映射规则</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义某个javaBean的封装规则</span></span><br><span class="line"><span class="comment">type：自定义规则的Java类型</span></span><br><span class="line"><span class="comment">id:唯一id方便引用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MySimpleEmp"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定主键列的封装规则</span></span><br><span class="line"><span class="comment">id定义主键会底层有优化；</span></span><br><span class="line"><span class="comment">column：指定哪一列</span></span><br><span class="line"><span class="comment">property：指定对应的javaBean属性</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义普通列封装规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- resultMap:自定义结果集映射规则；  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- public Employee getEmpById(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdWithResultMap"</span>  <span class="attr">resultMap</span>=<span class="string">"MySimpleEmp"</span>&gt;</span></span><br><span class="line">select * from employee where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>select-resultMap-关联查询</strong></p><p>新建2个实体类，并创建好数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String departmentName;</span><br><span class="line"><span class="keyword">private</span> List&lt;Employee&gt; emps;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter and setter and toString()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span> Department department;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//add department's getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper.xml文件（多对一）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 联合查询：级联属性封装结果集--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyDifEmp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"department_id"</span> <span class="attr">property</span>=<span class="string">"department.id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"department_name"</span> <span class="attr">property</span>=<span class="string">"department.departmentName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--  association可以指定联合的javaBean对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyDifEmp2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  association可以指定联合的javaBean对象</span></span><br><span class="line"><span class="comment">property="dept"：指定哪个属性是联合的对象</span></span><br><span class="line"><span class="comment">javaType:指定这个属性对象的类型[不能省略]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"department"</span> <span class="attr">javaType</span>=<span class="string">"com.lun.c01.helloworld.bean.Department"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"department_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"department_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--  public Employee getEmpAndDept(Integer id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpAndDept"</span> <span class="attr">resultMap</span>=<span class="string">"MyDifEmp"</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">e.id id,e.last_name last_name,e.gender gender,</span><br><span class="line">e.department_id department_id, d.department_name department_name </span><br><span class="line">FROM employee e, department d</span><br><span class="line">WHERE e.department_id=d.id AND e.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>select-resultMap-关联查询-association分步查询</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- association分步查询  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用association进行分步查询：</span></span><br><span class="line"><span class="comment">1、先按照员工id查询员工信息</span></span><br><span class="line"><span class="comment">2、根据查询员工信息中的department_id值去部门表查出部门信息</span></span><br><span class="line"><span class="comment">3、部门设置到员工中；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  id  last_name  email   gender    d_id   --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyEmpByStep"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- association定义关联对象的封装规则</span></span><br><span class="line"><span class="comment"> select:表明当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment"> column:指定将哪一列的值传给这个方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"department"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">"com.lun.c03.mapper.dao.DepartmentMapper.getDeptById"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">"department_id"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  public Employee getEmpByIdStep(Integer id);--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdStep"</span> <span class="attr">resultMap</span>=<span class="string">"MyEmpByStep"</span>&gt;</span></span><br><span class="line"> select * from employee where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>延迟加载</strong></p><p>我们每次查询Employee对象的时候，都将一起查询出来。部门信息在我们使用的时候再去查询；分段查询的基础之上加上两个配置：</p><p>在全局配置文件中配置，实现<strong>懒加载</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">&lt;!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>select-resultMap-关联查询-collection定义关联集合封装规则</strong></p><p>一对多</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.DepartmentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">public class Department &#123;</span></span><br><span class="line"><span class="comment">private Integer id;</span></span><br><span class="line"><span class="comment">private String departmentName;</span></span><br><span class="line"><span class="comment">private List&lt;Employee&gt; emps;</span></span><br><span class="line"><span class="comment">  did  dept_name  ||  eid  last_name  email   gender  </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Department"</span> <span class="attr">id</span>=<span class="string">"MyDept"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"department_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">collection定义关联集合类型的属性的封装规则 </span></span><br><span class="line"><span class="comment">ofType:指定集合里面元素的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> <span class="attr">ofType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义这个集合中元素的封装规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"eid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- collection：分段查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Department"</span> <span class="attr">id</span>=<span class="string">"MyDeptStep"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"department_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多列传值column="&#123;key1=column1,key2=column2&#125;"--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper.getEmpsByDeptId"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- public Department getDeptByIdPlus(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptByIdPlus"</span> <span class="attr">resultMap</span>=<span class="string">"MyDept"</span>&gt;</span></span><br><span class="line">SELECT d.id did,d.department_name department_name,</span><br><span class="line">e.id eid,e.last_name last_name,</span><br><span class="line">e.email email,e.gender gender</span><br><span class="line">FROM department d LEFT JOIN employee e ON d.id=e.department_id</span><br><span class="line">WHERE d.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>select-resultMap-discriminator鉴别器**</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- =======================鉴别器============================ --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;discriminator javaType=""&gt;&lt;/discriminator&gt;</span></span><br><span class="line"><span class="comment">鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为</span></span><br><span class="line"><span class="comment">封装Employee：</span></span><br><span class="line"><span class="comment">如果查出的是女生：就把部门信息查询出来，否则不查询；</span></span><br><span class="line"><span class="comment">如果是男生，把last_name这一列的值赋值给email;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyEmpDis"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> column：指定判定的列名</span></span><br><span class="line"><span class="comment"> javaType：列值对应的java类型  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"string"</span> <span class="attr">column</span>=<span class="string">"gender"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"department"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">"com.lun.c03.mapper.dao.DepartmentMapper.getDeptById"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">column</span>=<span class="string">"department_id"</span> <span class="attr">fetchType</span>=<span class="string">"eager"</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--男生 ;如果是男生，把last_name这一列的值赋值给email; --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--  public Employee getEmpByIdStep(Integer id);--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsWithDiscriminator"</span> <span class="attr">resultMap</span>=<span class="string">"MyEmpDis"</span>&gt;</span></span><br><span class="line"> select * from employee limit 10</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-动态sql">4.动态sql</h3><p>MyBatis采用功能强大的基于 OGNL 的表达式来简化操作。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><p>严格来说，在XML中只有”&lt;”和”&amp;”是非法的，需要转义，其中转义字符</p><table><thead><tr><th style="text-align:center"><code>&amp;lt;</code></th><th style="text-align:center">&lt;</th></tr></thead><tbody><tr><td style="text-align:center"><code>&amp;gt;</code></td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center"><code>&amp;amp;</code></td><td style="text-align:center">&amp;</td></tr><tr><td style="text-align:center"><code>&amp;apos;</code></td><td style="text-align:center">’</td></tr><tr><td style="text-align:center"><code>&amp;quot;</code></td><td style="text-align:center">&quot;</td></tr></tbody></table><p><strong>if判断</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c04.dynamicsql.DynamicSQLMapper"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsByConditionIf(Employee employee); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionIf"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> select * from employee where</span><br><span class="line"> <span class="comment">&lt;!-- test：判断表达式（OGNL）</span></span><br><span class="line"><span class="comment"> OGNL参照PPT或者官方文档。</span></span><br><span class="line"><span class="comment">    c:if  test</span></span><br><span class="line"><span class="comment"> 从参数中取值进行判断</span></span><br><span class="line"><span class="comment"> 遇见特殊符号应该去写转义字符：</span></span><br><span class="line"><span class="comment"> &amp;&amp;：</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line"> id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line"> and last_name like #&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line"> and email=#&#123;email&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- ognl会进行字符串与数字的转换判断  "0"==0 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">  and gender=#&#123;gender&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">查询的时候如果某些条件没带可能sql拼装会有问题</span></span><br><span class="line"><span class="comment">1. 给where后面加上1=1，以后的条件都and xxx。</span></span><br><span class="line"><span class="comment">2. mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼装的sql，多出来的and或者or去掉（where只会去掉第一个多出来的and或者or，但最后一个 多出来的and或者or则**不会去掉**）。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionIfWithWhere"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> select * from employee</span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line"> id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line"> and last_name like #&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line"> and email=#&#123;email&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- ognl会进行字符串与数字的转换判断  "0"==0 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">  and gender=#&#123;gender&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--public void updateEmp(Employee employee);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- Set标签的使用 --&gt;</span></span><br><span class="line"> update employee </span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line">last_name=#&#123;lastName&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></span><br><span class="line">email=#&#123;email&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender!=null"</span>&gt;</span></span><br><span class="line">gender=#&#123;gender&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">where id=#&#123;id&#125; </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Trim：更新拼串</span></span><br><span class="line"><span class="comment">update tbl_employee </span></span><br><span class="line"><span class="comment">&lt;trim prefix="set" suffixOverrides=","&gt;</span></span><br><span class="line"><span class="comment">&lt;if test="lastName!=null"&gt;</span></span><br><span class="line"><span class="comment">last_name=#&#123;lastName&#125;,</span></span><br><span class="line"><span class="comment">&lt;/if&gt;</span></span><br><span class="line"><span class="comment">&lt;if test="email!=null"&gt;</span></span><br><span class="line"><span class="comment">email=#&#123;email&#125;,</span></span><br><span class="line"><span class="comment">&lt;/if&gt;</span></span><br><span class="line"><span class="comment">&lt;if test="gender!=null"&gt;</span></span><br><span class="line"><span class="comment">gender=#&#123;gender&#125;</span></span><br><span class="line"><span class="comment">&lt;/if&gt;</span></span><br><span class="line"><span class="comment">&lt;/trim&gt;</span></span><br><span class="line"><span class="comment">where id=#&#123;id&#125;  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>trim-自定义字符串截取</strong></p><p>后面多出的and或者or where标签不能解决</p><ul><li>prefix=&quot;&quot;:前缀：trim标签体中是整个字符串拼串后的结果。<ul><li>prefix给拼串后的整个字符串加一个前缀</li></ul></li><li>prefixOverrides=&quot;&quot;:<ul><li>前缀覆盖： 去掉整个字符串前面多余的字符</li></ul></li><li>suffix=&quot;&quot;:后缀<ul><li>suffix给拼串后的整个字符串加一个后缀</li></ul></li><li>suffixOverrides=&quot;&quot;<ul><li>后缀覆盖：去掉整个字符串后面多余的字符</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c04.dynamicsql.DynamicSQLMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--public List&lt;Employee&gt; getEmpsByConditionTrim(Employee employee);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionTrim"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> select * from employee</span><br><span class="line"> <span class="comment">&lt;!-- 自定义字符串的截取规则 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line"> id=#&#123;id&#125; and</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line"> last_name like #&#123;lastName&#125; and</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line"> email=#&#123;email&#125; and</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- ognl会进行字符串与数字的转换判断  "0"==0 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">  gender=#&#123;gender&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>choose-分支选择</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c04.dynamicsql.DynamicSQLMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsByConditionChoose(Employee employee); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> select * from employee </span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line"> id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line"> last_name like #&#123;lastName&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></span><br><span class="line"> email = #&#123;email&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line"> gender = 0</span><br><span class="line"> <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>foreach-遍历集合</strong></p><ul><li>collection：指定要遍历的集合：<ul><li>list类型的参数会特殊处理封装在map中，map的key就叫list</li></ul></li><li>item：将当前遍历出的元素赋值给指定的变量</li><li>separator:每个元素之间的分隔符</li><li>open：遍历出所有结果拼接一个开始的字符</li><li>close:遍历出所有结果拼接一个结束的字符</li><li>index:索引。遍历list的时候是index就是索引，item就是当前值<ul><li>遍历map的时候index表示的就是map的key，item就是map的值</li></ul></li><li><code>#{变量名}</code>就能取出变量的值也就是当前遍历出的元素</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--public List&lt;Employee&gt; getEmpsByConditionForeach(List&lt;Integer&gt; ids);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionForeach"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> select * from employee</span><br><span class="line"> <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"item_id"</span> <span class="attr">separator</span>=<span class="string">","</span></span></span><br><span class="line"><span class="tag"> <span class="attr">open</span>=<span class="string">"where id in("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line"> #&#123;item_id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 批量保存 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--public void addEmps(@Param("emps")List&lt;Employee&gt; emps);  --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span>&gt;</span></span><br><span class="line"> insert into employee(last_name,email,gender,department_id) </span><br><span class="line">values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.department.id&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span><span class="comment">&lt;!--   --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 这种方式需要数据库连接属性allowMultiQueries=true；</span></span><br><span class="line"><span class="comment"> 这种分号分隔多个sql可以用于其他的批量操作（删除，修改） --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps2"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line"> insert into employee(last_name,email,gender,department_id)</span><br><span class="line"> values(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.department.id&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>sql-抽取可重用的sql片段</strong></p><p>抽取可重用的sql片段。方便后面引用：</p><ol><li>sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用</li><li>include来引用已经抽取的sql：</li><li>include还可以自定义一些property，sql标签内部就能使用自定义的属性<ul><li>include-property：取值的正确方式${prop},</li><li>不能使用<code>#{}</code>，而使用<code>${}</code></li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">select</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t2"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">from some_table t1</span><br><span class="line">cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">employee_id,last_name,email</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">last_name,email,gender,d_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span>&gt;</span></span><br><span class="line">insert into tbl_employee(</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span><span class="comment">&lt;!-- 使用地方 --&gt;</span></span><br><span class="line">) </span><br><span class="line">values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、缓存">四、缓存</h2><p><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache" target="_blank" rel="noopener">MyBatis官方文档</a></p><p>MyBatis 包含一个非常强大的查询缓存特性，它可以非常方便地配置和定制。缓存可以极大的提升查询效率。</p><p>MyBatis系统中默认定义了两级缓存，一级缓存和二级缓存。</p><ol><li>默认情况下，只有一级缓存（ SqlSession级别的缓存，也称为本地缓存）开启。</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li><li>为了提高扩展性。 MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li><li>对于Mabtis查询，查询过程默认是二级缓存-&gt;一级缓存-&gt;数据库</li></ol><h2 id="五、其他">五、其他</h2><p><code>pagehelper插件</code></p><p><code>Mabatis逆向工程</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、简介&quot;&gt;一、简介&lt;/h2&gt;
&lt;h3 id=&quot;MyBatis是什么&quot;&gt;MyBatis是什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的&lt;strong&gt;持久层框架&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。&lt;/li&gt;
&lt;li&gt;MyBatis 可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（ Plain Old Java Objects，普通的Java对象）映射成数据库中的记录&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://mybatis.org/mybatis-3/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mabits官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="MyBatis" scheme="https://www.shawn22.xyz/categories/MyBatis/"/>
    
    
    <category term="MyBatis" scheme="https://www.shawn22.xyz/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatisPlus学习笔记</title>
    <link href="https://www.shawn22.xyz/posts/9b26b051.html"/>
    <id>https://www.shawn22.xyz/posts/9b26b051.html</id>
    <published>2021-03-15T09:38:09.000Z</published>
    <updated>2021-03-15T11:22:29.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介">一、简介</h2><blockquote><p>Mybatis-plus官网：<a href="https://mp.baomidou.com/" target="_blank" rel="noopener">https://mp.baomidou.com/</a></p></blockquote><p>MyBatis-Plus（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生，它具有以下特性</p><a id="more"></a><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="二、快速入门">二、快速入门</h2><p>首先在数据库创建ssmdemo数据库，运行sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">id</span>, <span class="keyword">name</span>, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>);</span><br><span class="line"><span class="comment">-- 真实开发中，version（乐观锁）、deleted（逻辑删除）、gmt_create、gmt_modified</span></span><br></pre></td></tr></table></figure><p>创建springboot项目，引入依赖文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus 是自己开发，并非官方的！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在resource资源路径下<code>application.yml</code>中配置，其中配置日志为了显示具体mabatis日志输出</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql 5 驱动不同 com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># mysql 8 驱动不同com.mysql.cj.jdbc.Driver、需要增加时区的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssmdemo?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>创建po实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建mapper类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 所有的CRUD操作都已经编写完成了</span></span><br><span class="line">    <span class="comment">// 你不需要像以前的配置一大堆文件了！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在主启动类上扫描我们的mapper包下的所有接口(十分重要)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.mybatis.demo.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在测试类中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 继承了BaseMapper，所有的方法都来自己父类</span></span><br><span class="line">    <span class="comment">// 我们也可以编写自己的扩展方法！</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 参数是一个 Wrapper ，条件构造器，这里我们先不用 null</span></span><br><span class="line">    <span class="comment">// 查询全部用户</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"test"</span>);</span><br><span class="line">        user.setAge(<span class="number">3</span>);</span><br><span class="line">        user.setEmail(<span class="string">"24736743@qq.com"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = userMapper.insert(user); <span class="comment">// 帮我们自动生成id</span></span><br><span class="line">        System.out.println(result); <span class="comment">// 受影响的行数</span></span><br><span class="line">        System.out.println(user); <span class="comment">// 发现，id会自动回填</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 测试更新</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">// 通过条件自动拼接动态sql</span></span><br><span class="line">        user.setId(<span class="number">5L</span>);</span><br><span class="line">        user.setName(<span class="string">"123456"</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="comment">// 注意：updateById 但是参数是一个 对象！</span></span><br><span class="line">        <span class="keyword">int</span> i = userMapper.updateById(user);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、CRUD扩展">三、CRUD扩展</h2><h3 id="1、主键生成策略">1、主键生成策略</h3><p>实体类字段上 <code>@TableId(type = IdType.xxx)</code>，其中IdTyoe的枚举类型如下</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库ID自增</td></tr><tr><td>NONE</td><td>无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td></tr><tr><td>INPUT</td><td>insert前自行set主键值</td></tr><tr><td>ASSIGN_ID</td><td>分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td>ASSIGN_UUID</td><td>分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td></tr></tbody></table><p><strong>雪花算法：</strong><br>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。可以保证几乎全球唯一！</p><p><strong>主键自增</strong></p><ol><li>实体类字段上 <code>@TableId(type = IdType.AUTO)</code></li><li>数据库字段一定要是自增！</li></ol><h3 id="2、自动填充">2、自动填充</h3><p>创建时间、修改时间！这些个操作一遍都是自动化完成的，我们不希望手动更新！</p><ul><li><h4 id="数据库级别（工作中不允许修改数据库）"><strong>数据库级别</strong>（工作中不允许修改数据库）</h4></li></ul><ol><li>首先在MySql数据库中添加两个字段<code>create_time</code>和<code>update_time</code>，同时设置默认值为<code>根据当前时间戳更新</code></li><li>在实体类User插入两个字段</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><ul><li><h4 id="代码级别">代码级别</h4></li></ul><ol><li>删除数据库datetime的默认值</li><li>实体类字段属性上增加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字段添加填充内容</span></span><br><span class="line"><span class="meta">@TableField</span>(fill = FieldFill.INSERT)</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写处理器来处理这个注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start insert fill....."</span>);</span><br><span class="line">        <span class="comment">// setFieldValByName(String fieldName, Object fieldVal, MetaObject,metaObject</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"createTime"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start update fill....."</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、乐观锁">3、乐观锁</h3><blockquote><p>乐观锁 : 故名思意十分乐观，它总是认为不会出现问题，无论干什么不去上锁！如果出现了问题，再次更新值测试<br>悲观锁：故名思意十分悲观，它总是认为总是出现问题，无论干什么都会上锁！再去操作！</p></blockquote><p>乐观锁实现方式</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><p>操作步骤</p><ol><li>给数据库增加version字段</li><li>在User实体类增加对应的字段</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span> <span class="comment">//乐观锁Version注解</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><ol start="3"><li>注册组件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扫描我们的 mapper 文件夹</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.mybatis.demo.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试乐观锁成功！</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 1、查询用户信息</span></span><br><span class="line">User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line"><span class="comment">// 2、修改用户信息</span></span><br><span class="line">user.setName(<span class="string">"test"</span>);</span><br><span class="line">user.setEmail(<span class="string">"zzzzz@163.com"</span>);</span><br><span class="line"><span class="comment">// 3、执行更新操作</span></span><br><span class="line">userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、普通查询操作">4、普通查询操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试批量查询！</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByBatchId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按条件查询之一使用map操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByBatchIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 自定义要查询</span></span><br><span class="line">    map.put(<span class="string">"name"</span>,<span class="string">"1234567"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="number">3</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、分页查询">5、分页查询</h3><ol><li>配置拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扫描我们的 mapper 文件夹</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.mybatis.demo.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration -&gt; configuration.setUseDeprecatedExecutor(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 参数一：当前页</span></span><br><span class="line">    <span class="comment">// 参数二：页面大小</span></span><br><span class="line">    <span class="comment">// 使用了分页插件之后，所有的分页操作也变得简单的！</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、逻辑删除">6、逻辑删除</h3><ol><li>首先在数据库中插入字段<code>deleted</code>，代表逻辑删除字段，设置默认为0</li><li>在User实体类添加属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span> <span class="comment">//逻辑删除</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置<code>application.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><p>配置好之后使用delete操作不会物理删除，而是进行逻辑删除，同时查询时自动过滤已被逻辑删除的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7、条件生成器">7、条件生成器</h3><blockquote><p>详情请查看https://mp.baomidou.com/guide/wrapper.html</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询name不为空的用户，并且邮箱不为空的用户，年龄大于等于12</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper</span><br><span class="line">    .isNotNull(<span class="string">"name"</span>)</span><br><span class="line">    .isNotNull(<span class="string">"email"</span>)</span><br><span class="line">    .ge(<span class="string">"age"</span>,<span class="number">12</span>);</span><br><span class="line">    userMapper.selectList(wrapper).forEach(System.out::println); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、其他">8、其他</h3><p>逆向工程</p><p>Sql性能分析</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、简介&quot;&gt;一、简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Mybatis-plus官网：&lt;a href=&quot;https://mp.baomidou.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.baomidou.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MyBatis-Plus（简称 MP）是一个 &lt;a href=&quot;http://www.mybatis.org/mybatis-3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyBatis (opens new window)&lt;/a&gt;的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生，它具有以下特性&lt;/p&gt;</summary>
    
    
    
    <category term="MyBatis" scheme="https://www.shawn22.xyz/categories/MyBatis/"/>
    
    
    <category term="MyBatis" scheme="https://www.shawn22.xyz/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Linux基于OwnCloud搭建私有云盘</title>
    <link href="https://www.shawn22.xyz/posts/11c723bd.html"/>
    <id>https://www.shawn22.xyz/posts/11c723bd.html</id>
    <published>2021-03-15T09:31:21.000Z</published>
    <updated>2021-03-15T11:25:08.995Z</updated>
    
    <content type="html"><![CDATA[<h1>一、正常方式搭建OwnCloud</h1><p><a href="https://blog.csdn.net/Mr_Seng/article/details/105938578?biz_id=102&amp;utm_term=centos%E6%90%AD%E5%BB%BA%E7%BD%91%E7%9B%98&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-8-105938578&amp;spm=1018.2118.3001.4449" target="_blank" rel="noopener">centos 7搭建owncloud个人私有网盘</a><br><a href="https://blog.csdn.net/Huang6899587/article/details/84671034?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.add_param_isCf" target="_blank" rel="noopener">基于宝塔面板和nextcloud搭建自己的网盘</a></p><a id="more"></a><h1>二、基于Docker容器快速搭建</h1><p>这里默认已经下载安装好并成功启动了docker，并成功进行了配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取docker镜像</span></span><br><span class="line">docker pull owncloud</span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="comment">#创建文件存储路径，自定义但要记住该路径,下面是我个人路径</span></span><br><span class="line">mkdir /lxt/data/mysql</span><br><span class="line">mkdir /lxt/data/mysql/owncloud</span><br><span class="line">mkdir /lxt/data/owncloud</span><br><span class="line"><span class="comment">#设置权限</span></span><br><span class="line">chmod 770 /lxt/data</span><br></pre></td></tr></table></figure><p>分别运行以下两句代码，启动容器，注意要修改自己的个人路径，另外如果端口冲突可以自行设置端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动数据库</span></span><br><span class="line">docker run --name mysql-owncloud  -v /lxt/data/mysql/owncloud:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=password  -e MYSQL_DATABASE=owncloud  -e MYSQL_USER=owncloud  -e MYSQL_PASSWORD=password  -d -p 3307:3306 --restart unless-stopped mysql</span><br><span class="line"><span class="comment">#启动owncloud</span></span><br><span class="line">docker run --name=owncloud --link=mysql-owncloud:mysql-owncloud -v /var/data/owncloud:/var/www/html/data -p 80:80 -d --restart unless-stopped owncloud</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201114134654202.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看启动的docker容器</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>最后注意开放相应的端口号，这里我开放了8000端口，最后访问<code>ip:端口</code>即可<br><img src="https://img-blog.csdnimg.cn/20201114135043686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p>参考文章<br><a href="https://blog.csdn.net/lionwerson/article/details/81775650?utm_medium=distribute.pc_relevant.none-task-blog-utm_term-2&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">https://blog.csdn.net/lionwerson/article/details/81775650?utm_medium=distribute.pc_relevant.none-task-blog-utm_term-2&amp;spm=1001.2101.3001.4242</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、正常方式搭建OwnCloud&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Mr_Seng/article/details/105938578?biz_id=102&amp;amp;utm_term=centos%E6%90%AD%E5%BB%BA%E7%BD%91%E7%9B%98&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-8-105938578&amp;amp;spm=1018.2118.3001.4449&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;centos 7搭建owncloud个人私有网盘&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/Huang6899587/article/details/84671034?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.add_param_isCf&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.add_param_isCf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;基于宝塔面板和nextcloud搭建自己的网盘&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="ownCloud" scheme="https://www.shawn22.xyz/tags/ownCloud/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli脚手架三种搭建方式</title>
    <link href="https://www.shawn22.xyz/posts/1c69613d.html"/>
    <id>https://www.shawn22.xyz/posts/1c69613d.html</id>
    <published>2021-03-15T09:14:21.000Z</published>
    <updated>2021-03-15T11:22:29.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、基于2-x的旧模板">1、基于2.x的旧模板</h3><p> 默认已经安装好了<code>Node</code>和<code>Webpack</code><br>1、全局安装vue-cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli -g</span><br></pre></td></tr></table></figure><p>查看版本输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure><p>2、vue-cli来创建一个基于 webpack 模板的新项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#my_project是项目名</span></span><br><span class="line">vue init webpack my_project</span><br></pre></td></tr></table></figure><a id="more"></a><p>之后需要填写项目的一些基本配置，下面是我的配置<br><img src="https://img-blog.csdnimg.cn/20200430170320574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、运行vue-cli项目<br> 进入项目，输入<code>npm run dev</code>之后项目就跑起来了，可以进入<code>localhost:8080</code>查看效果</p><h3 id="2、基于交互式命令创建新版vue项目">2、基于交互式命令创建新版vue项目</h3><p>1、安装新版脚手架<br> 首先需要更新vue-cli脚手架，需要重新卸载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载旧版</span></span><br><span class="line">npm uninstall vue-cli -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装新版脚手架</span></span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p><em>注：如何在安装新版的脚手架后要创建旧版项目，可以运行<code>npm install -g @vue/cli-init</code>后面操作就和安装旧版本一样了</em><br>2、创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意这里不能用中文项目名</span></span><br><span class="line">vue create project1</span><br></pre></td></tr></table></figure><p>其中空格表示选中，回车确定，其配置项如下，这里我总的配置项，新建项目时会一个个选项进行询问。<br><img src="https://img-blog.csdnimg.cn/20200430171747210.png" alt="在这里插入图片描述"><br>3、运行项目<br>进入项目后<code>npm run serve</code>启动项目</p><h3 id="3、基于图形化界面创建新版vue项目">3、基于图形化界面创建新版vue项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在cmd窗口运行命令，进入图形化界面</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>选择创建项目，后面的配置项和命令行类似，这里不多阐述了。<br><img src="https://img-blog.csdnimg.cn/20200430172209100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200430172311886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、运行项目<br> 创建好项目后选择任务，在这里serve是我们开发期间打包和运行，build是成品发布运行，我们选择serve，点击运行即可成功启动项目<br><img src="https://img-blog.csdnimg.cn/20200430172608398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1、基于2-x的旧模板&quot;&gt;1、基于2.x的旧模板&lt;/h3&gt;
&lt;p&gt; 默认已经安装好了&lt;code&gt;Node&lt;/code&gt;和&lt;code&gt;Webpack&lt;/code&gt;&lt;br&gt;
1、全局安装vue-cli&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install vue-cli -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看版本输入&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vue -V&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、vue-cli来创建一个基于 webpack 模板的新项目&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#my_project是项目名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vue init webpack my_project&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="vue-cli" scheme="https://www.shawn22.xyz/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合JWT实现前后端Token验证</title>
    <link href="https://www.shawn22.xyz/posts/5cd97de5.html"/>
    <id>https://www.shawn22.xyz/posts/5cd97de5.html</id>
    <published>2021-01-28T10:56:21.000Z</published>
    <updated>2021-03-15T08:51:28.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JWT介绍">一、JWT介绍</h2><h3 id="1、JWT简介">1、JWT简介</h3><blockquote><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">(RFC 7519</a>).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><p>官网：<a href="https://jwt.io/introduction/" target="_blank" rel="noopener">https://jwt.io/introduction/</a></p></blockquote><a id="more"></a><h3 id="2、JWT认证和session认证的区别">2、JWT认证和session认证的区别</h3><h4 id="session认证">session认证</h4><p>http协议是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发送的请求，所以为了让我们的应用能识别是哪个用户发出的，我们只能在服务器存储一份用户登陆的信息，这份登陆信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用个就能识别请求来自哪个用户了，这就是传统的基于sessino认证。</p><h4 id="JWT认证">JWT认证</h4><p>基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或会话信息。这也就意味着JWT认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p><h3 id="3、JWT认证过程">3、JWT认证过程</h3><p><img src="https://img-blog.csdnimg.cn/20210127183348127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>用户使用账号和密码发出post请求；</li><li>服务器使用私钥创建一个jwt；</li><li>服务器返回这个jwt给浏览器；</li><li>浏览器将该jwt串在请求头中像服务器发送请求；</li><li>服务器验证该jwt；</li><li>返回响应的资源给浏览器</li></ol><h3 id="4、JWT结构">4、JWT结构</h3><p>JWT是由三段信息构成的，将这三段信息文本用<code>.</code>连接一起就构成了JWT字符串。就像这样:<code>xxxxx.yyyyy.zzzzz</code>。JWT包含了三部分：<br><strong>Header</strong> 头部(标题包含了令牌的元数据，并且包含签名和/或加密算法的类型)<br><strong>Payload</strong> 负载 (类似于飞机上承载的物品)<br><strong>Signature</strong> 签名/签证</p><h2 id="二、springboot和JWT整合">二、springboot和JWT整合</h2><p><strong>在<code>pom.xml</code>中添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--注意版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>创建<code>annotation</code>自定义注解包，在包下创建<code>PassToken</code>和<code>UserLoginToken</code>两个注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法上有该注解就放行</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PassToken &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示需要token验证</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserLoginToken &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置拦截器，实现一个拦截器就需要实现<code>HandlerInterceptor</code>接口</strong></p><p><code>HandlerInterceptor</code>接口主要定义了三个方法<br><strong>1.<code>boolean preHandle ()</code>：</strong><br>预处理回调方法,实现处理器的预处理，第三个参数为响应的处理器,自定义<code>Controller</code>,返回值为<code>true</code>表示继续流程（如调用下一个拦截器或处理器）或者接着执行<br><code>postHandle()</code>和<code>afterCompletion()</code>；<code>false</code>表示流程中断，不会继续调用其他的拦截器或处理器，中断执行。</p><p><strong>2.<code>void postHandle()</code>：</strong><br>后处理回调方法，实现处理器的后处理（<code>DispatcherServlet</code>进行视图返回渲染之前进行调用），此时我们可以通过<code>modelAndView</code>（模型和视图对象）对模型数据进行处理或对视图进行处理，<code>modelAndView</code>也可能为<code>null</code>。</p><p><strong>3.<code>void afterCompletion()</code>:</strong><br>整个请求处理完毕回调方法,该方法也是需要当前对应的<code>Interceptor</code>的<code>preHandle()</code>的返回值为true时才会执行，也就是在<code>DispatcherServlet</code>渲染了对应的视图之后执行。用于进行资源清理。整个请求处理完毕回调方法。如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于<code>try-catch-finally</code>中的<code>finally</code>，但仅调用处理器执行链中</p><p><strong>代码主要流程:</strong></p><p><strong>1.从 <code>http</code> 请求头中取出 <code>token</code>，<br>2.判断是否映射到方法<br>3.检查是否有<code>passtoken</code>注释，有则跳过认证<br>4.检查有没有需要用户登录的注解，有则需要取出并验证<br>5.认证通过则可以访问，不通过会报相关错误信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 从 http 请求头中取出 token</span></span><br><span class="line">        String token = httpServletRequest.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        <span class="comment">// 如果不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span>(!(object <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HandlerMethod handlerMethod=(HandlerMethod)object;</span><br><span class="line">        Method method=handlerMethod.getMethod();</span><br><span class="line">        <span class="comment">//检查是否有passtoken注释，有则跳过认证</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(PassToken<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            PassToken passToken = method.getAnnotation(PassToken<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (passToken.required()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查有没有需要用户权限的注解</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(UserLoginToken<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            UserLoginToken userLoginToken = method.getAnnotation(UserLoginToken<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (userLoginToken.required()) &#123;</span><br><span class="line">                <span class="comment">// 执行认证</span></span><br><span class="line">                <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"无token，请重新登录"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取 token 中的 user id</span></span><br><span class="line">                String userId;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    userId = JWT.decode(token).getAudience().get(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JWTDecodeException j) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"401"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这里根据userId从数据库查找user</span></span><br><span class="line">                User user = userService.findUserById(userId);</span><br><span class="line">                <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户不存在，请重新登录"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 验证 token</span></span><br><span class="line">                JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(user.getPwd())).build();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jwtVerifier.verify(token);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"401"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// logger.info("执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// logger.info("整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中我的User类(已简化)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后还要配置拦截器，顺便把跨域配置给解决了，这里的WebMvcConfigurer可以扩展其他自定义功能，详情可查看<a href="https://docs.spring.io/spring-boot/docs/2.5.0-SNAPSHOT/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration" target="_blank" rel="noopener">spring官网</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String[] ORIGINS = <span class="keyword">new</span> String[] &#123; <span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span> &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     解决跨域问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line"> registry.addMapping(<span class="string">"/**"</span>).allowedOrigins(<span class="string">"*"</span>).allowCredentials(<span class="keyword">true</span>).allowedMethods(ORIGINS).maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现WebMvcConfigurer不会导致静态资源被拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor())</span><br><span class="line">                <span class="comment">// 拦截所有url</span></span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建<code>TokenService</code>类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  String <span class="title">getToken</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        Date start = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//一小时有效时间</span></span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis() + <span class="number">60</span>* <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        Date end = <span class="keyword">new</span> Date(currentTime);</span><br><span class="line">        String token = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        token = JWT.create().withAudience(String.valueOf(user.getUserId())).withIssuedAt(start).withExpiresAt(end).sign(Algorithm.HMAC256(user.getPwd()));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最终只需要在登录的时候调用<code>TokenService.getToken(user)</code>即可获得token，返回给前端，下次请求其他接口在header带上token即可</strong></p><hr><p>参考：</p><p><a href="https://github.com/jwtk/jjwt" target="_blank" rel="noopener">https://github.com/jwtk/jjwt</a></p><p><a href="https://zhuanlan.zhihu.com/p/91420328" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/91420328</a></p><p><a href="https://www.jianshu.com/p/e88d3f8151db" target="_blank" rel="noopener">https://www.jianshu.com/p/e88d3f8151db</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、JWT介绍&quot;&gt;一、JWT介绍&lt;/h2&gt;
&lt;h3 id=&quot;1、JWT简介&quot;&gt;1、JWT简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（&lt;a href=&quot;https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;(RFC 7519&lt;/a&gt;).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://jwt.io/introduction/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jwt.io/introduction/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="JWT" scheme="https://www.shawn22.xyz/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot自定义starter</title>
    <link href="https://www.shawn22.xyz/posts/dd4c9c1d.html"/>
    <id>https://www.shawn22.xyz/posts/dd4c9c1d.html</id>
    <published>2021-01-28T10:53:55.000Z</published>
    <updated>2021-01-28T10:58:15.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、starter简介">一、starter简介</h2><h4 id="1、SpringBoot-starter机制">1、SpringBoot starter机制</h4><p>SpringBoot中的starter是一种非常重要的机制，能够抛弃以前繁杂的配置，将其统一集成进starter，应用者只需要在maven中引入starter依赖，SpringBoot就能自动扫描到要加载的信息并启动相应的默认配置。starter让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。SpringBoot会自动通过classpath路径下的类发现需要的Bean，并注册进IOC容器。SpringBoot提供了针对日常企业应用研发各种场景的spring-boot-starter依赖模块。所有这些依赖模块都遵循着约定成俗的默认配置，并允许我们调整这些配置，即遵循“约定大于配置”的理念。</p><a id="more"></a><h4 id="2、为什么要自定义starter">2、为什么要自定义starter</h4><p>在我们的日常开发工作中，经常会有一些独立于业务之外的配置模块，我们经常将其放到一个特定的包下，然后如果另一个工程需要复用这块功能的时候，需要将代码硬拷贝到另一个工程，重新集成一遍，麻烦至极。如果我们将这些可独立于业务代码之外的功配置模块封装成一个个starter，复用的时候只需要将其在pom中引用依赖即可。</p><h4 id="3、自定义starter命名规范">3、自定义starter命名规范</h4><p>官方命名：</p><ul><li><p>前缀：spring-boot-starter-xxx</p></li><li><p>比如：spring-boot-starter-web…</p></li></ul><p>自定义命名：</p><ul><li>xxx-spring-boot-starter</li><li>比如：mybatis-spring-boot-starter</li></ul><h2 id="二、starter实现">二、starter实现</h2><h4 id="1、新建工程">1、新建工程</h4><p>这里我命名为<code>shawn-spring-boot-starter</code><br><img src="https://img-blog.csdnimg.cn/20210128160453197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2、添加pom-xml依赖">2、添加pom.xml依赖</h4><p>这里需要注意spring版本，太高可能会导致install失败</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.shawn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shawn-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;shawn-spring-boot-starter&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="3、定义一个实体类映射配置信息">3、定义一个实体类映射配置信息</h4><p><code>@ConfigurationProperties(prefix = &quot;shawn.hello&quot;) </code>它可以把相同前缀的配置信息通过配置项名称映射成实体类，可以直接在yml文件进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前缀 shawn.hello</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"shawn.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShawnProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、编写自己的服务">4、编写自己的服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShawnService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ShawnProperties ShawnProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShawnProperties <span class="title">getShawnProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ShawnProperties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShawnProperties</span><span class="params">(ShawnProperties ShawnProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ShawnProperties = ShawnProperties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ShawnProperties.getPrefix() + name + ShawnProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、定义配置类">5、定义配置类</h4><p>这里，我们将ShawnService类定义为一个Bean，交给Ioc容器。<br><code>@Configuration</code> 配置注解<br><code>@EnableConfigurationProperties </code>。该注解是用来开启对<code>@ConfigurationProperties</code> 注解配置Bean的支持。当然了，也可以在 <code>@ConfigurationProperties</code> 注解的类上添加 <code>@Configuration</code> 或者  <code>@Component </code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ShawnProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ShawnServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ShawnProperties shawnProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShawnService <span class="title">shawnService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShawnService service = <span class="keyword">new</span> ShawnService();</span><br><span class="line">        service.setShawnProperties(shawnProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、在resources编写一个自己的-META-INF-spring-factories">6、在<code>resources</code>编写一个自己的 <code>META-INF\spring.factories</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.shawn.ShawnServiceAutoConfiguration</span><br></pre></td></tr></table></figure><h4 id="7、打包到Maven仓库">7、打包到Maven仓库</h4><p><img src="https://img-blog.csdnimg.cn/20210128183428374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="三、测试starter">三、测试starter</h2><h4 id="1、新建项目，引入依赖">1、新建项目，引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shawn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shawn-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、编写测试类">2、编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShawnCOntroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ShawnService shawnService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shawnService.sayHello(<span class="string">"shawn"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、配置">3、配置</h4><p>在<code>application.yml</code>中进行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shawn:</span></span><br><span class="line">  <span class="attr">hello:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">prefix</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">suffix</span></span><br></pre></td></tr></table></figure><h4 id="4、测试">4、测试</h4><p>成功打印<br><img src="https://img-blog.csdnimg.cn/20210128185155637.png" alt="在这里插入图片描述"></p><hr><p>参考:<br><a href="https://www.cnblogs.com/hellokuangshen/p/12486631.html" target="_blank" rel="noopener">https://www.cnblogs.com/hellokuangshen/p/12486631.html</a><br><a href="https://www.cnblogs.com/hello-shf/p/10864977.html" target="_blank" rel="noopener">https://www.cnblogs.com/hello-shf/p/10864977.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、starter简介&quot;&gt;一、starter简介&lt;/h2&gt;
&lt;h4 id=&quot;1、SpringBoot-starter机制&quot;&gt;1、SpringBoot starter机制&lt;/h4&gt;
&lt;p&gt;SpringBoot中的starter是一种非常重要的机制，能够抛弃以前繁杂的配置，将其统一集成进starter，应用者只需要在maven中引入starter依赖，SpringBoot就能自动扫描到要加载的信息并启动相应的默认配置。starter让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。SpringBoot会自动通过classpath路径下的类发现需要的Bean，并注册进IOC容器。SpringBoot提供了针对日常企业应用研发各种场景的spring-boot-starter依赖模块。所有这些依赖模块都遵循着约定成俗的默认配置，并允许我们调整这些配置，即遵循“约定大于配置”的理念。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="springboot" scheme="https://www.shawn22.xyz/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>github实用的几款chrome插件</title>
    <link href="https://www.shawn22.xyz/posts/d7585d3e.html"/>
    <id>https://www.shawn22.xyz/posts/d7585d3e.html</id>
    <published>2020-11-28T14:35:03.000Z</published>
    <updated>2021-03-15T08:49:13.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谷歌上网助手">谷歌上网助手</h2><p>在chrome浏览器上安装插件，最方便的是在chrome网上应用商店进行搜索下载，这里强烈推荐<strong>谷歌上网助手</strong>，可以进行学术性的科学上网。</p><a id="more"></a><p><a href="http://googlehelper.net/" target="_blank" rel="noopener">谷歌上网助手下载地址</a><br>打开浏览器的扩展程序，直接将下载的crx拖进去就行了，打开插件之后就可以进行<a href="https://chrome.google.com/webstore/category/extensions" target="_blank" rel="noopener">应用商店</a>的访问了。<br><img src="https://img-blog.csdnimg.cn/20201128211605953.gif" alt="在这里插入图片描述"></p><h2 id="1、Octotree-GitHub-code-tree">1、Octotree - GitHub code tree</h2><p><img src="https://img-blog.csdnimg.cn/20201128212348459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>😃它会在github左边会生成一个 <code>Octotree</code> 按钮，登录后鼠标滑动代码文件树，这样就可以快速定位文件和查看文件了。类似的还有<code>Sourcegraph</code>插件<br><img src="https://img-blog.csdnimg.cn/20201128212757505.gif" alt="在这里插入图片描述"></p><h2 id="2、Enhanced-GitHub">2、Enhanced GitHub</h2><p>😊之前从github上下载文件都需要整个工程clone，下载了该插件后可以进行单个文件的下载<br><img src="https://img-blog.csdnimg.cn/20201128214504261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201128214653377.gif" alt="在这里插入图片描述"></p><h2 id="3、GitZip">3、GitZip</h2><p>😆多个文件一起下载，或者单独下载一个文件夹<br><img src="https://img-blog.csdnimg.cn/20201128215001164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201128214949675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4、GitHub加速">4、GitHub加速</h2><p>😁<code>GitHub加速</code>插件能提高中国开发者访问 <code>GitHub</code> 的速度，提升<code>clone Git </code>仓库的速度，提升下载<code>release</code>包的下载速度。<br><img src="https://img-blog.csdnimg.cn/20201128215348199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5、Isometric-Contributions">5、Isometric Contributions</h2><p>😄更炫酷的3D立体方式渲染 GitHub 贡献图。<br><img src="https://img-blog.csdnimg.cn/2020112821563210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201128215705248.gif" alt="在这里插入图片描述"></p><h2 id="6、Awesome-Autocomplete-for-GitHub">6、Awesome Autocomplete for GitHub</h2><p>😍更快地、准确的github搜索插件<br><img src="https://img-blog.csdnimg.cn/20201128220119232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020112822333144.gif" alt="在这里插入图片描述"></p><h2 id="7、File-Icons-for-GitHub-and-GitLab">7、File Icons for GitHub and GitLab</h2><p>😚一个Chrome扩展，为GitHub、GitLab、gitea和gogs提供不同的文件类型图标。<br><img src="https://img-blog.csdnimg.cn/20201128220746676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201128220928252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后github相关的插件都可以去尝试<br><img src="https://img-blog.csdnimg.cn/20201128222017952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>参考文章：<br><a href="https://blog.csdn.net/xinzhifu1/article/details/109309805" target="_blank" rel="noopener">https://blog.csdn.net/xinzhifu1/article/details/109309805</a><br><a href="https://blog.csdn.net/Mrs_chens/article/details/104500188" target="_blank" rel="noopener">https://blog.csdn.net/Mrs_chens/article/details/104500188</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;谷歌上网助手&quot;&gt;谷歌上网助手&lt;/h2&gt;
&lt;p&gt;在chrome浏览器上安装插件，最方便的是在chrome网上应用商店进行搜索下载，这里强烈推荐&lt;strong&gt;谷歌上网助手&lt;/strong&gt;，可以进行学术性的科学上网。&lt;/p&gt;</summary>
    
    
    
    <category term="Github" scheme="https://www.shawn22.xyz/categories/Github/"/>
    
    
    <category term="git" scheme="https://www.shawn22.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>VMware15安装MacOS10.15</title>
    <link href="https://www.shawn22.xyz/posts/cb79a5e7.html"/>
    <id>https://www.shawn22.xyz/posts/cb79a5e7.html</id>
    <published>2020-11-24T13:13:58.000Z</published>
    <updated>2021-01-18T01:46:01.453Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、MAC-OS安装">1、MAC OS安装</h3><p>具体安装流程下面这篇博客已经十分详细的描述了<br><a href="https://blog.csdn.net/SuperAE86/article/details/104653595?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" target="_blank" rel="noopener">VM15pro安装MacOS10.15.1系统(超详细，可用)</a></p><blockquote><p>MacOS和unlocker云盘资料，防止失联<br>链接：<a href="https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ</a><br>提取码：l1dd</p></blockquote><a id="more"></a><h3 id="2、修改虚拟机的Mac分辨率">2、修改虚拟机的Mac分辨率?</h3><p>使用VM安装好Mac后你会发现界面很小，就算全屏也不能真正的全屏，这就是因为分辨率的关系<br>解决方法如下：<br><strong>安装VMware Tools</strong><br><img src="https://img-blog.csdnimg.cn/20201124210742361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果点击后发现正在使用CD/DVD，则需要推出你正在使用的CD/DVD（操作方法右键选择推出xxx）<br><img src="https://img-blog.csdnimg.cn/20201124210711300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装好之后需要给软件安装权限，否则后面的命令会显示<code>Unable to find the service</code>，如果出现，根据<strong>系统偏好设置——&gt;安全性与隐私——&gt;通用</strong>，解锁，点击允许<img src="https://img-blog.csdnimg.cn/20201124211105852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>重启之后VMware Tools则安装完毕<br>打开Mac终端并输入<br><code>sudo /Library/Application\ Support/VMware\ Tools/vmware-resolutionSet 1920 1080 </code><br>后面的两个数字可以根据需求修改，最后重启即可</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1、MAC-OS安装&quot;&gt;1、MAC OS安装&lt;/h3&gt;
&lt;p&gt;具体安装流程下面这篇博客已经十分详细的描述了&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/SuperAE86/article/details/104653595?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VM15pro安装MacOS10.15.1系统(超详细，可用)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MacOS和unlocker云盘资料，防止失联&lt;br&gt;
链接：&lt;a href=&quot;https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ&lt;/a&gt;&lt;br&gt;
提取码：l1dd&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="macos" scheme="https://www.shawn22.xyz/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA好用的几款插件</title>
    <link href="https://www.shawn22.xyz/posts/5f51afa8.html"/>
    <id>https://www.shawn22.xyz/posts/5f51afa8.html</id>
    <published>2020-11-06T15:46:49.000Z</published>
    <updated>2021-03-15T08:49:37.584Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、CodeGlance">1、CodeGlance</h4><p>代码迷你缩放图插件，可以快速拖动代码，和VScode一样<br><img src="https://img-blog.csdnimg.cn/20201106233342873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="2、Codota">2、Codota</h4><p>代码提示工具，扫描你的代码后，根据你的敲击完美提示。<br>Codota基于数百万个开源Java程序和您的上下文来完成代码行，从而帮助您以更少的错误更快地进行编码。</p><p><img src="https://img-blog.csdnimg.cn/20201106234011347.png#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h4 id="3、Alibaba-Java-Coding-Guidelines">3、Alibaba Java Coding Guidelines</h4><p>阿里巴巴的编码规约检查插件，检查你的编码习惯，让你更规范</p><h4 id="4、Alibaba-Cloud-Toolkit">4、Alibaba Cloud Toolkit</h4><p>快速部署到服务器<br><img src="https://img-blog.csdnimg.cn/20201106233606633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="5、GenerateAllSetter">5、GenerateAllSetter</h4><p>快速生成get set</p><h4 id="6、Lombok">6、Lombok</h4><p>简化long冗余的javabean代码，提高执行效率。只需加上注解 什么get set 什么toString 等等方法都不需要写。<br>简单使用详见<a href="https://blog.csdn.net/lemon_TT/article/details/109249154" target="_blank" rel="noopener">Lombok常用注解</a></p><h4 id="7、JUnitGenerator">7、JUnitGenerator</h4><p>自动生成测试代码。<br><img src="https://img-blog.csdnimg.cn/20201106233606469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="8、EasyCode">8、EasyCode</h4><p>Easycode是idea的一个插件，可以直接对数据的表生成entity，controller，service，dao，mapper，无需任何编码，简单而强大。<br><img src="https://img-blog.csdnimg.cn/20201106233606598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="9、Chinese-Simplified">9、Chinese (Simplified)</h4><p>汉化插件，看不懂英文必备</p><h4 id="10、Free-MyBatis-plugin">10、Free MyBatis plugin</h4><p>free-idea-mybatis是一款增强idea对mybatis支持的插件（和EasyCode功能有重复），主要功能如下：</p><ul><li>生成mapper xml文件</li><li>快速从代码跳转到mapper及从mapper返回代码</li><li>mybatis自动补全及语法错误提示</li><li>集成mybatis generator gui界面<br><img src="https://img-blog.csdnimg.cn/20201106233606676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></li></ul><h4 id="11、MyBatis-Log-Plugin">11、MyBatis Log Plugin</h4><p>这款插件是直接将Mybatis执行的sql脚本显示出来，把 mybatis 输出的sql日志还原成完整的sql语句。即将日志输出的sql语句中的问号 ? 替换成真正的参数值（收费）。</p><p><a href="https://github.com/Link-Kou/intellij-mybaitslog" target="_blank" rel="noopener">github官网</a></p><h4 id="12、MyBatisCodeHelperPro">12、MyBatisCodeHelperPro</h4><p>支持mapper互跳，方法自动生成，代码自动生成。(和Free MyBatis plugin功能有些重复,，但是收费)</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1vrxBM8ujm79jabo2D2w8mQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1vrxBM8ujm79jabo2D2w8mQ</a><br>提取码：jxo8</p><p>收费两项可以使用本地安装，注意版本对应，具体可查询百度</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201106233606606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="13、RestfulTool">13、RestfulTool</h4><ul><li>提供了一个 Services tree 的显示窗口</li><li>双击 URL 直接跳转到对应的方法定义</li><li>一个简单的 http 请求工具</li><li>支持 Spring 体系 (Spring MVC / Spring Boot)</li><li>支持 JAX-RS</li><li>支持 <code>Navigate -&gt; Request Service</code> 搜索 Mapping (Ctrl + Alt + /)<br><img src="https://img-blog.csdnimg.cn/20201106233606636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></li></ul><h4 id="14、Translation">14、Translation</h4><p>翻译插件<br><img src="https://img-blog.csdnimg.cn/20201106233606515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="15、WakaTime">15、WakaTime</h4><p>这是一款 IDE 插件，支持市场上大部分IDE，可以统计你使用 IDE 每个项目的时长以及代码数，一周一统计，它会将你每周的每个项目的工作时长统计好之后发到你的邮箱。<br><a href="https://wakatime.com/" target="_blank" rel="noopener">后台地址</a></p><h4 id="16、Easy-Javadoc">16、Easy Javadoc</h4><p>Easy Javadoc是IntelliJ IDEA的插件，能帮助java开发者自动生成javadoc文档注释<br>使用：将光标放置到想要生成注释的类、方法或者属性上，然后按下快捷键ctrl \或者command \，即可生成注释，你的方法名起的越贴切，注释越得体。</p><hr><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/KXEPNl1Peu4n-XkdC4vFwA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/KXEPNl1Peu4n-XkdC4vFwA</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1、CodeGlance&quot;&gt;1、CodeGlance&lt;/h4&gt;
&lt;p&gt;代码迷你缩放图插件，可以快速拖动代码，和VScode一样&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20201106233342873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2、Codota&quot;&gt;2、Codota&lt;/h4&gt;
&lt;p&gt;代码提示工具，扫描你的代码后，根据你的敲击完美提示。&lt;br&gt;
Codota基于数百万个开源Java程序和您的上下文来完成代码行，从而帮助您以更少的错误更快地进行编码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201106234011347.png#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="IDETools" scheme="https://www.shawn22.xyz/tags/IDETools/"/>
    
  </entry>
  
  <entry>
    <title>Android组件点击事件三种实现方法</title>
    <link href="https://www.shawn22.xyz/posts/49a72762.html"/>
    <id>https://www.shawn22.xyz/posts/49a72762.html</id>
    <published>2020-10-28T15:13:15.000Z</published>
    <updated>2021-03-15T08:48:03.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、准备工作">一、准备工作</h2><h3 id="1、工作目录">1、工作目录</h3><p>首先创建空项目<br><img src="https://img-blog.csdnimg.cn/20201028225647376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h3 id="2、布局文件（activity-main-xml）">2、布局文件（activity_main.xml）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_click"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"点击我"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、三种实现方式">二、三种实现方式</h2><h3 id="1、在与事件绑定时定义事件监听器">1、在与事件绑定时定义事件监听器</h3><p>该方法是当通过调用组件的setXXXListener()方法设置监听器时，定义只能当前的组件使用的事件监听器，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Button btnClick = findViewById(R.id.btn_click);</span><br><span class="line">        <span class="comment">//使用findViewById方法对控件进行获取</span></span><br><span class="line">        <span class="comment">//R.id.btn_click对应布局中添加的id属性</span></span><br><span class="line">        btnClick.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//里面写点击后想要实现的效果</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                        <span class="string">"按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="comment">//这里是弹出一个消息---"按钮被点击"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、当前Activity类实现监听器接口">2、当前Activity类实现监听器接口</h3><p>该方法使当前Activity类实现相应的监听器接口，完成监听器中的抽象方法，组件绑定监听器时，监听器对象为Activity对象（常用）。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> android.os.Bundle;</span><br><span class="line">        <span class="keyword">import</span> android.view.View;</span><br><span class="line">        <span class="keyword">import</span> android.widget.Button;</span><br><span class="line">        <span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Button btnClick = findViewById(R.id.btn_click);<span class="comment">//控件的获取</span></span><br><span class="line">        btnClick.setOnClickListener(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//需要传入接口实现类的实例。</span></span><br><span class="line">        <span class="comment">//此时接口实现类的实例为MainActivity</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_click:</span><br><span class="line">                <span class="comment">//里面写点击后想要实现的效果</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                        <span class="string">"按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="comment">//这里是弹出一个消息---"按钮被点击"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、XML布局文件中设置回调方法">3、XML布局文件中设置回调方法</h3><p>该方法是在XML布局文件中设置回调方法，在Java代码中实现该方法即可。但此方法不是一个通用的方法，但对按钮等常用组件的点击事件处理确实很方便。具体步骤如下：<br>1、<code>activity_main.xml </code>布局文件中添加<code>onclick </code>属性，设定回调方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_click"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"点击我"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"Click"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在<code>MainActivity</code>中添加<code>Click</code>方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button btnClick = findViewById(R.id.btn_click);<span class="comment">//控件的获取</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">Click</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_click:<span class="comment">//此处是对布局中设置的id直接进行判断，</span></span><br><span class="line">                <span class="comment">// 不需要对控件进行获取（findviewByID）</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：<br><a href="https://www.cnblogs.com/xqz0618/p/click3.html" target="_blank" rel="noopener">https://www.cnblogs.com/xqz0618/p/click3.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、准备工作&quot;&gt;一、准备工作&lt;/h2&gt;
&lt;h3 id=&quot;1、工作目录&quot;&gt;1、工作目录&lt;/h3&gt;
&lt;p&gt;首先创建空项目&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20201028225647376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="安卓" scheme="https://www.shawn22.xyz/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>Lombok常用注解</title>
    <link href="https://www.shawn22.xyz/posts/a283ce74.html"/>
    <id>https://www.shawn22.xyz/posts/a283ce74.html</id>
    <published>2020-10-23T12:52:10.000Z</published>
    <updated>2021-02-17T02:32:52.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Lombok简介">1、Lombok简介</h2><p>Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法。</p><blockquote><p>官方地址：<a href="https://projectlombok.org/" target="_blank" rel="noopener">https://projectlombok.org/</a><br>github地址：<a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok</a></p></blockquote><a id="more"></a><h2 id="2、Maven引入">2、Maven引入</h2><p>除了引入maven，还需要安装Lombok插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、注解介绍">3、注解介绍</h2><p><img src="https://img-blog.csdnimg.cn/20201023202423444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><p><code>@Getter /@Setter</code><br>作用在字段上，会自动生成字段的Getter；作用在类上，会自动生成该类所有非静态字段的Getter，还能控制Getter的访问级别</p></li><li><p><code>@ToString</code><br>类注解，自动生成类的toString方法，可以做一些定制，比如不使用某个字段，不调用Getters等</p></li><li><p><code>@EqualsAndHashCode</code><br>自动生成 equals(Object other) 和 hashcode() 方法，包括所有非静态变量和非 transient 的变量，如果某些变量不想要加进判断，可以透过 exclude 排除，也可以使用 of 指定某些字段</p></li><li><p><code>@NoArgsConstructor, @AllArgsConstructor, @RequiredArgsConstructor</code><br>@NoArgsConstructor 类注解，自动生成一个无参构造函数。<br>@AllArgsConstructor 类注解，生成一个初始化所有字段的构造函数(在加上 @AllArgsConstructor 时，一定要补上 @NoArgsConstrcutor)<br>@RequiredArgsConstructor : 生成一个包含 “特定参数” 的构造器，特定参数指的是那些有加上 final 修饰词的变量们.</p></li><li><p><code>@Data</code><br>相当于同时应用了@Getter、@Setter、@ToString、@EqualsAndHashCode、@RequiredArgsConstructor。如果已经定义了一个构造方法，就不会再自动生成构造方法了。</p></li><li><p><code>@Value</code><br>和@Data类似，但是用于不可变类型。生成的类和所有字段都设置为final，所有字段都为private，自动生成Getter但是没有Setter，会生成初始化所有字段的构造函数。相当于同时应用了final @ToString、 @EqualsAndHashCode、 @AllArgsConstructor 、@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)和 @Getter</p></li><li><p><code>@Builder</code><br>自动生成流式 set 值写法，从此之后再也不用写一堆 setter 了。注意，虽然只要加上 @Builder 注解，我们就能够用流式写法快速设定对象的值，但是 setter 还是必须要写不能省略的，因为 Spring 或是其他框架有很多地方都会用到对象的 getter/setter 对他们取值/赋值。<br>所以通常是 @Data 和 @Builder 会一起用在同个类上，既方便我们流式写代码，也方便框架做事</p></li><li><p><code>@NotNull</code><br>作用在方法参数上的注解，用于自动生成空值参数检查。</p></li><li><p><code>@Slf4j</code><br>自动生成该类的 log 静态常量，要打日志就可以直接打，不用再手动 new log 静态常量了</p></li></ul><hr><p>实际开发中一般常用到的:<br>@Data<br>@NoArgsConstructor<br>@AllArgsConstructor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>         <span class="comment">// 生成 getter/setter/equals/canEqual/hashCode/toString        </span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>     <span class="comment">// 为类提供一个无参的构造方法 </span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>    <span class="comment">// 为类提供一个全参的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> weigh;</span><br><span class="line">    <span class="keyword">int</span> high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要链式调用，增加注解<code>@Accessor(chain = true)</code>后即可链式。同时注意Lombok可能会产生一定问题</p><hr><p>参考文章：<br><a href="https://www.cnblogs.com/ooo0/p/12448096.html" target="_blank" rel="noopener">https://www.cnblogs.com/ooo0/p/12448096.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、Lombok简介&quot;&gt;1、Lombok简介&lt;/h2&gt;
&lt;p&gt;Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方地址：&lt;a href=&quot;https://projectlombok.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://projectlombok.org/&lt;/a&gt;&lt;br&gt;
github地址：&lt;a href=&quot;https://github.com/rzwitserloot/lombok&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/rzwitserloot/lombok&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Lombok" scheme="https://www.shawn22.xyz/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Java实现生成和解析二维码</title>
    <link href="https://www.shawn22.xyz/posts/d5aff0bc.html"/>
    <id>https://www.shawn22.xyz/posts/d5aff0bc.html</id>
    <published>2020-10-18T14:27:24.000Z</published>
    <updated>2020-10-18T14:30:15.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、建立项目">1、建立项目</h2><p>首先需要创建一个普通的 Maven 项目，在这里我用的是 google 提供的 jar包，pom.xml 文件配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javaboy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>QRCode<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加 google 提供的二维码依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果maven没有反应，建议刷新一下或者更换maven源（我用的就是阿里云源）</p></blockquote><a id="more"></a><h2 id="2、创建工具类">2、创建工具类</h2><p>这里需要创建两个工具类<code>BufferedImageLuminanceSource</code>和<code>QRCodeUtil</code>类。项目结构如下，我创建的是springboot的jar包，当然其他的也都可以的。<br><img src="https://img-blog.csdnimg.cn/2020101822193848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>工具类1 (BufferedImageLuminanceSource)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.qrcode.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.LuminanceSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedImageLuminanceSource</span> <span class="keyword">extends</span> <span class="title">LuminanceSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BufferedImage image;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> top;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedImageLuminanceSource</span><span class="params">(BufferedImage image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(image, <span class="number">0</span>, <span class="number">0</span>, image.getWidth(), image.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedImageLuminanceSource</span><span class="params">(BufferedImage image, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(width, height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sourceWidth = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> sourceHeight = image.getHeight();</span><br><span class="line">        <span class="keyword">if</span> (left + width &gt; sourceWidth || top + height &gt; sourceHeight) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Crop rectangle does not fit within image data."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = top; y &lt; top + height; y++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = left; x &lt; left + width; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((image.getRGB(x, y) &amp; <span class="number">0xFF000000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    image.setRGB(x, y, <span class="number">0xFFFFFFFF</span>); <span class="comment">// = white</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.image = <span class="keyword">new</span> BufferedImage(sourceWidth, sourceHeight, BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        <span class="keyword">this</span>.image.getGraphics().drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.top = top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getRow(<span class="keyword">int</span> y, <span class="keyword">byte</span>[] row) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span> || y &gt;= getHeight()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Requested row is outside the image: "</span> + y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">if</span> (row == <span class="keyword">null</span> || row.length &lt; width) &#123;</span><br><span class="line">            row = <span class="keyword">new</span> <span class="keyword">byte</span>[width];</span><br><span class="line">        &#125;</span><br><span class="line">        image.getRaster().getDataElements(left, top + y, width, <span class="number">1</span>, row);</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getMatrix() &#123;</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = getHeight();</span><br><span class="line">        <span class="keyword">int</span> area = width * height;</span><br><span class="line">        <span class="keyword">byte</span>[] matrix = <span class="keyword">new</span> <span class="keyword">byte</span>[area];</span><br><span class="line">        image.getRaster().getDataElements(left, top, width, height, matrix);</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCropSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuminanceSource <span class="title">crop</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedImageLuminanceSource(image, <span class="keyword">this</span>.left + left, <span class="keyword">this</span>.top + top, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRotateSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuminanceSource <span class="title">rotateCounterClockwise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sourceWidth = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> sourceHeight = image.getHeight();</span><br><span class="line">        AffineTransform transform = <span class="keyword">new</span> AffineTransform(<span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, sourceWidth);</span><br><span class="line">        BufferedImage rotatedImage = <span class="keyword">new</span> BufferedImage(sourceHeight, sourceWidth, BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        Graphics2D g = rotatedImage.createGraphics();</span><br><span class="line">        g.drawImage(image, transform, <span class="keyword">null</span>);</span><br><span class="line">        g.dispose();</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedImageLuminanceSource(rotatedImage, top, sourceWidth - (left + width), getHeight(), width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工具类2 (QRCodeUtil)<br>这里面可以修改一些参数，例如二维码的尺寸，宽高等等。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.qrcode.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.*;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.HybridBinarizer;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.RoundRectangle2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QRCodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARSET = <span class="string">"utf-8"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FORMAT_NAME = <span class="string">"JPG"</span>;</span><br><span class="line">    <span class="comment">// 二维码尺寸</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QRCODE_SIZE = <span class="number">300</span>;</span><br><span class="line">    <span class="comment">// LOGO宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WIDTH = <span class="number">60</span>;</span><br><span class="line">    <span class="comment">// LOGO高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HEIGHT = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BufferedImage <span class="title">createImage</span><span class="params">(String content, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Hashtable hints = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">        BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, QRCODE_SIZE, QRCODE_SIZE,</span><br><span class="line">                hints);</span><br><span class="line">        <span class="keyword">int</span> width = bitMatrix.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = bitMatrix.getHeight();</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">                image.setRGB(x, y, bitMatrix.get(x, y) ? <span class="number">0xFF000000</span> : <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (imgPath == <span class="keyword">null</span> || <span class="string">""</span>.equals(imgPath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入图片</span></span><br><span class="line">        QRCodeUtil.insertImage(image, imgPath, needCompress);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertImage</span><span class="params">(BufferedImage source, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(imgPath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            System.err.println(<span class="string">""</span> + imgPath + <span class="string">" 该文件不存在！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Image src = ImageIO.read(<span class="keyword">new</span> File(imgPath));</span><br><span class="line">        <span class="keyword">int</span> width = src.getWidth(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">int</span> height = src.getHeight(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (needCompress) &#123; <span class="comment">// 压缩LOGO</span></span><br><span class="line">            <span class="keyword">if</span> (width &gt; WIDTH) &#123;</span><br><span class="line">                width = WIDTH;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (height &gt; HEIGHT) &#123;</span><br><span class="line">                height = HEIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">            Image image = src.getScaledInstance(width, height, Image.SCALE_SMOOTH);</span><br><span class="line">            BufferedImage tag = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            Graphics g = tag.getGraphics();</span><br><span class="line">            g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>); <span class="comment">// 绘制缩小后的图</span></span><br><span class="line">            g.dispose();</span><br><span class="line">            src = image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入LOGO</span></span><br><span class="line">        Graphics2D graph = source.createGraphics();</span><br><span class="line">        <span class="keyword">int</span> x = (QRCODE_SIZE - width) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (QRCODE_SIZE - height) / <span class="number">2</span>;</span><br><span class="line">        graph.drawImage(src, x, y, width, height, <span class="keyword">null</span>);</span><br><span class="line">        Shape shape = <span class="keyword">new</span> RoundRectangle2D.Float(x, y, width, width, <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">        graph.setStroke(<span class="keyword">new</span> BasicStroke(<span class="number">3f</span>));</span><br><span class="line">        graph.draw(shape);</span><br><span class="line">        graph.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, String destPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        mkdirs(destPath);</span><br><span class="line">        <span class="comment">// String file = new Random().nextInt(99999999)+".jpg";</span></span><br><span class="line">        <span class="comment">// ImageIO.write(image, FORMAT_NAME, new File(destPath+"/"+file));</span></span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, <span class="keyword">new</span> File(destPath));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">encode</span><span class="params">(String content, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mkdirs</span><span class="params">(String destPath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(destPath);</span><br><span class="line">        <span class="comment">// 当文件夹不存在时，mkdirs会自动创建多层目录，区别于mkdir．(mkdir如果父目录不存在则会抛出异常)</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, String destPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, imgPath, destPath, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 被注释的方法</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * public static void encode(String content, String destPath, boolean</span></span><br><span class="line"><span class="comment">     * needCompress) throws Exception &#123; QRCodeUtil.encode(content, null, destPath,</span></span><br><span class="line"><span class="comment">     * needCompress); &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String destPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, <span class="keyword">null</span>, destPath, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, OutputStream output, <span class="keyword">boolean</span> needCompress)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, OutputStream output)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, <span class="keyword">null</span>, output, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image;</span><br><span class="line">        image = ImageIO.read(file);</span><br><span class="line">        <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedImageLuminanceSource source = <span class="keyword">new</span> BufferedImageLuminanceSource(image);</span><br><span class="line">        BinaryBitmap bitmap = <span class="keyword">new</span> BinaryBitmap(<span class="keyword">new</span> HybridBinarizer(source));</span><br><span class="line">        Result result;</span><br><span class="line">        Hashtable hints = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        hints.put(DecodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        result = <span class="keyword">new</span> MultiFormatReader().decode(bitmap, hints);</span><br><span class="line">        String resultStr = result.getText();</span><br><span class="line">        <span class="keyword">return</span> resultStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QRCodeUtil.decode(<span class="keyword">new</span> File(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、创建启动类">3、创建启动类</h2><p>这一步就是调用方法，一般大家使用这种功能都是为了实现业务，例如常见的扫描二维码跳转链接（页面），扫描二维码出现文字等等。有些二维码中间还带有 Logo 这种图片，将需要嵌入二维码的图片路径准备好就没有问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.qrcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.csdn.qrcode.util.QRCodeUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QrcodeApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 存放在二维码中的内容</span></span><br><span class="line">        <span class="comment">// 二维码中的内容可以是文字，可以是链接等</span></span><br><span class="line">        String text = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">        <span class="comment">// 嵌入二维码的图片路径</span></span><br><span class="line">        <span class="comment">// String imgPath = "C:\\Users\\Administrator\\Pictures\\img\\dog.jpg";</span></span><br><span class="line">        String imgPath = <span class="string">"picture/lemon.jpg"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成的二维码的路径及名称</span></span><br><span class="line">        String destPath = <span class="string">"picture/"</span> + System.currentTimeMillis() + <span class="string">".jpg"</span>;</span><br><span class="line">        <span class="comment">//生成不带logo的二维码</span></span><br><span class="line">        <span class="comment">// QRCodeUtil.encode(text, null, destPath, true);</span></span><br><span class="line">        <span class="comment">//生成带logo的二维码</span></span><br><span class="line">        QRCodeUtil.encode(text, imgPath, destPath, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 解析二维码</span></span><br><span class="line">        String str = QRCodeUtil.decode(destPath);</span><br><span class="line">        <span class="comment">// 打印出解析出的内容</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:<br><img src="https://img-blog.csdnimg.cn/20201018222534856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p>参考文章：<br><a href="https://gitee.com/jian_bo_bai/QRCode" target="_blank" rel="noopener">https://gitee.com/jian_bo_bai/QRCode</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、建立项目&quot;&gt;1、建立项目&lt;/h2&gt;
&lt;p&gt;首先需要创建一个普通的 Maven 项目，在这里我用的是 google 提供的 jar包，pom.xml 文件配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.javaboy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;QRCode&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 添加 google 提供的二维码依赖 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.google.zxing&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.3.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如果maven没有反应，建议刷新一下或者更换maven源（我用的就是阿里云源）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="二维码" scheme="https://www.shawn22.xyz/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
</feed>
