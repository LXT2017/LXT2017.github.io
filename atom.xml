<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星的猫(&gt;^ω^&lt;)喵</title>
  
  
  <link href="https://www.shawn22.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.shawn22.xyz/"/>
  <updated>2021-01-28T10:58:24.808Z</updated>
  <id>https://www.shawn22.xyz/</id>
  
  <author>
    <name>Shawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot整合JWT实现前后端Token验证</title>
    <link href="https://www.shawn22.xyz/posts/5cd97de5.html"/>
    <id>https://www.shawn22.xyz/posts/5cd97de5.html</id>
    <published>2021-01-28T10:56:21.000Z</published>
    <updated>2021-01-28T10:58:24.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JWT介绍">一、JWT介绍</h2><h3 id="1、JWT简介">1、JWT简介</h3><blockquote><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">(RFC 7519</a>).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><p>官网：<a href="https://jwt.io/introduction/" target="_blank" rel="noopener">https://jwt.io/introduction/</a></p></blockquote><a id="more"></a><h3 id="2、JWT认证和session认证的区别">2、JWT认证和session认证的区别</h3><h4 id="session认证">session认证</h4><p>http协议是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发送的请求，所以为了让我们的应用能识别是哪个用户发出的，我们只能在服务器存储一份用户登陆的信息，这份登陆信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用个就能识别请求来自哪个用户了，这就是传统的基于sessino认证。</p><h4 id="JWT认证">JWT认证</h4><p>基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或会话信息。这也就意味着JWT认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p><h3 id="3、JWT认证过程">3、JWT认证过程</h3><p><img src="https://img-blog.csdnimg.cn/20210127183348127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>用户使用账号和密码发出post请求；</li><li>服务器使用私钥创建一个jwt；</li><li>服务器返回这个jwt给浏览器；</li><li>浏览器将该jwt串在请求头中像服务器发送请求；</li><li>服务器验证该jwt；</li><li>返回响应的资源给浏览器</li></ol><h3 id="4、JWT结构">4、JWT结构</h3><p>JWT是由三段信息构成的，将这三段信息文本用<code>.</code>连接一起就构成了JWT字符串。就像这样:<code>xxxxx.yyyyy.zzzzz</code>。JWT包含了三部分：<br><strong>Header</strong> 头部(标题包含了令牌的元数据，并且包含签名和/或加密算法的类型)<br><strong>Payload</strong> 负载 (类似于飞机上承载的物品)<br><strong>Signature</strong> 签名/签证</p><h2 id="二、springboot和JWT整合">二、springboot和JWT整合</h2><p><strong>在<code>pom.xml</code>中添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--注意版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>创建<code>annotation</code>自定义注解包，在包下创建<code>PassToken</code>和<code>UserLoginToken</code>两个注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法上有该注解就放行</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PassToken &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示需要token验证</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserLoginToken &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置拦截器，实现一个拦截器就需要实现<code>HandlerInterceptor</code>接口</strong></p><p><code>HandlerInterceptor</code>接口主要定义了三个方法<br><strong>1.<code>boolean preHandle ()</code>：</strong><br>预处理回调方法,实现处理器的预处理，第三个参数为响应的处理器,自定义<code>Controller</code>,返回值为<code>true</code>表示继续流程（如调用下一个拦截器或处理器）或者接着执行<br><code>postHandle()</code>和<code>afterCompletion()</code>；<code>false</code>表示流程中断，不会继续调用其他的拦截器或处理器，中断执行。</p><p><strong>2.<code>void postHandle()</code>：</strong><br>后处理回调方法，实现处理器的后处理（<code>DispatcherServlet</code>进行视图返回渲染之前进行调用），此时我们可以通过<code>modelAndView</code>（模型和视图对象）对模型数据进行处理或对视图进行处理，<code>modelAndView</code>也可能为<code>null</code>。</p><p><strong>3.<code>void afterCompletion()</code>:</strong><br>整个请求处理完毕回调方法,该方法也是需要当前对应的<code>Interceptor</code>的<code>preHandle()</code>的返回值为true时才会执行，也就是在<code>DispatcherServlet</code>渲染了对应的视图之后执行。用于进行资源清理。整个请求处理完毕回调方法。如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于<code>try-catch-finally</code>中的<code>finally</code>，但仅调用处理器执行链中</p><p><strong>代码主要流程:</strong></p><p><strong>1.从 <code>http</code> 请求头中取出 <code>token</code>，<br>2.判断是否映射到方法<br>3.检查是否有<code>passtoken</code>注释，有则跳过认证<br>4.检查有没有需要用户登录的注解，有则需要取出并验证<br>5.认证通过则可以访问，不通过会报相关错误信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 从 http 请求头中取出 token</span></span><br><span class="line">        String token = httpServletRequest.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        <span class="comment">// 如果不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span>(!(object <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HandlerMethod handlerMethod=(HandlerMethod)object;</span><br><span class="line">        Method method=handlerMethod.getMethod();</span><br><span class="line">        <span class="comment">//检查是否有passtoken注释，有则跳过认证</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(PassToken<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            PassToken passToken = method.getAnnotation(PassToken<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (passToken.required()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查有没有需要用户权限的注解</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(UserLoginToken<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            UserLoginToken userLoginToken = method.getAnnotation(UserLoginToken<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (userLoginToken.required()) &#123;</span><br><span class="line">                <span class="comment">// 执行认证</span></span><br><span class="line">                <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"无token，请重新登录"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取 token 中的 user id</span></span><br><span class="line">                String userId;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    userId = JWT.decode(token).getAudience().get(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JWTDecodeException j) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"401"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这里根据userId从数据库查找user</span></span><br><span class="line">                User user = userService.findUserById(userId);</span><br><span class="line">                <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户不存在，请重新登录"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 验证 token</span></span><br><span class="line">                JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(user.getPwd())).build();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jwtVerifier.verify(token);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"401"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// logger.info("执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// logger.info("整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中我的User类(已简化)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后还要配置拦截器，顺便把跨域配置给解决了，这里的WebMvcConfigurer可以扩展其他自定义功能，详情可查看<a href="https://docs.spring.io/spring-boot/docs/2.5.0-SNAPSHOT/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration" target="_blank" rel="noopener">spring官网</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String[] ORIGINS = <span class="keyword">new</span> String[] &#123; <span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span> &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     解决跨域问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line"> registry.addMapping(<span class="string">"/**"</span>).allowedOrigins(<span class="string">"*"</span>).allowCredentials(<span class="keyword">true</span>).allowedMethods(ORIGINS).maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现WebMvcConfigurer不会导致静态资源被拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor())</span><br><span class="line">                <span class="comment">// 拦截所有url</span></span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建<code>TokenService</code>类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  String <span class="title">getToken</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        Date start = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//一小时有效时间</span></span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis() + <span class="number">60</span>* <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        Date end = <span class="keyword">new</span> Date(currentTime);</span><br><span class="line">        String token = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        token = JWT.create().withAudience(String.valueOf(user.getUserId())).withIssuedAt(start).withExpiresAt(end).sign(Algorithm.HMAC256(user.getPwd()));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最终只需要在登录的时候调用<code>TokenService.getToken(user)</code>即可获得token，返回给前端，下次请求其他接口在header带上token即可</strong></p><hr><p>参考：</p><p><a href="https://github.com/jwtk/jjwt" target="_blank" rel="noopener">https://github.com/jwtk/jjwt</a></p><p><a href="https://zhuanlan.zhihu.com/p/91420328" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/91420328</a></p><p><a href="https://www.jianshu.com/p/e88d3f8151db" target="_blank" rel="noopener">https://www.jianshu.com/p/e88d3f8151db</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、JWT介绍&quot;&gt;一、JWT介绍&lt;/h2&gt;
&lt;h3 id=&quot;1、JWT简介&quot;&gt;1、JWT简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（&lt;a href=&quot;https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;(RFC 7519&lt;/a&gt;).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://jwt.io/introduction/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jwt.io/introduction/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="springboot" scheme="https://www.shawn22.xyz/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot自定义starter</title>
    <link href="https://www.shawn22.xyz/posts/dd4c9c1d.html"/>
    <id>https://www.shawn22.xyz/posts/dd4c9c1d.html</id>
    <published>2021-01-28T10:53:55.000Z</published>
    <updated>2021-01-28T10:58:15.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、starter简介">一、starter简介</h2><h4 id="1、SpringBoot-starter机制">1、SpringBoot starter机制</h4><p>SpringBoot中的starter是一种非常重要的机制，能够抛弃以前繁杂的配置，将其统一集成进starter，应用者只需要在maven中引入starter依赖，SpringBoot就能自动扫描到要加载的信息并启动相应的默认配置。starter让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。SpringBoot会自动通过classpath路径下的类发现需要的Bean，并注册进IOC容器。SpringBoot提供了针对日常企业应用研发各种场景的spring-boot-starter依赖模块。所有这些依赖模块都遵循着约定成俗的默认配置，并允许我们调整这些配置，即遵循“约定大于配置”的理念。</p><a id="more"></a><h4 id="2、为什么要自定义starter">2、为什么要自定义starter</h4><p>在我们的日常开发工作中，经常会有一些独立于业务之外的配置模块，我们经常将其放到一个特定的包下，然后如果另一个工程需要复用这块功能的时候，需要将代码硬拷贝到另一个工程，重新集成一遍，麻烦至极。如果我们将这些可独立于业务代码之外的功配置模块封装成一个个starter，复用的时候只需要将其在pom中引用依赖即可。</p><h4 id="3、自定义starter命名规范">3、自定义starter命名规范</h4><p>官方命名：</p><ul><li><p>前缀：spring-boot-starter-xxx</p></li><li><p>比如：spring-boot-starter-web…</p></li></ul><p>自定义命名：</p><ul><li>xxx-spring-boot-starter</li><li>比如：mybatis-spring-boot-starter</li></ul><h2 id="二、starter实现">二、starter实现</h2><h4 id="1、新建工程">1、新建工程</h4><p>这里我命名为<code>shawn-spring-boot-starter</code><br><img src="https://img-blog.csdnimg.cn/20210128160453197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2、添加pom-xml依赖">2、添加pom.xml依赖</h4><p>这里需要注意spring版本，太高可能会导致install失败</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.shawn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shawn-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;shawn-spring-boot-starter&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="3、定义一个实体类映射配置信息">3、定义一个实体类映射配置信息</h4><p><code>@ConfigurationProperties(prefix = &quot;shawn.hello&quot;) </code>它可以把相同前缀的配置信息通过配置项名称映射成实体类，可以直接在yml文件进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前缀 shawn.hello</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"shawn.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShawnProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、编写自己的服务">4、编写自己的服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShawnService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ShawnProperties ShawnProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShawnProperties <span class="title">getShawnProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ShawnProperties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShawnProperties</span><span class="params">(ShawnProperties ShawnProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ShawnProperties = ShawnProperties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ShawnProperties.getPrefix() + name + ShawnProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、定义配置类">5、定义配置类</h4><p>这里，我们将ShawnService类定义为一个Bean，交给Ioc容器。<br><code>@Configuration</code> 配置注解<br><code>@EnableConfigurationProperties </code>。该注解是用来开启对<code>@ConfigurationProperties</code> 注解配置Bean的支持。当然了，也可以在 <code>@ConfigurationProperties</code> 注解的类上添加 <code>@Configuration</code> 或者  <code>@Component </code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ShawnProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ShawnServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ShawnProperties shawnProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShawnService <span class="title">shawnService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShawnService service = <span class="keyword">new</span> ShawnService();</span><br><span class="line">        service.setShawnProperties(shawnProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、在resources编写一个自己的-META-INF-spring-factories">6、在<code>resources</code>编写一个自己的 <code>META-INF\spring.factories</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.shawn.ShawnServiceAutoConfiguration</span><br></pre></td></tr></table></figure><h4 id="7、打包到Maven仓库">7、打包到Maven仓库</h4><p><img src="https://img-blog.csdnimg.cn/20210128183428374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="三、测试starter">三、测试starter</h2><h4 id="1、新建项目，引入依赖">1、新建项目，引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shawn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shawn-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、编写测试类">2、编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShawnCOntroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ShawnService shawnService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shawnService.sayHello(<span class="string">"shawn"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、配置">3、配置</h4><p>在<code>application.yml</code>中进行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shawn:</span></span><br><span class="line">  <span class="attr">hello:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">prefix</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">suffix</span></span><br></pre></td></tr></table></figure><h4 id="4、测试">4、测试</h4><p>成功打印<br><img src="https://img-blog.csdnimg.cn/20210128185155637.png" alt="在这里插入图片描述"></p><hr><p>参考:<br><a href="https://www.cnblogs.com/hellokuangshen/p/12486631.html" target="_blank" rel="noopener">https://www.cnblogs.com/hellokuangshen/p/12486631.html</a><br><a href="https://www.cnblogs.com/hello-shf/p/10864977.html" target="_blank" rel="noopener">https://www.cnblogs.com/hello-shf/p/10864977.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、starter简介&quot;&gt;一、starter简介&lt;/h2&gt;
&lt;h4 id=&quot;1、SpringBoot-starter机制&quot;&gt;1、SpringBoot starter机制&lt;/h4&gt;
&lt;p&gt;SpringBoot中的starter是一种非常重要的机制，能够抛弃以前繁杂的配置，将其统一集成进starter，应用者只需要在maven中引入starter依赖，SpringBoot就能自动扫描到要加载的信息并启动相应的默认配置。starter让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。SpringBoot会自动通过classpath路径下的类发现需要的Bean，并注册进IOC容器。SpringBoot提供了针对日常企业应用研发各种场景的spring-boot-starter依赖模块。所有这些依赖模块都遵循着约定成俗的默认配置，并允许我们调整这些配置，即遵循“约定大于配置”的理念。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="springboot" scheme="https://www.shawn22.xyz/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>github实用的几款chrome插件</title>
    <link href="https://www.shawn22.xyz/posts/d7585d3e.html"/>
    <id>https://www.shawn22.xyz/posts/d7585d3e.html</id>
    <published>2020-11-28T14:35:03.000Z</published>
    <updated>2021-01-18T01:46:01.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谷歌上网助手">谷歌上网助手</h2><p>在chrome浏览器上安装插件，最方便的是在chrome网上应用商店进行搜索下载，这里强烈推荐<strong>谷歌上网助手</strong>，可以进行学术性的科学上网。</p><a id="more"></a><p><a href="http://googlehelper.net/" target="_blank" rel="noopener">谷歌上网助手下载地址</a><br>打开浏览器的扩展程序，直接将下载的crx拖进去就行了，打开插件之后就可以进行<a href="https://chrome.google.com/webstore/category/extensions" target="_blank" rel="noopener">应用商店</a>的访问了。<br><img src="https://img-blog.csdnimg.cn/20201128211605953.gif" alt="在这里插入图片描述"></p><h2 id="1、Octotree-GitHub-code-tree">1、Octotree - GitHub code tree</h2><p><img src="https://img-blog.csdnimg.cn/20201128212348459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>😃它会在github左边会生成一个 <code>Octotree</code> 按钮，登录后鼠标滑动代码文件树，这样就可以快速定位文件和查看文件了。类似的还有<code>Sourcegraph</code>插件<br><img src="https://img-blog.csdnimg.cn/20201128212757505.gif" alt="在这里插入图片描述"></p><h2 id="2、Enhanced-GitHub">2、Enhanced GitHub</h2><p>😊之前从github上下载文件都需要整个工程clone，下载了该插件后可以进行单个文件的下载<br><img src="https://img-blog.csdnimg.cn/20201128214504261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201128214653377.gif" alt="在这里插入图片描述"></p><h2 id="3、GitZip">3、GitZip</h2><p>😆多个文件一起下载，或者单独下载一个文件夹<br><img src="https://img-blog.csdnimg.cn/20201128215001164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201128214949675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4、GitHub加速">4、GitHub加速</h2><p>😁<code>GitHub加速</code>插件能提高中国开发者访问 <code>GitHub</code> 的速度，提升<code>clone Git </code>仓库的速度，提升下载<code>release</code>包的下载速度。<br><img src="https://img-blog.csdnimg.cn/20201128215348199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5、Isometric-Contributions">5、Isometric Contributions</h2><p>😄更炫酷的3D立体方式渲染 GitHub 贡献图。<br><img src="https://img-blog.csdnimg.cn/2020112821563210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201128215705248.gif" alt="在这里插入图片描述"></p><h2 id="6、Awesome-Autocomplete-for-GitHub">6、Awesome Autocomplete for GitHub</h2><p>😍更快地、准确的github搜索插件<br><img src="https://img-blog.csdnimg.cn/20201128220119232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020112822333144.gif" alt="在这里插入图片描述"></p><h2 id="7、File-Icons-for-GitHub-and-GitLab">7、File Icons for GitHub and GitLab</h2><p>😚一个Chrome扩展，为GitHub、GitLab、gitea和gogs提供不同的文件类型图标。<br><img src="https://img-blog.csdnimg.cn/20201128220746676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201128220928252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后github相关的插件都可以去尝试<br><img src="https://img-blog.csdnimg.cn/20201128222017952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>参考文章：<br><a href="https://blog.csdn.net/xinzhifu1/article/details/109309805" target="_blank" rel="noopener">https://blog.csdn.net/xinzhifu1/article/details/109309805</a><br><a href="https://blog.csdn.net/Mrs_chens/article/details/104500188" target="_blank" rel="noopener">https://blog.csdn.net/Mrs_chens/article/details/104500188</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;谷歌上网助手&quot;&gt;谷歌上网助手&lt;/h2&gt;
&lt;p&gt;在chrome浏览器上安装插件，最方便的是在chrome网上应用商店进行搜索下载，这里强烈推荐&lt;strong&gt;谷歌上网助手&lt;/strong&gt;，可以进行学术性的科学上网。&lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="https://www.shawn22.xyz/categories/git/"/>
    
    
    <category term="git" scheme="https://www.shawn22.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>VMware15安装MacOS10.15</title>
    <link href="https://www.shawn22.xyz/posts/cb79a5e7.html"/>
    <id>https://www.shawn22.xyz/posts/cb79a5e7.html</id>
    <published>2020-11-24T13:13:58.000Z</published>
    <updated>2021-01-18T01:46:01.453Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、MAC-OS安装">1、MAC OS安装</h3><p>具体安装流程下面这篇博客已经十分详细的描述了<br><a href="https://blog.csdn.net/SuperAE86/article/details/104653595?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" target="_blank" rel="noopener">VM15pro安装MacOS10.15.1系统(超详细，可用)</a></p><blockquote><p>MacOS和unlocker云盘资料，防止失联<br>链接：<a href="https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ</a><br>提取码：l1dd</p></blockquote><a id="more"></a><h3 id="2、修改虚拟机的Mac分辨率">2、修改虚拟机的Mac分辨率?</h3><p>使用VM安装好Mac后你会发现界面很小，就算全屏也不能真正的全屏，这就是因为分辨率的关系<br>解决方法如下：<br><strong>安装VMware Tools</strong><br><img src="https://img-blog.csdnimg.cn/20201124210742361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果点击后发现正在使用CD/DVD，则需要推出你正在使用的CD/DVD（操作方法右键选择推出xxx）<br><img src="https://img-blog.csdnimg.cn/20201124210711300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装好之后需要给软件安装权限，否则后面的命令会显示<code>Unable to find the service</code>，如果出现，根据<strong>系统偏好设置——&gt;安全性与隐私——&gt;通用</strong>，解锁，点击允许<img src="https://img-blog.csdnimg.cn/20201124211105852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>重启之后VMware Tools则安装完毕<br>打开Mac终端并输入<br><code>sudo /Library/Application\ Support/VMware\ Tools/vmware-resolutionSet 1920 1080 </code><br>后面的两个数字可以根据需求修改，最后重启即可</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1、MAC-OS安装&quot;&gt;1、MAC OS安装&lt;/h3&gt;
&lt;p&gt;具体安装流程下面这篇博客已经十分详细的描述了&lt;br&gt;
&lt;a href=&quot;https://blog.csdn.net/SuperAE86/article/details/104653595?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VM15pro安装MacOS10.15.1系统(超详细，可用)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MacOS和unlocker云盘资料，防止失联&lt;br&gt;
链接：&lt;a href=&quot;https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ&lt;/a&gt;&lt;br&gt;
提取码：l1dd&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="macos" scheme="https://www.shawn22.xyz/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA好用的几款插件</title>
    <link href="https://www.shawn22.xyz/posts/5f51afa8.html"/>
    <id>https://www.shawn22.xyz/posts/5f51afa8.html</id>
    <published>2020-11-06T15:46:49.000Z</published>
    <updated>2021-01-18T01:46:01.455Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、CodeGlance">1、CodeGlance</h4><p>代码迷你缩放图插件，可以快速拖动代码，和VScode一样<br><img src="https://img-blog.csdnimg.cn/20201106233342873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="2、Codota">2、Codota</h4><p>代码提示工具，扫描你的代码后，根据你的敲击完美提示。<br>Codota基于数百万个开源Java程序和您的上下文来完成代码行，从而帮助您以更少的错误更快地进行编码。</p><p><img src="https://img-blog.csdnimg.cn/20201106234011347.png#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h4 id="3、Alibaba-Java-Coding-Guidelines">3、Alibaba Java Coding Guidelines</h4><p>阿里巴巴的编码规约检查插件，检查你的编码习惯，让你更规范</p><h4 id="4、Alibaba-Cloud-Toolkit">4、Alibaba Cloud Toolkit</h4><p>快速部署到服务器<br><img src="https://img-blog.csdnimg.cn/20201106233606633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="5、GenerateAllSetter">5、GenerateAllSetter</h4><p>快速生成get set</p><h4 id="6、Lombok">6、Lombok</h4><p>简化long冗余的javabean代码，提高执行效率。只需加上注解 什么get set 什么toString 等等方法都不需要写。<br>简单使用详见<a href="https://blog.csdn.net/lemon_TT/article/details/109249154" target="_blank" rel="noopener">Lombok常用注解</a></p><h4 id="7、JUnitGenerator">7、JUnitGenerator</h4><p>自动生成测试代码。<br><img src="https://img-blog.csdnimg.cn/20201106233606469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="8、EasyCode">8、EasyCode</h4><p>Easycode是idea的一个插件，可以直接对数据的表生成entity，controller，service，dao，mapper，无需任何编码，简单而强大。<br><img src="https://img-blog.csdnimg.cn/20201106233606598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="9、Chinese-Simplified">9、Chinese (Simplified)</h4><p>汉化插件，看不懂英文必备</p><h4 id="10、Free-MyBatis-plugin">10、Free MyBatis plugin</h4><p>free-idea-mybatis是一款增强idea对mybatis支持的插件（和EasyCode功能有重复），主要功能如下：</p><ul><li>生成mapper xml文件</li><li>快速从代码跳转到mapper及从mapper返回代码</li><li>mybatis自动补全及语法错误提示</li><li>集成mybatis generator gui界面<br><img src="https://img-blog.csdnimg.cn/20201106233606676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></li></ul><h4 id="11、MyBatis-Log-Plugin">11、MyBatis Log Plugin</h4><p>这款插件是直接将Mybatis执行的sql脚本显示出来，把 mybatis 输出的sql日志还原成完整的sql语句。即将日志输出的sql语句中的问号 ? 替换成真正的参数值（收费）。</p><p><a href="https://github.com/Link-Kou/intellij-mybaitslog" target="_blank" rel="noopener">github官网</a></p><h4 id="12、MyBatisCodeHelperPro">12、MyBatisCodeHelperPro</h4><p>支持mapper互跳，方法自动生成，代码自动生成。(和Free MyBatis plugin功能有些重复,，但是收费)</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1vrxBM8ujm79jabo2D2w8mQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1vrxBM8ujm79jabo2D2w8mQ</a><br>提取码：jxo8</p><p>收费两项可以使用本地安装，注意版本对应，具体可查询百度</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201106233606606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="13、RestfulTool">13、RestfulTool</h4><ul><li>提供了一个 Services tree 的显示窗口</li><li>双击 URL 直接跳转到对应的方法定义</li><li>一个简单的 http 请求工具</li><li>支持 Spring 体系 (Spring MVC / Spring Boot)</li><li>支持 JAX-RS</li><li>支持 <code>Navigate -&gt; Request Service</code> 搜索 Mapping (Ctrl + Alt + /)<br><img src="https://img-blog.csdnimg.cn/20201106233606636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></li></ul><h4 id="14、Translation">14、Translation</h4><p>翻译插件<br><img src="https://img-blog.csdnimg.cn/20201106233606515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><h4 id="15、WakaTime">15、WakaTime</h4><p>这是一款 IDE 插件，支持市场上大部分IDE，可以统计你使用 IDE 每个项目的时长以及代码数，一周一统计，它会将你每周的每个项目的工作时长统计好之后发到你的邮箱。<br><a href="https://wakatime.com/" target="_blank" rel="noopener">后台地址</a></p><h4 id="16、Easy-Javadoc">16、Easy Javadoc</h4><p>Easy Javadoc是IntelliJ IDEA的插件，能帮助java开发者自动生成javadoc文档注释<br>使用：将光标放置到想要生成注释的类、方法或者属性上，然后按下快捷键ctrl \或者command \，即可生成注释，你的方法名起的越贴切，注释越得体。</p><hr><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/KXEPNl1Peu4n-XkdC4vFwA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/KXEPNl1Peu4n-XkdC4vFwA</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1、CodeGlance&quot;&gt;1、CodeGlance&lt;/h4&gt;
&lt;p&gt;代码迷你缩放图插件，可以快速拖动代码，和VScode一样&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20201106233342873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2、Codota&quot;&gt;2、Codota&lt;/h4&gt;
&lt;p&gt;代码提示工具，扫描你的代码后，根据你的敲击完美提示。&lt;br&gt;
Codota基于数百万个开源Java程序和您的上下文来完成代码行，从而帮助您以更少的错误更快地进行编码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20201106234011347.png#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Idea" scheme="https://www.shawn22.xyz/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>Android组件点击事件三种实现方法</title>
    <link href="https://www.shawn22.xyz/posts/49a72762.html"/>
    <id>https://www.shawn22.xyz/posts/49a72762.html</id>
    <published>2020-10-28T15:13:15.000Z</published>
    <updated>2020-10-28T15:14:14.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、准备工作">一、准备工作</h2><h3 id="1、工作目录">1、工作目录</h3><p>首先创建空项目<br><img src="https://img-blog.csdnimg.cn/20201028225647376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><a id="more"></a><h3 id="2、布局文件（activity-main-xml）">2、布局文件（activity_main.xml）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_click"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"点击我"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、三种实现方式">二、三种实现方式</h2><h3 id="1、在与事件绑定时定义事件监听器">1、在与事件绑定时定义事件监听器</h3><p>该方法是当通过调用组件的setXXXListener()方法设置监听器时，定义只能当前的组件使用的事件监听器，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Button btnClick = findViewById(R.id.btn_click);</span><br><span class="line">        <span class="comment">//使用findViewById方法对控件进行获取</span></span><br><span class="line">        <span class="comment">//R.id.btn_click对应布局中添加的id属性</span></span><br><span class="line">        btnClick.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//里面写点击后想要实现的效果</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                        <span class="string">"按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="comment">//这里是弹出一个消息---"按钮被点击"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、当前Activity类实现监听器接口">2、当前Activity类实现监听器接口</h3><p>该方法使当前Activity类实现相应的监听器接口，完成监听器中的抽象方法，组件绑定监听器时，监听器对象为Activity对象（常用）。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> android.os.Bundle;</span><br><span class="line">        <span class="keyword">import</span> android.view.View;</span><br><span class="line">        <span class="keyword">import</span> android.widget.Button;</span><br><span class="line">        <span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Button btnClick = findViewById(R.id.btn_click);<span class="comment">//控件的获取</span></span><br><span class="line">        btnClick.setOnClickListener(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//需要传入接口实现类的实例。</span></span><br><span class="line">        <span class="comment">//此时接口实现类的实例为MainActivity</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_click:</span><br><span class="line">                <span class="comment">//里面写点击后想要实现的效果</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                        <span class="string">"按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="comment">//这里是弹出一个消息---"按钮被点击"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、XML布局文件中设置回调方法">3、XML布局文件中设置回调方法</h3><p>该方法是在XML布局文件中设置回调方法，在Java代码中实现该方法即可。但此方法不是一个通用的方法，但对按钮等常用组件的点击事件处理确实很方便。具体步骤如下：<br>1、<code>activity_main.xml </code>布局文件中添加<code>onclick </code>属性，设定回调方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_click"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"点击我"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"Click"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在<code>MainActivity</code>中添加<code>Click</code>方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button btnClick = findViewById(R.id.btn_click);<span class="comment">//控件的获取</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">Click</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_click:<span class="comment">//此处是对布局中设置的id直接进行判断，</span></span><br><span class="line">                <span class="comment">// 不需要对控件进行获取（findviewByID）</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：<br><a href="https://www.cnblogs.com/xqz0618/p/click3.html" target="_blank" rel="noopener">https://www.cnblogs.com/xqz0618/p/click3.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、准备工作&quot;&gt;一、准备工作&lt;/h2&gt;
&lt;h3 id=&quot;1、工作目录&quot;&gt;1、工作目录&lt;/h3&gt;
&lt;p&gt;首先创建空项目&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20201028225647376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="安卓" scheme="https://www.shawn22.xyz/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>Lombok常用注解</title>
    <link href="https://www.shawn22.xyz/posts/a283ce74.html"/>
    <id>https://www.shawn22.xyz/posts/a283ce74.html</id>
    <published>2020-10-23T12:52:10.000Z</published>
    <updated>2021-02-17T02:32:52.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Lombok简介">1、Lombok简介</h2><p>Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法。</p><blockquote><p>官方地址：<a href="https://projectlombok.org/" target="_blank" rel="noopener">https://projectlombok.org/</a><br>github地址：<a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok</a></p></blockquote><a id="more"></a><h2 id="2、Maven引入">2、Maven引入</h2><p>除了引入maven，还需要安装Lombok插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、注解介绍">3、注解介绍</h2><p><img src="https://img-blog.csdnimg.cn/20201023202423444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><p><code>@Getter /@Setter</code><br>作用在字段上，会自动生成字段的Getter；作用在类上，会自动生成该类所有非静态字段的Getter，还能控制Getter的访问级别</p></li><li><p><code>@ToString</code><br>类注解，自动生成类的toString方法，可以做一些定制，比如不使用某个字段，不调用Getters等</p></li><li><p><code>@EqualsAndHashCode</code><br>自动生成 equals(Object other) 和 hashcode() 方法，包括所有非静态变量和非 transient 的变量，如果某些变量不想要加进判断，可以透过 exclude 排除，也可以使用 of 指定某些字段</p></li><li><p><code>@NoArgsConstructor, @AllArgsConstructor, @RequiredArgsConstructor</code><br>@NoArgsConstructor 类注解，自动生成一个无参构造函数。<br>@AllArgsConstructor 类注解，生成一个初始化所有字段的构造函数(在加上 @AllArgsConstructor 时，一定要补上 @NoArgsConstrcutor)<br>@RequiredArgsConstructor : 生成一个包含 “特定参数” 的构造器，特定参数指的是那些有加上 final 修饰词的变量们.</p></li><li><p><code>@Data</code><br>相当于同时应用了@Getter、@Setter、@ToString、@EqualsAndHashCode、@RequiredArgsConstructor。如果已经定义了一个构造方法，就不会再自动生成构造方法了。</p></li><li><p><code>@Value</code><br>和@Data类似，但是用于不可变类型。生成的类和所有字段都设置为final，所有字段都为private，自动生成Getter但是没有Setter，会生成初始化所有字段的构造函数。相当于同时应用了final @ToString、 @EqualsAndHashCode、 @AllArgsConstructor 、@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)和 @Getter</p></li><li><p><code>@Builder</code><br>自动生成流式 set 值写法，从此之后再也不用写一堆 setter 了。注意，虽然只要加上 @Builder 注解，我们就能够用流式写法快速设定对象的值，但是 setter 还是必须要写不能省略的，因为 Spring 或是其他框架有很多地方都会用到对象的 getter/setter 对他们取值/赋值。<br>所以通常是 @Data 和 @Builder 会一起用在同个类上，既方便我们流式写代码，也方便框架做事</p></li><li><p><code>@NotNull</code><br>作用在方法参数上的注解，用于自动生成空值参数检查。</p></li><li><p><code>@Slf4j</code><br>自动生成该类的 log 静态常量，要打日志就可以直接打，不用再手动 new log 静态常量了</p></li></ul><hr><p>实际开发中一般常用到的:<br>@Data<br>@NoArgsConstructor<br>@AllArgsConstructor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>         <span class="comment">// 生成 getter/setter/equals/canEqual/hashCode/toString        </span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>     <span class="comment">// 为类提供一个无参的构造方法 </span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>    <span class="comment">// 为类提供一个全参的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> weigh;</span><br><span class="line">    <span class="keyword">int</span> high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要链式调用，增加注解<code>@Accessor(chain = true)</code>后即可链式。同时注意Lombok可能会产生一定问题</p><hr><p>参考文章：<br><a href="https://www.cnblogs.com/ooo0/p/12448096.html" target="_blank" rel="noopener">https://www.cnblogs.com/ooo0/p/12448096.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、Lombok简介&quot;&gt;1、Lombok简介&lt;/h2&gt;
&lt;p&gt;Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方地址：&lt;a href=&quot;https://projectlombok.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://projectlombok.org/&lt;/a&gt;&lt;br&gt;
github地址：&lt;a href=&quot;https://github.com/rzwitserloot/lombok&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/rzwitserloot/lombok&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="Lombok" scheme="https://www.shawn22.xyz/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Java实现生成和解析二维码</title>
    <link href="https://www.shawn22.xyz/posts/d5aff0bc.html"/>
    <id>https://www.shawn22.xyz/posts/d5aff0bc.html</id>
    <published>2020-10-18T14:27:24.000Z</published>
    <updated>2020-10-18T14:30:15.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、建立项目">1、建立项目</h2><p>首先需要创建一个普通的 Maven 项目，在这里我用的是 google 提供的 jar包，pom.xml 文件配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javaboy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>QRCode<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加 google 提供的二维码依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果maven没有反应，建议刷新一下或者更换maven源（我用的就是阿里云源）</p></blockquote><a id="more"></a><h2 id="2、创建工具类">2、创建工具类</h2><p>这里需要创建两个工具类<code>BufferedImageLuminanceSource</code>和<code>QRCodeUtil</code>类。项目结构如下，我创建的是springboot的jar包，当然其他的也都可以的。<br><img src="https://img-blog.csdnimg.cn/2020101822193848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>工具类1 (BufferedImageLuminanceSource)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.qrcode.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.LuminanceSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedImageLuminanceSource</span> <span class="keyword">extends</span> <span class="title">LuminanceSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BufferedImage image;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> top;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedImageLuminanceSource</span><span class="params">(BufferedImage image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(image, <span class="number">0</span>, <span class="number">0</span>, image.getWidth(), image.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedImageLuminanceSource</span><span class="params">(BufferedImage image, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(width, height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sourceWidth = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> sourceHeight = image.getHeight();</span><br><span class="line">        <span class="keyword">if</span> (left + width &gt; sourceWidth || top + height &gt; sourceHeight) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Crop rectangle does not fit within image data."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = top; y &lt; top + height; y++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = left; x &lt; left + width; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((image.getRGB(x, y) &amp; <span class="number">0xFF000000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    image.setRGB(x, y, <span class="number">0xFFFFFFFF</span>); <span class="comment">// = white</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.image = <span class="keyword">new</span> BufferedImage(sourceWidth, sourceHeight, BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        <span class="keyword">this</span>.image.getGraphics().drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.top = top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getRow(<span class="keyword">int</span> y, <span class="keyword">byte</span>[] row) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span> || y &gt;= getHeight()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Requested row is outside the image: "</span> + y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">if</span> (row == <span class="keyword">null</span> || row.length &lt; width) &#123;</span><br><span class="line">            row = <span class="keyword">new</span> <span class="keyword">byte</span>[width];</span><br><span class="line">        &#125;</span><br><span class="line">        image.getRaster().getDataElements(left, top + y, width, <span class="number">1</span>, row);</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getMatrix() &#123;</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = getHeight();</span><br><span class="line">        <span class="keyword">int</span> area = width * height;</span><br><span class="line">        <span class="keyword">byte</span>[] matrix = <span class="keyword">new</span> <span class="keyword">byte</span>[area];</span><br><span class="line">        image.getRaster().getDataElements(left, top, width, height, matrix);</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCropSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuminanceSource <span class="title">crop</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedImageLuminanceSource(image, <span class="keyword">this</span>.left + left, <span class="keyword">this</span>.top + top, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRotateSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuminanceSource <span class="title">rotateCounterClockwise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sourceWidth = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> sourceHeight = image.getHeight();</span><br><span class="line">        AffineTransform transform = <span class="keyword">new</span> AffineTransform(<span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, sourceWidth);</span><br><span class="line">        BufferedImage rotatedImage = <span class="keyword">new</span> BufferedImage(sourceHeight, sourceWidth, BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        Graphics2D g = rotatedImage.createGraphics();</span><br><span class="line">        g.drawImage(image, transform, <span class="keyword">null</span>);</span><br><span class="line">        g.dispose();</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedImageLuminanceSource(rotatedImage, top, sourceWidth - (left + width), getHeight(), width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工具类2 (QRCodeUtil)<br>这里面可以修改一些参数，例如二维码的尺寸，宽高等等。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.qrcode.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.*;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.HybridBinarizer;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.RoundRectangle2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QRCodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARSET = <span class="string">"utf-8"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FORMAT_NAME = <span class="string">"JPG"</span>;</span><br><span class="line">    <span class="comment">// 二维码尺寸</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QRCODE_SIZE = <span class="number">300</span>;</span><br><span class="line">    <span class="comment">// LOGO宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WIDTH = <span class="number">60</span>;</span><br><span class="line">    <span class="comment">// LOGO高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HEIGHT = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BufferedImage <span class="title">createImage</span><span class="params">(String content, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Hashtable hints = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">        BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, QRCODE_SIZE, QRCODE_SIZE,</span><br><span class="line">                hints);</span><br><span class="line">        <span class="keyword">int</span> width = bitMatrix.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = bitMatrix.getHeight();</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">                image.setRGB(x, y, bitMatrix.get(x, y) ? <span class="number">0xFF000000</span> : <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (imgPath == <span class="keyword">null</span> || <span class="string">""</span>.equals(imgPath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入图片</span></span><br><span class="line">        QRCodeUtil.insertImage(image, imgPath, needCompress);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertImage</span><span class="params">(BufferedImage source, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(imgPath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            System.err.println(<span class="string">""</span> + imgPath + <span class="string">" 该文件不存在！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Image src = ImageIO.read(<span class="keyword">new</span> File(imgPath));</span><br><span class="line">        <span class="keyword">int</span> width = src.getWidth(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">int</span> height = src.getHeight(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (needCompress) &#123; <span class="comment">// 压缩LOGO</span></span><br><span class="line">            <span class="keyword">if</span> (width &gt; WIDTH) &#123;</span><br><span class="line">                width = WIDTH;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (height &gt; HEIGHT) &#123;</span><br><span class="line">                height = HEIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">            Image image = src.getScaledInstance(width, height, Image.SCALE_SMOOTH);</span><br><span class="line">            BufferedImage tag = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            Graphics g = tag.getGraphics();</span><br><span class="line">            g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>); <span class="comment">// 绘制缩小后的图</span></span><br><span class="line">            g.dispose();</span><br><span class="line">            src = image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入LOGO</span></span><br><span class="line">        Graphics2D graph = source.createGraphics();</span><br><span class="line">        <span class="keyword">int</span> x = (QRCODE_SIZE - width) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (QRCODE_SIZE - height) / <span class="number">2</span>;</span><br><span class="line">        graph.drawImage(src, x, y, width, height, <span class="keyword">null</span>);</span><br><span class="line">        Shape shape = <span class="keyword">new</span> RoundRectangle2D.Float(x, y, width, width, <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">        graph.setStroke(<span class="keyword">new</span> BasicStroke(<span class="number">3f</span>));</span><br><span class="line">        graph.draw(shape);</span><br><span class="line">        graph.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, String destPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        mkdirs(destPath);</span><br><span class="line">        <span class="comment">// String file = new Random().nextInt(99999999)+".jpg";</span></span><br><span class="line">        <span class="comment">// ImageIO.write(image, FORMAT_NAME, new File(destPath+"/"+file));</span></span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, <span class="keyword">new</span> File(destPath));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">encode</span><span class="params">(String content, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mkdirs</span><span class="params">(String destPath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(destPath);</span><br><span class="line">        <span class="comment">// 当文件夹不存在时，mkdirs会自动创建多层目录，区别于mkdir．(mkdir如果父目录不存在则会抛出异常)</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, String destPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, imgPath, destPath, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 被注释的方法</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * public static void encode(String content, String destPath, boolean</span></span><br><span class="line"><span class="comment">     * needCompress) throws Exception &#123; QRCodeUtil.encode(content, null, destPath,</span></span><br><span class="line"><span class="comment">     * needCompress); &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String destPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, <span class="keyword">null</span>, destPath, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, OutputStream output, <span class="keyword">boolean</span> needCompress)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, OutputStream output)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, <span class="keyword">null</span>, output, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image;</span><br><span class="line">        image = ImageIO.read(file);</span><br><span class="line">        <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedImageLuminanceSource source = <span class="keyword">new</span> BufferedImageLuminanceSource(image);</span><br><span class="line">        BinaryBitmap bitmap = <span class="keyword">new</span> BinaryBitmap(<span class="keyword">new</span> HybridBinarizer(source));</span><br><span class="line">        Result result;</span><br><span class="line">        Hashtable hints = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        hints.put(DecodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        result = <span class="keyword">new</span> MultiFormatReader().decode(bitmap, hints);</span><br><span class="line">        String resultStr = result.getText();</span><br><span class="line">        <span class="keyword">return</span> resultStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QRCodeUtil.decode(<span class="keyword">new</span> File(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、创建启动类">3、创建启动类</h2><p>这一步就是调用方法，一般大家使用这种功能都是为了实现业务，例如常见的扫描二维码跳转链接（页面），扫描二维码出现文字等等。有些二维码中间还带有 Logo 这种图片，将需要嵌入二维码的图片路径准备好就没有问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.qrcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.csdn.qrcode.util.QRCodeUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QrcodeApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 存放在二维码中的内容</span></span><br><span class="line">        <span class="comment">// 二维码中的内容可以是文字，可以是链接等</span></span><br><span class="line">        String text = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">        <span class="comment">// 嵌入二维码的图片路径</span></span><br><span class="line">        <span class="comment">// String imgPath = "C:\\Users\\Administrator\\Pictures\\img\\dog.jpg";</span></span><br><span class="line">        String imgPath = <span class="string">"picture/lemon.jpg"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成的二维码的路径及名称</span></span><br><span class="line">        String destPath = <span class="string">"picture/"</span> + System.currentTimeMillis() + <span class="string">".jpg"</span>;</span><br><span class="line">        <span class="comment">//生成不带logo的二维码</span></span><br><span class="line">        <span class="comment">// QRCodeUtil.encode(text, null, destPath, true);</span></span><br><span class="line">        <span class="comment">//生成带logo的二维码</span></span><br><span class="line">        QRCodeUtil.encode(text, imgPath, destPath, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 解析二维码</span></span><br><span class="line">        String str = QRCodeUtil.decode(destPath);</span><br><span class="line">        <span class="comment">// 打印出解析出的内容</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:<br><img src="https://img-blog.csdnimg.cn/20201018222534856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p>参考文章：<br><a href="https://gitee.com/jian_bo_bai/QRCode" target="_blank" rel="noopener">https://gitee.com/jian_bo_bai/QRCode</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、建立项目&quot;&gt;1、建立项目&lt;/h2&gt;
&lt;p&gt;首先需要创建一个普通的 Maven 项目，在这里我用的是 google 提供的 jar包，pom.xml 文件配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.javaboy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;QRCode&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 添加 google 提供的二维码依赖 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.google.zxing&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.3.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如果maven没有反应，建议刷新一下或者更换maven源（我用的就是阿里云源）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="二维码" scheme="https://www.shawn22.xyz/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java8 日期时间类整理</title>
    <link href="https://www.shawn22.xyz/posts/1af375c2.html"/>
    <id>https://www.shawn22.xyz/posts/1af375c2.html</id>
    <published>2020-10-18T07:26:12.000Z</published>
    <updated>2020-10-18T14:30:52.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当我们开始使⽤Java操作⽇期和时间的时候，会有⼀些棘⼿。你也许会通过 System.currentTimeMillis() 来返回1970年1⽉1⽇到今天的毫秒数。或者使⽤ Date类来操作⽇期；当遇到加减⽉份、天数的时候 你⼜需要⽤到Calendar类； 当需要格式化⽇期的时候需要使⽤java.text.DateFormat类。</p></blockquote><a id="more"></a><h1>一、Date类型存在的问题</h1><ul><li><p>结构定义混乱</p><ul><li>java.util Date包含日期时间</li><li>java.sql Date包含日期</li><li>java.text 时间格式化</li></ul></li><li><p>API不易用</p></li><li><p>非线程安全</p><ul><li>可变，SimpleDateFormate</li></ul></li><li><p>国际化</p><ul><li>Calendar TimeZone</li></ul><p><code>Date</code>如果不格式化，打印出的日期可读性差</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tue Sep <span class="number">10</span> <span class="number">09</span>:<span class="number">34</span>:<span class="number">04</span> CST <span class="number">2020</span></span><br></pre></td></tr></table></figure></li></ul><h1>二、Java8新的日期时间类</h1><h2 id="1、LocalDate">1、LocalDate</h2><p>只会获取年月日</p><ul><li>创建<code>LocalDate</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前年月日  </span></span><br><span class="line">LocalDate localDate = LocalDate.now();  </span><br><span class="line"><span class="comment">//构造指定的年月日  </span></span><br><span class="line">LocalDate localDate1 = LocalDate.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>获取年、月、日、星期几</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取年</span></span><br><span class="line"><span class="keyword">int</span> year = localDate.getYear();  </span><br><span class="line"><span class="keyword">int</span> year1 = localDate.get(ChronoField.YEAR);  </span><br><span class="line"><span class="comment">//获取月份</span></span><br><span class="line">Month month = localDate.getMonth();  </span><br><span class="line"><span class="keyword">int</span> month1 = localDate.get(ChronoField.MONTH_OF_YEAR);  </span><br><span class="line"><span class="comment">//获取天</span></span><br><span class="line"><span class="keyword">int</span> day = localDate.getDayOfMonth();  </span><br><span class="line"><span class="keyword">int</span> day1 = localDate.get(ChronoField.DAY_OF_MONTH);  </span><br><span class="line"><span class="comment">//获取星期几</span></span><br><span class="line">DayOfWeek dayOfWeek = localDate.getDayOfWeek();  </span><br><span class="line"><span class="keyword">int</span> dayOfWeek1 = localDate.get(ChronoField.DAY_OF_WEEK);</span><br></pre></td></tr></table></figure><h2 id="2、LocalTime">2、LocalTime</h2><p>只会获取几点几分几秒</p><ul><li>创建<code>LocalTime</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.of(<span class="number">13</span>, <span class="number">51</span>, <span class="number">10</span>);  </span><br><span class="line">LocalTime localTime1 = LocalTime.now();</span><br></pre></td></tr></table></figure><ul><li>获取时分秒</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取小时  </span></span><br><span class="line"><span class="keyword">int</span> hour = localTime.getHour();  </span><br><span class="line"><span class="keyword">int</span> hour1 = localTime.get(ChronoField.HOUR_OF_DAY);  </span><br><span class="line"><span class="comment">//获取分  </span></span><br><span class="line"><span class="keyword">int</span> minute = localTime.getMinute();  </span><br><span class="line"><span class="keyword">int</span> minute1 = localTime.get(ChronoField.MINUTE_OF_HOUR);  </span><br><span class="line"><span class="comment">//获取秒  </span></span><br><span class="line"><span class="keyword">int</span> second = localTime.getSecond();  </span><br><span class="line"><span class="keyword">int</span> second1 = localTime.get(ChronoField.SECOND_OF_MINUTE);</span><br></pre></td></tr></table></figure><h2 id="3、LocalDateTime">3、LocalDateTime</h2><p>获取年月日时分秒，等于LocalDate+LocalTime</p><ul><li>创建<code>LocalDateTime</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.now();  </span><br><span class="line">LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2020</span>, Month.SEPTEMBER, <span class="number">10</span>, <span class="number">14</span>, <span class="number">46</span>, <span class="number">56</span>);  </span><br><span class="line">LocalDateTime localDateTime2 = LocalDateTime.of(localDate, localTime);  </span><br><span class="line">LocalDateTime localDateTime3 = localDate.atTime(localTime);  </span><br><span class="line">LocalDateTime localDateTime4 = localTime.atDate(localDate);</span><br></pre></td></tr></table></figure><ul><li>获取<code>LocalDate</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate2 = localDateTime.toLocalDate();</span><br></pre></td></tr></table></figure><ul><li>获取<code>LocalTime</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime2 = localDateTime.toLocalTime();</span><br></pre></td></tr></table></figure><h2 id="4、Instant">4、Instant</h2><p>获取秒数</p><ul><li>创建<code>Instant</code>对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Instant instant = Instant.now();</span><br></pre></td></tr></table></figure><ul><li>获取秒数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> currentSecond = instant.getEpochSecond();</span><br></pre></td></tr></table></figure><ul><li>获取毫秒数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> currentMilli = instant.toEpochMilli();</span><br></pre></td></tr></table></figure><blockquote><p>如果只是为了获取秒数或者毫秒数，使用<code>System.currentTimeMillis()</code>来得更为方便</p></blockquote><h1>三、日期时间的修改与计算</h1><p><strong><code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>、<code>Instant</code>为</strong>不可变对象**，修改这些对象对象会**返回一个副本****</p><h2 id="1、时间修改">1、时间修改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2020</span>, Month.SEPTEMBER, <span class="number">10</span>,  </span><br><span class="line">              <span class="number">14</span>, <span class="number">46</span>, <span class="number">56</span>);  </span><br><span class="line"><span class="comment">//增加一年  </span></span><br><span class="line">localDateTime = localDateTime.plusYears(<span class="number">1</span>);  </span><br><span class="line">localDateTime = localDateTime.plus(<span class="number">1</span>, ChronoUnit.YEARS);  </span><br><span class="line"><span class="comment">//减少一个月  </span></span><br><span class="line">localDateTime = localDateTime.minusMonths(<span class="number">1</span>);  </span><br><span class="line">localDateTime = localDateTime.minus(<span class="number">1</span>, ChronoUnit.MONTHS);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用with进行修改</span></span><br><span class="line"><span class="comment">//修改年为2020</span></span><br><span class="line">localDateTime = localDateTime.withYear(<span class="number">2020</span>);  </span><br><span class="line"><span class="comment">//修改为2022  </span></span><br><span class="line">localDateTime = localDateTime.with(ChronoField.YEAR, <span class="number">2022</span>);</span><br></pre></td></tr></table></figure><p>另外比如有些时候想知道这个月的最后一天是几号、下个周末是几号，通过提供的时间和日期API可以很快得到答案，比如通过<code>firstDayOfYear()</code>返回了当前日期的第一天日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();  </span><br><span class="line">LocalDate localDate1 = localDate.with(firstDayOfYear());</span><br></pre></td></tr></table></figure><h2 id="2、格式化日期-常用">2、格式化日期(常用)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">10</span>);  </span><br><span class="line">String s1 = localDate.format(DateTimeFormatter.BASIC_ISO_DATE);  </span><br><span class="line">String s2 = localDate.format(DateTimeFormatter.ISO_LOCAL_DATE);  </span><br><span class="line"><span class="comment">//自定义格式化  </span></span><br><span class="line">DateTimeFormatter dateTimeFormatter =   DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy"</span>);  </span><br><span class="line">String s3 = localDate.format(dateTimeFormatter);</span><br></pre></td></tr></table></figure><p><code>DateTimeFormatter</code>默认提供了多种格式化方式，如果默认提供的不能满足要求，可以通过<code>DateTimeFormatter</code>的<code>ofPattern</code>方法创建自定义格式化方式</p><h4 id="解析时间">解析时间</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate1 = LocalDate.parse(<span class="string">"20201010"</span>, DateTimeFormatter.BASIC_ISO_DATE);  </span><br><span class="line">LocalDate localDate2 = LocalDate.parse(<span class="string">"2020-10-10"</span>, DateTimeFormatter.ISO_LOCAL_DATE);</span><br></pre></td></tr></table></figure><p>和<code>SimpleDateFormat</code>相比，<code>DateTimeFormatter</code>是线程安全的</p><h1>四、LocalDateTime在SpringBoot中的应用</h1><h2 id="1、将LocalDateTime字段以时间戳的方式返回给前端-添加日期转化类">1、将LocalDateTime字段以时间戳的方式返回给前端 添加日期转化类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDateTimeConverter</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">LocalDateTime</span>&gt; </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(LocalDateTime value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">    gen.writeNumber(value.toInstant(ZoneOffset.of(<span class="string">"+8"</span>)).toEpochMilli());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在<code>LocalDateTime </code> 字段上添加<code>@JsonSerialize(using = LocalDateTimeConverter.class) </code> 注解，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using = LocalDateTimeConverter<span class="class">.<span class="keyword">class</span>)  </span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">LocalDateTime</span> <span class="title">gmtModified</span></span>;</span><br></pre></td></tr></table></figure><h2 id="2、将LocalDateTime字段以指定格式化日期的方式返回给前端">2、将LocalDateTime字段以指定格式化日期的方式返回给前端</h2><p>在<code>LocalDateTime </code>字段上添加<code>@JsonFormat(shape=JsonFormat.Shape.STRING, pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;) </code>注解即可，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(shape=JsonFormat.Shape.STRING, pattern=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)  </span><br><span class="line"><span class="keyword">protected</span> LocalDateTime gmtModified;</span><br></pre></td></tr></table></figure><h2 id="3、对前端传入的日期进行格式化">3、对前端传入的日期进行格式化</h2><p>在<code>LocalDateTime</code>字段上添加<code>@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) </code>注解即可，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)  </span><br><span class="line"><span class="keyword">protected</span> LocalDateTime gmtModified;</span><br></pre></td></tr></table></figure><h2 id="4、前后端日期时间转化问题">4、前后端日期时间转化问题</h2><ul><li><strong>方式一</strong></li></ul><p>在实体类上加<code>@DatetimeFormat</code>与<code>@JsonFormat</code>注解</p><p><code>@DatetimeFormat</code>将前台日期字符串转换成Date格式 <code>@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</code></p><p><code>@JsonFormat</code>将服务器端Date日期转换成指定字符串格式<code> @JsonFormat(pattern=&quot;yyyy-MM-dd&quot;,timezone=&quot;GMT+8&quot;)</code></p><p><strong>两个需要同时加，否则会有时区的问题</strong></p><ul><li><strong>方式二</strong></li></ul><p>在applicition.properties中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#时间戳统一转换</span><br><span class="line">spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</span><br><span class="line">spring.jackson.time-zone=GMT+8</span><br></pre></td></tr></table></figure><p>或者在application.yml中添加如下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#时间戳统一转换</span><br><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: GMT+<span class="number">8</span></span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://www.cnblogs.com/w-essay/p/11453943.html" target="_blank" rel="noopener">https://www.cnblogs.com/w-essay/p/11453943.html</a></p><p><a href="https://mp.weixin.qq.com/s/7LzRjG_uGjXq5yIwiSnV2w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/7LzRjG_uGjXq5yIwiSnV2w</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;当我们开始使⽤Java操作⽇期和时间的时候，会有⼀些棘⼿。你也许会通过 System.currentTimeMillis() 来返回1970年1⽉1⽇到今天的毫秒数。或者使⽤ Date类来操作⽇期；当遇到加减⽉份、天数的时候 你⼜需要⽤到Calendar类； 当需要格式化⽇期的时候需要使⽤java.text.DateFormat类。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="springboot" scheme="https://www.shawn22.xyz/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>git命令清单</title>
    <link href="https://www.shawn22.xyz/posts/2163f62e.html"/>
    <id>https://www.shawn22.xyz/posts/2163f62e.html</id>
    <published>2020-10-16T13:44:59.000Z</published>
    <updated>2020-10-16T13:46:43.813Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br><img src="https://img-blog.csdnimg.cn/20201016212956605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><hr><a id="more"></a><h2 id="一、新建代码库">一、新建代码库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><h2 id="二、配置">二、配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><h2 id="三、增加-删除文件">三、增加/删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="四、代码提交">四、代码提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="五、分支">五、分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure><h2 id="六、标签">六、标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="七、查看信息">七、查看信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="八、远程同步">八、远程同步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="九、撤销">九、撤销</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="十、其他">十、其他</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><hr><p>参考转载：<br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a><br><a href="https://gitee.com/all-about-git" target="_blank" rel="noopener">https://gitee.com/all-about-git</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20201016212956605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workspace：工作区&lt;/li&gt;
&lt;li&gt;Index / Stage：暂存区&lt;/li&gt;
&lt;li&gt;Repository：仓库区（或本地仓库）&lt;/li&gt;
&lt;li&gt;Remote：远程仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="git" scheme="https://www.shawn22.xyz/categories/git/"/>
    
    
    <category term="git" scheme="https://www.shawn22.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio入门配置</title>
    <link href="https://www.shawn22.xyz/posts/50ca3841.html"/>
    <id>https://www.shawn22.xyz/posts/50ca3841.html</id>
    <published>2020-10-13T13:10:43.000Z</published>
    <updated>2020-10-14T02:12:38.884Z</updated>
    
    <content type="html"><![CDATA[<h1>一、JDK的下载与安装配置</h1><h2 id="1、下载合适版本并安装JDK-记住自己的安装路径">1、下载合适版本并安装JDK(记住自己的安装路径)</h2><p>下载路径：<br><a href="1%E3%80%81%09%E4%B8%8B%E8%BD%BD%E5%90%88%E9%80%82%E7%89%88%E6%9C%AC%E5%B9%B6%E5%AE%89%E8%A3%85JDK%28%E8%AE%B0%E4%BD%8F%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%29%20%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%EF%BC%9A%20https://www.oracle.com/java/technologies/javase-jdk13-downloads.html">JDK13下载网址</a><br>下载完成后进行解压安装，这里不提倡安装在c盘<br>另外如果发现安装好后没有jre文件夹，则需要自己生成jre文件，在目标路径下（自己安装的JDK路径中运行cmd）运行命令行即可。<br><code>bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</code></p><a id="more"></a><h2 id="2、系统环境配置">2、系统环境配置</h2><ul><li><p>在“系统变量”新建一个变量名为JAVA13_HOME的变量，变量值为你本地JDK的安装目录，当然这里的变量名可以根据自己需求修改。<br><img src="https://img-blog.csdnimg.cn/20201013201858433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>同样的再新建一个Path变量，Path大小写随意，变量的值为<code>%JAVA13_HOME%\bin</code>，当然直接用路径也可以。<br><img src="https://img-blog.csdnimg.cn/20201013202001642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>最后一步新建一个CLASSPATH变量，这里设置CLASSPATH的值是<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; </code>搞定。注意前面的.<br><img src="https://img-blog.csdnimg.cn/20201013202231575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>打开cmd命令行，运行<code>java -version</code>可以查看是否配置成功</p></li></ul><h1>二、Android Studio下载安装</h1><p><a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">Android Studio 4.0 下载地址</a><br>下载完成后进行软件和SDK的安装（这里傻瓜式安装，不过注意安装路径不要出现中文，另外建议不要安装在系统盘）</p><ul><li>Android studio程序安装完毕，但是还需要继续对其进行配置；启动Android studio，出现下图,首次安装Android studio的情况下，选择不导入之前版本的配置即选择第二项，然后点击ok<br><img src="https://img-blog.csdnimg.cn/20201013203438389.jpg#pic_center" alt="在这里插入图片描述"></li><li>首次安装Android studio需要下载SDK，这里点击cancel，之后根据自己需求进行安装下载SDK.<br><img src="https://img-blog.csdnimg.cn/20201013203441592.jpg#pic_center" alt="在这里插入图片描述"></li></ul><h1>三、第一个Demo工程</h1><h2 id="1、工程创建">1、工程创建</h2><ul><li>打开软件，选择Empty Activity工程，选择next<br><img src="https://img-blog.csdnimg.cn/20201013203852237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>根据自己需求选择项目名、语言和安装路径等，选择完成后点击finish<br><img src="https://img-blog.csdnimg.cn/20201013203930157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>第一次建立工程有点慢，是因为从网上下载gradle构建工具，由于从国外站点下载，比较慢，一般情况需要挂梯子，最后等待左下角出现 Gradle bulid successfuly 就说明构建完成了</li></ul><hr><p>如果无法下载可以有两种方法，第一种进行换源，这里就不多介绍了，第二种就是进行手动下载，这里介绍第二种方法。<br>1、找到对应的版本号，我这里是6.1.1版本，然后去<a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">Gradle下载地址</a>下载对于版本的压缩包，<br><img src="https://img-blog.csdnimg.cn/20201013204641699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">2、打开电脑C盘，进入用户文件，找到<code>.gradle</code>文件夹，如图路径一层层打开，找到如图位置，删除下载失败的文件，将手动下载的压缩包放入，重启Android Studio即可。<br><img src="https://img-blog.csdnimg.cn/20201013205302816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><h2 id="2、虚拟机创建和启动">2、虚拟机创建和启动</h2><ul><li>选择合适的虚拟机进行创建，推荐使用默认的<br><img src="https://img-blog.csdnimg.cn/20201013205425981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>如果需要修改使用JDK的可以进行修改（android内置有jre），这里我使用了自己下载的JDK<br><img src="https://img-blog.csdnimg.cn/2020101321000439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201013210141639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>启动项目，即可成功显示<br><img src="https://img-blog.csdnimg.cn/20201013205729125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><h1>四、项目简单介绍</h1><h2 id="1、目录结构介绍">1、目录结构介绍</h2><p><img src="https://img-blog.csdnimg.cn/20201013210215919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.idea <span class="comment">//系统自动生成的关于AS的配置目录（版权，jar包等）</span></span><br><span class="line">gradle <span class="comment">//Gradle目录（项目构建工具）</span></span><br><span class="line">app <span class="comment">//AS创建工程中的一个Module</span></span><br><span class="line">External Libraries <span class="comment">//依赖文件（版本号，SDK等）</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201013210318735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">build：<span class="comment">//构建目录，系统自动生成的编译目录</span></span><br><span class="line">libs：<span class="comment">//依赖包存放目录</span></span><br><span class="line">src：<span class="comment">//源码，资源目录</span></span><br><span class="line">androidTest: <span class="comment">//系统自动生成的用于测试的目录</span></span><br><span class="line">main：<span class="comment">//主目录 </span></span><br><span class="line">java：<span class="comment">//Java代码目录</span></span><br><span class="line">res：<span class="comment">//资源文件</span></span><br><span class="line">drawable： <span class="comment">//存放各种位图文件（png，jpg等）</span></span><br><span class="line">layout：<span class="comment">//App布局文件 </span></span><br><span class="line">values：<span class="comment">//储存一些引用文件（可以定义尺寸，字符串，样式，颜色等等）</span></span><br><span class="line">AndroidManifest.xml：<span class="comment">//App基本信息（Android配置文件） </span></span><br><span class="line">.gitgnore: <span class="comment">//项目空间的同步忽略文件</span></span><br><span class="line">build.gradle：<span class="comment">//Module的Gradle编译文件</span></span><br></pre></td></tr></table></figure><h2 id="2、安卓生命周期">2、安卓生命周期</h2><p><img src="https://img-blog.csdnimg.cn/20201013210519202.gif#pic_center" alt="在这里插入图片描述"></p><ul><li>打开程序，执行顺序为onCreate、onStart、onResume</li><li>按下back键，执行顺序为onPause、onStop、onDestory；</li><li>再启动HelloWorld，执行顺序为onRestart、onStart、onResume；</li><li>按下home键，执行顺序为onPause、onStop；</li></ul><hr><p>参考文章<br><a href="https://blog.csdn.net/qq_43078852/article/details/104381548" target="_blank" rel="noopener">https://blog.csdn.net/qq_43078852/article/details/104381548</a><br><a href="https://www.jianshu.com/p/8d1d765a1a6c" target="_blank" rel="noopener">https://www.jianshu.com/p/8d1d765a1a6c</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、JDK的下载与安装配置&lt;/h1&gt;
&lt;h2 id=&quot;1、下载合适版本并安装JDK-记住自己的安装路径&quot;&gt;1、下载合适版本并安装JDK(记住自己的安装路径)&lt;/h2&gt;
&lt;p&gt;下载路径：&lt;br&gt;
&lt;a href=&quot;1%E3%80%81%09%E4%B8%8B%E8%BD%BD%E5%90%88%E9%80%82%E7%89%88%E6%9C%AC%E5%B9%B6%E5%AE%89%E8%A3%85JDK%28%E8%AE%B0%E4%BD%8F%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%29%20%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%EF%BC%9A%20https://www.oracle.com/java/technologies/javase-jdk13-downloads.html&quot;&gt;JDK13下载网址&lt;/a&gt;&lt;br&gt;
下载完成后进行解压安装，这里不提倡安装在c盘&lt;br&gt;
另外如果发现安装好后没有jre文件夹，则需要自己生成jre文件，在目标路径下（自己安装的JDK路径中运行cmd）运行命令行即可。&lt;br&gt;
&lt;code&gt;	bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="安卓" scheme="https://www.shawn22.xyz/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot后端接口规范</title>
    <link href="https://www.shawn22.xyz/posts/557d179e.html"/>
    <id>https://www.shawn22.xyz/posts/557d179e.html</id>
    <published>2020-08-30T13:47:00.000Z</published>
    <updated>2021-03-15T03:39:58.405Z</updated>
    
    <content type="html"><![CDATA[<h1>一、前言</h1><p> 一个后端接口大致分为四个部分组成：接口地址（url）、接口请求方式（get、post等）、请求数据（request）、响应数据（response）。虽然说后端接口的编写并没有统一规范要求，而且如何构建这几个部分每个公司要求都不同，没有什么“一定是最好的”标准，但其中最重要的关键点就是看是否规范。</p><a id="more"></a><h1>二、环境说明</h1><p> 因为讲解的重点是后端接口，所以需要导入一个spring-boot-starter-web包，而lombok作用是简化类，前端显示则使用了knife4j，具体使用在<a href="https://blog.csdn.net/lemon_TT/article/details/108158631" target="_blank" rel="noopener">Spring Boot整合knife4j实现Api文档</a>已写明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--新版框架没有自动引入需要手动引入--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在引用时请在maven中央仓库搜索最新版本号--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>三、参数校验</h1><p> 一个接口一般对参数（请求数据）都会进行安全校验，参数校验的重要性自然不必多说，那么如何对参数进行校验就有讲究了。一般来说有三种常见的校验方式，我们使用了最简洁的第三种方法</p><ul><li>业务层校验</li><li>Validator + BindResult校验</li><li><strong>Validator + 自动抛出异常</strong></li></ul><p> 业务层校验无需多说，即手动在java的Service层进行数据校验判断。不过这样太繁琐了，光校验代码就会有很多。<br> 而使用Validator+ BindingResult已经是非常方便实用的参数校验方式了，在实际开发中也有很多项目就是这么做的，不过这样还是不太方便，因为你每写一个接口都要添加一个BindingResult参数，然后再提取错误信息返回给前端（简单看一下）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@PostMapping</span>(<span class="string">"/addUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@RequestBody @Valid User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果有参数校验失败，会将错误信息封装成对象组装在BindingResult里</span></span><br><span class="line">        <span class="keyword">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> error.getDefaultMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> validationService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Validator-自动抛出异常（使用）">Validator + 自动抛出异常（使用）</h2><p> 首先Validator可以非常方便的制定校验规则，并自动帮你完成校验。首先在入参里需要校验的字段加上注解,每个注解对应不同的校验规则，并可制定校验失败后的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户id不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户账号不能为空"</span>)</span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>, max = <span class="number">11</span>, message = <span class="string">"账号长度必须是6-11个字符"</span>)</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户密码不能为空"</span>)</span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>, max = <span class="number">11</span>, message = <span class="string">"密码长度必须是6-16个字符"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户邮箱不能为空"</span>)</span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 校验规则和错误提示信息配置完毕后，接下来只需要在接口仅需要在校验的参数上加上@Valid注解(去掉BindingResult后会自动引发异常，异常发生了自然而然就不会执行业务逻辑)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValidationService validationService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/addUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@RequestBody @Valid User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> validationService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 现在我们进行测试，打开knife4j文档地址，当输入的请求数据为空时，Validator会将所有的报错信息全部进行返回，所以需要与全局异常处理一起使用。<br><img src="https://img-blog.csdnimg.cn/20200830203443712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1>四、全局异常处理</h1><p> 参数校验失败会自动引发异常，我们当然不可能再去手动捕捉异常进行处理。但我们又不想手动捕捉这个异常，又要对这个异常进行处理，那正好使用SpringBoot全局异常处理来达到一劳永逸的效果！</p><h2 id="基本使用">基本使用</h2><p>首先，我们需要新建一个类，在这个类上加上<code>@ControllerAdvice</code>或<code>@RestControllerAdvice</code>注解，这个类就配置成全局处理类了。（这个根据你的Controller层用的是<code>@Controller</code>还是<code>@RestController</code>来决定） 然后在类中新建方法，在方法上加上<code>@ExceptionHandler</code>注解并指定你想处理的异常类型，接着在方法内编写对该异常的操作逻辑，就完成了对该异常的全局处理！我们现在就来演示一下对参数校验失败抛出的<code>MethodArgumentNotValidException</code>全局处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">BAD_REQUEST</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">MethodArgumentNotValidExceptionHandler</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 然后提取错误提示信息进行返回</span></span><br><span class="line">        <span class="keyword">return</span> objectError.getDefaultMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们再次进行测试，这次返回的就是我们制定的错误提示信息！我们通过全局异常处理优雅的实现了我们想要的功能！以后我们再想写接口参数校验，就只需要在入参的成员变量上加上Validator校验规则注解，然后在参数上加上@Valid注解即可完成校验，校验失败会自动返回错误提示信息，无需任何其他代码！<br><img src="https://img-blog.csdnimg.cn/20200830204830239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="自定义异常">自定义异常</h2><p> 在很多情况下，我们需要手动抛出异常，比如在业务层当有些条件并不符合业务逻辑，而使用自定义异常有诸多优点：</p><ul><li>自定义异常可以携带更多的信息，不像这样只能携带一个字符串。</li><li>项目开发中经常是很多人负责不同的模块，使用自定义异常可以统一了对外异常展示的方式。</li><li>自定义异常语义更加清晰明了，一看就知道是项目中手动抛出的异常。<br> 我们现在就来开始写一个自定义异常：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span> <span class="comment">//只要getter方法，无需setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APIException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APIException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1001</span>, <span class="string">"接口错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APIException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1001</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APIException</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 然后在刚才的全局异常类中加入如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义的全局异常</span></span><br><span class="line">   <span class="meta">@ExceptionHandler</span>(APIException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">   <span class="title">public</span> <span class="title">String</span> <span class="title">APIExceptionHandler</span>(<span class="title">APIException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> e.getMsg();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 这样就对异常的处理就比较规范了，当然还可以添加对Exception的处理，这样无论发生什么异常我们都能屏蔽掉然后响应数据给前端，不过建议最后项目上线时这样做，能够屏蔽掉错误信息暴露给前端，在开发中为了方便调试还是不要这样做。另外，当我们抛出自定义异常的时候全局异常处理只响应了异常中的错误信息msg给前端，并没有将错误代码code返回。这还需要配合数据统一响应。</p><h1>五、数据统一响应</h1><p> 统一数据响应是我们自己自定义一个响应体类，无论后台是运行正常还是发生异常，响应给前端的数据格式是不变的！这里我包括了响应信息代码code和响应信息说明msg，首先可以设置一个枚举规范响应体中的响应码和响应信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResultCode &#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">"操作成功"</span>),</span><br><span class="line">    FAILED(<span class="number">1001</span>, <span class="string">"响应失败"</span>),</span><br><span class="line">    VALIDATE_FAILED(<span class="number">1002</span>, <span class="string">"参数校验失败"</span>),</span><br><span class="line">    ERROR(<span class="number">5000</span>, <span class="string">"未知错误"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    ResultCode(<span class="keyword">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 自定义响应体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码，比如1000代表响应成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应信息，用来说明响应情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应的具体数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultVO</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(ResultCode.SUCCESS, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultVO</span><span class="params">(ResultCode resultCode, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="keyword">this</span>.msg = resultCode.getMsg();</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 最后需要修改全局异常处理类的返回类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(APIException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResultVO</span>&lt;<span class="title">String</span>&gt; <span class="title">APIExceptionHandler</span>(<span class="title">APIException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 注意哦，这里传递的响应码枚举</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultVO&lt;&gt;(ResultCode.FAILED, e.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResultVO</span>&lt;<span class="title">String</span>&gt; <span class="title">MethodArgumentNotValidExceptionHandler</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 注意哦，这里传递的响应码枚举</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultVO&lt;&gt;(ResultCode.VALIDATE_FAILED, objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 最后在controller层进行接口信息数据的返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setAccount(<span class="string">"12345678"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"12345678"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"123@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultVO&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 经过测试，这样响应码和响应信息只能是枚举规定的那几个，就真正做到了响应数据格式、响应码和响应信息规范化、统一化！<br><img src="https://img-blog.csdnimg.cn/20200830211916735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1>六、全局处理响应数据(可选择)</h1><p> 接口返回统一响应体 + 异常也返回统一响应体，其实这样已经很好了，但还是有可以优化的地方。要知道一个项目下来定义的接口搞个几百个太正常不过了，要是每一个接口返回数据时都要用响应体来包装一下好像有点麻烦，有没有办法省去这个包装过程呢？当然是有的，还是要用到全局处理。但是为了扩展性，就是允许绕过数据统一响应（这样就可以提供多方使用），我们可以自定义注解，利用注解来选择是否进行全局响应包装。<br> 首先创建自定义注解，作用相当于全局处理类开关：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;) <span class="comment">// 表明该注解只能放在方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotResponseBody &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其次创建一个类并加上注解使其成为全局处理类。然后继承<code>ResponseBodyAdvice</code>接口重写其中的方法，即可对我们的controller进行增强操作，具体看代码和注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span>(basePackages = &#123;<span class="string">"com.scdn.demo1.controller"</span>&#125;) <span class="comment">// 注意哦，这里要加上需要扫描的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseControllerAdvice</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 如果接口返回的类型本身就是ResultVO那就没有必要进行额外的操作，返回false</span></span><br><span class="line">        <span class="comment">// 如果方法上加了我们的自定义注解也没有必要进行额外的操作</span></span><br><span class="line">        <span class="keyword">return</span> !(returnType.getParameterType().equals(ResultVO<span class="class">.<span class="keyword">class</span>) || <span class="title">returnType</span>.<span class="title">hasMethodAnnotation</span>(<span class="title">NotResponseBody</span>.<span class="title">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object data, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String类型不能直接包装，所以要进行些特别的处理</span></span><br><span class="line">        <span class="keyword">if</span> (returnType.getGenericParameterType().equals(String<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将数据包装在ResultVO里后，再转换为json字符串响应给前端</span></span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsString(<span class="keyword">new</span> ResultVO&lt;&gt;(data));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"返回String类型错误"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将原本的数据包装在ResultVO里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultVO&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 重写的这两个方法是用来在<code>controller</code>将数据进行返回前进行增强操作，<code>supports</code>方法要返回为true才会执行<code>beforeBodyWrite</code>方法，所以如果有些情况不需要进行增强操作可以在<code>supports</code>方法里进行判断。对返回数据进行真正的操作还是在<code>beforeBodyWrite</code>方法中，我们可以直接在该方法里包装数据，这样就不需要每个接口都进行数据包装了，省去了很多麻烦。此时controller只需这样写就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line"><span class="comment">//@NotResponseBody  //是否绕过数据统一响应开关</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setAccount(<span class="string">"12345678"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"12345678"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"123@qq.com"</span>);</span><br><span class="line">    <span class="comment">// 注意哦，这里是直接返回的User类型，并没有用ResultVO进行包装</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>七、总结</h1><p>自此整个后端接口基本体系就构建完毕了</p><ul><li>通过Validator + 自动抛出异常来完成了方便的参数校验</li><li>通过全局异常处理 + 自定义异常完成了异常操作的规范</li><li>通过数据统一响应完成了响应数据的规范</li><li>多个方面组装非常优雅的完成了后端接口的协调，让开发人员有更多的经历注重业务逻辑代码，轻松构建后端接口</li></ul><hr><p><a href="https://github.com/RudeCrab/rude-java/blob/master/project-practice/validation-and-exception-handler/validation-and-exception-handler.md" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、前言&lt;/h1&gt;
&lt;p&gt; 一个后端接口大致分为四个部分组成：接口地址（url）、接口请求方式（get、post等）、请求数据（request）、响应数据（response）。虽然说后端接口的编写并没有统一规范要求，而且如何构建这几个部分每个公司要求都不同，没有什么“一定是最好的”标准，但其中最重要的关键点就是看是否规范。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="springboot" scheme="https://www.shawn22.xyz/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot整合knife4j实现Api文档</title>
    <link href="https://www.shawn22.xyz/posts/db133795.html"/>
    <id>https://www.shawn22.xyz/posts/db133795.html</id>
    <published>2020-08-26T12:54:07.000Z</published>
    <updated>2021-01-29T05:22:45.756Z</updated>
    
    <content type="html"><![CDATA[<h1>一、简介</h1><blockquote><p> knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是swagger-bootstrap-ui,取名kni4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍!<br>　knife4j的前身是swagger-bootstrap-ui，为了契合微服务的架构发展,由于原来swagger-bootstrap-ui采用的是后端Java代码+前端Ui混合打包的方式,在微服务架构下显的很臃肿,因此项目正式更名为knife4j</p></blockquote><p><a href="https://doc.xiaominfo.com/knife4j/" target="_blank" rel="noopener">knife4j官方文档</a><br><a href="https://gitee.com/xiaoym/knife4j" target="_blank" rel="noopener">码云仓库地址</a></p><a id="more"></a><h1>二、项目搭建</h1><h2 id="1、maven引入">1、maven引入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在引用时请在maven中央仓库搜索最新版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter" target="_blank" rel="noopener">knife4j仓库地址</a></p><h2 id="2、创建Swagger配置文件">2、创建Swagger配置文件</h2><p>首先创建<code>application-dev.yml</code>和<code>application-prod.yml</code>开发和生产环境，最后在<code>application.yml</code>中配置当前环境，这样就可以在生产环境中关闭在线接口文档了。另外也可以使用注解<code>@Profile</code>设置环境</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@EnableKnife</span>4j</span><br><span class="line"><span class="meta">@Import</span>(BeanValidatorPluginsConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果要设置多个用户组，只需要在定义一个Docket并打上@Bean返回即可</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要显示的在线接口文档环境</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">"dev"</span>,<span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">//通过environment.acceptsProfiles判断是否处于当前自己设定的环境中</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">            <span class="comment">//是否在浏览器显示,如果一直要显示开启，就选择true</span></span><br><span class="line">                .enable(flag)</span><br><span class="line">             <span class="comment">//.enable(true)</span></span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">"1.0版本"</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径(项目路径也行)</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.csdn.demo1.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"接口说明"</span>)</span><br><span class="line">                .description(<span class="string">"DEMO服务接口说明"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://localhost:8888/"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200822223403412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1>三、knife项目使用</h1><h2 id="1、常用注解介绍">1、常用注解介绍</h2><h4 id="Api">@Api()</h4><p>作用在类上，用来标注该类具体实现内容。<br><em>参数：</em><br><strong>tags：类标签，一般用来写类的名称或作用。（常用）<br>description：可描述描述该类作用。</strong></p><hr><h4 id="ApiOperation">@ApiOperation()</h4><p>用于方法的说明<br><em>参数：</em><br><strong>value ：方法说明（常用）<br>notes ：注释说明<br>httpMethod ： 说明这个方法被请求的方式<br>response ：方法的返回值的类型</strong></p><hr><h4 id="ApiOperationSupport">@ApiOperationSupport()</h4><p>（knife4j增加特性）用于接口方法排序，作者信息描述等。<br><em>参数：</em><br><strong>order：排序<br>author：作者信息</strong></p><hr><h4 id="ApiImplicitParam">@ApiImplicitParam()</h4><p>对单个参数的说明<br><em>参数：</em><br><strong>name ：参数名。<br>value ： 参数的具体意义，作用。（常用）<br>required ： 参数是否必填。 （常用）<br>dataType ：参数的数据类型。 （常用）<br>paramType ：查询参数类型，这里有几种形式：<br>类型　　　　　作用<br>path 　　　以地址的形式提交数据<br>query  　　直接跟参数完成自动映射赋值<br>body　　　以流的形式提交 仅支持POST<br>header　　参数在request headers 里边提交<br>form　　　以form表单的形式提交 仅支持POST</strong></p><hr><h4 id="ApiModel">@ApiModel()</h4><p>用于描述一个数据模型的信息，即我们常用的实体、VO类、DTO类等描述<br><em>参数：</em><br><strong>value ： 数据模型名称。（常用）<br>description:具体描述<br>parent：父类</strong></p><hr><h4 id="ApiModelProperty">@ApiModelProperty()</h4><p>用于描述数据模型的属性信息<br><em>参数：</em><br><strong>value：字段说明 （常用）<br>name：重写属性名字<br>dataType：重写属性类型<br>required：是否必填 （常用）<br>example：举例说明 （常用）<br>hidden：隐藏</strong></p><hr><h4 id="ApiIgnore">@ApiIgnore</h4><p>自动生成接口说明时忽略</p><h2 id="2、项目中的简单使用">2、项目中的简单使用</h2><p> 在项目启动中我还遇到了<code>javax/validation/constraints/Min</code>报错，原因是我使用了最新的springboot框架版本，新版本没有自动引入 validation对应的包，所以要想使用校验功能要手动引入包。在pom.xml引入依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 启动项目后，访问<code>http://localhost:8080/doc.html</code>即可(ip和端口根据实际需求来)。根据接口的不同需求，结合官方文档，可以写出自己需要的个性化需求。下面是我自己测试的demo<br><a href="https://doc.xiaominfo.com/knife4j/" target="_blank" rel="noopener">官方文档参考</a></p><p><img src="https://img-blog.csdnimg.cn/20200823214211723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200823214335383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><a href="https://blog.csdn.net/tuoyun6647/article/details/106021012" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、简介&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt; knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是swagger-bootstrap-ui,取名kni4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍!&lt;br&gt;
　knife4j的前身是swagger-bootstrap-ui，为了契合微服务的架构发展,由于原来swagger-bootstrap-ui采用的是后端Java代码+前端Ui混合打包的方式,在微服务架构下显的很臃肿,因此项目正式更名为knife4j&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.xiaominfo.com/knife4j/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;knife4j官方文档&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://gitee.com/xiaoym/knife4j&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;码云仓库地址&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="springboot" scheme="https://www.shawn22.xyz/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Vue打包部署出现白屏</title>
    <link href="https://www.shawn22.xyz/posts/1e9a5ba7.html"/>
    <id>https://www.shawn22.xyz/posts/1e9a5ba7.html</id>
    <published>2020-07-04T15:20:58.000Z</published>
    <updated>2020-10-28T02:33:14.361Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、问题描述">1、问题描述</h4><p> 我们用vue项目在本地跑的时候一切正常，当时我们用<code>npm run build</code>命令打包并部署服务器后，发现Index展示的是白屏，控制台显示资源都能正确访问到<img src="https://img-blog.csdnimg.cn/20200704175746282.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><h4 id="2、原因">2、原因</h4><p> 出现这个问题的原因就是Vue路由模式的设置问题，首先简单介绍一下Vue的两种路由模式：<strong>hash模式和history模式</strong><br> 这两个模式最直观的区别就是在url中 hash 模式带了一个很丑的 # 而history是没有#的，在一般开发环境下，这两个模式都是可以正常使用的，但是打包编译的时候这两个模式有些地方需要进行修改才能防止打包后的页面变成空白。</p><hr><p>PS:页面空白另一种可能是文件引用路径不对，在vue.config.js里修改，之后重新打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">...</span><br><span class="line">    publicPath: <span class="string">'./'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3、解决方法">3、解决方法</h4><ol><li>路由模式设置为hash<br> 打开<code>router/index.js</code>，设置mode为hash后打包部署</li></ol> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">'hash'</span>,</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>路由模式设置为history<br> 使用这个模式，在开发阶段一切都是正常的，但是需要打包部署时，需要在<code>router/index.js</code>中添加base属性。<a href="http://xn--nginxwww-8t1mv2in3id8aiz1avsc6xnwjy9tljymujbbygo7fg11ix8b.test.com/vue/app/%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%EF%BC%8C%E5%B0%B1%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9C%A8%E6%B7%BB%E5%8A%A0" target="_blank" rel="noopener">假如打包的目录文件是放在nginx服务器www.test.com/vue/app/目录下的，就必须要在添加</a><strong>base:’/vue/app/’</strong>，两边**/**都不能缺少</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">'history'</span>,</span><br><span class="line">    base: <span class="string">'/vue/app/'</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1、问题描述&quot;&gt;1、问题描述&lt;/h4&gt;
&lt;p&gt; 我们用vue项目在本地跑的时候一切正常，当时我们用&lt;code&gt;npm run build&lt;/code&gt;命令打包并部署服务器后，发现Index展示的是白屏，控制台显示资源都能正确访问到&lt;img src=&quot;https://img-blog.csdnimg.cn/20200704175746282.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.shawn22.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.shawn22.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Linux上使用docker运行酷Q机器人</title>
    <link href="https://www.shawn22.xyz/posts/18a55fe7.html"/>
    <id>https://www.shawn22.xyz/posts/18a55fe7.html</id>
    <published>2020-05-22T12:37:57.000Z</published>
    <updated>2020-05-22T12:39:46.060Z</updated>
    
    <content type="html"><![CDATA[<p> 我们知道酷Q机器人是运行在windows上的，配合图灵机器人的API可以实现QQ或者微信的自动对话，但是如果想让机器人不间断24小时运行，那就需要使用云服务了，并且需要使用docker作为运行的容器来运行酷Q机器人。</p><h3 id="1、安装和运行docker">1、安装和运行docker</h3><p>这里我用了Centos的linux操作系统，使用其他Linux的也大同小异，不过这里的操作都需要root权限，没有的话需要<code>sudo su</code>获得root权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载docker</span></span><br><span class="line">yum install docker</span><br><span class="line"><span class="comment">#运行docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、下载酷Q镜像">2、下载酷Q镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull coolq/wine-coolq</span><br></pre></td></tr></table></figure><p>这里的镜像是从docker中央仓库获取，也是别人已经打包好的镜像，我们直接拿来用就行了<br><img src="https://img-blog.csdnimg.cn/20200522193608772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用<code>docker images</code>可以查看拉取的镜像<br><img src="https://img-blog.csdnimg.cn/20200522193655630.png" alt="在这里插入图片描述"></p><h3 id="3、后台运行酷Q容器">3、后台运行酷Q容器</h3><p>创建一个用于存放（映射）coolq数据的目录，用于持久化存放coolq（酷Q应用）的数据。这里我在根目录下创建cooqldata文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /coolqdata</span><br></pre></td></tr></table></figure><p>后台运行<br>docker run --name=coolq -d -p 8765:9000 -v /coolqdata:/home/user/coolq -e VNC_PASSWD=12345678 -e COOLQ_ACCOUNT=1000000 coolq/wine-coolq</p><h6 id="其中部分参数根据自己的需求替换：">其中部分参数根据自己的需求替换：</h6><p>远程监听端口<br>8765(9000映射成8765，前面的端口号可以自定义)<br>数据存放位置<br>/coolqdata（容器内的/home/user/coolq路径 映射到本机的/coolqdata）<br>远程访问密码<br>12345678（只能设8位）<br>机器人 QQ 帐号<br>1000000</p><p>==最后开放设置的端口号==</p><h4 id="4、登录VNC进行机器人的设置">4、登录VNC进行机器人的设置</h4><p>打开浏览器，在浏览器输入服务器ip+端口号即可进行访问，按要求进行机器人的登录设置，可以登录http://www.tuling123.com/ 获取机器人对话的API接口并放入到酷Q中，这里如果需要复制可使用旁边的工具</p><p><img src="https://img-blog.csdnimg.cn/20200522195848627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>参考文章:<a href="https://www.cnblogs.com/tielemao/p/8462263.html" target="_blank" rel="noopener">Linux通过docker安装运行酷Q–用QQ骰子君进行跑团</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 我们知道酷Q机器人是运行在windows上的，配合图灵机器人的API可以实现QQ或者微信的自动对话，但是如果想让机器人不间断24小时运行，那就需要使用云服务了，并且需要使用docker作为运行的容器来运行酷Q机器人。&lt;/p&gt;
&lt;h3 id=&quot;1、安装和运行docker&quot;&gt;1、安装和运行docker&lt;/h3&gt;
&lt;p&gt;这里我用了Centos的linux操作系统，使用其他Linux的也大同小异，不过这里的操作都需要root权限，没有的话需要&lt;code&gt;sudo su&lt;/code&gt;获得root权限&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#下载docker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#运行docker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="云计算" scheme="https://www.shawn22.xyz/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="docker" scheme="https://www.shawn22.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Centos启动Ipv4地址进行远程连接和Yum换源</title>
    <link href="https://www.shawn22.xyz/posts/2a55c286.html"/>
    <id>https://www.shawn22.xyz/posts/2a55c286.html</id>
    <published>2020-05-18T08:52:28.000Z</published>
    <updated>2020-05-18T08:55:12.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动Ipv4地址">启动Ipv4地址</h3><p> 好多时候，在虚拟机中安装完后，进去centos中，使用<code>ifconfig</code>发现没有此命令，可使用<code>ip a</code>查看IP，但是有时你会发现没有显示ipv4的地址，这样我们也无法进行远程连接，这个问题原因是安装centos的时候没有启用默认的网卡<br>解决办法:<br>CentOS配置网卡开机自动获取IP地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts</span><br><span class="line"><span class="comment">#注意这是我的网卡配置，具体机器需要ls查看一下</span></span><br><span class="line">vim ifcfg-ens33</span><br></pre></td></tr></table></figure><p>进入配置后将 <code>ONBOOT=”no”</code> 改为 <code>ONBOOT=”yes”</code><br>保存后执行<code>systemctl restart network</code></p><a id="more"></a><h3 id="Centos-Yum换源">Centos Yum换源</h3><h6 id="1-备份">1. 备份</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h5 id="2-下载新的-CentOS-Base-repo-到-etc-yum-repos-d">2. 下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/</h5><p><strong>CentOS 6</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><p><strong>CentOS 7</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p><strong>CentOS 8</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure><h5 id="3-运行-yum-makecache-生成缓存">3. 运行 <code>yum makecache</code> 生成缓存</h5>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;启动Ipv4地址&quot;&gt;启动Ipv4地址&lt;/h3&gt;
&lt;p&gt; 好多时候，在虚拟机中安装完后，进去centos中，使用&lt;code&gt;ifconfig&lt;/code&gt;发现没有此命令，可使用&lt;code&gt;ip a&lt;/code&gt;查看IP，但是有时你会发现没有显示ipv4的地址，这样我们也无法进行远程连接，这个问题原因是安装centos的时候没有启用默认的网卡&lt;br&gt;
解决办法:&lt;br&gt;
CentOS配置网卡开机自动获取IP地址&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /etc/sysconfig/network-scripts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#注意这是我的网卡配置，具体机器需要ls查看一下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim ifcfg-ens33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入配置后将 &lt;code&gt;ONBOOT=”no”&lt;/code&gt; 改为 &lt;code&gt;ONBOOT=”yes”&lt;/code&gt;&lt;br&gt;
保存后执行&lt;code&gt;systemctl restart network&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="虚拟机" scheme="https://www.shawn22.xyz/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装Anaconda实现远程Jupyter登陆</title>
    <link href="https://www.shawn22.xyz/posts/191c082b.html"/>
    <id>https://www.shawn22.xyz/posts/191c082b.html</id>
    <published>2020-05-07T14:15:13.000Z</published>
    <updated>2020-05-18T08:54:59.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、下载Anaconda">1、下载Anaconda</h3><blockquote><p>官方下载: <a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">https://www.anaconda.com/download/</a><br>清华镜像下载: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=N&amp;O=D" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=N&amp;O=D</a></p></blockquote><p> centos在线下载最新版Anaconda</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2020.02-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、Anaconda安装">2、Anaconda安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-2020.02-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p> 在安装的过程中间可能会有些询问，比如是否指定新的安装位置等，我这里都选择了默认安装了。</p><h3 id="3、加载配置">3、加载配置</h3><p> 安装完成后，anaconda会自动初始化，初始化过程中会在 <code>~/.bashrc </code>文件中写入一些内容，因此我们需要重新加载该文件使anaconda生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p> 成功执行后可以发现命令提示符前面加了一个(base)，这就说明成功安装了anaconda<br><img src="https://img-blog.csdnimg.cn/20200507203600596.png" alt="Alt"><br> 这里要注意的是，<code>~/.bashrc</code>初始化的时候，anaconda是默认执行<br><code>conda  activate base</code>命令的，如果想变回原来的终端，只需要执行<code>conda deactivate</code>命令。如果想要永久消除，<code>vim  ~/.bashrc</code>进入文件在最后加上<code>conda deactivate</code>，保存退出就可<br><img src="https://img-blog.csdnimg.cn/2020050720562438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 另外，如果需要另外安装库，则只需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install xxx</span><br></pre></td></tr></table></figure><h3 id="4、配置jupyter-notebook">4、配置jupyter notebook</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入conda base环境，后面操作都需要在base环境下</span></span><br><span class="line">conda activate base</span><br><span class="line"><span class="comment">#生成jupyter的配置文件</span></span><br><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200507210502610.png" alt="alt"><br> 在设置远程登陆配置前，首先需要生成秘钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入python交互环境</span></span><br><span class="line">ipython</span><br><span class="line"><span class="comment">#导入依赖</span></span><br><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line"><span class="comment">#生成秘钥，生成的秘钥要复制</span></span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200507215931671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 进入配置文件并编辑<code>vim /root/.jupyter/jupyter_notebook_config.py</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在空白区域进行插入</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">'*'</span> <span class="comment">#允许访问此服务器的 IP，星号表示任意 IP</span></span><br><span class="line">c.NotebookApp.password = u<span class="string">'sha1:fdd89498b287:bbb896de44a315f88c0e699db0798ebc2c098686'</span> <span class="comment"># 之前生成的密码 hash 字串</span></span><br><span class="line">c.NotebookApp.open_browser = False <span class="comment"># 运行时不打开本机浏览器</span></span><br><span class="line">c.NotebookApp.port = 9999 <span class="comment"># 端口随意设置，注意确保云服务器此端口要开放。</span></span><br><span class="line">c.NotebookApp.enable_mathjax = True <span class="comment"># 启用 MathJax</span></span><br><span class="line">c.NotebookApp.allow_root = True</span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">'/root/JupyterNotebook'</span> <span class="comment">#工作目录，保存代码项目文件。</span></span><br></pre></td></tr></table></figure><p> 保存后退出，并创建工作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/JupyterNotebook</span><br></pre></td></tr></table></figure><p> 另外要注意云服务器端口的开放。</p><h3 id="5、jupyter后台运行">5、jupyter后台运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#后台运行</span></span><br><span class="line">nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure><p>成功后可以打开浏览器即可远程登陆使用啦<br><img src="https://img-blog.csdnimg.cn/20200507220815404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1、下载Anaconda&quot;&gt;1、下载Anaconda&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;官方下载: &lt;a href=&quot;https://www.anaconda.com/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anaconda.com/download/&lt;/a&gt;&lt;br&gt;
清华镜像下载: &lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=N&amp;amp;O=D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=N&amp;amp;O=D&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; centos在线下载最新版Anaconda&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2020.02-Linux-x86_64.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="云计算" scheme="https://www.shawn22.xyz/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python实现Synology NAS的关机</title>
    <link href="https://www.shawn22.xyz/posts/461ef441.html"/>
    <id>https://www.shawn22.xyz/posts/461ef441.html</id>
    <published>2020-04-29T03:14:10.000Z</published>
    <updated>2020-04-29T04:16:04.807Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、问题描述">一、问题描述</h4><p> 因为需要使用编程进行NAS的关机，而且这个程序不能在NAS内部运行，因此想到了使用远程连接来进行NAS的关机操作。因为NAS是一种定制的LINUX系统，因此可以利用Python使用SSH来远程连接，并使用命令行关机指令<code>shutdown -h now</code>实现远程关机。</p><a id="more"></a><h4 id="二、实验步骤">二、实验步骤</h4><h5 id="1、启用NAS的SSH功能">1、启用NAS的SSH功能</h5><p>1、打开控制面板选择高级模式<br><img src="https://img-blog.csdnimg.cn/20200429112924953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、进入终端机和SNMP<br><img src="https://img-blog.csdnimg.cn/2020042911293858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、选择启用SSH功能<br><img src="https://img-blog.csdnimg.cn/20200429112942903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="2、Python实现远程关机">2、Python实现远程关机</h5><p>1、安装paramiko模块<br> paramiko是用python语言写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。跟常用软件xshell 、xftp功能一样，但是可以连接多台服务器，进行复杂的操作。<br> 在这里我使用了Jupyter，因此使用了anaconda安装方法。打开<code>Anaconda Prompt (anaconda)</code>终端，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install paramiko</span><br></pre></td></tr></table></figure><p>2、执行Python程序<br> 这里使用了SSHClient基于用户名和密码的 sshclient 方式登录。其中hostname填写NAS的ip地址，password填写自己设置的密码，command是需要执行的命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个sshclient对象</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"><span class="comment"># 允许将信任的主机自动加入到host_allow 列表，此方法必须放在connect方法的前面</span></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"><span class="comment"># 调用connect方法连接服务器</span></span><br><span class="line"><span class="comment"># 需要管理员账号</span></span><br><span class="line">ssh.connect(hostname=<span class="string">'192.168.1.104'</span>, port=<span class="number">22</span>, username=<span class="string">'root'</span>, password=<span class="string">'123456'</span>)</span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="comment"># 关机命令</span></span><br><span class="line">command=<span class="string">"shutdown -h now"</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line"><span class="comment"># 结果放到stdout中，如果有错误将放到stderr中</span></span><br><span class="line">print(stdout.read().decode())</span><br><span class="line">print(<span class="string">'执行完毕'</span>)</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure><hr><p>其他登录方式参考<br><a href="https://blog.csdn.net/appke846/article/details/80514024" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;一、问题描述&quot;&gt;一、问题描述&lt;/h4&gt;
&lt;p&gt; 因为需要使用编程进行NAS的关机，而且这个程序不能在NAS内部运行，因此想到了使用远程连接来进行NAS的关机操作。因为NAS是一种定制的LINUX系统，因此可以利用Python使用SSH来远程连接，并使用命令行关机指令&lt;code&gt;shutdown -h now&lt;/code&gt;实现远程关机。&lt;/p&gt;</summary>
    
    
    
    <category term="云计算" scheme="https://www.shawn22.xyz/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="云计算" scheme="https://www.shawn22.xyz/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式----代理模式</title>
    <link href="https://www.shawn22.xyz/posts/31773db5.html"/>
    <id>https://www.shawn22.xyz/posts/31773db5.html</id>
    <published>2020-04-14T12:11:59.000Z</published>
    <updated>2020-04-14T12:13:05.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、代理模式介绍">一、代理模式介绍</h3><p> 代理模式(Proxy Pattern)，是23种设计模式之一，它关心的主要是过程，而不是结果。代理模式主要提供了对目标对象的间接访问方式，即通过代理对象来访问目标对象，这样可以在目标对象实现的基础上，==增强额外的功能操作，即扩展目标对象的功能==，<em>SpringAop</em>便是一个很好的例子。而被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。代理模式的简单示意图如下。<br><img src="https://img-blog.csdnimg.cn/2020041418500189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="代理模式示意图"><br> 代理模式主要有三种实现方式 <strong>静态代理</strong>、<strong>动态代理</strong>(JDK代理、接口代理)和<strong>Cglib代理</strong>(不需要实现接口)。</p><a id="more"></a><h3 id="二、三种代理模式的简单介绍">二、三种代理模式的简单介绍</h3><h4 id="1、静态代理">1、静态代理</h4><h6 id="1、介绍">1、介绍</h6><p> 静态代理UML类图如下图，StudentDaoProxy类是代理类，通过聚合的方式代理StudentDao类，同时StudentDao类和代理类都实现IStudentDao接口类。<br> 静态代理的优点是能够较为简单快速的在不修改目标对象的前提下，对目标对象功能进行扩展；而缺点就是不够灵活，如果接口新增方法，那么需要维护类的成本太大。<img src="https://img-blog.csdnimg.cn/2020041419041627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="静态代理"></p><h6 id="2、代码实现">2、代码实现</h6><p>①新建IStudentDao接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②被代理的学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"正在读书中。。。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③创建代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoProxy</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理类聚合到代理类</span></span><br><span class="line"><span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StudentDaoProxy</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 通过构造器传入聚合对象，也可以通过set方法传入</span></span><br><span class="line"><span class="keyword">this</span>.studentDao=studentDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 增强方法，这里可以写其他复杂业务</span></span><br><span class="line">System.out.println(<span class="string">"打开书本。。。。。"</span>);</span><br><span class="line"><span class="comment">//被代理类原方法</span></span><br><span class="line">studentDao.read();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④用户测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StudentDao studentDao = <span class="keyword">new</span> StudentDao();</span><br><span class="line">StudentDaoProxy studentDaoProxy = <span class="keyword">new</span> StudentDaoProxy(studentDao);</span><br><span class="line"><span class="comment">// 使用代理方法</span></span><br><span class="line">studentDaoProxy.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开书本。。。。。</span><br><span class="line">正在读书中。。。。。</span><br></pre></td></tr></table></figure><h4 id="2、动态代理">2、动态代理</h4><h6 id="1、介绍-v2">1、介绍</h6><p> 动态代理对象不需要实现接口，但是目标对象还是需要实现接口。而代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象，相比于静态代理灵活的多，所以也叫JDK代理或接口代理。其UML类图如下<br><img src="https://img-blog.csdnimg.cn/20200414195831770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="动态代理"></p><h6 id="2、代码实现-v2">2、代码实现</h6><p>①新建IStudentDao接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②被代理的学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"正在读书中。。。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③创建代理类<br>这里相比静态代理有点小修改，JDK代理需要使用<code>newProxyInstance</code>方法，其完整写法是<code>static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandlerh)</code>，该方法在<code>java.lang.reflect.Proxy</code>包内，通过反射机制实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理类聚合到代理类</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object studentDao)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 通过构造器传入聚合对象，也可以通过set方法传入</span></span><br><span class="line"><span class="keyword">this</span>.target=studentDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//给目标对象 生成一个代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                                          InvocationHandler h)                                          </span></span><br><span class="line"><span class="comment">            //1. ClassLoader loader ： 指定当前目标对象使用的类加载器, 获取加载器的方法固定</span></span><br><span class="line"><span class="comment">            //2. Class&lt;?&gt;[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型</span></span><br><span class="line"><span class="comment">            //3. InvocationHandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法, 会把当前执行的目标对象方法作为参数传入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), </span><br><span class="line">target.getClass().getInterfaces(), </span><br><span class="line"><span class="keyword">new</span> MyInvocationHandler()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span>  <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// 自定义业务逻辑</span></span><br><span class="line">System.out.println(<span class="string">"JDK代理开始~~"</span>);</span><br><span class="line"><span class="comment">//反射机制调用目标对象的方法</span></span><br><span class="line">Object returnVal = method.invoke(target, args);</span><br><span class="line">System.out.println(<span class="string">"JDK代理提交"</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④用户测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StudentDao studentDao = <span class="keyword">new</span> StudentDao();</span><br><span class="line">ProxyFactory studentDaoProxy = <span class="keyword">new</span> ProxyFactory(studentDao);</span><br><span class="line"><span class="comment">// 使用代理方法,注意这里一定要用接口接收</span></span><br><span class="line">IStudentDao studentDao2 = (IStudentDao) studentDaoProxy.getProxyInstance();</span><br><span class="line">studentDao2.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JDK代理开始~~</span><br><span class="line">正在读书中。。。。。</span><br><span class="line">JDK代理提交</span><br></pre></td></tr></table></figure><h4 id="3、Cglib代理">3、Cglib代理</h4><h6 id="1、介绍-v3">1、介绍</h6><ul><li>动态代理或静态代理都要求实现一个接口，但是对于Cglib并不需要实现任何接口。</li><li>Cglib代理也叫作子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展，所以也可称为动态代理。</li><li>Cglib是一个强大的高性能的代码生成包，它可以在运行期扩展java类与实现java接口。它广泛的被许多AOP框架使用，例如SpringAOP，实现方法拦截。</li><li>在AOP编程中如何选择代理模式：<br>1.目标对象需要实现接口，用JDK代理<br>2.目标对象不需要实现接口，用Cglib代理</li><li>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类<br><img src="https://img-blog.csdnimg.cn/20200414200122604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="cglib代理"></li></ul><h6 id="2、代码实现-v3">2、代码实现</h6><p>使用Cglib时代理的类不能为final/static，否则不会被拦截，同时需要引入cglib相关jar包<br>链接：<a href="https://pan.baidu.com/s/1ydin81D5ueuIm2cbSXSnIw" target="_blank" rel="noopener">https://pan.baidu.com/s/1ydin81D5ueuIm2cbSXSnIw</a><br>提取码：b5au</p><p>①被代理的学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"正在读书中。。。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②创建代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//维护一个目标对象</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器，传入一个被代理的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个代理对象:  是 target 对象的代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 创建一个工具类</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">//2. 设置父类</span></span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line"><span class="comment">//3. 设置回调函数</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//4. 创建子类对象，即代理对象</span></span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重写  intercept 方法，会调用目标对象的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object arg0, Method method, Object[] args, MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"Cglib代理模式 ~~ 开始"</span>);</span><br><span class="line">Object returnVal = method.invoke(target, args);</span><br><span class="line">System.out.println(<span class="string">"Cglib代理模式 ~~ 提交"</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③用户测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StudentDao studentDao = <span class="keyword">new</span> StudentDao();</span><br><span class="line">ProxyFactory studentDaoProxy = <span class="keyword">new</span> ProxyFactory(studentDao);</span><br><span class="line">StudentDao studentDao2 = (StudentDao)studentDaoProxy.getProxyInstance();</span><br><span class="line">studentDao2.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cglib代理模式 ~~ 开始</span><br><span class="line">正在读书中。。。。。</span><br><span class="line">Cglib代理模式 ~~ 提交</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、代理模式介绍&quot;&gt;一、代理模式介绍&lt;/h3&gt;
&lt;p&gt; 代理模式(Proxy Pattern)，是23种设计模式之一，它关心的主要是过程，而不是结果。代理模式主要提供了对目标对象的间接访问方式，即通过代理对象来访问目标对象，这样可以在目标对象实现的基础上，==增强额外的功能操作，即扩展目标对象的功能==，&lt;em&gt;SpringAop&lt;/em&gt;便是一个很好的例子。而被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。代理模式的简单示意图如下。&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/2020041418500189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70&quot; alt=&quot;代理模式示意图&quot;&gt;&lt;br&gt;
 代理模式主要有三种实现方式 &lt;strong&gt;静态代理&lt;/strong&gt;、&lt;strong&gt;动态代理&lt;/strong&gt;(JDK代理、接口代理)和&lt;strong&gt;Cglib代理&lt;/strong&gt;(不需要实现接口)。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="设计模式" scheme="https://www.shawn22.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker制作自己的镜像--ubuntu16.04构建Python和Paddlepaddle</title>
    <link href="https://www.shawn22.xyz/posts/e1b007ae.html"/>
    <id>https://www.shawn22.xyz/posts/e1b007ae.html</id>
    <published>2020-04-10T12:44:19.000Z</published>
    <updated>2020-04-29T00:55:05.148Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、拉取ubuntu16-04纯净镜像">1、拉取ubuntu16.04纯净镜像</h3><p>首先进入虚拟机管理员，将ubuntu16基础镜像从中心仓库拉下来，输入命令<code>docker pull ubuntu:16.04</code>,<br>docker就会自动下载ubuntu16的镜像了<br><img src="https://img-blog.csdnimg.cn/20200410202138280.png" alt="在这里插入图片描述"><br>用<code>docker images</code> 查看下载好的镜像<br><img src="https://img-blog.csdnimg.cn/20200410202204654.png" alt="在这里插入图片描述"><br>因为需要制作自己的容器，因此先下载好python3.7的tar包，这里我们选择编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在线下载python3.7，如果嫌慢可以先下载好直接拖进来</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200410202353342.png" alt="在这里插入图片描述"></p><a id="more"></a><h3 id="2、ubuntu16-04容器内安装Python3-7和Paddlepaddle">2、ubuntu16.04容器内安装Python3.7和Paddlepaddle</h3><p><code>docker run -it -v $PWD:/home/root123 ubuntu:16.04 /bin/bash</code>输入命令进入并运行容器，可以看见成功进入ubuntu容器了<br><img src="https://img-blog.csdnimg.cn/20200410202325422.png" alt="在这里插入图片描述"><br>在这里有可能自带的apt源还是国外的，而且没有vi/vim可编辑软件，所以这里用了echo直接更新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse"</span> &gt;&gt;/etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse"</span> &gt;&gt;/etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse"</span> &gt;&gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>之后进行必要的组件升级安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line"></span><br><span class="line">apt install vim<span class="comment">#安装vim</span></span><br><span class="line"></span><br><span class="line">apt install gcc</span><br><span class="line"></span><br><span class="line"><span class="comment">###pythin必须的基础包</span></span><br><span class="line">apt-get install zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat1-dev</span><br><span class="line"></span><br><span class="line">apt-get install liblzma-dev libffi-dev libc6-dev</span><br></pre></td></tr></table></figure><p>完成后进入与主机挂载的目录下，可以看见主机目录的文件成功映射到了虚拟机内<br><img src="https://img-blog.csdnimg.cn/20200410202407936.png" alt="在这里插入图片描述"><br>解压<code>tar -zxvf Python-3.7.0.tgz</code>，完成后进入Python-3.7.0目录，后面就需要依次进行编译安装了，这步可能时间会有点长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下命令分开执行</span></span><br><span class="line">./configure --with-ssl --prefix=/usr/<span class="built_in">local</span>/python3 --<span class="built_in">enable</span>-optimizations</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>之后进行链接，依次输入一下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/python3.7 /usr/bin/python3</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3.7 /usr/bin/pip3</span><br></pre></td></tr></table></figure><p>到此为止Python就安装完了，验证一下发现很成功<br><img src="https://img-blog.csdnimg.cn/20200410202416990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来就进行Paddlepaddle的安装，这里因为安装了pip，因此使用pip安装，输入以下命令</p><p>当然也可以用其他方式安装，<a href="https://www.paddlepaddle.org.cn/install/quick" target="_blank" rel="noopener">其他安装方式</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><p>安装完成后，验证一下是否成功安装。</p><p>先进入<code>python3</code>，然后输入<code>import paddle.fluid</code>，在输入<code>paddle.fluid.install_check.run_check()</code>，如果出现 <code>Your Paddle Fluid is installed successfully!</code>，说明已成功安装。<br><img src="https://img-blog.csdnimg.cn/20200410202427737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3、制作自己的镜像">3、制作自己的镜像</h3><p>退出容器后，我们需要构建自己的镜像,可以看到，我们成功的构建了属于我们自己的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment">#-m后是说明文字 -a是作者 容器id 后面是镜像名字</span></span><br><span class="line">docker commit -m <span class="string">"add vim&amp;source"</span> -a <span class="string">"author"</span> 1db56d541f2c python:1.0</span><br><span class="line"><span class="comment">#完成后输入一下即可看见新的镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200410202434190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后可将容器保存为文件，存放于当前目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o python.tar python3.7:1.0</span><br></pre></td></tr></table></figure><p>而从外部装载时则需要输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -input python.tar</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1、拉取ubuntu16-04纯净镜像&quot;&gt;1、拉取ubuntu16.04纯净镜像&lt;/h3&gt;
&lt;p&gt;首先进入虚拟机管理员，将ubuntu16基础镜像从中心仓库拉下来，输入命令&lt;code&gt;docker pull ubuntu:16.04&lt;/code&gt;,&lt;br&gt;
docker就会自动下载ubuntu16的镜像了&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20200410202138280.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
用&lt;code&gt;docker images&lt;/code&gt; 查看下载好的镜像&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20200410202204654.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
因为需要制作自己的容器，因此先下载好python3.7的tar包，这里我们选择编译安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#在线下载python3.7，如果嫌慢可以先下载好直接拖进来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200410202353342.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="云计算" scheme="https://www.shawn22.xyz/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="docker" scheme="https://www.shawn22.xyz/tags/docker/"/>
    
  </entry>
  
</feed>
