<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星的猫(&gt;^ω^&lt;)喵</title>
  
  
  <link href="https://www.shawn22.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.shawn22.xyz/"/>
  <updated>2021-11-12T14:31:22.443Z</updated>
  <id>https://www.shawn22.xyz/</id>
  
  <author>
    <name>Shawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux账户管理实践</title>
    <link href="https://www.shawn22.xyz/posts/6cdb47ee.html"/>
    <id>https://www.shawn22.xyz/posts/6cdb47ee.html</id>
    <published>2021-11-12T14:27:40.000Z</published>
    <updated>2021-11-12T14:31:22.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、环境准备">1、环境准备</h2><ul><li><p>ubuntu20.04 LTS</p></li><li><p>所有操作都在root账户下操作</p></li></ul><h2 id="2、新建用户组和用户">2、新建用户组和用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先新建一个组</span></span><br><span class="line">sudo groupadd develop</span><br><span class="line"><span class="comment">#下面是两种创建用户方式，第一种会自动配置好，推荐</span></span><br><span class="line">adduser shawn</span><br><span class="line"><span class="comment">#第二种创建用户方式，必须设置密码，否则登录不上;其中-g是否在新建时加入组，若是，则不会单独生成新的组</span></span><br><span class="line">useradd -m guest [-g develop]</span><br><span class="line">passwd guest</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/da172b4a5eea47febffef52170eea9a0.png" alt="请添加图片描述"></p><p>查看一下用户组状态，输入<code>cat /etc/group</code>查看组的信息，默认新建的用户自己的用户名为一组</p><p><img src="https://img-blog.csdnimg.cn/1baeab07f8e7444aa31ab755ba74f848.png" alt="在这里插入图片描述"></p><h2 id="3、group组操作">3、group组操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户操作在/etc/passwd都有记录</span></span><br><span class="line"><span class="comment">#usermod -aG group_name user_name</span></span><br><span class="line"><span class="comment">#gpasswd -a user_name group_name</span></span><br><span class="line"><span class="comment">#-g是更改用户的主组</span></span><br><span class="line"><span class="comment">#-G是更改用户的附加组</span></span><br><span class="line">usermod -aG develop shawn</span><br><span class="line"><span class="comment">#将用户加到新的组里</span></span><br><span class="line">gpasswd -a guest develop</span><br><span class="line"><span class="comment">#将用户移出某个组</span></span><br><span class="line"><span class="comment">#gpasswd -d [user_name] [group_name]</span></span><br><span class="line">gpasswd -d guest develop</span><br><span class="line"><span class="comment">#删除组，这里我已经移动到develop了所以成功删除</span></span><br><span class="line">groupdel shawn</span><br></pre></td></tr></table></figure><h2 id="4、登录">4、登录</h2><p>然后进行分别登陆，发现两个终端有点不一样！可以发现第二种方式创建的用户有点问题，只有一个$符号，这是怎么回事？</p><p><img src="https://img-blog.csdnimg.cn/c087e10257a54c3184db472a9ac1cfc1.png" alt="请添加图片描述"></p><p>原因：查看<code>/etc/passwd</code>文件后发现，新建的用户未指定shell。我们只需将其指定为<code>/bin/bash</code>即可;也可以进入该文件进行修改；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换用户</span></span><br><span class="line">su shawn</span><br><span class="line">su guest</span><br><span class="line"><span class="comment">#退出当前用户</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line"><span class="comment">#重新设置shell，这里发现用useradd命令会这样，建议用adduser</span></span><br><span class="line">usermod -s /bin/bash guest</span><br></pre></td></tr></table></figure><h2 id="5、给新建用户添加sudo权限">5、给新建用户添加sudo权限</h2><h3 id="5-1-添加到sudo组">5.1 添加到sudo组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加shawn到sudo组，需要时输入shawn的密码即可</span></span><br><span class="line">usermod -G sudo shawn</span><br></pre></td></tr></table></figure><h3 id="5-2-修改sudoers表">5.2 修改sudoers表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先要切换到root权限</span></span><br><span class="line"><span class="comment">#赋予当前用户写的权限</span></span><br><span class="line">chmod u+w /etc/sudoers</span><br><span class="line"><span class="comment">#编辑sudoers文件</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment">#在User privilege specification或者#includedir /etc/sudoers.d下添加，这个代表当前组的用户都可以进行sudo,需要时输入当前账户密码即可</span></span><br><span class="line">%develop ALL=(ALL:ALL) ALL</span><br><span class="line"><span class="comment">#撤销sudoers文件写权限</span></span><br><span class="line">chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3546f38f1b2641a1b5cd3c91eb09ca11.png" alt="在这里插入图片描述"></p><h3 id="5-3-etc-sudoers的格式">5.3 <code>/etc/sudoers</code>的格式</h3><p><code>user host=(run_as) command</code></p><ul><li>user:一位或几位用户，在/etc/group中可以用一个%代替它，组对象的名称一定要用百分号%开头。</li><li>host:一个或几个主机名，ALL表示可以在所有的主机上</li><li>run_as:作为哪个用户运行，常见选项是root和ALL</li><li>command:想让用户或组运行的一个或几个根级别命令</li></ul><p><strong>举几个例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%表示用户组，！表示禁止执行。</span></span><br><span class="line"><span class="comment">#表示默认5分钟后刚才输入的sodo密码过期，下次sudo需要重新输入密码</span></span><br><span class="line">shawn  ALL=(ALL:ALL) ALL </span><br><span class="line"><span class="comment">#表示允许无时间限制的免输入密码，该组都免输入</span></span><br><span class="line">%develop  ALL=(ALL:ALL) NOPASSWD:ALL  </span><br><span class="line"><span class="comment">#develop组可以从任何主机登陆，并且可以不用输入密码执行任何命令，但是不能执行/usr/sbin下的命令</span></span><br><span class="line">%develop ALL=(ALL) NOPASSWD:ALL,!/usr/sbin/</span><br></pre></td></tr></table></figure><h2 id="6、-etc-passwd详解">6、<code>/etc/passwd</code>详解</h2><p>对于<code>/etc/passwd</code>文件，它是用于存放用户名字和用户标识符号的一些信息的。</p><p>以root账户为例，各部分之间用:分隔开，可以分成7部分内容</p><p><strong>root:x :0 :0 : root : /root : /bin/bash</strong></p><ul><li><code>root</code>：账户名称</li><li><code>x</code>：密码，由于/etc/passwd这个文件是可以让所有用户读取，故为了安全，这个地方只能看到x，而隐藏了真实的密码</li><li><code>0</code>：用户识别码（UID）</li><li><code>0</code>：组识别码（GID），和<code>/etc/group</code>文件有关系</li><li><code>root</code>：该用户的信息说明，没有很重要的用途，仅仅是一个说明而已</li><li><code>/root</code>：该用户的家目录，登录时候进入的目录，如果想修改登录时候的家目录所在，就可以在这里进行修改了</li><li><code>/bin/bash</code>：shell，当用户执行命令的时候，是用的/bin/bash(在这个例子中)这个shell来执行命令。</li></ul><p><img src="https://img-blog.csdnimg.cn/ce99d0a04fb1418ea00d53709ad7c1e1.png" alt="在这里插入图片描述"></p><h2 id="7、删除用户和组">7、删除用户和组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userdel 用户名 <span class="comment"># 从配置文件中删除用户，并不删除用户下的文件夹</span></span><br><span class="line">userdel -r 用户名 <span class="comment"># 删除用户及其相关文件</span></span><br><span class="line">userdel -f 用户名 <span class="comment"># 强制删除用户</span></span><br><span class="line">groupdel 组名 <span class="comment">#删除组</span></span><br></pre></td></tr></table></figure><h2 id="8、其他">8、其他</h2><p>新建普通用户，可以将服务器资源分发给不同的用户，还可以赋予用户不同的权限；而组就是用来管理用户的，当用户多了的时候，比如需要赋予一批用户超级管理员权限，则只需要将用户添加到超级管理员的组就可以了</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、环境准备&quot;&gt;1、环境准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ubuntu20.04 LTS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有操作都在root账户下操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2、新建用户组和用户&quot;&gt;2、新建用户组和用户&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#首先新建一个组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo groupadd develop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#下面是两种创建用户方式，第一种会自动配置好，推荐&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adduser shawn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#第二种创建用户方式，必须设置密码，否则登录不上;其中-g是否在新建时加入组，若是，则不会单独生成新的组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useradd -m guest [-g develop]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;passwd guest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux日志系统初探</title>
    <link href="https://www.shawn22.xyz/posts/955628de.html"/>
    <id>https://www.shawn22.xyz/posts/955628de.html</id>
    <published>2021-11-04T05:19:23.000Z</published>
    <updated>2021-11-04T05:22:10.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Linux日志介绍">1、Linux日志介绍</h2><p>Linux日志文件包括以下三种类型</p><ul><li><p><strong>内核及系统日志</strong></p><p>这种日志数据由系统服务<code>syslog</code>统一管理，根据其主配置文件<code>/etc/syslog.conf</code>中的设置决定将内核消息及各种系统程序消息记录到什么位置。系统中有相当一部分程序会把自己的日志文件交由<code>syslog</code>管理，因而这些程序使用的日志记录也具有相似的格式。</p></li><li><p><strong>用户日志</strong></p><p>这种日志数据用于记录Linux系统用户登录及退出系统的相关信息，包括用户名、登录的终端、登录时间、来源主机、正在使用的进程操作等。</p></li><li><p><strong>程序日志</strong></p><p>有些应用程序运会选择自己来独立管理一份日志文件（而不是交给syslog服务管理），用于记录本程序运行过程中的各种事件信息。由于这些程序只负责管理自己的日志文件，因此不同的程序所使用的日志记录格式可能会存在极大差异。</p></li></ul><a id="more"></a><h2 id="2、Linux常见日志文件">2、Linux常见日志文件</h2><p>熟悉常用日志文件，当遇到问题时可以快速定位分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/messages <span class="comment">#记录Linux内核消息及各种应用程序的公共日志信息，包括启动、IO错误、网络错误、程序故障等。对于未使用独立日志文件的应用程序或服务，一般都可以从该文件获得相关的事件记录信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/cron <span class="comment">#记录crond计划任务产生的事件消息。</span></span><br><span class="line">/varlog/dmesg <span class="comment">#记录Linux系统在引导过程中的各种事件信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/maillog <span class="comment">#记录进入或发出系统的电子邮件活动。</span></span><br><span class="line">/var/<span class="built_in">log</span>/lastlog <span class="comment">#最近几次成功登录事件和最后一次不成功登录事件。</span></span><br><span class="line">/var/<span class="built_in">log</span>/rpmpkgs <span class="comment">#记录系统中安装各rpm包列表信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/secure <span class="comment">#记录用户登录认证过程中的事件信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/wtmp <span class="comment">#记录每个用户登录、注销及系统启动和停机事件。</span></span><br></pre></td></tr></table></figure><h2 id="3、常用命令与日志分析">3、常用命令与日志分析</h2><p><code>last</code>是一个命令行工具，它用来展示关于系统用户最后登录会话的信息。这个命令非常有用，尤其是当你需要追踪用户活动，或者调查一个可能的安全入侵问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-&lt;数字&gt;              <span class="comment">#显示最近的几行记录</span></span><br><span class="line">-a, --hostlast       <span class="comment">#最后一列显示主机名</span></span><br><span class="line">-d, --dns            <span class="comment">#将 IP 号转换回主机名</span></span><br><span class="line">-F, --file &lt;文件&gt;    <span class="comment">#用指定文件代替 /var/log/wtmp</span></span><br><span class="line">-F, --fulltimes      <span class="comment">#打印完整的登录和注销时间和日期</span></span><br><span class="line">-i, --ip             <span class="comment">#以数字和点的形式显示 IP 号</span></span><br><span class="line">-n, --<span class="built_in">limit</span> &lt;数字&gt;   <span class="comment">#要显示的行数</span></span><br><span class="line">-R, --nohostname     <span class="comment">#不显示主机名字段</span></span><br><span class="line">-s, --since &lt;时间&gt;   <span class="comment">#显示从指定时间起的行；格式举例2021-11-11</span></span><br><span class="line">-t, --until &lt;时间&gt;   <span class="comment">#显示到指定时间为止的行</span></span><br><span class="line">-p, --present &lt;时间&gt; <span class="comment">#显示在指定时间谁在场(present)</span></span><br><span class="line">-w, --fullnames      <span class="comment">#显示完整的用户名和域名</span></span><br><span class="line">-x, --system         <span class="comment">#显示系统关机项和运行级别更改</span></span><br><span class="line">    --time-format &lt;格式&gt;    <span class="comment">#以指定&lt;格式&gt;显示时间戳：notime|short|full|iso</span></span><br><span class="line"></span><br><span class="line">-h, --<span class="built_in">help</span>           <span class="comment">#display this help</span></span><br><span class="line">-V, --version        <span class="comment">#display version</span></span><br></pre></td></tr></table></figure><p><code>lastlog</code>此命令可以查看登陆过当前系统用户的最近一次登陆时间；默认是去读取<code> /var/log/lastlog</code> 日志文件的，这个文件同样是二进制文件，不能直接用 vi 编辑，需要使用 lastlog 命令调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-b, --before DAYS             <span class="comment">#仅打印早于 DAYS 的最近登录记录</span></span><br><span class="line">-C, --clear                   <span class="comment">#clear lastlog record of an user (usable only with -u)</span></span><br><span class="line">-h, --<span class="built_in">help</span>                    <span class="comment">#显示此帮助信息并推出</span></span><br><span class="line">-R, --root CHROOT_DIR         <span class="comment">#chroot 到的目录</span></span><br><span class="line">-S, --<span class="built_in">set</span>                     <span class="comment">#set lastlog record to current time (usable only with -u)</span></span><br><span class="line">-t, --time DAYS               <span class="comment">#仅打印晚于 DAYS 的最近登录记录</span></span><br><span class="line">-u, --user LOGIN              <span class="comment">#打印 LOGIN 用户的近登录记录</span></span><br></pre></td></tr></table></figure><p><code>head</code>和<code>tail</code>相关命令可参考https://blog.csdn.net/lemon_TT/article/details/114846900</p><h2 id="4、Linux中的tty、pts、pty等概念辨析">4、Linux中的tty、pts、pty等概念辨析</h2><ul><li><p>tty（teletypes，终端设备的统称）</p><p>tty设备包括虚拟控制台，串口以及伪终端设备。tty0~tty63是虚拟终端的设备特殊文件。/dev/tty0代表当前虚拟控制台，而/dev/tty1等代表第一个虚拟控制台。</p></li><li><p>pty（pseudo-tty，虚拟终端)：pty全称pseudo-tty，即伪终端设备，用于远程连接。它由master和slave两端构成，在任何一端的输入都会传达到另一端。与tty不同，系统中并不存在pty这种文件，它是由pts（pseudo-terminal slave）和ptmx（pseudo-teiminal master）两种设备文件来实现的。</p></li><li><p>pts(pseudo-terminal slave)</p><p>伪终端的slave端</p></li><li><p>ptmx(pseudo-terminal master)</p><p>伪终端的master端</p></li></ul><h2 id="5、查看相关文件实例">5、查看相关文件实例</h2><p>​一般来说，是查看Linux查看<code>/var/log/wtmp</code>或者<code>/var/log/lastlog</code>文件查看可疑IP登陆，然后查看<code>/var/log/secure</code>文件寻找可疑IP登陆次数；对于系统问题，查看<code>/var/log/messages</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取2020-11-11开始最近的十条登录事件</span></span><br><span class="line">last -s 2020-11-11 -n 10</span><br><span class="line"><span class="comment">#查看各个用户的登录情况</span></span><br><span class="line">lastlog</span><br><span class="line"><span class="comment">#查看secure文件的倒数100行</span></span><br><span class="line">cat secure | tail -n 100</span><br><span class="line"><span class="comment">#查看当前设备数</span></span><br><span class="line">ls /dev/pt*</span><br><span class="line"><span class="comment">#同一个用户开启多个终端，可以在不同终端打印</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> &gt; /dev/pts/2</span><br><span class="line"><span class="comment">#可以查看进程是当前哪个终端连接</span></span><br><span class="line">ps -aux | grep [进程名]</span><br></pre></td></tr></table></figure><h2 id="6、linux中log文件夹各个log文件内容">6、linux中log文件夹各个log文件内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/messages <span class="comment">#包括整体系统信息，其中也包含系统启动期间的日志。此外，mail，cron，daemon，kern和auth等内容也记录在var/log/messages日志中。</span></span><br><span class="line">/var/<span class="built_in">log</span>/dmesg <span class="comment"># 包含内核缓冲信息（kernel ring buffer）。在系统启动时，会在屏幕上显示许多与硬件有关的信息。可以用dmesg查看它们。</span></span><br><span class="line">/var/<span class="built_in">log</span>/auth.log <span class="comment"># 包含系统授权信息，包括用户登录和使用的权限机制等。</span></span><br><span class="line">/var/<span class="built_in">log</span>/boot.log <span class="comment"># 包含系统启动时的日志。</span></span><br><span class="line">/var/<span class="built_in">log</span>/daemon.log <span class="comment"># 包含各种系统后台守护进程日志信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/dpkg.log <span class="comment">#包括安装或dpkg命令清除软件包的日志。</span></span><br><span class="line">/var/<span class="built_in">log</span>/kern.log <span class="comment">#包含内核产生的日志，有助于在定制内核时解决问题。</span></span><br><span class="line">/var/<span class="built_in">log</span>/lastlog <span class="comment">#记录所有用户的最近信息。这不是一个ASCII文件，因此需要用lastlog命令查看内容。</span></span><br><span class="line">/var/<span class="built_in">log</span>/maillog /var/<span class="built_in">log</span>/mail.log <span class="comment">#包含来着系统运行电子邮件服务器的日志信息。例如，sendmail日志信息就全部送到这个文件中。</span></span><br><span class="line">/var/<span class="built_in">log</span>/user.log <span class="comment">#记录所有等级用户信息的日志。</span></span><br><span class="line">/var/<span class="built_in">log</span>/Xorg.x.log <span class="comment">#来自X的日志信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/alternatives.log <span class="comment">#更新替代信息都记录在这个文件中。</span></span><br><span class="line">/var/<span class="built_in">log</span>/btmp <span class="comment">#记录所有失败登录信息。使用last命令可以查看btmp文件。例如，”last -f /var/log/btmp | more“。</span></span><br><span class="line">/var/<span class="built_in">log</span>/cups <span class="comment">#涉及所有打印信息的日志。</span></span><br><span class="line">/var/<span class="built_in">log</span>/anaconda.log <span class="comment">#在安装Linux时，所有安装信息都储存在这个文件中。</span></span><br><span class="line">/var/<span class="built_in">log</span>/yum.log <span class="comment">#包含使用yum安装的软件包信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/cron <span class="comment">#每当cron进程开始一个工作时，就会将相关信息记录在这个文件中。</span></span><br><span class="line">/var/<span class="built_in">log</span>/secure <span class="comment">#包含验证和授权方面信息。例如，sshd会将所有信息记录（其中包括失败登录）在这里。</span></span><br><span class="line">/var/<span class="built_in">log</span>/wtmp或/var/<span class="built_in">log</span>/utmp <span class="comment">#包含登录信息。使用wtmp可以找出谁正在登陆进入系统，谁使用命令显示这个文件或信息等。</span></span><br><span class="line">/var/<span class="built_in">log</span>/faillog <span class="comment">#包含用户登录失败信息。此外，错误登录命令也会记录在本文件中。除了上述Log文件以外，</span></span><br><span class="line">---------------------------------------</span><br><span class="line"><span class="comment">#/var/log还基于系统的具体应用包含以下一些子目录：</span></span><br><span class="line">----------------------------------------</span><br><span class="line">/var/<span class="built_in">log</span>/httpd/或/var/<span class="built_in">log</span>/apache2 <span class="comment">#包含服务器access_log和error_log信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/lighttpd/ <span class="comment">#包含light HTTPD的access_log和error_log。</span></span><br><span class="line">/var/<span class="built_in">log</span>/mail/ <span class="comment">#这个子目录包含邮件服务器的额外日志。</span></span><br><span class="line">/var/<span class="built_in">log</span>/prelink/ <span class="comment">#包含.so文件被prelink修改的信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/audit/ <span class="comment">#包含被 Linux audit daemon储存的信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/samba/ <span class="comment">#包含由samba存储的信息。</span></span><br><span class="line">/var/<span class="built_in">log</span>/sa/ <span class="comment">#包含每日由sysstat软件包收集的sar文件。</span></span><br><span class="line">/var/<span class="built_in">log</span>/sssd/ <span class="comment">#用于守护进程安全服务。</span></span><br></pre></td></tr></table></figure><hr><p>参考</p><p><a href="https://blog.csdn.net/weixin_44966641/article/details/120585519" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44966641/article/details/120585519</a></p><p><a href="https://blog.51cto.com/jschu/1882685" target="_blank" rel="noopener">https://blog.51cto.com/jschu/1882685</a></p><p><a href="https://www.cnblogs.com/yihr/p/7212641.html" target="_blank" rel="noopener">https://www.cnblogs.com/yihr/p/7212641.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、Linux日志介绍&quot;&gt;1、Linux日志介绍&lt;/h2&gt;
&lt;p&gt;Linux日志文件包括以下三种类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内核及系统日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种日志数据由系统服务&lt;code&gt;syslog&lt;/code&gt;统一管理，根据其主配置文件&lt;code&gt;/etc/syslog.conf&lt;/code&gt;中的设置决定将内核消息及各种系统程序消息记录到什么位置。系统中有相当一部分程序会把自己的日志文件交由&lt;code&gt;syslog&lt;/code&gt;管理，因而这些程序使用的日志记录也具有相似的格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种日志数据用于记录Linux系统用户登录及退出系统的相关信息，包括用户名、登录的终端、登录时间、来源主机、正在使用的进程操作等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;程序日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有些应用程序运会选择自己来独立管理一份日志文件（而不是交给syslog服务管理），用于记录本程序运行过程中的各种事件信息。由于这些程序只负责管理自己的日志文件，因此不同的程序所使用的日志记录格式可能会存在极大差异。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ学习笔记</title>
    <link href="https://www.shawn22.xyz/posts/d439760d.html"/>
    <id>https://www.shawn22.xyz/posts/d439760d.html</id>
    <published>2021-10-24T03:25:12.000Z</published>
    <updated>2021-10-24T03:30:06.429Z</updated>
    
    <content type="html"><![CDATA[<h1>一、概述</h1><h2 id="1、中间件概述">1、中间件概述</h2><blockquote><p>中间件是介于应用系统和<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6/215962" target="_blank" rel="noopener">系统软件</a>之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/46fec18887ec4fd7b76b32e6b8eb8eef.png#pic_center" alt="请添加图片描述"></p><a id="more"></a><h2 id="2、消息中间件概述">2、消息中间件概述</h2><h3 id="1、概述">1、概述</h3><p>​消息中间件是利用可靠的消息传递机制进行系统和系统直接的通讯；以及通过提供消息传递和消息的排队机制，它可以在分布式系统环境下扩展进程间的通讯。常见的消息中间件有ActiveMQ、RabbitMQ、Kafka、RocketMQ等。</p><h3 id="2、应用场景">2、应用场景</h3><ul><li>跨系统数据传递</li><li>高并发的流量削峰</li><li>数据的分发和异步处理</li><li>大数据分析与传递</li><li>分布式事务</li></ul><h3 id="3、核心组成部分">3、核心组成部分</h3><ul><li>消息的协议</li><li>消息的持久化机制</li><li>消息的分发策略</li><li>消息的高可用，高可靠</li><li>消息的容错机制</li></ul><h3 id="4、其他">4、其他</h3><p>​常见的持久化方式</p><table><thead><tr><th style="text-align:center">ActiveMQ</th><th style="text-align:center">RabbitMQ</th><th style="text-align:center">Kafka</th><th style="text-align:center">RocketMQ</th><th style="text-align:center">是否支持</th></tr></thead><tbody><tr><td style="text-align:center">文件存储</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">数据库</td><td style="text-align:center">支持</td><td style="text-align:center">/</td><td style="text-align:center">/</td><td style="text-align:center">/</td></tr></tbody></table><p>​消息分发策略的机制和对比</p><table><thead><tr><th style="text-align:center">ActiveMQ</th><th style="text-align:center">RabbitMQ</th><th style="text-align:center">Kafka</th><th style="text-align:center">RocketMQ</th><th style="text-align:center">是否支持</th></tr></thead><tbody><tr><td style="text-align:center">发布订阅</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">轮询分发</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">/</td></tr><tr><td style="text-align:center">公平分发</td><td style="text-align:center">/</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">/</td></tr><tr><td style="text-align:center">重发</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">/</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">消息拉取</td><td style="text-align:center">/</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr></tbody></table><h1>二、RabbitMQ安装与入门</h1><h2 id="1、概述-v2">1、概述</h2><blockquote><p>RabbitMQ是一个开源的遵循AMQP协议实现的基于Erlang语言编写，支持多种客户端（语言）。用于在分布式系统中存储消息，转发消息，具有高可用，高可扩性，易用性等特征。</p><p>官网：<a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">https://www.rabbitmq.com/</a></p></blockquote><h2 id="2、RabbitMQ安装">2、RabbitMQ安装</h2><h3 id="1、环境准备">1、环境准备</h3><blockquote><p>RabbitMQ是采用Erlang语言开发的，所以系统环境必须提供Erlang环境，第一步就是安装Erlang。<br>RabbitMQ下载地址：<a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">https://www.rabbitmq.com/download.html</a><br>Erlang下载地址：<a href="https://www.erlang-solutions.com/downloads/" target="_blank" rel="noopener">https://www.erlang-solutions.com/downloads/</a><br>erlang和RabbitMQ版本的按照比较: <a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">https://www.rabbitmq.com/which-erlang.html</a></p></blockquote><p>Linux环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令</span></span><br><span class="line">lsb_release -a</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">LSB Version:    :core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID: CentOS</span><br><span class="line">Description:    CentOS Linux release 8.1.1911 (Core) </span><br><span class="line">Release:        8.1.1911</span><br><span class="line">Codename:       Core</span><br></pre></td></tr></table></figure><h3 id="2、Erlang安装">2、Erlang安装</h3><p>rpm包下载地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载rpm包</span></span><br><span class="line">wget https://packages.erlang-solutions.com/erlang-solutions-2.0-1.noarch.rpm</span><br><span class="line"><span class="comment">#更新本地yum仓库</span></span><br><span class="line">rpm -Uvh erlang-solutions-2.0-1.noarch.rpm</span><br><span class="line">yum install -y erlang</span><br><span class="line"><span class="comment">#查看版本测试是否安装成功</span></span><br><span class="line">erl -v</span><br><span class="line"><span class="comment">#一个小插件，需要</span></span><br><span class="line">yum install -y socat</span><br></pre></td></tr></table></figure><h3 id="3、RabbitMQ安装">3、RabbitMQ安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载rpm包</span></span><br><span class="line">wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.9.5/rabbitmq-server-3.9.5-1.el8.noarch.rpm</span><br><span class="line">rpm -Uvh rabbitmq-server-3.9.5-1.el8.noarch.rpm</span><br><span class="line">yum install rabbitmq-server -y</span><br></pre></td></tr></table></figure><h3 id="4、RabbitMQ运行">4、RabbitMQ运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start rabbitmq-server</span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status rabbitmq-server</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop rabbitmq-server</span><br><span class="line"><span class="comment"># 开机启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> rabbitmq-server</span><br></pre></td></tr></table></figure><h3 id="5、MQ的相关端口">5、MQ的相关端口</h3><p>​<em>注意端口的开放与安全组端口开放</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5672 <span class="comment">#RabbitMQ的通讯端口</span></span><br><span class="line">25672 <span class="comment">#RabbitMQ的节点间的CLI通讯端口是</span></span><br><span class="line">15672 <span class="comment">#RabbitMQ HTTP_API的端口，管理员用户才能访问，用于管理RabbitMQ,需要启动Management插件。</span></span><br><span class="line">1883、8883 <span class="comment">#MQTT插件启动时的端口。</span></span><br><span class="line">61613、61614 <span class="comment">#STOMP客户端插件启用的时候的端口。</span></span><br><span class="line">15674、15675 <span class="comment">#基于webscoket的STOMP端口和MOTT端口</span></span><br></pre></td></tr></table></figure><h2 id="3、RabbitMQWeb管理界面及授权操作">3、RabbitMQWeb管理界面及授权操作</h2><h3 id="1、RabbitMQ管理界面安装">1、RabbitMQ管理界面安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认情况下，rabbitmq是没有安装web端的客户端插件，需要安装才可以生效</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"><span class="comment">#安装完毕以后，重启服务即可</span></span><br><span class="line">systemctl restart rabbitmq-server</span><br><span class="line"><span class="comment">#注意端口开放</span></span><br><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent </span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>最后访问<code>http://ip:15672/</code>即可</p><h3 id="2、授权账号和密码">2、授权账号和密码</h3><p>​rabbitmq有一个默认账号和密码是：<code>guest</code> 默认情况只能在localhost本机下访问，所以需要添加一个远程登录的用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新增用户</span></span><br><span class="line">rabbitmqctl add_user admin admin</span><br><span class="line"><span class="comment">#设置用户分配操作权限</span></span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br><span class="line"><span class="comment">#为用户添加资源权限</span></span><br><span class="line">rabbitmqctl set_permissions -p / admin <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></span><br></pre></td></tr></table></figure><p>相关操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user 账号 密码</span><br><span class="line">rabbitmqctl set_user_tags 账号 administrator</span><br><span class="line">rabbitmqctl change_password Username Newpassword 修改密码</span><br><span class="line">rabbitmqctl delete_user Username 删除用户</span><br><span class="line">rabbitmqctl list_users 查看用户清单</span><br><span class="line">rabbitmqctl set_permissions -p / 用户名 <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span> 为用户设置administrator角色</span><br><span class="line">rabbitmqctl set_permissions -p / root <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></span><br></pre></td></tr></table></figure><h2 id="4、Docker安装RabbitMQ">4、Docker安装RabbitMQ</h2><h3 id="1、Docker安装">1、Docker安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#yum 包更新到最新</span></span><br><span class="line">yum update</span><br><span class="line"><span class="comment">#安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment">#设置yum源为阿里云</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#安装docker</span></span><br><span class="line">yum install docker-ce -y</span><br><span class="line"><span class="comment">#安装后查看docker版本</span></span><br><span class="line">docker -v</span><br><span class="line"><span class="comment">#安装加速镜像</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://0wrdwnn6.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p><em>详情查看https://blog.csdn.net/lemon_TT/article/details/117983127</em></p><h3 id="2、docker相关命令">2、docker相关命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker：</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 停止docker：</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 重启docker：</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 查看docker状态：</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="comment"># 开机启动：  </span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl unenable docker</span><br><span class="line"><span class="comment"># 查看docker概要信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 查看docker帮助文档</span></span><br><span class="line">docker --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="3、RabbitMQ安装运行">3、RabbitMQ安装运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个镜像带管理界面</span></span><br><span class="line">docker pull rabbitmq:management</span><br><span class="line"><span class="comment">#运行docker容器</span></span><br><span class="line">docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management</span><br><span class="line"><span class="comment">#开放端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --add-port=5672/tcp  --permanent</span><br><span class="line">firewall-cmd --reload </span><br><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">docker logs -f myrabbit</span><br><span class="line"><span class="comment">#查看端口是否被占用</span></span><br><span class="line">netstat -naop | grep 5672</span><br></pre></td></tr></table></figure><p>最后访问<code>http://ip:15672/</code>即可</p><h2 id="5、RabbitMQ角色介绍">5、RabbitMQ角色介绍</h2><h3 id="1、none">1、none</h3><ul><li>不能访问management plugin</li></ul><h3 id="2、management：查看自己相关节点信息">2、management：查看自己相关节点信息</h3><ul><li>列出自己可以通过AMQP登入的虚拟机</li><li>查看自己的虚拟机节点 virtual hosts的queues,exchanges和bindings信息</li><li>查看和关闭自己的channels和connections</li><li>查看有关自己的虚拟机节点virtual hosts的统计信息。包括其他用户在这个节点virtual hosts中的活动信息。</li></ul><h3 id="3、Policymaker">3、Policymaker</h3><ul><li>包含management所有权限</li><li>查看和创建和删除自己的virtual hosts所属的policies和parameters信息。</li></ul><h3 id="4、Monitoring">4、Monitoring</h3><ul><li>包含management所有权限</li><li>罗列出所有的virtual hosts，包括不能登录的virtual hosts。</li><li>查看其他用户的connections和channels信息</li><li>查看节点级别的数据如clustering和memory使用情况</li><li>查看所有的virtual hosts的全局统计信息。</li></ul><h3 id="5、Administrator">5、Administrator</h3><ul><li>最高权限</li><li>可以创建和删除virtual hosts</li><li>可以查看，创建和删除users</li><li>查看创建permisssions</li><li>关闭所有用户的connections</li></ul><h1>三、RabbitMQ入门实战</h1><h2 id="1、概述-v3">1、概述</h2><blockquote><p>AMQP全称：Advanced Message Queuing Protocol(高级消息队列协议)。是应用层协议的一个开发标准，为面向消息的中间件设计。</p></blockquote><p><strong>AMQP生产者流转过程</strong></p><p><img src="https://img-blog.csdnimg.cn/6cfa8c6ebddd4efaaba0bf5d44497100.png#pic_center" alt="请添加图片描述"></p><p><strong>AMQP消费者流转过程</strong></p><p><img src="https://img-blog.csdnimg.cn/260d3c9d730748feb3f38d8e922fdc7a.png#pic_center" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c43f8febf9db4094a3145c60bcdaf758.png#pic_center" alt="请添加图片描述"></p><p><strong>Server</strong>：又称Broker ,接受客户端的连接，实现AMQP实体服务。 安装rabbitmq-server<br><strong>Connection</strong>：连接，应用程序与Broker的网络连接 TCP/IP/ 三次握手和四次挥手<br><strong>Channel</strong>：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立对各Channel，每个Channel代表一个会话任务。<br><strong>Message</strong> :消息：服务与应用程序之间传送的数据，由Properties和body组成，Properties可是对消息进行修饰，比如消息的优先级，延迟等高级特性，Body则就是消息体的内容。<br><strong>Virtual Host</strong> 虚拟地址，用于进行逻辑隔离，最上层的消息路由，一个虚拟主机理由可以有若干个Exhange和Queueu，同一个虚拟主机里面不能有相同名字的Exchange<br><strong>Exchange</strong>：交换机，接受消息，根据路由键发送消息到绑定的队列。(==不具备消息存储的能力==)<br><strong>Bindings</strong>：Exchange和Queue之间的虚拟连接，binding中可以保护多个routing key.<br><strong>Routing key</strong>：是一个路由规则，虚拟机可以用它来确定如何路由一个特定消息。<br><strong>Queue</strong>：队列：也成为Message Queue,消息队列，保存消息并将它们转发给消费者。</p><h2 id="2、Simple简单模式">2、Simple简单模式</h2><ul><li>特点：普通消费者生产者模型</li></ul><img src="https://img-blog.csdnimg.cn/63036094c2f34977973d046a812f6255.png#pic_center" width="60%"><h3 id="1、代码实现">1、代码实现</h3><p><strong>实现步骤</strong></p><p>1、jdk1.8<br>2、构建一个maven工程<br>3、导入rabbitmq的maven依赖<br>4、启动rabbitmq-server服务<br>5、定义生产者<br>6、定义消费者<br>7、观察消息的在rabbitmq-server服务中的过程</p><p><strong>导入maven依赖</strong></p><p>java原生依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springboot依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面依赖根据自己的项目环境进行选择即可。</p><p><strong>定义生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里我使用了原生java依赖，导的包都是rabbitmq.client下</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2: 设置连接属性</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"120.24.70.136"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3: 从连接工厂中获取连接</span></span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">"生产者"</span>);</span><br><span class="line">            <span class="comment">// 4: 从连接中获取通道channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">// 5: 申明队列queue存储消息</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             *  如果队列不存在，则会创建</span></span><br><span class="line"><span class="comment">             *  Rabbitmq不允许创建两个相同的队列名称，否则会报错。</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *  @params1： queue 队列的名称</span></span><br><span class="line"><span class="comment">             *  @params2： durable 队列是否持久化</span></span><br><span class="line"><span class="comment">             *  @params3： exclusive 是否排他，即是否私有的，如果为true,会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</span></span><br><span class="line"><span class="comment">             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</span></span><br><span class="line"><span class="comment">             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            channel.queueDeclare(<span class="string">"queue1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 6： 准备发送消息的内容</span></span><br><span class="line">            String message = <span class="string">"你好，shawn！！！"</span>;</span><br><span class="line">            <span class="comment">// 7: 发送消息给中间件rabbitmq-server</span></span><br><span class="line">            <span class="comment">// @params1: 交换机exchange</span></span><br><span class="line">            <span class="comment">// @params2: 队列名称/routing</span></span><br><span class="line">            <span class="comment">// @params3: 属性配置</span></span><br><span class="line">            <span class="comment">// @params4: 发送消息的内容</span></span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, <span class="string">"queue1"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">"消息发送成功!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"发送消息出现异常..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 7: 释放连接关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2: 设置连接属性</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"120.24.70.136"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">"消费者"</span>);</span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            channel.basicConsume(<span class="string">"queue1"</span>, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String comsumerTag, Delivery message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"收到消息为"</span> + <span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"接受失败了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">"接受消息完毕"</span>);</span><br><span class="line">            <span class="comment">//System.in.read();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"接受消息出现异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Web界面操作">2、Web界面操作</h3><p><img src="https://img-blog.csdnimg.cn/65b49943b2734dd78def0ea297029d91.png#pic_center" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/6a85a51cfd0a409aab88fd6f7e65e77a.png#pic_center" alt="请添加图片描述"></p><h2 id="3、work工作模式">3、work工作模式</h2><h3 id="1、概述-v4">1、概述</h3><ul><li>特点：分发机制。包括轮询模式和公平分发模式</li></ul><p><img src="https://img-blog.csdnimg.cn/c2b717c617bb42e3801089805f634094.png?#pic_center" alt="请添加图片描述"></p><h3 id="2、代码实现">2、代码实现</h3><p><strong>1、轮询模式</strong></p><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2: 设置连接属性</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"120.24.70.136"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3: 从连接工厂中获取连接</span></span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">"生产者"</span>);</span><br><span class="line">            <span class="comment">// 4: 从连接中获取通道channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5： 准备发送消息的内容</span></span><br><span class="line">            <span class="comment">//===============================end topic模式==================================</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//消息的内容</span></span><br><span class="line">                String msg = <span class="string">"shawn:"</span> + i;</span><br><span class="line">                <span class="comment">// 7: 发送消息给中间件rabbitmq-server</span></span><br><span class="line">                <span class="comment">// @params1: 交换机exchange</span></span><br><span class="line">                <span class="comment">// @params2: 队列名称/routingkey</span></span><br><span class="line">                <span class="comment">// @params3: 属性配置</span></span><br><span class="line">                <span class="comment">// @params4: 发送消息的内容</span></span><br><span class="line">                channel.basicPublish(<span class="string">""</span>, <span class="string">"queue1"</span>, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"消息发送成功!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"发送消息出现异常..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 7: 释放连接关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者，这里需要创建两个类，work1和work2，内容一样，只贴出一份</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2: 设置连接属性</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"120.24.70.136"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">"消费者"</span>);</span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            channel.basicConsume(<span class="string">"queue1"</span>, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String comsumerTag, Delivery message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"收到消息为"</span> + <span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"接受失败了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.in.read();</span><br><span class="line">            System.out.println(<span class="string">"接受消息完毕"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"接受消息出现异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为两个消费分别消费一个，轮着消费，即使每个线程运行时间不同</p><p><strong>2、公平分发模式</strong></p><p>生产者不变，消费者改成手动消费，仍然创建两个各，其中每个类运行睡眠时间不一样，结果可以发现对于睡眠时间短的消费消息更多，即性能好的消费更多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shawn.rabbitmq.work.fair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2: 设置连接属性</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"120.24.70.136"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">"消费者"</span>);</span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            Channel finalChannel = channel;</span><br><span class="line">            <span class="comment">//表示每次从队列获取一个消息，根据内存状况调整</span></span><br><span class="line">            finalChannel.basicQos(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//设置手动确认消费消息</span></span><br><span class="line">            channel.basicConsume(<span class="string">"queue1"</span>, <span class="keyword">false</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String comsumerTag, Delivery message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"收到消息为"</span> + <span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">                        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                       <span class="comment">//确认消费</span></span><br><span class="line">                     finalChannel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"接受失败了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.in.read();</span><br><span class="line">            System.out.println(<span class="string">"接受消息完毕"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"接受消息出现异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、fanout发布订阅模式">4、fanout发布订阅模式</h2><h3 id="1、概述-v5">1、概述</h3><ul><li>特点：Fanout—发布与订阅模式，是一种广播机制，它是没有路由key的模式。只要订阅了该交换机，那么就可以获取数据</li></ul><p><img src="https://img-blog.csdnimg.cn/be72b06d5297433eaf11d0c5f120e752.png#pic_center" alt="请添加图片描述"></p><h3 id="2、代码实现-v2">2、代码实现</h3><p>生产者（注意已经绑定好关系可以不用在代码中编写绑定关系了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2: 设置连接属性</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"120.24.70.136"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3: 从连接工厂中获取连接</span></span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">"生产者"</span>);</span><br><span class="line">            <span class="comment">// 4: 从连接中获取通道channel</span></span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">// 5: 准备交换机,这里我在web界面以及创建完毕</span></span><br><span class="line">            String exchangeName = <span class="string">"fanout_exchange"</span>;</span><br><span class="line">            <span class="comment">// 6： 准备发送消息的内容</span></span><br><span class="line">            String message = <span class="string">"你好，shawn！！！"</span>;</span><br><span class="line">            <span class="comment">// 7:定义路由key</span></span><br><span class="line">            String routingKey=<span class="string">""</span>;</span><br><span class="line">            <span class="comment">// 8: 指定交换机类型</span></span><br><span class="line">            String type = <span class="string">"fanout"</span>;</span><br><span class="line">            <span class="comment">//这里队列声明以及绑定关系都已经在web端完成,可以不下以下声明</span></span><br><span class="line">            <span class="comment">//最后true表示重启后交换机不会删除</span></span><br><span class="line">            channel.exchangeDeclare(exchangeName, type, <span class="keyword">true</span>);</span><br><span class="line">            String queueName1 = channel.queueDeclare(<span class="string">"queue1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>).getQueue();</span><br><span class="line">            channel.queueBind(queueName1, exchangeName, routingKey);</span><br><span class="line">            String queueName2 = channel.queueDeclare(<span class="string">"queue2"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>).getQueue();</span><br><span class="line">            channel.queueBind(queueName2, exchangeName, routingKey);</span><br><span class="line">            <span class="comment">// 9: 发送消息给中间件rabbitmq-server</span></span><br><span class="line">            <span class="comment">// @params1: 交换机exchange</span></span><br><span class="line">            <span class="comment">// @params2: 队列名称/routing</span></span><br><span class="line">            <span class="comment">// @params3: 属性配置</span></span><br><span class="line">            <span class="comment">// @params4: 发送消息的内容</span></span><br><span class="line">            channel.basicPublish(exchangeName, routingKey, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">"消息发送成功!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"发送消息出现异常..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 7: 释放连接关闭通道</span></span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里注意消费者会将消息都消费</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comsumer</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Runnable runnable = () -&gt; &#123;</span><br><span class="line">        <span class="comment">// 1: 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2: 设置连接属性</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"120.24.70.136"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line">         <span class="comment">//获取队列的名称</span></span><br><span class="line">         <span class="keyword">final</span> String queueName = Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.newConnection(<span class="string">"消费者"</span>);</span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            channel.basicConsume(queueName, <span class="keyword">true</span>, <span class="keyword">new</span> DeliverCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String comsumerTag, Delivery message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"收到消息为"</span> + <span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CancelCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"接受失败了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.in.read();</span><br><span class="line">            System.out.println(<span class="string">"接受消息完毕"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"接受消息出现异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != <span class="keyword">null</span> &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable,<span class="string">"queue1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable,<span class="string">"queue2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、direct路由模式">5、direct路由模式</h2><ul><li>特点：有routing-key的匹配模式，根据给定的路由key确定对应的队列</li></ul><p><img src="https://img-blog.csdnimg.cn/d27ebed0a90e4809b0bea4a4a409f0ec.png#pic_center" alt="请添加图片描述"></p><p>​代码实现如fanout模式，将生产者交换机以及路由修改即可，这里路由是精确匹配</p><h2 id="6、topic主题模式">6、topic主题模式</h2><ul><li><p>特点：模糊的routing-key的匹配模式</p><p>#表示0级或多级</p><p>*表示必须有1级</p></li></ul><p><img src="https://img-blog.csdnimg.cn/ab7b0135e497418eac29cad20ee11469.png#pic_center" alt="请添加图片描述"></p><p>​代码实现如fanout模式，将生产者交换机以及路由修改即可，这里路由是正则匹配方式</p><h2 id="7、headers参数模式">7、headers参数模式</h2><ul><li>特点：通过参数进行相应队列的分发</li></ul><h1>四、SPringBoot整合RabbitMQ入门实战</h1><h2 id="1、环境准备-v2">1、环境准备</h2><p>​创建SPringBoot父子项目，兵在<code>pom.xml</code>引入RabbitMQ依赖，后面就创建子模块，pom依赖关系配置详见<a href="https://blog.csdn.net/lemon_TT/article/details/119654251" target="_blank" rel="noopener">父子项目搭建参考</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​目标架构</p><p><img src="https://img-blog.csdnimg.cn/6a44267c04bd46dca86d2214712e695b.png#pic_center" alt="请添加图片描述"></p><h2 id="2、fanout模式">2、fanout模式</h2><h3 id="1、创建生产者模块">1、创建生产者模块</h3><p>创建springboot-rabbitmq-fanout-producer模块，并在在application.yml进行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 配置rabbitmq服务</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">120.24</span><span class="number">.70</span><span class="number">.136</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure><p>定义订单生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shawn.springbootrabbitmqfanoutproducer.service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1: 定义交换机</span></span><br><span class="line">    <span class="keyword">private</span> String exchangeName = <span class="string">"fanout_order_exchange"</span>;</span><br><span class="line">    <span class="comment">// 2: 路由key</span></span><br><span class="line">    <span class="keyword">private</span> String routeKey = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(Long userId, Long productId, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1： 模拟用户下单</span></span><br><span class="line">        String orderNumer = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 2: 根据商品id productId 去查询商品的库存</span></span><br><span class="line">        <span class="comment">// int numstore = productSerivce.getProductNum(productId);</span></span><br><span class="line">        <span class="comment">// 3:判断库存是否充足</span></span><br><span class="line">        <span class="comment">// if(num &gt;  numstore )&#123; return  "商品库存不足..."; &#125;</span></span><br><span class="line">        <span class="comment">// 4: 下单逻辑</span></span><br><span class="line">        <span class="comment">// orderService.saveOrder(order);</span></span><br><span class="line">        <span class="comment">// 5: 下单成功要扣减库存</span></span><br><span class="line">        <span class="comment">// 6: 下单完成以后</span></span><br><span class="line">        System.out.println(<span class="string">"用户 "</span> + userId + <span class="string">",订单编号是："</span> + orderNumer);</span><br><span class="line">        <span class="comment">// 发送订单信息给RabbitMQ fanout</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, routeKey, orderNumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义绑定关系,，相当于之前的创建交换机、绑定队列等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shawn.springbootrabbitmqfanoutproducer.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Shawn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/09/02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span></span><br><span class="line">        <span class="comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span></span><br><span class="line">        <span class="comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span></span><br><span class="line">        <span class="comment">//   return new Queue("TestDirectQueue",true,true,false);</span></span><br><span class="line">        <span class="comment">//一般设置一下队列的持久化就好,其余两个就是默认false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"email.fanout.queue"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span></span><br><span class="line">        <span class="comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span></span><br><span class="line">        <span class="comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span></span><br><span class="line">        <span class="comment">//   return new Queue("TestDirectQueue",true,true,false);</span></span><br><span class="line">        <span class="comment">//一般设置一下队列的持久化就好,其余两个就是默认false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"sms.fanout.queue"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">weixinQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span></span><br><span class="line">        <span class="comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span></span><br><span class="line">        <span class="comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span></span><br><span class="line">        <span class="comment">//   return new Queue("TestDirectQueue",true,true,false);</span></span><br><span class="line">        <span class="comment">//一般设置一下队列的持久化就好,其余两个就是默认false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"weixin.fanout.queue"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换机名字和类型</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutOrderExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">"fanout_order_exchange"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定  将队列和交换机绑定, 并设置用于匹配键</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(weixinQueue()).to(fanoutOrderExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(fanoutOrderExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(fanoutOrderExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后进行测试类，成功后即可发现队列有了消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRabbitmqFanoutProducerApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            Long userId = <span class="number">100L</span> + i;</span><br><span class="line">            Long productId = <span class="number">10001L</span> + i;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">            orderService.makeOrder(userId, productId, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建消费者模块">2、创建消费者模块</h3><p>创建springboot-rabbitmq-fanout-consumer模块，并在在application.yml进行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment"># 配置rabbitmq服务</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">120.24</span><span class="number">.70</span><span class="number">.136</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure><p>分别创建三个消费者类，这里举例其中一个SMS消费类，最后启动即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bindings其实就是用来确定队列和交换机绑定关系</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(bindings =<span class="meta">@QueueBinding</span>(</span><br><span class="line">        <span class="comment">// email.fanout.queue 是队列名字，这个名字你可以自定随便定义。</span></span><br><span class="line">        value = <span class="meta">@Queue</span>(value = <span class="string">"sms.fanout.queue"</span>,autoDelete = <span class="string">"false"</span>),</span><br><span class="line">        <span class="comment">// order.fanout 交换机的名字 必须和生产者保持一致</span></span><br><span class="line">        exchange = <span class="meta">@Exchange</span>(value = <span class="string">"fanout_order_exchange"</span>,</span><br><span class="line">                <span class="comment">// 这里是确定的rabbitmq模式是：fanout 是以广播模式 、 发布订阅模式</span></span><br><span class="line">                type = ExchangeTypes.FANOUT)</span><br><span class="line">))</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutSMSConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// @RabbitHandler 代表此方法是一个消息接收的方法。该不要有返回值</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messagerevice</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 此处省略发邮件的逻辑</span></span><br><span class="line">        System.out.println(<span class="string">"sms--------------&gt;"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、direct模式">3、direct模式</h2><p>​新建项目，配置DirectConfiguration中的交换机和队列，并在订单业务中设置路由key，其他操作与fanout模式类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span></span><br><span class="line">        <span class="comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span></span><br><span class="line">        <span class="comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span></span><br><span class="line">        <span class="comment">//   return new Queue("TestDirectQueue",true,true,false);</span></span><br><span class="line">        <span class="comment">//一般设置一下队列的持久化就好,其余两个就是默认false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"email.direct.queue"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span></span><br><span class="line">        <span class="comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span></span><br><span class="line">        <span class="comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span></span><br><span class="line">        <span class="comment">//   return new Queue("TestDirectQueue",true,true,false);</span></span><br><span class="line">        <span class="comment">//一般设置一下队列的持久化就好,其余两个就是默认false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"sms.direct.queue"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">weixinQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span></span><br><span class="line">        <span class="comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span></span><br><span class="line">        <span class="comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span></span><br><span class="line">        <span class="comment">//   return new Queue("TestDirectQueue",true,true,false);</span></span><br><span class="line">        <span class="comment">//一般设置一下队列的持久化就好,其余两个就是默认false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"weixin.direct.queue"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directOrderExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"direct_order_exchange"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(weixinQueue()).to(directOrderExchange()).with(<span class="string">"weixin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue()).to(directOrderExchange()).with(<span class="string">"sms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(directOrderExchange()).with(<span class="string">"email"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、topic模式">4、topic模式</h2><p>​在这里可以不定义figuration，直接通过队列绑定交换机的路由关系，其他操作与fanout模式类似（通过注解方式绑定，之前都是通过配置文件方式绑定）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bindings其实就是用来确定队列和交换机绑定关系</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(bindings =<span class="meta">@QueueBinding</span>(</span><br><span class="line">        <span class="comment">// sms.topic.queue 是队列名字，这个名字你可以自定随便定义。</span></span><br><span class="line">        value = <span class="meta">@Queue</span>(value = <span class="string">"sms.topic.queue"</span>,autoDelete = <span class="string">"false"</span>),</span><br><span class="line">        exchange = <span class="meta">@Exchange</span>(value = <span class="string">"topic_order_exchange"</span>,</span><br><span class="line">                type = ExchangeTypes.TOPIC),</span><br><span class="line">        key = <span class="string">"#.sms.#"</span></span><br><span class="line">))</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicSMSConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messagerevice</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 此处省略发邮件的逻辑</span></span><br><span class="line">        System.out.println(<span class="string">"SMS--------------&gt;"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、过期时间ttl和死信队列-★">5、过期时间ttl和死信队列(★)</h2><blockquote><p>过期时间TTL表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收获取；过了之后消息将自动被删除。RabbitMQ可以对<strong>消息和队列</strong>设置TTL。目前有两种方法可以设置，若两个同时设置，则以时间最短的为准。</p><ul><li>通过队列属性设置，队列中所有消息都有相同的过期时间。</li><li>对消息进行单独设置，每条消息TTL可以不同。</li></ul><p>DLX，全称为Dead-Letter-Exchange , 可以称之为死信交换机，也有人称之为死信邮箱。当消息在一个队列中变成死信(dead message)之后，它能被重新发送到另一个交换机中，这个交换机就是DLX ，绑定DLX的队列就称之为死信队列。<br>消息变成死信，可能是由于以下的原因：</p><ul><li>消息被拒绝</li><li>消息过期</li><li>队列达到最大长度</li></ul><p>DLX也是一个正常的交换机，和一般的交换机没有区别，它能在任何的队列上被指定，实际上就是设置某一个队列的属性。当这个队列中存在死信时，Rabbitmq就会自动地将这个消息重新发布到设置的DLX上去，进而被路由到另一个队列，即死信队列。要想使用死信队列，只需要在定义队列的时候设置队列参数 <code>x-dead-letter-exchange</code> 指定交换机即可。</p></blockquote><p>​首先定义交换机、队列以及绑定关系，在定义队列时设置ttl参数以及dead参数，即创建后该队列会显示ttl以及DLX，代表是会自动删除消息的队列，并且删除的消息会发送到死信队列。这里定义了两种过期类型：队列过期和消息过期，其中队列过期可以将过期消息送到死信队列，而消息过期是完全删除了消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTLDirectConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列的过期时间</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">ttlQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 这个key可以在图形化界面查看，类型一定是int类型</span></span><br><span class="line">        args.put(<span class="string">"x-message-ttl"</span>,<span class="number">5000</span>);</span><br><span class="line">        args.put(<span class="string">"x-dead-letter-exchange"</span>,<span class="string">"dead_direct_exchange"</span>);</span><br><span class="line">        <span class="comment">// fanout模式不用配置</span></span><br><span class="line">        args.put(<span class="string">"x-dead-letter-routing-key"</span>,<span class="string">"dead"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"ttl.direct.queue"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">ttlMessageQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"ttl.message.direct.queue"</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机名字和类型</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">TTLDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"ttl_direct_exchange"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">directTTLBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(ttlQueue()).to(TTLDirectExchange()).with(<span class="string">"ttl"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">directTTLBinding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(ttlMessageQueue()).to(TTLDirectExchange()).with(<span class="string">"ttl.message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//死信队列交换机和队列配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadDirectConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"dead.direct.queue"</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换机名字和类型</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">deadDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"dead_direct_exchange"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">directTTLDeadBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadQueue()).to(deadDirectExchange()).with(<span class="string">"dead"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​创建服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTLService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1: 定义交换机</span></span><br><span class="line">    <span class="keyword">private</span> String exchangeName = <span class="string">"ttl_direct_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列设置过期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(Long userId, Long productId, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String routeKey = <span class="string">"ttl"</span>;</span><br><span class="line">        <span class="comment">// 1： 模拟用户下单</span></span><br><span class="line">        String orderNumer = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">"用户 "</span> + userId + <span class="string">",订单编号是："</span> + orderNumer);</span><br><span class="line">        <span class="comment">// 发送订单信息给RabbitMQ</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, routeKey, orderNumer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息设置过期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrderMessage</span><span class="params">(Long userId, Long productId, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String routeKey = <span class="string">"ttl.message"</span>;</span><br><span class="line">        <span class="comment">// 1： 模拟用户下单</span></span><br><span class="line">        String orderNumer = UUID.randomUUID().toString();</span><br><span class="line">        System.out.println(<span class="string">"用户 "</span> + userId + <span class="string">",订单编号是："</span> + orderNumer);</span><br><span class="line">        MessagePostProcessor messagePostProcessor = <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                <span class="comment">//设置5s过期</span></span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">"5000"</span>);</span><br><span class="line">                message.getMessageProperties().setContentEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 发送订单信息给RabbitMQ</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, routeKey, orderNumer,messagePostProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​最后创建测试类，启动后过期队列的消息过期会送到死信队列，而过期消息则直接删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRabbitmqFanoutProducerApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TTLService ttlService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            Long userId = <span class="number">100L</span> + i;</span><br><span class="line">            Long productId = <span class="number">10001L</span> + i;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 队列过期</span></span><br><span class="line">            ttlService.makeOrder(userId, productId, num);</span><br><span class="line">            <span class="comment">// 消息过期</span></span><br><span class="line">            ttlService.makeOrderMessage(userId, productId, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、消息确认机制的配置">6、消息确认机制的配置</h2><blockquote><p>NONE值是禁用发布确认模式，是默认值;<br>CORRELATED值是发布消息成功到交换器后会触发回调方法;<br>SIMPLE值经测试有两种效果，其一效果和CORRELATED值一样会触发回调方法，其二在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker;</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 配置rabbitmq服务</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">120.24</span><span class="number">.70</span><span class="number">.136</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line"><span class="comment">#    集群配置方式</span></span><br><span class="line"><span class="comment">#    addresses: 120.24.70.136:5672</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br></pre></td></tr></table></figure><p>​在代码中配置确认机制，生产者无论成功发送与否，都会收到消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java中该注解的说明：@PostConstruct该注解被用来修饰一个非静态的void（）方法。被PostConstruct修饰的方法会在服务器加我Servlet的时候运行，</span></span><br><span class="line">    <span class="comment">//并且只会被服务器执行一次。Postconstruct在构造函数之后执行，init（）方法之前执行。</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regCallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//消息发送成功以后，给予生产者的消息回执，来确保生产者的可靠性</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"消息确认成功!!!!"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"消息确认失败!!!!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​对于消费者来说，需要在配置文件重新配置过，解决消息重试的几种方案：</p><ul><li>控制重发的次数</li><li>try+catch+手动ack</li><li>try+catch+手动ack+死信队列处理</li></ul><h1>五、RabbitMQ内存磁盘的监控</h1><h2 id="1、概述-v6">1、概述</h2><p>​把消息默认放在内存中是为了加快传输和消费的速度，存入磁盘是保证消息数据的持久化。</p><p><img src="https://img-blog.csdnimg.cn/5f1893c4bc8a4c9ebd83299740e48d95.png#pic_center" alt="请添加图片描述"></p><blockquote><p>参考帮助文档：<a href="https://www.rabbitmq.com/configure.html" target="_blank" rel="noopener">https://www.rabbitmq.com/configure.html</a></p></blockquote><p>​当RabbitMQ警告时，即内存或者磁盘爆红，所有队列会进入阻塞状态，RabbitMQ无法正常运行。当出现警告的时候，可以通过配置去修改和调整</p><p><img src="https://img-blog.csdnimg.cn/5598d4d9fbab42da8ba755c97fbbde6a.png#pic_center" alt="请添加图片描述"></p><h2 id="2、RabbitMQ的内存控制">2、RabbitMQ的内存控制</h2><p><strong>1、命令的方式</strong></p><p>​fraction/value 为内存阈值。默认情况是：0.4/2GB，代表的含义是：当RabbitMQ的内存超过40%时，就会产生警告并且阻塞所有生产者的连接。通过此命令修改阈值在Broker重启以后将会失效，通过修改配置文件方式设置的阈值则不会随着重启而消失，但修改了配置文件一样要重启broker才会生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_vm_memory_high_watermark &lt;fraction&gt;</span><br><span class="line"><span class="comment">#绝对内存大小</span></span><br><span class="line">rabbitmqctl set_vm_memory_high_watermark absolute 50MB</span><br><span class="line"><span class="comment">#相对内存大小</span></span><br><span class="line">rabbitmqctl set_vm_memory_high_watermark 0.4</span><br></pre></td></tr></table></figure><p><strong>2、配置文件方式 rabbitmq.conf</strong></p><p>​当前配置文件：<code>/etc/rabbitmq/rabbitmq.conf</code>（若不存在可自行创建）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认,但是配置完需要重启</span></span><br><span class="line"><span class="comment">#vm_memory_high_watermark.relative = 0.4</span></span><br><span class="line"><span class="comment"># 使用relative相对值进行设置fraction,建议取值在04~0.7之间，不建议超过0.7</span></span><br><span class="line">vm_memory_high_watermark.relative = 0.6</span><br><span class="line"><span class="comment"># 使用absolute的绝对值的方式，但是是KB,MB,GB对应的命令如下</span></span><br><span class="line"><span class="comment">#vm_memory_high_watermark.absolute = 2GB</span></span><br></pre></td></tr></table></figure><h2 id="3、RabbitMQ的内存换页">3、RabbitMQ的内存换页</h2><p>​在某个Broker节点及内存阻塞生产者之前，它会尝试将队列中的消息换页到磁盘以释放内存空间，持久化和非持久化的消息都会写入磁盘中，其中持久化的消息本身就在磁盘中有一个副本，所以在转移的过程中持久化的消息会先从内存中清除掉。</p><blockquote><p>默认情况下，内存到达的阈值是50%时就会换页处理。<br>也就是说，在默认情况下该内存的阈值是0.4的情况下，当内存超过0.40.5=0.2时，会进行换页动作</p></blockquote><p>​可以通过设置 <code>vm_memory_high_watermark_paging_ratio</code> 来进行调整</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm_memory_high_watermark.relative = 0.4</span><br><span class="line"><span class="comment">#设置小于1的值，大于1就没必要</span></span><br><span class="line">vm_memory_high_watermark_paging_ratio = 0.7</span><br></pre></td></tr></table></figure><h2 id="4、RabbitMQ的磁盘预警">4、RabbitMQ的磁盘预警</h2><p>​当磁盘的剩余空间低于确定的阈值时，RabbitMQ同样会阻塞生产者，这样可以避免因非持久化的消息持续换页而耗尽磁盘空间导致服务器崩溃。</p><blockquote><p>默认情况下：磁盘预警为50MB的时候会进行预警。表示当前磁盘空间第50MB的时候会阻塞生产者并且停止内存消息换页到磁盘的过程。<br>这个阈值可以减小，但是不能完全的消除因磁盘耗尽而导致崩溃的可能性。比如在两次磁盘空间的检查空隙内，第一次检查是：60MB ，第二检查可能就是1MB,就会出现警告。</p></blockquote><p>​通过命令方式修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_disk_free_limit  &lt;disk_limit&gt;</span><br><span class="line">rabbitmqctl set_disk_free_limit memory_limit  &lt;fraction&gt;</span><br><span class="line"><span class="comment">#------------------------------</span></span><br><span class="line"><span class="comment">#disk_limit：固定单位 KB MB GB</span></span><br><span class="line"><span class="comment">#fraction ：是相对阈值，建议范围在:1.0~2.0之间。（相对于内存）</span></span><br></pre></td></tr></table></figure><p>​通过配置文件配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">disk_free_limit.relative = 3.0</span><br><span class="line">disk_free_limit.absolute = 50mb</span><br></pre></td></tr></table></figure><h1>六、RabbitMQ高级</h1><h2 id="1、消息队列高可用和高可靠">1、消息队列高可用和高可靠</h2><blockquote><p>所谓高可用：是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力。<br>当业务量增加时，请求也过大，一台消息中间件服务器的会触及硬件（CPU,内存，磁盘）的极限，一台消息服务器你已经无法满足业务的需求，所以消息中间件必须支持集群部署。来达到高可用的目的。</p><p>所谓高可用是指：是指系统可以无故障低持续运行，比如一个系统突然崩溃，报错，异常等等并不影响线上业务的正常运行，出错的几率极低，就称之为：高可靠。</p></blockquote><h3 id="1、-Master-slave主从共享数据模式">1、 Master-slave主从共享数据模式</h3><p>​生产者讲消费发送到Master节点，所有的都连接这个消息队列共享这块数据区域，Master节点负责写入，一旦Master挂掉，slave节点继续服务。从而形成高可用，</p><p><img src="https://img-blog.csdnimg.cn/2990a85ee6f54f6bbfcb139f4710a7ae.png#pic_center" alt="请添加图片描述"></p><h3 id="2、Master-slave主从同步模式">2、Master- slave主从同步模式</h3><p>​写入消息在Master主节点上，但是主节点会同步数据到slave节点形成副本，和zookeeper或者redis主从机制很类同。这样可以达到负载均衡的效果，如果消费者有多个这样就可以去不同的节点就行消费，以为消息的拷贝和同步会暂用很大的带宽和网络资源。在后续的rabbtmq中会有使用。</p><p><img src="https://img-blog.csdnimg.cn/46b0d2d3a8af41a3a01cc30e9692a32a.png#pic_center" alt="请添加图片描述"></p><h3 id="3、多主集群同步部署模式">3、多主集群同步部署模式</h3><p>​其写入可以往任意节点去写入。</p><p><img src="https://img-blog.csdnimg.cn/312430076fa94e74967831ee746b7870.png#pic_center" alt="请添加图片描述"></p><h3 id="4、多主集群转发部署模式">4、多主集群转发部署模式</h3><p>​如果插入的数据是broker-1中，元数据信息会存储数据的相关描述和记录存放的位置（队列）。它会对描述信息也就是元数据信息就行同步，如果消费者在broker-2中进行消费，发现自己几点没有对应的消息，可以从对应的元数据信息中去查询，然后返回对应的消息信息，场景：比如买火车票或者黄牛买演唱会门票，比如第一个黄牛有顾客说要买的演唱会门票，但是没有但是他会去联系其他的黄牛询问，如果有就返回。</p><p><img src="https://img-blog.csdnimg.cn/dbcb3f8c9cf0464a8eadb3f3f34bd447.png#pic_center" alt="请添加图片描述"></p><h3 id="5、Master-slave与Breoker-cluster组合的方案">5、Master-slave与Breoker-cluster组合的方案</h3><p>​实现多主多从的热备机制来完成消息的高可用以及数据的热备机制，在生产规模达到一定的阶段的时候，这种使用的频率比较高。</p><p><img src="https://img-blog.csdnimg.cn/1a2f62cc3d6f47f38bf09c7a1acac367.png#pic_center" alt="请添加图片描述"></p><h2 id="2、集群搭建">2、集群搭建</h2><h3 id="1、概述-v7">1、概述</h3><blockquote><p>RabbitMQ这款消息队列中间件产品本身是基于Erlang编写，Erlang语言天生具备分布式特性（通过同步Erlang集群各节点的magic cookie来实现）。因此，RabbitMQ天然支持Clustering。这使得RabbitMQ本身不需要像ActiveMQ、Kafka那样通过ZooKeeper分别来实现HA方案和保存集群的元数据。集群是保证可靠性的一种方式，同时可以通过水平扩展以达到增加消息吞吐量能力的目的。<br>官网参考：<a href="https://www.rabbitmq.com/clustering.html" target="_blank" rel="noopener">https://www.rabbitmq.com/clustering.html</a></p></blockquote><h3 id="2、环境准备">2、环境准备</h3><p>​保证RabbitMQ是可执行的，并把单机版的RabbitMQ服务停止，后台看不到RabbitMQ的进程为止。这里我在一台主机发布多个RabbitMQ，用的是 Master-slave主从共享数据模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看进程</span></span><br><span class="line">ps aux|grep rabbitmq</span><br><span class="line">systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><h3 id="3、单机多实例搭建">3、单机多实例搭建</h3><p>​<strong>分别启动两个节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit-1 rabbitmq-server start &amp;</span><br><span class="line">RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit-1 rabbitmq-server -detached</span><br><span class="line"><span class="comment">#web管理插件端口占用,所以还要指定其web插件占用的端口号</span></span><br><span class="line">sudo RABBITMQ_NODE_PORT=5673 RABBITMQ_SERVER_START_ARGS=<span class="string">"-rabbitmq_management listener [&#123;port,15673&#125;]"</span> RABBITMQ_NODENAME=rabbit-2 rabbitmq-server start &amp;</span><br><span class="line">RABBITMQ_NODE_PORT=5673 RABBITMQ_SERVER_START_ARGS=<span class="string">"-rabbitmq_management listener [&#123;port,15673&#125;]"</span> RABBITMQ_NODENAME=rabbit-2 rabbitmq-server -detached</span><br><span class="line"><span class="comment">#验证是否启动</span></span><br><span class="line">ps aux|grep rabbitmq</span><br></pre></td></tr></table></figure><p>​<strong>rabbit-1操作作为主节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止应用</span></span><br><span class="line">sudo rabbitmqctl -n rabbit-1 stop_app</span><br><span class="line"><span class="comment">#目的是清除节点上的历史数据（如果不清除，无法将节点加入到集群）</span></span><br><span class="line">sudo rabbitmqctl -n rabbit-1 reset</span><br><span class="line"><span class="comment">#启动应用</span></span><br><span class="line">sudo rabbitmqctl -n rabbit-1 start_app</span><br></pre></td></tr></table></figure><p>​<strong>rabbit2操作为从节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止应用</span></span><br><span class="line">sudo rabbitmqctl -n rabbit-2 stop_app</span><br><span class="line"><span class="comment"># 目的是清除节点上的历史数据（如果不清除，无法将节点加入到集群）</span></span><br><span class="line">sudo rabbitmqctl -n rabbit-2 reset</span><br><span class="line"><span class="comment"># 将rabbit2节点加入到rabbit1（主节点）集群当中(Server-node服务器的主机名,需要根据自己情况替换)</span></span><br><span class="line">sudo rabbitmqctl -n rabbit-2 join_cluster rabbit-1@Server-node</span><br><span class="line">rabbitmqctl -n rabbit-2 forget_cluster_node rabbit-1@Server-node</span><br><span class="line"><span class="comment"># 启动应用</span></span><br><span class="line">sudo rabbitmqctl -n rabbit-2 start_app</span><br></pre></td></tr></table></figure><p>​<strong>验证集群状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl cluster_status -n rabbit-1</span><br><span class="line"><span class="comment">#设置web界面</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1e7c5e38450645d4a49b37515e1e05cd.png#pic_center" alt="请添加图片描述"></p><h3 id="4、其他-v2">4、其他</h3><p>​如果采用多机部署方式，需读取其中一个节点的cookie, 并复制到其他节点（节点之间通过cookie确定相互是否可通信）。cookie存放在<code>/var/lib/rabbitmq/.erlang.cookie</code>。<br>​例如：主机名分别为rabbit-1、rabbit-2<br>​1、逐个启动各节点<br>​2、配置各节点的hosts文件( vim /etc/hosts)或者加入主节点的时候采用ip<br>​ ip1：rabbit-1<br>​ ip2：rabbit-2<br>​其它步骤雷同单机部署方式，另外对于集群来说，springboot的yml配置需要更改为集群模式连接</p><h2 id="3、下单配送分布式高可用实战">3、下单配送分布式高可用实战</h2><p><img src="https://img-blog.csdnimg.cn/d6e6e8bd751e42209d24d4ecb955527d.png#pic_center" alt="请添加图片描述"></p><h2 id="4、其他配置详解">4、其他配置详解</h2><h3 id="1、application-yml详解">1、application.yml详解</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">addresses:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6605,127.0.0.1:6606,127.0.0.1:6705</span> <span class="comment">#指定client连接到的server的地址，多个以逗号分隔(优先取addresses，然后再取host)</span></span><br><span class="line">  <span class="comment">#    port:</span></span><br><span class="line">  <span class="comment">##集群配置 addresses之间用逗号隔开</span></span><br><span class="line">  <span class="comment"># addresses: ip:port,ip:port</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">username:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 连接到rabbitMQ的vhost</span></span><br><span class="line">  <span class="attr">requested-heartbeat:</span> <span class="comment">#指定心跳超时，单位秒，0为不指定；默认60s</span></span><br><span class="line">  <span class="attr">publisher-confirms:</span> <span class="comment">#是否启用 发布确认</span></span><br><span class="line">  <span class="attr">publisher-reurns:</span> <span class="comment"># 是否启用发布返回</span></span><br><span class="line">  <span class="attr">connection-timeout:</span> <span class="comment">#连接超时，单位毫秒，0表示无穷大，不超时</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">channel.size:</span> <span class="comment"># 缓存中保持的channel数量</span></span><br><span class="line">    <span class="attr">channel.checkout-timeout:</span> <span class="comment"># 当缓存数量被设置时，从缓存中获取一个channel的超时时间，单位毫秒；如果为0，则总是创建一个新channel</span></span><br><span class="line">    <span class="attr">connection.size:</span> <span class="comment"># 缓存的连接数，只有是CONNECTION模式时生效</span></span><br><span class="line">    <span class="attr">connection.mode:</span> <span class="comment"># 连接工厂缓存模式：CHANNEL 和 CONNECTION</span></span><br><span class="line">  <span class="attr">listener:</span></span><br><span class="line">    <span class="attr">simple.auto-startup:</span> <span class="comment"># 是否启动时自动启动容器</span></span><br><span class="line">    <span class="attr">simple.acknowledge-mode:</span> <span class="comment"># 表示消息确认方式，其有三种配置方式，分别是none、manual和auto；默认auto</span></span><br><span class="line">    <span class="attr">simple.concurrency:</span> <span class="comment"># 最小的消费者数量</span></span><br><span class="line">    <span class="attr">simple.max-concurrency:</span> <span class="comment"># 最大的消费者数量</span></span><br><span class="line">    <span class="attr">simple.prefetch:</span> <span class="comment"># 指定一个请求能处理多少个消息，如果有事务的话，必须大于等于transaction数量.</span></span><br><span class="line">    <span class="attr">simple.transaction-size:</span> <span class="comment"># 指定一个事务处理的消息数量，最好是小于等于prefetch的数量.</span></span><br><span class="line">    <span class="attr">simple.default-requeue-rejected:</span> <span class="comment"># 决定被拒绝的消息是否重新入队；默认是true（与参数acknowledge-mode有关系）</span></span><br><span class="line">    <span class="attr">simple.idle-event-interval:</span> <span class="comment"># 多少长时间发布空闲容器时间，单位毫秒</span></span><br><span class="line">    <span class="attr">simple.retry.enabled:</span> <span class="comment"># 监听重试是否可用</span></span><br><span class="line">    <span class="attr">simple.retry.max-attempts:</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">    <span class="attr">simple.retry.initial-interval:</span> <span class="comment"># 第一次和第二次尝试发布或传递消息之间的间隔</span></span><br><span class="line">    <span class="attr">simple.retry.multiplier:</span> <span class="comment"># 应用于上一重试间隔的乘数</span></span><br><span class="line">    <span class="attr">simple.retry.max-interval:</span> <span class="comment"># 最大重试时间间隔</span></span><br><span class="line">    <span class="attr">simple.retry.stateless:</span> <span class="comment"># 重试是有状态or无状态</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">mandatory:</span> <span class="comment"># 启用强制信息；默认false</span></span><br><span class="line">    <span class="attr">receive-timeout:</span> <span class="comment"># receive() 操作的超时时间</span></span><br><span class="line">    <span class="attr">reply-timeout:</span> <span class="comment"># sendAndReceive() 操作的超时时间</span></span><br><span class="line">    <span class="attr">retry.enabled:</span> <span class="comment"># 发送重试是否可用</span></span><br><span class="line">    <span class="attr">retry.max-attempts:</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">    <span class="attr">retry.initial-interval:</span> <span class="comment"># 第一次和第二次尝试发布或传递消息之间的间隔</span></span><br><span class="line">    <span class="attr">retry.multiplier:</span> <span class="comment"># 应用于上一重试间隔的乘数</span></span><br><span class="line">    <span class="attr">retry.max-interval:</span> <span class="comment">#最大重试时间间隔</span></span><br></pre></td></tr></table></figure><p>对于发送方而言，需要做以下配置：</p><ul><li><p>配置CachingConnectionFactory</p></li><li><p>配置Exchange/Queue/Binding</p></li><li><p>配置RabbitAdmin创建上一步的Exchange/Queue/Binding</p></li><li><p>配置RabbitTemplate用于发送消息，RabbitTemplate通过CachingConnectionFactory获取到Connection，然后想指定Exchange发送</p></li></ul><p>对于消费方而言，需要做以下配置：</p><ul><li>配置CachingConnectionFactory</li><li>配置Exchange/Queue/Binding</li><li>配置RabbitAdmin创建上一步的Exchange/Queue/Binding</li><li>配置RabbitListenerContainerFactory</li><li>配置<a href="https://github.com/RabbitListener" target="_blank" rel="noopener">@RabbitListener</a>/<a href="https://github.com/RabbitHandler" target="_blank" rel="noopener">@RabbitHandler</a>用于接收消息</li></ul><p><strong>默认情况下主要的配置</strong></p><p><img src="https://img-blog.csdnimg.cn/2cf8c010ac6a4292aa7d83068b5e0fa8.png#pic_center" alt="请添加图片描述"></p><p><strong>Spring AMQP的主要对象</strong></p><p><img src="https://img-blog.csdnimg.cn/e49acb62ac5e4d68867b20c962dde14b.png#pic_center" alt="请添加图片描述"></p><h3 id="2、通过java-bean方式配置">2、通过java bean方式配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AcknowledgeMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CachingConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitAdmin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.RabbitListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(RabbitConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RECEIVEDLXEXCHANGE=<span class="string">"spring-ex"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RECEIVEDLXQUEUE=<span class="string">"spring-qu1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RECEIVEDLXROUTINGKEY=<span class="string">"aa"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECTEXCHANGE=<span class="string">"spring-ex"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MDMQUEUE=<span class="string">"mdmQueue"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPICEXCHANGE=<span class="string">"spring-top"</span>;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.addresses&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String hosts;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.virtual-host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String virtualHost;</span><br><span class="line"> <span class="comment">/*   @Value("$&#123;rabbit.channelCacheSize&#125;")</span></span><br><span class="line"><span class="comment">    private int channelCacheSize;*/</span></span><br><span class="line"><span class="comment">//    @Value("$&#123;rabbit.port&#125;")</span></span><br><span class="line"><span class="comment">//    private int port;</span></span><br><span class="line"><span class="comment">/*    @Autowired</span></span><br><span class="line"><span class="comment">    private ConfirmCallBackListener confirmCallBackListener;</span></span><br><span class="line"><span class="comment">    @Autowired</span></span><br><span class="line"><span class="comment">    private ReturnCallBackListener returnCallBackListener;*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CachingConnectionFactory cachingConnectionFactory = <span class="keyword">new</span> CachingConnectionFactory();</span><br><span class="line">        cachingConnectionFactory.setAddresses(hosts);</span><br><span class="line">        cachingConnectionFactory.setUsername(userName);</span><br><span class="line">        cachingConnectionFactory.setPassword(password);</span><br><span class="line"><span class="comment">//        cachingConnectionFactory.setChannelCacheSize(channelCacheSize);</span></span><br><span class="line">        <span class="comment">//cachingConnectionFactory.setPort(port);</span></span><br><span class="line">        cachingConnectionFactory.setVirtualHost(virtualHost);</span><br><span class="line">        <span class="comment">//设置连接工厂缓存模式：</span></span><br><span class="line">        cachingConnectionFactory.setCacheMode(CachingConnectionFactory.CacheMode.CONNECTION);</span><br><span class="line">        <span class="comment">//缓存连接数</span></span><br><span class="line">        cachingConnectionFactory.setConnectionCacheSize(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//设置连接限制</span></span><br><span class="line">        cachingConnectionFactory.setConnectionLimit(<span class="number">6</span>);</span><br><span class="line">        logger.info(<span class="string">"连接工厂设置完成，连接地址&#123;&#125;"</span>+hosts);</span><br><span class="line">        logger.info(<span class="string">"连接工厂设置完成，连接用户&#123;&#125;"</span>+userName);</span><br><span class="line">        <span class="keyword">return</span> cachingConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitAdmin <span class="title">rabbitAdmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RabbitAdmin rabbitAdmin = <span class="keyword">new</span> RabbitAdmin(connectionFactory());</span><br><span class="line">        rabbitAdmin.setAutoStartup(<span class="keyword">true</span>);</span><br><span class="line">        rabbitAdmin.setIgnoreDeclarationExceptions(<span class="keyword">true</span>);</span><br><span class="line">        rabbitAdmin.declareBinding(bindingMdmQueue());</span><br><span class="line">        <span class="comment">//声明topic交换器</span></span><br><span class="line">        rabbitAdmin.declareExchange(directExchange());</span><br><span class="line">        logger.info(<span class="string">"管理员设置完成"</span>);</span><br><span class="line">        <span class="keyword">return</span> rabbitAdmin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitListenerContainerFactory <span class="title">listenerContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory());</span><br><span class="line">        factory.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">        <span class="comment">//最小消费者数量</span></span><br><span class="line">        factory.setConcurrentConsumers(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//最大消费者数量</span></span><br><span class="line">        factory.setMaxConcurrentConsumers(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//一个请求最大处理的消息数量</span></span><br><span class="line">        factory.setPrefetchCount(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//默认不排队</span></span><br><span class="line">        factory.setDefaultRequeueRejected(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//手动确认接收到了消息</span></span><br><span class="line">        factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">        logger.info(<span class="string">"监听者设置完成"</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(DIRECTEXCHANGE,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">mdmQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 绑定该队列到私信交换机</span></span><br><span class="line">        arguments.put(<span class="string">"x-dead-letter-exchange"</span>,RECEIVEDLXEXCHANGE);</span><br><span class="line">        arguments.put(<span class="string">"x-dead-letter-routing-key"</span>,RECEIVEDLXROUTINGKEY);</span><br><span class="line">        logger.info(<span class="string">"队列交换机绑定完成"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(RECEIVEDLXQUEUE,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingMdmQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(mdmQueue()).to(directExchange()).with(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(connectionFactory());</span><br><span class="line">        rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//发布确认</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.setConfirmCallback(confirmCallBackListener);</span></span><br><span class="line">        <span class="comment">// 启用发布返回</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.setReturnCallback(returnCallBackListener);</span></span><br><span class="line">        logger.info(<span class="string">"连接模板设置完成"</span>);</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/*  @Bean</span></span><br><span class="line"><span class="comment">    public TopicExchange topicExchange()&#123;</span></span><br><span class="line"><span class="comment">        return new TopicExchange(TOPICEXCHANGE,true,false);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DirectExchange</span></span><br><span class="line"><span class="comment">     */</span><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public DirectExchange dlxExchange() &#123;</span></span><br><span class="line"><span class="comment">        return new DirectExchange(RECEIVEDLXEXCHANGE,true,false);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">     * @return Queue</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public Queue dlxQueue() &#123;</span></span><br><span class="line"><span class="comment">        return new Queue(RECEIVEDLXQUEUE,true);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @return Binding</span></span><br><span class="line"><span class="comment">     */</span><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public Binding binding() &#123;</span></span><br><span class="line"><span class="comment">        return BindingBuilder.bind(dlxQueue()).to(dlxExchange()).with(RECEIVEDLXROUTINGKEY);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、概述&lt;/h1&gt;
&lt;h2 id=&quot;1、中间件概述&quot;&gt;1、中间件概述&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;中间件是介于应用系统和&lt;a href=&quot;https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6/215962&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;系统软件&lt;/a&gt;之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/46fec18887ec4fd7b76b32e6b8eb8eef.png#pic_center&quot; alt=&quot;请添加图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    <category term="中间件" scheme="https://www.shawn22.xyz/categories/Java/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="RabbitMQ" scheme="https://www.shawn22.xyz/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>C语言回调函数与日志系统</title>
    <link href="https://www.shawn22.xyz/posts/89470054.html"/>
    <id>https://www.shawn22.xyz/posts/89470054.html</id>
    <published>2021-10-14T12:52:33.000Z</published>
    <updated>2021-10-24T03:28:16.482Z</updated>
    
    <content type="html"><![CDATA[<h1>一、C语言回调函数</h1><h2 id="1、回调函数概念">1、回调函数概念</h2><p>​回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e66d68f96431c515096148dd98a06363.png#pic_center" alt="回调函数"></p><a id="more"></a><p>简单点来说，就是主函数 <code>Main program</code> 调用函数 <code>Library function</code> 的时候，函数<code>Main program</code> 通过参数给函数 <code>Library function</code>传递了另外一个函数<code>Callback function</code> 的指针。在函数 <code>Library function</code> 执行的过程中，函数<code>Library function</code> 调用了函数<code>Callback function</code>，这个动作就叫做回调（Callback），而先被当做指针传入、后面又被回调的函数<code>Callback function</code>就是回调函数。</p><h2 id="2、回调函数的作用">2、回调函数的作用</h2><p>​回调似乎只是函数间的调用，和普通函数调用没啥区别，但仔细一看，可以发现两者之间的一个关键的不同：在回调中，主程序把回调函数像参数一样传入库函数。这样一来，只要我们改变传进库函数的参数，就可以实现不同的功能，并且丝毫不需要修改库函数的实现，实现解耦。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;softwareLib.h&gt; // 包含Library Function所在读得Software library库的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Callback Function</span></span><br><span class="line"><span class="comment">// 只需要编写需要的回调函数即可</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Callback</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> <span class="comment">// Main program</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    Library(Callback);</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、回调函数的简单使用">3、回调函数的简单使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Callback_1</span><span class="params">()</span> <span class="comment">// Callback Function 1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, this is Callback_1 "</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Callback_2</span><span class="params">()</span> <span class="comment">// Callback Function 2</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, this is Callback_2 "</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//形参是回调函数的指针，返回值是回调函数的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Handle</span><span class="params">(<span class="keyword">int</span> (*Callback)())</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Entering Handle Function. \n"</span>);</span><br><span class="line">    <span class="comment">//运行回调函数</span></span><br><span class="line">    Callback();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Leaving Handle Function. \n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Entering Main Function. \n"</span>);</span><br><span class="line">    Handle(Callback_1);</span><br><span class="line">    Handle(Callback_2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Leaving Main Function. \n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、回调函数进阶版">4、回调函数进阶版</h2><p>​四则运算的简单回调函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************</span></span><br><span class="line"><span class="comment"> * 函数指针结构体，定义四个函数指针分别指向这四个函数</span></span><br><span class="line"><span class="comment"> ***************************************/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">OP</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> (*p_add)(<span class="keyword">float</span>, <span class="keyword">float</span>); </span><br><span class="line">    <span class="keyword">float</span> (*p_sub)(<span class="keyword">float</span>, <span class="keyword">float</span>); </span><br><span class="line">    <span class="keyword">float</span> (*p_mul)(<span class="keyword">float</span>, <span class="keyword">float</span>); </span><br><span class="line">    <span class="keyword">float</span> (*p_div)(<span class="keyword">float</span>, <span class="keyword">float</span>); </span><br><span class="line">&#125; OP; </span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************</span></span><br><span class="line"><span class="comment"> * 加减乘除函数</span></span><br><span class="line"><span class="comment"> ***************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">ADD</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">SUB</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">MUL</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">DIV</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************</span></span><br><span class="line"><span class="comment"> * 初始化函数指针</span></span><br><span class="line"><span class="comment"> ***************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_op</span><span class="params">(OP *op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    op-&gt;p_add = ADD;</span><br><span class="line">    op-&gt;p_sub = SUB;</span><br><span class="line">    op-&gt;p_mul = &amp;MUL;</span><br><span class="line">    op-&gt;p_div = &amp;DIV;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************</span></span><br><span class="line"><span class="comment"> * 当做库函数，以函数指针为参数，通过它来调用不同的函数</span></span><br><span class="line"><span class="comment"> ***************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add_sub_mul_div</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b, <span class="keyword">float</span> (*op_func)(<span class="keyword">float</span>, <span class="keyword">float</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*op_func)(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    OP *op = (OP *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OP)); </span><br><span class="line">    init_op(op);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 直接使用函数指针调用函数 */</span> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ADD = %f, SUB = %f, MUL = %f, DIV = %f\n"</span>, (op-&gt;p_add)(<span class="number">1.3</span>, <span class="number">2.2</span>), (*op-&gt;p_sub)(<span class="number">1.3</span>, <span class="number">2.2</span>), </span><br><span class="line">            (op-&gt;p_mul)(<span class="number">1.3</span>, <span class="number">2.2</span>), (*op-&gt;p_div)(<span class="number">1.3</span>, <span class="number">2.2</span>));</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* 调用回调函数 */</span> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ADD = %f, SUB = %f, MUL = %f, DIV = %f\n"</span>, </span><br><span class="line">            add_sub_mul_div(<span class="number">1.3</span>, <span class="number">2.2</span>, ADD), </span><br><span class="line">            add_sub_mul_div(<span class="number">1.3</span>, <span class="number">2.2</span>, SUB), </span><br><span class="line">            add_sub_mul_div(<span class="number">1.3</span>, <span class="number">2.2</span>, MUL), </span><br><span class="line">            add_sub_mul_div(<span class="number">1.3</span>, <span class="number">2.2</span>, DIV));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>二、C语言简单日志系统</h1><blockquote><p>简答的不同等级日志打印底层，可以控制日志输出，打印出具体的行号，函数名等，可以用来当做参考，和spring的日志系统有点像</p></blockquote><p>​新建<code>log.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _EM_LOG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _EM_LOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPEN_LOG 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_LEVEL LOG_DEBUG </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_SAVE 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123; </span><br><span class="line">LOG_DEBUG=<span class="number">0</span>, </span><br><span class="line">LOG_INFO, </span><br><span class="line">LOG_WARN, </span><br><span class="line">LOG_ERROR,</span><br><span class="line">&#125;E_LOGLEVEL; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EM_LOG</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> level, <span class="keyword">const</span> <span class="keyword">char</span> *fun, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">line</span>, <span class="keyword">const</span> <span class="keyword">char</span> *fmt,...)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMLOG(level,fmt...) EM_LOG(level,__FUNCTION__,__LINE__,fmt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>​新建<code>log.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"log.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义不同等级的日志级别</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">EM_LOGLevelGet</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(level==LOG_DEBUG)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"DEBUG"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(level==LOG_INFO)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"INFO"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(level ==LOG_WARN)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"LOG_WARN"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(level ==LOG_ERROR)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"LOG_ERROR"</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"UNKNOW"</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志输出，可以定位行号、方法名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EM_LOG</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> level, <span class="keyword">const</span> <span class="keyword">char</span> *fun, <span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">line</span>, <span class="keyword">const</span> <span class="keyword">char</span> *fmt,...)</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OPEN_LOG </span></span><br><span class="line">va_list arg; </span><br><span class="line">va_start(arg, fmt); </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>+vsnprintf(<span class="literal">NULL</span>,<span class="number">0</span>, fmt, arg)]; </span><br><span class="line">vsnprintf(buf,<span class="keyword">sizeof</span>(buf), fmt, arg); </span><br><span class="line">va_end(arg); </span><br><span class="line"><span class="keyword">if</span>(level&gt;=LOG_LEVEL)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[%s] [%s %d] %s\n"</span>,EM_LOGLevelGet(level),fun,<span class="built_in">line</span>,buf);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">11</span>; </span><br><span class="line">EMLOG(LOG_DEBUG,<span class="string">"app start"</span>); </span><br><span class="line">EMLOG(LOG_INFO,<span class="string">"A=%d %d"</span>,a,b); </span><br><span class="line">EMLOG(LOG_WARN,<span class="string">"app LOG_WARN"</span>); </span><br><span class="line">EMLOG(LOG_ERROR,<span class="string">"app LOG_ERROR"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章:</p><p><a href="https://www.runoob.com/w3cnote/c-callback-function.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/c-callback-function.html</a></p><p><a href="https://segmentfault.com/a/1190000008293902" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008293902</a></p><p><a href="https://www.bilibili.com/video/BV1EB4y1N7iD" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1EB4y1N7iD</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、C语言回调函数&lt;/h1&gt;
&lt;h2 id=&quot;1、回调函数概念&quot;&gt;1、回调函数概念&lt;/h2&gt;
&lt;p&gt;​	回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e66d68f96431c515096148dd98a06363.png#pic_center&quot; alt=&quot;回调函数&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="C" scheme="https://www.shawn22.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>mysqlbinlog简单入门实践</title>
    <link href="https://www.shawn22.xyz/posts/78413d01.html"/>
    <id>https://www.shawn22.xyz/posts/78413d01.html</id>
    <published>2021-10-10T03:17:42.000Z</published>
    <updated>2021-10-13T01:05:54.394Z</updated>
    
    <content type="html"><![CDATA[<h1>一、概述</h1><p>​删库跑路这个词大家看到不会陌生，那万一发生在自己身上怎么办？直接跑？那肯定是不现实的，其实这里有种方法可以恢复误删除的数据，使用binlog可以很轻松的查看你之前的操作，当然前提是打开了这个功能，而且使用了<code>mysqlbinlog </code>，因为 binlog 文件是二进制的。</p><p>​这里也简单记录一下防止自己以后手贱误删操作。</p><p>​环境准备：MySql8.0，navicate15</p><a id="more"></a><h1>二、binlog日志</h1><h2 id="1、binlog介绍与配置">1、binlog介绍与配置</h2><p>​<code>binlog</code> 即 <code>Binary Log</code>，它是二进制文件，用来记录数据库写操作的日志。数据库的 insert、delete、update、create、alter、drop 等写入操作都会被 binlog 记录。因此，数据库的主从数据同步通常也是基于 binlog 完成的。</p><p>​一般情况下，<code>binlog</code>是默认开启的，可以通过脚本查看 binlog 是否开启，也可以查看文件存放地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;LOG_BIN%&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210929204012919.png" alt="image-20210929204012919"></p><p>​如果<code>log_bin</code>参数显示的是<code>OFF</code>说明 binlog 是关闭状态，需要手动开启。开启 binlog 需要修改数据库的<code>my.cnf</code>配置文件，my.cnf文件通常在服务器的<code>/etc</code>目录下。binlog 的日志有三种格式，分别是 STATEMENT、ROW、MIXED。在 mysql5.7.7 版本之前默认使用的是 STATEMENT，之后的版本默认使用的是 ROW。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用binlog并设置binlog日志的存储目录</span></span><br><span class="line"><span class="string">log_bin</span> <span class="string">=</span> <span class="string">/www/server/data/mysql-bin</span></span><br><span class="line"><span class="comment"># 设置binlog索引存储目录</span></span><br><span class="line"><span class="string">log_bin_index</span> <span class="string">=</span> <span class="string">/www/server/data/mysql-bin.index</span></span><br><span class="line"><span class="comment"># 30天之前的日志自动删除</span></span><br><span class="line"><span class="string">expire_logs_days</span> <span class="string">=</span> <span class="number">30</span></span><br><span class="line"><span class="comment"># 设置binlog日志模式，共有3种模式：STATMENT、ROW、MIXED </span></span><br><span class="line"><span class="string">binlog_format</span> <span class="string">=</span> <span class="string">row</span></span><br></pre></td></tr></table></figure><h2 id="2、binlog三种日志格式">2、binlog三种日志格式</h2><ul><li><p><strong>ROW</strong></p><p>binlog 记录的是每一条数据被修改的详细细节。它记录了每条数据修改细节，所以在一些极端情况下也不会出现数据错乱的问题，其中记录的是伪SQL，需要去除注释才能运行。在做数据恢复或主从同步时能很好的保证数据的真实性和一致性，但是磁盘占用会大。</p></li><li><p><strong>STATMENT</strong></p><p>日志中记录的是真正的 sql 语句，可以直接拿到数据库运行。因为记录的是 sql 语句和执行语句时的上下文环境，而不是每一条数据。所以它的日志文件会比 ROW 格式的日志文件小一些。但由于记录的只是 sql 语句和上下文的环境，STATEMENT 格式的日志在进行主从数据同步时会有一些不可预估的情况出现，导致数据错乱。比如 sleep()、last_insert_id() 等函数会出现问题。</p></li><li><p><strong>MIXED</strong></p><p>MIXED 格式是 STATEMENT 和 ROW 的结合，mysql 会根据具体执行的 sql 语句，来选择合适的日志格式进行记录。MIXED 格式下，在执行普通的 sql 语句时会选 STATEMENT 来记录日志，在遇到复杂的语句或函数操作时会选择 ROW 来记录日志。</p></li></ul><h2 id="3、MySql常用查询">3、MySql常用查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#查看数据库时间</span><br><span class="line">SELECT @@log_timestamps;</span><br><span class="line">#查看当前使用的二进制日志</span><br><span class="line">show master status</span><br><span class="line">#查看二进制日志格式</span><br><span class="line">show VARIABLES like &#39;binlog_format&#39;</span><br><span class="line">#查看某个日志中的事件</span><br><span class="line">show binlog events in &#39;mysql-bin.000001&#39;;</span><br><span class="line">#查看某个日志中的事件，从5446开始</span><br><span class="line">show binlog events in &#39;mysql-bin.000001&#39; from 5446 limit 10;</span><br><span class="line">#手动滚动一下二进制日志</span><br><span class="line">flush logs;</span><br><span class="line">#清空日志</span><br><span class="line">reset master;</span><br></pre></td></tr></table></figure><h2 id="4、mysqlbinlog命令介绍">4、mysqlbinlog命令介绍</h2><p>​mysql 数据库的 binlog 文件是二进制的，基本看不懂，使用数据库自带的<code>mysqlbinlog</code>命令可以把二进制文件转换成能看懂的十进制文件。由于数据库的 binlog 文件可能会很大，查看起来会很麻烦，所以<code>mysqlbinlog</code>命令也提供了一些参数可以用来筛选日志。</p><p><strong>「mysqlbinlog 语法」</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#options：可选参数 </span></span><br><span class="line"><span class="comment">#log-files：文件名称</span></span><br><span class="line">mysqlbinlog [options] <span class="built_in">log</span>-files</span><br></pre></td></tr></table></figure><p><strong>「options 的常用值」</strong></p><p><code>-d</code>: 根据数据库的名称筛选日志</p><p><code>-o</code>：跳过前N行日志</p><p><code>-r, --result-fil</code>: 把日志输出到指定文件</p><p><code>--start-datetime</code>: 读取指定时间之后的日志，时间格式：yyyy-MM-dd HH:mm:ss</p><p><code>--stop-datetime</code>: 读取指定时间之前的日志，时间格式：yyyy-MM-dd HH:mm:ss</p><p><code>--start-position</code>: 从指定位置开始读取日志</p><p><code>--stop-position</code>: 读取到指定位置停止</p><p><code>--base64-output</code>：在 row 格式下，显示伪 sql 语句</p><p><code>-v, --verbose</code>：显示伪 sql 语句，-v 可以为 sql 语句添加备注</p><p><strong>「常用写法」</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看 test 数据库的日志</span></span><br><span class="line">mysqlbinlog -d=<span class="built_in">test</span> mysql-bin.000001</span><br><span class="line"><span class="comment">#查看某个时间段内的日志，并解析输出</span></span><br><span class="line">mysqlbinlog -v --start-datetime <span class="string">"2021-10-09 19:30:00"</span> --stop-datetime <span class="string">"2021-10-09 20:50:00"</span> mysql-bin.000001 &gt; temp.log</span><br><span class="line"><span class="comment">#恢复数据，事件的开始位置是 4300，结束位置是 10345</span></span><br><span class="line">mysqlbinlog --start-position 4300 --stop-position 10345 mysql-bin.000001 | mysql -uroot -p123456 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h1>三、实践操作</h1><h2 id="1、数据生成与环境准备">1、数据生成与环境准备</h2><p>​首先<code>flush logs;</code>手动生成一个新的二进制文件，之后新建数据库与存储过程用于生产数据，这里我开启了bin-log已经我的格式是row格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#新建数据库</span><br><span class="line">DROP TABLE IF EXISTS &#96;test_user&#96;;</span><br><span class="line">CREATE TABLE &#96;test_user&#96;  (</span><br><span class="line">  &#96;id&#96; bigint(0) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  &#96;gender&#96; int(0) NULL DEFAULT 0,</span><br><span class="line">  &#96;age&#96; int(0) NULL DEFAULT 0,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#新建存储过程用于产生数据</span><br><span class="line">CREATE DEFINER&#x3D;&#96;root&#96;@&#96;%&#96; PROCEDURE &#96;generation&#96;(IN &#96;startNum&#96; int, IN &#96;endNum&#96; int)</span><br><span class="line">BEGIN</span><br><span class="line">#Routine body goes here...</span><br><span class="line">while startNum &lt;&#x3D; endNum do   </span><br><span class="line">    insert into test_user(username,gender,age) values(startNum,rand()*2 ,RAND()*100);   </span><br><span class="line">    set startNum&#x3D;startNum+1;  </span><br><span class="line">end while;  </span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>​随机产生1w条数据，并进行删除操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#调用存储过程</span><br><span class="line">CALL generation(1,10000);</span><br><span class="line">#当做误删操作</span><br><span class="line">DELETE FROM test_user WHERE age &gt; 60;</span><br></pre></td></tr></table></figure><h2 id="2、数据恢复">2、数据恢复</h2><p>找到二进制文件路径，使用<code>mysqlbinlog</code>工具解析，并把它输出到<code>temp.log</code>文件，若文件过大，可以进行简单的过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog -v mysql-bin.000001 &gt; temp.log</span><br><span class="line">#查看test数据库的数据</span><br><span class="line">mysqlbinlog -v --start-datetime &quot;2021-10-10 09:00:00&quot; --stop-datetime &quot;2021-10-10 09:50:00&quot; mysql-bin.000001 | grep test</span><br></pre></td></tr></table></figure><p>​最后的文件如图所示，可以查看到每一条语句的具体的操作记录，使用工具替换即可复原数据，sql 执行完以后，被误删除的数据就恢复回来了。</p><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20211010102129943.png" alt="image-20211010102129943"></p><h1>四、数据库操作的几点建议</h1><ul><li>研发人员不能直连生产库</li><li>登录生产库使用只读账号</li><li>关闭 autocomit、多人复核</li><li>修改数据之前先备份</li><li>设置数据库定期备份</li></ul><hr><p>参考文章：<br><a href="https://mp.weixin.qq.com/s/SOI4Fh3g1DcYi59BcHpIFg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/SOI4Fh3g1DcYi59BcHpIFg</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、概述&lt;/h1&gt;
&lt;p&gt;​	删库跑路这个词大家看到不会陌生，那万一发生在自己身上怎么办？直接跑？那肯定是不现实的，其实这里有种方法可以恢复误删除的数据，使用binlog可以很轻松的查看你之前的操作，当然前提是打开了这个功能，而且使用了&lt;code&gt;mysqlbinlog &lt;/code&gt;，因为 binlog 文件是二进制的。&lt;/p&gt;
&lt;p&gt;​	这里也简单记录一下防止自己以后手贱误删操作。&lt;/p&gt;
&lt;p&gt;​	环境准备：MySql8.0，navicate15&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="MySql" scheme="https://www.shawn22.xyz/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>ShardingSphere数据库中间件</title>
    <link href="https://www.shawn22.xyz/posts/a31fee08.html"/>
    <id>https://www.shawn22.xyz/posts/a31fee08.html</id>
    <published>2021-09-22T05:20:41.000Z</published>
    <updated>2021-10-13T11:31:39.096Z</updated>
    
    <content type="html"><![CDATA[<h1>一、SharingJdbc简介</h1><h2 id="1、概述">1、概述</h2><blockquote><p>官网：<a href="http://shardingsphere.apache.org/index_zh.html" target="_blank" rel="noopener">http://shardingsphere.apache.org/index_zh.html</a></p><p>官网概述：<a href="https://shardingsphere.apache.org/document/current/cn/overview/" target="_blank" rel="noopener">https://shardingsphere.apache.org/document/current/cn/overview/</a></p></blockquote><p>​Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的数据水平扩展、分布式事务和分布式治理等功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p><a id="more"></a><h2 id="2、Sharding-Jdbc介绍">2、Sharding-Jdbc介绍</h2><p>​shardingjdbc定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><ul><li>适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC。</li><li>支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP 等。</li><li>支持任意实现 JDBC 规范的数据库，目前支持 MySQL，Oracle，SQLServer，PostgreSQL 以及任何遵循 SQL92 标准的数据库。<br><img src="https://img-blog.csdnimg.cn/8c9ff02b32a4454ebb4c46ab8552805b.png" alt="请添加图片描述"></li></ul><h2 id="3、Sharding-Proxy介绍">3、Sharding-Proxy介绍</h2><p><img src="https://img-blog.csdnimg.cn/244d8c6dbf934bbcbd136f1e4724ac03.png" alt="请添加图片描述"><br>定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。</p><h2 id="4、ShardingSphere-Sidecar（TODO）">4、ShardingSphere-Sidecar（TODO）</h2><h2 id="5、三种组件对比">5、三种组件对比</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"><em>ShardingSphere-JDBC</em></th><th style="text-align:left"><em>ShardingSphere-Proxy</em></th><th><em>ShardingSphere-Sidecar</em></th></tr></thead><tbody><tr><td style="text-align:left">数据库</td><td style="text-align:left">任意</td><td style="text-align:left">MySQL/PostgreSQL</td><td>MySQL/PostgreSQL</td></tr><tr><td style="text-align:left">连接消耗数</td><td style="text-align:left">高</td><td style="text-align:left">低</td><td>高</td></tr><tr><td style="text-align:left">异构语言</td><td style="text-align:left">仅 Java</td><td style="text-align:left">任意</td><td>任意</td></tr><tr><td style="text-align:left">性能</td><td style="text-align:left">损耗低</td><td style="text-align:left">损耗略高</td><td>损耗低</td></tr><tr><td style="text-align:left">无中心化</td><td style="text-align:left">是</td><td style="text-align:left">否</td><td>是</td></tr><tr><td style="text-align:left">静态入口</td><td style="text-align:left">无</td><td style="text-align:left">有</td><td>无</td></tr></tbody></table><h2 id="6、ShardingJdbc混合架构">6、ShardingJdbc混合架构</h2><p><img src="https://img-blog.csdnimg.cn/9262a25fb8034c209322915522e5d8f2.png" alt="请添加图片描述"><br>ShardingSphere-JDBC 采用无中心化架构，适用于 Java 开发的高性能的轻量级 OLTP（连接事务处理） 应用；ShardingSphere-Proxy 提供静态入口以及异构语言的支持，适用于 OLAP（连接数据分析） 应用以及对分片数据库进行管理和运维的场景。<br>Apache ShardingSphere 是多接入端共同组成的生态圈。 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合与当前业务的最佳系统架构。</p><h2 id="7、功能列表">7、功能列表</h2><p><strong>数据分片</strong></p><ul><li>分库 &amp; 分表</li><li>读写分离</li><li>分片策略定制化</li><li>无中心化分布式主键</li></ul><p><strong>分布式事务</strong></p><ul><li>标准化事务接口</li><li>XA 强一致事务</li><li>柔性事务</li></ul><p><strong>数据库治理</strong></p><ul><li>分布式治理</li><li>弹性伸缩</li><li>可视化链路追踪</li><li>数据加密</li></ul><h2 id="8、ShardingSphere数据分片内核剖析">8、ShardingSphere数据分片内核剖析</h2><p>​ShardingSphere 的 3 个产品的数据分片主要流程是完全一致的。 核心由 SQL 解析 =&gt; 执行器优化 =&gt; SQL 路由 =&gt; SQL 改写 =&gt; SQL 执行 =&gt; 结果归并的流程组成。</p><p><strong>SQL 解析</strong></p><p>​分为词法解析和语法解析。 先通过词法解析器将 SQL 拆分为一个个不可再分的单词。再使用语法解析器对 SQL 进行理解，并最终提炼出解析上下文。 解析上下文包括表、选择项、排序项、分组项、聚合函数、分页信息、查询条件以及可能需要修改的占位符的标记。</p><p><strong>执行器优化</strong></p><p>​合并和优化分片条件，如 OR 等。</p><p><strong>SQL 路由</strong></p><p>​根据解析上下文匹配用户配置的分片策略，并生成路由路径。目前支持分片路由和广播路由。</p><p><strong>SQL 改写</strong></p><p>​将 SQL 改写为在真实数据库中可以正确执行的语句。SQL 改写分为正确性改写和优化改写。</p><p><strong>SQL 执行</strong></p><p>​通过多线程执行器异步执行。</p><p><strong>结果归并</strong></p><p>​将多个执行结果集归并以便于通过统一的 JDBC 接口输出。结果归并包括流式归并、内存归并和使用装饰者模式的追加归并这几种方式。</p><h1>二、MySql主从复制</h1><h2 id="1、概述-v2">1、概述</h2><blockquote><p>主从复制（也称 AB 复制）允许将来自一个MySQL数据库服务器（主服务器）的数据复制到一个或多个MySQL数据库服务器（从服务器）。其中复制是异步的 从站不需要永久连接以接收来自主站的更新。</p></blockquote><p><strong>优点</strong></p><ul><li>横向扩展解决方案 - 在多个从站之间分配负载以提高性能。在此环境中，所有写入和更新都必须在主服务器上进行。但是，读取可以在一个或多个从设备上进行。该模型可以提高写入性能（因为主设备专用于更新），同时显着提高了越来越多的从设备的读取速度。</li><li>数据安全性 - 因为数据被复制到从站，并且从站可以暂停复制过程，所以可以在从站上运行备份服务而不会破坏相应的主数据。</li><li>分析 - 可以在主服务器上创建实时数据，而信息分析可以在从服务器上进行，而不会影响主服务器的性能。</li><li>远程数据分发 - 您可以使用复制为远程站点创建数据的本地副本，而无需永久访问主服务器。</li></ul><p>对于Mysql环境，本次系统使用了Centos8，Mysql版本为8.0</p><h2 id="2、主从复制原理">2、主从复制原理</h2><p><img src="https://img-blog.csdnimg.cn/b6d32084e41f4e8e9166166ed0007f5e.png" alt="请添加图片描述"><br>主服务器上面的任何修改都会通过自己的 I/O tread(I/O 线程)保存在二进制日志 Binary log 里面。</p><ul><li>从服务器上面也启动一个 I/O thread，通过配置好的用户名和密码, 连接到主服务器上面请求读取二进制日志，然后把读取到的二进制日志写到本地的一个Realy log（中继日志）里面。</li><li>从服务器上面同时开启一个 SQL thread 定时检查 Realy log(这个文件也是二进制的)，如果发现有更新立即把更新的内容在本机的数据库上面执行一遍。<br>每个从服务器都会收到主服务器二进制日志的全部内容的副本。</li><li>从服务器设备负责决定应该执行二进制日志中的哪些语句。<br>除非另行指定，否则主从二进制日志中的所有事件都在从站上执行。<br>如果需要，您可以将从服务器配置为仅处理一些特定数据库或表的事件。</li></ul><p><em>注：作为主服务器角色的数据库服务器必须开启二进制日志</em></p><h2 id="3、Mysql配置">3、Mysql配置</h2><h3 id="1、Master节点配置-etc-my-cnf-master节点执行">1、Master节点配置<code>/etc/my.cnf</code> (master节点执行)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">## 同一局域网内注意要唯一</span></span><br><span class="line">server-id=100  </span><br><span class="line"><span class="comment">## 开启二进制日志功能，可以随便取（关键）</span></span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line"><span class="comment">## 复制过滤：不需要备份的数据库，不输出（mysql库一般不同步）</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></span><br><span class="line">binlog_format=mixed</span><br></pre></td></tr></table></figure><h3 id="2、Slave节点配置-etc-my-cnf-slave节点执行">2、Slave节点配置<code>/etc/my.cnf</code> (slave节点执行)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">## 设置server_id,注意要唯一</span></span><br><span class="line">server-id=102</span><br><span class="line"><span class="comment">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span></span><br><span class="line"><span class="built_in">log</span>-bin=mysql-slave-bin</span><br><span class="line"><span class="comment">##复制过滤：不需要备份的数据库，不输出（mysql库一般不同步）</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="comment">## 如果需要同步函数或者存储过程</span></span><br><span class="line">log_bin_trust_function_creators=<span class="literal">true</span></span><br><span class="line"><span class="comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure><h3 id="3、在master服务器授权slave服务器可以同步权限-master节点执行">3、在master服务器授权slave服务器可以同步权限(master节点执行)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Master上执行</span></span><br><span class="line">mysql -uroot -p(master的密码)</span><br><span class="line"><span class="comment"># 授予slave服务器可以同步master服务</span></span><br><span class="line">CREATE user <span class="string">'root'</span>@<span class="string">'从机ip'</span>  IDENTIFIED WITH mysql_native_password by <span class="string">'从机数据库密码'</span>;</span><br><span class="line">grant replication slave on *.* to  <span class="string">'root'</span>@<span class="string">'从机ip'</span>;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 查看MySQL现在有哪些用户及对应的IP权限(可以不执行，只是一个查看)</span></span><br><span class="line">select user,host from mysql.user;</span><br></pre></td></tr></table></figure><h3 id="4、查询master服务的binlog文件名和位置-master节点执行">4、查询master服务的binlog文件名和位置(master节点执行)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a35d933c41c445af81b2460ce4b58d83.png" alt="请添加图片描述"></p><h3 id="5、slave进行关联master节点-slave节点执行">5、slave进行关联master节点(slave节点执行)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p(slave的密码)</span><br><span class="line"><span class="comment">#这里要保证master_log_file和master_log_pos和主机一致</span></span><br><span class="line">change master to master_host=<span class="string">'主机ip'</span>, master_user=<span class="string">'root'</span>, master_password=<span class="string">'主机数据库密码'</span>, master_port=3306, master_log_file=<span class="string">'mysql-bin.000006'</span>,master_log_pos=1490;</span><br><span class="line"><span class="comment">#开始复制</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="comment">#查看slave状态</span></span><br><span class="line">show slave status\G;</span><br><span class="line"><span class="comment">#停止复制</span></span><br><span class="line">stop slave;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ebf9e23c59014bd8b2237ddcc47eac66.png" alt="请添加图片描述"><br><em>在主从复制操作的时候，不要基于去创建数据库或者相关操作，然后又去删除。若这样可能需要重新绑定主机位置</em></p><h2 id="4、常见错误排查">4、常见错误排查</h2><h3 id="1、Host-‘xxxx’-is-not-allowed-to-connect-to-this-MySQL-server">1、Host ‘xxxx’ is not allowed to connect to this MySQL server</h3><p>​发生该问题一般是想远程连接root权限的数据库，这需要修改修改mysql权限表 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##进入root权限的数据库后查看当前权限</span></span><br><span class="line">use mysql;</span><br><span class="line">select host,user from user;</span><br><span class="line"><span class="comment">##这里%代表全ip开放，正式环境可以选择ip</span></span><br><span class="line">update user <span class="built_in">set</span> host=<span class="string">'%'</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line"><span class="comment">##最后刷新一下权限即可</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="2、主从复制Connecting问题">2、主从复制Connecting问题</h3><p>​使用<code>start slave</code>开启主从复制过程后，如果SlaveIORunning一直是Connecting，则说明主从复制一直处于连接状态，这种情况一般是下面几种原因造成的，我们可以根据 Last_IO_Error提示予以排除。</p><ul><li>网络不通</li><li>检查ip,端口</li><li>密码不对</li><li>检查是否创建用于同步的用户和用户密码是否正确</li><li>pos不对</li><li>检查Master的 Position</li></ul><h3 id="3、MYSQL镜像服务器因错误停止的恢复-Slave-SQL-Running-No">3、MYSQL镜像服务器因错误停止的恢复  Slave_SQL_Running: No</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"><span class="built_in">set</span> global sql_slave_skip_counter=1;</span><br><span class="line">start slave; </span><br><span class="line">show slave status\G ;</span><br></pre></td></tr></table></figure><h3 id="4、从MYSQL服务器Slave-IO-Running-No">4、从MYSQL服务器Slave_IO_Running: No</h3><blockquote><p>造成这类问题的原因一般是在主从复制的时候，基于创建表，然后又去删除和操作了数据表或者表。</p></blockquote><ul><li>master节点执行，获取日志文件和post</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><ul><li>slave节点进行重新绑定</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">'mysql-bin.000006'</span>, MASTER_LOG_POS=1254;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><h1>三、SharingJdbc配置和读写分离</h1><h2 id="1、数据库数据准备">1、数据库数据准备</h2><p><img src="https://img-blog.csdnimg.cn/c8e847b6ce7c4af79717fb59c86dada0.png" alt="请添加图片描述"></p><h2 id="2、实现步骤">2、实现步骤</h2><h3 id="1、新建一个springboot工程">1、新建一个springboot工程</h3><h3 id="2、引入相关sharding依赖、ssm依赖、数据库驱动">2、引入相关sharding依赖、ssm依赖、数据库驱动</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sharding-sphere.version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">sharding-sphere.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖mybatis和mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖sharding--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sharding-sphere.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-core-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sharding-sphere.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖数据源druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、定义配置application-yml">3、定义配置application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="comment"># 参数配置，显示sql</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 配置数据源</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment"># 给每个数据源取别名，下面的ds0,ds1,ds2任意取名字</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1,ds2</span></span><br><span class="line">      <span class="comment"># 给master-ds0每个数据源配置数据库连接信息</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="comment"># 配置druid数据源</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://云服务器ip1:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 配置ds1-slave</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://云服务器ip2:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 配置ds2-slave</span></span><br><span class="line">      <span class="attr">ds2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://云服务器ip3:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># 配置默认数据源ds0</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment"># 默认数据源，主要用于写，注意一定要配置读写分离 ,注意：如果不配置，那么就会把三个节点都当做从slave节点，新增，修改和删除会出错。</span></span><br><span class="line">      <span class="attr">default-data-source-name:</span> <span class="string">ds0</span></span><br><span class="line">    <span class="comment"># 配置数据源的读写分离，但是数据库一定要做主从复制</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 配置主从名称，可以任意取名字</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ms</span></span><br><span class="line">      <span class="comment"># 配置主库master，负责数据的写入</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">ds0</span></span><br><span class="line">      <span class="comment"># 配置从库slave节点</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">ds1,ds2</span></span><br><span class="line">      <span class="comment"># 配置slave节点的负载均衡均衡策略，采用轮询机制</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line"><span class="comment"># 整合mybatis的配置XXXXX</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.shawn.sharingjdbc.entity</span></span><br></pre></td></tr></table></figure><h3 id="4、-定义mapper、controller、entity">4、 定义mapper、controller、entity</h3><p>entity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="comment">// 昵称</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@params</span> [user]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into shawn_order_db(nickname,password,age,sex,birthday) values(#&#123;nickname&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@params</span> [user]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from shawn_order_db"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setNickname(<span class="string">"shawn1"</span>+ <span class="keyword">new</span> Random().nextInt());</span><br><span class="line">        user.setPassword(<span class="string">"1234567"</span>);</span><br><span class="line">        user.setSex(<span class="number">1</span>);</span><br><span class="line">        user.setAge(<span class="number">22</span>);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        user.setBirthday(simpleDateFormat.parse(<span class="string">"1999-02-22"</span>));</span><br><span class="line">        userMapper.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/listuser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">listuser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、Props其他参数配置">5、Props其他参数配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">acceptor.size:</span> <span class="comment"># accept连接的线程数量,默认为cpu核数2倍</span></span><br><span class="line"><span class="attr">executor.size:</span> <span class="comment">#工作线程数量最大，默认值: 无限制</span></span><br><span class="line"><span class="attr">max.connections.size.per.query:</span> <span class="comment"># 每个查询可以打开的最大连接数量,默认为1</span></span><br><span class="line"><span class="attr">check.table.metadata.enabled:</span> <span class="comment">#是否在启动时检查分表元数据一致性，默认值: false</span></span><br><span class="line"><span class="attr">proxy.frontend.flush.threshold:</span> <span class="comment"># proxy的服务时候,对于单个大查询,每多少个网络包返回一次</span></span><br><span class="line"><span class="attr">proxy.transaction.type:</span> <span class="comment"># 默认LOCAL,proxy的事务模型 允许LOCAL,XA,BASE三个值,LOCAL无分布式事务,XA则是采用atomikos实现的分布式事务 BASE目前尚未实现</span></span><br><span class="line"><span class="attr">proxy.opentracing.enabled:</span> <span class="comment"># 是否启用opentracing</span></span><br><span class="line"><span class="attr">proxy.backend.use.nio:</span> <span class="comment"># 是否采用netty的NIO机制连接后端数据库,默认False ,使用epoll机制</span></span><br><span class="line"><span class="attr">proxy.backend.max.connections:</span> <span class="comment"># 使用NIO而非epoll的话,proxy后台连接每个netty客户端允许的最大连接数量(注意不是数据库连接限制) 默认为8</span></span><br><span class="line"><span class="attr">proxy.backend.connection.timeout.seconds:</span> <span class="comment">#使用nio而非epoll的话,proxy后台连接的超时时间,默认60s</span></span><br></pre></td></tr></table></figure><h1>四、SharingJdbc分库和分表</h1><h2 id="1、Mysql分库分表原理">1、Mysql分库分表原理</h2><blockquote><p>官网参考：<a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/usage/sharding/" target="_blank" rel="noopener">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/usage/sharding/</a></p></blockquote><h3 id="1、概述-v3">1、概述</h3><blockquote><p>分库分表目的：解决高并发，和数据量大的问题。</p></blockquote><p>​1、高并发情况下，会造成IO读写频繁，自然就会造成读写缓慢，甚至是宕机。一般单库不要超过2k并发，一个表数据建议不要超过500W。<br>​2、数据量大的问题。主要由于底层索引实现导致，MySQL的索引实现为B+TREE，数据量其他，会导致索引树十分庞大，造成查询缓慢。第二，innodb的最大存储限制64TB。</p><h3 id="2、分库分表">2、分库分表</h3><p>​分库分表又分为水平拆分和垂直拆分</p><p>**水平拆分：**统一个表的数据拆到不同的库不同的表中。可以根据时间、地区、或某个业务键维度，也可以通过hash进行拆分，最后通过路由访问到具体的数据。拆分后的每个表结构保持一致。</p><p>**垂直拆分：**就是把一个有很多字段的表给拆分成多个表，或者是多个库上去。每个库表的结构都不一样，每个库表都包含部分字段。一般来说，可以根据业务维度进行拆分，如订单表可以拆分为订单、订单支持、订单地址、订单商品、订单扩展等表；也可以，根据数据冷热程度拆分，20%的热点字段拆到一个表，80%的冷字段拆到另外一个表(拆分两个表建立1:1关系)。</p><p><img src="https://img-blog.csdnimg.cn/77d336ba4db0480f8b6003e3d9b196ef.png" alt="请添加图片描述"><br>对于数据同步，有全量数据同步(主从复制)和增量数据同步(Canal)两种</p><h2 id="2、实现步骤-v2">2、实现步骤</h2><p>​数据库复制了<code>shawn_order_db</code>表变成<code>shawn_order_db0</code>和<code>shawn_order_db1</code>，对于<code>yml配置文件</code>。配置成功后分库分表、单库分表等操作可以自定义实现。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="comment"># 参数配置，显示sql</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 配置数据源</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment"># 给每个数据源取别名，下面的ds1,ds2,ds3任意取名字</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1,ds2</span></span><br><span class="line">      <span class="comment"># 给master-ds0每个数据源配置数据库连接信息</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="comment"># 配置druid数据源</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://服务器ip1:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 配置ds1-slave</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://服务器ip2:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 配置ds2-slave</span></span><br><span class="line">      <span class="attr">ds2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://服务器ip3:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">maxPoolSize:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">minPoolSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment"># 默认数据源，主要用于写，注意一定要配置读写分离 ,注意：如果不配置，那么就会把三个节点都当做从slave节点，新增，修改和删除会出错。</span></span><br><span class="line">      <span class="attr">default-data-source-name:</span> <span class="string">ds0</span></span><br><span class="line">      <span class="comment"># 配置分表的规则</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="comment"># shawn_order_db 逻辑表名</span></span><br><span class="line">        <span class="attr">shawn_order_db:</span></span><br><span class="line">          <span class="comment"># 数据节点：数据源$-&gt;&#123;0..N&#125;.逻辑表名$-&gt;&#123;0..N&#125;</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;0..1&#125;.shawn_order_db$-&gt;&#123;0..1&#125;</span></span><br><span class="line">          <span class="comment"># 根据需求自己修改</span></span><br><span class="line">          <span class="comment"># actual-data-nodes: ds0.shawn_order_db$-&gt;&#123;0..1&#125;</span></span><br><span class="line">          <span class="comment"># 拆分库策略，也就是什么样子的数据放入放到哪个数据库中。</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">          <span class="comment"># 一般用id类数字</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">sex</span>    <span class="comment"># 分片字段（分片键）</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;sex</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 分片算法表达式</span></span><br><span class="line">          <span class="comment"># 拆分表策略，也就是什么样子的数据放入放到哪个数据表中。</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">age</span>    <span class="comment"># 分片字段（分片键）</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">shawn_order_db$-&gt;&#123;age</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 分片算法表达式</span></span><br></pre></td></tr></table></figure><h2 id="3、其他分片算法策略-了解">3、其他分片算法策略(了解)</h2><ul><li>标准分片 - Standard</li><li>符合分片策略</li><li>hint分片策略</li></ul><h1>五、分布式主键管理</h1><h2 id="1、分布式ID">1、分布式ID</h2><p>​ShardingSphere提供灵活的配置分布式主键生成策略方式。在分片规则配置模块克配置每个表的主键生成策略。默认使用雪花算法。（snowflake）生成64bit的长整型数据。支持两种方式配置</p><ul><li>SNOWFLAKE</li><li>UUID</li></ul><blockquote><p>切记：如果用雪花算法，数据库主键列不能自增长。数据类型是：bigint(20)，在java类中使用long类型，不要用String类型；</p><p>如果用UUID，数据库用varchar，Java类用String，推荐用雪花，性能好</p></blockquote><p>mapper修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样能返回id值，直接控制台输出可以看见，这是Mybatis注解</span></span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into shawn_order_db(nickname,password,age,sex,birthday) values(#&#123;nickname&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)"</span>)</span><br><span class="line"><span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyColumn = <span class="string">"id"</span>,keyProperty = <span class="string">"id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p>yaml配置文件修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在配置文件相应位置添加</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="comment"># shawn_order_db 逻辑表名</span></span><br><span class="line">        <span class="attr">shawn_order_db:</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="comment"># 主键的列明，</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">id</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br></pre></td></tr></table></figure><h2 id="2、Mysql日期实战">2、Mysql日期实战</h2><blockquote><p>按照年月分库分表，比如shawn_user_order_202101、shawn_user_order_202102，这样可以方便按照月份划分表，在运行前需要在数据库先创建好表。</p><p><em>下面配置仅供参考</em></p></blockquote><p>策略类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YearMonthShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title">PreciseShardingAlgorithm</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPLITTER = <span class="string">"_"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSharding</span><span class="params">(Collection availableTargetNames, PreciseShardingValue shardingValue)</span> </span>&#123;</span><br><span class="line">        String tbName = shardingValue.getLogicTableName() + <span class="string">"_"</span> + shardingValue.getValue();</span><br><span class="line">        System.out.println(<span class="string">"Sharding input:"</span> + shardingValue.getValue() + <span class="string">", output:&#123;&#125;"</span> + tbName);</span><br><span class="line">        <span class="keyword">return</span> tbName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类，数据源和之前一样</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="comment"># 配置默认数据源ds0</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment"># 默认数据源，主要用于写，注意一定要配置读写分离 ,注意：如果不配置，那么就会把三个节点都当做从slave节点，新增，修改和删除会出错。</span></span><br><span class="line">      <span class="attr">default-data-source-name:</span> <span class="string">ds0</span></span><br><span class="line">      <span class="comment"># 配置分表的规则</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">shawn_order_db:</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">id</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br><span class="line">          <span class="comment"># 数据节点：数据源$-&gt;&#123;0..N&#125;.逻辑表名$-&gt;&#123;0..N&#125;</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;0..1&#125;.shawn_order_db$-&gt;&#123;0..1&#125;</span></span><br><span class="line">          <span class="comment"># 拆分库策略，也就是什么样子的数据放入放到哪个数据库中。</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">standard:</span></span><br><span class="line">              <span class="attr">shardingColumn:</span> <span class="string">birthday</span></span><br><span class="line">              <span class="attr">preciseAlgorithmClassName:</span> <span class="string">com.shawnn.shardingjdbc.algorithm.BirthdayAlgorithm</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">age</span>    <span class="comment"># 分片字段（分片键）</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">shawn_order_db$-&gt;&#123;age</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 分片算法表达式</span></span><br><span class="line">        <span class="comment">#第二个表</span></span><br><span class="line">        <span class="attr">order_user_db:</span></span><br><span class="line">          <span class="comment"># 数据节点：数据源$-&gt;&#123;0..N&#125;.逻辑表名$-&gt;&#123;0..N&#125;</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds0.order_user_db$-&gt;&#123;0..1&#125;</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">orderid</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br><span class="line">          <span class="comment"># 拆分库策略，也就是什么样子的数据放入放到哪个数据库中。</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">orderid</span>    <span class="comment"># 分片字段（分片键）</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">order_user_db$-&gt;&#123;orderid</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment"># 分片算法表达式</span></span><br><span class="line">        <span class="comment">#第三个表</span></span><br><span class="line">        <span class="attr">shawn_user_order:</span></span><br><span class="line">          <span class="comment"># 数据节点：数据源$-&gt;&#123;0..N&#125;.逻辑表名$-&gt;&#123;0..N&#125;</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds0.shawn_user_order_$-&gt;&#123;2021..2022&#125;$&#123;(1..3).collect&#123;t</span> <span class="string">-&gt;t.toString().padLeft(2,'0')&#125;</span> <span class="string">&#125;</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">orderid</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br><span class="line">          <span class="comment"># 拆分库策略，也就是什么样子的数据放入放到哪个数据库中。</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line"><span class="comment">#            inline:</span></span><br><span class="line"><span class="comment">#              shardingColumn: yearmonth</span></span><br><span class="line"><span class="comment">#              algorithmExpression: shawn_user_order_$-&gt;&#123;yearmonth&#125;</span></span><br><span class="line">            <span class="attr">standard:</span></span><br><span class="line">              <span class="attr">shardingColumn:</span> <span class="string">yearmonth</span></span><br><span class="line">              <span class="attr">preciseAlgorithmClassName:</span> <span class="string">com.shawn.shardingjdbc.algorithm.YearMonthShardingAlgorithm</span></span><br><span class="line"><span class="comment"># 整合mybatis的配置XXXXX</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.shawn.shardingjdbc.entity</span></span><br></pre></td></tr></table></figure><h1>六、SharingJdbc事务管理</h1><h2 id="1、事务概述">1、事务概述</h2><p>​数据库事务需要满足ACID（原子性、一致性、隔离性、持久性）四个特性。</p><ul><li>原子性（Atomicity）指事务作为整体来执行，要么全部执行，要么全不执行。</li><li>一致性（Consistency）指事务应确保数据从一个一致的状态转变为另一个一致的状态。</li><li>隔离性（Isolation）指多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</li><li>持久性（Durability）指已提交的事务修改数据会被持久保存</li></ul><p><strong>两阶段提交</strong><br>XA协议最早的分布式事务模型是由X/Open国际联盟提出的X/Open Distributed Transaction Processing（DTP）模型，简称XA协议。<br>基于XA协议实现的分布式事务对业务侵入很小。 它最大的优势就是对使用方透明，用户可以像使用本地事务一样使用基于XA协议的分布式事务。 XA协议能够严格保障事务ACID特性。严格保障事务ACID特性是一把双刃剑。 事务执行在过程中需要将所需资源全部锁定，它更加适用于执行时间确定的短事务。 对于长事务来说，整个事务进行期间对数据的独占，将导致对热点数据依赖的业务系统并发性能衰退明显。 因此，在高并发的性能至上场景中，基于XA协议的分布式事务并不是最佳选择。</p><p><strong>柔性事务</strong><br>如果将实现了ACID的事务要素的事务称为刚性事务的话，那么基于BASE事务要素的事务则称为柔性事务。 BASE是基本可用、柔性状态和最终一致性这三个要素的缩写。<br>基本可用（Basically Available）保证分布式事务参与方不一定同时在线。柔性状态（Soft state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉。而最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性。<br>在ACID事务中对隔离性的要求很高，在事务执行过程中，必须将所有的资源锁定。 柔性事务的理念则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面。通过放宽对强一致性要求，来换取系统吞吐量的提升。<br><img src="https://img-blog.csdnimg.cn/eb7c2af4449d4dc4bb29b1f79647ed4e.png" alt="请添加图片描述"></p><h2 id="2、简单实现步骤">2、简单实现步骤</h2><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖sharding--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-transaction-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在service层添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加上依赖即可</span></span><br><span class="line">    <span class="meta">@ShardingTransactionType</span>(TransactionType.XA)</span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">int</span> <span class="title">saveUserOrder</span>(<span class="title">User</span> <span class="title">user</span>, <span class="title">Order</span> <span class="title">order</span>) </span>&#123;</span><br><span class="line">        userMapper.addUser(user);</span><br><span class="line">        order.setUserid(user.getId());</span><br><span class="line">        orderMapper.addOrder(order);</span><br><span class="line">        <span class="comment">//int a = 1/0; //测试回滚，统一提交的话，将这行注释掉就行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>七、MySql常用规范</h1><p><strong>基础规范</strong></p><ul><li>表必须有主键，建议使用整型作为主键</li><li>禁止使用外键，表之间的关联性和完整性通过应用层来控制</li><li>表在设计之初，应该考虑到大致的数据级，若表记录小于1000W，尽量使用单表，不建议分表。</li><li>建议将大字段，访问频率低，或者不需要作为筛选条件的字段拆分到拓展表中，（做好表垂直拆分）</li><li>控制单实例表的总数，单个表分表数控制在1024以内。</li></ul><p><strong>列设计规范</strong></p><ul><li>正确区分tinyint、int、bigint的范围</li><li>使用varchar(20)存储手机号，不要使用整数</li><li>使用int存储ipv4 不要使用char(15)</li><li>涉及金额使用decimal/varchar，并制定精度</li><li>不要设计为null的字段，而是用空字符，因为null需要更多的空间，并且使得索引和统计变得更复杂。</li></ul><p><strong>索引规范</strong></p><ul><li>唯一索引使用uniq_[字段名]来命名</li><li>非唯一索引使用idx_[字段名]来命名</li><li>不建议在频繁更新的字段上建立索引</li><li>非必要不要进行JOIN,如果要进行join查询，被join的字段必须类型相同，并建立索引。</li><li>单张表的索引数量建议控制在5个以内，索引过多，不仅会导致插入更新性能下降，还可能导致MYSQL的索引出错和性能下降</li><li>组合索引字段数量不建议超过5个，理解组合索引的最左匹配原则，避免重复建设索引。比如你建立了<br>(x,y,z) 相当于你建立了(x),(x,y),(x,y,z)</li></ul><p><strong>SQL规范</strong></p><ul><li>禁止使用selet <em>，只获取必要字段，select</em> 会增加cpu/i0/内存、带宽的消耗。</li><li>insert 必须指定字段，禁止使用insert into Table values().指定字段插入，在表结果变更时，能保证对应应用程序无影响。</li><li>隐私类型转换会使索引失效，导致全表扫描。（比如：手机号码搜索时未转换成字符串）</li><li>禁止在where后面查询列使用内置函数或者表达式，导致不能命中索引，导致全表扫描</li><li>禁止负向查询（!=,not like ,no in等）以及%开头的模糊查询，造成不能命中索引，导致全表扫描</li><li>避免直接返回大结果集造成内存溢出，可采用分段和游标方式。</li><li>返回结果集时尽量使用limit分页显示。</li><li>尽量在order by/group by的列上创建索引。</li><li>大表扫描尽量放在镜像库上去做</li><li>禁止大表join查询和子查询</li><li>尽量避免数据库内置函数作为查询条件</li><li>应用程序尽量捕获SQL异常</li></ul><p><strong>表的垂直拆分</strong></p><p>垂直拆分：业务模块拆分、商品库，用户库，订单库<br>水平拆分：对表进行水平拆分（也就是我们说的：分表）<br>表进行垂直拆分：表的字段过多，字段使用的频率不一。（可以拆分两个表建立1:1关系）</p><ul><li>将一个属性过多的表，一行数据较大的表，将不同的属性分割到不同的数据库表中。以降低单库表的大小。<br>特点：</li><li>每个表的结构不一致</li><li>每个表的数量都是全量</li><li>表和表之间一定会有一列会进行关联，一般都是主键</li></ul><p>原则：</p><ul><li>将长度较短，访问频率较高的字段放在一个表中，主表</li><li>将长度较长、访问频率比较低的字段放一个表中</li><li>将经常访问字段放一个表中。</li><li>所有表的并集是全量数据。</li></ul><p><strong>如何平滑添加字段</strong></p><p>场景：在开发时，有时需要给表加字段，在大数据量且分表的情况下，怎么样平滑添加。建议125<br>1：直接alter table add column,数据量大时不建议，（会产生写锁）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> ksd_user <span class="keyword">add</span> <span class="keyword">column</span> api_pay_no <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">comment</span> <span class="string">'用户扩展订单号'</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> ksd_user <span class="keyword">add</span> <span class="keyword">column</span> api_pay_no <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> <span class="keyword">comment</span> <span class="string">'用户扩展订单号'</span></span><br></pre></td></tr></table></figure><p>2：提前预留字段（不优雅：造成空间浪费，预留多少很难控制，拓展性差）<br>3：新增一张表，（增加字段），迁移原表数据，在重新命名新表作为原表。<br>4：放入extinfo（无法使用索引）<br>5:  提前设计，使用key/value方法存储，新增字段时 ，直接加一个key就好了（优雅）</p><hr><p>学习参考</p><p><a href="https://www.bilibili.com/video/BV1ei4y1K7dn?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1ei4y1K7dn?p=1</a></p><p><a href="https://shardingsphere.apache.org/" target="_blank" rel="noopener">https://shardingsphere.apache.org/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、SharingJdbc简介&lt;/h1&gt;
&lt;h2 id=&quot;1、概述&quot;&gt;1、概述&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://shardingsphere.apache.org/index_zh.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://shardingsphere.apache.org/index_zh.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网概述：&lt;a href=&quot;https://shardingsphere.apache.org/document/current/cn/overview/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://shardingsphere.apache.org/document/current/cn/overview/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的数据水平扩展、分布式事务和分布式治理等功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="中间件" scheme="https://www.shawn22.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>java反编译JVM指令入门</title>
    <link href="https://www.shawn22.xyz/posts/12cb1ce6.html"/>
    <id>https://www.shawn22.xyz/posts/12cb1ce6.html</id>
    <published>2021-09-16T06:07:03.000Z</published>
    <updated>2021-09-22T04:51:17.531Z</updated>
    
    <content type="html"><![CDATA[<h1>一、概述</h1><blockquote><p>javac 是java语言编程编译器。 全称java compiler。 javac工具读由java语言编写的类和接口的定义，并将它们编译成字节代码的class文件。 javac 可以隐式编译一些没有在命令行中提及的源文件。</p><p>javap是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。</p></blockquote><p>​针对javac和javap相关命令，在已配置好JDK环境变量的终端，使用<code>javac -help</code>和<code>javap -help</code>即可查找</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">用法: javac &lt;options&gt; &lt;<span class="built_in">source</span> files&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -g                         生成所有调试信息</span><br><span class="line">  -g:none                    不生成任何调试信息</span><br><span class="line">  -g:&#123;lines,vars,<span class="built_in">source</span>&#125;     只生成某些调试信息</span><br><span class="line">  -nowarn                    不生成任何警告</span><br><span class="line">  -verbose                   输出有关编译器正在执行的操作的消息</span><br><span class="line">  -deprecation               输出使用已过时的 API 的源位置</span><br><span class="line">  -classpath &lt;路径&gt;            指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -cp &lt;路径&gt;                   指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -sourcepath &lt;路径&gt;           指定查找输入源文件的位置</span><br><span class="line">  -bootclasspath &lt;路径&gt;        覆盖引导类文件的位置</span><br><span class="line">  -extdirs &lt;目录&gt;              覆盖所安装扩展的位置</span><br><span class="line">  -endorseddirs &lt;目录&gt;         覆盖签名的标准路径的位置</span><br><span class="line">  -proc:&#123;none,only&#125;          控制是否执行注释处理和/或编译。</span><br><span class="line">  -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程</span><br><span class="line">  -processorpath &lt;路径&gt;        指定查找注释处理程序的位置</span><br><span class="line">  -parameters                生成元数据以用于方法参数的反射</span><br><span class="line">  -d &lt;目录&gt;                    指定放置生成的类文件的位置</span><br><span class="line">  -s &lt;目录&gt;                    指定放置生成的源文件的位置</span><br><span class="line">  -h &lt;目录&gt;                    指定放置生成的本机标头文件的位置</span><br><span class="line">  -implicit:&#123;none,class&#125;     指定是否为隐式引用文件生成类文件</span><br><span class="line">  -encoding &lt;编码&gt;             指定源文件使用的字符编码</span><br><span class="line">  -<span class="built_in">source</span> &lt;发行版&gt;              提供与指定发行版的源兼容性</span><br><span class="line">  -target &lt;发行版&gt;              生成特定 VM 版本的类文件</span><br><span class="line">  -profile &lt;配置文件&gt;            请确保使用的 API 在指定的配置文件中可用</span><br><span class="line">  -version                   版本信息</span><br><span class="line">  -<span class="built_in">help</span>                      输出标准选项的提要</span><br><span class="line">  -A关键字[=值]                  传递给注释处理程序的选项</span><br><span class="line">  -X                         输出非标准选项的提要</span><br><span class="line">  -J&lt;标记&gt;                     直接将 &lt;标记&gt; 传递给运行时系统</span><br><span class="line">  -Werror                    出现警告时终止编译</span><br><span class="line">  @&lt;文件名&gt;                     从文件读取选项和文件名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -<span class="built_in">help</span>  --<span class="built_in">help</span>  -?        输出此用法消息</span><br><span class="line">  -version                 版本信息</span><br><span class="line">  -v  -verbose             输出附加信息</span><br><span class="line">  -l                       输出行号和本地变量表</span><br><span class="line">  -public                  仅显示公共类和成员</span><br><span class="line">  -protected               显示受保护的/公共类和成员</span><br><span class="line">  -package                 显示程序包/受保护的/公共类</span><br><span class="line">                           和成员 (默认)</span><br><span class="line">  -p  -private             显示所有类和成员</span><br><span class="line">  -c                       对代码进行反汇编</span><br><span class="line">  -s                       输出内部类型签名</span><br><span class="line">  -sysinfo                 显示正在处理的类的</span><br><span class="line">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  -constants               显示最终常量</span><br><span class="line">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">  -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure><h1>二、入门实战</h1><h2 id="1、创建java源程序">1、创建java源程序</h2><p>​新建<code>Hello.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hello hello = <span class="keyword">new</span> Hello();</span><br><span class="line">        hello.test1();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    test2();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;i++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String name = <span class="string">"shawn"</span>;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、反编译JVM指令分析">2、反编译JVM指令分析</h2><p>​在当前目录下打开Cmd，输入<code>javac Hello.java</code>后，成功将源文件编译成Hello.class文件，之后进行反编译，输入命令<code>javap -c Hello.class &gt; Hello.txt</code>将指令结果输出到txt文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"Hello.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0<span class="comment">//从本地变量表中加载索引为0的变量的值，也即this的引用，压入栈</span></span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: aload_0</span><br><span class="line">       <span class="number">5</span>: iconst_0<span class="comment">//将常量int型0推送至栈顶</span></span><br><span class="line">       6: putfield      #2                  // Field count:I，为指定的类的实例域赋值</span><br><span class="line">       <span class="number">9</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #3                  // class Hello,创建一个对象，并将其引用值压入栈顶</span><br><span class="line">       <span class="number">3</span>: dup<span class="comment">//将操作数栈定的数据复制一份，并压入栈，此时栈中有两个引用值</span></span><br><span class="line">       4: invokespecial #4                  // Method "&lt;init&gt;":()V,pop出栈引用值,调用其构造函数，完成对象的初始化</span><br><span class="line">       <span class="number">7</span>: astore_1<span class="comment">//pop出栈引用值，将其（引用）赋值给局部变量表中的变量hello</span></span><br><span class="line">       <span class="number">8</span>: aload_1<span class="comment">//将hello的引用值压入栈，因为hello.test1();调用了hello，这里使用aload_1从局部变量表中获得对应的变量hello的值并压入操作数栈</span></span><br><span class="line">       9: invokevirtual #5                  // Method test1:()V,引用出栈</span><br><span class="line">      <span class="number">12</span>: <span class="keyword">return</span><span class="comment">//整个main方法结束返回</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: iconst_0<span class="comment">//将常量int型0推送至栈顶</span></span><br><span class="line">       <span class="number">1</span>: istore_1<span class="comment">//将栈顶int型数值存入第二个本地变量</span></span><br><span class="line">       <span class="number">2</span>: aload_0<span class="comment">//取this对应的对应引用值，压入操作数栈</span></span><br><span class="line">       3: invokevirtual #6                  // Method test2:()V</span><br><span class="line">       <span class="number">6</span>: iinc          <span class="number">1</span>, <span class="number">1</span><span class="comment">//将指定int型变量增加指定值（i++, i--, i+=2）</span></span><br><span class="line">       <span class="number">9</span>: goto          <span class="number">6</span><span class="comment">//程序跳转</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: ldc           #7                  // String shawn，从常量池中取出值压入栈</span><br><span class="line">       <span class="number">2</span>: astore_1<span class="comment">//引用值出栈，赋值给局部变量表中变量name</span></span><br><span class="line">       <span class="number">3</span>: aload_0<span class="comment">//取出this，压入栈</span></span><br><span class="line">       <span class="number">4</span>: dup<span class="comment">//复制操作数栈栈顶的值，并压入栈，此时有两个this对象引用值在操作数组栈</span></span><br><span class="line">       5: getfield      #2                  // Field count:I,获取其count字段，然后压入栈，此时栈中有一个this和一个count的值</span><br><span class="line">       <span class="number">8</span>: iconst_1<span class="comment">//取出一个int常量1,压入操作数栈</span></span><br><span class="line">       <span class="number">9</span>: iadd<span class="comment">//从栈中取出count和1，将count值和1相加，结果入栈</span></span><br><span class="line">      10: putfield      #2                  // Field count:I,</span><br><span class="line">      13: getstatic     #8                  // Field  java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">16</span>: aload_1<span class="comment">//将第二个引用输出类压入栈</span></span><br><span class="line">      17: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">20</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>三、总结与提高</h1><h2 id="1、总结">1、总结</h2><p>1、通过javap命令可以查看一个java类反汇编、常量池、变量表、指令代码行号表等等信息。</p><p>2、平常，我们比较关注的是java类中每个方法的反汇编中的指令操作过程，这些指令都是顺序执行的，</p><p>3、一个方法的执行通常会涉及下面几块内存的操作：</p><ul><li><p>java栈中：局部变量表、操作数栈。这些操作基本上都值操作。</p></li><li><p>java堆。通过对象的地址引用去操作。</p></li><li><p>常量池。</p></li><li><p>其他如帧数据区、方法区等部分</p></li></ul><p>在做值相关操作时：<br>一个指令，可以从局部变量表、常量池、堆中对象、方法调用、系统调用中等取得数据，这些数据（可能是指，可能是对象的引用）被压入操作数栈。<br>一个指令，也可以从操作数数栈中取出一到多个值（pop多次），完成赋值、加减乘除、方法传参、系统调用等等操作。</p><h2 id="2、提高">2、提高</h2><blockquote><p>官网JVM指令集：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5</a></p></blockquote><p>​下面是较为常见的指令集，具体还可以参考《深入理解Java虚拟机第二版》、《Java虚拟机规范 JavaSE8版》两本书</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line">指令码 助记符    说明</span><br><span class="line"><span class="number">0x00</span> nop        无操作</span><br><span class="line"><span class="number">0x01</span> aconst_null 将<span class="keyword">null</span>推送至栈顶</span><br><span class="line"><span class="number">0x02</span> iconst_m1    将<span class="keyword">int</span>型-<span class="number">1</span>推送至栈顶</span><br><span class="line"><span class="number">0x03</span> iconst_0    将<span class="keyword">int</span>型<span class="number">0</span>推送至栈顶</span><br><span class="line"><span class="number">0x04</span> iconst_1    将<span class="keyword">int</span>型<span class="number">1</span>推送至栈顶</span><br><span class="line"><span class="number">0x05</span> iconst_2    将<span class="keyword">int</span>型<span class="number">2</span>推送至栈顶</span><br><span class="line"><span class="number">0x06</span> iconst_3    将<span class="keyword">int</span>型<span class="number">3</span>推送至栈顶</span><br><span class="line"><span class="number">0x07</span> iconst_4    将<span class="keyword">int</span>型<span class="number">4</span>推送至栈顶</span><br><span class="line"><span class="number">0x08</span> iconst_5    将<span class="keyword">int</span>型<span class="number">5</span>推送至栈顶</span><br><span class="line"><span class="number">0x09</span> lconst_0    将<span class="keyword">long</span>型<span class="number">0</span>推送至栈顶</span><br><span class="line"><span class="number">0x0a</span> lconst_1    将<span class="keyword">long</span>型<span class="number">1</span>推送至栈顶</span><br><span class="line"><span class="number">0x0b</span> fconst_0    将<span class="keyword">float</span>型<span class="number">0</span>推送至栈顶</span><br><span class="line"><span class="number">0x0c</span> fconst_1    将<span class="keyword">float</span>型<span class="number">1</span>推送至栈顶</span><br><span class="line"><span class="number">0x0d</span> fconst_2    将<span class="keyword">float</span>型<span class="number">2</span>推送至栈顶</span><br><span class="line"><span class="number">0x0e</span> dconst_0    将<span class="keyword">double</span>型<span class="number">0</span>推送至栈顶</span><br><span class="line"><span class="number">0x0f</span> dconst_1    将<span class="keyword">double</span>型<span class="number">1</span>推送至栈顶</span><br><span class="line"><span class="number">0x10</span> bipush    将单字节的常量值(-<span class="number">128</span>~<span class="number">127</span>)推送至栈顶</span><br><span class="line"><span class="number">0x11</span> sipush    将一个短整型常量值(-<span class="number">32768</span>~<span class="number">32767</span>)推送至栈顶</span><br><span class="line"><span class="number">0x12</span> ldc    将<span class="keyword">int</span>, <span class="keyword">float</span>或String型常量值从常量池中推送至栈顶</span><br><span class="line"><span class="number">0x13</span> ldc_w    将<span class="keyword">int</span>, <span class="keyword">float</span>或String型常量值从常量池中推送至栈顶（宽索引）</span><br><span class="line"><span class="number">0x14</span> ldc2_w    将<span class="keyword">long</span>或<span class="keyword">double</span>型常量值从常量池中推送至栈顶（宽索引）</span><br><span class="line"><span class="number">0x15</span> iload    将指定的<span class="keyword">int</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x16</span> lload    将指定的<span class="keyword">long</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x17</span> fload    将指定的<span class="keyword">float</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x18</span> dload    将指定的<span class="keyword">double</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x19</span> aload    将指定的引用类型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x1a</span> iload_0    将第一个<span class="keyword">int</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x1b</span> iload_1    将第二个<span class="keyword">int</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x1c</span> iload_2    将第三个<span class="keyword">int</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x1d</span> iload_3    将第四个<span class="keyword">int</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x1e</span> lload_0    将第一个<span class="keyword">long</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x1f</span> lload_1    将第二个<span class="keyword">long</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x20</span> lload_2    将第三个<span class="keyword">long</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x21</span> lload_3    将第四个<span class="keyword">long</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x22</span> fload_0    将第一个<span class="keyword">float</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x23</span> fload_1    将第二个<span class="keyword">float</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x24</span> fload_2    将第三个<span class="keyword">float</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x25</span> fload_3    将第四个<span class="keyword">float</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x26</span> dload_0    将第一个<span class="keyword">double</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x27</span> dload_1    将第二个<span class="keyword">double</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x28</span> dload_2    将第三个<span class="keyword">double</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x29</span> dload_3    将第四个<span class="keyword">double</span>型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x2a</span> aload_0    将第一个引用类型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x2b</span> aload_1    将第二个引用类型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x2c</span> aload_2    将第三个引用类型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x2d</span> aload_3    将第四个引用类型本地变量推送至栈顶</span><br><span class="line"><span class="number">0x2e</span> iaload    将<span class="keyword">int</span>型数组指定索引的值推送至栈顶</span><br><span class="line"><span class="number">0x2f</span> laload    将<span class="keyword">long</span>型数组指定索引的值推送至栈顶</span><br><span class="line"><span class="number">0x30</span> faload    将<span class="keyword">float</span>型数组指定索引的值推送至栈顶</span><br><span class="line"><span class="number">0x31</span> daload    将<span class="keyword">double</span>型数组指定索引的值推送至栈顶</span><br><span class="line"><span class="number">0x32</span> aaload    将引用型数组指定索引的值推送至栈顶</span><br><span class="line"><span class="number">0x33</span> baload    将<span class="keyword">boolean</span>或<span class="keyword">byte</span>型数组指定索引的值推送至栈顶</span><br><span class="line"><span class="number">0x34</span> caload    将<span class="keyword">char</span>型数组指定索引的值推送至栈顶</span><br><span class="line"><span class="number">0x35</span> saload    将<span class="keyword">short</span>型数组指定索引的值推送至栈顶</span><br><span class="line"><span class="number">0x36</span> istore    将栈顶<span class="keyword">int</span>型数值存入指定本地变量</span><br><span class="line"><span class="number">0x37</span> lstore    将栈顶<span class="keyword">long</span>型数值存入指定本地变量</span><br><span class="line"><span class="number">0x38</span> fstore    将栈顶<span class="keyword">float</span>型数值存入指定本地变量</span><br><span class="line"><span class="number">0x39</span> dstore    将栈顶<span class="keyword">double</span>型数值存入指定本地变量</span><br><span class="line"><span class="number">0x3a</span> astore    将栈顶引用型数值存入指定本地变量</span><br><span class="line"><span class="number">0x3b</span> istore_0    将栈顶<span class="keyword">int</span>型数值存入第一个本地变量</span><br><span class="line"><span class="number">0x3c</span> istore_1    将栈顶<span class="keyword">int</span>型数值存入第二个本地变量</span><br><span class="line"><span class="number">0x3d</span> istore_2    将栈顶<span class="keyword">int</span>型数值存入第三个本地变量</span><br><span class="line"><span class="number">0x3e</span> istore_3    将栈顶<span class="keyword">int</span>型数值存入第四个本地变量</span><br><span class="line"><span class="number">0x3f</span> lstore_0    将栈顶<span class="keyword">long</span>型数值存入第一个本地变量</span><br><span class="line"><span class="number">0x40</span> lstore_1    将栈顶<span class="keyword">long</span>型数值存入第二个本地变量</span><br><span class="line"><span class="number">0x41</span> lstore_2    将栈顶<span class="keyword">long</span>型数值存入第三个本地变量</span><br><span class="line"><span class="number">0x42</span> lstore_3    将栈顶<span class="keyword">long</span>型数值存入第四个本地变量</span><br><span class="line"><span class="number">0x43</span> fstore_0    将栈顶<span class="keyword">float</span>型数值存入第一个本地变量</span><br><span class="line"><span class="number">0x44</span> fstore_1    将栈顶<span class="keyword">float</span>型数值存入第二个本地变量</span><br><span class="line"><span class="number">0x45</span> fstore_2    将栈顶<span class="keyword">float</span>型数值存入第三个本地变量</span><br><span class="line"><span class="number">0x46</span> fstore_3    将栈顶<span class="keyword">float</span>型数值存入第四个本地变量</span><br><span class="line"><span class="number">0x47</span> dstore_0    将栈顶<span class="keyword">double</span>型数值存入第一个本地变量</span><br><span class="line"><span class="number">0x48</span> dstore_1    将栈顶<span class="keyword">double</span>型数值存入第二个本地变量</span><br><span class="line"><span class="number">0x49</span> dstore_2    将栈顶<span class="keyword">double</span>型数值存入第三个本地变量</span><br><span class="line"><span class="number">0x4a</span> dstore_3    将栈顶<span class="keyword">double</span>型数值存入第四个本地变量</span><br><span class="line"><span class="number">0x4b</span> astore_0    将栈顶引用型数值存入第一个本地变量</span><br><span class="line"><span class="number">0x4c</span> astore_1    将栈顶引用型数值存入第二个本地变量</span><br><span class="line"><span class="number">0x4d</span> astore_2    将栈顶引用型数值存入第三个本地变量</span><br><span class="line"><span class="number">0x4e</span> astore_3    将栈顶引用型数值存入第四个本地变量</span><br><span class="line"><span class="number">0x4f</span> iastore    将栈顶<span class="keyword">int</span>型数值存入指定数组的指定索引位置</span><br><span class="line"><span class="number">0x50</span> lastore    将栈顶<span class="keyword">long</span>型数值存入指定数组的指定索引位置</span><br><span class="line"><span class="number">0x51</span> fastore    将栈顶<span class="keyword">float</span>型数值存入指定数组的指定索引位置</span><br><span class="line"><span class="number">0x52</span> dastore    将栈顶<span class="keyword">double</span>型数值存入指定数组的指定索引位置</span><br><span class="line"><span class="number">0x53</span> aastore    将栈顶引用型数值存入指定数组的指定索引位置</span><br><span class="line"><span class="number">0x54</span> bastore    将栈顶<span class="keyword">boolean</span>或<span class="keyword">byte</span>型数值存入指定数组的指定索引位置</span><br><span class="line"><span class="number">0x55</span> castore    将栈顶<span class="keyword">char</span>型数值存入指定数组的指定索引位置</span><br><span class="line"><span class="number">0x56</span> sastore    将栈顶<span class="keyword">short</span>型数值存入指定数组的指定索引位置</span><br><span class="line"><span class="number">0x57</span> pop     将栈顶数值弹出 (数值不能是<span class="keyword">long</span>或<span class="keyword">double</span>类型的)</span><br><span class="line"><span class="number">0x58</span> pop2    将栈顶的一个（<span class="keyword">long</span>或<span class="keyword">double</span>类型的)或两个数值弹出（其它）</span><br><span class="line"><span class="number">0x59</span> dup     复制栈顶数值并将复制值压入栈顶</span><br><span class="line"><span class="number">0x5a</span> dup_x1    复制栈顶数值并将两个复制值压入栈顶</span><br><span class="line"><span class="number">0x5b</span> dup_x2    复制栈顶数值并将三个（或两个）复制值压入栈顶</span><br><span class="line"><span class="number">0x5c</span> dup2    复制栈顶一个（<span class="keyword">long</span>或<span class="keyword">double</span>类型的)或两个（其它）数值并将复制值压入栈顶</span><br><span class="line"><span class="number">0x5d</span> dup2_x1    复制栈顶的一个或两个值，将其插入栈顶那两个或三个值的下面</span><br><span class="line"><span class="number">0x5e</span> dup2_x2    复制栈顶的一个或两个值，将其插入栈顶那两个、三个或四个值的下面</span><br><span class="line"><span class="number">0x5f</span> swap    将栈最顶端的两个数值互换(数值不能是<span class="keyword">long</span>或<span class="keyword">double</span>类型的)</span><br><span class="line"><span class="number">0x60</span> iadd    将栈顶两<span class="keyword">int</span>型数值相加并将结果压入栈顶</span><br><span class="line"><span class="number">0x61</span> ladd    将栈顶两<span class="keyword">long</span>型数值相加并将结果压入栈顶</span><br><span class="line"><span class="number">0x62</span> fadd    将栈顶两<span class="keyword">float</span>型数值相加并将结果压入栈顶</span><br><span class="line"><span class="number">0x63</span> dadd    将栈顶两<span class="keyword">double</span>型数值相加并将结果压入栈顶</span><br><span class="line"><span class="number">0x64</span> isub    将栈顶两<span class="keyword">int</span>型数值相减并将结果压入栈顶</span><br><span class="line"><span class="number">0x65</span> lsub    将栈顶两<span class="keyword">long</span>型数值相减并将结果压入栈顶</span><br><span class="line"><span class="number">0x66</span> fsub    将栈顶两<span class="keyword">float</span>型数值相减并将结果压入栈顶</span><br><span class="line"><span class="number">0x67</span> dsub    将栈顶两<span class="keyword">double</span>型数值相减并将结果压入栈顶</span><br><span class="line"><span class="number">0x68</span> imul    将栈顶两<span class="keyword">int</span>型数值相乘并将结果压入栈顶</span><br><span class="line"><span class="number">0x69</span> lmul    将栈顶两<span class="keyword">long</span>型数值相乘并将结果压入栈顶</span><br><span class="line"><span class="number">0x6a</span> fmul    将栈顶两<span class="keyword">float</span>型数值相乘并将结果压入栈顶</span><br><span class="line"><span class="number">0x6b</span> dmul    将栈顶两<span class="keyword">double</span>型数值相乘并将结果压入栈顶</span><br><span class="line"><span class="number">0x6c</span> idiv    将栈顶两<span class="keyword">int</span>型数值相除并将结果压入栈顶</span><br><span class="line"><span class="number">0x6d</span> ldiv    将栈顶两<span class="keyword">long</span>型数值相除并将结果压入栈顶</span><br><span class="line"><span class="number">0x6e</span> fdiv    将栈顶两<span class="keyword">float</span>型数值相除并将结果压入栈顶</span><br><span class="line"><span class="number">0x6f</span> ddiv    将栈顶两<span class="keyword">double</span>型数值相除并将结果压入栈顶</span><br><span class="line"><span class="number">0x70</span> irem    将栈顶两<span class="keyword">int</span>型数值作取模运算并将结果压入栈顶</span><br><span class="line"><span class="number">0x71</span> lrem    将栈顶两<span class="keyword">long</span>型数值作取模运算并将结果压入栈顶</span><br><span class="line"><span class="number">0x72</span> frem    将栈顶两<span class="keyword">float</span>型数值作取模运算并将结果压入栈顶</span><br><span class="line"><span class="number">0x73</span> drem    将栈顶两<span class="keyword">double</span>型数值作取模运算并将结果压入栈顶</span><br><span class="line"><span class="number">0x74</span> ineg    将栈顶<span class="keyword">int</span>型数值取负并将结果压入栈顶</span><br><span class="line"><span class="number">0x75</span> lneg    将栈顶<span class="keyword">long</span>型数值取负并将结果压入栈顶</span><br><span class="line"><span class="number">0x76</span> fneg    将栈顶<span class="keyword">float</span>型数值取负并将结果压入栈顶</span><br><span class="line"><span class="number">0x77</span> dneg    将栈顶<span class="keyword">double</span>型数值取负并将结果压入栈顶</span><br><span class="line"><span class="number">0x78</span> ishl    将<span class="keyword">int</span>型数值左移位指定位数并将结果压入栈顶</span><br><span class="line"><span class="number">0x79</span> lshl    将<span class="keyword">long</span>型数值左移位指定位数并将结果压入栈顶</span><br><span class="line"><span class="number">0x7a</span> ishr    将<span class="keyword">int</span>型数值右（符号）移位指定位数并将结果压入栈顶</span><br><span class="line"><span class="number">0x7b</span> lshr    将<span class="keyword">long</span>型数值右（符号）移位指定位数并将结果压入栈顶</span><br><span class="line"><span class="number">0x7c</span> iushr    将<span class="keyword">int</span>型数值右（无符号）移位指定位数并将结果压入栈顶</span><br><span class="line"><span class="number">0x7d</span> lushr    将<span class="keyword">long</span>型数值右（无符号）移位指定位数并将结果压入栈顶</span><br><span class="line"><span class="number">0x7e</span> iand    将栈顶两<span class="keyword">int</span>型数值作“按位与”并将结果压入栈顶</span><br><span class="line"><span class="number">0x7f</span> land    将栈顶两<span class="keyword">long</span>型数值作“按位与”并将结果压入栈顶</span><br><span class="line"><span class="number">0x80</span> ior     将栈顶两<span class="keyword">int</span>型数值作“按位或”并将结果压入栈顶</span><br><span class="line"><span class="number">0x81</span> lor     将栈顶两<span class="keyword">long</span>型数值作“按位或”并将结果压入栈顶</span><br><span class="line"><span class="number">0x82</span> ixor    将栈顶两<span class="keyword">int</span>型数值作“按位异或”并将结果压入栈顶</span><br><span class="line"><span class="number">0x83</span> lxor    将栈顶两<span class="keyword">long</span>型数值作“按位异或”并将结果压入栈顶</span><br><span class="line"><span class="number">0x84</span> iinc    将指定<span class="keyword">int</span>型变量增加指定值（i++, i--, i+=<span class="number">2</span>）</span><br><span class="line"><span class="number">0x85</span> i2l     将栈顶<span class="keyword">int</span>型数值强制转换成<span class="keyword">long</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x86</span> i2f     将栈顶<span class="keyword">int</span>型数值强制转换成<span class="keyword">float</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x87</span> i2d     将栈顶<span class="keyword">int</span>型数值强制转换成<span class="keyword">double</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x88</span> l2i     将栈顶<span class="keyword">long</span>型数值强制转换成<span class="keyword">int</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x89</span> l2f     将栈顶<span class="keyword">long</span>型数值强制转换成<span class="keyword">float</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x8a</span> l2d     将栈顶<span class="keyword">long</span>型数值强制转换成<span class="keyword">double</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x8b</span> f2i     将栈顶<span class="keyword">float</span>型数值强制转换成<span class="keyword">int</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x8c</span> f2l     将栈顶<span class="keyword">float</span>型数值强制转换成<span class="keyword">long</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x8d</span> f2d     将栈顶<span class="keyword">float</span>型数值强制转换成<span class="keyword">double</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x8e</span> d2i     将栈顶<span class="keyword">double</span>型数值强制转换成<span class="keyword">int</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x8f</span> d2l     将栈顶<span class="keyword">double</span>型数值强制转换成<span class="keyword">long</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x90</span> d2f     将栈顶<span class="keyword">double</span>型数值强制转换成<span class="keyword">float</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x91</span> i2b     将栈顶<span class="keyword">int</span>型数值强制转换成<span class="keyword">byte</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x92</span> i2c     将栈顶<span class="keyword">int</span>型数值强制转换成<span class="keyword">char</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x93</span> i2s     将栈顶<span class="keyword">int</span>型数值强制转换成<span class="keyword">short</span>型数值并将结果压入栈顶</span><br><span class="line"><span class="number">0x94</span> lcmp    比较栈顶两<span class="keyword">long</span>型数值大小，并将结果（<span class="number">1</span>，<span class="number">0</span>，-<span class="number">1</span>）压入栈顶</span><br><span class="line"><span class="number">0x95</span> fcmpl    比较栈顶两<span class="keyword">float</span>型数值大小，并将结果（<span class="number">1</span>，<span class="number">0</span>，-<span class="number">1</span>）压入栈顶；当其中一个数值为NaN时，将-<span class="number">1</span>压入栈顶</span><br><span class="line"><span class="number">0x96</span> fcmpg    比较栈顶两<span class="keyword">float</span>型数值大小，并将结果（<span class="number">1</span>，<span class="number">0</span>，-<span class="number">1</span>）压入栈顶；当其中一个数值为NaN时，将<span class="number">1</span>压入栈顶</span><br><span class="line"><span class="number">0x97</span> dcmpl    比较栈顶两<span class="keyword">double</span>型数值大小，并将结果（<span class="number">1</span>，<span class="number">0</span>，-<span class="number">1</span>）压入栈顶；当其中一个数值为NaN时，将-<span class="number">1</span>压入栈顶</span><br><span class="line"><span class="number">0x98</span> dcmpg    比较栈顶两<span class="keyword">double</span>型数值大小，并将结果（<span class="number">1</span>，<span class="number">0</span>，-<span class="number">1</span>）压入栈顶；当其中一个数值为NaN时，将<span class="number">1</span>压入栈顶</span><br><span class="line"><span class="number">0x99</span> ifeq    当栈顶<span class="keyword">int</span>型数值等于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0x9a</span> ifne    当栈顶<span class="keyword">int</span>型数值不等于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0x9b</span> iflt    当栈顶<span class="keyword">int</span>型数值小于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0x9c</span> ifge    当栈顶<span class="keyword">int</span>型数值大于等于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0x9d</span> ifgt    当栈顶<span class="keyword">int</span>型数值大于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0x9e</span> ifle    当栈顶<span class="keyword">int</span>型数值小于等于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0x9f</span> if_icmpeq    比较栈顶两<span class="keyword">int</span>型数值大小，当结果等于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0xa0</span> if_icmpne    比较栈顶两<span class="keyword">int</span>型数值大小，当结果不等于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0xa1</span> if_icmplt    比较栈顶两<span class="keyword">int</span>型数值大小，当结果小于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0xa2</span> if_icmpge    比较栈顶两<span class="keyword">int</span>型数值大小，当结果大于等于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0xa3</span> if_icmpgt    比较栈顶两<span class="keyword">int</span>型数值大小，当结果大于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0xa4</span> if_icmple    比较栈顶两<span class="keyword">int</span>型数值大小，当结果小于等于<span class="number">0</span>时跳转</span><br><span class="line"><span class="number">0xa5</span> if_acmpeq    比较栈顶两引用型数值，当结果相等时跳转</span><br><span class="line"><span class="number">0xa6</span> if_acmpne    比较栈顶两引用型数值，当结果不相等时跳转</span><br><span class="line"><span class="number">0xa7</span> goto    无条件跳转</span><br><span class="line"><span class="number">0xa8</span> jsr     跳转至指定<span class="number">16</span>位offset位置，并将jsr下一条指令地址压入栈顶</span><br><span class="line"><span class="number">0xa9</span> ret     返回至本地变量指定的index的指令位置（一般与jsr, jsr_w联合使用）</span><br><span class="line"><span class="number">0xaa</span> tableswitch    用于<span class="keyword">switch</span>条件跳转，<span class="keyword">case</span>值连续（可变长度指令）</span><br><span class="line"><span class="number">0xab</span> lookupswitch    用于<span class="keyword">switch</span>条件跳转，<span class="keyword">case</span>值不连续（可变长度指令）</span><br><span class="line"><span class="number">0xac</span> ireturn    从当前方法返回<span class="keyword">int</span></span><br><span class="line"><span class="number">0xad</span> lreturn    从当前方法返回<span class="keyword">long</span></span><br><span class="line"><span class="number">0xae</span> freturn    从当前方法返回<span class="keyword">float</span></span><br><span class="line"><span class="number">0xaf</span> dreturn    从当前方法返回<span class="keyword">double</span></span><br><span class="line"><span class="number">0xb0</span> areturn    从当前方法返回对象引用</span><br><span class="line"><span class="number">0xb1</span> <span class="keyword">return</span>    从当前方法返回<span class="keyword">void</span></span><br><span class="line"><span class="number">0xb2</span> getstatic    获取指定类的静态域，并将其值压入栈顶</span><br><span class="line"><span class="number">0xb3</span> putstatic    为指定的类的静态域赋值</span><br><span class="line"><span class="number">0xb4</span> getfield    获取指定类的实例域，并将其值压入栈顶</span><br><span class="line"><span class="number">0xb5</span> putfield    为指定的类的实例域赋值</span><br><span class="line"><span class="number">0xb6</span> invokevirtual    调用实例方法</span><br><span class="line"><span class="number">0xb7</span> invokespecial    调用超类构造方法，实例初始化方法，私有方法</span><br><span class="line"><span class="number">0xb8</span> invokestatic    调用静态方法</span><br><span class="line"><span class="number">0xb9</span> invokeinterface 调用接口方法</span><br><span class="line"><span class="number">0xba</span> invokedynamic  调用动态链接方法</span><br><span class="line"><span class="number">0xbb</span> <span class="keyword">new</span>     创建一个对象，并将其引用值压入栈顶</span><br><span class="line"><span class="number">0xbc</span> newarray    创建一个指定原始类型（如<span class="keyword">int</span>, <span class="keyword">float</span>, <span class="keyword">char</span>…）的数组，并将其引用值压入栈顶</span><br><span class="line"><span class="number">0xbd</span> anewarray    创建一个引用型（如类，接口，数组）的数组，并将其引用值压入栈顶</span><br><span class="line"><span class="number">0xbe</span> arraylength 获得数组的长度值并压入栈顶</span><br><span class="line"><span class="number">0xbf</span> athrow    将栈顶的异常抛出</span><br><span class="line"><span class="number">0xc0</span> checkcast    检验类型转换，检验未通过将抛出ClassCastException</span><br><span class="line"><span class="number">0xc1</span> <span class="keyword">instanceof</span> 检验对象是否是指定的类的实例，如果是将<span class="number">1</span>压入栈顶，否则将<span class="number">0</span>压入栈顶</span><br><span class="line"><span class="number">0xc2</span> monitorenter    获得对象的锁，用于同步方法或同步块</span><br><span class="line"><span class="number">0xc3</span> monitorexit    释放对象的锁，用于同步方法或同步块</span><br><span class="line"><span class="number">0xc4</span> wide    扩大本地变量索引的宽度</span><br><span class="line"><span class="number">0xc5</span> multianewarray 创建指定类型和指定维度的多维数组（执行该指令时，操作栈中必须包含各维度的长度值），并将其引用值压入栈顶</span><br><span class="line"><span class="number">0xc6</span> ifnull    为<span class="keyword">null</span>时跳转</span><br><span class="line"><span class="number">0xc7</span> ifnonnull    不为<span class="keyword">null</span>时跳转</span><br><span class="line"><span class="number">0xc8</span> goto_w    无条件跳转</span><br><span class="line"><span class="number">0xc9</span> jsr_w    跳转至指定<span class="number">32</span>位offset位置，并将jsr_w下一条指令地址压入栈顶</span><br><span class="line">============================================</span><br><span class="line"><span class="number">0xca</span> breakpoint  调试时的断点标记</span><br><span class="line"><span class="number">0xfe</span> impdep1    为特定软件而预留的语言后门</span><br><span class="line"><span class="number">0xff</span> impdep2    为特定硬件而预留的语言后门</span><br><span class="line">最后三个为保留指令</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/u012988901/article/details/99852568" target="_blank" rel="noopener">https://blog.csdn.net/u012988901/article/details/99852568</a></p><p><a href="https://www.jianshu.com/p/6a8997560b05" target="_blank" rel="noopener">https://www.jianshu.com/p/6a8997560b05</a></p>]]></content>
    
    
    <summary type="html">&lt;h1&gt;一、概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;javac 是java语言编程编译器。 全称java compiler。 javac工具读由java语言编写的类和接口的定义，并将它们编译成字节代码的class文件。 javac 可以隐式编译一些没有在命令行中提及的源文件。&lt;/p&gt;
&lt;p&gt;javap是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	针对javac和javap相关命令，在已配置好JDK环境变量的终端，使用&lt;code&gt;javac -help&lt;/code&gt;和&lt;code&gt;javap -help&lt;/code&gt;即可查找&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="JVM" scheme="https://www.shawn22.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>springboot父子工程</title>
    <link href="https://www.shawn22.xyz/posts/b59fddd6.html"/>
    <id>https://www.shawn22.xyz/posts/b59fddd6.html</id>
    <published>2021-08-12T13:46:02.000Z</published>
    <updated>2021-08-12T13:49:32.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建父工程">一、创建父工程</h2><p><strong>新建工程，选择Spring initializer</strong><br><img src="https://img-blog.csdnimg.cn/b125c40c1b2546b2a1b10094effafb69.png" alt="请添加图片描述"></p><a id="more"></a><p><strong>填写好项目名称等</strong><br><img src="https://img-blog.csdnimg.cn/051ae22391f1409091e10b105421d6d2.png" alt="请添加图片描述"><br><strong>不勾选任何依赖，最后选择好项目存储位置，点击创建</strong><br><img src="https://img-blog.csdnimg.cn/0239a59a4a29431383ca533b5d48b744.png" alt="请添加图片描述"><br><strong>删除不必要的文件</strong></p><p>保留父工程项目必要的文件<br><img src="https://img-blog.csdnimg.cn/e4c281cdc05340e08b812966e755fd95.png" alt="请添加图片描述"><br>相关文件介绍</p><p><code>.gitignore</code>：分布式版本控制系统git的配置文件，意思为忽略提交<br><code>mvnw</code>：全名是maven wrapper的文件，作用是在maven-wrapper.properties文件中记录你要使用的maven版本，当用户执行mvnw clean 命令时，发现当前用户的maven版本和期望的版本不一致，那么就下载期望的版本，然后用期望的版本来执行mvn命令，比如mvn clean命令。<br><code>.mvn</code>文件夹：存放mvnw相关文件<br><code>mvnw.cmd</code>：执行mvnw命令的cmd入口。其中mvnw文件适用于Linux（bash），mvnw.cmd适用于Windows 环境。<br><code>.iml</code>文件：intellij idea的工程配置文件，里面包含当前project的一些配置信息，如模块开发的相关信息，比如java组件，maven组件，插件组件等，还可能会存储一些模块路径信息，依赖信息以及一些别的信息。<br><code>.idea</code>文件夹：存放项目的配置信息，包括数据源，类库，项目字符编码，历史记录，版本控制信息等。<code>pom.xml</code>：项目对象模型（核心重要）</p><h2 id="二、创建子工程">二、创建子工程</h2><p><strong>新建Module</strong><br><img src="https://img-blog.csdnimg.cn/45564d3c3b2e46239c0f78c36c1d1f6d.png" alt="请添加图片描述"><br><strong>选择Spring Initializer，也可直接选择新建空Maven项目</strong><br><img src="https://img-blog.csdnimg.cn/cce6dbca187645308f30f44771451e9e.png" alt="请添加图片描述"><br><strong>设置子模块信息</strong><br><img src="https://img-blog.csdnimg.cn/3d9062abf3314f2f9f34f76f0151cd88.png" alt="请添加图片描述"></p><p>类似可以创建多个子模块</p><h2 id="三、父子模块配置文件设置">三、父子模块配置文件设置</h2><h3 id="1、父模块pom-xml文件">1、父模块pom.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--全局定义springboot父项目版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目描述--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zstu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lamp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>intelligent-lamp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>智能灯项目<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--packageing需要指定为pom--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的打包类型：pom、jar、war</span></span><br><span class="line"><span class="comment">        packing默认是jar类型，</span></span><br><span class="line"><span class="comment">        pom  父类型都为pom类型</span></span><br><span class="line"><span class="comment">        jar  内部调用或者是作服务使用</span></span><br><span class="line"><span class="comment">        war - 需要部署的项目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子工程目录，每添加一个model，需要将子工程的model名注册到此--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>childserver<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义springcloud使用版本号等属性信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入全体项目都需要的父依赖，引入后，子项目不需要引入，继承父项目就可以--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--全局管理依赖,并不会引入具体依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只是依赖的声明，并不实现引入，因此子项目需要显式的声明需要用的依赖，这样做的好处是可以方便进行版本控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;version&gt;3.1.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">            &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果子项目并不是单独的springboot项目，不能独立启动，则父工程不能使用此插件，应该放在能启动服务的子项目中--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--boot项目使用boot打包插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、子模块pom-xml文件">2、子模块pom.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 确认父子工程继承关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--父工程 groupId--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zstu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--父工程 artifactId--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lamp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--父工程 版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zstu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>childserver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>childserver<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>子工程<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里由父工程控制版本信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、工程打包">四、工程打包</h2><p>创建好基础的web服务后，首先需要在父工程的maven管理下进行<code>clean</code>，之后进行<code>Install</code>，最后可以进行子服务的打包<br><img src="https://img-blog.csdnimg.cn/af35f3130a2147e39112364097e4ad10.png" alt="请添加图片描述"><br>对于多项目，<code>springboot</code>启动类的默认扫描路径是该类所在的包下面的所有java类，若访问的为不同模块，则需要配置扫描包，例如我的<code>@SpringBootApplication(scanBasePackages = &quot;com.zstu.*&quot;)</code></p><p>若子项目需要依赖另一子项目文件，在<code>pom.xml</code>中配置<code>&lt;dependency&gt;</code>依赖</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、创建父工程&quot;&gt;一、创建父工程&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新建工程，选择Spring initializer&lt;/strong&gt;&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/b125c40c1b2546b2a1b10094effafb69.png&quot; alt=&quot;请添加图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="springboot" scheme="https://www.shawn22.xyz/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-2020.0.3版本简单入门</title>
    <link href="https://www.shawn22.xyz/posts/dcbafa8c.html"/>
    <id>https://www.shawn22.xyz/posts/dcbafa8c.html</id>
    <published>2021-08-12T13:02:53.000Z</published>
    <updated>2021-08-12T13:11:35.265Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Spring Cloud 2020.0.0版本北京时间2020.12.22发布，彻底删除掉了Netflix除Eureka外的所有组件，支持SpringBoot2.4.x</strong></p><p>Netflix 组件替代方案(Feign依旧是可以使用的，OpenFiegn，做REST客户端)</p><table><thead><tr><th style="text-align:center">Netflix</th><th style="text-align:center">推荐替代品</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Hystrix</td><td style="text-align:center">Resilience4j</td><td style="text-align:center">Hystrix自己也推荐你使用它代替自己</td></tr><tr><td style="text-align:center">Hystrix Dashboard / Turbine</td><td style="text-align:center">Micrometer + Monitoring System</td><td style="text-align:center">监控这件事交给更专业的组件去做</td></tr><tr><td style="text-align:center">Ribbon</td><td style="text-align:center">Spring Cloud Loadbalancer</td><td style="text-align:center">Spring终究亲自出手</td></tr><tr><td style="text-align:center">Zuul 1</td><td style="text-align:center">Spring Cloud Gateway</td><td style="text-align:center">Spring终究亲自出手</td></tr><tr><td style="text-align:center">Archaius 1</td><td style="text-align:center">Spring Boot外部化配置 + Spring Cloud配置</td><td style="text-align:center">比Netflix实现的更好、更强大</td></tr></tbody></table><a id="more"></a><p>这里我简单记录了一下SpringCloud2020.0.3版本的情况，作为学习供以后参考，以后SpringCloud会使用SpringCloud Alibaba的。</p><hr><h1>Eureka服务注册与发现</h1><h2 id="一、概述">一、概述</h2><blockquote><p><a href="https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/#service-discovery-eureka-clients" target="_blank" rel="noopener">Eureka官网</a></p><p><a href="https://www.springcloud.cc/spring-cloud-greenwich.html#_spring_cloud_netflix" target="_blank" rel="noopener">Eureka中文网</a></p></blockquote><h3 id="1、CAP原则">1、CAP原则</h3><p>CAP原则又称CAP定理，指的是在一个分布式系统中一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。但这三个要素最多只能同时实现两点，不可能三者兼顾，一般来说是AP和CP。</p><h3 id="2、Eureka介绍">2、Eureka介绍</h3><p>Eureka是一个基于REST的服务，用于定位服务，以达到负载均衡和中间层服务故障转移的目的。SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务注册与发现功能。功能类似于Dubbo的注册中心，比如Zookeeper。Eureka 包含两个组件：Eureka Server和Eureka Client。<br><img src="https://img-blog.csdnimg.cn/7deda8bc601a46acb7c6f0f7f8366bdd.png" alt="请添加图片描述"></p><ul><li>Eureka Server：服务注册中心（可以是一个集群），对外暴露自己的地址</li><li>Service Provider：微服务(可以是java程序，也可以python)，启动后向Eureka注册自己信息（地址等）</li><li>Service Consumer：向Eureka订阅服务，Eureka会将对应服务的所有提供者地址列表发送给消费者，并且定期更新</li><li>心跳(续约)：提供者定期通过http方式向Eureka刷新自己的状态</li><li>Eureka默认在90秒后还未收到服务提供者发来的心跳时，那么它就会认定该服务已经死亡就会注销这个服务。这里注销并不是立即注销，而是会在60秒以后对在这个之间段内“死亡”的服务集中注销，如果立即注销，势必会对Eureka造成极大的负担。这些时间参数都可以自定义配置</li><li>自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，所以不会再接收心跳，也不会删除服务。</li></ul><h2 id="二、服务构建">二、服务构建</h2><h3 id="1、建立父子聚合项目">1、建立父子聚合项目</h3><p>在父工程<code>pom.xml</code>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">eureka.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2020.0.3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、建立Eureka注册中心">2、建立Eureka注册中心</h3><p>创建springboot模块，引入服务注册服务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里可能会和springboot的tomcat jar包冲突，所以去除；</span></span><br><span class="line"><span class="comment">另外里面可能会有jar包找不到，一层层进入，找到报错的jar包版本，引入正确的版本即可</span></span><br><span class="line"><span class="comment">    &lt;exclusions&gt;</span></span><br><span class="line"><span class="comment">        &lt;exclusion&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/exclusion&gt;</span></span><br><span class="line"><span class="comment">    &lt;/exclusions&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进入<code>application.yml</code>文件修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="comment"># eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment">## 开启自我保护模式（开启状态下服务停掉eureka不会立即清除掉宕掉的服务，所以false）</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 清理无效节点,默认60*1000毫秒,即60秒</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#是否将自己注册到Eureka服务器中，本身是服务器，无需注册</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka server交互的地址查询服务和注册服务都需要依赖这个defaultzone地址,如果是集群，需要加上其它Server的地址。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>最后在启动类上添加<code>@EnableEurekaServer</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动<code>localhost:8088</code>即可进入我的注册中心<br><img src="https://img-blog.csdnimg.cn/891a903d69af4c14b166e0abea4934ea.png" alt="请添加图片描述"></p><ul><li>System Status：系统信息</li><li>DS Replicas：服务器副本</li><li>Instances currently registered with Eureka：已注册的微服务列表</li><li>General Info：一般信息</li><li>Instance Info：实例信息</li></ul><h3 id="3、建立Provider服务">3、建立Provider服务</h3><p>创建新的springboot模块，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进入<code>application.yml</code>文件修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 应用名称，不要加下划线，否则会找不到服务</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">student</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#EurekaServer地址</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#集群配置多个</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8088/eureka</span></span><br><span class="line">    <span class="comment">#服务注册，是否向服务端注册,默认是true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#服务提供实例的构成信息</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line">    <span class="comment"># 当调用getHostname获取实例的hostname时，返回ip而不是host名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 指定自己的ip信息，不指定的话会自己寻找</span></span><br><span class="line">    <span class="comment"># ip-address: 127.0.0.1</span></span><br><span class="line">    <span class="comment">#Eureka服务端在收到最后一次心跳之后等待的时间上限，单位为秒，超过则剔除（客户端告诉服务端按照此规则等待自己），默认90</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">20</span></span><br><span class="line">    <span class="comment">#心跳包，默认30</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>创建服务端服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,world!s"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在启动类上加上<code>@EnableEurekaClient</code>，启动即可加入注册中心</p><p><strong>对于python开发的web程序，也可以注册到Eureka注册中心，这里我就举例Flask框架</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> py_eureka_client <span class="keyword">import</span> eureka_client</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setEureka</span><span class="params">()</span>:</span></span><br><span class="line">    server_host = <span class="string">"localhost"</span></span><br><span class="line">    server_port = <span class="number">5000</span></span><br><span class="line">    eureka_client.init(eureka_server=<span class="string">"http://localhost:8088/eureka"</span>,</span><br><span class="line">                       <span class="comment">#不能出现下划线</span></span><br><span class="line">                       app_name=<span class="string">"flaskServer"</span>,</span><br><span class="line">                       <span class="comment"># 当前组件的主机名，可选参数，如果不填写会自动计算一个，如果服务和 eureka 服务器部署在同一台机器，请必须填写，否则会计算出 127.0.0.1</span></span><br><span class="line">                       instance_host=server_host,</span><br><span class="line">                       instance_port=server_port,</span><br><span class="line">                       <span class="comment"># 调用其他服务时的高可用策略，可选，默认为随机</span></span><br><span class="line">                       ha_strategy=eureka_client.HA_STRATEGY_RANDOM)</span><br><span class="line"></span><br><span class="line">setEureka()</span><br><span class="line"><span class="comment"># 跨域配置</span></span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="literal">True</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>启动访问<code>localhost:5000</code>可正常访问，这里作为Provider</p><h3 id="4、建立Consumer消费端">4、建立Consumer消费端</h3><blockquote><p>这里Ribbon替换成Spring Cloud Loadbalancer，可以自定义负载均衡算法，这里默认是轮询。通过@LoadBalanced，程序底层会默认通过ribbon将注册的服务名解析成具体的ip和端口，最后进行访问请求。</p><p><a href="https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-loadbalancer" target="_blank" rel="noopener">参考文档</a>。</p></blockquote><p>创建springboot模块，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进入<code>application.yml</code>文件修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Consumer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># EurekaServer地址,多个地址以','隔开</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8088/eureka</span></span><br><span class="line">    <span class="comment">#服务注册，是否向服务端注册,默认是true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 启动即会被注册到注册中心</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ApiApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 启用负载均衡机制，必须</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以自定义</span></span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .setConnectTimeout(Duration.ofMillis(<span class="number">100</span>))</span><br><span class="line">                .setReadTimeout(Duration.ofMillis(<span class="number">500</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后创建Cntroller，远程调用服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里引的包为org.springframework.cloud.client.discovery.DiscoveryClient</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object template = restTemplate.getForObject(<span class="string">"http://STUDENT/"</span>,Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/py"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">discory1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String template = restTemplate.getForObject(<span class="string">"http://FLASKSERVER/"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">discory2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"尝试获取注册中心信息"</span>);</span><br><span class="line">        log.info(<span class="string">"getApplications"</span>+discoveryClient.getServices());</span><br><span class="line">        log.info(<span class="string">"getInstancesById"</span>+discoveryClient.getInstances(<span class="string">"STUDENT"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后，此时通过8081端口访问即可获取8080以及flask服务端提供的服务<br><img src="https://img-blog.csdnimg.cn/474989a917cc4957b277d2a824e106a3.png" alt="请添加图片描述"></p><h3 id="5、优化与提高">5、优化与提高</h3><p>对于Eureka，info、还有集群、zone、region等</p><h1>OpenFeign负载均衡</h1><h2 id="一、概述-v2">一、概述</h2><p>相对于Ribbon+RestTemplate，其操作过于繁琐，在上面一节中已经简单写明，其通过OpenFeign可以简化开发。</p><p>OpenFeign是一个声明式的http客户端，让编写web服务客户端变的非常容易，只需要创建一个接口并在接口上添加注解即可。在底层，OpenFeign集成了Ribbon，利用Ribbon维护了springcloud-Dept的服务列表信息，接口会自动进行http请求相应的服务，其作用的替代RestTemplate，性能比较低，但是可以使代码可读性很强。</p><p>OpenFeign的前身是Feign，后者目前已经停更了，OpenFeign是SpringCloud在Feign的基础上支持了Spring MVC的注解，并通过动态代理的方式产生实现类来做负载均衡并进行调用其他服务。</p><p><a href="https://spring.io/projects/spring-cloud-openfeign" target="_blank" rel="noopener">springcloud官方文档</a></p><h2 id="二、服务构建-v2">二、服务构建</h2><h3 id="1、多模块负载均衡搭建">1、多模块负载均衡搭建</h3><p>在consumer模块的<code>pom.xml</code>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>student</code>模块中存在一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"调用成功"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello,world!s"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>consumer</code>模块打开Feign注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = <span class="string">"com.zstu.consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 启用负载均衡机制，必须</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建Feign接口类，在类上添加需要远程访问的服务名，方法则是该服务暴露的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里调用的是student的helloworld方法</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在<code>controller</code>新增方法，调用该方法，启动项目即可内部远程调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FeignService feignService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test111"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    feignService.hello();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、优化与提高">2、优化与提高</h3><p>服务熔断、降级可以用resilience4j，不过网上实用资料好像不是很多，打算下次直接上sentinel了。</p><h1>Spring Cloud Gateway网关</h1><h2 id="一、概述-v3">一、概述</h2><blockquote><p>API Gateway（APIGW / API 网关），顾名思义，是出现在系统边界上的一个面向 API 的、串行集中式的强管控服务，这里的边界是企业 IT 系统的边界，可以理解为企业级应用防火墙，主要起到隔离外部访问与内部系统的作用。</p><p><a href="https://www.springcloud.cc/spring-cloud-greenwich.html#_spring_cloud_gateway" target="_blank" rel="noopener">SpringCloudGateway中文网</a></p><p><a href="https://spring.io/projects/spring-cloud-gateway#learn" target="_blank" rel="noopener">SpringCloudGateway官网</a></p></blockquote><p>Spring Cloud Gateway是Spring Cloud官方推出的第二代网关框架，取代Zuul网关。网关作为流量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。同时有以下特点：</p><ul><li>基于Spring 5，Reactor(模式) 和 SpringBoot 2.0</li><li>能够在任何请求属性上匹配路由</li><li>断言和过滤器是特定于路由的</li><li>Hystrix断路器集成</li><li>SpringCloud DiscoveryClient集成</li><li>易于编写断言和过滤器</li><li>请求速率限制</li><li>路径重写<br><img src="https://img-blog.csdnimg.cn/73912c06b369414abfb6091b36fd313e.png" alt="请添加图片描述"></li></ul><h2 id="二、服务构建-v3">二、服务构建</h2><h3 id="1、Gateway网关搭建">1、Gateway网关搭建</h3><p><strong>继承Eureka配置</strong></p><p>新建springboot模块，我这里取名为api，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- spring cloud gateway 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>SpringCloud中Gateway与SpringBoot Web有jar包冲突，因此这里我没引入SpringBoot Web依赖</em></p><p>配置<code>application.yml</code>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Api</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启根据微服务名称自动转发</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span>  <span class="comment">#微服务名称以小写形式呈现</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">student</span>           <span class="comment"># 路由id,没有固定规则，建议配合服务名</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://STUDENT</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/**</span>    <span class="comment"># 断言：路径相匹配的进行路由</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">flaskserver</span>           <span class="comment"># 路由id,没有固定规则，建议配合服务名</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:5000</span>  <span class="comment"># 匹配后提供服务的路由地址</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/**</span>    <span class="comment"># 断言：路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># EurekaServer地址,多个地址以','隔开</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8088/eureka</span></span><br><span class="line">    <span class="comment">#服务注册，是否向服务端注册,默认是true</span></span><br><span class="line"><span class="comment">#register-with-eureka: false</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#服务提供实例的构成信息</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>在启动类上添加注解<code>@EnableEurekaClient</code>，最后启动服务，访问<code>http://localhost:8081/student/</code>,<code>http://localhost:8081/flaskserver</code>，可以发现网关配置成功</p><h3 id="2、Gateway网关配置详解">2、Gateway网关配置详解</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Api</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启根据微服务名称自动转发</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span>  <span class="comment">#微服务名称以小写形式呈现</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">#  在gateway中配置uri配置有三种方式，包括</span></span><br><span class="line">      <span class="comment">#第一种：ws(websocket)方式: uri: ws://localhost:9000</span></span><br><span class="line">      <span class="comment">#第二种：http方式: uri: http://localhost:8130/</span></span><br><span class="line">      <span class="comment">#第三种：lb(注册中心中服务名字)方式: uri: lb://brilliance-consumer</span></span><br><span class="line">      <span class="comment">#规则:配置由筛选器名称、等号（=）和用逗号（，）分隔的参数值识别。</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">student</span>           <span class="comment"># 路由id：payment_route，没有固定规则，建议配合服务名</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://STUDENT</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/**</span>    <span class="comment"># 断言：路径相匹配的进行路由</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br><span class="line">        <span class="comment">#当请求头携带key为X-Request-Id的，值包含数字的情况下转发</span></span><br><span class="line">        <span class="comment">#- Header=X-Request-Id, \d+</span></span><br><span class="line">        <span class="comment">#接受远程资源集合</span></span><br><span class="line">        <span class="comment">#- RemoteAddr=192.168.1.1/24</span></span><br><span class="line">        <span class="comment">#- Cookie=mycookie,mycookievalue</span></span><br><span class="line">        <span class="comment">#接收一个java ZonedDateTime类的时间参数。After表示在这个时间之后的请求才能正确匹配路由，同理还有Before、Between</span></span><br><span class="line">        <span class="comment">#- After=2021-07-31T17:42:47.789-07:00[Asia/Shanghai]</span></span><br><span class="line">        <span class="comment">#- Weight=group1, 2 #做负载均衡</span></span><br><span class="line">        <span class="comment">#- Query=token, abc.       # 匹配请求参数中包含 token 并且其参数值满足正则表达式 abc. 的请求</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#filters:</span></span><br><span class="line">          <span class="comment"># 将 /1 重写为 /product/1</span></span><br><span class="line">          <span class="comment">#- PrefixPath=/product</span></span><br><span class="line">          <span class="comment"># 将 /api/123/product/1 重写为 /product/1</span></span><br><span class="line">          <span class="comment">#- StripPrefix=2</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># EurekaServer地址,多个地址以','隔开</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8088/eureka</span></span><br><span class="line">    <span class="comment">#服务注册，是否向服务端注册,默认是true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#服务提供实例的构成信息</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3、优化与提高">3、优化与提高</h3><p>Gateway还可以自定义配置过滤、鉴权等</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Spring Cloud 2020.0.0版本北京时间2020.12.22发布，彻底删除掉了Netflix除Eureka外的所有组件，支持SpringBoot2.4.x&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Netflix 组件替代方案(Feign依旧是可以使用的，OpenFiegn，做REST客户端)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Netflix&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;推荐替代品&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Hystrix&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Resilience4j&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Hystrix自己也推荐你使用它代替自己&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Hystrix Dashboard / Turbine&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Micrometer + Monitoring System&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;监控这件事交给更专业的组件去做&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ribbon&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Spring Cloud Loadbalancer&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Spring终究亲自出手&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Zuul 1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Spring Cloud Gateway&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Spring终究亲自出手&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Archaius 1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Spring Boot外部化配置 + Spring Cloud配置&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;比Netflix实现的更好、更强大&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="SpringCloud" scheme="https://www.shawn22.xyz/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>java8常用新特性</title>
    <link href="https://www.shawn22.xyz/posts/c54dc8f8.html"/>
    <id>https://www.shawn22.xyz/posts/c54dc8f8.html</id>
    <published>2021-08-05T04:19:00.000Z</published>
    <updated>2021-10-14T04:38:12.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Lambda-表达式">1、Lambda 表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//输出Hello shawn</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 用括号</span></span><br><span class="line">  GreetingService greetService = (message) -&gt;</span><br><span class="line">        System.out.println(<span class="string">"Hello "</span> + message);</span><br><span class="line">  greetService.sayMessage(<span class="string">"shawn"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2、函数式接口">2、函数式接口</h2><blockquote><p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。</p></blockquote><table><thead><tr><th style="text-align:center">函数接口</th><th style="text-align:center">抽象接口</th><th style="text-align:center">功能</th><th style="text-align:center">参数</th><th style="text-align:center">返回类型</th></tr></thead><tbody><tr><td style="text-align:center">Predicate</td><td style="text-align:center">test(T t)</td><td style="text-align:center">判断真假</td><td style="text-align:center">T</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">Consumer</td><td style="text-align:center">accept(T t)</td><td style="text-align:center">消费消息</td><td style="text-align:center">T</td><td style="text-align:center">void</td></tr><tr><td style="text-align:center">Function</td><td style="text-align:center">R apply(T t)</td><td style="text-align:center">将T映射为R</td><td style="text-align:center">T</td><td style="text-align:center">R</td></tr><tr><td style="text-align:center">Supplier</td><td style="text-align:center">T get()</td><td style="text-align:center">生产消息</td><td style="text-align:center">None</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">UnaryOperator</td><td style="text-align:center">T apply(T t)</td><td style="text-align:center">一元操作</td><td style="text-align:center">T</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">BinaryOperator</td><td style="text-align:center">apply(T t,U u)</td><td style="text-align:center">二元操作</td><td style="text-align:center">（T,U）</td><td style="text-align:center">T</td></tr></tbody></table><p>常用的方法举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8FunctionalTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Predicate&lt;Integer&gt; predicate = x -&gt; x &gt; <span class="number">170</span>;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="string">"shawn"</span>, <span class="number">175</span>);</span><br><span class="line">        System.out.println(<span class="string">"shawn的身高有超过170吗？"</span> + predicate.test(student.getHeight()));</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line">        consumer.accept(<span class="string">"我命由我不命天"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Student映射成String</span></span><br><span class="line">        Function&lt;Student, String&gt; function = Student::getName;</span><br><span class="line">        String name = function.apply(student);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Integer&gt; supplier =</span><br><span class="line">                () -&gt; Integer.valueOf(BigDecimal.TEN.toString());</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">        UnaryOperator&lt;Boolean&gt; unaryOperator = flag -&gt; !flag;</span><br><span class="line">        Boolean apply2 = unaryOperator.apply(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(apply2);</span><br><span class="line"></span><br><span class="line">        BinaryOperator&lt;Integer&gt; operator = (x, y) -&gt; x * y;</span><br><span class="line">        Integer integer = operator.apply(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(integer);</span><br><span class="line"></span><br><span class="line">        test(() -&gt; <span class="string">"我是一个演示的函数式接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示自定义函数式接口使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> worker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Worker worker)</span> </span>&#123;</span><br><span class="line">        String work = worker.work();</span><br><span class="line">        System.out.println(work);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line">        <span class="function">String <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Stream流式编程">3、Stream流式编程</h2><p>Stream（流）是一个来自数据源的元素队列并支持聚合操作</p><ul><li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li><li><strong>数据源</strong> 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li><li><strong>聚合操作</strong> 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</li></ul><p><strong>1. collect(Collectors.toList())</strong></p><p>将流转换为list。还有toSet()，toMap()等。及早求值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    System.out.println(studentList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[Student(name=shawn, height=165), Student(name=shawn22, height=170)]</span></span><br></pre></td></tr></table></figure><p><strong>2. forEach</strong></p><p>Stream 提供了新的方法 <code>forEach</code> 来迭代流中的每个数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. filter</strong></p><p>过滤筛选的作用。内部就是Predicate接口。惰性求值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>))</span><br><span class="line">        .filter(s -&gt; s.getHeight()&gt;<span class="number">165</span>)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    System.out.println(studentList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[Student(name=shawn22, height=170)]</span></span><br></pre></td></tr></table></figure><p><strong>3. map</strong></p><p>转换功能，内部就是Function接口。惰性求值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; studentList = Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>))</span><br><span class="line">        .filter(s -&gt; s.getHeight() &gt; <span class="number">165</span>)</span><br><span class="line">        .map(s-&gt; s.getName())</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    System.out.println(studentList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[shawn22]</span></span><br></pre></td></tr></table></figure><p><strong>5. flatMap</strong></p><p>将多个Stream合并为一个Stream。惰性求值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line"></span><br><span class="line">    Stream.of(studentList, Collections.singletonList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn222"</span>, <span class="number">180</span>)))</span><br><span class="line">        .flatMap(Collection::stream)</span><br><span class="line">        .map(s-&gt;s.getName())</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//shawn</span></span><br><span class="line"><span class="comment">//shawn22</span></span><br><span class="line"><span class="comment">//shawn222</span></span><br></pre></td></tr></table></figure><p><strong>6. max和min</strong></p><p>集合中求最大值和最小值，及早求值。maxBy或者minBy就是求最大值与最小值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line"></span><br><span class="line">    Optional&lt;Student&gt; student = studentList.stream()</span><br><span class="line">        .min(Comparator.comparing(Student::getHeight));</span><br><span class="line">    <span class="keyword">if</span>(student.isPresent())&#123;</span><br><span class="line">        System.out.println(student.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Student(name=shawn, height=165)</span></span><br></pre></td></tr></table></figure><p><strong>7. count</strong></p><p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> count = studentList.stream().filter(s -&gt; s.getHeight() &gt; <span class="number">165</span>).count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure><p><strong>8. reduce</strong></p><p>reduce 操作可以实现从一组值中生成一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).reduce(<span class="number">10</span>, Integer::sum));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//25</span></span><br></pre></td></tr></table></figure><p><strong>9. collect高级用法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将分成true和false两个集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line">    System.out.println(studentList.stream()</span><br><span class="line">                       .collect(Collectors.partitioningBy(s -&gt; s.getName().contains(<span class="string">"shawn"</span>))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#123;false=[], true=[Student(name=shawn, height=165), Student(name=shawn22, height=170)]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Collectors.groupingBy与SQL 中的 group by 操作是一样的。</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test010</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line">    System.out.println(studentList.stream()</span><br><span class="line">                       .collect(Collectors.groupingBy(Student::getName)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test011</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line">    System.out.println(studentList.stream().map(Student::getName)</span><br><span class="line">                       .collect(Collectors.joining(<span class="string">","</span>,<span class="string">"["</span>,<span class="string">"]"</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[shawn,shawn22]</span></span><br></pre></td></tr></table></figure><h2 id="4、Optional类">4、Optional类</h2><blockquote><p>Optional 类是一个可以为null的容器对象。目的是为了解决空指针异常。</p></blockquote><p><strong>1. empty()</strong></p><p>返回一个<code>Optional</code>容器对象，而不是 null。<strong>建议常用⭐⭐⭐⭐</strong></p><p><strong>2. get()</strong></p><p>如果创建的Optional中有值存在，则返回此值，否则抛出<code>NoSuchElementException</code>。在判空之前，千万不要直接使用！<strong>尽量别用！⭐</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会报错java.util.NoSuchElementException: No value present</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;User&gt; opt = Optional.empty();</span><br><span class="line">    System.out.println(opt.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. of(T value)</strong></p><p>创建一个<code>Optional</code>对象，如果 value 是 null，则抛出 NPE。<strong>不建议用⭐⭐</strong></p><p><strong>4. ofNullable(T value)</strong></p><p>同上，创建一个<code>Optional</code>对象，但 value 为空时返回<code>Optional.empty()</code>。<strong>推荐使用⭐⭐⭐⭐⭐</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//输出Optional.empty，若存在就输出值</span></span><br><span class="line">    System.out.println(Optional.ofNullable(user));</span><br><span class="line">    <span class="comment">//会报错java.lang.NullPointerException</span></span><br><span class="line">    System.out.println(Optional.of(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. orElse(T other)</strong></p><p>同样是返回<code>Optional</code>中包装的值，但不同的是当取不到值时，返回你指定的 default。<strong>可以用⭐⭐⭐</strong></p><p><strong>6. orElseGet(Supplier&lt;? extends T&gt; other)</strong></p><p>如果创建的Optional中有值存在，则返回此值，否则返回一个由Supplier接口生成的值。<strong>推荐使用⭐⭐⭐⭐⭐</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">createNewUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"user方法创建"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"shawn"</span>, <span class="string">"男"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//下面两个若是空，都会调用本地方法创建新的，但是orElse无论是否存在值，都会执行方法，另一个却不会</span></span><br><span class="line">    User result = Optional.ofNullable(user).orElse(createNewUser());</span><br><span class="line">    User result2 = Optional.ofNullable(user).orElseGet(<span class="keyword">this</span>::createNewUser);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    System.out.println(result2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果显示</span></span><br><span class="line"><span class="comment">user方法创建</span></span><br><span class="line"><span class="comment">user方法创建</span></span><br><span class="line"><span class="comment">User(name=shawn, sex=男)</span></span><br><span class="line"><span class="comment">User(name=shawn, sex=男)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>7. orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</strong></p><p>如果创建的Optional中有值存在，则返回此值，否则抛出一个由指定的Supplier接口生成的异常。<strong>阻塞性业务场景推荐使用⭐⭐⭐⭐</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">null</span>;</span><br><span class="line">    User result = Optional.ofNullable(user).orElseThrow(NullPointerException::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure><p><strong>8. isPresent()</strong></p><p>如果创建的Optional中的值存在，返回true，否则返回false。在某些情况下很有用，但尽量不要用在 if 判断体中。<strong>可以用⭐⭐⭐</strong></p><p><strong>9. ifPresent(Consumer&lt;? super T&gt; consumer)</strong></p><p>判断<code>Optional</code>中是否有值，有值则执行 consumer，否则什么都不干。<strong>日常情况下请使用这个⭐⭐⭐⭐</strong></p><p><strong>10. filter(Predicate&lt;? super T&gt; predicate)</strong></p><p>如果创建的Optional中的值满足filter中的条件，则返回包含该值的Optional对象，否则返回一个空的Optional对象</p><p><strong>11. map</strong></p><p>如果创建的Optional中的值存在，对该值执行提供的Function函数调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"shawn"</span>, <span class="string">"男"</span>);</span><br><span class="line">    String sex = Optional.ofNullable(user)</span><br><span class="line">        .map(User::getSex).orElse(<span class="string">"女"</span>);</span><br><span class="line">    System.out.println(sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出男</span></span><br></pre></td></tr></table></figure><p><strong>12. flagMap</strong></p><p>如果创建的Optional中的值存在，就对该值执行提供的Function函数调用，返回一个Optional类型的值，否则就返回一个空的Optional对象，其返回的值是解除包装的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法在User类中定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">getPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"shawn"</span>, <span class="string">"男"</span>);</span><br><span class="line">    String sex = Optional.ofNullable(user)</span><br><span class="line">        .flatMap(User::getPosition).orElse(<span class="string">"女"</span>);</span><br><span class="line">    System.out.println(sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出男</span></span><br></pre></td></tr></table></figure><p><strong>13. filter</strong></p><p>filter() 接受一个 Predicate 参数，返回测试结果为 true 的值。如果测试结果为 false，会返回一个空的 Optional。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"shawn"</span>, <span class="string">"男"</span>);</span><br><span class="line">    Optional&lt;User&gt; result = Optional.ofNullable(user)</span><br><span class="line">        .filter(u -&gt; u.getName() != <span class="keyword">null</span> &amp;&amp; u.getSex().contains(<span class="string">"女"</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回Optional.empty</span></span><br></pre></td></tr></table></figure><p><strong>14. 其他</strong></p><p>Java 9 为 Optional 类添加了三个方法：or()、ifPresentOrElse() 和 stream()。or() 方法与 orElse() 和 orElseGet() 类似，它们都在对象为空的时候提供了替代情况。or() 的返回值是由 Supplier 参数产生的另一个 Optional 对象。</p><h2 id="5、Base64">5、Base64</h2><p>Base64工具类提供了一套静态方法获取下面三种BASE64编解码器：</p><ul><li>**基本：**输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。</li><li>**URL：**输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。</li><li>**MIME：**输出隐射到MIME友好格式。输出每行不超过76字符，并且使用’\r’并跟随’\n’作为分割。编码输出最后没有行分割。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    String B64 = Base64.getEncoder().encodeToString(<span class="string">"hello?world"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    System.out.println(B64); <span class="comment">// 输出为: aGVsbG8/d29ybGQ=</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解码</span></span><br><span class="line">    <span class="keyword">byte</span>[] baseBytes = Base64.getDecoder().decode(<span class="string">"aGVsbG8/d29ybGQ="</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(baseBytes, StandardCharsets.UTF_8)); <span class="comment">// 输出为: hello?world</span></span><br><span class="line"></span><br><span class="line">    String urlB64 = Base64.getUrlEncoder().encodeToString(<span class="string">"hello?world"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    System.out.println(urlB64); <span class="comment">// 输出为: aGVsbG8_d29ybGQ=</span></span><br><span class="line"></span><br><span class="line">    String mineB64 = Base64.getMimeEncoder().encodeToString(<span class="string">"hello?world"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    System.out.println(mineB64); <span class="comment">// 输出为: aGVsbG8/d29ybGQ=</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Java-8-日期时间">6、Java 8 日期时间</h2><blockquote><p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前的日期时间</span></span><br><span class="line">    LocalDateTime currentTime = LocalDateTime.now();</span><br><span class="line">    <span class="comment">//当前时间: 2021-08-05T12:06:15.590185</span></span><br><span class="line">    System.out.println(<span class="string">"当前时间: "</span> + currentTime);</span><br><span class="line"></span><br><span class="line">    LocalDate date1 = currentTime.toLocalDate();</span><br><span class="line">    <span class="comment">//当前日期: 2021-08-05</span></span><br><span class="line">    System.out.println(<span class="string">"当前日期: "</span> + date1);</span><br><span class="line"></span><br><span class="line">    Month month = currentTime.getMonth();</span><br><span class="line">    <span class="keyword">int</span> month1 = currentTime.get(ChronoField.MONTH_OF_YEAR);</span><br><span class="line">    <span class="keyword">int</span> day = currentTime.getDayOfMonth();</span><br><span class="line">    <span class="keyword">int</span> seconds = currentTime.getSecond();</span><br><span class="line">    <span class="comment">//月: 8, 日: 5, 秒: 15</span></span><br><span class="line">    System.out.println(<span class="string">"月: "</span> + month1 +<span class="string">", 日: "</span> + day +<span class="string">", 秒: "</span> + seconds);</span><br><span class="line"></span><br><span class="line">    LocalDateTime date2 = currentTime.withDayOfMonth(<span class="number">10</span>).withYear(<span class="number">2022</span>);</span><br><span class="line">    <span class="comment">//date2: 2022-08-10T12:06:15.590185</span></span><br><span class="line">    System.out.println(<span class="string">"date2: "</span> + date2);</span><br><span class="line"></span><br><span class="line">    LocalDate date3 = LocalDate.of(<span class="number">2022</span>, Month.DECEMBER, <span class="number">12</span>);</span><br><span class="line">    <span class="comment">//date3: 2022-12-12</span></span><br><span class="line">    System.out.println(<span class="string">"date3: "</span> + date3);</span><br><span class="line"></span><br><span class="line">    LocalTime date4 = LocalTime.of(<span class="number">22</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="comment">//date4: 22:15</span></span><br><span class="line">    System.out.println(<span class="string">"date4: "</span> + date4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析字符串</span></span><br><span class="line">    LocalTime date5 = LocalTime.parse(<span class="string">"20:15:30"</span>);</span><br><span class="line">    <span class="comment">//date5: 20:15:30</span></span><br><span class="line">    System.out.println(<span class="string">"date5: "</span> + date5);</span><br><span class="line"></span><br><span class="line">    Instant instant = Instant.now();</span><br><span class="line">    <span class="keyword">long</span> currentMilli = instant.toEpochMilli();</span><br><span class="line">    <span class="comment">//当前毫秒数：1628136375597</span></span><br><span class="line">    System.out.println(<span class="string">"当前毫秒数："</span>+currentMilli);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前时间日期</span></span><br><span class="line">    ZonedDateTime date6 = ZonedDateTime.parse(<span class="string">"2015-12-03T10:15:30+05:30[Asia/Shanghai]"</span>);</span><br><span class="line">    <span class="comment">//date6: 2021-08-05</span></span><br><span class="line">    System.out.println(<span class="string">"date6: "</span> + date1);</span><br><span class="line"></span><br><span class="line">    ZoneId id = ZoneId.of(<span class="string">"Europe/Paris"</span>);</span><br><span class="line">    <span class="comment">//ZoneId: Europe/Paris</span></span><br><span class="line">    System.out.println(<span class="string">"ZoneId: "</span> + id);</span><br><span class="line"></span><br><span class="line">    ZoneId currentZone = ZoneId.systemDefault();</span><br><span class="line">    <span class="comment">//当期时区: Asia/Shanghai</span></span><br><span class="line">    System.out.println(<span class="string">"当期时区: "</span> + currentZone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://www.matools.com/api/java8" target="_blank" rel="noopener">https://www.matools.com/api/java8</a></p><p><a href="https://www.runoob.com/java/java8-new-features.html" target="_blank" rel="noopener">https://www.runoob.com/java/java8-new-features.html</a></p><p><a href="https://mp.weixin.qq.com/s/8n_3VaAcwauGHgoSG1K14g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/8n_3VaAcwauGHgoSG1K14g</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、Lambda-表达式&quot;&gt;1、Lambda 表达式&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. 不需要参数,返回值为 5  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;() -&amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. 接收一个参数(数字类型),返回其2倍的值  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x -&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * x  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3. 接受2个参数(数字),并返回他们的差值  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(x, y) -&amp;gt; x – y  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 4. 接收2个int型整数,返回他们的和  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y) -&amp;gt; x + y  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(String s) -&amp;gt; System.out.print(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出Hello shawn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test12&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// 用括号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	GreetingService greetService = (message) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello &quot;&lt;/span&gt; + message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	greetService.sayMessage(&lt;span class=&quot;string&quot;&gt;&quot;shawn&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GreetingService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String message)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    <category term="java基础" scheme="https://www.shawn22.xyz/categories/Java/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java8" scheme="https://www.shawn22.xyz/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>vue3打包后部分页面空白</title>
    <link href="https://www.shawn22.xyz/posts/4c4cc90e.html"/>
    <id>https://www.shawn22.xyz/posts/4c4cc90e.html</id>
    <published>2021-08-03T03:56:32.000Z</published>
    <updated>2021-08-05T05:04:26.377Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、问题描述">一、问题描述</h3><p>在开发模式下，使用命令<code>npm run serve</code>运行可以正常显示，但使用<code>npm run bulid</code>打包后打开index.html文件发现显示白屏，但是资源都能正常获取，其他页面也显示正常。<br><img src="https://img-blog.csdnimg.cn/1bddb29ab3924cc098a2a364dd2596e3.png" alt="请添加图片描述"></p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/a6cc41472c9b42b9be84132825a9b28e.png" alt="请添加图片描述"></p><h3 id="二、问题解决">二、问题解决</h3><p>查找了很长时间。发现问题是透明度的问题，原来我在一个页面设置的透明度为75%，但是打包后显示则为1%，原因好像是预处理器无视了百分号，把75这个值clip到1%，因此无法显示出来。这里把opacity设置为小数，把75%设置为0.75重新打包即可正常显示。</p><p><img src="https://img-blog.csdnimg.cn/bed1a1bb95114c98ac341ec9fd46bf7c.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/eee10644eb234a7494926f7260bdaa0b.png" alt="请添加图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、问题描述&quot;&gt;一、问题描述&lt;/h3&gt;
&lt;p&gt;在开发模式下，使用命令&lt;code&gt;npm run serve&lt;/code&gt;运行可以正常显示，但使用&lt;code&gt;npm run bulid&lt;/code&gt;打包后打开index.html文件发现显示白屏，但是资源都能正常获取，其他页面也显示正常。&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/1bddb29ab3924cc098a2a364dd2596e3.png&quot; alt=&quot;请添加图片描述&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.shawn22.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.shawn22.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>EAIBOT小车树莓派3B网络问题</title>
    <link href="https://www.shawn22.xyz/posts/202ae1e9.html"/>
    <id>https://www.shawn22.xyz/posts/202ae1e9.html</id>
    <published>2021-07-27T07:51:04.000Z</published>
    <updated>2021-08-05T05:04:26.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、问题描述">一、问题描述</h2><p>电脑和EAIBOT小车的树莓派3b连接好路由器WIFI后，树莓派和电脑能够正常通信，电脑能正常上网，但是发现树莓派无法上网。命令<code>ping baidu.com</code>显示找不到主机，在修改<code>/etc/resolv.conf</code>中的<code>nameserver 8.8.8.8</code>DNS配置后仍显示网络不可达。</p><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210727144414044.png" alt="image-20210727144414044"></p><a id="more"></a><h2 id="二、问题分析">二、问题分析</h2><p>输入<code>ifconfig</code>命令后，eth0是以太网网卡，lo指的是本地回环，wlan0是无线网卡，我无线路由器网段为192.168.32.x，现在是无线网进行连接，局域网能正常通讯。</p><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210727150148403.png" alt="image-20210727150148403"></p><p>因为我连接了wlan0的wifi，因此可以正常通信，但是要访问外部网络时，由于我的以太网网卡优先级高于无线网卡，且以太网网段不在和路由器同一个网段中，此时通过eth0无法访问外网！</p><h2 id="三、解决方案">三、解决方案</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方案一：禁用以太网卡</span></span><br><span class="line">sudo ifconfig eth0 down</span><br><span class="line"><span class="comment">#方案二：设置eth0网卡ip到同网段</span></span><br><span class="line"><span class="comment">#打卡网卡</span></span><br><span class="line">sudo ifconfig eth0 up</span><br><span class="line"><span class="comment">#设置ip</span></span><br><span class="line">sudo ifconfig eth0 192.168.32.203</span><br><span class="line"><span class="comment">#配置好即可上网</span></span><br></pre></td></tr></table></figure><h2 id="四、ip静态配置">四、ip静态配置</h2><p>静态的IP地址，一来可以防范DHCP自动分配的IP来回变动，导致远程SSH时常无法连接；二来还可以提高树莓派的网络连接速度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意: wifi需要将网卡设置为 wlan0 而不是 eth0</span></span><br><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">sudo vim /etc/dhcpcd.conf</span><br><span class="line"><span class="comment"># 指定接口 eth0</span></span><br><span class="line">interface eth0</span><br><span class="line"><span class="comment"># 指定静态IP，/24表示子网掩码为 255.255.255.0</span></span><br><span class="line">static ip_address=192.168.32.203/24</span><br><span class="line"><span class="comment"># 路由器/网关IP地址</span></span><br><span class="line"><span class="comment"># 手动自定义DNS服务器，这是我路由器默认网关</span></span><br><span class="line">static routers=192.168.32.1 </span><br><span class="line">static domain_name_servers=114.114.114.114</span><br><span class="line"><span class="comment"># 最后重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、问题描述&quot;&gt;一、问题描述&lt;/h2&gt;
&lt;p&gt;电脑和EAIBOT小车的树莓派3b连接好路由器WIFI后，树莓派和电脑能够正常通信，电脑能正常上网，但是发现树莓派无法上网。命令&lt;code&gt;ping baidu.com&lt;/code&gt;显示找不到主机，在修改&lt;code&gt;/etc/resolv.conf&lt;/code&gt;中的&lt;code&gt;nameserver 8.8.8.8&lt;/code&gt;DNS配置后仍显示网络不可达。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210727144414044.png&quot; alt=&quot;image-20210727144414044&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="https://www.shawn22.xyz/posts/177bfdaa.html"/>
    <id>https://www.shawn22.xyz/posts/177bfdaa.html</id>
    <published>2021-06-17T02:16:39.000Z</published>
    <updated>2021-06-17T02:21:17.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Docker概述">一、Docker概述</h2><h3 id="1、Docker历史">1、Docker历史</h3><blockquote><p>更详细的关于Docker历史详见<a href="https://baike.baidu.com/item/Docker/13344470?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p></blockquote><p>Docker 公司起初是一家名为 <code>dotCloud</code> 的平台即服务（Platform-as-a-Service, PaaS）提供商。底层技术上，dotCloud平台利用了 Linux 容器技术。2013年，dotCloud 的 PaaS 业务并不景气，公司需要寻求新的突破。2013 年 3 月，dotCloud 公司的创始人之一，Docker 之父，28 岁的 <strong>Solomon Hykes</strong> 正式决定，将 Docker 项目开源。开源当月， Docker 0.1 版本发布。此后的每一个月， Docker 都会发布一个版本。到 2014 年 6 月 9 日， Docker 1.0 版本正式发布。而在Docker火了之后，<code>dotCloud</code>公司干脆把公司名字也改成了 <code>Docker Inc</code>。</p><a id="more"></a><h3 id="2、Docker介绍">2、Docker介绍</h3><p>Docker是基于Go语言实现的云开源项目。Docker的主要目标是“Build，Ship and Run Any App , Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。</p><h3 id="3、Docker与虚拟机对比">3、Docker与虚拟机对比</h3><ul><li><p>虚拟机属于虚拟化技术；而Docker这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。</p></li><li><p>虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢；而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。</p></li><li><p>Docker启动时间很快，几秒钟就能完成，而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）；此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。</p></li><li><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p></li><li><p>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</p></li></ul><blockquote><p>Docker官网：<a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a><br>Docker中文网站：<a href="https://www.docker-cn.com" target="_blank" rel="noopener">https://www.docker-cn.com</a><br>Docker Hub官网：<a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a>  （仓库）</p></blockquote><h2 id="二、Docker安装">二、Docker安装</h2><h3 id="1、Docker的基本组成">1、Docker的基本组成</h3><p><strong>Docker架构图</strong><br><img src="https://img-blog.csdnimg.cn/20210617101257800.png" alt="在这里插入图片描述"></p><ul><li>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是 image镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</li><li>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</li><li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</li><li>仓库是放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。</li></ul><h3 id="2、安装过程">2、安装过程</h3><p>1、官网安装手册：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p><p>2、linux内核推荐3.8及以上，这里我使用了centos8</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看内核版本</span></span><br><span class="line">uname -r</span><br><span class="line"><span class="comment">#查看系统版本信息</span></span><br><span class="line">cat /etc/os-release</span><br></pre></td></tr></table></figure><p>3、yum安装gcc相关环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc </span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>4、卸载旧环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure><p>5、安装需要的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>6、设置仓库镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方源是国外的，用国内源代替</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>7、更新yum软件包索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#centos8使用该命令，其他版本可能会有些许不同</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>8、安装Docker CE（社区版）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>9、Docker启动、测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#查看版本信息</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment">#运行hello-word，在这里因为本地镜像没有会先拉远程镜像然后启动容器，如果没有找到就报错</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p>10、Docker卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先停止docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment">#卸载docker</span></span><br><span class="line">yum -y remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment">#删除目录</span></span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h3 id="3、阿里云镜像加速">3、阿里云镜像加速</h3><p>进入阿里云搜索镜像容器服务，选择管理控制台，找到镜像工具下的镜像加速器，找到相应版本的，每个人都有自己的加速器地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建目录</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"><span class="comment">#设置加速</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://raw0m61v.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">#重载配置</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="三、Docker常用命令">三、Docker常用命令</h2><h3 id="1、帮助命令">1、帮助命令</h3><blockquote><p>官方文档：<a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version  <span class="comment"># 显示 Docker 版本信息</span></span><br><span class="line">docker info<span class="comment"># 显示 Docker 系统信息，包括镜像和容器数</span></span><br><span class="line">docker &lt;命令&gt; --<span class="built_in">help</span>  <span class="comment"># 帮助命令</span></span><br></pre></td></tr></table></figure><h3 id="2、镜像命令">2、镜像命令</h3><p><strong>docker images</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本地主机上的镜像 </span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 同一个仓库源可以有多个 TAG，代表这个仓库源的不同版本，我们使用REPOSITORY：TAG 定义不同的镜像，如果你不定义镜像的标签版本，docker将默认使用 lastest 镜像！</span></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">-a <span class="comment">#列出本地所有镜像</span></span><br><span class="line">-q <span class="comment">#只显示镜像id</span></span><br></pre></td></tr></table></figure><p><strong>docker search</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#搜索镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="comment"># docker search 某个镜像的名称, 对应DockerHub仓库中的镜像</span></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">--filter=stars=50  <span class="comment">#列出收藏数不小于指定值的镜像。</span></span><br></pre></td></tr></table></figure><p><strong>docker pull</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像，不写tag，默认是latest</span></span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="comment"># 指定版本下载</span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>docker rmi</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi -f 镜像id  <span class="comment">#删除单个</span></span><br><span class="line">docker rmi -f 镜像名:tag 镜像名:tag   <span class="comment">#删除多个</span></span><br><span class="line">docker rmi -f $(docker images -qa)   <span class="comment"># 删除全部</span></span><br></pre></td></tr></table></figure><h3 id="3、容器命令">3、容器命令</h3><p>==有镜像才能创建容器==</p><p><strong>新建容器并启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先拉取一下镜像</span></span><br><span class="line">docker pull centos</span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND][ARG...]</span><br><span class="line"><span class="comment"># 常用参数说明</span></span><br><span class="line">--name=<span class="string">"Name"</span><span class="comment"># 给容器指定一个名字</span></span><br><span class="line">-d<span class="comment"># 后台方式运行容器，并返回容器的id！</span></span><br><span class="line">-i<span class="comment"># 以交互模式运行容器，通过和 -t 一起使用</span></span><br><span class="line">-t<span class="comment"># 给容器重新分配一个终端，通常和 -i 一起使用</span></span><br><span class="line">-P<span class="comment"># 随机端口映射（大写）</span></span><br><span class="line">-p<span class="comment"># 指定端口映射（小结），一般可以有四种写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用centos进行用交互模式启动容器，在容器内执行/bin/bash命令！</span></span><br><span class="line">docker run -it centos /bin/bash</span><br><span class="line"><span class="comment">#退出容器可以使用exit</span></span><br></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker ps [OPTIONS]</span><br><span class="line"><span class="comment"># 常用参数说明</span></span><br><span class="line">-a      <span class="comment"># 列出当前所有正在运行的容器 + 历史运行过的容器 </span></span><br><span class="line">-l      <span class="comment"># 显示最近创建的容器</span></span><br><span class="line">-n=?    <span class="comment"># 显示最近n个创建的容器</span></span><br><span class="line">-q      <span class="comment"># 静默模式，只显示容器编号。</span></span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># 容器停止退出 </span></span><br><span class="line">ctrl+P+Q <span class="comment"># 容器不停止退出</span></span><br></pre></td></tr></table></figure><p><strong>启动停止容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start (容器id or 容器名)    <span class="comment"># 启动容器  </span></span><br><span class="line">docker restart (容器id or 容器名)  <span class="comment"># 重启容器  </span></span><br><span class="line">docker stop (容器id or 容器名)    <span class="comment"># 停止容器</span></span><br><span class="line">docker <span class="built_in">kill</span> (容器id or 容器名)   <span class="comment"># 强制停止容器</span></span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id                  <span class="comment"># 删除指定容器</span></span><br><span class="line">docker rm -f $(docker ps -a -q)  <span class="comment"># 删除所有容器</span></span><br><span class="line">docker ps -a -q|xargs docker rm  <span class="comment"># 删除所有容器</span></span><br></pre></td></tr></table></figure><h3 id="4、常用其他命令">4、常用其他命令</h3><p><strong>后台启动容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker run -d 容器名</span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line">docker run -d centos <span class="comment"># 启动centos，使用后台方式启动</span></span><br><span class="line"><span class="comment"># 问题： 使用docker ps 查看，发现容器已经退出了！</span></span><br><span class="line"><span class="comment"># 解释：Docker容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命令，就会自动退出。</span></span><br><span class="line"><span class="comment"># 比如，你运行了nginx服务，但是docker前台没有运行应用，这种情况下，容器启动后，会立即自杀，因为他觉得没有程序了，所以最好的情况是，将你的应用使用前台进程的方式运行启动。</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker logs -f -t --tail 容器id</span><br></pre></td></tr></table></figure><p><strong>查看容器中运行的进程信息，支持 ps 命令参数。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p><strong>进入正在运行的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令1</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [容器id or容器名] /bin/bash</span><br><span class="line"><span class="comment"># 命令2</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="comment"># 区别</span></span><br><span class="line"><span class="comment"># exec   是在容器中打开新的终端，并且可以启动新的进程</span></span><br><span class="line"><span class="comment"># attach 直接进入容器启动命令的终端，不会启动新的进程</span></span><br></pre></td></tr></table></figure><p><strong>从容器文件拷贝</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令，反之亦可</span></span><br><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br><span class="line"><span class="comment"># linux复制查看，是否复制成功，举例</span></span><br><span class="line">docker cp c8530dbbe3b4:/home/f1 /home</span><br></pre></td></tr></table></figure><h3 id="5、小结">5、小结</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/085c7dc4c3eb49044e133cd8aa2c3517.png" alt="image-20210415171859489"></p><h2 id="四、Docker简单实例">四、Docker简单实例</h2><h3 id="1、Docker安装nginx">1、Docker安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#搜索stars大于等于1000的nginx镜像</span></span><br><span class="line">docker search nginx -f=stars=1000</span><br><span class="line"><span class="comment">#拉取nginx最新镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="comment">#运行docker容器，指定容器名字以及映射端口，容器80映射到本机3500</span></span><br><span class="line">docker run -d --name mynginx -p 3500:80 nginx</span><br><span class="line"><span class="comment">#测试是否成功</span></span><br><span class="line">curl localhost:3500</span><br><span class="line"><span class="comment">#进入容器终端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mynginx /bin/bash</span><br><span class="line"><span class="comment">#寻找nginx,/usr/share/nginx里可以修改Index.html</span></span><br><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><h3 id="2、Docker安装tomcat">2、Docker安装tomcat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方文档解释</span></span><br><span class="line"><span class="comment"># -it ：交互模式</span></span><br><span class="line"><span class="comment"># --rm：容器启动成功并退出以后容器就自动移除，一般在测试情况下使用！</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、下载最新版tomcat镜像</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="comment"># 2、启动</span></span><br><span class="line">docker run -d -p 8555:8080 --name tomcat9 tomcat</span><br><span class="line"><span class="comment"># 3、进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat9 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="五、Docker镜像和容器数据卷">五、Docker镜像和容器数据卷</h2><h3 id="1、镜像加载原理">1、镜像加载原理</h3><blockquote><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p></blockquote><p><strong>UnionFS（联合文件系统）</strong>：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual ﬁlesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br><strong>特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><p><img src="https://img-blog.csdnimg.cn/img_convert/616dda39f76d07c18c29097ad16ebcfc.png" alt="img"><br>bootfs(boot ﬁle system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs (root ﬁle system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部！这一层就是我们通常说的容器层，容器之下的都叫镜像层。</p><h3 id="2、镜像commit命令">2、镜像commit命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提交容器副本使之成为一个新的镜像！</span></span><br><span class="line">docker commit </span><br><span class="line"><span class="comment"># 语法</span></span><br><span class="line">docker commit -m=<span class="string">"提交的描述信息"</span> -a=<span class="string">"作者"</span> 容器id 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure><h3 id="3、容器数据卷">3、容器数据卷</h3><blockquote><p>容器的数据持久化，以及容器间的继承和数据共享，相当于双向绑定</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker run -it -v 宿主机绝对路径目录:容器内目录 镜像名</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="comment">#查看数据卷是否挂载成功 docker inspect 容器id 找到mounts</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名挂载</span></span><br><span class="line"><span class="comment">#-v 容器内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="comment"># 匿名挂载的缺点，就是不好维护，通常使用命令 docker volume维护</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="comment"># 具名挂载</span></span><br><span class="line"><span class="comment">#-v 卷名:/容器内路径</span></span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx nginx</span><br><span class="line"><span class="comment"># 查看挂载的路径，也可以docker inspect 容器id 查看容器信息</span></span><br><span class="line">docker volume inspect nginxconfig</span><br><span class="line"></span><br><span class="line"><span class="comment">#--volumes-from可以实现多个容器数据同步,举例</span></span><br><span class="line">docker run -it --name docker03 --volumes-from docker01 centos:1.0</span><br></pre></td></tr></table></figure><h2 id="六、DockerFile">六、DockerFile</h2><blockquote><p>dockerﬁle是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。<br>地址：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p></blockquote><h3 id="1、DockerFile构建">1、DockerFile构建</h3><p><strong>基础知识：</strong><br>1、每条保留字指令都必须为==大写字母==且后面要跟随至少一个参数<br>2、指令按照从上到下，顺序执行<br>3、# 表示注释<br>4、每条指令都会创建一个新的镜像层，并对镜像进行提交<br><strong>构建流程：</strong><br>1、docker从基础镜像运行一个容器<br>2、执行一条指令并对容器做出修改<br>3、执行类似 docker commit 的操作提交一个新的镜像层<br>4、Docker再基于刚提交的镜像运行一个新容器<br>5、执行dockerﬁle中的下一条指令直到所有指令都执行完成！</p><h3 id="2、DockerFile指令">2、DockerFile指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM      <span class="comment"># 基础镜像，当前新镜像是基于哪个镜像的</span></span><br><span class="line">MAINTAINER    <span class="comment"># 镜像维护者的姓名混合邮箱地址</span></span><br><span class="line">RUN    <span class="comment"># 容器构建时需要运行的命令</span></span><br><span class="line">EXPOSE     <span class="comment"># 当前容器对外保留出的端口</span></span><br><span class="line">WORKDIR    <span class="comment"># 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</span></span><br><span class="line">ENV    <span class="comment"># 用来在构建镜像过程中设置环境变量</span></span><br><span class="line">ADD     <span class="comment"># 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</span></span><br><span class="line">COPY    <span class="comment"># 类似ADD，拷贝文件和目录到镜像中！</span></span><br><span class="line">VOLUME    <span class="comment"># 容器数据卷，用于数据保存和持久化工作</span></span><br><span class="line">CMD    <span class="comment"># 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有最后一个生效！docker run时参数可以被覆盖，一般指定默认的运行参数</span></span><br><span class="line">ENTRYPOINT    <span class="comment"># 指定一个容器启动时要运行的命令！和CMD一样，但无法覆盖，一般指定默认的运行命令</span></span><br><span class="line">ONBUILD     <span class="comment"># 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD被触发</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9b70944cd4117093c3bb75565704156e.png" alt="image-20210417150051303"></p><h3 id="3、创建自己的Centos镜像">3、创建自己的Centos镜像</h3><p>1、编写dockerfile文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER shawn&lt;shawn955@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">"---构建完毕---"</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p>2、构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#. 表示当前目录，如果名字是Dockerfile，则可以不需要命令-f dockerfile地址</span></span><br><span class="line">docker build -f dockerfile地址 -t 新镜像名字:TAG .</span><br><span class="line"><span class="comment">#实例</span></span><br><span class="line">docker build -f dockerfile -t mycentos:1.0 .</span><br><span class="line"><span class="comment">#可以查看构建历史</span></span><br><span class="line">docker <span class="built_in">history</span> mycentos</span><br></pre></td></tr></table></figure><h3 id="4、构建自己的tomcat镜像">4、构建自己的tomcat镜像</h3><p>1、准备文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备好以下文件，创建Dockerfile文件，用这个文件名构建时默认不用指定文件了</span></span><br><span class="line">-rw-r--r-- 1 root root  11486964 3月  30 18:46 apache-tomcat-9.0.45.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 189756259 4月  17 15:58 jdk-8u161-linux-x64.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root         0 4月  17 16:05 README.md</span><br></pre></td></tr></table></figure><p>2、构建Dockerfile文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER shawn&lt;shawn955@163.com&gt;</span><br><span class="line"><span class="comment">#拷贝</span></span><br><span class="line">COPY README.md /usr/<span class="built_in">local</span>/README.md</span><br><span class="line"><span class="comment">#把java与tomcat添加到容器中，会自动解压</span></span><br><span class="line">ADD jdk-8u161-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line">ADD apache-tomcat-9.0.45.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment">#设置工作访问时候的WORKDIR路径，登录落脚点</span></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"><span class="comment">#安装vim编辑器</span></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"><span class="comment">#配置java与tomcat环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_161</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/apache-tomcat-9.0.45</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"><span class="comment">#容器运行时监听的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="comment">#启动时运行tomcat</span></span><br><span class="line">CMD /usr/<span class="built_in">local</span>/apache-tomcat-9.0.45/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-9.0.45/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><p>3、构建镜像以及启动挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建镜像</span></span><br><span class="line">docker build -t mytomcat .</span><br><span class="line"><span class="comment">#启动并挂载容器卷，最后只需要在本地宿主机上传java文件即可</span></span><br><span class="line">docker run -d -p 9090:8080 --name mytomcat -v /home/tomcat/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.45/webapps/<span class="built_in">test</span> -v /home/tomcat/build/tomcat/tomcat9logs/:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.45/logs --privileged=<span class="literal">true</span> mytomcat</span><br></pre></td></tr></table></figure><h3 id="5、发布镜像">5、发布镜像</h3><p><strong>发布到Docker Hub官网</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看docker login 命令</span></span><br><span class="line">docker login --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">docker login -u [用户名] -p [密码]</span><br><span class="line"><span class="comment">#发布，需要带标签</span></span><br><span class="line">docker push mytomcat:latest</span><br><span class="line"><span class="comment">#若报错denied: requested access to the resource is denied</span></span><br><span class="line"><span class="comment">#问题：本地镜像名无帐号信息，解决加 tag即可，另外需要加上用户名才能push</span></span><br><span class="line">docker tag [镜像id] shawn222/mytomcat:v1</span><br><span class="line"><span class="comment">#发布</span></span><br><span class="line">docker push shawn222/mytomcat:v1</span><br><span class="line"><span class="comment">#下线</span></span><br><span class="line">docker <span class="built_in">logout</span></span><br></pre></td></tr></table></figure><p><strong>发布到阿里云</strong></p><p><code>登录阿里云&gt;找到容器镜像服务&gt;创建命名空间&gt;创建镜像仓库&gt;点击进入这个镜像仓库</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录</span></span><br><span class="line">docker login --username=[账号] registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"><span class="comment">#标记</span></span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/shawn222/ownwarehouse:[镜像版本号]</span><br><span class="line"><span class="comment">#发布</span></span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/shawn222/ownwarehouse:[镜像版本号]</span><br></pre></td></tr></table></figure><h2 id="七、Docker网络">七、Docker网络</h2><h3 id="1、网络详解">1、网络详解</h3><p>查看本地ip地址<code>ip addr</code>，docker 采用了veth-pair协议，docker每启动一个容器都会生成一对虚拟接口进行通信（这样一对接口叫veth pair）；如同路由器一样进行与容器间的通信。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lo        127.0.0.1         <span class="comment"># 本机回环地址</span></span><br><span class="line">eth0      172.20.49.98/20   <span class="comment"># 服务器私有ip地址</span></span><br><span class="line">docker0   172.17.0.1/16     <span class="comment"># docker网桥</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0f5be5ff2ea23adfcd03641c8c4fca75.png" alt="image-20210517165039059"></p><blockquote><p>在容器启动时使用–link已经过时，原理是在主机的域名和ip直接配置到了hosts文件中</p></blockquote><h3 id="2、自定义网络">2、自定义网络</h3><p>因为使用默认网络创建的容器不能ping通容器名，而使用自定义网络可以ping通</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有网络，默认桥接</span></span><br><span class="line">docker network ls</span><br><span class="line"><span class="comment"># 默认我们不配置网络，也就相当于默认值 --net bridge  使用的docker0 </span></span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line">docker run -d -P --name tomcat02 --net bridge tomcat</span><br><span class="line"><span class="comment"># docker0网络的特点</span></span><br><span class="line">1.它是默认的</span><br><span class="line">2.域名访问不通</span><br><span class="line">3.  可以使用--link，但是有问题</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Docker网络模式</th><th>配置</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">host模式</td><td>–net=host</td><td style="text-align:center">容器和宿主机共享Network namespace。</td></tr><tr><td style="text-align:center">container模式</td><td>-net=container:NAME_or_ID</td><td style="text-align:center">容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。</td></tr><tr><td style="text-align:center">Docker网络模式</td><td>–net=none</td><td style="text-align:center">容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。</td></tr><tr><td style="text-align:center">bridge模式</td><td>–net=bridge</td><td style="text-align:center">（默认为该模式）</td></tr><tr><td style="text-align:center">自定义模式</td><td>-net=自定义</td><td style="text-align:center">用户自己使用network相关命令定义网络，创建容器的时候可以指定为自己定</td></tr></tbody></table><p><strong>创建自定义网络</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line"><span class="comment"># 查看一下是否成功创建</span></span><br><span class="line">docker network ls</span><br><span class="line">docker network inspect mynet</span><br><span class="line"><span class="comment"># 使用自定义网络创建两个容器</span></span><br><span class="line">docker run -d -P --name tomcat-net-01 --net mynet tomcat</span><br><span class="line">docker run -d -P --name tomcat-net-02 --net mynet tomcat</span><br><span class="line"><span class="comment"># 进入容器内，发现使用容器名也可以ping通</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat-net-01 ping tomcat-net-02</span><br></pre></td></tr></table></figure><h3 id="3、网络连通">3、网络连通</h3><p>默认的docker01网络和自定义的网络无法连通，这就是网络隔离，若要一个网段的容器与另一个网段进行通信，则需要使用<code>docker network connect</code>命令</p><p><img src="https://img-blog.csdnimg.cn/img_convert/12002d46e97e2f46373ad0ca9170b8cc.png" alt="image-20210517203104154"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看帮助文档，发现connect以及详情</span></span><br><span class="line">docker network --<span class="built_in">help</span></span><br><span class="line">docker network connect --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># docker network connect [OPTIONS] NETWORK CONTAINER</span></span><br><span class="line"><span class="comment"># 运行以下命令，tomcat01即可与mynet通信，这相当于服务器的公网和私网</span></span><br><span class="line">docker network connect mynet tomcat01</span><br><span class="line"><span class="comment"># 检查发现容器已被自定义网络记录</span></span><br><span class="line">docker network inspect mynet</span><br></pre></td></tr></table></figure><h2 id="八、Docker实战">八、Docker实战</h2><h3 id="1、Idea整合Docker发布自己镜像">1、Idea整合Docker发布自己镜像</h3><p><strong>创建springboot项目</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建最基本的springboot项目</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCintroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello shawn"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行package打包，就会有一个jar包生成</p><p><img src="https://img-blog.csdnimg.cn/img_convert/98f17c5480e8c7fd5aa07bc1151fa261.png" alt="image-20210517212259595"></p><p><strong>打包镜像并启动容器</strong></p><p>在项目下编写 Dockerﬁle 文件，将打包好的jar包拷贝到Dockerﬁle同级目录</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="comment"># 先移动到同级目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./*.jar /app.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--server.port=8080"</span>]</span></span><br><span class="line"><span class="comment"># 指定暴露的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><p>上传jar包和Dockerfile到服务器，保证在同一目录下，构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像名为shawn666的镜像</span></span><br><span class="line">docker build -t shawn666 .</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -d -p 8083:8080 --name shawn-springboot shawn666</span><br><span class="line"><span class="comment"># 测试成功</span></span><br><span class="line">curl localhost:8083/hello</span><br></pre></td></tr></table></figure><h3 id="2、Redis集群部署">2、Redis集群部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#shell脚本循环生成配置文件</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6);\</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">mkdir -p /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf</span><br><span class="line">touch /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1<span class="variable">$&#123;port&#125;</span></span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分别启动docker容器，这里也可以用shell脚本编写</span></span><br><span class="line">docker pull redis</span><br><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 -v /mydata/redis/node-1/data:/data -v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.11 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6372:6379 -p 16372:16379 --name redis-2 -v /mydata/redis/node-2/data:/data -v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.12 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6373:6379 -p 16373:16379 --name redis-3 -v /mydata/redis/node-3/data:/data -v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.13 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6374:6379 -p 16374:16379 --name redis-4 -v /mydata/redis/node-4/data:/data -v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.14 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6375:6379 -p 16375:16379 --name redis-5 -v /mydata/redis/node-5/data:/data -v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.15 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6376:6379 -p 16376:16379 --name redis-6 -v /mydata/redis/node-6/data:/data -v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.16 redis redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="comment">#随机进入一个容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis-1 /bin/bash</span><br><span class="line"><span class="comment">#生成集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1   </span><br><span class="line"><span class="comment">#查看集群结点</span></span><br><span class="line">cluster nodes</span><br><span class="line"><span class="comment">#查看集群信息</span></span><br><span class="line">cluster info</span><br><span class="line"><span class="comment">#集群会自动计算存储位置，若主节点宕机，从节点会成为主节点</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a b</span><br><span class="line">-&gt; Redirected to slot [15495] located at 172.38.0.13:6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="九、Docker-Compose">九、Docker Compose</h2><h3 id="1、Docker-Compose">1、Docker Compose</h3><blockquote><p>Compose是一个用于定义和运行多容器Docker应用程序的工具。使用Compose，可以使用YAML文件来配置应用程序的服务。然后使用一个命令，从配置中创建并启动所有服务。Compose适用于所有环境：生产、暂存、开发、测试以及CI工作流。</p><p>官网地址：<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a></p></blockquote><h3 id="2、Compoese安装">2、Compoese安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#因为compose是docker开源第三方软件，需要额外下载</span></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">#获取可执行权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">#进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure><h3 id="3、yaml配置文件规则">3、yaml配置文件规则</h3><p><code>docker-compose.yml</code>配置文件作为核心文件。详细配置文件官网：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#yaml文件是三层</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">''</span> <span class="comment">#1、版本</span></span><br><span class="line"><span class="attr">services:</span>  <span class="string">/2、服务</span></span><br><span class="line">  <span class="string">服务1:</span>   </span><br><span class="line">  <span class="comment">#服务配置，和docker很像</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="comment">#有依赖关系先启动依赖，最后启动本服务</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="string">......</span></span><br><span class="line">  <span class="string">服务2:</span></span><br><span class="line">    <span class="string">......</span></span><br><span class="line"><span class="comment">#3、其他配置 网络/卷、全局规则</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">configs:</span></span><br></pre></td></tr></table></figure><h3 id="4、Compose体验">4、Compose体验</h3><p>官网demo地址：<a href="https://docs.docker.com/compose/gettingstarted/" target="_blank" rel="noopener">https://docs.docker.com/compose/gettingstarted/</a></p><p><strong>1、前期准备</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir composetest</span><br><span class="line"><span class="built_in">cd</span> composetest</span><br><span class="line"><span class="comment">#创建py文件</span></span><br><span class="line">vim app.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在py文件里写入以下内容，这里是一个简单的web服务</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#这里host主机使用了redis域名，因为docker在同一网络下，可以使用域名进行访问</span></span><br><span class="line">cache = redis.Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hit_count</span><span class="params">()</span>:</span></span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">'hits'</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen &#123;&#125; times.\n'</span>.format(count)</span><br></pre></td></tr></table></figure><p>之后<code>vim requirements.txt</code>文件，写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure><p><strong>2、创建Dockerfile</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line">FROM python:3.7-alpine</span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP=app.py</span><br><span class="line">ENV FLASK_RUN_HOST=0.0.0.0</span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">EXPOSE 5000</span><br><span class="line">COPY . .</span><br><span class="line">CMD [<span class="string">"flask"</span>, <span class="string">"run"</span>]</span><br></pre></td></tr></table></figure><p><strong>3、定义Compose服务（docker-compose.yml）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3.9"</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"5000:5000"</span></span><br><span class="line">  redis:</span><br><span class="line">    image: <span class="string">"redis:alpine"</span></span><br></pre></td></tr></table></figure><p><strong>4、输入<code>docker-compose up</code>运行Compose服务，<code>docker-compose stop</code>停止服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这是生成后的四个文件</span></span><br><span class="line">-rw-r--r-- 1 root root 683 6月  12 19:56 app.py</span><br><span class="line">-rw-r--r-- 1 root root 111 6月  12 19:55 docker-compose.yml</span><br><span class="line">-rw-r--r-- 1 root root 281 6月  12 19:53 Dockerfile</span><br><span class="line">-rw-r--r-- 1 root root  12 6月  12 19:53 requirements.txt</span><br></pre></td></tr></table></figure><p>到如图所示情况后，最后在浏览器输入<code>http://MACHINE_VM_IP:5000</code>即可访问(注意端口的开放)<br><img src="https://img-blog.csdnimg.cn/20210617100654718.png" alt="在这里插入图片描述"></p><h3 id="5、Cpmpose实战">5、Cpmpose实战</h3><blockquote><p>快速搭建wordpress的demo:<a href="https://docs.docker.com/samples/wordpress/" target="_blank" rel="noopener">https://docs.docker.com/samples/wordpress/</a></p><p>对于springboot实战如下</p></blockquote><p><strong>1、创建springboot项目</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml的依赖，要选择web和redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、编写<code>application.yml</code>文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">  <span class="comment">#这里主机使用了名字，因为在docker联通的网络中，可以用主机名代替ip。</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p><strong>3、编写java文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComposeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"view"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().increment(<span class="string">"view"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"您已访问次数"</span>+ redisTemplate.opsForValue().get(<span class="string">"view"</span>)+<span class="string">"次"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、maven打包</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/648a0913b9b0ed4f96c6626869b04b06.png" alt="image-20210614173849606"></p><p><strong>5、在根目录编写dockerfile文件</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./*.jar /app.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--server=8080"</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8808</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"./app.jar"</span>]</span></span><br></pre></td></tr></table></figure><p><strong>6、在根目录编写<code>docker-compose.yml</code>文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.9"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">shawnapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">dockerfile</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">shawnapp</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p><strong>7、上传部署，启动服务</strong></p><p>将<code>docker-compose.yml</code>，<code>dockerfile</code>和jar包上传服务器，启动后即可访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前台启动</span></span><br><span class="line">docker-compose  up </span><br><span class="line"><span class="comment">#后台启动</span></span><br><span class="line">docker-compose  up -d</span><br><span class="line"><span class="comment"># 重新构建</span></span><br><span class="line">docker-compose  up --build</span><br></pre></td></tr></table></figure><h2 id="十、Docker-Swarm">十、Docker Swarm</h2><blockquote><p>Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机，Docker Swarm代码开源在https://github.com/docker/swarm。Docker Swarm 和 Docker Compose 一样，都是 Docker 官方容器编排项目，但不同的是，Docker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务，对于微服务的部署，Docker Swarm 会更加适合。</p></blockquote><p>swarm分为管理节点和工作结点，所有操作都在manager节点上，并且集群的管理节点数量至少为3，manager节点使用raft协议进行管理。</p><p>官网：<a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6bcf2d73e2570c95c0f72035ee4f39c2.png" alt="image-20210615164041790"></p><h3 id="1、服务器的购买和docker安装">1、服务器的购买和docker安装</h3><p>因为至少购买4台云服务器，考虑经济成本，这里我选择了腾讯云的按量计费，云以及按使用流量计费，操作系统使用centos8，云服务器硬件配置为1核2G。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc </span><br><span class="line">yum -y install gcc-c++</span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="comment"># 官方源是国外的，用国内源代替</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>四台云服务器可以一个命令同时执行，这里我使用了finalShell，打开四个不同的服务器后同时进行操作<br><img src="https://img-blog.csdnimg.cn/20210617100608909.png" alt="在这里插入图片描述"></p><h3 id="2、Swarm集群搭建">2、Swarm集群搭建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看网络</span></span><br><span class="line">docker network ls</span><br><span class="line"><span class="comment">#帮助命令</span></span><br><span class="line">docker swarm --<span class="built_in">help</span></span><br><span class="line">docker swarm init --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#从帮助文档库看出需要init，这里使用内网进行搭建，可以ip addr命令查看，也可以登录云平台查看内网地址</span></span><br><span class="line"><span class="comment">#搭建主节点manager</span></span><br><span class="line">docker swarm init --advertise-addr 10.206.0.14</span><br><span class="line"><span class="comment">#work节点在另外两台机器输入相应命令即可</span></span><br><span class="line"><span class="comment">#若想创建主节点，运行，之后复制相应命令到第四台机器即可加入</span></span><br><span class="line">docker swarm join-token manager</span><br><span class="line"><span class="comment">#查看节点情况，这里完成了二主二从，这里即可灵活加入节点</span></span><br><span class="line">docker node ls</span><br></pre></td></tr></table></figure><p>搭建完主节点后，会自动进行提示如何加入工作节点和新的管理节点，在新的服务器上运行即可成为work或manager节点。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b976ee3615ae0ff8694006dd946fae77.png" alt="image-20210615192237766"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c2f3a0d37364645a2cd95ebd8c891fac.png" alt="image-20210615193015971"></p><h3 id="3、Raft协议">3、Raft协议</h3><blockquote><p>Raft协议：保证大多数节点存活；当存活节点数&gt;1时能正常运行，故集群数量必须&gt;3台，保证高可用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#双主双从时，当停止一个manager节点时，另一个也无法正常使用</span></span><br><span class="line"><span class="comment">#修改为三主一从，down掉一个manager节点时，集群仍可正常访问</span></span><br><span class="line">systemctl stop docker</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#离开节点</span></span><br><span class="line">[root@shawn2 ~]<span class="comment"># docker swarm leave</span></span><br><span class="line">Node left the swarm.</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f119d910f70e31deed044f3d93cd24db.png" alt="image-20210615194703767"></p><h3 id="4、Service服务实例">4、Service服务实例</h3><blockquote><p>使用swarm的优点是可以弹性的进行扩缩容集群，因为可以使用名字作为host主机，可以随时增加或者缩减容器；而docker-compose 是单机项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#容器启动！不具有扩缩容器</span></span><br><span class="line">docker run  </span><br><span class="line"><span class="comment">#服务！ 具有扩缩容器，可以滚动更新</span></span><br><span class="line">docker service </span><br><span class="line"><span class="comment">#查看命令帮助！要多使用</span></span><br><span class="line">docker service --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#和docker run类似的命令，创建服务，只能在主节点上创建服务，创建完可以进行访问</span></span><br><span class="line">docker service create --replicas 1 -p 8888:80 --name mynginx nginx</span><br><span class="line"><span class="comment">#查看某个服务，可以查看节点分布在哪几个服务器上</span></span><br><span class="line">docker service ps mynginx</span><br><span class="line"><span class="comment">#查看服务副本数</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="comment">#查看服务日志</span></span><br><span class="line">docker service logs mynginx</span><br><span class="line"><span class="comment">#扩容至5个副本以及缩小至2个副本，缩扩容都可用</span></span><br><span class="line">docker service scale mynginx=5</span><br><span class="line">docker service update --replicas 2 mynginx</span><br><span class="line"><span class="comment">#删除服务</span></span><br><span class="line">docker service rm mynginx</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210617100810621.png" alt="在这里插入图片描述"></p><h3 id="5、服务、任务简单小结">5、服务、任务简单小结</h3><p><strong>Swarm</strong><br>集群的管理和编号。  docker可以初始化一个 swarm 集群，其他节点可以加入。（管理、工作者）<br><strong>Node</strong><br>就是一个docker节点。多个节点就组成了一个网络集群。（管理、工作者）<br><strong>Service</strong></p><p>服务 （Services） 是指一组任务的集合，服务定义了任务的属性。服务有两种模式：</p><ul><li><code>replicated services</code> 按照一定规则在各个工作节点上运行指定个数的任务。</li><li><code>global services</code> 每个工作节点上运行一个任务</li></ul><p>两种模式通过 <code>docker service create</code> 的 <code>--mode</code> 参数指定。</p><p><strong>Task</strong><br>任务 （Task）是Swarm中的最小的调度单位，目前来说就是一个单一的容器。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1f1dee52f056b5fb36118044d13426b4.png" alt="image-20210616114530443"></p><h3 id="6、Docker-Stack">6、Docker Stack</h3><blockquote><p>docker-compose.yml 来一次配置、启动多个容器，在 Swarm集群中也可以使用 compose 文件 （<code>docker-compose.yml</code>） 来配置、启动多个服务。而<code>docker service create</code> 一次只能部署一个服务，使用stack部署 <code>docker-compose.yml</code> 我们可以一次启动多个关联的服务。</p></blockquote><p>首先创建<code>docker-compose.yml</code>文件，首先要启动swarm集群服务，其中的 <code>visualizer</code> 服务提供一个可视化页面，我们可以从浏览器中很直观的查看集群中各个服务的运行节点。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">visualizer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">    <span class="attr">stop_grace_period:</span> <span class="string">1m30s</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">overlay:</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#帮助命令</span></span><br><span class="line">docker stack --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#集群化方式部署cpmpose，-c指定某个文件</span></span><br><span class="line"><span class="comment">#命令启动后，浏览器输入 ip:8080即可查看各个节点的情况</span></span><br><span class="line">docker stack deploy -c docker-compose.yml wordpress</span><br><span class="line"><span class="comment">#移除服务</span></span><br><span class="line">docker stack rm wordpress</span><br></pre></td></tr></table></figure><h3 id="7、Docker-Secret">7、Docker Secret</h3><p>用户可以在 Swarm 集群中安全地管理密码、密钥证书等敏感数据，并允许在多个 Docker 容器实例之间共享访问指定的敏感数据。</p><h3 id="8、Docker-Config">8、Docker Config</h3><p>Config无需将配置文件放入镜像或挂载到容器中就可实现对服务的配置，提高了集群的通用性。</p><hr><p>参考文章：</p><p><a href="https://yeasy.gitbook.io/docker_practice/" target="_blank" rel="noopener">https://yeasy.gitbook.io/docker_practice/</a></p><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?from=search&amp;seid=16621290913010547469" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1og4y1q7M4?from=search&amp;seid=16621290913010547469</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Docker概述&quot;&gt;一、Docker概述&lt;/h2&gt;
&lt;h3 id=&quot;1、Docker历史&quot;&gt;1、Docker历史&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;更详细的关于Docker历史详见&lt;a href=&quot;https://baike.baidu.com/item/Docker/13344470?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Docker 公司起初是一家名为 &lt;code&gt;dotCloud&lt;/code&gt; 的平台即服务（Platform-as-a-Service, PaaS）提供商。底层技术上，dotCloud平台利用了 Linux 容器技术。2013年，dotCloud 的 PaaS 业务并不景气，公司需要寻求新的突破。2013 年 3 月，dotCloud 公司的创始人之一，Docker 之父，28 岁的 &lt;strong&gt;Solomon Hykes&lt;/strong&gt; 正式决定，将 Docker 项目开源。开源当月， Docker 0.1 版本发布。此后的每一个月， Docker 都会发布一个版本。到 2014 年 6 月 9 日， Docker 1.0 版本正式发布。而在Docker火了之后，&lt;code&gt;dotCloud&lt;/code&gt;公司干脆把公司名字也改成了 &lt;code&gt;Docker Inc&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://www.shawn22.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="https://www.shawn22.xyz/posts/8eda3648.html"/>
    <id>https://www.shawn22.xyz/posts/8eda3648.html</id>
    <published>2021-06-08T10:23:58.000Z</published>
    <updated>2021-10-24T03:27:22.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Redis概述入门">一、Redis概述入门</h2><h3 id="1、NoSQL概述">1、NoSQL概述</h3><p><code>NoSQL</code>是指<code>not only Sql</code>，是一种非关系型数据库。其中NoSQL共有四种分类</p><ul><li>KV键值</li><li>文档型数据库(bson、MongoDB)</li><li>列存储数据库(HBase、分布式文件系统)</li><li>图关系数据库(存放关系、例如Neo4j)</li></ul><a id="more"></a><h3 id="2、Redis介绍">2、Redis介绍</h3><blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728" target="_blank" rel="noopener">数据库</a>，并提供多种语言的API。</p></blockquote><p>Redis官网:<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><p>Redis中文官网:<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><h3 id="3、Redis安装">3、Redis安装</h3><p>windows安装：<a href="https://github.com/dmajkic/redis/downloads%EF%BC%88%E4%B8%8D%E6%8E%A8%E8%8D%90win%E5%BC%80%E5%8F%91%EF%BC%89" target="_blank" rel="noopener">https://github.com/dmajkic/redis/downloads（不推荐win开发）</a></p><p>Linux安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从官网下载redis最新版</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.2.4.tar.gz</span><br><span class="line"><span class="comment">#移动到opt目录下</span></span><br><span class="line">mv redis-6.2.4.tar.gz /opt/</span><br><span class="line"><span class="comment"># 解压即可</span></span><br><span class="line">tar -zxvf redis-6.2.4.tar.gz</span><br><span class="line"><span class="comment">#安装基本环境</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"><span class="comment">#进入安装包</span></span><br><span class="line"><span class="built_in">cd</span> redis-6.2.4/</span><br><span class="line"><span class="comment"># 进行编译安装，Redis默认安装路径(和大多数软件一样) /usr/local/bin</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment">#进入redis服务目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment">#创建配置文件目录</span></span><br><span class="line">mkdir conf</span><br><span class="line"><span class="comment">#将/opt/redis-6.2.4/redis.conf进行备份</span></span><br><span class="line">cp /opt/redis-6.2.4/redis.conf conf/myredis.conf</span><br><span class="line"><span class="comment">#修改为后台启动，进入myredis.conf修改daemonize为yes</span></span><br><span class="line">redis-server conf/myredis.conf </span><br><span class="line"><span class="comment">#客户端连接测试</span></span><br><span class="line">redis-cli -p 6379</span><br><span class="line"><span class="comment">#关闭程序，cli中先shutdown，后exit</span></span><br><span class="line"><span class="comment">#查看进程</span></span><br><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure><h3 id="4、Redis压力测试">4、Redis压力测试</h3><blockquote><p>Redis-benchmark官方默认压测工具</p></blockquote><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">选项</th><th style="text-align:left">描述</th><th>默认值</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">-h</td><td style="text-align:left">指定服务器主机名</td><td>127.0.0.1</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">-p</td><td style="text-align:left">指定服务器端口号</td><td>6379</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">-s</td><td style="text-align:left">指定服务器socket</td><td></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">-c</td><td style="text-align:left">指定并发连接数</td><td>50</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">-n</td><td style="text-align:left">指定请求数</td><td>10000</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">-d</td><td style="text-align:left">以字节的形式指定SET/GET值的数据大小</td><td>3</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">-k</td><td style="text-align:left">1=keep alive 0=reconnect</td><td>1</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">-r</td><td style="text-align:left">SET/GET/INCR使用随机key,SADD使用随机值</td><td></td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">-P</td><td style="text-align:left">通过管道传输</td><td>1</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">-q</td><td style="text-align:left">强制退出redis。仅显示query/sec值</td><td></td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">–csv</td><td style="text-align:left">以CSV格式输出</td><td></td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">-l</td><td style="text-align:left">生成循环，永久执行</td><td></td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">-t</td><td style="text-align:left">仅运行以逗号分隔的测试命令列表</td><td></td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">-I</td><td style="text-align:left">Idle模式。仅打开N个idle连接并等待</td><td></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启服务后在当前目录进行测试</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure><h3 id="5、基础知识">5、基础知识</h3><p>redis默认16个数据库，默认使用第一个，使用<code>select</code>进行切换数据库，Redis6之前是单线程的，因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽，而单线程复杂度低，又不需要CPU上下文切换，也无需加锁。而在Redis6开始支持多线程，默认仍然是不开启，开启需要在<code>redis.conf </code>进行设置，其中Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程顺序执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br><span class="line"><span class="comment">#切换数据库</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; DBSIZE</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> name shawn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get name</span><br><span class="line"><span class="string">"shawn"</span></span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line"><span class="comment">#清除数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment">#清除全部数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; FLUSHALL</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#关闭服务并退出</span></span><br><span class="line">127.0.0.1:6379[1]&gt; SHUTDOWN</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="二、Redis五大基本数据类型">二、Redis五大基本数据类型</h2><blockquote><p>Redis 是一种开源（BSD 许可）、内存中数据结构存储，用作数据库、缓存和消息代理。 Redis 提供了诸如字符串、散列、列表、集合、带范围查询的排序集合、位图、超级日志、地理空间索引和流等数据结构。 Redis 内置复制、Lua 脚本、LRU 驱逐、事务和不同级别的磁盘持久化，并通过 Redis Sentinel 和 Redis Cluster 自动分区提供高可用性。</p></blockquote><p>Redis有五大基本数据类型：</p><ul><li>String(字符串类型)</li><li>Hash(哈希，类似java的Map)</li><li>List(列表)</li><li>Set(集合)</li><li>ZSet(有序集合)</li></ul><h3 id="1、Redis-key">1、Redis-key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name shawn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379&gt; exists name <span class="comment">#是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name <span class="comment">#类型</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; move name 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379&gt; expire age 10 <span class="comment">#设置过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl age <span class="comment">#查看还有多久过期</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="2、String类型">2、String类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># set、get、del、append、strlen</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name shawn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; append name ,hello <span class="comment">#追加</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; strlen name <span class="comment">#字符串长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">"shawn,hello"</span></span><br><span class="line">127.0.0.1:6379&gt; del name <span class="comment">#删除</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># incr、decr      一定要是数字才能进行加减，+1 和 -1。</span></span><br><span class="line"><span class="comment"># incrby、decrby  命令将 key 中储存的数字加上指定的增量值。</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr views <span class="comment">#自增1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; decr views <span class="comment">#自减1</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; incrby views 10 <span class="comment">#自增10</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; decrby views 5 <span class="comment">#自减5</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">"5"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># range [范围]</span></span><br><span class="line"><span class="comment"># getrange 获取指定区间范围内的值，类似between...and的关系，从零到负一表示全部</span></span><br><span class="line"><span class="comment"># setrange 设置指定区间范围内的值，格式是setrange key值 具体值</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name hello,shawn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getrange name 6 11</span><br><span class="line"><span class="string">"shawn"</span></span><br><span class="line">127.0.0.1:6379&gt; setrange name 6 shanw22</span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"hello,shanw22"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># setex（set with expire） 设置过期时间</span></span><br><span class="line"><span class="comment"># setnx（set if not exist）不存在就设置(分布式锁常用)</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; setex key1 30 hello <span class="comment">#设置key1值为hello，过期时间30s</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key1</span><br><span class="line">(<span class="built_in">integer</span>) 25</span><br><span class="line">127.0.0.1:6379&gt; setnx key1 hello <span class="comment">#过期后成功进行设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; setnx key1 hello <span class="comment">#设置失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># mset   同时设置多组k-v</span></span><br><span class="line"><span class="comment"># mget   同时获取多组k-v</span></span><br><span class="line"><span class="comment"># msetnx 当所有 key 都成功设置，返回 1。如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 # 0。该操作为原子性操作，要么都成功，要么失败</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"k3"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">3) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class="comment">#原子操作</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"k3"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">3) <span class="string">"k1"</span></span><br><span class="line"><span class="comment"># 可以缓存对象</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx user:1:name shawn user:1:age 18</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">"shawn"</span></span><br><span class="line">2) <span class="string">"18"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># getset（先get再set）</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; getset db mysql</span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line"><span class="comment">#=======================================================</span></span><br><span class="line"><span class="comment">#Redis中的Value可以是字符串，也可以是数字</span></span><br></pre></td></tr></table></figure><h3 id="3、列表List">3、列表List</h3><p>list相当于双向链表，可以用作队列，也可以作栈，可以做消息队列，在两端操作效率高，最中间操作效率会低</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># Lpush：将一个或多个值插入到列表头部。（左）</span></span><br><span class="line"><span class="comment"># rpush：将一个或多个值插入到列表尾部。（右）</span></span><br><span class="line"><span class="comment"># lrange：返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。</span></span><br><span class="line"><span class="comment"># 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。</span></span><br><span class="line"><span class="comment"># 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 </span></span><br><span class="line"><span class="comment"># lpop 命令用于移除并返回列表的第一个元素。当列表 key 不存在时，返回 nil</span></span><br><span class="line"><span class="comment"># rpop 移除列表的最后一个元素，返回值为移除的元素</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1 <span class="comment">#获取list中的值</span></span><br><span class="line">1) <span class="string">"two"</span></span><br><span class="line">2) <span class="string">"one"</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"two"</span></span><br><span class="line">2) <span class="string">"one"</span></span><br><span class="line">3) <span class="string">"three"</span></span><br><span class="line">127.0.0.1:6379&gt; lpop list</span><br><span class="line"><span class="string">"two"</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list</span><br><span class="line"><span class="string">"three"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># lindex，按照索引下标获得元素（-1代表最后一个，0代表是第一个）</span></span><br><span class="line"><span class="comment"># llen 用于返回列表的长度。</span></span><br><span class="line"><span class="comment"># lrem key 根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素</span></span><br><span class="line"><span class="comment"># ltrim key 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被 删除。</span></span><br><span class="line"><span class="comment"># rpoplpush 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</span></span><br><span class="line"><span class="comment"># lset key index value 将列表 key 下标为 index 的元素的值设置为 value</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 0</span><br><span class="line"><span class="string">"one"</span></span><br><span class="line">127.0.0.1:6379&gt; llen list</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 one <span class="comment">#移除2个one的值，这里只有一个，故删除了1个</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list mylist</span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 0 hi <span class="comment">#第0个value更新，key不存在会报错</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># linsert key before/after pivot value 用于在列表的元素前或者后插入元素 </span></span><br><span class="line"><span class="comment"># 将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"hi"</span></span><br><span class="line">2) <span class="string">"hello1"</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list after hi new <span class="comment">#在hi后插入new</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"hi"</span></span><br><span class="line">2) <span class="string">"new"</span></span><br><span class="line">3) <span class="string">"hello1"</span></span><br></pre></td></tr></table></figure><h3 id="4、集合Set">4、集合Set</h3><p>set中的值不能重复，是无序不重复的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># sadd 将一个或多个成员元素加入到集合中，不能重复</span></span><br><span class="line"><span class="comment"># smembers 返回集合中的所有的成员。</span></span><br><span class="line"><span class="comment"># sismember 命令判断成员元素是否是集合的成员。</span></span><br><span class="line"><span class="comment"># scard，获取集合里面的元素个数</span></span><br><span class="line"><span class="comment"># rem key value 用于移除集合中的一个或多个成员元素</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset shawn</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset </span><br><span class="line">1) <span class="string">"shawn"</span></span><br><span class="line">2) <span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; srem myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># randmember key 命令用于返回集合中的一个随机元素。</span></span><br><span class="line"><span class="comment"># spop key 用于移除集合中的指定 key 的一个或多个随机元素</span></span><br><span class="line"><span class="comment"># smove SOURCE DESTINATION MEMBER，将指定成员 member 元素从 source 集合移动到 destination 集合。</span></span><br><span class="line"><span class="comment"># 数字集合类 差集:sdiff;交集:sinter;并集:sunion(社交软件共同关注等操作)</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; sadd k1 a b c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd k2 b c d</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sdiff k1 k2</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">127.0.0.1:6379&gt; sinter k1 k2</span><br><span class="line">1) <span class="string">"b"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt;  sunion k1 k2</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">3) <span class="string">"b"</span></span><br><span class="line">4) <span class="string">"d"</span></span><br></pre></td></tr></table></figure><h3 id="5、哈希Hash">5、哈希Hash</h3><p>Map集合，相当于key-Map，通常来存储经常变动的对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># hset、hget 命令用于为哈希表中的字段赋值 。</span></span><br><span class="line"><span class="comment"># hmset、hmget 同时将多个field-value对设置到哈希表中。会覆盖哈希表中已存在的字段。 # hgetall 用于返回哈希表中，所有的字段和值。</span></span><br><span class="line"><span class="comment"># hdel    用于删除哈希表 key 中的一个或多个指定字段</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field shawn</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field</span><br><span class="line"><span class="string">"shawn"</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field hello field1 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash field  field1 </span><br><span class="line">1) <span class="string">"hello"</span></span><br><span class="line">2) <span class="string">"world"</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">"field"</span></span><br><span class="line">2) <span class="string">"hello"</span></span><br><span class="line">3) <span class="string">"field1"</span></span><br><span class="line">4) <span class="string">"world"</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash field</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># hlen 获取哈希表中字段的数量。</span></span><br><span class="line"><span class="comment"># hexists 查看哈希表的指定字段是否存在。</span></span><br><span class="line"><span class="comment"># hkeys 获取哈希表中的所有域（field）。</span></span><br><span class="line"><span class="comment"># hvals 返回哈希表所有域(field)的值。</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash <span class="comment">#字段数</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash</span><br><span class="line">1) <span class="string">"field1"</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash</span><br><span class="line">1) <span class="string">"world"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># hincrby 为哈希表中的字段值加上指定增量值</span></span><br><span class="line"><span class="comment"># hsetnx 为哈希表中不存在的的字段赋值</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field 1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field shawn</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><h3 id="6、有序集合Zset">6、有序集合Zset</h3><p>Zset增加了权重参数score，可以用来设置任务的重要程度，例如排行榜应用，Top N</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># zadd    将一个或多个成员元素及其分数值加入到有序集当中。</span></span><br><span class="line"><span class="comment"># zrange  返回有序集中，指定区间内的成员</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zadd myset 1 one 2 two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">(integ127.0.0.1:6379&gt; zrange myset 0 -1</span><br><span class="line">1) <span class="string">"one"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># zrangebyscore 返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 Amy 3500 Mike 200 Shawn</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf <span class="comment">#正序</span></span><br><span class="line">1) <span class="string">"Shawn"</span></span><br><span class="line">2) <span class="string">"Amy"</span></span><br><span class="line">3) <span class="string">"Mike"</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf 2500 WITHSCORES <span class="comment">#带上score进行查询</span></span><br><span class="line">1) <span class="string">"Shawn"</span></span><br><span class="line">2) <span class="string">"200"</span></span><br><span class="line">3) <span class="string">"Amy"</span></span><br><span class="line">4) <span class="string">"2500"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># zrem 移除有序集中的一个或多个成员</span></span><br><span class="line"><span class="comment"># zcard   命令用于计算集合中元素的数量。</span></span><br><span class="line"><span class="comment"># zcount  计算有序集合中指定分数区间的成员数量。</span></span><br><span class="line"><span class="comment"># zrank  返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列。</span></span><br><span class="line"><span class="comment"># zrevrank 返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary Shawn</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zcard salary</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zcount salary -inf 2500</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrank salary Mike <span class="comment">#Mike的薪水排名</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrevrank salary Mike</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><h2 id="三、Redis三种特殊数据类型">三、Redis三种特殊数据类型</h2><h3 id="1、GEO地理位置">1、GEO地理位置</h3><blockquote><p>GEO 的数据结构总共有六个常用命令：geoadd、geopos、geodist、georadius、 georadiusbymember、gethash<br>官方文档：<a href="https://www.redis.net.cn/order/3685.html" target="_blank" rel="noopener">https://www.redis.net.cn/order/3685.html</a></p></blockquote><p>因为存在中文，redis客户端启动时命令<code>redis-cli -p 6379 --raw</code></p><p><strong>geoadd</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">geoadd key longitude latitude member ...</span><br><span class="line"><span class="comment"># 将给定的空间元素(纬度、经度、名字)添加到指定的键里面。</span></span><br><span class="line"><span class="comment"># 这些数据会以有序集he的形式被储存在键里面，从而使得georadius和georadiusbymember这样的命令可以在之后通过位置查询取得这些元素。</span></span><br><span class="line"><span class="comment"># geoadd命令以标准的x,y格式接受参数,所以用户必须先输入经度,然后再输入纬度。</span></span><br><span class="line"><span class="comment"># geoadd能够记录的坐标是有限的:非常接近两极的区域无法被索引。</span></span><br><span class="line"><span class="comment"># 有效的经度介于-180-180度之间，有效的纬度介于-85.05112878 度至 85.05112878 度之间。当用户尝试输入一个超出范围的经度或者纬度时,geoadd命令将返回一个错误。</span></span><br><span class="line"><span class="comment">#===============================================</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.23 40.22 北京</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.54 29.40 重庆 108.93 34.23 西安 114.02 30.58 武汉</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><p><strong>geopos</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">geopos key member [member...]</span><br><span class="line"><span class="comment">#从key里返回所有给定位置元素的位置（经度和纬度）</span></span><br><span class="line"><span class="comment">#===============================================</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city 北京</span><br><span class="line">1) 1) <span class="string">"116.23000055551528931"</span></span><br><span class="line">   2) <span class="string">"40.2200010338739844"</span></span><br></pre></td></tr></table></figure><p><strong>geodist</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定单位的参数 unit 必须是以下单位的其中一个：</span></span><br><span class="line"><span class="comment"># m 表示单位为米。</span></span><br><span class="line"><span class="comment"># km 表示单位为千米。</span></span><br><span class="line"><span class="comment"># mi 表示单位为英里。</span></span><br><span class="line"><span class="comment"># ft 表示单位为英尺。</span></span><br><span class="line"><span class="comment"># 如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位。</span></span><br><span class="line"><span class="comment">#==================================================</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city 北京 重庆 km</span><br><span class="line"><span class="string">"1491.6716"</span></span><br></pre></td></tr></table></figure><p><strong>georadious</strong></p><p>以给定的经纬度为中心， 找出某一半径内的元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 附近范围内查询，比如附近的人功能的实现,count限制查询出来的数量</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 100 30 1000 km </span><br><span class="line">重庆</span><br><span class="line">西安</span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withcoord withdist count 2</span><br><span class="line">重庆</span><br><span class="line">635.2850</span><br><span class="line">106.54000014066696167</span><br><span class="line">29.39999880018641676</span><br><span class="line">西安</span><br><span class="line">963.3171</span><br><span class="line">108.92999857664108276</span><br><span class="line">34.23000121926852302</span><br></pre></td></tr></table></figure><p><strong>georadiusbymember</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找出指定元素旁边的位置</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city 北京 1000 km</span><br><span class="line">北京</span><br><span class="line">西安</span><br></pre></td></tr></table></figure><p><strong>geohash</strong></p><p>该命令将返回11个字符的Geohash字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis使用geohash将二维经纬度转换为一维字符串，字符串越长表示位置更精确,两个字符串越相似表示距离越近。很少使用</span></span><br><span class="line">127.0.0.1:6379&gt; geohash china:city 北京 重庆</span><br><span class="line">wx4sucu47r0</span><br><span class="line">wm5z22h53v0</span><br></pre></td></tr></table></figure><p><strong>zrem</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># geo底层使用了zset，故可以用此方法进行删除</span></span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">重庆</span><br><span class="line">西安</span><br><span class="line">武汉</span><br><span class="line">北京</span><br><span class="line">127.0.0.1:6379&gt; zrem china:city 北京</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="2、Hyperloglog">2、Hyperloglog</h3><blockquote><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的，固定12KB。可以用来计数网站用户量(允许小量容错)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd mykey a b c d e f g <span class="comment">#创建第一组元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey <span class="comment">#统计元素的基数数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; pfadd mykey1 s f v b r t y u a  <span class="comment">#创建第二组</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfmerge mykey2 mykey mykey1 <span class="comment">#并集</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey2</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br></pre></td></tr></table></figure><h3 id="3、Bitmaps">3、Bitmaps</h3><p>位存储。统计用户信息，活跃，不活跃，未登录等两个状态，都可以使用Bitmaps(只有0和1)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 bitmap 来记录上述事例中一周的打卡记录如下所示：</span></span><br><span class="line"><span class="comment"># 周一：1，周二：0，周三：0，周四：1，周五：1，周六：0，周天：0 （1 为打卡，0 为不打卡）</span></span><br><span class="line">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 6 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 1 <span class="comment">#查询某一天是否打卡</span></span><br><span class="line">(<span class="built_in">integer</span>) 1  </span><br><span class="line">127.0.0.1:6379&gt; bitcount sign  <span class="comment">#统计本周打卡天数</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><h2 id="四、事务">四、事务</h2><p>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。若为编译型错误，则事务无法执行。事务的执行是按顺序执行的，且事务没有隔离级别概念。</p><p>Redis事务：</p><ul><li>开启事务()</li><li>命令入队()</li><li>执行事务()</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span> <span class="comment">#执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">"v1"</span></span><br><span class="line"><span class="comment">#=================================</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; discard  <span class="comment">#放弃事务</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><strong>悲观锁</strong></p><blockquote><p>悲观锁(Pessimistic Lock),顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿到这个数据就会block直到它拿到锁。传统的关系型数据库里面就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在操作之前先上锁。</p></blockquote><p><strong>乐观锁</strong></p><blockquote><p>乐观锁(Optimistic Lock),顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁。但是在更新的时候会判断一下再此期间别人有没有去更新这个数据，可以使用版本号等机制，乐观锁适用于多读的应用类型，这样可以提高吞吐量，乐观锁策略：提交版本必须大于记录当前版本才能执行更新。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用watch监视，成功就修改，可以用来做乐观锁</span></span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> money 100</span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment">#此时新开一个客户端，运行</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 500</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#回到第一个，执行事务，发现监视内容发送变化，修改失败</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">(nil)</span><br><span class="line"><span class="comment"># 若要放弃监视，使用unwatch</span></span><br><span class="line"><span class="comment"># 一但执行 EXEC 开启事务的执行后，无论事务使用执行成功， WARCH 对变量的监控都将被取消。故当事务执行失败后，需重新执行WATCH命令对变量进行监控，并开启新的事务进行操作。</span></span><br></pre></td></tr></table></figure><h2 id="五、Java连接Redis操作">五、Java连接Redis操作</h2><h3 id="1、Jedis">1、Jedis</h3><blockquote><p>Jedis是Redis官方推荐的Java连接开发工具。</p></blockquote><p>首先新建一个空的maven项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--进入maven仓库查找最新版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功连接，输出pong,jedis中已经集成了常用的API，使用.即可查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 如果 Redis 服务设置了密码，需要下面这行，没有就不需要</span></span><br><span class="line">        <span class="comment">// jedis.auth("123456");</span></span><br><span class="line">        System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">        <span class="comment">//查看服务是否运行</span></span><br><span class="line">        System.out.println(<span class="string">"服务正在运行: "</span>+jedis.ping());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、SpringBoot整合Redis">2、SpringBoot整合Redis</h3><p><strong>简单使用</strong></p><p>首先在<code>pom.xml</code>中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring2.0后底层使用lettuce,性能更高，2.0之前采用jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置redis</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisSpringApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="comment">//redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span></span><br><span class="line"><span class="comment">//opsForValue 操作字符申类似string</span></span><br><span class="line"><span class="comment">//opsForList 操作list 类List</span></span><br><span class="line"><span class="comment">//opsForSet</span></span><br><span class="line"><span class="comment">//opsForHash</span></span><br><span class="line"><span class="comment">//opsForZSet</span></span><br><span class="line"><span class="comment">//opsForGeo</span></span><br><span class="line"><span class="comment">//opsForHyperLogLog</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"k"</span>,<span class="string">"v"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码分析</strong></p><p>在<code>External Libraries</code>中找到Redis的自动配置类，在<code>RedisProperties.class</code>也可以看到配置信息</p><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210605140429685.png" alt="image-20210607170901524"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;RedisOperations<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(</span>&#123;RedisProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123;LettuceConnectionConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">JedisConnectionConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//我们可以自定义一个redisTemplate替换默认。下面注解意思是如果Spring容器中有了RedisTemplate对象了，这个自动配置的RedisTemplate不会实例化。</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(name = &#123;<span class="string">"redisTemplate"</span>&#125;)</span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate</span>(RedisConnectionFactory<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">RedisTemplate</span>&lt;<span class="title">Object</span>, <span class="title">Object</span>&gt; <span class="title">redisTemplate</span>(<span class="title">RedisConnectionFactory</span> <span class="title">redisConnectionFactory</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//默认的没有进行过多操作，也没有序列化，不能进行对象传输</span></span><br><span class="line">        <span class="comment">//我们一般使用&lt;String,Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="comment">//String类型常用，单独提出来一个方法</span></span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate</span>(RedisConnectionFactory<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">StringRedisTemplate</span> <span class="title">stringRedisTemplate</span>(<span class="title">RedisConnectionFactory</span> <span class="title">redisConnectionFactory</span>) </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工具封装</strong>(可直接使用)</p><p>自定义<code>RedisTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编写自己的RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash采用String序列方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、Redis-conf配置信息">六、Redis.conf配置信息</h2><p><code>config get *</code>获取全部配置信息</p><p>配置文件信息在<code>/opt/redis-6.2.4/redis.conf</code>，常用配置信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绑定IP，这里指所有ipv4和ipv6都可以访问</span></span><br><span class="line"><span class="built_in">bind</span> * -::* </span><br><span class="line"><span class="comment"># 受保护的 默认开启，若想外网连接必须关闭</span></span><br><span class="line">protected-mode yes</span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># 客户端闲置N秒后关闭连接（0禁用）</span></span><br><span class="line">timeout 0</span><br><span class="line"><span class="comment"># 向客户端发送 TCP ACK 检测连接是否断开，保证连接活跃。单位秒，默认300秒发送一次，如果等于0 就是禁用。</span></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"><span class="comment">#==================general=================</span></span><br><span class="line"><span class="comment"># 默认情况下，Redis不会作为守护程序运行。如果需要，请设置为 yes</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment"># 可通过upstart和systemd管理Redis守护进程</span></span><br><span class="line">supervised no</span><br><span class="line"><span class="comment"># 以后台进程方式运行redis，则需要指定pid文件</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">loglevel notice</span><br><span class="line"><span class="comment"># 指定日志文件名称。指定为空时将输出到标准输出设备中。如果Redis以守护进程启动，当日志文件名称为空时，日志将会输出到 /dev/null。</span></span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"><span class="comment"># 数据库个数</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="comment"># redis 启动的时候显示日志</span></span><br><span class="line">always-show-logo no</span><br><span class="line"><span class="comment">#==================snapshotting 快照=================</span></span><br><span class="line">save 900 1 <span class="comment">#900s有一个key发生改变，触发save</span></span><br><span class="line">save 300 10 <span class="comment">#300s有10个key发生改变，触发save</span></span><br><span class="line">save 60 10000 <span class="comment">#60s有10000个key发生改变，触发save</span></span><br><span class="line"><span class="comment"># 默认值为yes。当启用了RDB且最后一次后台保存数据失败，Redis是否停止接收数据。</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="comment"># 使用压缩rdb文件 yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="comment"># 是否校验rdb文件，更有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"><span class="comment"># rdb 文件得文件名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="comment"># rdb文件是否删除同步锁</span></span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"><span class="comment"># 设置 rdb 文件存放得路径</span></span><br><span class="line">dir ./</span><br><span class="line"><span class="comment">#==================replication 主从复制=================</span></span><br><span class="line"><span class="comment">#当本机为从服务时，设置主服务的IP及端口</span></span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"><span class="comment">#当本机为从服务时，设置主服务的连接密码。</span></span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line"><span class="comment">#本机为从服务时，设置主服务的用户名。</span></span><br><span class="line">masteruser &lt;username&gt;</span><br><span class="line"><span class="comment">#当slave失去与master的连接，或正在拷贝中，如果为yes，slave会响应客户端的请求，数据可能不同步甚至没有数据，如果为no，slave会返回错误"SYNC with master in progress"</span></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"><span class="comment">#如果为yes，slave实例只读，如果为no，slave实例可读可写。</span></span><br><span class="line">replica-read-only yes</span><br><span class="line"><span class="comment">#指定slave定期ping master的周期，默认10秒钟。</span></span><br><span class="line">repl-ping-replica-period 10</span><br><span class="line"><span class="comment">#从服务ping主服务的超时时间，若超过repl-timeout设置的时间，slave就会认为master已经宕了。</span></span><br><span class="line">repl-timeout 60</span><br><span class="line"><span class="comment">#在slave和master同步后（发送psync/sync），后续的同步是否设置成TCP_NODELAY.假如设置成yes，则redis会合并小的TCP包从而节省带宽，但会增加同步延迟(40ms),造成master与slave数据不一致 假如设置成no，则redis master会立即发送同步数据，没有延迟。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"><span class="comment">#当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，这个值越小，就越会被优先选中，但是如果是 0 那是意味着这个 slave 不可能被选中。默认优先级为 100。</span></span><br><span class="line">replica-priority 100</span><br><span class="line"><span class="comment">#==================security 安全=================</span></span><br><span class="line"><span class="comment">#ACL日志的最大长度，默认是128M</span></span><br><span class="line">acllog-max-len 128</span><br><span class="line"><span class="comment">#ACL外部配置文件所在位置</span></span><br><span class="line">aclfile /etc/redis/users.acl</span><br><span class="line"><span class="comment">#当前redis服务的访问密码，默认是不需要密码</span></span><br><span class="line">requirepass 123456</span><br><span class="line"><span class="comment">#也可以命令行设置</span></span><br><span class="line">config <span class="built_in">set</span> requirepass <span class="string">"123456"</span></span><br><span class="line"><span class="comment">#测试ping，发现需要验证127.0.0.1:6379&gt; ping</span></span><br><span class="line">NOAUTH Authentication required. <span class="comment"># 验证</span></span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#==================限制=================</span></span><br><span class="line"><span class="comment"># 设置最大客户连接数</span></span><br><span class="line">maxclients 10000</span><br><span class="line"><span class="comment"># 内存限制字节数</span></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"><span class="comment"># maxmemory-policy 内存达到上限的处理策略</span></span><br><span class="line"><span class="comment">#volatile-lru：利用LRU算法移除设置过过期时间的key。</span></span><br><span class="line"><span class="comment">#volatile-random：随机移除设置过过期时间的key。</span></span><br><span class="line"><span class="comment">#volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）  </span></span><br><span class="line"><span class="comment">#allkeys-lru：利用LRU算法移除任何key。</span></span><br><span class="line"><span class="comment">#allkeys-random：随机移除任何key。</span></span><br><span class="line"><span class="comment">#noeviction：不移除任何key，只是返回一个写错误。</span></span><br><span class="line">maxmemory-policy noeviction</span><br><span class="line"><span class="comment">#==================append only模式=================</span></span><br><span class="line"><span class="comment">#Redis的持久化存储提供两种方式：RDB与AOF。RDB是默认配置(常用)AOF需要手动开启</span></span><br><span class="line">appendonly no</span><br><span class="line"><span class="comment"># 配置文件名字</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"><span class="comment"># appendfsync aof持久化策略的配置</span></span><br><span class="line"><span class="comment"># no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快</span></span><br><span class="line"><span class="comment"># always表示每次写入都执行fsync，以保证数据同步到磁盘</span></span><br><span class="line"><span class="comment"># everysec表示每秒执行一次fsync，可能会导致丢失这1s数据</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment">#重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性</span></span><br><span class="line">No-appendfsync-on-rewrite no</span><br><span class="line"><span class="comment"># 设置重写的基准值</span></span><br><span class="line">Auto-aof-rewrite-min-size 100</span><br><span class="line"><span class="comment">#设置重写的基准值</span></span><br><span class="line">Auto-aof-rewrite-percentage 64mb</span><br><span class="line"><span class="comment">#==================cluster 集群=====================</span></span><br><span class="line"><span class="comment"># 启用集群模式</span></span><br><span class="line">cluster-enabled yes      </span><br><span class="line"><span class="comment"># 设置当前节点连接超时毫秒数</span></span><br><span class="line">cluster-node-timeout 15000     </span><br><span class="line"><span class="comment">#设置当前节点集群配置文件路径</span></span><br><span class="line">cluster-config-file node_6381.conf</span><br></pre></td></tr></table></figure><h2 id="七、Redis持久化">七、Redis持久化</h2><p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p><h3 id="1、RDB-Redis-DataBase">1、RDB(Redis DataBase)</h3><blockquote><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</p></blockquote><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失，且备份时需要消耗内存。</p><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210605195534013.png" alt="image-20210605140429685"></p><p><strong>RDB快照</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于RDB来说，提供了三种机制：save、bgsave、自动触发。</span></span><br><span class="line"><span class="comment"># 自动触发在redis.conf下进行配置</span></span><br><span class="line"><span class="comment"># 三种情况保存的rdb文件可以进行配置，默认在当前目录</span></span><br><span class="line">127.0.0.1:6379&gt; bgsave</span><br><span class="line">Background saving started</span><br><span class="line">127.0.0.1:6379&gt; save</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 若要恢复Redis数据，只需要将dump.rdb文件放到对应dir目录下，Redis会自动进行数据恢复</span></span><br><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) <span class="string">"dir"</span></span><br><span class="line">2) <span class="string">"/usr/local/bin"</span></span><br></pre></td></tr></table></figure><h3 id="2、AOF-Append-Only-File">2、AOF(Append Only File)</h3><blockquote><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#若需要使用aof，需要在配置信息里开启</span></span><br><span class="line"><span class="comment">#aof正常恢复</span></span><br><span class="line"><span class="comment">#将有数据的aof文件复制一份保存到对应目录（conﬁg get dir）恢复：重启redis然后重新加载</span></span><br><span class="line"><span class="comment">#若aof文件异常，redis将无法启动，可进行修复</span></span><br><span class="line">redis-check-aof --fix appendonly.aof</span><br></pre></td></tr></table></figure><h3 id="3、总结">3、总结</h3><p>1、RDB 持久化方式能够在指定的时间间隔内对数据进行快照存储<br>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。<br>3、只做缓存，可以不使用任何持久化<br>4、同时开启两种持久化方式时</p><ul><li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，建议不要只使用AOF，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li></ul><p>5、性能建议</p><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</li></ul><h2 id="八、Redis发布订阅">八、Redis发布订阅</h2><blockquote><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。 Redis 客户端可以订阅任意数量的频道。</p></blockquote><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/pubsub2.png" alt="image-20210605195534013"></p><p><strong>redis发布订阅常用命令</strong></p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">命令</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">PSUBSCRIBE pattern [pattern …]</td><td>订阅一个或多个符合给定模式的频道</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">PUBSUB subcommand [argument [argument …]]</td><td>查看订阅与发布系统状态</td></tr><tr><td style="text-align:center">3</td><td style="text-align:left">PUBLISH channel message</td><td>将信息发送到指定的频道</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">PUNSUBSCRIBE [pattern [pattern …]]</td><td>退订所有给定模式的频道</td></tr><tr><td style="text-align:center">5</td><td style="text-align:left">SUBSCRIBE channel [channel …]</td><td>订阅给定的一个或多个频道的信息</td></tr><tr><td style="text-align:center">6</td><td style="text-align:left">UNSUBSCRIBE [channel [channel …]]</td><td>退订给定的频道</td></tr></tbody></table><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启一个客户端，订阅一个频道</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE shawn</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">"subscribe"</span></span><br><span class="line">2) <span class="string">"shawn"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#打开另一个客户端，发送消息</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH shawn hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#第一个客户端收到订阅消息</span></span><br><span class="line">1) <span class="string">"message"</span></span><br><span class="line">2) <span class="string">"shawn"</span></span><br><span class="line">3) <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><ul><li><p>Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解</p></li><li><p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能</p></li><li><p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 channel ，而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到给定 channel 的订阅链表中</p></li><li><p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者</p></li><li><p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息</p></li></ul><p><strong>使用场景</strong></p><ul><li>Pub/Sub构建实时消息系统</li><li>Pub/Sub构建的实时聊天系统</li></ul><h2 id="九、Redis主从、哨兵和集群">九、Redis主从、哨兵和集群</h2><p><em>这里实验都在一台机器上，故只修改端口，正式操作时应该分布在不同的机器中</em></p><h3 id="1、主从复制">1、主从复制</h3><blockquote><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。 Master以写为主，Slave 以读为主。默认每台Redis服务器都是主节点，单台Redis内存不应超过20G。</p></blockquote><p>对于读多写少的电商</p><p><strong>主从复制作用</strong></p><ul><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ul><p><strong>环境配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看信息</span></span><br><span class="line">127.0.0.1:6379&gt; INFO replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:c75ea02227de8882aa3c60c9b22559e3076270b0</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>配置主从复制，至少一主二从</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成三份配置文件，myredis.conf这里我已经存在了</span></span><br><span class="line">cp conf/myredis.conf conf/myredis01.conf </span><br><span class="line">cp conf/myredis.conf conf/myredis02.conf</span><br><span class="line"><span class="comment">#其次修改配置文件，下面是我其中一个配置</span></span><br><span class="line"><span class="comment">#依次修改port端口号、daemonize为yes、pidfile文件、logfile文件、dbfilename文件</span></span><br><span class="line">port 6370</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_6370.pid</span><br><span class="line">logfile <span class="string">"6370.log"</span></span><br><span class="line">dbfilename <span class="string">"dump6370.rdb"</span></span><br><span class="line"><span class="comment">#保证文件不会重复，最后开启服务，开启三个终端</span></span><br><span class="line">redis-server conf/myredis.conf </span><br><span class="line">redis-server conf/myredis01.conf </span><br><span class="line">redis-server conf/myredis02.conf </span><br><span class="line"><span class="comment">#查看是否成功开启</span></span><br><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure><p><strong>命令行配置(效果暂时，一般是配置文件配置)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#仅在从机进行配置即可，我的两个从机端口为6370和6371</span></span><br><span class="line">127.0.0.1:6370&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6371&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#此时查看主机信息可以看见两个从机已经连接</span></span><br><span class="line">127.0.0.1:6379&gt; INFO replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6371,state=online,offset=280,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6370,state=online,offset=280,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:d0f2fce55c4ee9f4403b7ff342ca7e43ef38d470</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:280</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:280</span><br><span class="line"><span class="comment"># 从机使用此命令可以重新变为主机</span></span><br><span class="line">127.0.0.1:6371&gt; SLAVEOF no one</span><br></pre></td></tr></table></figure><p><strong>配置文件配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入REPLICATION部分，修改从机配置文件</span></span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p><strong>测试细节</strong></p><ul><li>主机能读写，从机只能读，且从机会自动复制主机内容</li><li>主机宕机，从机只能进行读操作</li><li>若命令行操作，从机宕机，重新启动后变为主机，重新设置变为从机后可获取主机最新信息</li></ul><p><strong>复制原理</strong></p><p>Slave 启动成功连接到 master 后会发送一个sync命令，Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。但是只要是重新连接master，一次完全同步（全量复制）将被自动执行</p><ul><li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步</li></ul><h3 id="2、哨兵模式">2、哨兵模式</h3><blockquote><p>哨兵模式能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p></blockquote><p>一般哨兵模式要开启6个进程，假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为==主观下线==。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为==客观下线==。</p><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210607155751506.png" alt="img"></p><p><strong>测试配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一主二从配置不变，加入哨兵进程</span></span><br><span class="line"><span class="comment"># 进入redis目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"><span class="comment"># 复制3个哨兵配置文件sentinel.conf</span></span><br><span class="line">cp /opt/redis-6.2.4/sentinel.conf conf/sentinel1.conf </span><br><span class="line">cp /opt/redis-6.2.4/sentinel.conf conf/sentinel2.conf </span><br><span class="line">cp /opt/redis-6.2.4/sentinel.conf conf/sentinel3.conf</span><br></pre></td></tr></table></figure><p>依次修改3份哨兵配置文件，保证端口、pid文件和日志文件不重名，日志文件在/tmp目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 26381</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">"/var/run/redis-sentinel26381.pid"</span></span><br><span class="line">logfile <span class="string">"26381.log"</span></span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line"><span class="comment">#这里是最重要的，后四个依次是master别名，master的ip、端口号以及得票多少才能成为主机，一般是哨兵一半加一</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在当前目录下依次启动，即完成哨兵模式</span></span><br><span class="line">redis-sentinel conf/sentinel1.conf</span><br><span class="line">redis-sentinel conf/sentinel2.conf</span><br><span class="line">redis-sentinel conf/sentinel3.conf</span><br><span class="line"><span class="comment">#此时若6379主机宕机后，哨兵模式会自动选举产生新的主服务器，当6379重启后，自动变成从机，可以进入/tmp查看日志</span></span><br></pre></td></tr></table></figure><p><strong>配置文件详解</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"><span class="comment"># 是否后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment"># 运行时PID文件</span></span><br><span class="line">pidfile /var/run/redis-sentinel.pid</span><br><span class="line"><span class="comment"># 日志文件(绝对路径)</span></span><br><span class="line">logfile <span class="string">"/opt/app/redis6/sentinel.log"</span></span><br><span class="line"><span class="comment"># 数据目录</span></span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port </span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span></span><br><span class="line"><span class="comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"><span class="comment"># 哨兵连接主节点多长时间没有响应就代表主节点挂了，单位毫秒。默认30000毫秒，30秒。</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"><span class="comment"># 在故障转移时，最多有多少从节点对新的主节点进行同步。这个值越小完成故障转移的时间就越长，这个值越大就意味着越多的从节点因为同步数据而暂时阻塞不可用</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"><span class="comment"># 故障转移的超时时间，默认3分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"><span class="comment">#禁止使用SENTINEL SET设置notification-script和client-reconfig-script</span></span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br><span class="line"><span class="comment"># 配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment"># 通知脚本</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure><h3 id="3、Redis集群">3、Redis集群</h3><blockquote><p>Redis集群由多个节点(Node)组成，Redis 的数据分布在这些节点中。集群中的节点分为主节点和从节点，只有主节点负责读写请求和集群信息的维护，从节点只进行主节点数据和状态信息的复制。Redis集群采用哈希分区的方式对数据进行分区，哈希分区就是对数据的特征值进行哈希，然后根据哈希值决定数据放在哪个节点。其中redis cluster集群是去中心化的，每个节点都是平等的，连接哪个节点都可以获取和设置数据。</p></blockquote><p>Redis集群的作用有下面几点：</p><ul><li><strong>数据分区</strong>：突破单机的存储限制，将数据分散到多个不同的节点存储；</li><li><strong>负载均衡</strong>：每个主节点都可以处理读写请求，提高了并发能力；</li><li><strong>高可用</strong>：集群有着和哨兵模式类似的故障转移能力，提升集群的稳定性；</li></ul><p><strong>普通端口</strong>：即客户端访问端口，如默认的6379；</p><p><strong>集群端口</strong>：普通端口号加10000，如6379的集群端口为16379，用于集群节点之间的通讯</p><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210608101514039.png" alt="image-20210607155751506"></p><p><strong>配置</strong></p><p>分配6个配置文件</p><table><thead><tr><th style="text-align:left">ID</th><th style="text-align:left">IP</th><th style="text-align:left">Host</th><th style="text-align:left">类型</th><th style="text-align:left">从节点</th></tr></thead><tbody><tr><td style="text-align:left">A</td><td style="text-align:left">127.0.0.1</td><td style="text-align:left">6381</td><td style="text-align:left">主</td><td style="text-align:left">AA</td></tr><tr><td style="text-align:left">B</td><td style="text-align:left">127.0.0.1</td><td style="text-align:left">6382</td><td style="text-align:left">主</td><td style="text-align:left">BB</td></tr><tr><td style="text-align:left">C</td><td style="text-align:left">127.0.0.1</td><td style="text-align:left">6383</td><td style="text-align:left">主</td><td style="text-align:left">CC</td></tr><tr><td style="text-align:left">AA</td><td style="text-align:left">127.0.0.1</td><td style="text-align:left">6391</td><td style="text-align:left">从</td><td style="text-align:left">/</td></tr><tr><td style="text-align:left">BB</td><td style="text-align:left">127.0.0.1</td><td style="text-align:left">6392</td><td style="text-align:left">从</td><td style="text-align:left">/</td></tr><tr><td style="text-align:left">CC</td><td style="text-align:left">127.0.0.1</td><td style="text-align:left">6393</td><td style="text-align:left">从</td><td style="text-align:left">/</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分别修改6个目录中的redis.conf文件，主要开启集群以及修改端口和文件路径</span></span><br><span class="line"><span class="comment">#举例其中一个</span></span><br><span class="line">port 6381</span><br><span class="line">port 26381</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">"/var/run/redis-sentinel26381.pid"</span></span><br><span class="line">logfile <span class="string">"26381.log"</span></span><br><span class="line">cluster-enabled yes                            <span class="comment"># 启用集群模式</span></span><br><span class="line">cluster-node-timeout 15000                     <span class="comment"># 设置当前节点连接超时毫秒数</span></span><br><span class="line"><span class="comment">#设置当前节点集群配置文件路径，该文件由集群自动维护，如果有则使用文件中的配置启动；如果没有，则初始化配置并将配置保存到文件中。</span></span><br><span class="line">cluster-config-file node_6381.conf             </span><br><span class="line"><span class="comment">#=========================================</span></span><br><span class="line"><span class="comment">#启动，前三个表示主机，后三个表示从机</span></span><br><span class="line"><span class="comment">#这里的--cluster-replicas表示每个主节点有几个副本节点</span></span><br><span class="line">redis-cli --cluster create 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6391 127.0.0.1:6392 127.0.0.1:6393 --cluster-replicas 1</span><br><span class="line"><span class="comment"># -c，使用集群方式登录</span></span><br><span class="line">redis-cli -c [-h 192.168.30.128] -p 7001 [-a 123456]    </span><br><span class="line"><span class="comment">#集群状态</span></span><br><span class="line">CLUSTER INFO     </span><br><span class="line"><span class="comment">#列出节点信息</span></span><br><span class="line">CLUSTER NODES</span><br></pre></td></tr></table></figure><h2 id="十、Redis缓存">十、Redis缓存</h2><h3 id="1、缓存穿透">1、缓存穿透</h3><blockquote><p>缓存穿透是指查询一个根本不存在的数据，缓存层和持久层都不会命中。在日常工作中出于容错的考虑，如果从持久层查不到数据则不写入缓存层，缓存穿透将导致不存在的数据每次请求都要到持久层去查询，失去了缓存保护后端持久的意义</p></blockquote><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210607170538553.png" alt="image-20210608101514039"></p><h3 id="2、缓存击穿">2、缓存击穿</h3><blockquote><p>系统中存在以下两个问题时需要引起注意：当前key是一个热点key（例如一个秒杀活动），并发量非常大；重建缓存不能在短时间完成，可能是一个复杂计算，例如复杂的SQL、多次IO、多个依赖等。在缓存失效的瞬间，有大量线程来重建缓存，造成后端负载加大，甚至可能会让应用崩溃。</p></blockquote><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210607170758835.png" alt="image-20210607170758835"></p><h3 id="3、缓存雪崩">3、缓存雪崩</h3><blockquote><p>由于缓存层承载着大量请求，有效地保护了存储层，但是如果缓存层由于某些原因不可用（宕机）或者大量缓存由于超时时间相同在同一时间段失效（大批key失效/热点数据失效），大量请求直接到达存储层，存储层压力过大导致系统雪崩。</p></blockquote><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210607170901524.png" alt="image-20210607170538553"></p><hr><hr><p>参考文章：<br><a href="https://blog.csdn.net/wsdc0521/article/details/106316972" target="_blank" rel="noopener">https://blog.csdn.net/wsdc0521/article/details/106316972</a><br><a href="https://blog.csdn.net/weixin_43445935/article/details/115393205" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43445935/article/details/115393205</a><br><a href="https://www.bilibili.com/video/BV1S54y1R7SB?p=12&amp;spm_id_from=pageDriver" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1S54y1R7SB?p=12&amp;spm_id_from=pageDriver</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Redis概述入门&quot;&gt;一、Redis概述入门&lt;/h2&gt;
&lt;h3 id=&quot;1、NoSQL概述&quot;&gt;1、NoSQL概述&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;NoSQL&lt;/code&gt;是指&lt;code&gt;not only Sql&lt;/code&gt;，是一种非关系型数据库。其中NoSQL共有四种分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KV键值&lt;/li&gt;
&lt;li&gt;文档型数据库(bson、MongoDB)&lt;/li&gt;
&lt;li&gt;列存储数据库(HBase、分布式文件系统)&lt;/li&gt;
&lt;li&gt;图关系数据库(存放关系、例如Neo4j)&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    <category term="中间件" scheme="https://www.shawn22.xyz/categories/Java/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="Redis" scheme="https://www.shawn22.xyz/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>mmdetection2 config详解</title>
    <link href="https://www.shawn22.xyz/posts/2f275aa8.html"/>
    <id>https://www.shawn22.xyz/posts/2f275aa8.html</id>
    <published>2021-06-06T04:57:16.000Z</published>
    <updated>2021-06-06T05:05:26.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方文档config详情：<a href="https://mmdetection.readthedocs.io/en/latest/tutorials/config.html" target="_blank" rel="noopener">https://mmdetection.readthedocs.io/en/latest/tutorials/config.html</a></p></blockquote><h3 id="1、配置文件结构">1、配置文件结构</h3><p>在<code>config/_base_</code>文件夹下面总共有4个基础的组件，它们分别是：dataset、model、schedule、default_runtime。</p><a id="more"></a><h3 id="2、配置文件命名风格">2、配置文件命名风格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;model&#125;_[model setting]_&#123;backbone&#125;_&#123;neck&#125;_[norm setting]_[misc]_[gpu x batch_per_gpu]_&#123;schedule&#125;_&#123;dataset&#125;</span><br></pre></td></tr></table></figure><p><code>{xxx}</code>是必选项，<code>[yyy]</code>是可选项</p><ul><li><code>{model}</code>:模型的类型 ，例如<code>faster_rcnn</code>、<code>mask_rcnn</code> 等等.</li><li><code>[model setting]</code>: 给模型一些指定设置, 例如<code>without_semantic for htc</code>、<code>moment for reppoints</code>等等.</li><li><code>{backbone}</code>: backbone 的类型 <code>r50</code> (ResNet-50), <code>x101</code> (ResNeXt-101)。（相当于特征提取网络）</li><li><code>{neck}</code>: neck 的类型选择，例如<code>fpn</code>,<code> pafpn</code>, <code>nasfpn</code>,<code> c4</code>.</li><li><code>[norm_setting]</code>: 如果没有指定，那就默认为<code>bn</code> (Batch Normalization) , 还有其他可选的norm layer类型，比如 <code>gn</code> (Group Normalization)、<code>syncbn</code> (Synchronized Batch Normalization). <code>gn-head</code>/<code>gn-neck </code>表示 GN 仅仅被用在head/neck模块上, gn-all 表示 GN 被用在整个模型上, 例如：backbone, neck, head这些模块。</li><li><code>[misc]</code>: 一些比较杂的模型设置或者插件，例如 <code>dconv</code>, <code>gcb</code>, <code>attention</code>, <code>albu</code>, <code>mstrain</code>.</li><li><code>[gpu x batch_per_gpu]</code>: GPU的个数以及每块GPU上的batch size大小，默认为<code>8*2</code>(8块GPU，每块GPU上2个batch size，相当于batch size为16)。</li><li><code>{schedule}</code>: 训练的 schedule, 可选择的有<code>1x</code>, <code>2x</code>, <code>20e</code>等等. <code>1x</code> 和 <code>2x</code> 分别表示 12 个epochs 和 24个epochs。 20e 被用在 cascade models中,它表示20个epochs. 对于1x/2x而言, 初始的学习率分别在第8/16个epeochs和第11/22个epochs以10的倍率递减。对于<code>20e</code>而言,初始的学习率在第16个epeochs和第19个epochs以10的倍率。</li><li><code>{dataset}</code>: 数据集有<code> coco</code>, <code>cityscapes</code>, <code>voc_0712</code>, <code>wider_face</code>这些选项。</li></ul><h3 id="3、faster-rcnn-r50-fpn-2x-py">3、faster_rcnn_r50_fpn_2x.py</h3><p>首先介绍一下这个配置文件所描述的框架，它是基于resnet50的backbone，有着5个fpn特征层的faster-RCNN目标检测网络，训练迭代次数为标准的24次epoch。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型配置</span></span><br><span class="line">model = dict(</span><br><span class="line">    <span class="comment"># model类型</span></span><br><span class="line">    type=<span class="string">'FasterRCNN'</span>,</span><br><span class="line">    <span class="comment"># 预训练模型：resnet50</span></span><br><span class="line">    pretrained=<span class="string">'torchvision://resnet50'</span>,</span><br><span class="line">    backbone=dict(</span><br><span class="line">        <span class="comment"># backbone类型</span></span><br><span class="line">        type=<span class="string">'ResNet'</span>, </span><br><span class="line">        <span class="comment"># 网络层数</span></span><br><span class="line">        depth=<span class="number">50</span>,</span><br><span class="line">        <span class="comment"># resnet的stage数量</span></span><br><span class="line">        num_stages=<span class="number">4</span>,</span><br><span class="line">        <span class="comment"># 输出的stage的序号</span></span><br><span class="line">        out_indices=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">        <span class="comment"># 冻结的stage数量，即该stage不更新参数，-1表示所有的stage都更新参数</span></span><br><span class="line">        frozen_stages=<span class="number">1</span>,</span><br><span class="line">        <span class="comment"># normalization layers的配置,type 为norm layer的类型, 通常是 BN or GN，requires_grad参数是否训练BN中的gamma和beta参数</span></span><br><span class="line">        norm_cfg=dict(type=<span class="string">'BN'</span>, requires_grad=<span class="literal">True</span>),</span><br><span class="line">        <span class="comment"># 是否冻结BN中的统计信息（相当于模型eval的过程，不进行统计数据）</span></span><br><span class="line">        norm_eval=<span class="literal">True</span>,</span><br><span class="line">        <span class="comment"># 网络风格：如果设置pytorch，则stride为2的层是conv3x3的卷积层；如果设置caffe，则stride为2的层是第一个conv1x1的卷积层</span></span><br><span class="line">        style=<span class="string">'pytorch'</span>),</span><br><span class="line">    neck=dict(</span><br><span class="line">        <span class="comment"># neck类型</span></span><br><span class="line">        type=<span class="string">'FPN'</span>,</span><br><span class="line">        <span class="comment"># 输入的各个stage的通道数</span></span><br><span class="line">        in_channels=[<span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>],</span><br><span class="line">        <span class="comment"># 输出的特征层的通道数</span></span><br><span class="line">        out_channels=<span class="number">256</span>,</span><br><span class="line">        <span class="comment"># 输出的特征层的数量</span></span><br><span class="line">        num_outs=<span class="number">5</span>),</span><br><span class="line">    rpn_head=dict(</span><br><span class="line">        <span class="comment"># RPN网络类型</span></span><br><span class="line">        type=<span class="string">'RPNHead'</span>,</span><br><span class="line">        <span class="comment"># RPN网络的输入通道数</span></span><br><span class="line">        in_channels=<span class="number">256</span>,</span><br><span class="line">        <span class="comment"># 特征层的通道数</span></span><br><span class="line">        feat_channels=<span class="number">256</span>,</span><br><span class="line">        <span class="comment"># 生成anchor的配置</span></span><br><span class="line">        anchor_generator=dict(</span><br><span class="line">            <span class="comment"># 绝大多数都是用AnchorGenerator, SSD 检测器(单阶段的目标检测算法)使用的是SSDAnchorGenerator</span></span><br><span class="line">            type=<span class="string">'AnchorGenerator'</span>,</span><br><span class="line">             <span class="comment"># anchor的生成个数, 特征图上每一个位置所生成的anchor个数为scale * base_sizes</span></span><br><span class="line">            scales=[<span class="number">8</span>],</span><br><span class="line">            <span class="comment"># anchor的宽高比率.</span></span><br><span class="line">            ratios=[<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">2.0</span>],</span><br><span class="line">           <span class="comment"># 在每个特征层上的anchor的步长（对应于原图）</span></span><br><span class="line">            strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>]),</span><br><span class="line">        bbox_coder=dict(</span><br><span class="line">            type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">            <span class="comment"># 均值</span></span><br><span class="line">            target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">            <span class="comment"># 方差</span></span><br><span class="line">            target_stds=[<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>]),</span><br><span class="line">            <span class="comment"># 分类损失函数配置</span></span><br><span class="line">        loss_cls=dict(</span><br><span class="line">            <span class="comment"># 也提供FocalLoss等损失函数</span></span><br><span class="line">            type=<span class="string">'CrossEntropyLoss'</span>, </span><br><span class="line">            <span class="comment"># 是否使用sigmoid来进行分类，如果False则使用softmax来分类</span></span><br><span class="line">            use_sigmoid=<span class="literal">True</span>, </span><br><span class="line">            <span class="comment"># 分类分支所占权重</span></span><br><span class="line">            loss_weight=<span class="number">1.0</span>),</span><br><span class="line">            <span class="comment"># box回归分支的损失函数配置.</span></span><br><span class="line">        loss_bbox=dict(</span><br><span class="line">            type=<span class="string">'L1Loss'</span>, loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">    <span class="comment"># RoIHead 封装了二阶段检测器的第二阶段的模块</span></span><br><span class="line">    roi_head=dict(</span><br><span class="line">        <span class="comment"># RoI head的类型</span></span><br><span class="line">        type=<span class="string">'StandardRoIHead'</span>,</span><br><span class="line">        <span class="comment"># RoI feature extractor 用于 bbox regression.</span></span><br><span class="line">        bbox_roi_extractor=dict(</span><br><span class="line">            <span class="comment"># 类型，大部分默认</span></span><br><span class="line">            type=<span class="string">'SingleRoIExtractor'</span>,</span><br><span class="line">            roi_layer=dict(</span><br><span class="line">                <span class="comment"># 同时还支持DeformRoIPoolingPack 和 ModulatedDeformRoIPoolingPack这两种类型.</span></span><br><span class="line">                type=<span class="string">'RoIAlign'</span>, </span><br><span class="line">                <span class="comment"># feature maps的输出尺度，相当于输出7*7.</span></span><br><span class="line">                output_size=<span class="number">7</span>, </span><br><span class="line">                <span class="comment"># 提取ROI特征层时的样本比例，0表示自适应</span></span><br><span class="line">                sampling_ratio=<span class="number">0</span>),</span><br><span class="line">            <span class="comment"># 提取特征的输出通道数</span></span><br><span class="line">            out_channels=<span class="number">256</span>,</span><br><span class="line">            <span class="comment"># 多尺度特征图的步幅</span></span><br><span class="line">            featmap_strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>]),</span><br><span class="line">        bbox_head=dict(</span><br><span class="line">            <span class="comment"># 全连接层类型</span></span><br><span class="line">            type=<span class="string">'Shared2FCBBoxHead'</span>,</span><br><span class="line">            <span class="comment"># 输入通道数</span></span><br><span class="line">            in_channels=<span class="number">256</span>,</span><br><span class="line">            <span class="comment"># 全连接层输出通道数</span></span><br><span class="line">            fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">            <span class="comment"># ROI特征层尺寸</span></span><br><span class="line">            roi_feat_size=<span class="number">7</span>,</span><br><span class="line">            <span class="comment"># 分类器数量，改自己数据集时修改</span></span><br><span class="line">            num_classes=<span class="number">1</span>,</span><br><span class="line">            <span class="comment"># 同上</span></span><br><span class="line">            bbox_coder=dict(</span><br><span class="line">                type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">                target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                target_stds=[<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.2</span>]),</span><br><span class="line">            <span class="comment"># 是否采用class_agnostic的方式来预测，class_agnostic表示输出bbox时只考虑其是否为前景，后续分类的时候再根据该bbox在网络中的类别得分来分类，也就是说一个框可以对应多个类别</span></span><br><span class="line">            reg_class_agnostic=<span class="literal">False</span>,</span><br><span class="line">            <span class="comment"># 同上</span></span><br><span class="line">            loss_cls=dict(</span><br><span class="line">                type=<span class="string">'CrossEntropyLoss'</span>, use_sigmoid=<span class="literal">False</span>, loss_weight=<span class="number">1.0</span>),</span><br><span class="line">            loss_bbox=dict(type=<span class="string">'L1Loss'</span>, loss_weight=<span class="number">1.0</span>))))</span><br><span class="line">train_cfg = dict(</span><br><span class="line">    rpn=dict(</span><br><span class="line">        assigner=dict(</span><br><span class="line">            <span class="comment"># RPN网络的正负样本划分</span></span><br><span class="line">            type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">            <span class="comment"># 正样本的iou阈值</span></span><br><span class="line">            pos_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">            <span class="comment"># 负样本的iou阈值</span></span><br><span class="line">            neg_iou_thr=<span class="number">0.3</span>,</span><br><span class="line">            <span class="comment"># 正样本的iou最小值。如果assign给ground truth的anchors中最大的IOU低于0.3，则忽略所有的anchors，否则保留最大IOU的anchor</span></span><br><span class="line">            min_pos_iou=<span class="number">0.3</span>,</span><br><span class="line">            <span class="comment"># 是否匹配低质量anchor</span></span><br><span class="line">            match_low_quality=<span class="literal">True</span>,</span><br><span class="line">            <span class="comment"># 忽略bbox的阈值，当ground truth中包含需要忽略的bbox时使用，-1表示不忽略</span></span><br><span class="line">            ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">        sampler=dict(</span><br><span class="line">            <span class="comment"># 正负样本提取器类型</span></span><br><span class="line">            type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">            <span class="comment"># 需提取的正负样本数量</span></span><br><span class="line">            num=<span class="number">256</span>,</span><br><span class="line">            <span class="comment"># 正样本比例</span></span><br><span class="line">            pos_fraction=<span class="number">0.5</span>,</span><br><span class="line">            <span class="comment"># 最大负样本比例，大于该比例的负样本忽略，-1表示不忽略</span></span><br><span class="line">            neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">            <span class="comment"># 把ground truth加入proposal作为正样本</span></span><br><span class="line">            add_gt_as_proposals=<span class="literal">False</span>),</span><br><span class="line">        <span class="comment"># 不允许允许在bbox周围外扩一定的像素，0表示允许</span></span><br><span class="line">        allowed_border=<span class="number">-1</span>,</span><br><span class="line">        <span class="comment"># 正样本权重，-1表示不改变原始的权重</span></span><br><span class="line">        pos_weight=<span class="number">-1</span>,</span><br><span class="line">        <span class="comment"># debug模式</span></span><br><span class="line">        debug=<span class="literal">False</span>),</span><br><span class="line">    <span class="comment"># 在训练过程中生成proposals的配置</span></span><br><span class="line">    rpn_proposal=dict(</span><br><span class="line">        <span class="comment"># 在所有的fpn层内做nms</span></span><br><span class="line">        nms_across_levels=<span class="literal">False</span>,</span><br><span class="line">        <span class="comment"># 在NMS之前的box个数</span></span><br><span class="line">        nms_pre=<span class="number">2000</span>,</span><br><span class="line">        <span class="comment"># NMS处理后保留的box个数</span></span><br><span class="line">        nms_post=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># NMS处理之后所使用的box个数</span></span><br><span class="line">        max_num=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># NMS过程所使用的阈值</span></span><br><span class="line">        nms_thr=<span class="number">0.7</span>,</span><br><span class="line">        <span class="comment"># 允许的最小的box尺寸</span></span><br><span class="line">        min_bbox_size=<span class="number">0</span>),</span><br><span class="line">    rcnn=dict(</span><br><span class="line">        assigner=dict(</span><br><span class="line">            <span class="comment"># RCNN网络正负样本划分</span></span><br><span class="line">            type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">            <span class="comment"># 正样本的iou阈值</span></span><br><span class="line">            pos_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">            <span class="comment"># 负样本的iou阈值</span></span><br><span class="line">            neg_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">            <span class="comment"># 正样本的iou最小值。如果assign给ground truth的anchors中最大的IOU低于0.3，则忽略所有的anchors，否则保留最大IOU的anchor</span></span><br><span class="line">            min_pos_iou=<span class="number">0.5</span>,</span><br><span class="line">            match_low_quality=<span class="literal">False</span>,</span><br><span class="line">            <span class="comment"># 忽略bbox的阈值，当ground truth中包含需要忽略的bbox时使用，-1表示不忽略</span></span><br><span class="line">            ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">        sampler=dict(</span><br><span class="line">            <span class="comment"># 正负样本提取器类型</span></span><br><span class="line">            type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">            <span class="comment"># 需提取的正负样本数量</span></span><br><span class="line">            num=<span class="number">512</span>,</span><br><span class="line">            <span class="comment"># 正样本比例</span></span><br><span class="line">            pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">            <span class="comment"># 最大负样本比例，大于该比例的负样本忽略，-1表示不忽略</span></span><br><span class="line">            neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">            <span class="comment"># 把ground truth加入proposal作为正样本</span></span><br><span class="line">            add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">        <span class="comment"># 正样本权重，-1表示不改变原始的权重</span></span><br><span class="line">        pos_weight=<span class="number">-1</span>,</span><br><span class="line">        <span class="comment"># debug模式</span></span><br><span class="line">        debug=<span class="literal">False</span>))</span><br><span class="line">test_cfg = dict(</span><br><span class="line">    <span class="comment"># 推断时的RPN参数</span></span><br><span class="line">    rpn=dict(</span><br><span class="line">        nms_across_levels=<span class="literal">False</span>,</span><br><span class="line">        <span class="comment"># 在nms之前保留的的得分最高的proposal数量</span></span><br><span class="line">        nms_pre=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># 在nms之后保留的的得分最高的proposal数量</span></span><br><span class="line">        nms_post=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># 在后处理完成之后保留的proposal数量</span></span><br><span class="line">        max_num=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># nms阈值</span></span><br><span class="line">        nms_thr=<span class="number">0.7</span>,</span><br><span class="line">        <span class="comment"># 最小bbox尺寸</span></span><br><span class="line">        min_bbox_size=<span class="number">0</span>),</span><br><span class="line">    rcnn=dict(</span><br><span class="line">        score_thr=<span class="number">0.05</span>,</span><br><span class="line">        <span class="comment"># soft-nms is also supported for rcnn testing</span></span><br><span class="line">        nms=dict(type=<span class="string">'nms'</span>, iou_threshold=<span class="number">0.5</span>),</span><br><span class="line">        max_per_img=<span class="number">100</span>))</span><br><span class="line"><span class="comment"># 数据集类型</span></span><br><span class="line">dataset_type = <span class="string">'CocoDataset'</span>                </span><br><span class="line"><span class="comment"># 数据集根目录</span></span><br><span class="line">data_root = <span class="string">'/home/shawn/MyDataset/'</span>                   </span><br><span class="line"><span class="comment"># 输入图像初始化，减去均值mean并处以方差std，to_rgb表示将bgr转为rgb</span></span><br><span class="line">img_norm_cfg = dict(</span><br><span class="line">    mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>], std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>], to_rgb=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Datasets配置</span></span><br><span class="line"><span class="comment"># 训练的pipeline，数据增强</span></span><br><span class="line">train_pipeline = [</span><br><span class="line">    <span class="comment"># 从文件读取图像</span></span><br><span class="line">    dict(type=<span class="string">'LoadImageFromFile'</span>),</span><br><span class="line">    <span class="comment"># 用于给图像导入对于的标签，并使用bounding box标签数据</span></span><br><span class="line">    dict(type=<span class="string">'LoadAnnotations'</span>, with_bbox=<span class="literal">True</span>),</span><br><span class="line">    <span class="comment"># Resize图片并保持比例</span></span><br><span class="line">    dict(type=<span class="string">'Resize'</span>, img_scale=(<span class="number">1333</span>, <span class="number">800</span>), keep_ratio=<span class="literal">True</span>),</span><br><span class="line">    <span class="comment"># 图像反转以及比率</span></span><br><span class="line">    dict(type=<span class="string">'RandomFlip'</span>, flip_ratio=<span class="number">0.5</span>),</span><br><span class="line">    <span class="comment"># 标准化</span></span><br><span class="line">    dict(</span><br><span class="line">        type=<span class="string">'Normalize'</span>,</span><br><span class="line">        mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>],</span><br><span class="line">        std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>],</span><br><span class="line">        to_rgb=<span class="literal">True</span>),</span><br><span class="line">    <span class="comment"># 图像Padding 的配置，填充数目应该可以被整除</span></span><br><span class="line">    dict(type=<span class="string">'Pad'</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">    dict(type=<span class="string">'DefaultFormatBundle'</span>),</span><br><span class="line">    <span class="comment"># 决定数据中哪些key可以被传入pipeline中</span></span><br><span class="line">    dict(type=<span class="string">'Collect'</span>, keys=[<span class="string">'img'</span>, <span class="string">'gt_bboxes'</span>, <span class="string">'gt_labels'</span>])</span><br><span class="line">]</span><br><span class="line">test_pipeline = [</span><br><span class="line">    dict(type=<span class="string">'LoadImageFromFile'</span>),</span><br><span class="line">    dict(</span><br><span class="line">        type=<span class="string">'MultiScaleFlipAug'</span>,</span><br><span class="line">        img_scale=(<span class="number">1333</span>, <span class="number">800</span>),</span><br><span class="line">        <span class="comment"># 是否在test过程flip images</span></span><br><span class="line">        flip=<span class="literal">False</span>,</span><br><span class="line">        transforms=[</span><br><span class="line">            dict(type=<span class="string">'Resize'</span>, keep_ratio=<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># 由于flip=False这个RandomFlio将不会被使用。</span></span><br><span class="line">            dict(type=<span class="string">'RandomFlip'</span>),</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Normalize'</span>,</span><br><span class="line">                mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>],</span><br><span class="line">                std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>],</span><br><span class="line">                to_rgb=<span class="literal">True</span>),</span><br><span class="line">            dict(type=<span class="string">'Pad'</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">            <span class="comment"># 将图片转化为tensor</span></span><br><span class="line">            dict(type=<span class="string">'ImageToTensor'</span>, keys=[<span class="string">'img'</span>]),</span><br><span class="line">            <span class="comment"># 收集在test过程中必要的key</span></span><br><span class="line">            dict(type=<span class="string">'Collect'</span>, keys=[<span class="string">'img'</span>])</span><br><span class="line">        ])</span><br><span class="line">]</span><br><span class="line">data = dict(</span><br><span class="line">    <span class="comment"># 每个gpu计算的图像数量</span></span><br><span class="line">    samples_per_gpu=<span class="number">2</span>,</span><br><span class="line">    <span class="comment"># 每个gpu分配的线程数</span></span><br><span class="line">    workers_per_gpu=<span class="number">2</span>,</span><br><span class="line">    train=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file= data_root + <span class="string">'annotations/train.json'</span>,</span><br><span class="line">        img_prefix= data_root + <span class="string">'images/train/'</span>,</span><br><span class="line">        <span class="comment"># 类型，如果就一个类型需要加逗号</span></span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=train_pipeline),</span><br><span class="line">    val=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/test.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/test/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=test_pipeline),</span><br><span class="line">    test=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/test.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/test/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=test_pipeline))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">evaluation = dict(interval=<span class="number">1</span>, metric=<span class="string">'bbox'</span>)</span><br><span class="line">optimizer = dict(type=<span class="string">'SGD'</span>, lr=<span class="number">0.02</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0001</span>)</span><br><span class="line">optimizer_config = dict(grad_clip=<span class="literal">None</span>)</span><br><span class="line">lr_config = dict(</span><br><span class="line">    <span class="comment"># 优化策略</span></span><br><span class="line">    policy=<span class="string">'step'</span>,</span><br><span class="line">    <span class="comment"># 初始的学习率增加的策略，linear为线性增加，# warmup的策略, 还支持 `exp` 和 `constant`.</span></span><br><span class="line">    warmup=<span class="string">'linear'</span>,</span><br><span class="line">    <span class="comment"># 在初始的500次迭代中学习率逐渐增加</span></span><br><span class="line">    warmup_iters=<span class="number">500</span>,</span><br><span class="line">    <span class="comment"># 起始的学习率</span></span><br><span class="line">    warmup_ratio=<span class="number">0.001</span>,</span><br><span class="line">    <span class="comment"># 在第16和22个epoch时降低学习率</span></span><br><span class="line">    step=[<span class="number">16</span>,<span class="number">22</span>])</span><br><span class="line"><span class="comment"># 最大epoch数</span></span><br><span class="line">total_epochs = <span class="number">24</span></span><br><span class="line"><span class="comment"># 每隔几个epoch保存一下checkpoint</span></span><br><span class="line">checkpoint_config = dict(interval=<span class="number">12</span>)</span><br><span class="line"><span class="comment">#log_config = dict(interval=5, hooks=[dict(type='TextLoggerHook')])</span></span><br><span class="line">log_config = dict(</span><br><span class="line">    <span class="comment"># 每隔多少个epoch输出一个log文件</span></span><br><span class="line">    interval=<span class="number">6</span>,</span><br><span class="line">    hooks=[</span><br><span class="line">        dict(type=<span class="string">'TextLoggerHook'</span>),</span><br><span class="line">        <span class="comment"># Tensorboard logger</span></span><br><span class="line">        dict(type=<span class="string">'TensorboardLoggerHook'</span>)</span><br><span class="line">    ])</span><br><span class="line"><span class="comment"># 设置分布式训练的参数，也可以设置端口</span></span><br><span class="line">dist_params = dict(backend=<span class="string">'nccl'</span>)</span><br><span class="line"><span class="comment"># 日志等级</span></span><br><span class="line">log_level = <span class="string">'INFO'</span></span><br><span class="line"><span class="comment"># 加载模型的路径，None表示从预训练模型加载</span></span><br><span class="line">load_from = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 恢复训练模型的路径</span></span><br><span class="line">resume_from = <span class="literal">None</span></span><br><span class="line">workflow = [(<span class="string">'train'</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="comment"># 保存模型的文件夹路径（checkpoints和log文件都会保存在其中）。</span></span><br><span class="line">work_dir = <span class="string">'work_dir/faster_rcnn_r50_2x/'</span></span><br></pre></td></tr></table></figure><h3 id="4、cascade-rcnn-r50-fpn-2x-py">4、cascade_rcnn_r50_fpn_2x.py</h3><p>cascade-RCNN是cvpr2018的文章，相比于faster-RCNN的改进主要在于其RCNN有三个stage，这三个stage逐级refine检测的结果，使得结果达到更高的精度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line">model = dict(</span><br><span class="line">    type=<span class="string">'CascadeRCNN'</span>,</span><br><span class="line">    pretrained=<span class="string">'torchvision://resnet50'</span>,</span><br><span class="line">    backbone=dict(</span><br><span class="line">        type=<span class="string">'ResNet'</span>,</span><br><span class="line">        depth=<span class="number">50</span>,</span><br><span class="line">        num_stages=<span class="number">4</span>,</span><br><span class="line">        out_indices=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">        frozen_stages=<span class="number">1</span>,</span><br><span class="line">        norm_cfg=dict(type=<span class="string">'BN'</span>, requires_grad=<span class="literal">True</span>),</span><br><span class="line">        norm_eval=<span class="literal">True</span>,</span><br><span class="line">        style=<span class="string">'pytorch'</span>),</span><br><span class="line">    neck=dict(</span><br><span class="line">        type=<span class="string">'FPN'</span>,</span><br><span class="line">        in_channels=[<span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>],</span><br><span class="line">        out_channels=<span class="number">256</span>,</span><br><span class="line">        num_outs=<span class="number">5</span>),</span><br><span class="line">    rpn_head=dict(</span><br><span class="line">        type=<span class="string">'RPNHead'</span>,</span><br><span class="line">        in_channels=<span class="number">256</span>,</span><br><span class="line">        feat_channels=<span class="number">256</span>,</span><br><span class="line">        anchor_generator=dict(</span><br><span class="line">            type=<span class="string">'AnchorGenerator'</span>,</span><br><span class="line">            scales=[<span class="number">8</span>],</span><br><span class="line">            ratios=[<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">2.0</span>],</span><br><span class="line">            strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>]),</span><br><span class="line">        bbox_coder=dict(</span><br><span class="line">            type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">            target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">            target_stds=[<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>]),</span><br><span class="line">        loss_cls=dict(</span><br><span class="line">            type=<span class="string">'CrossEntropyLoss'</span>, use_sigmoid=<span class="literal">True</span>, loss_weight=<span class="number">1.0</span>),</span><br><span class="line">        loss_bbox=dict(</span><br><span class="line">            type=<span class="string">'SmoothL1Loss'</span>, beta=<span class="number">0.1111111111111111</span>, loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">    roi_head=dict(</span><br><span class="line">        type=<span class="string">'CascadeRoIHead'</span>,</span><br><span class="line">        <span class="comment"># RCNN网络的stage数量，在faster-RCNN中为1</span></span><br><span class="line">        num_stages=<span class="number">3</span>,</span><br><span class="line">        <span class="comment"># 3个RCNN的stage的loss权重</span></span><br><span class="line">        stage_loss_weights=[<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.25</span>],</span><br><span class="line">        bbox_roi_extractor=dict(</span><br><span class="line">            type=<span class="string">'SingleRoIExtractor'</span>,</span><br><span class="line">            roi_layer=dict(type=<span class="string">'RoIAlign'</span>, output_size=<span class="number">7</span>, sampling_ratio=<span class="number">0</span>),</span><br><span class="line">            out_channels=<span class="number">256</span>,</span><br><span class="line">            featmap_strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>]),</span><br><span class="line">        bbox_head=[</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Shared2FCBBoxHead'</span>,</span><br><span class="line">                in_channels=<span class="number">256</span>,</span><br><span class="line">                fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">                roi_feat_size=<span class="number">7</span>,</span><br><span class="line">                num_classes=<span class="number">1</span>,</span><br><span class="line">                bbox_coder=dict(</span><br><span class="line">                    type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">                    target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    target_stds=[<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.2</span>]),</span><br><span class="line">                reg_class_agnostic=<span class="literal">True</span>,</span><br><span class="line">                loss_cls=dict(</span><br><span class="line">                    type=<span class="string">'CrossEntropyLoss'</span>,</span><br><span class="line">                    use_sigmoid=<span class="literal">False</span>,</span><br><span class="line">                    loss_weight=<span class="number">1.0</span>),</span><br><span class="line">                loss_bbox=dict(type=<span class="string">'SmoothL1Loss'</span>, beta=<span class="number">1.0</span>,</span><br><span class="line">                               loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Shared2FCBBoxHead'</span>,</span><br><span class="line">                in_channels=<span class="number">256</span>,</span><br><span class="line">                fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">                roi_feat_size=<span class="number">7</span>,</span><br><span class="line">                num_classes=<span class="number">1</span>,</span><br><span class="line">                bbox_coder=dict(</span><br><span class="line">                    type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">                    target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    target_stds=[<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.1</span>, <span class="number">0.1</span>]),</span><br><span class="line">                reg_class_agnostic=<span class="literal">True</span>,</span><br><span class="line">                loss_cls=dict(</span><br><span class="line">                    type=<span class="string">'CrossEntropyLoss'</span>,</span><br><span class="line">                    use_sigmoid=<span class="literal">False</span>,</span><br><span class="line">                    loss_weight=<span class="number">1.0</span>),</span><br><span class="line">                loss_bbox=dict(type=<span class="string">'SmoothL1Loss'</span>, beta=<span class="number">1.0</span>,</span><br><span class="line">                               loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Shared2FCBBoxHead'</span>,</span><br><span class="line">                in_channels=<span class="number">256</span>,</span><br><span class="line">                fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">                roi_feat_size=<span class="number">7</span>,</span><br><span class="line">                num_classes=<span class="number">1</span>,</span><br><span class="line">                bbox_coder=dict(</span><br><span class="line">                    type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">                    target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    target_stds=[<span class="number">0.033</span>, <span class="number">0.033</span>, <span class="number">0.067</span>, <span class="number">0.067</span>]),</span><br><span class="line">                reg_class_agnostic=<span class="literal">True</span>,</span><br><span class="line">                loss_cls=dict(</span><br><span class="line">                    type=<span class="string">'CrossEntropyLoss'</span>,</span><br><span class="line">                    use_sigmoid=<span class="literal">False</span>,</span><br><span class="line">                    loss_weight=<span class="number">1.0</span>),</span><br><span class="line">                loss_bbox=dict(type=<span class="string">'SmoothL1Loss'</span>, beta=<span class="number">1.0</span>, loss_weight=<span class="number">1.0</span>))</span><br><span class="line">        ]))</span><br><span class="line">train_cfg = dict(</span><br><span class="line">    rpn=dict(</span><br><span class="line">        assigner=dict(</span><br><span class="line">            type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">            pos_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">            neg_iou_thr=<span class="number">0.3</span>,</span><br><span class="line">            min_pos_iou=<span class="number">0.3</span>,</span><br><span class="line">            match_low_quality=<span class="literal">True</span>,</span><br><span class="line">            ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">        sampler=dict(</span><br><span class="line">            type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">            num=<span class="number">256</span>,</span><br><span class="line">            pos_fraction=<span class="number">0.5</span>,</span><br><span class="line">            neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">            add_gt_as_proposals=<span class="literal">False</span>),</span><br><span class="line">        allowed_border=<span class="number">0</span>,</span><br><span class="line">        pos_weight=<span class="number">-1</span>,</span><br><span class="line">        debug=<span class="literal">False</span>),</span><br><span class="line">    rpn_proposal=dict(</span><br><span class="line">        nms_across_levels=<span class="literal">False</span>,</span><br><span class="line">        nms_pre=<span class="number">2000</span>,</span><br><span class="line">        nms_post=<span class="number">2000</span>,</span><br><span class="line">        max_num=<span class="number">2000</span>,</span><br><span class="line">        nms_thr=<span class="number">0.7</span>,</span><br><span class="line">        min_bbox_size=<span class="number">0</span>),</span><br><span class="line">    <span class="comment"># 注意，这里有3个RCNN的模块,对应开头的那个RCNN的stage数量</span></span><br><span class="line">    rcnn=[</span><br><span class="line">        dict(</span><br><span class="line">            assigner=dict(</span><br><span class="line">                type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.5</span>,</span><br><span class="line">                match_low_quality=<span class="literal">False</span>,</span><br><span class="line">                ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">            sampler=dict(</span><br><span class="line">                type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">                num=<span class="number">512</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">                neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">            pos_weight=<span class="number">-1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>),</span><br><span class="line">        dict(</span><br><span class="line">            assigner=dict(</span><br><span class="line">                type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.6</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.6</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.6</span>,</span><br><span class="line">                match_low_quality=<span class="literal">False</span>,</span><br><span class="line">                ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">            sampler=dict(</span><br><span class="line">                type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">                num=<span class="number">512</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">                neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">            pos_weight=<span class="number">-1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>),</span><br><span class="line">        dict(</span><br><span class="line">            assigner=dict(</span><br><span class="line">                type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.7</span>,</span><br><span class="line">                match_low_quality=<span class="literal">False</span>,</span><br><span class="line">                ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">            sampler=dict(</span><br><span class="line">                type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">                num=<span class="number">512</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">                neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">            pos_weight=<span class="number">-1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>)</span><br><span class="line">    ])</span><br><span class="line">test_cfg = dict(</span><br><span class="line">    rpn=dict(</span><br><span class="line">        nms_across_levels=<span class="literal">False</span>,</span><br><span class="line">        nms_pre=<span class="number">1000</span>,</span><br><span class="line">        nms_post=<span class="number">1000</span>,</span><br><span class="line">        max_num=<span class="number">1000</span>,</span><br><span class="line">        nms_thr=<span class="number">0.7</span>,</span><br><span class="line">        min_bbox_size=<span class="number">0</span>),</span><br><span class="line">    rcnn=dict(</span><br><span class="line">        score_thr=<span class="number">0.05</span>,</span><br><span class="line">        nms=dict(type=<span class="string">'nms'</span>, iou_threshold=<span class="number">0.5</span>),</span><br><span class="line">        max_per_img=<span class="number">100</span>))</span><br><span class="line">img_norm_cfg = dict(</span><br><span class="line">    mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>], std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>], to_rgb=<span class="literal">True</span>)</span><br><span class="line">dataset_type = <span class="string">'CocoDataset'</span>                </span><br><span class="line"><span class="comment"># 数据集根目录</span></span><br><span class="line">data_root = <span class="string">'/home/shawn/MyDataset/'</span>    </span><br><span class="line"></span><br><span class="line">train_pipeline = [</span><br><span class="line">    dict(type=<span class="string">'LoadImageFromFile'</span>),</span><br><span class="line">    dict(type=<span class="string">'LoadAnnotations'</span>, with_bbox=<span class="literal">True</span>),</span><br><span class="line">    dict(type=<span class="string">'Resize'</span>, img_scale=(<span class="number">1333</span>, <span class="number">800</span>), keep_ratio=<span class="literal">True</span>),</span><br><span class="line">    dict(type=<span class="string">'RandomFlip'</span>, flip_ratio=<span class="number">0.5</span>),</span><br><span class="line">    dict(</span><br><span class="line">        type=<span class="string">'Normalize'</span>,</span><br><span class="line">        mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>],</span><br><span class="line">        std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>],</span><br><span class="line">        to_rgb=<span class="literal">True</span>),</span><br><span class="line">    dict(type=<span class="string">'Pad'</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">    dict(type=<span class="string">'DefaultFormatBundle'</span>),</span><br><span class="line">    dict(type=<span class="string">'Collect'</span>, keys=[<span class="string">'img'</span>, <span class="string">'gt_bboxes'</span>, <span class="string">'gt_labels'</span>])</span><br><span class="line">]</span><br><span class="line">test_pipeline = [</span><br><span class="line">    dict(type=<span class="string">'LoadImageFromFile'</span>),</span><br><span class="line">    dict(</span><br><span class="line">        type=<span class="string">'MultiScaleFlipAug'</span>,</span><br><span class="line">        img_scale=(<span class="number">1333</span>, <span class="number">800</span>),</span><br><span class="line">        flip=<span class="literal">False</span>,</span><br><span class="line">        transforms=[</span><br><span class="line">            dict(type=<span class="string">'Resize'</span>, keep_ratio=<span class="literal">True</span>),</span><br><span class="line">            dict(type=<span class="string">'RandomFlip'</span>),</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Normalize'</span>,</span><br><span class="line">                mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>],</span><br><span class="line">                std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>],</span><br><span class="line">                to_rgb=<span class="literal">True</span>),</span><br><span class="line">            dict(type=<span class="string">'Pad'</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">            dict(type=<span class="string">'ImageToTensor'</span>, keys=[<span class="string">'img'</span>]),</span><br><span class="line">            dict(type=<span class="string">'Collect'</span>, keys=[<span class="string">'img'</span>])</span><br><span class="line">        ])</span><br><span class="line">]</span><br><span class="line">data = dict(</span><br><span class="line">    samples_per_gpu=<span class="number">2</span>,</span><br><span class="line">    workers_per_gpu=<span class="number">2</span>,</span><br><span class="line">    train=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/train.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/train/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=train_pipeline),</span><br><span class="line">    val=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/train.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/train/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=test_pipeline),</span><br><span class="line">    test=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/train.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/train/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=test_pipeline))</span><br><span class="line">evaluation = dict(interval=<span class="number">1</span>, metric=<span class="string">'bbox'</span>)</span><br><span class="line">optimizer = dict(type=<span class="string">'SGD'</span>, lr=<span class="number">0.02</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0001</span>)</span><br><span class="line">optimizer_config = dict(grad_clip=<span class="literal">None</span>)</span><br><span class="line">lr_config = dict(</span><br><span class="line">    policy=<span class="string">'step'</span>,</span><br><span class="line">    warmup=<span class="string">'linear'</span>,</span><br><span class="line">    warmup_iters=<span class="number">500</span>,</span><br><span class="line">    warmup_ratio=<span class="number">0.001</span>,</span><br><span class="line">    step=[<span class="number">16</span>, <span class="number">22</span>])</span><br><span class="line">total_epochs = <span class="number">24</span></span><br><span class="line">checkpoint_config = dict(interval=<span class="number">12</span>)</span><br><span class="line">log_config = dict(</span><br><span class="line">    interval=<span class="number">5</span>,</span><br><span class="line">    hooks=[</span><br><span class="line">        dict(type=<span class="string">'TextLoggerHook'</span>),</span><br><span class="line">        dict(type=<span class="string">'TensorboardLoggerHook'</span>)</span><br><span class="line">    ])</span><br><span class="line">dist_params = dict(backend=<span class="string">'nccl'</span>)</span><br><span class="line">log_level = <span class="string">'INFO'</span></span><br><span class="line">load_from = <span class="literal">None</span></span><br><span class="line">resume_from = <span class="literal">None</span></span><br><span class="line">workflow = [(<span class="string">'train'</span>, <span class="number">1</span>)]</span><br><span class="line">work_dir = <span class="string">'work_dir/cascade_rcnn_r50_fpn_2x.py'</span></span><br></pre></td></tr></table></figure><h3 id="5、服务器运行以及可视化">5、服务器运行以及可视化</h3><p><strong>参数修改</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#训练自己的COCO数据集，需要自己修改的地方有num_classes、data_root、classes（全部都要）</span></span><br><span class="line"><span class="comment">#若显存较小可修改img_scale=(1333, 800)为img_scale=(800, 500)</span></span><br><span class="line"><span class="comment">#如果要设置不同epoch,修改lr_config下的step以及total_epochs</span></span><br><span class="line"><span class="comment">#特征提取层model下的pretrained以及depth</span></span><br></pre></td></tr></table></figure><p><strong>服务器运行</strong>（举例）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器运行命令，--gpu-ids哪块GPU运行，运行前nvidia-smi查看哪块gpu空闲</span></span><br><span class="line">python tools/train.py configs/cascade_rcnn_r50_fpn_2x.py --gpu-ids <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后台运行cascade_r101.txt是日志输出文件</span></span><br><span class="line">nohup python tools/train.py configs/cascade_rcnn_r101_fpn_2x.py --gpu-ids <span class="number">1</span> &gt; cascade_r101.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p><strong>tensorboard可视化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器在根目录运行</span></span><br><span class="line">tensorboard --logdir=work_dir</span><br><span class="line"><span class="comment">#windows cmd运行</span></span><br><span class="line">ssh -L <span class="number">16006</span>:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6006</span> &#123;xx@ip地址&#125;</span><br><span class="line"><span class="comment">#本地运行</span></span><br><span class="line">http://localhost:<span class="number">16006</span>/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;官方文档config详情：&lt;a href=&quot;https://mmdetection.readthedocs.io/en/latest/tutorials/config.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mmdetection.readthedocs.io/en/latest/tutorials/config.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1、配置文件结构&quot;&gt;1、配置文件结构&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;config/_base_&lt;/code&gt;文件夹下面总共有4个基础的组件，它们分别是：dataset、model、schedule、default_runtime。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://www.shawn22.xyz/categories/Python/"/>
    
    
    <category term="PyTorch" scheme="https://www.shawn22.xyz/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch神经网络简单入门</title>
    <link href="https://www.shawn22.xyz/posts/561aebde.html"/>
    <id>https://www.shawn22.xyz/posts/561aebde.html</id>
    <published>2021-06-06T04:57:01.000Z</published>
    <updated>2021-06-06T05:00:40.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、框架说明">一、框架说明</h2><p>Pytorch具体的APi操作详见<a href="https://pytorch.org/docs/stable/torch.html" target="_blank" rel="noopener">Pytorch官方Api文档</a>，torchvision具体Api操作详见<a href="https://pytorch.org/vision/stable/index.html" target="_blank" rel="noopener">torchvision官方Api</a>，下面介绍一下常用的包</p><ul><li><code>torch</code>：张量的常见运算。如创建、索引、连接、转置、加减乘除、切片等</li><li><code>torch.nn</code>: 包含搭建神经网络层的模块（Modules）和一系列loss函数。如全连接、卷积、BN批处理、dropout、CrossEntryLoss、MSELoss等</li><li><code>torch.nn.functional</code>:常用的激活函数relu、leaky_relu、sigmoid等</li><li><code>torch.autograd</code>:提供Tensor所有操作的自动求导方法</li><li><code>torch.cuda</code>：提供对CUDA张量类型的支持，可以让模型使用gpu运行</li><li><code>torch.optim</code>:各种参数优化方法，例如SGD、AdaGrad、Adam、RMSProp等</li><li><code>torch.utils.data</code>:用于加载数据</li><li><code>torch.nn.init</code>:可以用它更改nn.Module的默认参数初始化方式</li><li><code>torchvision.datasets</code>:常用数据集。MNIST、COCO、CIFAR10、Imagenet等</li><li><code>torchvision.modules</code>:常用模型。AlexNet、VGG、ResNet、DenseNet等</li><li><code>torchvision.transforms</code>:图片相关处理。裁剪、尺寸缩放、归一化等</li><li><code>torchvision.utils</code>:将给定的Tensor保存成image文件</li></ul><a id="more"></a><h2 id="二、GPU相关">二、GPU相关</h2><p>运行需要成功安装CUDA和CUDNN，同时要保证显卡驱动以及CUDA、CUDNN版本相匹配。对于CUDA的安装网上有很多教程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#True表示可以进行gpu加速</span></span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"><span class="comment">#打印gpu数量</span></span><br><span class="line">torch.cuda.device_count()</span><br><span class="line"><span class="comment">#显示gpu名字，序号从0开始，例如我的是GeForce GTX 1050</span></span><br><span class="line">torch.cuda.get_device_name(<span class="number">0</span>) </span><br><span class="line"><span class="comment">#输出当前GPU序号，从0开始</span></span><br><span class="line">torch.cuda.current_device()</span><br></pre></td></tr></table></figure><p>在程序中可以如以下操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果机器不存在gpu就使用cpu，存在就使用0号gpu，序号可以按自己需求修改</span></span><br><span class="line">device = torch.device(<span class="string">'cuda:0'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span>)</span><br><span class="line"><span class="comment">#还需要将模型（神经网络）与数据转移到相应的设备上，model代表模型，data代表张量</span></span><br><span class="line">model = model.to(device)</span><br><span class="line"><span class="comment">#model = model.cuda()</span></span><br><span class="line">data = data.to(device)</span><br><span class="line"><span class="comment">#data = data.cuda()</span></span><br></pre></td></tr></table></figure><h2 id="三、前置知识学习">三、前置知识学习</h2><p>Pytorch的一些入门常用操作，以及Numpy的入门常用操作。Numpy可以看<a href="https://www.runoob.com/numpy/numpy-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></p><blockquote><p>深度学习入门可以浏览：</p><p><a href="https://apachecn.gitee.io/ailearning/#/README" target="_blank" rel="noopener">https://apachecn.gitee.io/ailearning/#/README</a></p><p><a href="https://tangshusen.me/Dive-into-DL-PyTorch/#/" target="_blank" rel="noopener">https://tangshusen.me/Dive-into-DL-PyTorch/#/</a></p></blockquote><p>对于网络模型的优化，可以加入<code>Dropout和BN批量归一化</code></p><h2 id="四、搭建第一个神经网络-回归">四、搭建第一个神经网络(回归)</h2><p><strong>第一步生成数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># reproducible</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)   </span><br><span class="line"><span class="comment">#这里linspace函数是从-1到1均分成100份，unsqueeze表示在第1轴增加一个维度，原本是一维，现在变成(100,1)维度,即100个数据1个特征。同理squeeze表示减少一个维度</span></span><br><span class="line">x = torch.unsqueeze(torch.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">100</span>),dim=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#增加随机噪声</span></span><br><span class="line">y = pow(x,<span class="number">2</span>) + torch.randn(x.size())*<span class="number">0.1</span></span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210507205531917.png" alt=""></p><p><strong>第二步，建立神经网络，这里定义了一个隐藏层，并使用ReLu激活函数。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承 torch 的 Module</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n_feature,n_hidden,n_outpit)</span>:</span></span><br><span class="line">        <span class="comment"># 继承 __init__ 功能，必须要有，定义网络的时候进行初始化</span></span><br><span class="line">        super(Net,self).__init__()</span><br><span class="line">        self.hidden=torch.nn.Linear(n_feature,n_hidden)</span><br><span class="line">        self.output=torch.nn.Linear(n_hidden,n_outpit)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这同时也是 Module 中的 forward 功能，会自动进行前向计算</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        x=F.relu(self.hidden(x))</span><br><span class="line">        x=self.output(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># to(device)选择在'cpu'或'cuda'上运行</span></span><br><span class="line">net = Net(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#net = Net(1,10,1).to(device)</span></span><br><span class="line"><span class="comment">#打印一下网络信息</span></span><br><span class="line">print(net)</span><br></pre></td></tr></table></figure><p><strong>第三步选择损失函数和优化器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#回归常用MSE，而分类常用Cross Entropy</span></span><br><span class="line">loss = torch.nn.MSELoss()</span><br><span class="line"><span class="comment">#pytorch根据当前当属更新参数值，学习率在这里取0.5</span></span><br><span class="line">optimizer = torch.optim.SGD(net.parameters,lr=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#查看参数值</span></span><br><span class="line"><span class="comment">#list(net.parameters())[0]</span></span><br><span class="line"><span class="comment">#list(net.parameters())[0]</span></span><br></pre></td></tr></table></figure><p><strong>第四步模型的训练及其结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">epochs = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(epochs):</span><br><span class="line">    <span class="comment">#训练给模型的数据，net(x)即net.forward(x)</span></span><br><span class="line">    prediction = net(x)</span><br><span class="line">    <span class="comment">#计算损失函数</span></span><br><span class="line">    loss = loss_fn(prediction,y)</span><br><span class="line">    <span class="comment">#优化器梯度清理，方便下一次梯度下降</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment">#反向传播求导</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment">#优化器更新神经网络参数加到 net 的 parameters 上</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">10</span>==<span class="number">0</span>:</span><br><span class="line">        plt.cla()</span><br><span class="line">        plt.scatter(x.data.numpy(),y.data.numpy())</span><br><span class="line">        plt.plot(x.data.numpy(),prediction.data.numpy())</span><br><span class="line">        plt.text(<span class="number">0.5</span>, <span class="number">0</span>, <span class="string">'Loss=%.4f'</span> % loss, fontdict=&#123;<span class="string">'size'</span>: <span class="number">16</span>, <span class="string">'color'</span>:  <span class="string">'red'</span>&#125;)</span><br><span class="line">        plt.pause(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210507223610151.png" alt=""></p><p><strong>第五步模型的保存和加载</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#保存整个模型</span></span><br><span class="line">torch.save(net,<span class="string">"mynet.pkl"</span>)</span><br><span class="line">net=torch.load(<span class="string">"mynet.pkl"</span>)</span><br><span class="line"><span class="comment">#保存模型参数，占用内存小，速度快</span></span><br><span class="line">torch.save(net.state_dict(),<span class="string">"mynet.pkl"</span>)</span><br><span class="line">net.load_state_dict(<span class="string">"mynet.pkl"</span>)</span><br></pre></td></tr></table></figure><h2 id="五、CNN卷积神经网络实现MNIST数据集">五、CNN卷积神经网络实现MNIST数据集</h2><blockquote><p>手写数字集识别的可视化网站：</p><p><a href="https://www.cs.ryerson.ca/~aharley/vis/conv/" target="_blank" rel="noopener">https://www.cs.ryerson.ca/~aharley/vis/conv/</a></p></blockquote><p><strong>首先导入第三方库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="comment">#设置随机种子以便复现</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>训练集和测试集的获取，若本机有cuda环境，也可以运行cuda注释代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">EPOCH=<span class="number">1</span></span><br><span class="line">BATCH_SIZE=<span class="number">32</span></span><br><span class="line">LR=<span class="number">0.001</span></span><br><span class="line"><span class="comment">#如果已经下载好改为False</span></span><br><span class="line">DOWNLOAD_MINIST= <span class="literal">False</span></span><br><span class="line"><span class="comment">#获取手写数字训练集</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    <span class="comment"># 保存地点</span></span><br><span class="line">    root=<span class="string">"./minist/"</span>,</span><br><span class="line">    <span class="comment"># 是否是训练集</span></span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成torch.FloatTensor (C,H,W), 训练的时候 normalize 成 [0.0, 1.0]区间</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    <span class="comment"># 是否下载</span></span><br><span class="line">    download=DOWNLOAD_MINIST)</span><br><span class="line"><span class="comment"># 可视化查看一下数据图片</span></span><br><span class="line">train,label = train_data[<span class="number">0</span>]</span><br><span class="line">plt.imshow(train.squeeze())</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.MNIST(</span><br><span class="line">    <span class="comment"># 保存地点</span></span><br><span class="line">    root=<span class="string">"./minist/"</span>,</span><br><span class="line">    <span class="comment"># 是否是训练集</span></span><br><span class="line">    train=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 批训练(32,1,28,28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 由原来的(60000,28,28)变为(60000,1,28,28)</span></span><br><span class="line">test_x = torch.unsqueeze(test_data.data, dim=<span class="number">1</span>).type(torch.FloatTensor)[:<span class="number">2000</span>]/<span class="number">255.</span></span><br><span class="line">test_y = test_data.targets[:<span class="number">2000</span>]</span><br><span class="line"><span class="comment"># 若存在cuda环境，即可使用注释代码</span></span><br><span class="line"><span class="comment"># test_x = test_x.cuda()</span></span><br><span class="line"><span class="comment"># test_y = test_y.cuda()</span></span><br></pre></td></tr></table></figure><p><strong>CNN网络配置</strong>，输出大小为<code>[(n - k + 2p) / s] + 1</code>，n代表输入大小，k为核大小，p为填充，s为步幅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CNN,self).__init__()</span><br><span class="line">        <span class="comment">#输入形状为(1,28,28)，输出形状为(16,14,14)</span></span><br><span class="line">        self.conv1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">1</span>,   <span class="comment"># 输入通道</span></span><br><span class="line">                      out_channels=<span class="number">16</span>, <span class="comment"># 输出通道</span></span><br><span class="line">                      kernel_size=<span class="number">5</span>,   <span class="comment"># 卷积核大小</span></span><br><span class="line">                      stride=<span class="number">1</span>,        <span class="comment"># 步幅</span></span><br><span class="line">                      padding=<span class="number">2</span>),      <span class="comment"># 填充</span></span><br><span class="line">            <span class="comment"># 此时输出形状为(16,28,28)</span></span><br><span class="line">            nn.ReLU(),                 <span class="comment"># 激活函数</span></span><br><span class="line">            <span class="comment"># 最大池化，核大小为2，此时输出形状(16,14,14)</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>)</span><br><span class="line">        )</span><br><span class="line">        self.conv2 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">16</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>), <span class="comment"># 输出形状(32,14,14)</span></span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>)         <span class="comment">#输出形状(32,7,7)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#全连接网络，输出10个类别</span></span><br><span class="line">        self.out = nn.Linear(<span class="number">32</span>*<span class="number">7</span>*<span class="number">7</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        <span class="comment"># 将卷积层展平，才能输入全连接网络</span></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line">        output = self.out(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p><strong>训练与测试</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cnn = CNN()</span><br><span class="line"><span class="comment"># 若存在cuda环境，即可使用注释代码</span></span><br><span class="line"><span class="comment"># cnn = cnn.cuda()</span></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">optimizer = torch.optim.Adam(cnn.parameters(),lr=LR)</span><br><span class="line"><span class="comment"># 损失函数，分类问题</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(EPOCH):</span><br><span class="line">    <span class="comment"># 迭代运行</span></span><br><span class="line">    <span class="keyword">for</span> step, (x, y) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        <span class="comment"># x = x.cuda()</span></span><br><span class="line">        <span class="comment"># y = y.cuda()</span></span><br><span class="line">        output = cnn(x)</span><br><span class="line">        loss = loss_fn(output, y)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span>(step % <span class="number">50</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># 可以单独进行模型的测试</span></span><br><span class="line">            test_output = cnn(test_x)</span><br><span class="line">            <span class="comment"># 1代表索引列，因为刚好匹配到0-9，获取概率高的</span></span><br><span class="line">            pre_y = torch.max(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.squeeze()</span><br><span class="line">            <span class="comment"># pre_y = torch.max(test_output, 1)[1].cuda().data.squeeze()</span></span><br><span class="line">            <span class="comment"># 获取准确率</span></span><br><span class="line">            accurary = float((pre_y == test_y).sum()) / float(test_y.size(<span class="number">0</span>))</span><br><span class="line">            print(<span class="string">'Epoch: '</span>,epoch, <span class="string">'| train loss: %.4f'</span> % loss.data, <span class="string">'| test accurary: %.2f'</span> % accurary)</span><br><span class="line"><span class="comment"># 最后可以模型保存</span></span><br></pre></td></tr></table></figure><h2 id="六、RNN循环神经网络实现MNIST数据集">六、RNN循环神经网络实现MNIST数据集</h2><p>之前的操作与CNN类似，RNN循环神经网络部分如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LSTM</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size=<span class="number">28</span>, hidden_size=<span class="number">64</span>, num_layers=<span class="number">1</span>, output_size=<span class="number">10</span>)</span>:</span></span><br><span class="line">       super(LSTM, self).__init__()</span><br><span class="line">       <span class="comment"># 使用LSTM比RNN效果好</span></span><br><span class="line">       self.rnn = nn.LSTM(</span><br><span class="line">           <span class="comment"># 输入数据特征数，这里28个28维度的数据输入</span></span><br><span class="line">           input_size = input_size,</span><br><span class="line">           <span class="comment"># 隐藏层特征数    </span></span><br><span class="line">           hidden_size = hidden_size,</span><br><span class="line">           <span class="comment"># LSTM层数</span></span><br><span class="line">           num_layers = num_layers,</span><br><span class="line">           <span class="comment"># 如果是第一次输入，需要将batch_size与seq_length这两个维度调换</span></span><br><span class="line">           batch_first = <span class="literal">True</span></span><br><span class="line">       )</span><br><span class="line">       <span class="comment"># 输出10个类别</span></span><br><span class="line">       self.output = nn.Linear(hidden_size,output_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="comment"># x shape (batch, time_step, input_size)</span></span><br><span class="line">        <span class="comment"># r_out shape (batch, time_step, output_size)</span></span><br><span class="line">        <span class="comment"># h_n shape (n_layers, batch, hidden_size)   LSTM 有两个 hidden states, h_n 是分线, h_c 是主线</span></span><br><span class="line">        <span class="comment"># h_c shape (n_layers, batch, hidden_size)</span></span><br><span class="line">        r_out,(h_n, h_c) = self.rnn(x,<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 选取最后一个时间点的 r_out 输出</span></span><br><span class="line">        output = self.output(r_out[:,<span class="number">-1</span>,:])</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">lstm = LSTM()</span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">optimizer = torch.optim.Adam(lstm.parameters(),lr=LR)</span><br><span class="line"><span class="comment"># 损失函数，分类问题</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(EPOCH):</span><br><span class="line">    <span class="comment"># 迭代运行</span></span><br><span class="line">    <span class="keyword">for</span> step, (x, y) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">         <span class="comment"># 输入输入需要变换形状</span></span><br><span class="line">        output = lstm(x.view(<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">        loss = loss_fn(output, y)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span>(step % <span class="number">50</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># 可以单独进行模型的测试</span></span><br><span class="line">            test_output = lstm(test_x.view(<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">            <span class="comment"># 1代表索引列，因为刚好匹配到0-9，获取概率高的</span></span><br><span class="line">            pre_y = torch.max(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.squeeze()</span><br><span class="line">            <span class="comment"># 获取准确率</span></span><br><span class="line">            accurary = float((pre_y == test_y).sum()) / float(test_y.size(<span class="number">0</span>))</span><br><span class="line">            print(<span class="string">'Epoch: '</span>,epoch, <span class="string">'| train loss: %.4f'</span> % loss.data, <span class="string">'| test accurary: %.2f'</span> % accurary)</span><br><span class="line"><span class="comment"># 最后可以模型保存</span></span><br></pre></td></tr></table></figure><h2 id="七、AutoEncoder自编码">七、AutoEncoder自编码</h2><p><strong>首先获取数据集</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="comment">#设置随机种子以便复现</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">EPOCH=<span class="number">1</span></span><br><span class="line">BATCH_SIZE=<span class="number">32</span></span><br><span class="line">LR=<span class="number">0.001</span></span><br><span class="line"><span class="comment">#如果已经下载好改为False</span></span><br><span class="line">DOWNLOAD_MINIST= <span class="literal">False</span></span><br><span class="line"><span class="comment">#获取手写数字训练集</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    <span class="comment"># 保存地点</span></span><br><span class="line">    root=<span class="string">"./minist/"</span>,</span><br><span class="line">    <span class="comment"># 是否是训练集</span></span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成torch.FloatTensor (C,H,W), 训练的时候 normalize 成 [0.0, 1.0]区间</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    <span class="comment"># 是否下载</span></span><br><span class="line">    download=DOWNLOAD_MINIST)</span><br><span class="line"><span class="comment"># 批训练(32,1,28,28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>网络的设置与训练，AutoEncoder是先将图片压缩后还原，用还原后的图片与原图片进行评估并梯度下降</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AutoEncoder 形式很简单, 分别是 encoder  和 decoder , 压缩和解压, 压缩后得到压缩的特征值, 再从压缩的特征值解压成原图片</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoEncoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(AutoEncoder, self).__init__()</span><br><span class="line">        <span class="comment"># 压缩</span></span><br><span class="line">        self.encoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">128</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">12</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">12</span>, <span class="number">3</span>),   <span class="comment"># 压缩成3个特征, 进行 3D 图像可视化</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 解压</span></span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">3</span>, <span class="number">12</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">12</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">128</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">28</span>*<span class="number">28</span>),</span><br><span class="line">            nn.Sigmoid(),       <span class="comment"># 激励函数让输出值在 (0, 1)</span></span><br><span class="line">        )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        encoded = self.encoder(x)</span><br><span class="line">        decoded = self.decoder(encoded)</span><br><span class="line">        <span class="keyword">return</span> encoded, decoded</span><br><span class="line"></span><br><span class="line">autoencoder = AutoEncoder()</span><br><span class="line">optimizer = torch.optim.Adam(autoencoder.parameters(),lr=LR)</span><br><span class="line">loss_fn = nn.MSELoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (x, y) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        train_x = x.view(<span class="number">-1</span>,<span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">        train_y = x.view(<span class="number">-1</span>,<span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">        encoded, decoded = autoencoder(train_x)</span><br><span class="line">        loss = loss_fn(decoded, train_y)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span>(step % <span class="number">50</span> == <span class="number">0</span>):</span><br><span class="line">            print(<span class="string">'Epoch: '</span>,epoch, <span class="string">'| train loss: %.4f'</span> % loss.data)</span><br></pre></td></tr></table></figure><p><strong>3D展示图，可以进行旋转观看</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要观看的数据</span></span><br><span class="line">view_data = train_data.data[:<span class="number">200</span>].view(<span class="number">-1</span>, <span class="number">28</span>*<span class="number">28</span>).type(torch.FloatTensor)/<span class="number">255.</span></span><br><span class="line">encoded_data, _ = autoencoder(view_data)    <span class="comment"># 提取压缩的特征值</span></span><br><span class="line">fig = plt.figure(<span class="number">2</span>)</span><br><span class="line">ax = Axes3D(fig)    <span class="comment"># 3D 图</span></span><br><span class="line"><span class="comment"># x, y, z 的数据值</span></span><br><span class="line">X = encoded_data.data[:, <span class="number">0</span>].numpy()</span><br><span class="line">Y = encoded_data.data[:, <span class="number">1</span>].numpy()</span><br><span class="line">Z = encoded_data.data[:, <span class="number">2</span>].numpy()</span><br><span class="line">values = train_data.targets[:<span class="number">200</span>].numpy()  <span class="comment"># 标签值</span></span><br><span class="line"><span class="keyword">for</span> x, y, z, s <span class="keyword">in</span> zip(X, Y, Z, values):</span><br><span class="line">    c = cm.rainbow(int(<span class="number">255</span>*s/<span class="number">9</span>))    <span class="comment"># 上色</span></span><br><span class="line">    ax.text(x, y, z, s, backgroundcolor=c)  <span class="comment"># 标位子</span></span><br><span class="line">ax.set_xlim(X.min(), X.max())</span><br><span class="line">ax.set_ylim(Y.min(), Y.max())</span><br><span class="line">ax.set_zlim(Z.min(), Z.max())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210515213727565.png" alt=""></p><h2 id="八、GAN生成对抗网络">八、GAN生成对抗网络</h2><p>Generator 作为生成器努力生成以假乱真的图片, Discriminator作为判别器，努力判别生成图片为假数据，两者在训练中一起成长，最终训练出可以以假乱真的生成器。这里使用了MNIST作为数据集，生成器是生成数字，判别器验证输入是否为数字，使用了GPU加速训练，这里网络用了简单模型，可以自行修改为卷积网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="comment"># 随机种子方便再现</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置超参数</span></span><br><span class="line">EPOCH = <span class="number">1</span></span><br><span class="line">BATCH_SIZE = <span class="number">32</span></span><br><span class="line">LR_G = <span class="number">0.0001</span>           <span class="comment"># 生成器学习率</span></span><br><span class="line">LR_D = <span class="number">0.0001</span>           <span class="comment"># 判别器学习率</span></span><br><span class="line"><span class="comment">#如果已经下载好改为False</span></span><br><span class="line">DOWNLOAD_MINIST= <span class="literal">False</span></span><br><span class="line"><span class="comment"># GPU加速</span></span><br><span class="line">device = torch.device(<span class="string">'cuda:0'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span>)</span><br><span class="line"><span class="comment">#获取手写数字训练集</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    <span class="comment"># 保存地点</span></span><br><span class="line">    root=<span class="string">"./minist/"</span>,</span><br><span class="line">    <span class="comment"># 是否是训练集</span></span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成torch.FloatTensor (C,H,W), 训练的时候 normalize 成 [0.0, 1.0]区间</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    <span class="comment"># 是否下载</span></span><br><span class="line">    download=DOWNLOAD_MINIST)</span><br><span class="line"><span class="comment"># 批训练(32,1,28,28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">generator</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size)</span>:</span></span><br><span class="line">        super(generator,self).__init__()</span><br><span class="line">        self.gen = nn.Sequential(</span><br><span class="line">            nn.Linear(input_size,<span class="number">256</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">256</span>,<span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>,<span class="number">784</span>),</span><br><span class="line">            nn.Tanh()</span><br><span class="line">        )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        output = self.gen(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"><span class="comment"># 判别器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">discriminator</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(discriminator,self).__init__()</span><br><span class="line">        self.dis = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">784</span>,<span class="number">512</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>),</span><br><span class="line">            nn.Linear(<span class="number">512</span>,<span class="number">256</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>),</span><br><span class="line">            nn.Linear(<span class="number">256</span>,<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid()</span><br><span class="line">        )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        output = self.dis(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">G = generator(<span class="number">28</span>*<span class="number">28</span>).to(device)</span><br><span class="line">D = discriminator().to(device)</span><br><span class="line"></span><br><span class="line">criterion = nn.BCELoss()</span><br><span class="line">g_optimizer = torch.optim.Adam(G.parameters(), lr=LR_G)</span><br><span class="line">d_optimizer = torch.optim.Adam(D.parameters(), lr=LR_D)</span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (x, _) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        <span class="comment"># 获取每一次迭代数据的批量值</span></span><br><span class="line">        x_num = x.size(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 训练判别器</span></span><br><span class="line">        train_x = x.view(x_num, <span class="number">-1</span>).to(device)</span><br><span class="line">        <span class="comment"># 真实标签值</span></span><br><span class="line">        real_label = torch.ones(x_num).to(device)</span><br><span class="line">        <span class="comment"># 噪声标签值</span></span><br><span class="line">        fake_label = torch.zeros(x_num).to(device)</span><br><span class="line">        real_out = D(train_x)</span><br><span class="line">        d_loss_real = criterion(real_out, real_label)</span><br><span class="line">        <span class="comment"># 噪声数值</span></span><br><span class="line">        z = torch.randn(x_num,<span class="number">28</span>*<span class="number">28</span>).to(device)</span><br><span class="line">        fake_x = G(z)</span><br><span class="line">        fake_out = D(fake_x)</span><br><span class="line">        d_loss_fake = criterion(fake_out, fake_label)</span><br><span class="line">        d_loss = d_loss_real + d_loss_fake</span><br><span class="line">        d_optimizer.zero_grad()</span><br><span class="line">        d_loss.backward()</span><br><span class="line">        d_optimizer.step()</span><br><span class="line">        <span class="comment"># 训练生成器</span></span><br><span class="line">        z = torch.randn(x_num,<span class="number">28</span>*<span class="number">28</span>).to(device)</span><br><span class="line">        fake_x = G(z)</span><br><span class="line">        fake_out = D(fake_x)</span><br><span class="line">        g_loss = criterion(fake_out, real_label)</span><br><span class="line">        g_optimizer.zero_grad()</span><br><span class="line">        g_loss.backward()</span><br><span class="line">        g_optimizer.step()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(step % <span class="number">50</span> == <span class="number">0</span>):</span><br><span class="line">            print(<span class="string">'Epoch: '</span>,epoch, <span class="string">'| train d_loss: %.4f'</span> % d_loss.data,<span class="string">'| train g_loss: %.4f'</span> % g_loss.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图展示</span></span><br><span class="line">z = torch.randn(x_num,<span class="number">28</span>*<span class="number">28</span>).to(device)</span><br><span class="line">x = z</span><br><span class="line">img = x.view(<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>)[<span class="number">3</span>].squeeze()</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.imshow(img.data.cpu().numpy())</span><br><span class="line">plt.show()</span><br><span class="line">x = G(z)</span><br><span class="line">img = x.view(<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>)[<span class="number">3</span>].squeeze()</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.imshow(img.data.cpu().numpy())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>一下左图是生成的随机噪声，右图是随机噪声经过生成器后的图片</p><p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210519210954854.png" alt=""><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210519211005641.png" alt=""></p><h2 id="九、DQN强化学习">九、DQN强化学习</h2><p>通过Q-Learning和神经网络结合，通过反馈可以使机器学得的效果越来越好，下面是简单的demo(有点小难，我还没理解)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">BATCH_SIZE = <span class="number">32</span></span><br><span class="line">LR = <span class="number">0.01</span></span><br><span class="line">EPSILON = <span class="number">0.9</span>  <span class="comment"># 最优选择动作百分比</span></span><br><span class="line">GAMMA = <span class="number">0.9</span>  <span class="comment"># 奖励递减参数</span></span><br><span class="line">TARGET_REPLACE_ITER = <span class="number">100</span>  <span class="comment"># Q 现实网络的更新频率</span></span><br><span class="line">MEMORY_CAPACITY = <span class="number">2000</span>  <span class="comment"># 记忆库大小</span></span><br><span class="line">env = gym.make(<span class="string">"CartPole-v0"</span>)  <span class="comment"># 立杆子游戏</span></span><br><span class="line">env = env.unwrapped</span><br><span class="line">N_ACTIONS = env.action_space.n  <span class="comment"># 杆子能做的动作</span></span><br><span class="line">N_STATES = env.observation_space.shape[<span class="number">0</span>]  <span class="comment"># 杆子能获取的环境信息数</span></span><br><span class="line">ENV_A_SHAPE = <span class="number">0</span> <span class="keyword">if</span> isinstance(env.action_space.sample(),</span><br><span class="line">                              int) <span class="keyword">else</span> env.action_space.sample().shape  <span class="comment"># to confirm the shape</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造DON（Deep Q Network)强化学习神经网络 现实网络 (Target Net) 估计网络 (Eval Net)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.fc1 = nn.Linear(N_STATES, <span class="number">10</span>)</span><br><span class="line">        self.fc1.weight.data.normal_(<span class="number">0</span>, <span class="number">0.1</span>)  <span class="comment"># initialization(初始化）</span></span><br><span class="line">        self.out = nn.Linear(<span class="number">10</span>, N_ACTIONS)</span><br><span class="line">        self.out.weight.data.normal_(<span class="number">0</span>, <span class="number">0.1</span>)  <span class="comment"># initialization(初始化）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        action_value = self.out(x)</span><br><span class="line">        <span class="keyword">return</span> action_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造DQN体系</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DQN</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 建立 target net 和 eval net 还有 memory</span></span><br><span class="line">        self.eval_net, self.target_net = Net(), Net()</span><br><span class="line">        self.learn_step_counter = <span class="number">0</span>  <span class="comment"># 用于 target 更新计时</span></span><br><span class="line">        self.memory_counter = <span class="number">0</span>  <span class="comment"># 记忆库记数</span></span><br><span class="line">        self.memory = np.zeros((MEMORY_CAPACITY, N_STATES * <span class="number">2</span> + <span class="number">2</span>))  <span class="comment"># 初始化记忆库</span></span><br><span class="line">        self.optimizer = torch.optim.Adam(self.eval_net.parameters(), lr=LR)</span><br><span class="line">        self.lose_func = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_action</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># 根据环境观测值选择动作的机制</span></span><br><span class="line">        x = torch.unsqueeze(torch.FloatTensor(x), <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 这里只输入一个 sample</span></span><br><span class="line">        <span class="keyword">if</span> np.random.uniform() &lt; EPSILON:  <span class="comment"># 选最优动作</span></span><br><span class="line">            actions_value = self.eval_net.forward(x)</span><br><span class="line">            action = torch.max(actions_value, <span class="number">1</span>)[<span class="number">1</span>].data.numpy()</span><br><span class="line">            action = action[<span class="number">0</span>] <span class="keyword">if</span> ENV_A_SHAPE == <span class="number">0</span> <span class="keyword">else</span> action.reshape(ENV_A_SHAPE)  <span class="comment"># return the argmax index</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            action = np.random.randint(<span class="number">0</span>, N_ACTIONS)</span><br><span class="line">            action = action <span class="keyword">if</span> ENV_A_SHAPE == <span class="number">0</span> <span class="keyword">else</span> action.reshape(ENV_A_SHAPE)</span><br><span class="line">        <span class="keyword">return</span> action</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_transition</span><span class="params">(self, s, a, r, s_)</span>:</span></span><br><span class="line">        <span class="comment"># 存储记忆</span></span><br><span class="line">        transition = np.hstack((s, [a, r], s_))</span><br><span class="line">        <span class="comment"># 如果记忆库满了, 就覆盖老数据</span></span><br><span class="line">        index = self.memory_counter % MEMORY_CAPACITY</span><br><span class="line">        self.memory[index, :] = transition</span><br><span class="line">        self.memory_counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># target 网络更新 学习记忆库中的记忆</span></span><br><span class="line">        <span class="keyword">if</span> self.learn_step_counter % TARGET_REPLACE_ITER == <span class="number">0</span>:</span><br><span class="line">            self.target_net.load_state_dict(self.eval_net.state_dict())</span><br><span class="line">        self.learn_step_counter += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 抽取记忆库中的批数据</span></span><br><span class="line">        sample_index = np.random.choice(MEMORY_CAPACITY, BATCH_SIZE)</span><br><span class="line">        b_memory = self.memory[sample_index, :]</span><br><span class="line">        b_s = torch.FloatTensor(b_memory[:, :N_STATES])</span><br><span class="line">        b_a = torch.LongTensor(b_memory[:, N_STATES:N_STATES + <span class="number">1</span>].astype(int))</span><br><span class="line">        b_r = torch.FloatTensor(b_memory[:, N_STATES + <span class="number">1</span>:N_STATES + <span class="number">2</span>])</span><br><span class="line">        b_s_ = torch.FloatTensor(b_memory[:, -N_STATES:])</span><br><span class="line">        <span class="comment"># 针对做过的动作b_a, 来选 q_eval 的值, (q_eval 原本有所有动作的值)</span></span><br><span class="line">        q_eval = self.eval_net(b_s).gather(<span class="number">1</span>, b_a)  <span class="comment"># shape (batch, 1)</span></span><br><span class="line">        q_next = self.target_net(b_s_).detach()  <span class="comment"># q_next 不进行反向传递误差, 所以 detach</span></span><br><span class="line">        q_target = b_r + GAMMA * q_next.max(<span class="number">1</span>)[<span class="number">0</span>]  <span class="comment"># shape (batch, 1)</span></span><br><span class="line">        loss = self.lose_func(q_eval, q_target)</span><br><span class="line">        <span class="comment"># 计算, 更新 eval net</span></span><br><span class="line">        self.optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        self.optimizer.step()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练 按照 Qlearning 的形式进行 off-policy 的更新. 我们进行回合制更新, 一个回合完了, 进入下一回合. 一直到他们将杆子立起来很久.</span></span><br><span class="line">dqn = DQN()</span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> range(<span class="number">400</span>):</span><br><span class="line">    s = env.reset()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        env.render()  <span class="comment"># 显示实验动画</span></span><br><span class="line">        a = dqn.choose_action(s)</span><br><span class="line">        <span class="comment"># 选动作, 得到环境反馈</span></span><br><span class="line">        s_, r, done, info = env.step(a)</span><br><span class="line">        <span class="comment"># 修改 reward, 使 DQN 快速学习</span></span><br><span class="line">        x, x_dot, theta, theta_dot = s_</span><br><span class="line">        r1 = (env.x_threshold - abs(x)) / env.x_threshold - <span class="number">0.8</span></span><br><span class="line">        r2 = (env.theta_threshold_radians - abs(theta)) / env.theta_threshold_radians - <span class="number">0.5</span></span><br><span class="line">        r = r1 + r2</span><br><span class="line">        <span class="comment"># 存记忆</span></span><br><span class="line">        dqn.store_transition(s, a, r, s_)</span><br><span class="line">        <span class="keyword">if</span> dqn.memory_counter &gt; MEMORY_CAPACITY:</span><br><span class="line">            dqn.learn()</span><br><span class="line">        <span class="keyword">if</span> done:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        s = s_</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、框架说明&quot;&gt;一、框架说明&lt;/h2&gt;
&lt;p&gt;Pytorch具体的APi操作详见&lt;a href=&quot;https://pytorch.org/docs/stable/torch.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pytorch官方Api文档&lt;/a&gt;，torchvision具体Api操作详见&lt;a href=&quot;https://pytorch.org/vision/stable/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;torchvision官方Api&lt;/a&gt;，下面介绍一下常用的包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;torch&lt;/code&gt;：张量的常见运算。如创建、索引、连接、转置、加减乘除、切片等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torch.nn&lt;/code&gt;: 包含搭建神经网络层的模块（Modules）和一系列loss函数。如全连接、卷积、BN批处理、dropout、CrossEntryLoss、MSELoss等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torch.nn.functional&lt;/code&gt;:常用的激活函数relu、leaky_relu、sigmoid等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torch.autograd&lt;/code&gt;:提供Tensor所有操作的自动求导方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torch.cuda&lt;/code&gt;：提供对CUDA张量类型的支持，可以让模型使用gpu运行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torch.optim&lt;/code&gt;:各种参数优化方法，例如SGD、AdaGrad、Adam、RMSProp等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torch.utils.data&lt;/code&gt;:用于加载数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torch.nn.init&lt;/code&gt;:可以用它更改nn.Module的默认参数初始化方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torchvision.datasets&lt;/code&gt;:常用数据集。MNIST、COCO、CIFAR10、Imagenet等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torchvision.modules&lt;/code&gt;:常用模型。AlexNet、VGG、ResNet、DenseNet等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torchvision.transforms&lt;/code&gt;:图片相关处理。裁剪、尺寸缩放、归一化等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torchvision.utils&lt;/code&gt;:将给定的Tensor保存成image文件&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="https://www.shawn22.xyz/categories/Python/"/>
    
    
    <category term="Pytorch" scheme="https://www.shawn22.xyz/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>MySql基础</title>
    <link href="https://www.shawn22.xyz/posts/8a2dddd9.html"/>
    <id>https://www.shawn22.xyz/posts/8a2dddd9.html</id>
    <published>2021-06-01T07:01:01.000Z</published>
    <updated>2021-06-01T07:40:35.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据库基本知识">一、数据库基本知识</h3><h4 id="1、数据库基本介绍">1、数据库基本介绍</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地进入可不输入-h命令,-u和-p后面没有空格！</span></span><br><span class="line">mysql [-h 服务器主机地址] -u用户名 -p密码</span><br><span class="line"><span class="comment"># 修改数据库密码</span></span><br><span class="line">mysqladmin -u用户名 -p密码 password 新密码;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>; </span><br><span class="line"><span class="comment"># 打开某个数据库</span></span><br><span class="line"><span class="keyword">use</span> dbname； </span><br><span class="line"><span class="comment"># 显示表mysql数据库中user表的列信息</span></span><br><span class="line"><span class="keyword">describe</span> <span class="keyword">user</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名;</span><br><span class="line"><span class="comment"># 删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] 数据库名;</span><br><span class="line"><span class="comment"># 显示数据库中所有的表</span></span><br><span class="line"><span class="keyword">show</span> 数据库名;</span><br><span class="line"><span class="comment"># 选择数据库</span></span><br><span class="line"><span class="keyword">use</span> 数据库名; </span><br><span class="line"></span><br><span class="line">exit; 退出Mysql</span><br><span class="line">? 命令关键词 : 寻求帮助</span><br><span class="line"><span class="comment">-- 表示注释</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="2、结构化查询语句分类">2、结构化查询语句分类</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">解释</th><th style="text-align:center">命令</th></tr></thead><tbody><tr><td style="text-align:center">DDL(数据定义语言)</td><td style="text-align:center">定义和管理数据对象，如数据库，数据表等</td><td style="text-align:center">CREATE、DROP、ALTER</td></tr><tr><td style="text-align:center">DML(数据操作语言)</td><td style="text-align:center">用于操作数据库对象中所包含的数据</td><td style="text-align:center">INSERT、UPDATE、DELETE</td></tr><tr><td style="text-align:center">DQL(数据查询语言)</td><td style="text-align:center">用于查询数据库数据</td><td style="text-align:center">SELECT</td></tr><tr><td style="text-align:center">DCL(数据控制语言)</td><td style="text-align:center">用于管理数据库的语言，包括管理权限及数据更改</td><td style="text-align:center">GRANT、commit、rollback</td></tr></tbody></table><h4 id="3、数据类型和范围大小">3、数据类型和范围大小</h4><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">说明</th><th style="text-align:center">长度(取值范围)</th></tr></thead><tbody><tr><td style="text-align:center">tinyint</td><td style="text-align:center">十分小的数据</td><td style="text-align:center">1字节</td></tr><tr><td style="text-align:center">smallint</td><td style="text-align:center">较小的数据</td><td style="text-align:center">2字节</td></tr><tr><td style="text-align:center">mediumint</td><td style="text-align:center">中等大小的数据</td><td style="text-align:center">3字节</td></tr><tr><td style="text-align:center">==int==</td><td style="text-align:center">标准整数(常用)</td><td style="text-align:center">4字节</td></tr><tr><td style="text-align:center">bigint</td><td style="text-align:center">较大的的整数</td><td style="text-align:center">8字节</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">单精度浮点数</td><td style="text-align:center">4字节</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">双精度浮点数</td><td style="text-align:center">8字节</td></tr><tr><td style="text-align:center">==decimal(m,d)==</td><td style="text-align:center">字符串形式的浮点数，涉及钱时使用</td><td style="text-align:center">m字节</td></tr><tr><td style="text-align:center">char(m)</td><td style="text-align:center">固定长度字符串，检索快但浪费空间，0&lt;=m&lt;=255</td><td style="text-align:center">m字符</td></tr><tr><td style="text-align:center">==varchar(m)==</td><td style="text-align:center">可变字符串，0&lt;=m&lt;=65535(常用)</td><td style="text-align:center">变长数</td></tr><tr><td style="text-align:center">tinytext</td><td style="text-align:center">微型文本串</td><td style="text-align:center">2^8-1</td></tr><tr><td style="text-align:center">==text==</td><td style="text-align:center">文本串</td><td style="text-align:center">2^16-1</td></tr><tr><td style="text-align:center">==DATETIME==</td><td style="text-align:center">时间格式，YYYY-MM-DD HH:mm:ss</td><td style="text-align:center">1000-01-01 00:00:00~9999-12-31 23:59:59</td></tr><tr><td style="text-align:center">==TIMESTAMP==</td><td style="text-align:center">时间戳，从1970开始的毫秒数</td><td style="text-align:center">197010101000000~2037年</td></tr></tbody></table><h4 id="4、创建数据表">4、创建数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] <span class="string">`表名`</span>(</span><br><span class="line">   <span class="string">'字段名1'</span> 列类型 [属性][索引][注释],</span><br><span class="line">   <span class="string">'字段名2'</span> 列类型 [属性][索引][注释],</span><br><span class="line">  <span class="comment">#...</span></span><br><span class="line">   <span class="string">'字段名n'</span> 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure><h4 id="5、数据表字段属性">5、数据表字段属性</h4><p><strong>UnSigned</strong></p><ul><li><p>无符号的</p></li><li><p>声明该数据列不允许负数</p></li></ul><p><strong>ZEROFILL</strong></p><ul><li>0填充的</li><li>不足位数的用0来填充 , 如int(3),5则为005</li></ul><p><strong>Auto_Increment</strong></p><ul><li>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</li><li>通常用于设置主键 , 且为整数类型</li><li>可定义起始值和步长<ul><li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li><li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li></ul></li></ul><p><strong>NULL 和 NOT NULL</strong></p><ul><li>默认为NULL , 即没有插入该列的数值</li><li>如果设置为NOT NULL , 则该列必须有值</li></ul><p><strong>DEFAULT</strong></p><ul><li>默认的，用于设置默认值</li><li>例如,性别字段,默认为&quot;男&quot; , 否则为 “女” ; 若无指定该列的值 , 则默认值为&quot;男&quot;的值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*用户表*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户编号'</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line"><span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line"><span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line"><span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生日'</span>,</span><br><span class="line"><span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line"><span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">primary <span class="keyword">key</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据表的定义</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="comment">-- 显示表结构</span></span><br><span class="line">DESC user;  <span class="comment">-- 设置严格检查模式(不能容错了)SET sql_mode='STRICT_TRANS_TABLES';</span></span><br></pre></td></tr></table></figure><p>对于Mysql的引擎，现在一般使用InnoDB，而MySql的一些默认设置都在<code>my.ini</code>文件中设置</p><ul><li>适用 MyISAM : 节约空间及相应速度</li><li>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</li></ul><h4 id="6、修改与删除数据库">6、修改与删除数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名 <span class="keyword">RENAME</span> <span class="keyword">AS</span> 新表名</span><br><span class="line"><span class="comment"># 添加字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span>字段名 列属性[属性]</span><br><span class="line"><span class="comment"># 修改字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 列类型[属性]</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CHANGE</span> 旧字段名 新字段名 列属性[属性]</span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名</span><br><span class="line"><span class="comment"># 删除数据表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 表名</span><br></pre></td></tr></table></figure><p>==注：==Mysql仅在windows下大小写不敏感！</p><h3 id="二、MySql数据管理">二、MySql数据管理</h3><h4 id="1、外键">1、外键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主表已经在第一章写明</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`usertype`</span> (</span><br><span class="line"><span class="string">`type`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户类型'</span>,</span><br><span class="line"><span class="string">`userid`</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="string">`FK_userid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`userid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建外键方式二 : 创建子表完毕后,修改子表添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`usertype`</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`FK_userid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`userid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>);</span><br></pre></td></tr></table></figure><p>再删除表时，要先删除有外键的表，再删除主表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> usertype <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> FK_gradeid;</span><br><span class="line"><span class="comment">-- 发现执行完上面的,索引还在,所以还要删除索引</span></span><br><span class="line"><span class="comment">-- 注:这个索引是建立外键的时候默认生成的</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> usertype <span class="keyword">DROP</span> <span class="keyword">INDEX</span> FK_gradeid;</span><br></pre></td></tr></table></figure><h4 id="2、DML数据操作语言">2、DML数据操作语言</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名[(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>,...)] <span class="keyword">VALUES</span>(<span class="string">'值1'</span>,<span class="string">'值2'</span>,<span class="string">'值3'</span>)</span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> column_name=<span class="keyword">value</span> [,column_name2=value2,...] [WHEREcondition];</span><br><span class="line"><span class="comment"># condition为筛选条件 , 如不指定则删除该表的所有列数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> condition];</span><br><span class="line"><span class="comment"># TRUNCATE用于完全清空表数据,但表结构,索引,约束等不变;</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] table_name;</span><br></pre></td></tr></table></figure><p><code>TRUNCATE</code>和<code>DELETE</code>异同：</p><p><strong>相同</strong> : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p><p><strong>不同</strong> :</p><ul><li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li></ul><ul><li>使用TRUNCATE TABLE不会对事务有影响</li></ul><h4 id="3、DQL数据查询语言">3、DQL数据查询语言</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 : [ ] 括号代表可选的 , &#123; &#125;括号代表必选得，*指查询所有，不推荐</span></span><br><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;* | table.* | [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">  [<span class="keyword">left</span> | <span class="keyword">right</span> | <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">  [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">  [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">  [<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,]<span class="keyword">row_count</span> | row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line">   <span class="comment">-- 指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></table></figure><ul><li><code>As</code>字句作为别名，查询指定字段，<code>DISTINCT</code>去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'用户'</span>,<span class="keyword">id</span>) <span class="keyword">AS</span> 新用户名 <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sex <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @@auto_increment_increment; <span class="comment">-- 查询自增步长</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>(); <span class="comment">-- 查询版本号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>*<span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果; <span class="comment">-- 表达式</span></span><br></pre></td></tr></table></figure><ul><li><code>where</code>条件语句：<code>AND、OR、NOT</code></li><li>模糊查询:比较操作符</li></ul><table><thead><tr><th style="text-align:center">操作符名称</th><th style="text-align:center">语法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">IS NULL</td><td style="text-align:center">a IS NULL</td><td style="text-align:center">若操作符为NULL，则结果为真</td></tr><tr><td style="text-align:center">IS NOT NULL</td><td style="text-align:center">a IS NOT NULL</td><td style="text-align:center">若操作符不为NULL，则结果为真</td></tr><tr><td style="text-align:center">BETWEEN</td><td style="text-align:center">a BETWEEN b AND c</td><td style="text-align:center">若 a 范围在 b 与 c 之间，则结果为真</td></tr><tr><td style="text-align:center">LIKE</td><td style="text-align:center">a LIKE b</td><td style="text-align:center">SQL 模式匹配，若a匹配b，则结果为真</td></tr><tr><td style="text-align:center">IN</td><td style="text-align:center">a IN (a1，a2，a3，…)</td><td style="text-align:center">SQL 模式匹配，若a匹配b，则结果为真</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="comment">-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)</span></span><br><span class="line"><span class="comment">-- 查询姓刘用户的姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'刘%'</span>;</span><br></pre></td></tr></table></figure><ul><li>连接查询:<code>join</code>对比</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/7963c5409eeac83b1134262da55d7a38.png" alt="sql-join"></p><ul><li>排序和分页、子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="string">`user`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> birthday <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="三、MySql函数">三、MySql函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">-- ================ 内置函数 ================</span></span><br><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line">abs(x)            <span class="comment">-- 绝对值 abs(-10.9) = 10</span></span><br><span class="line">format(x, d)    <span class="comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span><br><span class="line">ceil(x)            <span class="comment">-- 向上取整 ceil(10.1) = 11</span></span><br><span class="line">floor(x)        <span class="comment">-- 向下取整 floor (10.1) = 10</span></span><br><span class="line">round(x)        <span class="comment">-- 四舍五入去整</span></span><br><span class="line">mod(m, n)        <span class="comment">-- m%n m mod n 求余 10%3=1</span></span><br><span class="line">pi()            <span class="comment">-- 获得圆周率</span></span><br><span class="line">pow(m, n)        <span class="comment">-- m^n</span></span><br><span class="line">sqrt(x)            <span class="comment">-- 算术平方根</span></span><br><span class="line">rand()            <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">truncate</span>(x, d)    <span class="comment">-- 截取d位小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line"><span class="keyword">now</span>(), <span class="keyword">current_timestamp</span>();     <span class="comment">-- 当前日期时间</span></span><br><span class="line">current_date();                    <span class="comment">-- 当前日期</span></span><br><span class="line">current_time();                    <span class="comment">-- 当前时间</span></span><br><span class="line">date('yyyy-mm-dd hh:ii:ss');    <span class="comment">-- 获取日期部分</span></span><br><span class="line">time('yyyy-mm-dd hh:ii:ss');    <span class="comment">-- 获取时间部分</span></span><br><span class="line">date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    <span class="comment">-- 格式化时间</span></span><br><span class="line">unix_timestamp();                <span class="comment">-- 获得unix时间戳</span></span><br><span class="line">from_unixtime();                <span class="comment">-- 从时间戳获得时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line">length(string)            <span class="comment">-- string长度，字节</span></span><br><span class="line">char_length(string)        <span class="comment">-- string的字符个数</span></span><br><span class="line">substring(str, position [,length])        <span class="comment">-- 从str的position开始,取length个字符</span></span><br><span class="line"><span class="keyword">replace</span>(<span class="keyword">str</span> ,search_str ,replace_str)    <span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line"><span class="keyword">instr</span>(<span class="keyword">string</span> ,<span class="keyword">substring</span>)    <span class="comment">-- 返回substring首次在string中出现的位置</span></span><br><span class="line"><span class="keyword">concat</span>(<span class="keyword">string</span> [,...])    <span class="comment">-- 连接字串</span></span><br><span class="line"><span class="keyword">charset</span>(<span class="keyword">str</span>)            <span class="comment">-- 返回字串字符集</span></span><br><span class="line"><span class="keyword">lcase</span>(<span class="keyword">string</span>)            <span class="comment">-- 转换成小写</span></span><br><span class="line"><span class="keyword">left</span>(<span class="keyword">string</span>, <span class="keyword">length</span>)    <span class="comment">-- 从string2中的左边起取length个字符</span></span><br><span class="line"><span class="keyword">load_file</span>(file_name)    <span class="comment">-- 从文件读取内容</span></span><br><span class="line"><span class="keyword">locate</span>(<span class="keyword">substring</span>, <span class="keyword">string</span> [,start_position])    <span class="comment">-- 同instr,但可指定开始位置</span></span><br><span class="line"><span class="keyword">lpad</span>(<span class="keyword">string</span>, <span class="keyword">length</span>, <span class="keyword">pad</span>)    <span class="comment">-- 重复用pad加在string开头,直到字串长度为length</span></span><br><span class="line"><span class="keyword">ltrim</span>(<span class="keyword">string</span>)            <span class="comment">-- 去除前端空格</span></span><br><span class="line"><span class="keyword">repeat</span>(<span class="keyword">string</span>, <span class="keyword">count</span>)    <span class="comment">-- 重复count次</span></span><br><span class="line">rpad(<span class="keyword">string</span>, <span class="keyword">length</span>, <span class="keyword">pad</span>)    <span class="comment">--在str后用pad补充,直到长度为length</span></span><br><span class="line"><span class="keyword">rtrim</span>(<span class="keyword">string</span>)            <span class="comment">-- 去除后端空格</span></span><br><span class="line"><span class="keyword">strcmp</span>(string1 ,string2)    <span class="comment">-- 逐字符比较两字串大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="keyword">count</span>()</span><br><span class="line"><span class="keyword">sum</span>();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其他常用函数</span></span><br><span class="line">md5();</span><br><span class="line">default();</span><br></pre></td></tr></table></figure><p>针对<code>count()</code>函数来说，更推荐使用<code>count(1)</code>而不是<code>count(*)</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。</span></span><br><span class="line"><span class="comment">-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</span></span><br><span class="line"><span class="comment">-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</span></span><br><span class="line"><span class="comment">-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">下面它们之间的一些对比：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1）在表没有主键时，count(1)比count(*)快</span></span><br><span class="line"><span class="comment">2）有主键时，主键作为计算条件，count(主键)效率最高；</span></span><br><span class="line"><span class="comment">3）若表格只有一个字段，则count(*)效率较高。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="四、事务">四、事务</h3><p>事务四大特性：<strong>ACID</strong></p><p><strong>原子性(Atomic)</strong></p><ul><li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li></ul><p><strong>一致性(Consist)</strong></p><ul><li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li></ul><p><strong>隔离性(Isolated)</strong></p><ul><li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li></ul><p><strong>持久性(Durable)</strong></p><ul><li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用set语句来改变自动提交模式</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>;   <span class="comment">/*关闭*/</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>;   <span class="comment">/*开启*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意:</span></span><br><span class="line"><span class="comment">--- 1.MySQL中默认是自动提交</span></span><br><span class="line"><span class="comment">--- 2.使用事务时应先关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开始一个事务,标记事务的起始点</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交一个事务给数据库</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将事务回滚,数据回到本次事务的初始状态</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还原MySQL数据库的自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit =<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 删除保存点</span></span><br></pre></td></tr></table></figure><h3 id="五、索引">五、索引</h3><h4 id="1、索引概述">1、索引概述</h4><p><strong>索引的作用</strong></p><ul><li>提高查询速度</li><li>确保数据的唯一性</li><li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li><li>使用分组和排序子句进行数据</li></ul><p><strong>索引分类</strong></p><ul><li>主键索引 (Primary Key)</li><li>唯一索引 (Unique)</li><li>常规索引 (Index)</li><li>全文索引 (FullText)</li></ul><h4 id="2、主键索引">2、主键索引</h4><p>主键 : 某一个属性组能唯一标识一条记录</p><p>特点 :</p><ul><li>最常见的索引类型</li><li>确保数据记录的唯一性</li><li>确定特定数据记录在数据库中的位置</li></ul><h4 id="3、唯一索引">3、唯一索引</h4><p>作用 : 避免同一个表中某数据列中的值重复</p><p>与主键索引的区别</p><ul><li>主键索引只能有一个</li><li>唯一索引可能有多个</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Grade`</span>(</span><br><span class="line">  <span class="string">`GradeID`</span> <span class="built_in">INT</span>(<span class="number">11</span>) AUTO_INCREMENT PRIMARYKEY,</span><br><span class="line">  <span class="string">`GradeName`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">   <span class="comment">-- 或 UNIQUE KEY `GradeID` (`GradeID`)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="4、常规索引">4、常规索引</h4><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>index 和 key 关键字都可以设置常规索引</li><li>应加在查询找条件的字段</li><li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`result`</span>(</span><br><span class="line">   <span class="comment">-- 省略一些代码</span></span><br><span class="line">  <span class="keyword">INDEX</span>/<span class="keyword">KEY</span> <span class="string">`ind`</span> (<span class="string">`studentNo`</span>,<span class="string">`subjectNo`</span>) <span class="comment">-- 创建表时添加</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 创建后添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`result`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> <span class="string">`ind`</span>(<span class="string">`studentNo`</span>,<span class="string">`subjectNo`</span>);</span><br></pre></td></tr></table></figure><h4 id="5、全文索引">5、全文索引</h4><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>只能用于MyISAM类型的数据表</li><li>只能用于CHAR , VARCHAR , TEXT数据列类型</li><li>适合大型数据集</li></ul><h4 id="6、索引测试">6、索引测试</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`app_user`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户昵称'</span>,</span><br><span class="line"><span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>,</span><br><span class="line"><span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'性别（0:男；1：女）'</span>,</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line"><span class="string">`age`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line"><span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'app用户表'</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入100w数据</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mock_data;</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i &lt; num DO</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(<span class="string">`name`</span>, <span class="string">`email`</span>, <span class="string">`phone`</span>, <span class="string">`gender`</span>, <span class="string">`password`</span>, <span class="string">`age`</span>)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">'用户'</span>, i), <span class="string">'24736743@qq.com'</span>, <span class="keyword">CONCAT</span>(<span class="string">'18'</span>, <span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*(<span class="number">999999999</span><span class="number">-100000000</span>)+<span class="number">100000000</span>)),<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">2</span>),<span class="keyword">UUID</span>(), <span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">100</span>));</span><br><span class="line">  <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">RETURN i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SELECT</span> mock_data();</span><br></pre></td></tr></table></figure><p><strong>索引效率测试</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CMD命令行内的语句结束符可以为 ";", "\G", "\g"，仅影响显示结果。</span></span><br><span class="line"><span class="comment">-- 无索引</span></span><br><span class="line"><span class="comment">-- 查看耗时，本地我用了6+s</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'用户9999'</span>; </span><br><span class="line"><span class="comment">-- 查询信息，使用EXPLAIN关键字</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'用户9999'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有索引时</span></span><br><span class="line"><span class="comment">-- 先创建索引，需要花一段时间</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_app_user_name <span class="keyword">ON</span> app_user(<span class="keyword">name</span>);</span><br><span class="line"><span class="comment">-- 测试发现，只查了一行，速度极快</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure><p>==注==</p><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表建议不要加索引</li><li>索引一般应加在查找条件的字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类</span></span><br><span class="line">hash类型的索引：查询单条快，范围查询慢</span><br><span class="line">btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不同的存储引擎支持的索引类型也不一样</span></span><br><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</span><br></pre></td></tr></table></figure><h3 id="六、权限管理">六、权限管理</h3><h4 id="1、用户管理">1、用户管理</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 用户和权限管理 */</span></span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加用户 CREATE USER shawn IDENTIFIED BY 'shawn'</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] 密码(字符串)</span><br><span class="line">  - 必须拥有mysql数据库的全局<span class="keyword">CREATE</span> <span class="keyword">USER</span>权限，或拥有<span class="keyword">INSERT</span>权限。</span><br><span class="line">  - 只能创建用户，不能赋予权限。</span><br><span class="line">  - 用户名，注意引号：如 <span class="string">'user_name'</span>@<span class="string">'192.168.1.1'</span></span><br><span class="line">  - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">  - 要在纯文本中指定密码，需忽略<span class="keyword">PASSWORD</span>关键词。要把密码指定为由<span class="keyword">PASSWORD</span>()函数返回的混编值，需包含关键字<span class="keyword">PASSWORD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名用户 RENAME USER shawn TO shawn1</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> old_user <span class="keyword">TO</span> new_user</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="comment">-- alter user'shawn'@'%' IDENTIFIED BY 'shawn'; </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span><span class="string">'用户名'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'新密码'</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户 DROP USER shawn</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分配权限/添加用户</span></span><br><span class="line"><span class="comment">-- 默认是没有GRANT权限的</span></span><br><span class="line"><span class="comment">-- GRANT all privileges ON *.* TO shawn</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">TO</span> 用户名 [<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] <span class="string">'password'</span>]</span><br><span class="line">  - <span class="keyword">all</span> <span class="keyword">privileges</span> 表示所有权限</span><br><span class="line">  - *.* 表示所有库的所有表</span><br><span class="line">  - 库名.表名 表示某库下面的某表</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看权限   SHOW GRANTS FOR shawn;</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 用户名</span><br><span class="line">   <span class="comment">-- 查看当前用户权限</span></span><br><span class="line">  <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span>; 或 <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="keyword">CURRENT_USER</span>; 或 <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="keyword">CURRENT_USER</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤消权限</span></span><br><span class="line"><span class="comment">-- REVOKE all privileges ON *.* FROM shawn;</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">FROM</span> 用户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span>, <span class="keyword">GRANT</span> <span class="keyword">OPTION</span> <span class="keyword">FROM</span> 用户名    <span class="comment">-- 撤销所有权限</span></span><br></pre></td></tr></table></figure><p><strong>权限解释</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 权限列表</span></span><br><span class="line">ALL [PRIVILEGES]    <span class="comment">-- 设置除GRANT OPTION之外的所有简单权限</span></span><br><span class="line"><span class="keyword">ALTER</span>    <span class="comment">-- 允许使用ALTER TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> ROUTINE    <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span>    <span class="comment">-- 允许使用CREATE TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> ROUTINE    <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLES</span>        <span class="comment">-- 允许使用CREATE TEMPORARY TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>        <span class="comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>        <span class="comment">-- 允许使用CREATE VIEW</span></span><br><span class="line"><span class="keyword">DELETE</span>    <span class="comment">-- 允许使用DELETE</span></span><br><span class="line"><span class="keyword">DROP</span>    <span class="comment">-- 允许使用DROP TABLE</span></span><br><span class="line"><span class="keyword">EXECUTE</span>        <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line"><span class="keyword">FILE</span>    <span class="comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span><br><span class="line"><span class="keyword">INDEX</span>     <span class="comment">-- 允许使用CREATE INDEX和DROP INDEX</span></span><br><span class="line"><span class="keyword">INSERT</span>    <span class="comment">-- 允许使用INSERT</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span>        <span class="comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span><br><span class="line">PROCESS     <span class="comment">-- 允许使用SHOW FULL PROCESSLIST</span></span><br><span class="line"><span class="keyword">REFERENCES</span>    <span class="comment">-- 未被实施</span></span><br><span class="line">RELOAD    <span class="comment">-- 允许使用FLUSH</span></span><br><span class="line"><span class="keyword">REPLICATION</span> <span class="keyword">CLIENT</span>    <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line"><span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span>    <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line"><span class="keyword">SELECT</span>    <span class="comment">-- 允许使用SELECT</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>    <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VIEW</span>    <span class="comment">-- 允许使用SHOW CREATE VIEW</span></span><br><span class="line"><span class="keyword">SHUTDOWN</span>    <span class="comment">-- 允许使用mysqladmin shutdown</span></span><br><span class="line">SUPER    <span class="comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span><br><span class="line"><span class="keyword">UPDATE</span>    <span class="comment">-- 允许使用UPDATE</span></span><br><span class="line"><span class="keyword">USAGE</span>    <span class="comment">-- “无权限”的同义词</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">OPTION</span>    <span class="comment">-- 允许授予权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表维护 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析和存储表的关键字分布</span></span><br><span class="line"><span class="keyword">ANALYZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> 表名 ...</span><br><span class="line"><span class="comment">-- 检查一个或多个表是否有错误</span></span><br><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [<span class="keyword">option</span>] ...</span><br><span class="line"><span class="keyword">option</span> = &#123;<span class="keyword">QUICK</span> | <span class="keyword">FAST</span> | <span class="keyword">MEDIUM</span> | <span class="keyword">EXTENDED</span> | <span class="keyword">CHANGED</span>&#125;</span><br><span class="line"><span class="comment">-- 整理数据文件的碎片</span></span><br><span class="line"><span class="keyword">OPTIMIZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure><h4 id="2、MySql备份">2、MySql备份</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导出</span></span><br><span class="line">1. 导出一张表 <span class="comment">-- mysqldump -uroot -p123456 school student &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">2. 导出多张表 <span class="comment">-- mysqldump -uroot -p123456 school student result &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span><br><span class="line">3. 导出所有表 <span class="comment">-- mysqldump -uroot -p123456 school &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">4. 导出一个库 <span class="comment">-- mysqldump -uroot -p123456 -B school &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line"></span><br><span class="line">可以-w携带备份条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line">1. 在登录mysql的情况下：<span class="comment">-- source D:/a.sql</span></span><br><span class="line">　　source 备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、数据库基本知识&quot;&gt;一、数据库基本知识&lt;/h3&gt;
&lt;h4 id=&quot;1、数据库基本介绍&quot;&gt;1、数据库基本介绍&lt;/h4&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 本地进入可不输入-h命令,-u和-p后面没有空格！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql [-h 服务器主机地址] -u用户名 -p密码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 修改数据库密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysqladmin -u用户名 -p密码 password 新密码;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示所有数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;databases&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 打开某个数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; dbname； &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示表mysql数据库中user表的列信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;database&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt;] 数据库名;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;database&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt;] 数据库名;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示数据库中所有的表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; 数据库名;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 选择数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; 数据库名; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit; 退出Mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;? 命令关键词 : 寻求帮助&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 表示注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="MySql" scheme="https://www.shawn22.xyz/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>＜img＞标签src缓存问题</title>
    <link href="https://www.shawn22.xyz/posts/d39ecf00.html"/>
    <id>https://www.shawn22.xyz/posts/d39ecf00.html</id>
    <published>2021-05-01T06:26:28.000Z</published>
    <updated>2021-05-01T06:28:47.287Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述：">问题描述：</h4><p>最近在使用vue做目标检测算法可视化的时候发现了一个问题，我在前端传入原始图片到后端，经过后端算法检测后生成检测图片，前端vue直接调用该图片路径。本来想着输入不同图片，后端会不断覆盖result.jpg，最终前端也会实时变化，但是最终结果出现了意外，如图后连输入图不管如何变化，结果图都是同一张图片。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html部分</span></span><br><span class="line">&lt;el-image <span class="class"><span class="keyword">class</span></span>=<span class="string">"originImg"</span> :src=<span class="string">"resulturl"</span>/&gt;</span><br><span class="line"><span class="comment">//js部分</span></span><br><span class="line"><span class="keyword">this</span>.resulturl=<span class="string">"http://localhost:5000/static/images/result.jpg"</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210430142255885.png" alt="在这里插入图片描述"></p><h4 id="问题原因">问题原因</h4><p>因为src后面的请求路径不变，所以浏览器就认为是同一个图片，就不会重新发送请求，导致获得的一直是第一张缓存图片。</p><blockquote><p>浏览器缓存知识：<a href="https://www.cnblogs.com/chengxs/p/10396066.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxs/p/10396066.html</a></p></blockquote><h4 id="解决方法">解决方法</h4><p>因为浏览器缓存的img是根据scr属性的，只要告诉浏览器这个图片和原来的缓存图片不一样浏览器就会重新进行请求了，即在请求图片后面添加<code>&quot;?tempid=&quot;+Math.random()</code>字符串。比如我的，成功解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.resulturl=<span class="string">"http://localhost:5000/static/images/result.jpg?tempid="</span>+<span class="built_in">Math</span>.random();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;问题描述：&quot;&gt;问题描述：&lt;/h4&gt;
&lt;p&gt;最近在使用vue做目标检测算法可视化的时候发现了一个问题，我在前端传入原始图片到后端，经过后端算法检测后生成检测图片，前端vue直接调用该图片路径。本来想着输入不同图片，后端会不断覆盖result.jpg，最终前端也会实时变化，但是最终结果出现了意外，如图后连输入图不管如何变化，结果图都是同一张图片。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue" scheme="https://www.shawn22.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>SSH原理与使用</title>
    <link href="https://www.shawn22.xyz/posts/ec679095.html"/>
    <id>https://www.shawn22.xyz/posts/ec679095.html</id>
    <published>2021-03-26T11:19:37.000Z</published>
    <updated>2021-03-26T11:20:41.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、SSH介绍">一、SSH介绍</h2><p>SSH是Secure Shell Protocol的简写，用于加密两台计算机之间的通信，并且支持各种身份验证机制。SSH先对联机数据包通过加密技术进行加密处理，加密后在进行数据传输。确保了传递的数据安全。</p><a id="more"></a><ul><li>SSH是安全的加密协议，用于远程连接linux服务器。</li><li>SSH默认端口是22，安全协议版本SSHv2，除了2之外还有SSHv1（有漏洞）。</li><li>SSH服务端主要包含两个服务功能SSH远程连接和SFTP服务。</li><li>Linux SSH客户端包含ssh远程连接命令，以及远程拷贝scp命令等。</li></ul><p>而SSH 的软件架构是服务器-客户端模式（Server - Client）。在这个架构中，SSH 软件分成两个部分：向服务器发出请求的部分，称为客户端（client），OpenSSH 的实现为 ssh；接收客户端发出的请求的部分，称为服务器（server），OpenSSH 的实现为 sshd。</p><h2 id="二、SSH登录">二、SSH登录</h2><h3 id="1、基本用法">1、基本用法</h3><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user指的是你远程主机的名字，host指的是ip或者局域网的主机名</span></span><br><span class="line">ssh user@host</span><br><span class="line"><span class="comment"># 如果本地用户名与远程用户名一致，登录时可以省略用户名。</span></span><br><span class="line">ssh host</span><br><span class="line"><span class="comment">#SSH的默认端口是22，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口，注意端口开放。</span></span><br><span class="line">ssh -p 2222 user@hostSSH</span><br></pre></td></tr></table></figure><h3 id="2、口令登录">2、口令登录</h3><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。整个过程是这样的：</p><ol><li>远程主机收到用户的登录请求，把自己的公钥发给用户。</li><li>用户使用这个公钥，将登录密码加密后，发送回来。</li><li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li></ol><p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/1739730?fr=aladdin" target="_blank" rel="noopener">&quot;中间人攻击&quot;</a>（Man-in-the-middle attack）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure><p>第一次登录对方主机，系统会出现一个警告提示，意思是无法确认远程主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？经过用户的考虑后接受，之后进行口令的输入，如果密码正确，就可以登录了。当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p><h3 id="3、公钥登录">3、公钥登录</h3><p>使用密码登录，每次都必须输入密码，非常麻烦。SSH还提供了公钥登录，可以省去输入密码的步骤。</p><p>所谓&quot;公钥登录&quot;，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p><p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#程序会询问一系列问题，然后生成密钥，默认rsa算法</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment">#通常做法是使用-t参数，指定密钥的加密算法</span></span><br><span class="line">ssh-keygen -t dsa</span><br></pre></td></tr></table></figure><p>执行<code>ssh-keygen</code>命令以后，会出现第一个问题，询问密钥保存的文件名，默认是<code>~/.ssh/id_rsa</code>文件，这个是私钥的文件名，对应的公钥文件<code>~/.ssh/id_rsa.pub</code>是自动生成的。用户的密钥一般都放在主目录的<code>.ssh</code>目录里面。</p><p>生成密钥以后，公钥必须上传到服务器，才能使用公钥登录。</p><p><strong>手动上传公钥</strong></p><p>OpenSSH 规定，用户公钥保存在服务器的<code>~/.ssh/authorized_keys</code>文件。你要以哪个用户的身份登录到服务器，密钥就必须保存在该用户主目录的<code>~/.ssh/authorized_keys</code>文件。只要把公钥添加到这个文件之中，就相当于公钥上传到服务器了。每个公钥占据一行。如果该文件不存在，可以手动创建。</p><p><strong><code>ssh-copy-id</code>命令：自动上传公钥</strong></p><p>OpenSSH 自带一个<code>ssh-copy-id</code>命令，可以自动将公钥拷贝到远程服务器的<code>~/.ssh/authorized_keys</code>文件。如果<code>~/.ssh/authorized_keys</code>文件不存在，<code>ssh-copy-id</code>命令会自动创建该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要把工作目录切换到~/.ssh/下</span></span><br><span class="line">ssh-copy-id -i id_rsa user@host</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-i</code>参数用来指定公钥文件，<code>user</code>是所要登录的账户名，<code>host</code>是服务器地址。如果省略用户名，默认为当前的本机用户名。执行完该命令，公钥就会拷贝到服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SSH 就会自动采用密钥登录，不再提示输入密码。</span></span><br><span class="line">ssh user@host</span><br></pre></td></tr></table></figure><p>从此ssh登录，为了安全性就不需要密码登录了，具体方法就是打开服务器 sshd 的配置文件<code>/etc/ssh/sshd_config</code>，将<code>PasswordAuthentication</code>这一项设为<code>no</code>，最后重启sshd。</p><h2 id="三、SSH端口转发">三、SSH端口转发</h2><h3 id="1、动态转发">1、动态转发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -D <span class="built_in">local</span>-port tunnel-host [-N]</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">ssh -D 8080 user@host</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-D</code>表示动态转发，<code>local-port</code>是本地端口，<code>tunnel-host</code>是 SSH 服务器，<code>-N</code>表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。</p><p>SSH会建立一个socket，去监听本地的端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果某个本地端口原来是一个不加密端口，现在将变成一个加密端口。</p><h3 id="2、本地转发">2、本地转发</h3><p>本地转发（local forwarding）指的是，SSH 服务器作为中介的跳板机，建立本地计算机与特定目标网站之间的加密连接。本地转发是在本地计算机的 SSH 客户端建立的转发规则。</p><p>它会指定一个本地端口（local-port），所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host），然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L <span class="built_in">local</span>-port:target-host:target-port tunnel-host [-N] [-f]</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-L</code>参数表示本地转发，<code>local-port</code>是本地端口，<code>target-host</code>是你想要访问的目标服务器，<code>target-port</code>是目标服务器的端口，<code>tunnel-host</code>是 SSH 跳板机。<code>-N</code>参数表示不在 SSH 跳板机执行远程命令，让 SSH 只充当隧道。另外还有一个<code>-f</code>参数表示 SSH 连接在后台运行。</p><p>举例来说，现在有一台 SSH 跳板机<code>root@10.16.22.123</code>，我们可以通过本地访问<code>http://localhost:16006</code>即可访问到跳板机的<code>127.0.0.1:6006</code>端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本机运行</span></span><br><span class="line">ssh -L 16006:127.0.0.1:6006 root@10.16.22.123</span><br></pre></td></tr></table></figure><h3 id="3、远程端口转发">3、远程端口转发</h3><p>远程端口指的是在远程 SSH 服务器建立的转发规则。</p><p>这种场景比较特殊，主要针对内网的情况。本地计算机在外网，SSH 跳板机和目标服务器都在内网，而且本地计算机无法访问内网之中的 SSH 跳板机，但是 SSH 跳板机可以访问本机计算机。</p><p>由于本机无法访问内网 SSH 跳板机，就无法从外网发起 SSH 隧道，建立端口转发。必须反过来，从 SSH 跳板机发起隧道，建立端口转发，这时就形成了远程端口转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R <span class="built_in">local</span>-port:target-host:target-port <span class="built_in">local</span> [-N] [-f]</span><br></pre></td></tr></table></figure><p>上面的命令，首先需要注意，不是在本机执行的，而是在 SSH 跳板机执行的，从跳板机去连接本地计算机。<code>-R</code>参数表示远程端口转发，<code>local-port</code>是本地计算机的端口，<code>target-host</code>和<code>target-port</code>是目标服务器(内网机器)及其端口，<code>local</code>是本地计算机。</p><p>举例来说，目标服务器在内网但可以访问外网，而跳板机不能直接访问内网，这时候就需要用远程端口转发，即可以直接使用跳板机访问内网</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内网机器运行，将内网服务器的22端口转发到跳板机的2222端口</span></span><br><span class="line">ssh -R 2222:localhost:22 root@114.215.200.71 -N -f</span><br><span class="line"><span class="comment">#在跳板机进行登录，即可访问内网目标服务器，注意端口开放，以及用户名的修改，localhost不变，其中若因为网络问题断线，可以下载autossh</span></span><br><span class="line">ssh shawn@localhost -p 2222</span><br></pre></td></tr></table></figure><h2 id="四、SSH其他命令">四、SSH其他命令</h2><h3 id="1、scp命令">1、scp命令</h3><p><code>scp</code>是 SSH 提供的一个客户端程序，用来在两台主机之间加密传送文件（即复制文件）。<code>scp</code>主要用于以下三种复制操作：</p><ul><li>本地复制到远程。</li><li>远程复制到本地。</li><li>两个远程系统之间的复制。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">scp <span class="built_in">source</span> destination</span><br><span class="line"><span class="comment">#上传design.tar.gz到服务器/shawn目录下,也可以反过来</span></span><br><span class="line">scp design.tar.gz root@114.215.200.70:/shawn</span><br><span class="line"><span class="comment">#上传目录</span></span><br><span class="line">scp -r 目录 用户名@ip:服务器绝对路径目录</span><br></pre></td></tr></table></figure><h3 id="2、sftp-命令">2、sftp 命令</h3><p><code>sftp</code>是 SSH 提供的一个客户端应用程序，主要用来安全地访问 FTP。因为 FTP 是不加密协议，很不安全，<code>sftp</code>就相当于将 FTP 放入了 SSH。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接</span></span><br><span class="line">sftp username@hostname</span><br><span class="line"><span class="comment"># 本地文件传输到远程主机。</span></span><br><span class="line">put localfile</span><br><span class="line"><span class="comment"># 远程文件传输到本地。</span></span><br><span class="line">get remotefile</span><br></pre></td></tr></table></figure><h3 id="3、rsync-命令">3、rsync 命令</h3><p>rsync 是一个常用的 Linux 应用程序，用于文件同步。</p><hr><p>参考文章:</p><p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a></p><p><a href="https://wangdoc.com/ssh/port-forwarding.html" target="_blank" rel="noopener">https://wangdoc.com/ssh/port-forwarding.html</a></p><p><a href="https://abcdabcd987.com/ssh/" target="_blank" rel="noopener">https://abcdabcd987.com/ssh/</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、SSH介绍&quot;&gt;一、SSH介绍&lt;/h2&gt;
&lt;p&gt;SSH是Secure Shell Protocol的简写，用于加密两台计算机之间的通信，并且支持各种身份验证机制。SSH先对联机数据包通过加密技术进行加密处理，加密后在进行数据传输。确保了传递的数据安全。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.shawn22.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程几种实现方式</title>
    <link href="https://www.shawn22.xyz/posts/d5b482ca.html"/>
    <id>https://www.shawn22.xyz/posts/d5b482ca.html</id>
    <published>2021-03-19T03:15:27.000Z</published>
    <updated>2021-03-19T03:16:54.569Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、继承Thread类">1、继承Thread类</h4><blockquote><p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//4.创建Thread类的子类对象</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//5.开启线程</span></span><br><span class="line">        mt.setName(<span class="string">"多线程"</span>);</span><br><span class="line">        mt.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()  + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.继承Thread</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过匿名类创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//重写run方法,将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"thread"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实现Runnable接口">2、实现Runnable接口</h4><blockquote><p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p><p><code>public void run()</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//4,创建Runnable的子类对象</span></span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//5,将其当作参数传递给Thread的构造函数</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(mr,<span class="string">"myrunnable"</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()  + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1,定义一个类实现Runnable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部匿名类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//1,将Runnable的子类对象传递给Thread的构造方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//2,重写run方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//3,将要执行的代码写在run方法中</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//4,开启线程</span></span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、通过-Callable-和-Future-创建线程">3、通过 Callable 和 Future 创建线程</h4><ol><li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li><li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li><li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li><li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MyCallable mc = <span class="keyword">new</span> MyCallable(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;Integer&gt; f = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">        <span class="keyword">new</span> Thread(f).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(f.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="comment">//实现从1加到100并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCallable</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= number; x++) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、创建线程的三种方法对比">4、创建线程的三种方法对比</h4><ol><li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li><li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li></ol><h4 id="5、线程池">5、线程池</h4><p>Java中创建和销毁一个线程是比较昂贵的操作，需要系统调用。频繁创建和销毁线程会影响系统性能。于是线程池应运而生。其好处是可以抛出异常和有返回值。</p><ul><li>创建线程池对象</li><li>创建Runnable实例</li><li>提交Runnable实例</li><li>关闭线程池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交Runnable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以执行Runnable对象或者Callable对象代表的线程</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        pool.submit(<span class="keyword">new</span> MyRunnable());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1,定义一个类实现Runnable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提交Callable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以执行Runnable对象或者Callable对象代表的线程</span></span><br><span class="line">        Future&lt;Integer&gt; f1 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">100</span>));</span><br><span class="line">        Future&lt;Integer&gt; f2 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// V get()</span></span><br><span class="line">        Integer i1 = f1.get();</span><br><span class="line">        Integer i2 = f2.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="comment">//实现从1加到100并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCallable</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= number; x++) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://www.runoob.com/java/java-multithreading.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-multithreading.html</a></p><p><a href="https://blog.csdn.net/qq_40298054/article/details/87870297" target="_blank" rel="noopener">https://blog.csdn.net/qq_40298054/article/details/87870297</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1、继承Thread类&quot;&gt;1、继承Thread类&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.shawn22.xyz/categories/Java/"/>
    
    
    <category term="多线程" scheme="https://www.shawn22.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
