<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java8常用新特性</title>
    <url>/posts/c54dc8f8.html</url>
    <content><![CDATA[<h2 id="1、Lambda-表达式">1、Lambda 表达式</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//输出Hello shawn</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="comment">// 用括号</span></span><br><span class="line">  	GreetingService greetService = (message) -&gt;</span><br><span class="line">        System.out.println(<span class="string">"Hello "</span> + message);</span><br><span class="line">  	greetService.sayMessage(<span class="string">"shawn"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2、函数式接口">2、函数式接口</h2>
<blockquote>
<p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。使用@FunctionalInterface注解修饰的类，编译器会检测该类是否只有一个抽象方法或接口，否则，会报错。可以有多个默认方法，静态方法。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">函数接口</th>
<th style="text-align:center">抽象接口</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">参数</th>
<th style="text-align:center">返回类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Predicate</td>
<td style="text-align:center">test(T t)</td>
<td style="text-align:center">判断真假</td>
<td style="text-align:center">T</td>
<td style="text-align:center">boolean</td>
</tr>
<tr>
<td style="text-align:center">Consumer</td>
<td style="text-align:center">accept(T t)</td>
<td style="text-align:center">消费消息</td>
<td style="text-align:center">T</td>
<td style="text-align:center">void</td>
</tr>
<tr>
<td style="text-align:center">Function</td>
<td style="text-align:center">R apply(T t)</td>
<td style="text-align:center">将T映射为R</td>
<td style="text-align:center">T</td>
<td style="text-align:center">R</td>
</tr>
<tr>
<td style="text-align:center">Supplier</td>
<td style="text-align:center">T get()</td>
<td style="text-align:center">生产消息</td>
<td style="text-align:center">None</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">UnaryOperator</td>
<td style="text-align:center">T apply(T t)</td>
<td style="text-align:center">一元操作</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">BinaryOperator</td>
<td style="text-align:center">apply(T t,U u)</td>
<td style="text-align:center">二元操作</td>
<td style="text-align:center">（T,U）</td>
<td style="text-align:center">T</td>
</tr>
</tbody>
</table>
<p>常用的方法举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8FunctionalTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Predicate&lt;Integer&gt; predicate = x -&gt; x &gt; <span class="number">170</span>;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="string">"shawn"</span>, <span class="number">175</span>);</span><br><span class="line">        System.out.println(<span class="string">"shawn的身高有超过170吗？"</span> + predicate.test(student.getHeight()));</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line">        consumer.accept(<span class="string">"我命由我不命天"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Student映射成String</span></span><br><span class="line">        Function&lt;Student, String&gt; function = Student::getName;</span><br><span class="line">        String name = function.apply(student);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Integer&gt; supplier =</span><br><span class="line">                () -&gt; Integer.valueOf(BigDecimal.TEN.toString());</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">        UnaryOperator&lt;Boolean&gt; unaryOperator = flag -&gt; !flag;</span><br><span class="line">        Boolean apply2 = unaryOperator.apply(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(apply2);</span><br><span class="line"></span><br><span class="line">        BinaryOperator&lt;Integer&gt; operator = (x, y) -&gt; x * y;</span><br><span class="line">        Integer integer = operator.apply(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(integer);</span><br><span class="line"></span><br><span class="line">        test(() -&gt; <span class="string">"我是一个演示的函数式接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示自定义函数式接口使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> worker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Worker worker)</span> </span>&#123;</span><br><span class="line">        String work = worker.work();</span><br><span class="line">        System.out.println(work);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line">        <span class="function">String <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、Stream流式编程">3、Stream流式编程</h2>
<p>Stream（流）是一个来自数据源的元素队列并支持聚合操作</p>
<ul>
<li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li>
<li><strong>数据源</strong> 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li>
<li><strong>聚合操作</strong> 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</li>
</ul>
<p><strong>1. collect(Collectors.toList())</strong></p>
<p>将流转换为list。还有toSet()，toMap()等。及早求值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    System.out.println(studentList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[Student(name=shawn, height=165), Student(name=shawn22, height=170)]</span></span><br></pre></td></tr></table></figure>
<p><strong>2. forEach</strong></p>
<p>Stream 提供了新的方法 <code>forEach</code> 来迭代流中的每个数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. filter</strong></p>
<p>过滤筛选的作用。内部就是Predicate接口。惰性求值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>))</span><br><span class="line">        .filter(s -&gt; s.getHeight()&gt;<span class="number">165</span>)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    System.out.println(studentList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[Student(name=shawn22, height=170)]</span></span><br></pre></td></tr></table></figure>
<p><strong>3. map</strong></p>
<p>转换功能，内部就是Function接口。惰性求值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; studentList = Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>))</span><br><span class="line">        .filter(s -&gt; s.getHeight() &gt; <span class="number">165</span>)</span><br><span class="line">        .map(s-&gt; s.getName())</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    System.out.println(studentList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[shawn22]</span></span><br></pre></td></tr></table></figure>
<p><strong>5. flatMap</strong></p>
<p>将多个Stream合并为一个Stream。惰性求值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line"></span><br><span class="line">    Stream.of(studentList, Collections.singletonList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn222"</span>, <span class="number">180</span>)))</span><br><span class="line">        .flatMap(Collection::stream)</span><br><span class="line">        .map(s-&gt;s.getName())</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//shawn</span></span><br><span class="line"><span class="comment">//shawn22</span></span><br><span class="line"><span class="comment">//shawn222</span></span><br></pre></td></tr></table></figure>
<p><strong>6. max和min</strong></p>
<p>集合中求最大值和最小值，及早求值。maxBy或者minBy就是求最大值与最小值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line"></span><br><span class="line">    Optional&lt;Student&gt; student = studentList.stream()</span><br><span class="line">        .min(Comparator.comparing(Student::getHeight));</span><br><span class="line">    <span class="keyword">if</span>(student.isPresent())&#123;</span><br><span class="line">        System.out.println(student.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Student(name=shawn, height=165)</span></span><br></pre></td></tr></table></figure>
<p><strong>7. count</strong></p>
<p>统计功能，一般都是结合filter使用，因为先筛选出我们需要的再统计即可。及早求值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> count = studentList.stream().filter(s -&gt; s.getHeight() &gt; <span class="number">165</span>).count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p><strong>8. reduce</strong></p>
<p>reduce 操作可以实现从一组值中生成一个值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).reduce(<span class="number">10</span>, Integer::sum));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//25</span></span><br></pre></td></tr></table></figure>
<p><strong>9. collect高级用法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将分成true和false两个集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line">    System.out.println(studentList.stream()</span><br><span class="line">                       .collect(Collectors.partitioningBy(s -&gt; s.getName().contains(<span class="string">"shawn"</span>))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#123;false=[], true=[Student(name=shawn, height=165), Student(name=shawn22, height=170)]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Collectors.groupingBy与SQL 中的 group by 操作是一样的。</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test010</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line">    System.out.println(studentList.stream()</span><br><span class="line">                       .collect(Collectors.groupingBy(Student::getName)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test011</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; studentList = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn"</span>,<span class="number">165</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shawn22"</span>,<span class="number">170</span>));</span><br><span class="line">    System.out.println(studentList.stream().map(Student::getName)</span><br><span class="line">                       .collect(Collectors.joining(<span class="string">","</span>,<span class="string">"["</span>,<span class="string">"]"</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[shawn,shawn22]</span></span><br></pre></td></tr></table></figure>
<h2 id="4、Optional类">4、Optional类</h2>
<blockquote>
<p>Optional 类是一个可以为null的容器对象。目的是为了解决空指针异常。</p>
</blockquote>
<p><strong>1. empty()</strong></p>
<p>返回一个<code>Optional</code>容器对象，而不是 null。<strong>建议常用⭐⭐⭐⭐</strong></p>
<p><strong>2. get()</strong></p>
<p>如果创建的Optional中有值存在，则返回此值，否则抛出<code>NoSuchElementException</code>。在判空之前，千万不要直接使用！<strong>尽量别用！⭐</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//会报错java.util.NoSuchElementException: No value present</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;User&gt; opt = Optional.empty();</span><br><span class="line">    System.out.println(opt.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. of(T value)</strong></p>
<p>创建一个<code>Optional</code>对象，如果 value 是 null，则抛出 NPE。<strong>不建议用⭐⭐</strong></p>
<p><strong>4. ofNullable(T value)</strong></p>
<p>同上，创建一个<code>Optional</code>对象，但 value 为空时返回<code>Optional.empty()</code>。<strong>推荐使用⭐⭐⭐⭐⭐</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//输出Optional.empty，若存在就输出值</span></span><br><span class="line">    System.out.println(Optional.ofNullable(user));</span><br><span class="line">    <span class="comment">//会报错java.lang.NullPointerException</span></span><br><span class="line">    System.out.println(Optional.of(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>5. orElse(T other)</strong></p>
<p>同样是返回<code>Optional</code>中包装的值，但不同的是当取不到值时，返回你指定的 default。<strong>可以用⭐⭐⭐</strong></p>
<p><strong>6. orElseGet(Supplier&lt;? extends T&gt; other)</strong></p>
<p>如果创建的Optional中有值存在，则返回此值，否则返回一个由Supplier接口生成的值。<strong>推荐使用⭐⭐⭐⭐⭐</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">createNewUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"user方法创建"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"shawn"</span>, <span class="string">"男"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//下面两个若是空，都会调用本地方法创建新的，但是orElse无论是否存在值，都会执行方法，另一个却不会</span></span><br><span class="line">    User result = Optional.ofNullable(user).orElse(createNewUser());</span><br><span class="line">    User result2 = Optional.ofNullable(user).orElseGet(<span class="keyword">this</span>::createNewUser);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    System.out.println(result2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果显示</span></span><br><span class="line"><span class="comment">user方法创建</span></span><br><span class="line"><span class="comment">user方法创建</span></span><br><span class="line"><span class="comment">User(name=shawn, sex=男)</span></span><br><span class="line"><span class="comment">User(name=shawn, sex=男)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>7. orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</strong></p>
<p>如果创建的Optional中有值存在，则返回此值，否则抛出一个由指定的Supplier接口生成的异常。<strong>阻塞性业务场景推荐使用⭐⭐⭐⭐</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">null</span>;</span><br><span class="line">    User result = Optional.ofNullable(user).orElseThrow(NullPointerException::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure>
<p><strong>8. isPresent()</strong></p>
<p>如果创建的Optional中的值存在，返回true，否则返回false。在某些情况下很有用，但尽量不要用在 if 判断体中。<strong>可以用⭐⭐⭐</strong></p>
<p><strong>9. ifPresent(Consumer&lt;? super T&gt; consumer)</strong></p>
<p>判断<code>Optional</code>中是否有值，有值则执行 consumer，否则什么都不干。<strong>日常情况下请使用这个⭐⭐⭐⭐</strong></p>
<p><strong>10. filter(Predicate&lt;? super T&gt; predicate)</strong></p>
<p>如果创建的Optional中的值满足filter中的条件，则返回包含该值的Optional对象，否则返回一个空的Optional对象</p>
<p><strong>11. map</strong></p>
<p>如果创建的Optional中的值存在，对该值执行提供的Function函数调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"shawn"</span>, <span class="string">"男"</span>);</span><br><span class="line">    String sex = Optional.ofNullable(user)</span><br><span class="line">        .map(User::getSex).orElse(<span class="string">"女"</span>);</span><br><span class="line">    System.out.println(sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出男</span></span><br></pre></td></tr></table></figure>
<p><strong>12. flagMap</strong></p>
<p>如果创建的Optional中的值存在，就对该值执行提供的Function函数调用，返回一个Optional类型的值，否则就返回一个空的Optional对象，其返回的值是解除包装的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法在User类中定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">getPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"shawn"</span>, <span class="string">"男"</span>);</span><br><span class="line">    String sex = Optional.ofNullable(user)</span><br><span class="line">        .flatMap(User::getPosition).orElse(<span class="string">"女"</span>);</span><br><span class="line">    System.out.println(sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出男</span></span><br></pre></td></tr></table></figure>
<p><strong>13. filter</strong></p>
<p>filter() 接受一个 Predicate 参数，返回测试结果为 true 的值。如果测试结果为 false，会返回一个空的 Optional。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"shawn"</span>, <span class="string">"男"</span>);</span><br><span class="line">    Optional&lt;User&gt; result = Optional.ofNullable(user)</span><br><span class="line">        .filter(u -&gt; u.getName() != <span class="keyword">null</span> &amp;&amp; u.getSex().contains(<span class="string">"女"</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回Optional.empty</span></span><br></pre></td></tr></table></figure>
<p><strong>14. 其他</strong></p>
<p>Java 9 为 Optional 类添加了三个方法：or()、ifPresentOrElse() 和 stream()。or() 方法与 orElse() 和 orElseGet() 类似，它们都在对象为空的时候提供了替代情况。or() 的返回值是由 Supplier 参数产生的另一个 Optional 对象。</p>
<h2 id="5、Base64">5、Base64</h2>
<p>Base64工具类提供了一套静态方法获取下面三种BASE64编解码器：</p>
<ul>
<li>**基本：**输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。</li>
<li>**URL：**输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。</li>
<li>**MIME：**输出隐射到MIME友好格式。输出每行不超过76字符，并且使用’\r’并跟随’\n’作为分割。编码输出最后没有行分割。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    String B64 = Base64.getEncoder().encodeToString(<span class="string">"hello?world"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    System.out.println(B64); <span class="comment">// 输出为: aGVsbG8/d29ybGQ=</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解码</span></span><br><span class="line">    <span class="keyword">byte</span>[] baseBytes = Base64.getDecoder().decode(<span class="string">"aGVsbG8/d29ybGQ="</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(baseBytes, StandardCharsets.UTF_8)); <span class="comment">// 输出为: hello?world</span></span><br><span class="line"></span><br><span class="line">    String urlB64 = Base64.getUrlEncoder().encodeToString(<span class="string">"hello?world"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    System.out.println(urlB64); <span class="comment">// 输出为: aGVsbG8_d29ybGQ=</span></span><br><span class="line"></span><br><span class="line">    String mineB64 = Base64.getMimeEncoder().encodeToString(<span class="string">"hello?world"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    System.out.println(mineB64); <span class="comment">// 输出为: aGVsbG8/d29ybGQ=</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6、Java-8-日期时间">6、Java 8 日期时间</h2>
<blockquote>
<p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前的日期时间</span></span><br><span class="line">    LocalDateTime currentTime = LocalDateTime.now();</span><br><span class="line">    <span class="comment">//当前时间: 2021-08-05T12:06:15.590185</span></span><br><span class="line">    System.out.println(<span class="string">"当前时间: "</span> + currentTime);</span><br><span class="line"></span><br><span class="line">    LocalDate date1 = currentTime.toLocalDate();</span><br><span class="line">    <span class="comment">//当前日期: 2021-08-05</span></span><br><span class="line">    System.out.println(<span class="string">"当前日期: "</span> + date1);</span><br><span class="line"></span><br><span class="line">    Month month = currentTime.getMonth();</span><br><span class="line">    <span class="keyword">int</span> month1 = currentTime.get(ChronoField.MONTH_OF_YEAR);</span><br><span class="line">    <span class="keyword">int</span> day = currentTime.getDayOfMonth();</span><br><span class="line">    <span class="keyword">int</span> seconds = currentTime.getSecond();</span><br><span class="line">    <span class="comment">//月: 8, 日: 5, 秒: 15</span></span><br><span class="line">    System.out.println(<span class="string">"月: "</span> + month1 +<span class="string">", 日: "</span> + day +<span class="string">", 秒: "</span> + seconds);</span><br><span class="line"></span><br><span class="line">    LocalDateTime date2 = currentTime.withDayOfMonth(<span class="number">10</span>).withYear(<span class="number">2022</span>);</span><br><span class="line">    <span class="comment">//date2: 2022-08-10T12:06:15.590185</span></span><br><span class="line">    System.out.println(<span class="string">"date2: "</span> + date2);</span><br><span class="line"></span><br><span class="line">    LocalDate date3 = LocalDate.of(<span class="number">2022</span>, Month.DECEMBER, <span class="number">12</span>);</span><br><span class="line">    <span class="comment">//date3: 2022-12-12</span></span><br><span class="line">    System.out.println(<span class="string">"date3: "</span> + date3);</span><br><span class="line"></span><br><span class="line">    LocalTime date4 = LocalTime.of(<span class="number">22</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="comment">//date4: 22:15</span></span><br><span class="line">    System.out.println(<span class="string">"date4: "</span> + date4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析字符串</span></span><br><span class="line">    LocalTime date5 = LocalTime.parse(<span class="string">"20:15:30"</span>);</span><br><span class="line">    <span class="comment">//date5: 20:15:30</span></span><br><span class="line">    System.out.println(<span class="string">"date5: "</span> + date5);</span><br><span class="line"></span><br><span class="line">    Instant instant = Instant.now();</span><br><span class="line">    <span class="keyword">long</span> currentMilli = instant.toEpochMilli();</span><br><span class="line">    <span class="comment">//当前毫秒数：1628136375597</span></span><br><span class="line">    System.out.println(<span class="string">"当前毫秒数："</span>+currentMilli);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前时间日期</span></span><br><span class="line">    ZonedDateTime date6 = ZonedDateTime.parse(<span class="string">"2015-12-03T10:15:30+05:30[Asia/Shanghai]"</span>);</span><br><span class="line">    <span class="comment">//date6: 2021-08-05</span></span><br><span class="line">    System.out.println(<span class="string">"date6: "</span> + date1);</span><br><span class="line"></span><br><span class="line">    ZoneId id = ZoneId.of(<span class="string">"Europe/Paris"</span>);</span><br><span class="line">    <span class="comment">//ZoneId: Europe/Paris</span></span><br><span class="line">    System.out.println(<span class="string">"ZoneId: "</span> + id);</span><br><span class="line"></span><br><span class="line">    ZoneId currentZone = ZoneId.systemDefault();</span><br><span class="line">    <span class="comment">//当期时区: Asia/Shanghai</span></span><br><span class="line">    System.out.println(<span class="string">"当期时区: "</span> + currentZone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考文章：</p>
<p><a href="https://www.matools.com/api/java8" target="_blank" rel="noopener">https://www.matools.com/api/java8</a></p>
<p><a href="https://www.runoob.com/java/java8-new-features.html" target="_blank" rel="noopener">https://www.runoob.com/java/java8-new-features.html</a></p>
<p><a href="https://mp.weixin.qq.com/s/8n_3VaAcwauGHgoSG1K14g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/8n_3VaAcwauGHgoSG1K14g</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java8</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3打包后部分页面空白</title>
    <url>/posts/4c4cc90e.html</url>
    <content><![CDATA[<h3 id="一、问题描述">一、问题描述</h3>
<p>在开发模式下，使用命令<code>npm run serve</code>运行可以正常显示，但使用<code>npm run bulid</code>打包后打开index.html文件发现显示白屏，但是资源都能正常获取，其他页面也显示正常。<br>
<img src="https://img-blog.csdnimg.cn/1bddb29ab3924cc098a2a364dd2596e3.png" alt="请添加图片描述"></p>
<a id="more"></a>
<p><img src="https://img-blog.csdnimg.cn/a6cc41472c9b42b9be84132825a9b28e.png" alt="请添加图片描述"></p>
<h3 id="二、问题解决">二、问题解决</h3>
<p>查找了很长时间。发现问题是透明度的问题，原来我在一个页面设置的透明度为75%，但是打包后显示则为1%，原因好像是预处理器无视了百分号，把75这个值clip到1%，因此无法显示出来。这里把opacity设置为小数，把75%设置为0.75重新打包即可正常显示。</p>
<p><img src="https://img-blog.csdnimg.cn/bed1a1bb95114c98ac341ec9fd46bf7c.png" alt="请添加图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/eee10644eb234a7494926f7260bdaa0b.png" alt="请添加图片描述"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>EAIBOT小车树莓派3B网络问题</title>
    <url>/posts/202ae1e9.html</url>
    <content><![CDATA[<h2 id="一、问题描述">一、问题描述</h2>
<p>电脑和EAIBOT小车的树莓派3b连接好路由器WIFI后，树莓派和电脑能够正常通信，电脑能正常上网，但是发现树莓派无法上网。命令<code>ping baidu.com</code>显示找不到主机，在修改<code>/etc/resolv.conf</code>中的<code>nameserver 8.8.8.8</code>DNS配置后仍显示网络不可达。</p>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210727144414044.png" alt="image-20210727144414044"></p>
<a id="more"></a>
<h2 id="二、问题分析">二、问题分析</h2>
<p>输入<code>ifconfig</code>命令后，eth0是以太网网卡，lo指的是本地回环，wlan0是无线网卡，我无线路由器网段为192.168.32.x，现在是无线网进行连接，局域网能正常通讯。</p>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210727150148403.png" alt="image-20210727150148403"></p>
<p>因为我连接了wlan0的wifi，因此可以正常通信，但是要访问外部网络时，由于我的以太网网卡优先级高于无线网卡，且以太网网段不在和路由器同一个网段中，此时通过eth0无法访问外网！</p>
<h2 id="三、解决方案">三、解决方案</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方案一：禁用以太网卡</span></span><br><span class="line">sudo ifconfig eth0 down</span><br><span class="line"><span class="comment">#方案二：设置eth0网卡ip到同网段</span></span><br><span class="line"><span class="comment">#打卡网卡</span></span><br><span class="line">sudo ifconfig eth0 up</span><br><span class="line"><span class="comment">#设置ip</span></span><br><span class="line">sudo ifconfig eth0 192.168.32.203</span><br><span class="line"><span class="comment">#配置好即可上网</span></span><br></pre></td></tr></table></figure>
<h2 id="四、ip静态配置">四、ip静态配置</h2>
<p>静态的IP地址，一来可以防范DHCP自动分配的IP来回变动，导致远程SSH时常无法连接；二来还可以提高树莓派的网络连接速度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意: wifi需要将网卡设置为 wlan0 而不是 eth0</span></span><br><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">sudo vim /etc/dhcpcd.conf</span><br><span class="line"><span class="comment"># 指定接口 eth0</span></span><br><span class="line">interface eth0</span><br><span class="line"><span class="comment"># 指定静态IP，/24表示子网掩码为 255.255.255.0</span></span><br><span class="line">static ip_address=192.168.32.203/24</span><br><span class="line"><span class="comment"># 路由器/网关IP地址</span></span><br><span class="line"><span class="comment"># 手动自定义DNS服务器，这是我路由器默认网关</span></span><br><span class="line">static routers=192.168.32.1 </span><br><span class="line">static domain_name_servers=114.114.114.114</span><br><span class="line"><span class="comment"># 最后重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>docker学习笔记</title>
    <url>/posts/177bfdaa.html</url>
    <content><![CDATA[<h2 id="一、Docker概述">一、Docker概述</h2>
<h3 id="1、Docker历史">1、Docker历史</h3>
<blockquote>
<p>更详细的关于Docker历史详见<a href="https://baike.baidu.com/item/Docker/13344470?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p>
</blockquote>
<p>Docker 公司起初是一家名为 <code>dotCloud</code> 的平台即服务（Platform-as-a-Service, PaaS）提供商。底层技术上，dotCloud平台利用了 Linux 容器技术。2013年，dotCloud 的 PaaS 业务并不景气，公司需要寻求新的突破。2013 年 3 月，dotCloud 公司的创始人之一，Docker 之父，28 岁的 <strong>Solomon Hykes</strong> 正式决定，将 Docker 项目开源。开源当月， Docker 0.1 版本发布。此后的每一个月， Docker 都会发布一个版本。到 2014 年 6 月 9 日， Docker 1.0 版本正式发布。而在Docker火了之后，<code>dotCloud</code>公司干脆把公司名字也改成了 <code>Docker Inc</code>。</p>
<a id="more"></a>
<h3 id="2、Docker介绍">2、Docker介绍</h3>
<p>Docker是基于Go语言实现的云开源项目。Docker的主要目标是“Build，Ship and Run Any App , Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。</p>
<h3 id="3、Docker与虚拟机对比">3、Docker与虚拟机对比</h3>
<ul>
<li>
<p>虚拟机属于虚拟化技术；而Docker这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。</p>
</li>
<li>
<p>虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢；而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。</p>
</li>
<li>
<p>Docker启动时间很快，几秒钟就能完成，而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）；此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。</p>
</li>
<li>
<p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>
</li>
<li>
<p>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</p>
</li>
</ul>
<blockquote>
<p>Docker官网：<a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a><br>
Docker中文网站：<a href="https://www.docker-cn.com" target="_blank" rel="noopener">https://www.docker-cn.com</a><br>
Docker Hub官网：<a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a>  （仓库）</p>
</blockquote>
<h2 id="二、Docker安装">二、Docker安装</h2>
<h3 id="1、Docker的基本组成">1、Docker的基本组成</h3>
<p><strong>Docker架构图</strong><br>
<img src="https://img-blog.csdnimg.cn/20210617101257800.png" alt="在这里插入图片描述"></p>
<ul>
<li>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是 image镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</li>
<li>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</li>
<li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</li>
<li>仓库是放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。</li>
</ul>
<h3 id="2、安装过程">2、安装过程</h3>
<p>1、官网安装手册：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p>
<p>2、linux内核推荐3.8及以上，这里我使用了centos8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看内核版本</span></span><br><span class="line">uname -r</span><br><span class="line"><span class="comment">#查看系统版本信息</span></span><br><span class="line">cat /etc/os-release</span><br></pre></td></tr></table></figure>
<p>3、yum安装gcc相关环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc </span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>
<p>4、卸载旧环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure>
<p>5、安装需要的软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<p>6、设置仓库镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方源是国外的，用国内源代替</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>7、更新yum软件包索引</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#centos8使用该命令，其他版本可能会有些许不同</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<p>8、安装Docker CE（社区版）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<p>9、Docker启动、测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#查看版本信息</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment">#运行hello-word，在这里因为本地镜像没有会先拉远程镜像然后启动容器，如果没有找到就报错</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p>10、Docker卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先停止docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment">#卸载docker</span></span><br><span class="line">yum -y remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment">#删除目录</span></span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
<h3 id="3、阿里云镜像加速">3、阿里云镜像加速</h3>
<p>进入阿里云搜索镜像容器服务，选择管理控制台，找到镜像工具下的镜像加速器，找到相应版本的，每个人都有自己的加速器地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建目录</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"><span class="comment">#设置加速</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://raw0m61v.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">#重载配置</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="三、Docker常用命令">三、Docker常用命令</h2>
<h3 id="1、帮助命令">1、帮助命令</h3>
<blockquote>
<p>官方文档：<a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version  <span class="comment"># 显示 Docker 版本信息</span></span><br><span class="line">docker info		<span class="comment"># 显示 Docker 系统信息，包括镜像和容器数</span></span><br><span class="line">docker &lt;命令&gt; --<span class="built_in">help</span>  	<span class="comment"># 帮助命令</span></span><br></pre></td></tr></table></figure>
<h3 id="2、镜像命令">2、镜像命令</h3>
<p><strong>docker images</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出本地主机上的镜像 </span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 同一个仓库源可以有多个 TAG，代表这个仓库源的不同版本，我们使用REPOSITORY：TAG 定义不同的镜像，如果你不定义镜像的标签版本，docker将默认使用 lastest 镜像！</span></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">-a 		<span class="comment">#列出本地所有镜像</span></span><br><span class="line">-q 		<span class="comment">#只显示镜像id</span></span><br></pre></td></tr></table></figure>
<p><strong>docker search</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搜索镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="comment"># docker search 某个镜像的名称, 对应DockerHub仓库中的镜像</span></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">--filter=stars=50  		<span class="comment">#列出收藏数不小于指定值的镜像。</span></span><br></pre></td></tr></table></figure>
<p><strong>docker pull</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拉取镜像，不写tag，默认是latest</span></span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="comment"># 指定版本下载</span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>
<p><strong>docker rmi</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi -f 镜像id  		<span class="comment">#删除单个</span></span><br><span class="line">docker rmi -f 镜像名:tag 镜像名:tag   <span class="comment">#删除多个</span></span><br><span class="line">docker rmi -f $(docker images -qa)   <span class="comment"># 删除全部</span></span><br></pre></td></tr></table></figure>
<h3 id="3、容器命令">3、容器命令</h3>
<p>==有镜像才能创建容器==</p>
<p><strong>新建容器并启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先拉取一下镜像</span></span><br><span class="line">docker pull centos</span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND][ARG...]</span><br><span class="line"><span class="comment"># 常用参数说明</span></span><br><span class="line">--name=<span class="string">"Name"</span>		<span class="comment"># 给容器指定一个名字</span></span><br><span class="line">-d					<span class="comment"># 后台方式运行容器，并返回容器的id！</span></span><br><span class="line">-i					<span class="comment"># 以交互模式运行容器，通过和 -t 一起使用</span></span><br><span class="line">-t					<span class="comment"># 给容器重新分配一个终端，通常和 -i 一起使用</span></span><br><span class="line">-P					<span class="comment"># 随机端口映射（大写）</span></span><br><span class="line">-p					<span class="comment"># 指定端口映射（小结），一般可以有四种写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用centos进行用交互模式启动容器，在容器内执行/bin/bash命令！</span></span><br><span class="line">docker run -it centos /bin/bash</span><br><span class="line"><span class="comment">#退出容器可以使用exit</span></span><br></pre></td></tr></table></figure>
<p><strong>列出所有运行的容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker ps [OPTIONS]</span><br><span class="line"><span class="comment"># 常用参数说明</span></span><br><span class="line">-a      <span class="comment"># 列出当前所有正在运行的容器 + 历史运行过的容器 </span></span><br><span class="line">-l      <span class="comment"># 显示最近创建的容器</span></span><br><span class="line">-n=?    <span class="comment"># 显示最近n个创建的容器</span></span><br><span class="line">-q      <span class="comment"># 静默模式，只显示容器编号。</span></span><br></pre></td></tr></table></figure>
<p><strong>退出容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span> 			<span class="comment"># 容器停止退出 </span></span><br><span class="line">ctrl+P+Q 		<span class="comment"># 容器不停止退出</span></span><br></pre></td></tr></table></figure>
<p><strong>启动停止容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start (容器id or 容器名)   	 <span class="comment"># 启动容器  </span></span><br><span class="line">docker restart (容器id or 容器名) 	 <span class="comment"># 重启容器  </span></span><br><span class="line">docker stop (容器id or 容器名)   	 <span class="comment"># 停止容器</span></span><br><span class="line">docker <span class="built_in">kill</span> (容器id or 容器名)  		 <span class="comment"># 强制停止容器</span></span><br></pre></td></tr></table></figure>
<p><strong>删除容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm 容器id                  <span class="comment"># 删除指定容器</span></span><br><span class="line">docker rm -f $(docker ps -a -q)  <span class="comment"># 删除所有容器</span></span><br><span class="line">docker ps -a -q|xargs docker rm  <span class="comment"># 删除所有容器</span></span><br></pre></td></tr></table></figure>
<h3 id="4、常用其他命令">4、常用其他命令</h3>
<p><strong>后台启动容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker run -d 容器名</span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line">docker run -d centos <span class="comment"># 启动centos，使用后台方式启动</span></span><br><span class="line"><span class="comment"># 问题： 使用docker ps 查看，发现容器已经退出了！</span></span><br><span class="line"><span class="comment"># 解释：Docker容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命令，就会自动退出。</span></span><br><span class="line"><span class="comment"># 比如，你运行了nginx服务，但是docker前台没有运行应用，这种情况下，容器启动后，会立即自杀，因为他觉得没有程序了，所以最好的情况是，将你的应用使用前台进程的方式运行启动。</span></span><br></pre></td></tr></table></figure>
<p><strong>查看日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker logs -f -t --tail 容器id</span><br></pre></td></tr></table></figure>
<p><strong>查看容器中运行的进程信息，支持 ps 命令参数。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>
<p><strong>进入正在运行的容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令1</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [容器id or容器名] /bin/bash</span><br><span class="line"><span class="comment"># 命令2</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="comment"># 区别</span></span><br><span class="line"><span class="comment"># exec   是在容器中打开新的终端，并且可以启动新的进程</span></span><br><span class="line"><span class="comment"># attach 直接进入容器启动命令的终端，不会启动新的进程</span></span><br></pre></td></tr></table></figure>
<p><strong>从容器文件拷贝</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令，反之亦可</span></span><br><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br><span class="line"><span class="comment"># linux复制查看，是否复制成功，举例</span></span><br><span class="line">docker cp c8530dbbe3b4:/home/f1 /home</span><br></pre></td></tr></table></figure>
<h3 id="5、小结">5、小结</h3>
<p><img src="https://img-blog.csdnimg.cn/img_convert/085c7dc4c3eb49044e133cd8aa2c3517.png" alt="image-20210415171859489"></p>
<h2 id="四、Docker简单实例">四、Docker简单实例</h2>
<h3 id="1、Docker安装nginx">1、Docker安装nginx</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搜索stars大于等于1000的nginx镜像</span></span><br><span class="line">docker search nginx -f=stars=1000</span><br><span class="line"><span class="comment">#拉取nginx最新镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="comment">#运行docker容器，指定容器名字以及映射端口，容器80映射到本机3500</span></span><br><span class="line">docker run -d --name mynginx -p 3500:80 nginx</span><br><span class="line"><span class="comment">#测试是否成功</span></span><br><span class="line">curl localhost:3500</span><br><span class="line"><span class="comment">#进入容器终端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mynginx /bin/bash</span><br><span class="line"><span class="comment">#寻找nginx,/usr/share/nginx里可以修改Index.html</span></span><br><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>
<h3 id="2、Docker安装tomcat">2、Docker安装tomcat</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方文档解释</span></span><br><span class="line"><span class="comment"># -it ：交互模式</span></span><br><span class="line"><span class="comment"># --rm：容器启动成功并退出以后容器就自动移除，一般在测试情况下使用！</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、下载最新版tomcat镜像</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="comment"># 2、启动</span></span><br><span class="line">docker run -d -p 8555:8080 --name tomcat9 tomcat</span><br><span class="line"><span class="comment"># 3、进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat9 /bin/bash</span><br></pre></td></tr></table></figure>
<h2 id="五、Docker镜像和容器数据卷">五、Docker镜像和容器数据卷</h2>
<h3 id="1、镜像加载原理">1、镜像加载原理</h3>
<blockquote>
<p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>
</blockquote>
<p><strong>UnionFS（联合文件系统）</strong>：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual ﬁlesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br>
<strong>特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/616dda39f76d07c18c29097ad16ebcfc.png" alt="img"><br>
bootfs(boot ﬁle system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。<br>
rootfs (root ﬁle system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p>
<p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部！这一层就是我们通常说的容器层，容器之下的都叫镜像层。</p>
<h3 id="2、镜像commit命令">2、镜像commit命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#提交容器副本使之成为一个新的镜像！</span></span><br><span class="line">docker commit </span><br><span class="line"><span class="comment"># 语法</span></span><br><span class="line">docker commit -m=<span class="string">"提交的描述信息"</span> -a=<span class="string">"作者"</span> 容器id 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure>
<h3 id="3、容器数据卷">3、容器数据卷</h3>
<blockquote>
<p>容器的数据持久化，以及容器间的继承和数据共享，相当于双向绑定</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker run -it -v 宿主机绝对路径目录:容器内目录 镜像名</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="comment">#查看数据卷是否挂载成功 docker inspect 容器id 找到mounts</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名挂载</span></span><br><span class="line"><span class="comment">#-v 容器内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="comment"># 匿名挂载的缺点，就是不好维护，通常使用命令 docker volume维护</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="comment"># 具名挂载</span></span><br><span class="line"><span class="comment">#-v 卷名:/容器内路径</span></span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx nginx</span><br><span class="line"><span class="comment"># 查看挂载的路径，也可以docker inspect 容器id 查看容器信息</span></span><br><span class="line">docker volume inspect nginxconfig</span><br><span class="line"></span><br><span class="line"><span class="comment">#--volumes-from可以实现多个容器数据同步,举例</span></span><br><span class="line">docker run -it --name docker03 --volumes-from docker01 centos:1.0</span><br></pre></td></tr></table></figure>
<h2 id="六、DockerFile">六、DockerFile</h2>
<blockquote>
<p>dockerﬁle是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。<br>
地址：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
</blockquote>
<h3 id="1、DockerFile构建">1、DockerFile构建</h3>
<p><strong>基础知识：</strong><br>
1、每条保留字指令都必须为==大写字母==且后面要跟随至少一个参数<br>
2、指令按照从上到下，顺序执行<br>
3、# 表示注释<br>
4、每条指令都会创建一个新的镜像层，并对镜像进行提交<br>
<strong>构建流程：</strong><br>
1、docker从基础镜像运行一个容器<br>
2、执行一条指令并对容器做出修改<br>
3、执行类似 docker commit 的操作提交一个新的镜像层<br>
4、Docker再基于刚提交的镜像运行一个新容器<br>
5、执行dockerﬁle中的下一条指令直到所有指令都执行完成！</p>
<h3 id="2、DockerFile指令">2、DockerFile指令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM    	  <span class="comment"># 基础镜像，当前新镜像是基于哪个镜像的</span></span><br><span class="line">MAINTAINER    <span class="comment"># 镜像维护者的姓名混合邮箱地址</span></span><br><span class="line">RUN  		  <span class="comment"># 容器构建时需要运行的命令</span></span><br><span class="line">EXPOSE   	  <span class="comment"># 当前容器对外保留出的端口</span></span><br><span class="line">WORKDIR  	  <span class="comment"># 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</span></span><br><span class="line">ENV  		  <span class="comment"># 用来在构建镜像过程中设置环境变量</span></span><br><span class="line">ADD   		  <span class="comment"># 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</span></span><br><span class="line">COPY  		  <span class="comment"># 类似ADD，拷贝文件和目录到镜像中！</span></span><br><span class="line">VOLUME  	  <span class="comment"># 容器数据卷，用于数据保存和持久化工作</span></span><br><span class="line">CMD  		  <span class="comment"># 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有最后一个生效！docker run时参数可以被覆盖，一般指定默认的运行参数</span></span><br><span class="line">ENTRYPOINT    <span class="comment"># 指定一个容器启动时要运行的命令！和CMD一样，但无法覆盖，一般指定默认的运行命令</span></span><br><span class="line">ONBUILD   	  <span class="comment"># 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD被触发</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9b70944cd4117093c3bb75565704156e.png" alt="image-20210417150051303"></p>
<h3 id="3、创建自己的Centos镜像">3、创建自己的Centos镜像</h3>
<p>1、编写dockerfile文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER shawn&lt;shawn955@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">"---构建完毕---"</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>
<p>2、构建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#. 表示当前目录，如果名字是Dockerfile，则可以不需要命令-f dockerfile地址</span></span><br><span class="line">docker build -f dockerfile地址 -t 新镜像名字:TAG .</span><br><span class="line"><span class="comment">#实例</span></span><br><span class="line">docker build -f dockerfile -t mycentos:1.0 .</span><br><span class="line"><span class="comment">#可以查看构建历史</span></span><br><span class="line">docker <span class="built_in">history</span> mycentos</span><br></pre></td></tr></table></figure>
<h3 id="4、构建自己的tomcat镜像">4、构建自己的tomcat镜像</h3>
<p>1、准备文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备好以下文件，创建Dockerfile文件，用这个文件名构建时默认不用指定文件了</span></span><br><span class="line">-rw-r--r-- 1 root root  11486964 3月  30 18:46 apache-tomcat-9.0.45.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 189756259 4月  17 15:58 jdk-8u161-linux-x64.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root         0 4月  17 16:05 README.md</span><br></pre></td></tr></table></figure>
<p>2、构建Dockerfile文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER shawn&lt;shawn955@163.com&gt;</span><br><span class="line"><span class="comment">#拷贝</span></span><br><span class="line">COPY README.md /usr/<span class="built_in">local</span>/README.md</span><br><span class="line"><span class="comment">#把java与tomcat添加到容器中，会自动解压</span></span><br><span class="line">ADD jdk-8u161-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line">ADD apache-tomcat-9.0.45.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment">#设置工作访问时候的WORKDIR路径，登录落脚点</span></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"><span class="comment">#安装vim编辑器</span></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"><span class="comment">#配置java与tomcat环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_161</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/apache-tomcat-9.0.45</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"><span class="comment">#容器运行时监听的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="comment">#启动时运行tomcat</span></span><br><span class="line">CMD /usr/<span class="built_in">local</span>/apache-tomcat-9.0.45/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-9.0.45/bin/logs/catalina.out</span><br></pre></td></tr></table></figure>
<p>3、构建镜像以及启动挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建镜像</span></span><br><span class="line">docker build -t mytomcat .</span><br><span class="line"><span class="comment">#启动并挂载容器卷，最后只需要在本地宿主机上传java文件即可</span></span><br><span class="line">docker run -d -p 9090:8080 --name mytomcat -v /home/tomcat/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.45/webapps/<span class="built_in">test</span> -v /home/tomcat/build/tomcat/tomcat9logs/:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.45/logs --privileged=<span class="literal">true</span> mytomcat</span><br></pre></td></tr></table></figure>
<h3 id="5、发布镜像">5、发布镜像</h3>
<p><strong>发布到Docker Hub官网</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看docker login 命令</span></span><br><span class="line">docker login --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">docker login -u [用户名] -p [密码]</span><br><span class="line"><span class="comment">#发布，需要带标签</span></span><br><span class="line">docker push mytomcat:latest</span><br><span class="line"><span class="comment">#若报错denied: requested access to the resource is denied</span></span><br><span class="line"><span class="comment">#问题：本地镜像名无帐号信息，解决加 tag即可，另外需要加上用户名才能push</span></span><br><span class="line">docker tag [镜像id] shawn222/mytomcat:v1</span><br><span class="line"><span class="comment">#发布</span></span><br><span class="line">docker push shawn222/mytomcat:v1</span><br><span class="line"><span class="comment">#下线</span></span><br><span class="line">docker <span class="built_in">logout</span></span><br></pre></td></tr></table></figure>
<p><strong>发布到阿里云</strong></p>
<p><code>登录阿里云&gt;找到容器镜像服务&gt;创建命名空间&gt;创建镜像仓库&gt;点击进入这个镜像仓库</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录</span></span><br><span class="line">docker login --username=[账号] registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"><span class="comment">#标记</span></span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/shawn222/ownwarehouse:[镜像版本号]</span><br><span class="line"><span class="comment">#发布</span></span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/shawn222/ownwarehouse:[镜像版本号]</span><br></pre></td></tr></table></figure>
<h2 id="七、Docker网络">七、Docker网络</h2>
<h3 id="1、网络详解">1、网络详解</h3>
<p>查看本地ip地址<code>ip addr</code>，docker 采用了veth-pair协议，docker每启动一个容器都会生成一对虚拟接口进行通信（这样一对接口叫veth pair）；如同路由器一样进行与容器间的通信。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lo        127.0.0.1         <span class="comment"># 本机回环地址</span></span><br><span class="line">eth0      172.20.49.98/20   <span class="comment"># 服务器私有ip地址</span></span><br><span class="line">docker0   172.17.0.1/16     <span class="comment"># docker网桥</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0f5be5ff2ea23adfcd03641c8c4fca75.png" alt="image-20210517165039059"></p>
<blockquote>
<p>在容器启动时使用–link已经过时，原理是在主机的域名和ip直接配置到了hosts文件中</p>
</blockquote>
<h3 id="2、自定义网络">2、自定义网络</h3>
<p>因为使用默认网络创建的容器不能ping通容器名，而使用自定义网络可以ping通</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有网络，默认桥接</span></span><br><span class="line">docker network ls</span><br><span class="line"><span class="comment"># 默认我们不配置网络，也就相当于默认值 --net bridge  使用的docker0 </span></span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line">docker run -d -P --name tomcat02 --net bridge tomcat</span><br><span class="line"><span class="comment"># docker0网络的特点</span></span><br><span class="line">1.	它是默认的</span><br><span class="line">2.	域名访问不通</span><br><span class="line">3.  可以使用--link，但是有问题</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Docker网络模式</th>
<th>配置</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">host模式</td>
<td>–net=host</td>
<td style="text-align:center">容器和宿主机共享Network namespace。</td>
</tr>
<tr>
<td style="text-align:center">container模式</td>
<td>-net=container:NAME_or_ID</td>
<td style="text-align:center">容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。</td>
</tr>
<tr>
<td style="text-align:center">Docker网络模式</td>
<td>–net=none</td>
<td style="text-align:center">容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。</td>
</tr>
<tr>
<td style="text-align:center">bridge模式</td>
<td>–net=bridge</td>
<td style="text-align:center">（默认为该模式）</td>
</tr>
<tr>
<td style="text-align:center">自定义模式</td>
<td>-net=自定义</td>
<td style="text-align:center">用户自己使用network相关命令定义网络，创建容器的时候可以指定为自己定</td>
</tr>
</tbody>
</table>
<p><strong>创建自定义网络</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line"><span class="comment"># 查看一下是否成功创建</span></span><br><span class="line">docker network ls</span><br><span class="line">docker network inspect mynet</span><br><span class="line"><span class="comment"># 使用自定义网络创建两个容器</span></span><br><span class="line">docker run -d -P --name tomcat-net-01 --net mynet tomcat</span><br><span class="line">docker run -d -P --name tomcat-net-02 --net mynet tomcat</span><br><span class="line"><span class="comment"># 进入容器内，发现使用容器名也可以ping通</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat-net-01 ping tomcat-net-02</span><br></pre></td></tr></table></figure>
<h3 id="3、网络连通">3、网络连通</h3>
<p>默认的docker01网络和自定义的网络无法连通，这就是网络隔离，若要一个网段的容器与另一个网段进行通信，则需要使用<code>docker network connect</code>命令</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/12002d46e97e2f46373ad0ca9170b8cc.png" alt="image-20210517203104154"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看帮助文档，发现connect以及详情</span></span><br><span class="line">docker network --<span class="built_in">help</span></span><br><span class="line">docker network connect --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># docker network connect [OPTIONS] NETWORK CONTAINER</span></span><br><span class="line"><span class="comment"># 运行以下命令，tomcat01即可与mynet通信，这相当于服务器的公网和私网</span></span><br><span class="line">docker network connect mynet tomcat01</span><br><span class="line"><span class="comment"># 检查发现容器已被自定义网络记录</span></span><br><span class="line">docker network inspect mynet</span><br></pre></td></tr></table></figure>
<h2 id="八、Docker实战">八、Docker实战</h2>
<h3 id="1、Idea整合Docker发布自己镜像">1、Idea整合Docker发布自己镜像</h3>
<p><strong>创建springboot项目</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建最基本的springboot项目</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCintroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello shawn"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进行package打包，就会有一个jar包生成</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/98f17c5480e8c7fd5aa07bc1151fa261.png" alt="image-20210517212259595"></p>
<p><strong>打包镜像并启动容器</strong></p>
<p>在项目下编写 Dockerﬁle 文件，将打包好的jar包拷贝到Dockerﬁle同级目录</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="comment"># 先移动到同级目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./*.jar /app.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--server.port=8080"</span>]</span></span><br><span class="line"><span class="comment"># 指定暴露的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure>
<p>上传jar包和Dockerfile到服务器，保证在同一目录下，构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建镜像名为shawn666的镜像</span></span><br><span class="line">docker build -t shawn666 .</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -d -p 8083:8080 --name shawn-springboot shawn666</span><br><span class="line"><span class="comment"># 测试成功</span></span><br><span class="line">curl localhost:8083/hello</span><br></pre></td></tr></table></figure>
<h3 id="2、Redis集群部署">2、Redis集群部署</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#shell脚本循环生成配置文件</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6);\</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">mkdir -p /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf</span><br><span class="line">touch /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1<span class="variable">$&#123;port&#125;</span></span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分别启动docker容器，这里也可以用shell脚本编写</span></span><br><span class="line">docker pull redis</span><br><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 -v /mydata/redis/node-1/data:/data -v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.11 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6372:6379 -p 16372:16379 --name redis-2 -v /mydata/redis/node-2/data:/data -v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.12 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6373:6379 -p 16373:16379 --name redis-3 -v /mydata/redis/node-3/data:/data -v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.13 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6374:6379 -p 16374:16379 --name redis-4 -v /mydata/redis/node-4/data:/data -v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.14 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6375:6379 -p 16375:16379 --name redis-5 -v /mydata/redis/node-5/data:/data -v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.15 redis redis-server /etc/redis/redis.conf</span><br><span class="line">docker run -p 6376:6379 -p 16376:16379 --name redis-6 -v /mydata/redis/node-6/data:/data -v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf -d --net redis --ip 172.38.0.16 redis redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="comment">#随机进入一个容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis-1 /bin/bash</span><br><span class="line"><span class="comment">#生成集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1   </span><br><span class="line"><span class="comment">#查看集群结点</span></span><br><span class="line">cluster nodes</span><br><span class="line"><span class="comment">#查看集群信息</span></span><br><span class="line">cluster info</span><br><span class="line"><span class="comment">#集群会自动计算存储位置，若主节点宕机，从节点会成为主节点</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a b</span><br><span class="line">-&gt; Redirected to slot [15495] located at 172.38.0.13:6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<h2 id="九、Docker-Compose">九、Docker Compose</h2>
<h3 id="1、Docker-Compose">1、Docker Compose</h3>
<blockquote>
<p>Compose是一个用于定义和运行多容器Docker应用程序的工具。使用Compose，可以使用YAML文件来配置应用程序的服务。然后使用一个命令，从配置中创建并启动所有服务。Compose适用于所有环境：生产、暂存、开发、测试以及CI工作流。</p>
<p>官网地址：<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a></p>
</blockquote>
<h3 id="2、Compoese安装">2、Compoese安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为compose是docker开源第三方软件，需要额外下载</span></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">#获取可执行权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">#进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure>
<h3 id="3、yaml配置文件规则">3、yaml配置文件规则</h3>
<p><code>docker-compose.yml</code>配置文件作为核心文件。详细配置文件官网：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yaml文件是三层</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">''</span> <span class="comment">#1、版本</span></span><br><span class="line"><span class="attr">services:</span>  <span class="string">/2、服务</span></span><br><span class="line">  <span class="string">服务1:</span>   </span><br><span class="line">  	<span class="comment">#服务配置，和docker很像</span></span><br><span class="line">  	<span class="attr">image:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="comment">#有依赖关系先启动依赖，最后启动本服务</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="string">......</span></span><br><span class="line">  <span class="string">服务2:</span></span><br><span class="line">    <span class="string">......</span></span><br><span class="line"><span class="comment">#3、其他配置 网络/卷、全局规则</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">configs:</span></span><br></pre></td></tr></table></figure>
<h3 id="4、Compose体验">4、Compose体验</h3>
<p>官网demo地址：<a href="https://docs.docker.com/compose/gettingstarted/" target="_blank" rel="noopener">https://docs.docker.com/compose/gettingstarted/</a></p>
<p><strong>1、前期准备</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir composetest</span><br><span class="line"><span class="built_in">cd</span> composetest</span><br><span class="line"><span class="comment">#创建py文件</span></span><br><span class="line">vim app.py</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在py文件里写入以下内容，这里是一个简单的web服务</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#这里host主机使用了redis域名，因为docker在同一网络下，可以使用域名进行访问</span></span><br><span class="line">cache = redis.Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hit_count</span><span class="params">()</span>:</span></span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">'hits'</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen &#123;&#125; times.\n'</span>.format(count)</span><br></pre></td></tr></table></figure>
<p>之后<code>vim requirements.txt</code>文件，写入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure>
<p><strong>2、创建Dockerfile</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line">FROM python:3.7-alpine</span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP=app.py</span><br><span class="line">ENV FLASK_RUN_HOST=0.0.0.0</span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">EXPOSE 5000</span><br><span class="line">COPY . .</span><br><span class="line">CMD [<span class="string">"flask"</span>, <span class="string">"run"</span>]</span><br></pre></td></tr></table></figure>
<p><strong>3、定义Compose服务（docker-compose.yml）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">"3.9"</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"5000:5000"</span></span><br><span class="line">  redis:</span><br><span class="line">    image: <span class="string">"redis:alpine"</span></span><br></pre></td></tr></table></figure>
<p><strong>4、输入<code>docker-compose up</code>运行Compose服务，<code>docker-compose stop</code>停止服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这是生成后的四个文件</span></span><br><span class="line">-rw-r--r-- 1 root root 683 6月  12 19:56 app.py</span><br><span class="line">-rw-r--r-- 1 root root 111 6月  12 19:55 docker-compose.yml</span><br><span class="line">-rw-r--r-- 1 root root 281 6月  12 19:53 Dockerfile</span><br><span class="line">-rw-r--r-- 1 root root  12 6月  12 19:53 requirements.txt</span><br></pre></td></tr></table></figure>
<p>到如图所示情况后，最后在浏览器输入<code>http://MACHINE_VM_IP:5000</code>即可访问(注意端口的开放)<br>
<img src="https://img-blog.csdnimg.cn/20210617100654718.png" alt="在这里插入图片描述"></p>
<h3 id="5、Cpmpose实战">5、Cpmpose实战</h3>
<blockquote>
<p>快速搭建wordpress的demo:<a href="https://docs.docker.com/samples/wordpress/" target="_blank" rel="noopener">https://docs.docker.com/samples/wordpress/</a></p>
<p>对于springboot实战如下</p>
</blockquote>
<p><strong>1、创建springboot项目</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml的依赖，要选择web和redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>2、编写<code>application.yml</code>文件</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">  <span class="comment">#这里主机使用了名字，因为在docker联通的网络中，可以用主机名代替ip。</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure>
<p><strong>3、编写java文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComposeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"view"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().increment(<span class="string">"view"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"您已访问次数"</span>+ redisTemplate.opsForValue().get(<span class="string">"view"</span>)+<span class="string">"次"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4、maven打包</strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/648a0913b9b0ed4f96c6626869b04b06.png" alt="image-20210614173849606"></p>
<p><strong>5、在根目录编写dockerfile文件</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./*.jar /app.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--server=8080"</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8808</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"./app.jar"</span>]</span></span><br></pre></td></tr></table></figure>
<p><strong>6、在根目录编写<code>docker-compose.yml</code>文件</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.9"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">shawnapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">dockerfile</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">shawnapp</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure>
<p><strong>7、上传部署，启动服务</strong></p>
<p>将<code>docker-compose.yml</code>，<code>dockerfile</code>和jar包上传服务器，启动后即可访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前台启动</span></span><br><span class="line">docker-compose  up </span><br><span class="line"><span class="comment">#后台启动</span></span><br><span class="line">docker-compose  up -d</span><br><span class="line"><span class="comment"># 重新构建</span></span><br><span class="line">docker-compose  up --build</span><br></pre></td></tr></table></figure>
<h2 id="十、Docker-Swarm">十、Docker Swarm</h2>
<blockquote>
<p>Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机，Docker Swarm代码开源在https://github.com/docker/swarm。Docker Swarm 和 Docker Compose 一样，都是 Docker 官方容器编排项目，但不同的是，Docker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务，对于微服务的部署，Docker Swarm 会更加适合。</p>
</blockquote>
<p>swarm分为管理节点和工作结点，所有操作都在manager节点上，并且集群的管理节点数量至少为3，manager节点使用raft协议进行管理。</p>
<p>官网：<a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/</a></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6bcf2d73e2570c95c0f72035ee4f39c2.png" alt="image-20210615164041790"></p>
<h3 id="1、服务器的购买和docker安装">1、服务器的购买和docker安装</h3>
<p>因为至少购买4台云服务器，考虑经济成本，这里我选择了腾讯云的按量计费，云以及按使用流量计费，操作系统使用centos8，云服务器硬件配置为1核2G。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc </span><br><span class="line">yum -y install gcc-c++</span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="comment"># 官方源是国外的，用国内源代替</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>四台云服务器可以一个命令同时执行，这里我使用了finalShell，打开四个不同的服务器后同时进行操作<br>
<img src="https://img-blog.csdnimg.cn/20210617100608909.png" alt="在这里插入图片描述"></p>
<h3 id="2、Swarm集群搭建">2、Swarm集群搭建</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看网络</span></span><br><span class="line">docker network ls</span><br><span class="line"><span class="comment">#帮助命令</span></span><br><span class="line">docker swarm --<span class="built_in">help</span></span><br><span class="line">docker swarm init --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#从帮助文档库看出需要init，这里使用内网进行搭建，可以ip addr命令查看，也可以登录云平台查看内网地址</span></span><br><span class="line"><span class="comment">#搭建主节点manager</span></span><br><span class="line">docker swarm init --advertise-addr 10.206.0.14</span><br><span class="line"><span class="comment">#work节点在另外两台机器输入相应命令即可</span></span><br><span class="line"><span class="comment">#若想创建主节点，运行，之后复制相应命令到第四台机器即可加入</span></span><br><span class="line">docker swarm join-token manager</span><br><span class="line"><span class="comment">#查看节点情况，这里完成了二主二从，这里即可灵活加入节点</span></span><br><span class="line">docker node ls</span><br></pre></td></tr></table></figure>
<p>搭建完主节点后，会自动进行提示如何加入工作节点和新的管理节点，在新的服务器上运行即可成为work或manager节点。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b976ee3615ae0ff8694006dd946fae77.png" alt="image-20210615192237766"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c2f3a0d37364645a2cd95ebd8c891fac.png" alt="image-20210615193015971"></p>
<h3 id="3、Raft协议">3、Raft协议</h3>
<blockquote>
<p>Raft协议：保证大多数节点存活；当存活节点数&gt;1时能正常运行，故集群数量必须&gt;3台，保证高可用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#双主双从时，当停止一个manager节点时，另一个也无法正常使用</span></span><br><span class="line"><span class="comment">#修改为三主一从，down掉一个manager节点时，集群仍可正常访问</span></span><br><span class="line">systemctl stop docker</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#离开节点</span></span><br><span class="line">[root@shawn2 ~]<span class="comment"># docker swarm leave</span></span><br><span class="line">Node left the swarm.</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f119d910f70e31deed044f3d93cd24db.png" alt="image-20210615194703767"></p>
<h3 id="4、Service服务实例">4、Service服务实例</h3>
<blockquote>
<p>使用swarm的优点是可以弹性的进行扩缩容集群，因为可以使用名字作为host主机，可以随时增加或者缩减容器；而docker-compose 是单机项目</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#容器启动！不具有扩缩容器</span></span><br><span class="line">docker run  </span><br><span class="line"><span class="comment">#服务！ 具有扩缩容器，可以滚动更新</span></span><br><span class="line">docker service </span><br><span class="line"><span class="comment">#查看命令帮助！要多使用</span></span><br><span class="line">docker service --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#和docker run类似的命令，创建服务，只能在主节点上创建服务，创建完可以进行访问</span></span><br><span class="line">docker service create --replicas 1 -p 8888:80 --name mynginx nginx</span><br><span class="line"><span class="comment">#查看某个服务，可以查看节点分布在哪几个服务器上</span></span><br><span class="line">docker service ps mynginx</span><br><span class="line"><span class="comment">#查看服务副本数</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="comment">#查看服务日志</span></span><br><span class="line">docker service logs mynginx</span><br><span class="line"><span class="comment">#扩容至5个副本以及缩小至2个副本，缩扩容都可用</span></span><br><span class="line">docker service scale mynginx=5</span><br><span class="line">docker service update --replicas 2 mynginx</span><br><span class="line"><span class="comment">#删除服务</span></span><br><span class="line">docker service rm mynginx</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210617100810621.png" alt="在这里插入图片描述"></p>
<h3 id="5、服务、任务简单小结">5、服务、任务简单小结</h3>
<p><strong>Swarm</strong><br>
集群的管理和编号。  docker可以初始化一个 swarm 集群，其他节点可以加入。（管理、工作者）<br>
<strong>Node</strong><br>
就是一个docker节点。多个节点就组成了一个网络集群。（管理、工作者）<br>
<strong>Service</strong></p>
<p>服务 （Services） 是指一组任务的集合，服务定义了任务的属性。服务有两种模式：</p>
<ul>
<li><code>replicated services</code> 按照一定规则在各个工作节点上运行指定个数的任务。</li>
<li><code>global services</code> 每个工作节点上运行一个任务</li>
</ul>
<p>两种模式通过 <code>docker service create</code> 的 <code>--mode</code> 参数指定。</p>
<p><strong>Task</strong><br>
任务 （Task）是Swarm中的最小的调度单位，目前来说就是一个单一的容器。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1f1dee52f056b5fb36118044d13426b4.png" alt="image-20210616114530443"></p>
<h3 id="6、Docker-Stack">6、Docker Stack</h3>
<blockquote>
<p>docker-compose.yml 来一次配置、启动多个容器，在 Swarm集群中也可以使用 compose 文件 （<code>docker-compose.yml</code>） 来配置、启动多个服务。而<code>docker service create</code> 一次只能部署一个服务，使用stack部署 <code>docker-compose.yml</code> 我们可以一次启动多个关联的服务。</p>
</blockquote>
<p>首先创建<code>docker-compose.yml</code>文件，首先要启动swarm集群服务，其中的 <code>visualizer</code> 服务提供一个可视化页面，我们可以从浏览器中很直观的查看集群中各个服务的运行节点。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">visualizer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">    <span class="attr">stop_grace_period:</span> <span class="string">1m30s</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">overlay:</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#帮助命令</span></span><br><span class="line">docker stack --<span class="built_in">help</span></span><br><span class="line"><span class="comment">#集群化方式部署cpmpose，-c指定某个文件</span></span><br><span class="line"><span class="comment">#命令启动后，浏览器输入 ip:8080即可查看各个节点的情况</span></span><br><span class="line">docker stack deploy -c docker-compose.yml wordpress</span><br><span class="line"><span class="comment">#移除服务</span></span><br><span class="line">docker stack rm wordpress</span><br></pre></td></tr></table></figure>
<h3 id="7、Docker-Secret">7、Docker Secret</h3>
<p>用户可以在 Swarm 集群中安全地管理密码、密钥证书等敏感数据，并允许在多个 Docker 容器实例之间共享访问指定的敏感数据。</p>
<h3 id="8、Docker-Config">8、Docker Config</h3>
<p>Config无需将配置文件放入镜像或挂载到容器中就可实现对服务的配置，提高了集群的通用性。</p>
<hr>
<p>参考文章：</p>
<p><a href="https://yeasy.gitbook.io/docker_practice/" target="_blank" rel="noopener">https://yeasy.gitbook.io/docker_practice/</a></p>
<p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?from=search&amp;seid=16621290913010547469" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1og4y1q7M4?from=search&amp;seid=16621290913010547469</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习笔记</title>
    <url>/posts/8eda3648.html</url>
    <content><![CDATA[<h2 id="一、Redis概述入门">一、Redis概述入门</h2>
<h3 id="1、NoSQL概述">1、NoSQL概述</h3>
<p><code>NoSQL</code>是指<code>not only Sql</code>，是一种非关系型数据库。其中NoSQL共有四种分类</p>
<ul>
<li>KV键值</li>
<li>文档型数据库(bson、MongoDB)</li>
<li>列存储数据库(HBase、分布式文件系统)</li>
<li>图关系数据库(存放关系、例如Neo4j)</li>
</ul>
<a id="more"></a>
<h3 id="2、Redis介绍">2、Redis介绍</h3>
<blockquote>
<p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728" target="_blank" rel="noopener">数据库</a>，并提供多种语言的API。</p>
</blockquote>
<p>Redis官网:<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p>
<p>Redis中文官网:<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p>
<h3 id="3、Redis安装">3、Redis安装</h3>
<p>windows安装：<a href="https://github.com/dmajkic/redis/downloads%EF%BC%88%E4%B8%8D%E6%8E%A8%E8%8D%90win%E5%BC%80%E5%8F%91%EF%BC%89" target="_blank" rel="noopener">https://github.com/dmajkic/redis/downloads（不推荐win开发）</a></p>
<p>Linux安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从官网下载redis最新版</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.2.4.tar.gz</span><br><span class="line"><span class="comment">#移动到opt目录下</span></span><br><span class="line">mv redis-6.2.4.tar.gz /opt/</span><br><span class="line"><span class="comment"># 解压即可</span></span><br><span class="line">tar -zxvf redis-6.2.4.tar.gz</span><br><span class="line"><span class="comment">#安装基本环境</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"><span class="comment">#进入安装包</span></span><br><span class="line"><span class="built_in">cd</span> redis-6.2.4/</span><br><span class="line"><span class="comment"># 进行编译安装，Redis默认安装路径(和大多数软件一样) /usr/local/bin</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment">#进入redis服务目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment">#创建配置文件目录</span></span><br><span class="line">mkdir conf</span><br><span class="line"><span class="comment">#将/opt/redis-6.2.4/redis.conf进行备份</span></span><br><span class="line">cp /opt/redis-6.2.4/redis.conf conf/myredis.conf</span><br><span class="line"><span class="comment">#修改为后台启动，进入myredis.conf修改daemonize为yes</span></span><br><span class="line">redis-server conf/myredis.conf </span><br><span class="line"><span class="comment">#客户端连接测试</span></span><br><span class="line">redis-cli -p 6379</span><br><span class="line"><span class="comment">#关闭程序，cli中先shutdown，后exit</span></span><br><span class="line"><span class="comment">#查看进程</span></span><br><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure>
<h3 id="4、Redis压力测试">4、Redis压力测试</h3>
<blockquote>
<p>Redis-benchmark官方默认压测工具</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">选项</th>
<th style="text-align:left">描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">-h</td>
<td style="text-align:left">指定服务器主机名</td>
<td>127.0.0.1</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">-p</td>
<td style="text-align:left">指定服务器端口号</td>
<td>6379</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">-s</td>
<td style="text-align:left">指定服务器socket</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">-c</td>
<td style="text-align:left">指定并发连接数</td>
<td>50</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">-n</td>
<td style="text-align:left">指定请求数</td>
<td>10000</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">-d</td>
<td style="text-align:left">以字节的形式指定SET/GET值的数据大小</td>
<td>3</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left">-k</td>
<td style="text-align:left">1=keep alive 0=reconnect</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left">-r</td>
<td style="text-align:left">SET/GET/INCR使用随机key,SADD使用随机值</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left">-P</td>
<td style="text-align:left">通过管道传输</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">-q</td>
<td style="text-align:left">强制退出redis。仅显示query/sec值</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">–csv</td>
<td style="text-align:left">以CSV格式输出</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left">-l</td>
<td style="text-align:left">生成循环，永久执行</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">-t</td>
<td style="text-align:left">仅运行以逗号分隔的测试命令列表</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">14</td>
<td style="text-align:left">-I</td>
<td style="text-align:left">Idle模式。仅打开N个idle连接并等待</td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启服务后在当前目录进行测试</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>
<h3 id="5、基础知识">5、基础知识</h3>
<p>redis默认16个数据库，默认使用第一个，使用<code>select</code>进行切换数据库，Redis6之前是单线程的，因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽，而单线程复杂度低，又不需要CPU上下文切换，也无需加锁。而在Redis6开始支持多线程，默认仍然是不开启，开启需要在<code>redis.conf </code>进行设置，其中Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程顺序执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br><span class="line"><span class="comment">#切换数据库</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; DBSIZE</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[1]&gt; <span class="built_in">set</span> name shawn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get name</span><br><span class="line"><span class="string">"shawn"</span></span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line"><span class="comment">#清除数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment">#清除全部数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; FLUSHALL</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#关闭服务并退出</span></span><br><span class="line">127.0.0.1:6379[1]&gt; SHUTDOWN</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h2 id="二、Redis五大基本数据类型">二、Redis五大基本数据类型</h2>
<blockquote>
<p>Redis 是一种开源（BSD 许可）、内存中数据结构存储，用作数据库、缓存和消息代理。 Redis 提供了诸如字符串、散列、列表、集合、带范围查询的排序集合、位图、超级日志、地理空间索引和流等数据结构。 Redis 内置复制、Lua 脚本、LRU 驱逐、事务和不同级别的磁盘持久化，并通过 Redis Sentinel 和 Redis Cluster 自动分区提供高可用性。</p>
</blockquote>
<p>Redis有五大基本数据类型：</p>
<ul>
<li>String(字符串类型)</li>
<li>Hash(哈希，类似java的Map)</li>
<li>List(列表)</li>
<li>Set(集合)</li>
<li>ZSet(有序集合)</li>
</ul>
<h3 id="1、Redis-key">1、Redis-key</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name shawn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379&gt; exists name <span class="comment">#是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name <span class="comment">#类型</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; move name 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379&gt; expire age 10 <span class="comment">#设置过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl age <span class="comment">#查看还有多久过期</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<h3 id="2、String类型">2、String类型</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># set、get、del、append、strlen</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name shawn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; append name ,hello <span class="comment">#追加</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; strlen name <span class="comment">#字符串长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">"shawn,hello"</span></span><br><span class="line">127.0.0.1:6379&gt; del name <span class="comment">#删除</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># incr、decr      一定要是数字才能进行加减，+1 和 -1。</span></span><br><span class="line"><span class="comment"># incrby、decrby  命令将 key 中储存的数字加上指定的增量值。</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr views <span class="comment">#自增1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; decr views <span class="comment">#自减1</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; incrby views 10 <span class="comment">#自增10</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; decrby views 5 <span class="comment">#自减5</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">"5"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># range [范围]</span></span><br><span class="line"><span class="comment"># getrange 获取指定区间范围内的值，类似between...and的关系，从零到负一表示全部</span></span><br><span class="line"><span class="comment"># setrange 设置指定区间范围内的值，格式是setrange key值 具体值</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name hello,shawn</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getrange name 6 11</span><br><span class="line"><span class="string">"shawn"</span></span><br><span class="line">127.0.0.1:6379&gt; setrange name 6 shanw22</span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"hello,shanw22"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># setex（set with expire） 设置过期时间</span></span><br><span class="line"><span class="comment"># setnx（set if not exist）不存在就设置(分布式锁常用)</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; setex key1 30 hello <span class="comment">#设置key1值为hello，过期时间30s</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key1</span><br><span class="line">(<span class="built_in">integer</span>) 25</span><br><span class="line">127.0.0.1:6379&gt; setnx key1 hello <span class="comment">#过期后成功进行设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; setnx key1 hello <span class="comment">#设置失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># mset   同时设置多组k-v</span></span><br><span class="line"><span class="comment"># mget   同时获取多组k-v</span></span><br><span class="line"><span class="comment"># msetnx 当所有 key 都成功设置，返回 1。如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 # 0。该操作为原子性操作，要么都成功，要么失败</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"k3"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">3) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class="comment">#原子操作</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"k3"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">3) <span class="string">"k1"</span></span><br><span class="line"><span class="comment"># 可以缓存对象</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx user:1:name shawn user:1:age 18</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">"shawn"</span></span><br><span class="line">2) <span class="string">"18"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># getset（先get再set）</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; getset db mysql</span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line"><span class="comment">#=======================================================</span></span><br><span class="line"><span class="comment">#Redis中的Value可以是字符串，也可以是数字</span></span><br></pre></td></tr></table></figure>
<h3 id="3、列表List">3、列表List</h3>
<p>list相当于双向链表，可以用作队列，也可以作栈，可以做消息队列，在两端操作效率高，最中间操作效率会低</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># Lpush：将一个或多个值插入到列表头部。（左）</span></span><br><span class="line"><span class="comment"># rpush：将一个或多个值插入到列表尾部。（右）</span></span><br><span class="line"><span class="comment"># lrange：返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。</span></span><br><span class="line"><span class="comment"># 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。</span></span><br><span class="line"><span class="comment"># 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 </span></span><br><span class="line"><span class="comment"># lpop 命令用于移除并返回列表的第一个元素。当列表 key 不存在时，返回 nil</span></span><br><span class="line"><span class="comment"># rpop 移除列表的最后一个元素，返回值为移除的元素</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1 <span class="comment">#获取list中的值</span></span><br><span class="line">1) <span class="string">"two"</span></span><br><span class="line">2) <span class="string">"one"</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"two"</span></span><br><span class="line">2) <span class="string">"one"</span></span><br><span class="line">3) <span class="string">"three"</span></span><br><span class="line">127.0.0.1:6379&gt; lpop list</span><br><span class="line"><span class="string">"two"</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list</span><br><span class="line"><span class="string">"three"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># lindex，按照索引下标获得元素（-1代表最后一个，0代表是第一个）</span></span><br><span class="line"><span class="comment"># llen 用于返回列表的长度。</span></span><br><span class="line"><span class="comment"># lrem key 根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素</span></span><br><span class="line"><span class="comment"># ltrim key 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被 删除。</span></span><br><span class="line"><span class="comment"># rpoplpush 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</span></span><br><span class="line"><span class="comment"># lset key index value 将列表 key 下标为 index 的元素的值设置为 value</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 0</span><br><span class="line"><span class="string">"one"</span></span><br><span class="line">127.0.0.1:6379&gt; llen list</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 one <span class="comment">#移除2个one的值，这里只有一个，故删除了1个</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list mylist</span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 0 hi <span class="comment">#第0个value更新，key不存在会报错</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># linsert key before/after pivot value 用于在列表的元素前或者后插入元素 </span></span><br><span class="line"><span class="comment"># 将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"hi"</span></span><br><span class="line">2) <span class="string">"hello1"</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list after hi new <span class="comment">#在hi后插入new</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"hi"</span></span><br><span class="line">2) <span class="string">"new"</span></span><br><span class="line">3) <span class="string">"hello1"</span></span><br></pre></td></tr></table></figure>
<h3 id="4、集合Set">4、集合Set</h3>
<p>set中的值不能重复，是无序不重复的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># sadd 将一个或多个成员元素加入到集合中，不能重复</span></span><br><span class="line"><span class="comment"># smembers 返回集合中的所有的成员。</span></span><br><span class="line"><span class="comment"># sismember 命令判断成员元素是否是集合的成员。</span></span><br><span class="line"><span class="comment"># scard，获取集合里面的元素个数</span></span><br><span class="line"><span class="comment"># rem key value 用于移除集合中的一个或多个成员元素</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset shawn</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset </span><br><span class="line">1) <span class="string">"shawn"</span></span><br><span class="line">2) <span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; srem myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># randmember key 命令用于返回集合中的一个随机元素。</span></span><br><span class="line"><span class="comment"># spop key 用于移除集合中的指定 key 的一个或多个随机元素</span></span><br><span class="line"><span class="comment"># smove SOURCE DESTINATION MEMBER，将指定成员 member 元素从 source 集合移动到 destination 集合。</span></span><br><span class="line"><span class="comment"># 数字集合类 差集:sdiff;交集:sinter;并集:sunion(社交软件共同关注等操作)</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; sadd k1 a b c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd k2 b c d</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sdiff k1 k2</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">127.0.0.1:6379&gt; sinter k1 k2</span><br><span class="line">1) <span class="string">"b"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt;  sunion k1 k2</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">3) <span class="string">"b"</span></span><br><span class="line">4) <span class="string">"d"</span></span><br></pre></td></tr></table></figure>
<h3 id="5、哈希Hash">5、哈希Hash</h3>
<p>Map集合，相当于key-Map，通常来存储经常变动的对象</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># hset、hget 命令用于为哈希表中的字段赋值 。</span></span><br><span class="line"><span class="comment"># hmset、hmget 同时将多个field-value对设置到哈希表中。会覆盖哈希表中已存在的字段。 # hgetall 用于返回哈希表中，所有的字段和值。</span></span><br><span class="line"><span class="comment"># hdel    用于删除哈希表 key 中的一个或多个指定字段</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field shawn</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field</span><br><span class="line"><span class="string">"shawn"</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field hello field1 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash field  field1 </span><br><span class="line">1) <span class="string">"hello"</span></span><br><span class="line">2) <span class="string">"world"</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">"field"</span></span><br><span class="line">2) <span class="string">"hello"</span></span><br><span class="line">3) <span class="string">"field1"</span></span><br><span class="line">4) <span class="string">"world"</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash field</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># hlen 获取哈希表中字段的数量。</span></span><br><span class="line"><span class="comment"># hexists 查看哈希表的指定字段是否存在。</span></span><br><span class="line"><span class="comment"># hkeys 获取哈希表中的所有域（field）。</span></span><br><span class="line"><span class="comment"># hvals 返回哈希表所有域(field)的值。</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash <span class="comment">#字段数</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash</span><br><span class="line">1) <span class="string">"field1"</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash</span><br><span class="line">1) <span class="string">"world"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># hincrby 为哈希表中的字段值加上指定增量值</span></span><br><span class="line"><span class="comment"># hsetnx 为哈希表中不存在的的字段赋值</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field 1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field shawn</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<h3 id="6、有序集合Zset">6、有序集合Zset</h3>
<p>Zset增加了权重参数score，可以用来设置任务的重要程度，例如排行榜应用，Top N</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># zadd    将一个或多个成员元素及其分数值加入到有序集当中。</span></span><br><span class="line"><span class="comment"># zrange  返回有序集中，指定区间内的成员</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zadd myset 1 one 2 two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">(integ127.0.0.1:6379&gt; zrange myset 0 -1</span><br><span class="line">1) <span class="string">"one"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># zrangebyscore 返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 Amy 3500 Mike 200 Shawn</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf <span class="comment">#正序</span></span><br><span class="line">1) <span class="string">"Shawn"</span></span><br><span class="line">2) <span class="string">"Amy"</span></span><br><span class="line">3) <span class="string">"Mike"</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf 2500 WITHSCORES <span class="comment">#带上score进行查询</span></span><br><span class="line">1) <span class="string">"Shawn"</span></span><br><span class="line">2) <span class="string">"200"</span></span><br><span class="line">3) <span class="string">"Amy"</span></span><br><span class="line">4) <span class="string">"2500"</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line"><span class="comment"># zrem 移除有序集中的一个或多个成员</span></span><br><span class="line"><span class="comment"># zcard   命令用于计算集合中元素的数量。</span></span><br><span class="line"><span class="comment"># zcount  计算有序集合中指定分数区间的成员数量。</span></span><br><span class="line"><span class="comment"># zrank  返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列。</span></span><br><span class="line"><span class="comment"># zrevrank 返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。</span></span><br><span class="line"><span class="comment"># ======================================================</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary Shawn</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zcard salary</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zcount salary -inf 2500</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrank salary Mike <span class="comment">#Mike的薪水排名</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrevrank salary Mike</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<h2 id="三、Redis三种特殊数据类型">三、Redis三种特殊数据类型</h2>
<h3 id="1、GEO地理位置">1、GEO地理位置</h3>
<blockquote>
<p>GEO 的数据结构总共有六个常用命令：geoadd、geopos、geodist、georadius、 georadiusbymember、gethash<br>
官方文档：<a href="https://www.redis.net.cn/order/3685.html" target="_blank" rel="noopener">https://www.redis.net.cn/order/3685.html</a></p>
</blockquote>
<p>因为存在中文，redis客户端启动时命令<code>redis-cli -p 6379 --raw</code></p>
<p><strong>geoadd</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">geoadd key longitude latitude member ...</span><br><span class="line"><span class="comment"># 将给定的空间元素(纬度、经度、名字)添加到指定的键里面。</span></span><br><span class="line"><span class="comment"># 这些数据会以有序集he的形式被储存在键里面，从而使得georadius和georadiusbymember这样的命令可以在之后通过位置查询取得这些元素。</span></span><br><span class="line"><span class="comment"># geoadd命令以标准的x,y格式接受参数,所以用户必须先输入经度,然后再输入纬度。</span></span><br><span class="line"><span class="comment"># geoadd能够记录的坐标是有限的:非常接近两极的区域无法被索引。</span></span><br><span class="line"><span class="comment"># 有效的经度介于-180-180度之间，有效的纬度介于-85.05112878 度至 85.05112878 度之间。当用户尝试输入一个超出范围的经度或者纬度时,geoadd命令将返回一个错误。</span></span><br><span class="line"><span class="comment">#===============================================</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.23 40.22 北京</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.54 29.40 重庆 108.93 34.23 西安 114.02 30.58 武汉</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>
<p><strong>geopos</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">geopos key member [member...]</span><br><span class="line"><span class="comment">#从key里返回所有给定位置元素的位置（经度和纬度）</span></span><br><span class="line"><span class="comment">#===============================================</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city 北京</span><br><span class="line">1) 1) <span class="string">"116.23000055551528931"</span></span><br><span class="line">   2) <span class="string">"40.2200010338739844"</span></span><br></pre></td></tr></table></figure>
<p><strong>geodist</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定单位的参数 unit 必须是以下单位的其中一个：</span></span><br><span class="line"><span class="comment"># m 表示单位为米。</span></span><br><span class="line"><span class="comment"># km 表示单位为千米。</span></span><br><span class="line"><span class="comment"># mi 表示单位为英里。</span></span><br><span class="line"><span class="comment"># ft 表示单位为英尺。</span></span><br><span class="line"><span class="comment"># 如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位。</span></span><br><span class="line"><span class="comment">#==================================================</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city 北京 重庆 km</span><br><span class="line"><span class="string">"1491.6716"</span></span><br></pre></td></tr></table></figure>
<p><strong>georadious</strong></p>
<p>以给定的经纬度为中心， 找出某一半径内的元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 附近范围内查询，比如附近的人功能的实现,count限制查询出来的数量</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 100 30 1000 km </span><br><span class="line">重庆</span><br><span class="line">西安</span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withcoord withdist count 2</span><br><span class="line">重庆</span><br><span class="line">635.2850</span><br><span class="line">106.54000014066696167</span><br><span class="line">29.39999880018641676</span><br><span class="line">西安</span><br><span class="line">963.3171</span><br><span class="line">108.92999857664108276</span><br><span class="line">34.23000121926852302</span><br></pre></td></tr></table></figure>
<p><strong>georadiusbymember</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#找出指定元素旁边的位置</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city 北京 1000 km</span><br><span class="line">北京</span><br><span class="line">西安</span><br></pre></td></tr></table></figure>
<p><strong>geohash</strong></p>
<p>该命令将返回11个字符的Geohash字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis使用geohash将二维经纬度转换为一维字符串，字符串越长表示位置更精确,两个字符串越相似表示距离越近。很少使用</span></span><br><span class="line">127.0.0.1:6379&gt; geohash china:city 北京 重庆</span><br><span class="line">wx4sucu47r0</span><br><span class="line">wm5z22h53v0</span><br></pre></td></tr></table></figure>
<p><strong>zrem</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># geo底层使用了zset，故可以用此方法进行删除</span></span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">重庆</span><br><span class="line">西安</span><br><span class="line">武汉</span><br><span class="line">北京</span><br><span class="line">127.0.0.1:6379&gt; zrem china:city 北京</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="2、Hyperloglog">2、Hyperloglog</h3>
<blockquote>
<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的，固定12KB。可以用来计数网站用户量(允许小量容错)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd mykey a b c d e f g <span class="comment">#创建第一组元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey <span class="comment">#统计元素的基数数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; pfadd mykey1 s f v b r t y u a  <span class="comment">#创建第二组</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfmerge mykey2 mykey mykey1 <span class="comment">#并集</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey2</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br></pre></td></tr></table></figure>
<h3 id="3、Bitmaps">3、Bitmaps</h3>
<p>位存储。统计用户信息，活跃，不活跃，未登录等两个状态，都可以使用Bitmaps(只有0和1)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 bitmap 来记录上述事例中一周的打卡记录如下所示：</span></span><br><span class="line"><span class="comment"># 周一：1，周二：0，周三：0，周四：1，周五：1，周六：0，周天：0 （1 为打卡，0 为不打卡）</span></span><br><span class="line">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 6 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 1 <span class="comment">#查询某一天是否打卡</span></span><br><span class="line">(<span class="built_in">integer</span>) 1  </span><br><span class="line">127.0.0.1:6379&gt; bitcount sign  <span class="comment">#统计本周打卡天数</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure>
<h2 id="四、事务">四、事务</h2>
<p>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。若为编译型错误，则事务无法执行。事务的执行是按顺序执行的，且事务没有隔离级别概念。</p>
<p>Redis事务：</p>
<ul>
<li>开启事务()</li>
<li>命令入队()</li>
<li>执行事务()</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span> <span class="comment">#执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">"v1"</span></span><br><span class="line"><span class="comment">#=================================</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; discard  <span class="comment">#放弃事务</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p><strong>悲观锁</strong></p>
<blockquote>
<p>悲观锁(Pessimistic Lock),顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿到这个数据就会block直到它拿到锁。传统的关系型数据库里面就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在操作之前先上锁。</p>
</blockquote>
<p><strong>乐观锁</strong></p>
<blockquote>
<p>乐观锁(Optimistic Lock),顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁。但是在更新的时候会判断一下再此期间别人有没有去更新这个数据，可以使用版本号等机制，乐观锁适用于多读的应用类型，这样可以提高吞吐量，乐观锁策略：提交版本必须大于记录当前版本才能执行更新。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用watch监视，成功就修改，可以用来做乐观锁</span></span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> money 100</span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment">#此时新开一个客户端，运行</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 500</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#回到第一个，执行事务，发现监视内容发送变化，修改失败</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">(nil)</span><br><span class="line"><span class="comment"># 若要放弃监视，使用unwatch</span></span><br><span class="line"><span class="comment"># 一但执行 EXEC 开启事务的执行后，无论事务使用执行成功， WARCH 对变量的监控都将被取消。故当事务执行失败后，需重新执行WATCH命令对变量进行监控，并开启新的事务进行操作。</span></span><br></pre></td></tr></table></figure>
<h2 id="五、Java连接Redis操作">五、Java连接Redis操作</h2>
<h3 id="1、Jedis">1、Jedis</h3>
<blockquote>
<p>Jedis是Redis官方推荐的Java连接开发工具。</p>
</blockquote>
<p>首先新建一个空的maven项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--进入maven仓库查找最新版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成功连接，输出pong,jedis中已经集成了常用的API，使用.即可查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 如果 Redis 服务设置了密码，需要下面这行，没有就不需要</span></span><br><span class="line">        <span class="comment">// jedis.auth("123456");</span></span><br><span class="line">        System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">        <span class="comment">//查看服务是否运行</span></span><br><span class="line">        System.out.println(<span class="string">"服务正在运行: "</span>+jedis.ping());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、SpringBoot整合Redis">2、SpringBoot整合Redis</h3>
<p><strong>简单使用</strong></p>
<p>首先在<code>pom.xml</code>中导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring2.0后底层使用lettuce,性能更高，2.0之前采用jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置<code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置redis</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisSpringApplicationTests</span> </span>&#123;</span><br><span class="line">	<span class="comment">//redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span></span><br><span class="line">	<span class="comment">//opsForValue 操作字符申类似string</span></span><br><span class="line">	<span class="comment">//opsForList 操作list 类List</span></span><br><span class="line">	<span class="comment">//opsForSet</span></span><br><span class="line">	<span class="comment">//opsForHash</span></span><br><span class="line">	<span class="comment">//opsForZSet</span></span><br><span class="line">	<span class="comment">//opsForGeo</span></span><br><span class="line">	<span class="comment">//opsForHyperLogLog</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		redisTemplate.opsForValue().set(<span class="string">"k"</span>,<span class="string">"v"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>源码分析</strong></p>
<p>在<code>External Libraries</code>中找到Redis的自动配置类，在<code>RedisProperties.class</code>也可以看到配置信息</p>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210605140429685.png" alt="image-20210607170901524"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;RedisOperations<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(</span>&#123;RedisProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123;LettuceConnectionConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">JedisConnectionConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="comment">//我们可以自定义一个redisTemplate替换默认。下面注解意思是如果Spring容器中有了RedisTemplate对象了，这个自动配置的RedisTemplate不会实例化。</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(name = &#123;<span class="string">"redisTemplate"</span>&#125;)</span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate</span>(RedisConnectionFactory<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">RedisTemplate</span>&lt;<span class="title">Object</span>, <span class="title">Object</span>&gt; <span class="title">redisTemplate</span>(<span class="title">RedisConnectionFactory</span> <span class="title">redisConnectionFactory</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//默认的没有进行过多操作，也没有序列化，不能进行对象传输</span></span><br><span class="line">        <span class="comment">//我们一般使用&lt;String,Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="comment">//String类型常用，单独提出来一个方法</span></span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate</span>(RedisConnectionFactory<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">StringRedisTemplate</span> <span class="title">stringRedisTemplate</span>(<span class="title">RedisConnectionFactory</span> <span class="title">redisConnectionFactory</span>) </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>工具封装</strong>(可直接使用)</p>
<p>自定义<code>RedisTemplate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编写自己的RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash采用String序列方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="六、Redis-conf配置信息">六、Redis.conf配置信息</h2>
<p><code>config get *</code>获取全部配置信息</p>
<p>配置文件信息在<code>/opt/redis-6.2.4/redis.conf</code>，常用配置信息如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绑定IP，这里指所有ipv4和ipv6都可以访问</span></span><br><span class="line"><span class="built_in">bind</span> * -::* </span><br><span class="line"><span class="comment"># 受保护的 默认开启，若想外网连接必须关闭</span></span><br><span class="line">protected-mode yes</span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># 客户端闲置N秒后关闭连接（0禁用）</span></span><br><span class="line">timeout 0</span><br><span class="line"><span class="comment"># 向客户端发送 TCP ACK 检测连接是否断开，保证连接活跃。单位秒，默认300秒发送一次，如果等于0 就是禁用。</span></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"><span class="comment">#==================general=================</span></span><br><span class="line"><span class="comment"># 默认情况下，Redis不会作为守护程序运行。如果需要，请设置为 yes</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment"># 可通过upstart和systemd管理Redis守护进程</span></span><br><span class="line">supervised no</span><br><span class="line"><span class="comment"># 以后台进程方式运行redis，则需要指定pid文件</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">loglevel notice</span><br><span class="line"><span class="comment"># 指定日志文件名称。指定为空时将输出到标准输出设备中。如果Redis以守护进程启动，当日志文件名称为空时，日志将会输出到 /dev/null。</span></span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"><span class="comment"># 数据库个数</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="comment"># redis 启动的时候显示日志</span></span><br><span class="line">always-show-logo no</span><br><span class="line"><span class="comment">#==================snapshotting 快照=================</span></span><br><span class="line">save 900 1 <span class="comment">#900s有一个key发生改变，触发save</span></span><br><span class="line">save 300 10 <span class="comment">#300s有10个key发生改变，触发save</span></span><br><span class="line">save 60 10000 <span class="comment">#60s有10000个key发生改变，触发save</span></span><br><span class="line"><span class="comment"># 默认值为yes。当启用了RDB且最后一次后台保存数据失败，Redis是否停止接收数据。</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="comment"># 使用压缩rdb文件 yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="comment"># 是否校验rdb文件，更有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"><span class="comment"># rdb 文件得文件名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="comment"># rdb文件是否删除同步锁</span></span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"><span class="comment"># 设置 rdb 文件存放得路径</span></span><br><span class="line">dir ./</span><br><span class="line"><span class="comment">#==================replication 主从复制=================</span></span><br><span class="line"><span class="comment">#当本机为从服务时，设置主服务的IP及端口</span></span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"><span class="comment">#当本机为从服务时，设置主服务的连接密码。</span></span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line"><span class="comment">#本机为从服务时，设置主服务的用户名。</span></span><br><span class="line">masteruser &lt;username&gt;</span><br><span class="line"><span class="comment">#当slave失去与master的连接，或正在拷贝中，如果为yes，slave会响应客户端的请求，数据可能不同步甚至没有数据，如果为no，slave会返回错误"SYNC with master in progress"</span></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"><span class="comment">#如果为yes，slave实例只读，如果为no，slave实例可读可写。</span></span><br><span class="line">replica-read-only yes</span><br><span class="line"><span class="comment">#指定slave定期ping master的周期，默认10秒钟。</span></span><br><span class="line">repl-ping-replica-period 10</span><br><span class="line"><span class="comment">#从服务ping主服务的超时时间，若超过repl-timeout设置的时间，slave就会认为master已经宕了。</span></span><br><span class="line">repl-timeout 60</span><br><span class="line"><span class="comment">#在slave和master同步后（发送psync/sync），后续的同步是否设置成TCP_NODELAY.假如设置成yes，则redis会合并小的TCP包从而节省带宽，但会增加同步延迟(40ms),造成master与slave数据不一致 假如设置成no，则redis master会立即发送同步数据，没有延迟。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"><span class="comment">#当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，这个值越小，就越会被优先选中，但是如果是 0 那是意味着这个 slave 不可能被选中。默认优先级为 100。</span></span><br><span class="line">replica-priority 100</span><br><span class="line"><span class="comment">#==================security 安全=================</span></span><br><span class="line"><span class="comment">#ACL日志的最大长度，默认是128M</span></span><br><span class="line">acllog-max-len 128</span><br><span class="line"><span class="comment">#ACL外部配置文件所在位置</span></span><br><span class="line">aclfile /etc/redis/users.acl</span><br><span class="line"><span class="comment">#当前redis服务的访问密码，默认是不需要密码</span></span><br><span class="line">requirepass 123456</span><br><span class="line"><span class="comment">#也可以命令行设置</span></span><br><span class="line">config <span class="built_in">set</span> requirepass <span class="string">"123456"</span></span><br><span class="line"><span class="comment">#测试ping，发现需要验证127.0.0.1:6379&gt; ping</span></span><br><span class="line">NOAUTH Authentication required. <span class="comment"># 验证</span></span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#==================限制=================</span></span><br><span class="line"><span class="comment"># 设置最大客户连接数</span></span><br><span class="line">maxclients 10000</span><br><span class="line"><span class="comment"># 内存限制字节数</span></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"><span class="comment"># maxmemory-policy 内存达到上限的处理策略</span></span><br><span class="line"><span class="comment">#volatile-lru：利用LRU算法移除设置过过期时间的key。</span></span><br><span class="line"><span class="comment">#volatile-random：随机移除设置过过期时间的key。</span></span><br><span class="line"><span class="comment">#volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）  </span></span><br><span class="line"><span class="comment">#allkeys-lru：利用LRU算法移除任何key。</span></span><br><span class="line"><span class="comment">#allkeys-random：随机移除任何key。</span></span><br><span class="line"><span class="comment">#noeviction：不移除任何key，只是返回一个写错误。</span></span><br><span class="line">maxmemory-policy noeviction</span><br><span class="line"><span class="comment">#==================append only模式=================</span></span><br><span class="line"><span class="comment">#Redis的持久化存储提供两种方式：RDB与AOF。RDB是默认配置(常用)AOF需要手动开启</span></span><br><span class="line">appendonly no</span><br><span class="line"><span class="comment"># 配置文件名字</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"><span class="comment"># appendfsync aof持久化策略的配置</span></span><br><span class="line"><span class="comment"># no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快</span></span><br><span class="line"><span class="comment"># always表示每次写入都执行fsync，以保证数据同步到磁盘</span></span><br><span class="line"><span class="comment"># everysec表示每秒执行一次fsync，可能会导致丢失这1s数据</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment">#重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性</span></span><br><span class="line">No-appendfsync-on-rewrite no</span><br><span class="line"><span class="comment"># 设置重写的基准值</span></span><br><span class="line">Auto-aof-rewrite-min-size 100</span><br><span class="line"><span class="comment">#设置重写的基准值</span></span><br><span class="line">Auto-aof-rewrite-percentage 64mb</span><br><span class="line"><span class="comment">#==================cluster 集群=====================</span></span><br><span class="line"><span class="comment"># 启用集群模式</span></span><br><span class="line">cluster-enabled yes      </span><br><span class="line"><span class="comment"># 设置当前节点连接超时毫秒数</span></span><br><span class="line">cluster-node-timeout 15000     </span><br><span class="line"><span class="comment">#设置当前节点集群配置文件路径</span></span><br><span class="line">cluster-config-file node_6381.conf</span><br></pre></td></tr></table></figure>
<h2 id="七、Redis持久化">七、Redis持久化</h2>
<p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p>
<h3 id="1、RDB-Redis-DataBase">1、RDB(Redis DataBase)</h3>
<blockquote>
<p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</p>
</blockquote>
<p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失，且备份时需要消耗内存。</p>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210605195534013.png" alt="image-20210605140429685"></p>
<p><strong>RDB快照</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于RDB来说，提供了三种机制：save、bgsave、自动触发。</span></span><br><span class="line"><span class="comment"># 自动触发在redis.conf下进行配置</span></span><br><span class="line"><span class="comment"># 三种情况保存的rdb文件可以进行配置，默认在当前目录</span></span><br><span class="line">127.0.0.1:6379&gt; bgsave</span><br><span class="line">Background saving started</span><br><span class="line">127.0.0.1:6379&gt; save</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 若要恢复Redis数据，只需要将dump.rdb文件放到对应dir目录下，Redis会自动进行数据恢复</span></span><br><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) <span class="string">"dir"</span></span><br><span class="line">2) <span class="string">"/usr/local/bin"</span></span><br></pre></td></tr></table></figure>
<h3 id="2、AOF-Append-Only-File">2、AOF(Append Only File)</h3>
<blockquote>
<p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#若需要使用aof，需要在配置信息里开启</span></span><br><span class="line"><span class="comment">#aof正常恢复</span></span><br><span class="line"><span class="comment">#将有数据的aof文件复制一份保存到对应目录（conﬁg get dir）恢复：重启redis然后重新加载</span></span><br><span class="line"><span class="comment">#若aof文件异常，redis将无法启动，可进行修复</span></span><br><span class="line">redis-check-aof --fix appendonly.aof</span><br></pre></td></tr></table></figure>
<h3 id="3、总结">3、总结</h3>
<p>1、RDB 持久化方式能够在指定的时间间隔内对数据进行快照存储<br>
2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。<br>
3、只做缓存，可以不使用任何持久化<br>
4、同时开启两种持久化方式时</p>
<ul>
<li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li>
<li>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，建议不要只使用AOF，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li>
</ul>
<p>5、性能建议</p>
<ul>
<li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li>
<li>如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li>
<li>如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</li>
</ul>
<h2 id="八、Redis发布订阅">八、Redis发布订阅</h2>
<blockquote>
<p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。 Redis 客户端可以订阅任意数量的频道。</p>
</blockquote>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/pubsub2.png" alt="image-20210605195534013"></p>
<p><strong>redis发布订阅常用命令</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:left">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left">PSUBSCRIBE pattern [pattern …]</td>
<td>订阅一个或多个符合给定模式的频道</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:left">PUBSUB subcommand [argument [argument …]]</td>
<td>查看订阅与发布系统状态</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">PUBLISH channel message</td>
<td>将信息发送到指定的频道</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:left">PUNSUBSCRIBE [pattern [pattern …]]</td>
<td>退订所有给定模式的频道</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">SUBSCRIBE channel [channel …]</td>
<td>订阅给定的一个或多个频道的信息</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left">UNSUBSCRIBE [channel [channel …]]</td>
<td>退订给定的频道</td>
</tr>
</tbody>
</table>
<p><strong>测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启一个客户端，订阅一个频道</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE shawn</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">"subscribe"</span></span><br><span class="line">2) <span class="string">"shawn"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#打开另一个客户端，发送消息</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH shawn hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#第一个客户端收到订阅消息</span></span><br><span class="line">1) <span class="string">"message"</span></span><br><span class="line">2) <span class="string">"shawn"</span></span><br><span class="line">3) <span class="string">"hello"</span></span><br></pre></td></tr></table></figure>
<p><strong>原理</strong></p>
<ul>
<li>
<p>Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解</p>
</li>
<li>
<p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能</p>
</li>
<li>
<p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 channel ，而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到给定 channel 的订阅链表中</p>
</li>
<li>
<p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者</p>
</li>
<li>
<p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息</p>
</li>
</ul>
<p><strong>使用场景</strong></p>
<ul>
<li>Pub/Sub构建实时消息系统</li>
<li>Pub/Sub构建的实时聊天系统</li>
</ul>
<h2 id="九、Redis主从、哨兵和集群">九、Redis主从、哨兵和集群</h2>
<p><em>这里实验都在一台机器上，故只修改端口，正式操作时应该分布在不同的机器中</em></p>
<h3 id="1、主从复制">1、主从复制</h3>
<blockquote>
<p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。 Master以写为主，Slave 以读为主。默认每台Redis服务器都是主节点，单台Redis内存不应超过20G。</p>
</blockquote>
<p>对于读多写少的电商</p>
<p><strong>主从复制作用</strong></p>
<ul>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li>
<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li>
<li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li>
</ul>
<p><strong>环境配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看信息</span></span><br><span class="line">127.0.0.1:6379&gt; INFO replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:c75ea02227de8882aa3c60c9b22559e3076270b0</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>
<p>配置主从复制，至少一主二从</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成三份配置文件，myredis.conf这里我已经存在了</span></span><br><span class="line">cp conf/myredis.conf conf/myredis01.conf </span><br><span class="line">cp conf/myredis.conf conf/myredis02.conf</span><br><span class="line"><span class="comment">#其次修改配置文件，下面是我其中一个配置</span></span><br><span class="line"><span class="comment">#依次修改port端口号、daemonize为yes、pidfile文件、logfile文件、dbfilename文件</span></span><br><span class="line">port 6370</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_6370.pid</span><br><span class="line">logfile <span class="string">"6370.log"</span></span><br><span class="line">dbfilename <span class="string">"dump6370.rdb"</span></span><br><span class="line"><span class="comment">#保证文件不会重复，最后开启服务，开启三个终端</span></span><br><span class="line">redis-server conf/myredis.conf </span><br><span class="line">redis-server conf/myredis01.conf </span><br><span class="line">redis-server conf/myredis02.conf </span><br><span class="line"><span class="comment">#查看是否成功开启</span></span><br><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure>
<p><strong>命令行配置(效果暂时，一般是配置文件配置)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#仅在从机进行配置即可，我的两个从机端口为6370和6371</span></span><br><span class="line">127.0.0.1:6370&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6371&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#此时查看主机信息可以看见两个从机已经连接</span></span><br><span class="line">127.0.0.1:6379&gt; INFO replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6371,state=online,offset=280,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6370,state=online,offset=280,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:d0f2fce55c4ee9f4403b7ff342ca7e43ef38d470</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:280</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:280</span><br><span class="line"><span class="comment"># 从机使用此命令可以重新变为主机</span></span><br><span class="line">127.0.0.1:6371&gt; SLAVEOF no one</span><br></pre></td></tr></table></figure>
<p><strong>配置文件配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入REPLICATION部分，修改从机配置文件</span></span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure>
<p><strong>测试细节</strong></p>
<ul>
<li>主机能读写，从机只能读，且从机会自动复制主机内容</li>
<li>主机宕机，从机只能进行读操作</li>
<li>若命令行操作，从机宕机，重新启动后变为主机，重新设置变为从机后可获取主机最新信息</li>
</ul>
<p><strong>复制原理</strong></p>
<p>Slave 启动成功连接到 master 后会发送一个sync命令，Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。但是只要是重新连接master，一次完全同步（全量复制）将被自动执行</p>
<ul>
<li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>
<li>增量复制：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步</li>
</ul>
<h3 id="2、哨兵模式">2、哨兵模式</h3>
<blockquote>
<p>哨兵模式能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>
</blockquote>
<p>一般哨兵模式要开启6个进程，假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为==主观下线==。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为==客观下线==。</p>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210607155751506.png" alt="img"></p>
<p><strong>测试配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一主二从配置不变，加入哨兵进程</span></span><br><span class="line"><span class="comment"># 进入redis目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"><span class="comment"># 复制3个哨兵配置文件sentinel.conf</span></span><br><span class="line">cp /opt/redis-6.2.4/sentinel.conf conf/sentinel1.conf </span><br><span class="line">cp /opt/redis-6.2.4/sentinel.conf conf/sentinel2.conf </span><br><span class="line">cp /opt/redis-6.2.4/sentinel.conf conf/sentinel3.conf</span><br></pre></td></tr></table></figure>
<p>依次修改3份哨兵配置文件，保证端口、pid文件和日志文件不重名，日志文件在/tmp目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 26381</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">"/var/run/redis-sentinel26381.pid"</span></span><br><span class="line">logfile <span class="string">"26381.log"</span></span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line"><span class="comment">#这里是最重要的，后四个依次是master别名，master的ip、端口号以及得票多少才能成为主机，一般是哨兵一半加一</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在当前目录下依次启动，即完成哨兵模式</span></span><br><span class="line">redis-sentinel conf/sentinel1.conf</span><br><span class="line">redis-sentinel conf/sentinel2.conf</span><br><span class="line">redis-sentinel conf/sentinel3.conf</span><br><span class="line"><span class="comment">#此时若6379主机宕机后，哨兵模式会自动选举产生新的主服务器，当6379重启后，自动变成从机，可以进入/tmp查看日志</span></span><br></pre></td></tr></table></figure>
<p><strong>配置文件详解</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"><span class="comment"># 是否后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment"># 运行时PID文件</span></span><br><span class="line">pidfile /var/run/redis-sentinel.pid</span><br><span class="line"><span class="comment"># 日志文件(绝对路径)</span></span><br><span class="line">logfile <span class="string">"/opt/app/redis6/sentinel.log"</span></span><br><span class="line"><span class="comment"># 数据目录</span></span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port </span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span></span><br><span class="line"><span class="comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"><span class="comment"># 哨兵连接主节点多长时间没有响应就代表主节点挂了，单位毫秒。默认30000毫秒，30秒。</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"><span class="comment"># 在故障转移时，最多有多少从节点对新的主节点进行同步。这个值越小完成故障转移的时间就越长，这个值越大就意味着越多的从节点因为同步数据而暂时阻塞不可用</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"><span class="comment"># 故障转移的超时时间，默认3分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"><span class="comment">#禁止使用SENTINEL SET设置notification-script和client-reconfig-script</span></span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br><span class="line"><span class="comment"># 配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment"># 通知脚本</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure>
<h3 id="3、Redis集群">3、Redis集群</h3>
<blockquote>
<p>Redis集群由多个节点(Node)组成，Redis 的数据分布在这些节点中。集群中的节点分为主节点和从节点，只有主节点负责读写请求和集群信息的维护，从节点只进行主节点数据和状态信息的复制。Redis集群采用哈希分区的方式对数据进行分区，哈希分区就是对数据的特征值进行哈希，然后根据哈希值决定数据放在哪个节点。其中redis cluster集群是去中心化的，每个节点都是平等的，连接哪个节点都可以获取和设置数据。</p>
</blockquote>
<p>Redis集群的作用有下面几点：</p>
<ul>
<li><strong>数据分区</strong>：突破单机的存储限制，将数据分散到多个不同的节点存储；</li>
<li><strong>负载均衡</strong>：每个主节点都可以处理读写请求，提高了并发能力；</li>
<li><strong>高可用</strong>：集群有着和哨兵模式类似的故障转移能力，提升集群的稳定性；</li>
</ul>
<p><strong>普通端口</strong>：即客户端访问端口，如默认的6379；</p>
<p><strong>集群端口</strong>：普通端口号加10000，如6379的集群端口为16379，用于集群节点之间的通讯</p>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210608101514039.png" alt="image-20210607155751506"></p>
<p><strong>配置</strong></p>
<p>分配6个配置文件</p>
<table>
<thead>
<tr>
<th style="text-align:left">ID</th>
<th style="text-align:left">IP</th>
<th style="text-align:left">Host</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">从节点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">127.0.0.1</td>
<td style="text-align:left">6381</td>
<td style="text-align:left">主</td>
<td style="text-align:left">AA</td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td style="text-align:left">127.0.0.1</td>
<td style="text-align:left">6382</td>
<td style="text-align:left">主</td>
<td style="text-align:left">BB</td>
</tr>
<tr>
<td style="text-align:left">C</td>
<td style="text-align:left">127.0.0.1</td>
<td style="text-align:left">6383</td>
<td style="text-align:left">主</td>
<td style="text-align:left">CC</td>
</tr>
<tr>
<td style="text-align:left">AA</td>
<td style="text-align:left">127.0.0.1</td>
<td style="text-align:left">6391</td>
<td style="text-align:left">从</td>
<td style="text-align:left">/</td>
</tr>
<tr>
<td style="text-align:left">BB</td>
<td style="text-align:left">127.0.0.1</td>
<td style="text-align:left">6392</td>
<td style="text-align:left">从</td>
<td style="text-align:left">/</td>
</tr>
<tr>
<td style="text-align:left">CC</td>
<td style="text-align:left">127.0.0.1</td>
<td style="text-align:left">6393</td>
<td style="text-align:left">从</td>
<td style="text-align:left">/</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分别修改6个目录中的redis.conf文件，主要开启集群以及修改端口和文件路径</span></span><br><span class="line"><span class="comment">#举例其中一个</span></span><br><span class="line">port 6381</span><br><span class="line">port 26381</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="string">"/var/run/redis-sentinel26381.pid"</span></span><br><span class="line">logfile <span class="string">"26381.log"</span></span><br><span class="line">cluster-enabled yes                            <span class="comment"># 启用集群模式</span></span><br><span class="line">cluster-node-timeout 15000                     <span class="comment"># 设置当前节点连接超时毫秒数</span></span><br><span class="line"><span class="comment">#设置当前节点集群配置文件路径，该文件由集群自动维护，如果有则使用文件中的配置启动；如果没有，则初始化配置并将配置保存到文件中。</span></span><br><span class="line">cluster-config-file node_6381.conf             </span><br><span class="line"><span class="comment">#=========================================</span></span><br><span class="line"><span class="comment">#启动，前三个表示主机，后三个表示从机</span></span><br><span class="line"><span class="comment">#这里的--cluster-replicas表示每个主节点有几个副本节点</span></span><br><span class="line">redis-cli --cluster create 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6391 127.0.0.1:6392 127.0.0.1:6393 --cluster-replicas 1</span><br><span class="line"><span class="comment"># -c，使用集群方式登录</span></span><br><span class="line">redis-cli -c [-h 192.168.30.128] -p 7001 [-a 123456]    </span><br><span class="line"><span class="comment">#集群状态</span></span><br><span class="line">CLUSTER INFO     </span><br><span class="line"><span class="comment">#列出节点信息</span></span><br><span class="line">CLUSTER NODES</span><br></pre></td></tr></table></figure>
<h2 id="十、Redis缓存">十、Redis缓存</h2>
<h3 id="1、缓存穿透">1、缓存穿透</h3>
<blockquote>
<p>缓存穿透是指查询一个根本不存在的数据，缓存层和持久层都不会命中。在日常工作中出于容错的考虑，如果从持久层查不到数据则不写入缓存层，缓存穿透将导致不存在的数据每次请求都要到持久层去查询，失去了缓存保护后端持久的意义</p>
</blockquote>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210607170538553.png" alt="image-20210608101514039"></p>
<h3 id="2、缓存击穿">2、缓存击穿</h3>
<blockquote>
<p>系统中存在以下两个问题时需要引起注意：当前key是一个热点key（例如一个秒杀活动），并发量非常大；重建缓存不能在短时间完成，可能是一个复杂计算，例如复杂的SQL、多次IO、多个依赖等。在缓存失效的瞬间，有大量线程来重建缓存，造成后端负载加大，甚至可能会让应用崩溃。</p>
</blockquote>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210607170758835.png" alt="image-20210607170758835"></p>
<h3 id="3、缓存雪崩">3、缓存雪崩</h3>
<blockquote>
<p>由于缓存层承载着大量请求，有效地保护了存储层，但是如果缓存层由于某些原因不可用（宕机）或者大量缓存由于超时时间相同在同一时间段失效（大批key失效/热点数据失效），大量请求直接到达存储层，存储层压力过大导致系统雪崩。</p>
</blockquote>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210607170901524.png" alt="image-20210607170538553"></p>
<hr>
<hr>
<p>参考文章：<br>
<a href="https://blog.csdn.net/wsdc0521/article/details/106316972" target="_blank" rel="noopener">https://blog.csdn.net/wsdc0521/article/details/106316972</a><br>
<a href="https://blog.csdn.net/weixin_43445935/article/details/115393205" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43445935/article/details/115393205</a><br>
<a href="https://www.bilibili.com/video/BV1S54y1R7SB?p=12&amp;spm_id_from=pageDriver" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1S54y1R7SB?p=12&amp;spm_id_from=pageDriver</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>mmdetection2 config详解</title>
    <url>/posts/2f275aa8.html</url>
    <content><![CDATA[<blockquote>
<p>官方文档config详情：<a href="https://mmdetection.readthedocs.io/en/latest/tutorials/config.html" target="_blank" rel="noopener">https://mmdetection.readthedocs.io/en/latest/tutorials/config.html</a></p>
</blockquote>
<h3 id="1、配置文件结构">1、配置文件结构</h3>
<p>在<code>config/_base_</code>文件夹下面总共有4个基础的组件，它们分别是：dataset、model、schedule、default_runtime。</p>
<a id="more"></a>
<h3 id="2、配置文件命名风格">2、配置文件命名风格</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;model&#125;_[model setting]_&#123;backbone&#125;_&#123;neck&#125;_[norm setting]_[misc]_[gpu x batch_per_gpu]_&#123;schedule&#125;_&#123;dataset&#125;</span><br></pre></td></tr></table></figure>
<p><code>{xxx}</code>是必选项，<code>[yyy]</code>是可选项</p>
<ul>
<li><code>{model}</code>:模型的类型 ，例如<code>faster_rcnn</code>、<code>mask_rcnn</code> 等等.</li>
<li><code>[model setting]</code>: 给模型一些指定设置, 例如<code>without_semantic for htc</code>、<code>moment for reppoints</code>等等.</li>
<li><code>{backbone}</code>: backbone 的类型 <code>r50</code> (ResNet-50), <code>x101</code> (ResNeXt-101)。（相当于特征提取网络）</li>
<li><code>{neck}</code>: neck 的类型选择，例如<code>fpn</code>,<code> pafpn</code>, <code>nasfpn</code>,<code> c4</code>.</li>
<li><code>[norm_setting]</code>: 如果没有指定，那就默认为<code>bn</code> (Batch Normalization) , 还有其他可选的norm layer类型，比如 <code>gn</code> (Group Normalization)、<code>syncbn</code> (Synchronized Batch Normalization). <code>gn-head</code>/<code>gn-neck </code>表示 GN 仅仅被用在head/neck模块上, gn-all 表示 GN 被用在整个模型上, 例如：backbone, neck, head这些模块。</li>
<li><code>[misc]</code>: 一些比较杂的模型设置或者插件，例如 <code>dconv</code>, <code>gcb</code>, <code>attention</code>, <code>albu</code>, <code>mstrain</code>.</li>
<li><code>[gpu x batch_per_gpu]</code>: GPU的个数以及每块GPU上的batch size大小，默认为<code>8*2</code>(8块GPU，每块GPU上2个batch size，相当于batch size为16)。</li>
<li><code>{schedule}</code>: 训练的 schedule, 可选择的有<code>1x</code>, <code>2x</code>, <code>20e</code>等等. <code>1x</code> 和 <code>2x</code> 分别表示 12 个epochs 和 24个epochs。 20e 被用在 cascade models中,它表示20个epochs. 对于1x/2x而言, 初始的学习率分别在第8/16个epeochs和第11/22个epochs以10的倍率递减。对于<code>20e</code>而言,初始的学习率在第16个epeochs和第19个epochs以10的倍率。</li>
<li><code>{dataset}</code>: 数据集有<code> coco</code>, <code>cityscapes</code>, <code>voc_0712</code>, <code>wider_face</code>这些选项。</li>
</ul>
<h3 id="3、faster-rcnn-r50-fpn-2x-py">3、faster_rcnn_r50_fpn_2x.py</h3>
<p>首先介绍一下这个配置文件所描述的框架，它是基于resnet50的backbone，有着5个fpn特征层的faster-RCNN目标检测网络，训练迭代次数为标准的24次epoch。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模型配置</span></span><br><span class="line">model = dict(</span><br><span class="line">    <span class="comment"># model类型</span></span><br><span class="line">    type=<span class="string">'FasterRCNN'</span>,</span><br><span class="line">    <span class="comment"># 预训练模型：resnet50</span></span><br><span class="line">    pretrained=<span class="string">'torchvision://resnet50'</span>,</span><br><span class="line">    backbone=dict(</span><br><span class="line">        <span class="comment"># backbone类型</span></span><br><span class="line">        type=<span class="string">'ResNet'</span>, </span><br><span class="line">        <span class="comment"># 网络层数</span></span><br><span class="line">        depth=<span class="number">50</span>,</span><br><span class="line">        <span class="comment"># resnet的stage数量</span></span><br><span class="line">        num_stages=<span class="number">4</span>,</span><br><span class="line">        <span class="comment"># 输出的stage的序号</span></span><br><span class="line">        out_indices=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">        <span class="comment"># 冻结的stage数量，即该stage不更新参数，-1表示所有的stage都更新参数</span></span><br><span class="line">        frozen_stages=<span class="number">1</span>,</span><br><span class="line">        <span class="comment"># normalization layers的配置,type 为norm layer的类型, 通常是 BN or GN，requires_grad参数是否训练BN中的gamma和beta参数</span></span><br><span class="line">        norm_cfg=dict(type=<span class="string">'BN'</span>, requires_grad=<span class="literal">True</span>),</span><br><span class="line">        <span class="comment"># 是否冻结BN中的统计信息（相当于模型eval的过程，不进行统计数据）</span></span><br><span class="line">        norm_eval=<span class="literal">True</span>,</span><br><span class="line">        <span class="comment"># 网络风格：如果设置pytorch，则stride为2的层是conv3x3的卷积层；如果设置caffe，则stride为2的层是第一个conv1x1的卷积层</span></span><br><span class="line">        style=<span class="string">'pytorch'</span>),</span><br><span class="line">    neck=dict(</span><br><span class="line">        <span class="comment"># neck类型</span></span><br><span class="line">        type=<span class="string">'FPN'</span>,</span><br><span class="line">        <span class="comment"># 输入的各个stage的通道数</span></span><br><span class="line">        in_channels=[<span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>],</span><br><span class="line">        <span class="comment"># 输出的特征层的通道数</span></span><br><span class="line">        out_channels=<span class="number">256</span>,</span><br><span class="line">        <span class="comment"># 输出的特征层的数量</span></span><br><span class="line">        num_outs=<span class="number">5</span>),</span><br><span class="line">    rpn_head=dict(</span><br><span class="line">        <span class="comment"># RPN网络类型</span></span><br><span class="line">        type=<span class="string">'RPNHead'</span>,</span><br><span class="line">        <span class="comment"># RPN网络的输入通道数</span></span><br><span class="line">        in_channels=<span class="number">256</span>,</span><br><span class="line">        <span class="comment"># 特征层的通道数</span></span><br><span class="line">        feat_channels=<span class="number">256</span>,</span><br><span class="line">        <span class="comment"># 生成anchor的配置</span></span><br><span class="line">        anchor_generator=dict(</span><br><span class="line">            <span class="comment"># 绝大多数都是用AnchorGenerator, SSD 检测器(单阶段的目标检测算法)使用的是SSDAnchorGenerator</span></span><br><span class="line">            type=<span class="string">'AnchorGenerator'</span>,</span><br><span class="line">             <span class="comment"># anchor的生成个数, 特征图上每一个位置所生成的anchor个数为scale * base_sizes</span></span><br><span class="line">            scales=[<span class="number">8</span>],</span><br><span class="line">            <span class="comment"># anchor的宽高比率.</span></span><br><span class="line">            ratios=[<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">2.0</span>],</span><br><span class="line">           <span class="comment"># 在每个特征层上的anchor的步长（对应于原图）</span></span><br><span class="line">            strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>]),</span><br><span class="line">        bbox_coder=dict(</span><br><span class="line">            type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">            <span class="comment"># 均值</span></span><br><span class="line">            target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">            <span class="comment"># 方差</span></span><br><span class="line">            target_stds=[<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>]),</span><br><span class="line">            <span class="comment"># 分类损失函数配置</span></span><br><span class="line">        loss_cls=dict(</span><br><span class="line">            <span class="comment"># 也提供FocalLoss等损失函数</span></span><br><span class="line">            type=<span class="string">'CrossEntropyLoss'</span>, </span><br><span class="line">            <span class="comment"># 是否使用sigmoid来进行分类，如果False则使用softmax来分类</span></span><br><span class="line">            use_sigmoid=<span class="literal">True</span>, </span><br><span class="line">            <span class="comment"># 分类分支所占权重</span></span><br><span class="line">            loss_weight=<span class="number">1.0</span>),</span><br><span class="line">            <span class="comment"># box回归分支的损失函数配置.</span></span><br><span class="line">        loss_bbox=dict(</span><br><span class="line">            type=<span class="string">'L1Loss'</span>, loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">    <span class="comment"># RoIHead 封装了二阶段检测器的第二阶段的模块</span></span><br><span class="line">    roi_head=dict(</span><br><span class="line">        <span class="comment"># RoI head的类型</span></span><br><span class="line">        type=<span class="string">'StandardRoIHead'</span>,</span><br><span class="line">        <span class="comment"># RoI feature extractor 用于 bbox regression.</span></span><br><span class="line">        bbox_roi_extractor=dict(</span><br><span class="line">            <span class="comment"># 类型，大部分默认</span></span><br><span class="line">            type=<span class="string">'SingleRoIExtractor'</span>,</span><br><span class="line">            roi_layer=dict(</span><br><span class="line">                <span class="comment"># 同时还支持DeformRoIPoolingPack 和 ModulatedDeformRoIPoolingPack这两种类型.</span></span><br><span class="line">                type=<span class="string">'RoIAlign'</span>, </span><br><span class="line">                <span class="comment"># feature maps的输出尺度，相当于输出7*7.</span></span><br><span class="line">                output_size=<span class="number">7</span>, </span><br><span class="line">                <span class="comment"># 提取ROI特征层时的样本比例，0表示自适应</span></span><br><span class="line">                sampling_ratio=<span class="number">0</span>),</span><br><span class="line">            <span class="comment"># 提取特征的输出通道数</span></span><br><span class="line">            out_channels=<span class="number">256</span>,</span><br><span class="line">            <span class="comment"># 多尺度特征图的步幅</span></span><br><span class="line">            featmap_strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>]),</span><br><span class="line">        bbox_head=dict(</span><br><span class="line">            <span class="comment"># 全连接层类型</span></span><br><span class="line">            type=<span class="string">'Shared2FCBBoxHead'</span>,</span><br><span class="line">            <span class="comment"># 输入通道数</span></span><br><span class="line">            in_channels=<span class="number">256</span>,</span><br><span class="line">            <span class="comment"># 全连接层输出通道数</span></span><br><span class="line">            fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">            <span class="comment"># ROI特征层尺寸</span></span><br><span class="line">            roi_feat_size=<span class="number">7</span>,</span><br><span class="line">            <span class="comment"># 分类器数量，改自己数据集时修改</span></span><br><span class="line">            num_classes=<span class="number">1</span>,</span><br><span class="line">            <span class="comment"># 同上</span></span><br><span class="line">            bbox_coder=dict(</span><br><span class="line">                type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">                target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                target_stds=[<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.2</span>]),</span><br><span class="line">            <span class="comment"># 是否采用class_agnostic的方式来预测，class_agnostic表示输出bbox时只考虑其是否为前景，后续分类的时候再根据该bbox在网络中的类别得分来分类，也就是说一个框可以对应多个类别</span></span><br><span class="line">            reg_class_agnostic=<span class="literal">False</span>,</span><br><span class="line">            <span class="comment"># 同上</span></span><br><span class="line">            loss_cls=dict(</span><br><span class="line">                type=<span class="string">'CrossEntropyLoss'</span>, use_sigmoid=<span class="literal">False</span>, loss_weight=<span class="number">1.0</span>),</span><br><span class="line">            loss_bbox=dict(type=<span class="string">'L1Loss'</span>, loss_weight=<span class="number">1.0</span>))))</span><br><span class="line">train_cfg = dict(</span><br><span class="line">    rpn=dict(</span><br><span class="line">        assigner=dict(</span><br><span class="line">            <span class="comment"># RPN网络的正负样本划分</span></span><br><span class="line">            type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">            <span class="comment"># 正样本的iou阈值</span></span><br><span class="line">            pos_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">            <span class="comment"># 负样本的iou阈值</span></span><br><span class="line">            neg_iou_thr=<span class="number">0.3</span>,</span><br><span class="line">            <span class="comment"># 正样本的iou最小值。如果assign给ground truth的anchors中最大的IOU低于0.3，则忽略所有的anchors，否则保留最大IOU的anchor</span></span><br><span class="line">            min_pos_iou=<span class="number">0.3</span>,</span><br><span class="line">            <span class="comment"># 是否匹配低质量anchor</span></span><br><span class="line">            match_low_quality=<span class="literal">True</span>,</span><br><span class="line">            <span class="comment"># 忽略bbox的阈值，当ground truth中包含需要忽略的bbox时使用，-1表示不忽略</span></span><br><span class="line">            ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">        sampler=dict(</span><br><span class="line">            <span class="comment"># 正负样本提取器类型</span></span><br><span class="line">            type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">            <span class="comment"># 需提取的正负样本数量</span></span><br><span class="line">            num=<span class="number">256</span>,</span><br><span class="line">            <span class="comment"># 正样本比例</span></span><br><span class="line">            pos_fraction=<span class="number">0.5</span>,</span><br><span class="line">            <span class="comment"># 最大负样本比例，大于该比例的负样本忽略，-1表示不忽略</span></span><br><span class="line">            neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">            <span class="comment"># 把ground truth加入proposal作为正样本</span></span><br><span class="line">            add_gt_as_proposals=<span class="literal">False</span>),</span><br><span class="line">        <span class="comment"># 不允许允许在bbox周围外扩一定的像素，0表示允许</span></span><br><span class="line">        allowed_border=<span class="number">-1</span>,</span><br><span class="line">        <span class="comment"># 正样本权重，-1表示不改变原始的权重</span></span><br><span class="line">        pos_weight=<span class="number">-1</span>,</span><br><span class="line">        <span class="comment"># debug模式</span></span><br><span class="line">        debug=<span class="literal">False</span>),</span><br><span class="line">    <span class="comment"># 在训练过程中生成proposals的配置</span></span><br><span class="line">    rpn_proposal=dict(</span><br><span class="line">        <span class="comment"># 在所有的fpn层内做nms</span></span><br><span class="line">        nms_across_levels=<span class="literal">False</span>,</span><br><span class="line">        <span class="comment"># 在NMS之前的box个数</span></span><br><span class="line">        nms_pre=<span class="number">2000</span>,</span><br><span class="line">        <span class="comment"># NMS处理后保留的box个数</span></span><br><span class="line">        nms_post=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># NMS处理之后所使用的box个数</span></span><br><span class="line">        max_num=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># NMS过程所使用的阈值</span></span><br><span class="line">        nms_thr=<span class="number">0.7</span>,</span><br><span class="line">        <span class="comment"># 允许的最小的box尺寸</span></span><br><span class="line">        min_bbox_size=<span class="number">0</span>),</span><br><span class="line">    rcnn=dict(</span><br><span class="line">        assigner=dict(</span><br><span class="line">            <span class="comment"># RCNN网络正负样本划分</span></span><br><span class="line">            type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">            <span class="comment"># 正样本的iou阈值</span></span><br><span class="line">            pos_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">            <span class="comment"># 负样本的iou阈值</span></span><br><span class="line">            neg_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">            <span class="comment"># 正样本的iou最小值。如果assign给ground truth的anchors中最大的IOU低于0.3，则忽略所有的anchors，否则保留最大IOU的anchor</span></span><br><span class="line">            min_pos_iou=<span class="number">0.5</span>,</span><br><span class="line">            match_low_quality=<span class="literal">False</span>,</span><br><span class="line">            <span class="comment"># 忽略bbox的阈值，当ground truth中包含需要忽略的bbox时使用，-1表示不忽略</span></span><br><span class="line">            ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">        sampler=dict(</span><br><span class="line">            <span class="comment"># 正负样本提取器类型</span></span><br><span class="line">            type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">            <span class="comment"># 需提取的正负样本数量</span></span><br><span class="line">            num=<span class="number">512</span>,</span><br><span class="line">            <span class="comment"># 正样本比例</span></span><br><span class="line">            pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">            <span class="comment"># 最大负样本比例，大于该比例的负样本忽略，-1表示不忽略</span></span><br><span class="line">            neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">            <span class="comment"># 把ground truth加入proposal作为正样本</span></span><br><span class="line">            add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">        <span class="comment"># 正样本权重，-1表示不改变原始的权重</span></span><br><span class="line">        pos_weight=<span class="number">-1</span>,</span><br><span class="line">        <span class="comment"># debug模式</span></span><br><span class="line">        debug=<span class="literal">False</span>))</span><br><span class="line">test_cfg = dict(</span><br><span class="line">    <span class="comment"># 推断时的RPN参数</span></span><br><span class="line">    rpn=dict(</span><br><span class="line">        nms_across_levels=<span class="literal">False</span>,</span><br><span class="line">        <span class="comment"># 在nms之前保留的的得分最高的proposal数量</span></span><br><span class="line">        nms_pre=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># 在nms之后保留的的得分最高的proposal数量</span></span><br><span class="line">        nms_post=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># 在后处理完成之后保留的proposal数量</span></span><br><span class="line">        max_num=<span class="number">1000</span>,</span><br><span class="line">        <span class="comment"># nms阈值</span></span><br><span class="line">        nms_thr=<span class="number">0.7</span>,</span><br><span class="line">        <span class="comment"># 最小bbox尺寸</span></span><br><span class="line">        min_bbox_size=<span class="number">0</span>),</span><br><span class="line">    rcnn=dict(</span><br><span class="line">        score_thr=<span class="number">0.05</span>,</span><br><span class="line">        <span class="comment"># soft-nms is also supported for rcnn testing</span></span><br><span class="line">        nms=dict(type=<span class="string">'nms'</span>, iou_threshold=<span class="number">0.5</span>),</span><br><span class="line">        max_per_img=<span class="number">100</span>))</span><br><span class="line"><span class="comment"># 数据集类型</span></span><br><span class="line">dataset_type = <span class="string">'CocoDataset'</span>                </span><br><span class="line"><span class="comment"># 数据集根目录</span></span><br><span class="line">data_root = <span class="string">'/home/shawn/MyDataset/'</span>                   </span><br><span class="line"><span class="comment"># 输入图像初始化，减去均值mean并处以方差std，to_rgb表示将bgr转为rgb</span></span><br><span class="line">img_norm_cfg = dict(</span><br><span class="line">    mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>], std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>], to_rgb=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Datasets配置</span></span><br><span class="line"><span class="comment"># 训练的pipeline，数据增强</span></span><br><span class="line">train_pipeline = [</span><br><span class="line">    <span class="comment"># 从文件读取图像</span></span><br><span class="line">    dict(type=<span class="string">'LoadImageFromFile'</span>),</span><br><span class="line">    <span class="comment"># 用于给图像导入对于的标签，并使用bounding box标签数据</span></span><br><span class="line">    dict(type=<span class="string">'LoadAnnotations'</span>, with_bbox=<span class="literal">True</span>),</span><br><span class="line">    <span class="comment"># Resize图片并保持比例</span></span><br><span class="line">    dict(type=<span class="string">'Resize'</span>, img_scale=(<span class="number">1333</span>, <span class="number">800</span>), keep_ratio=<span class="literal">True</span>),</span><br><span class="line">    <span class="comment"># 图像反转以及比率</span></span><br><span class="line">    dict(type=<span class="string">'RandomFlip'</span>, flip_ratio=<span class="number">0.5</span>),</span><br><span class="line">    <span class="comment"># 标准化</span></span><br><span class="line">    dict(</span><br><span class="line">        type=<span class="string">'Normalize'</span>,</span><br><span class="line">        mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>],</span><br><span class="line">        std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>],</span><br><span class="line">        to_rgb=<span class="literal">True</span>),</span><br><span class="line">    <span class="comment"># 图像Padding 的配置，填充数目应该可以被整除</span></span><br><span class="line">    dict(type=<span class="string">'Pad'</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">    dict(type=<span class="string">'DefaultFormatBundle'</span>),</span><br><span class="line">    <span class="comment"># 决定数据中哪些key可以被传入pipeline中</span></span><br><span class="line">    dict(type=<span class="string">'Collect'</span>, keys=[<span class="string">'img'</span>, <span class="string">'gt_bboxes'</span>, <span class="string">'gt_labels'</span>])</span><br><span class="line">]</span><br><span class="line">test_pipeline = [</span><br><span class="line">    dict(type=<span class="string">'LoadImageFromFile'</span>),</span><br><span class="line">    dict(</span><br><span class="line">        type=<span class="string">'MultiScaleFlipAug'</span>,</span><br><span class="line">        img_scale=(<span class="number">1333</span>, <span class="number">800</span>),</span><br><span class="line">        <span class="comment"># 是否在test过程flip images</span></span><br><span class="line">        flip=<span class="literal">False</span>,</span><br><span class="line">        transforms=[</span><br><span class="line">            dict(type=<span class="string">'Resize'</span>, keep_ratio=<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># 由于flip=False这个RandomFlio将不会被使用。</span></span><br><span class="line">            dict(type=<span class="string">'RandomFlip'</span>),</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Normalize'</span>,</span><br><span class="line">                mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>],</span><br><span class="line">                std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>],</span><br><span class="line">                to_rgb=<span class="literal">True</span>),</span><br><span class="line">            dict(type=<span class="string">'Pad'</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">            <span class="comment"># 将图片转化为tensor</span></span><br><span class="line">            dict(type=<span class="string">'ImageToTensor'</span>, keys=[<span class="string">'img'</span>]),</span><br><span class="line">            <span class="comment"># 收集在test过程中必要的key</span></span><br><span class="line">            dict(type=<span class="string">'Collect'</span>, keys=[<span class="string">'img'</span>])</span><br><span class="line">        ])</span><br><span class="line">]</span><br><span class="line">data = dict(</span><br><span class="line">    <span class="comment"># 每个gpu计算的图像数量</span></span><br><span class="line">    samples_per_gpu=<span class="number">2</span>,</span><br><span class="line">    <span class="comment"># 每个gpu分配的线程数</span></span><br><span class="line">    workers_per_gpu=<span class="number">2</span>,</span><br><span class="line">    train=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file= data_root + <span class="string">'annotations/train.json'</span>,</span><br><span class="line">        img_prefix= data_root + <span class="string">'images/train/'</span>,</span><br><span class="line">        <span class="comment"># 类型，如果就一个类型需要加逗号</span></span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=train_pipeline),</span><br><span class="line">    val=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/test.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/test/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=test_pipeline),</span><br><span class="line">    test=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/test.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/test/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=test_pipeline))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">evaluation = dict(interval=<span class="number">1</span>, metric=<span class="string">'bbox'</span>)</span><br><span class="line">optimizer = dict(type=<span class="string">'SGD'</span>, lr=<span class="number">0.02</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0001</span>)</span><br><span class="line">optimizer_config = dict(grad_clip=<span class="literal">None</span>)</span><br><span class="line">lr_config = dict(</span><br><span class="line">    <span class="comment"># 优化策略</span></span><br><span class="line">    policy=<span class="string">'step'</span>,</span><br><span class="line">    <span class="comment"># 初始的学习率增加的策略，linear为线性增加，# warmup的策略, 还支持 `exp` 和 `constant`.</span></span><br><span class="line">    warmup=<span class="string">'linear'</span>,</span><br><span class="line">    <span class="comment"># 在初始的500次迭代中学习率逐渐增加</span></span><br><span class="line">    warmup_iters=<span class="number">500</span>,</span><br><span class="line">    <span class="comment"># 起始的学习率</span></span><br><span class="line">    warmup_ratio=<span class="number">0.001</span>,</span><br><span class="line">    <span class="comment"># 在第16和22个epoch时降低学习率</span></span><br><span class="line">    step=[<span class="number">16</span>,<span class="number">22</span>])</span><br><span class="line"><span class="comment"># 最大epoch数</span></span><br><span class="line">total_epochs = <span class="number">24</span></span><br><span class="line"><span class="comment"># 每隔几个epoch保存一下checkpoint</span></span><br><span class="line">checkpoint_config = dict(interval=<span class="number">12</span>)</span><br><span class="line"><span class="comment">#log_config = dict(interval=5, hooks=[dict(type='TextLoggerHook')])</span></span><br><span class="line">log_config = dict(</span><br><span class="line">    <span class="comment"># 每隔多少个epoch输出一个log文件</span></span><br><span class="line">    interval=<span class="number">6</span>,</span><br><span class="line">    hooks=[</span><br><span class="line">        dict(type=<span class="string">'TextLoggerHook'</span>),</span><br><span class="line">        <span class="comment"># Tensorboard logger</span></span><br><span class="line">        dict(type=<span class="string">'TensorboardLoggerHook'</span>)</span><br><span class="line">    ])</span><br><span class="line"><span class="comment"># 设置分布式训练的参数，也可以设置端口</span></span><br><span class="line">dist_params = dict(backend=<span class="string">'nccl'</span>)</span><br><span class="line"><span class="comment"># 日志等级</span></span><br><span class="line">log_level = <span class="string">'INFO'</span></span><br><span class="line"><span class="comment"># 加载模型的路径，None表示从预训练模型加载</span></span><br><span class="line">load_from = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 恢复训练模型的路径</span></span><br><span class="line">resume_from = <span class="literal">None</span></span><br><span class="line">workflow = [(<span class="string">'train'</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="comment"># 保存模型的文件夹路径（checkpoints和log文件都会保存在其中）。</span></span><br><span class="line">work_dir = <span class="string">'work_dir/faster_rcnn_r50_2x/'</span></span><br></pre></td></tr></table></figure>
<h3 id="4、cascade-rcnn-r50-fpn-2x-py">4、cascade_rcnn_r50_fpn_2x.py</h3>
<p>cascade-RCNN是cvpr2018的文章，相比于faster-RCNN的改进主要在于其RCNN有三个stage，这三个stage逐级refine检测的结果，使得结果达到更高的精度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = dict(</span><br><span class="line">    type=<span class="string">'CascadeRCNN'</span>,</span><br><span class="line">    pretrained=<span class="string">'torchvision://resnet50'</span>,</span><br><span class="line">    backbone=dict(</span><br><span class="line">        type=<span class="string">'ResNet'</span>,</span><br><span class="line">        depth=<span class="number">50</span>,</span><br><span class="line">        num_stages=<span class="number">4</span>,</span><br><span class="line">        out_indices=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">        frozen_stages=<span class="number">1</span>,</span><br><span class="line">        norm_cfg=dict(type=<span class="string">'BN'</span>, requires_grad=<span class="literal">True</span>),</span><br><span class="line">        norm_eval=<span class="literal">True</span>,</span><br><span class="line">        style=<span class="string">'pytorch'</span>),</span><br><span class="line">    neck=dict(</span><br><span class="line">        type=<span class="string">'FPN'</span>,</span><br><span class="line">        in_channels=[<span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>],</span><br><span class="line">        out_channels=<span class="number">256</span>,</span><br><span class="line">        num_outs=<span class="number">5</span>),</span><br><span class="line">    rpn_head=dict(</span><br><span class="line">        type=<span class="string">'RPNHead'</span>,</span><br><span class="line">        in_channels=<span class="number">256</span>,</span><br><span class="line">        feat_channels=<span class="number">256</span>,</span><br><span class="line">        anchor_generator=dict(</span><br><span class="line">            type=<span class="string">'AnchorGenerator'</span>,</span><br><span class="line">            scales=[<span class="number">8</span>],</span><br><span class="line">            ratios=[<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">2.0</span>],</span><br><span class="line">            strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>]),</span><br><span class="line">        bbox_coder=dict(</span><br><span class="line">            type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">            target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">            target_stds=[<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>]),</span><br><span class="line">        loss_cls=dict(</span><br><span class="line">            type=<span class="string">'CrossEntropyLoss'</span>, use_sigmoid=<span class="literal">True</span>, loss_weight=<span class="number">1.0</span>),</span><br><span class="line">        loss_bbox=dict(</span><br><span class="line">            type=<span class="string">'SmoothL1Loss'</span>, beta=<span class="number">0.1111111111111111</span>, loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">    roi_head=dict(</span><br><span class="line">        type=<span class="string">'CascadeRoIHead'</span>,</span><br><span class="line">        <span class="comment"># RCNN网络的stage数量，在faster-RCNN中为1</span></span><br><span class="line">        num_stages=<span class="number">3</span>,</span><br><span class="line">        <span class="comment"># 3个RCNN的stage的loss权重</span></span><br><span class="line">        stage_loss_weights=[<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.25</span>],</span><br><span class="line">        bbox_roi_extractor=dict(</span><br><span class="line">            type=<span class="string">'SingleRoIExtractor'</span>,</span><br><span class="line">            roi_layer=dict(type=<span class="string">'RoIAlign'</span>, output_size=<span class="number">7</span>, sampling_ratio=<span class="number">0</span>),</span><br><span class="line">            out_channels=<span class="number">256</span>,</span><br><span class="line">            featmap_strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>]),</span><br><span class="line">        bbox_head=[</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Shared2FCBBoxHead'</span>,</span><br><span class="line">                in_channels=<span class="number">256</span>,</span><br><span class="line">                fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">                roi_feat_size=<span class="number">7</span>,</span><br><span class="line">                num_classes=<span class="number">1</span>,</span><br><span class="line">                bbox_coder=dict(</span><br><span class="line">                    type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">                    target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    target_stds=[<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.2</span>]),</span><br><span class="line">                reg_class_agnostic=<span class="literal">True</span>,</span><br><span class="line">                loss_cls=dict(</span><br><span class="line">                    type=<span class="string">'CrossEntropyLoss'</span>,</span><br><span class="line">                    use_sigmoid=<span class="literal">False</span>,</span><br><span class="line">                    loss_weight=<span class="number">1.0</span>),</span><br><span class="line">                loss_bbox=dict(type=<span class="string">'SmoothL1Loss'</span>, beta=<span class="number">1.0</span>,</span><br><span class="line">                               loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Shared2FCBBoxHead'</span>,</span><br><span class="line">                in_channels=<span class="number">256</span>,</span><br><span class="line">                fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">                roi_feat_size=<span class="number">7</span>,</span><br><span class="line">                num_classes=<span class="number">1</span>,</span><br><span class="line">                bbox_coder=dict(</span><br><span class="line">                    type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">                    target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    target_stds=[<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.1</span>, <span class="number">0.1</span>]),</span><br><span class="line">                reg_class_agnostic=<span class="literal">True</span>,</span><br><span class="line">                loss_cls=dict(</span><br><span class="line">                    type=<span class="string">'CrossEntropyLoss'</span>,</span><br><span class="line">                    use_sigmoid=<span class="literal">False</span>,</span><br><span class="line">                    loss_weight=<span class="number">1.0</span>),</span><br><span class="line">                loss_bbox=dict(type=<span class="string">'SmoothL1Loss'</span>, beta=<span class="number">1.0</span>,</span><br><span class="line">                               loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Shared2FCBBoxHead'</span>,</span><br><span class="line">                in_channels=<span class="number">256</span>,</span><br><span class="line">                fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">                roi_feat_size=<span class="number">7</span>,</span><br><span class="line">                num_classes=<span class="number">1</span>,</span><br><span class="line">                bbox_coder=dict(</span><br><span class="line">                    type=<span class="string">'DeltaXYWHBBoxCoder'</span>,</span><br><span class="line">                    target_means=[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    target_stds=[<span class="number">0.033</span>, <span class="number">0.033</span>, <span class="number">0.067</span>, <span class="number">0.067</span>]),</span><br><span class="line">                reg_class_agnostic=<span class="literal">True</span>,</span><br><span class="line">                loss_cls=dict(</span><br><span class="line">                    type=<span class="string">'CrossEntropyLoss'</span>,</span><br><span class="line">                    use_sigmoid=<span class="literal">False</span>,</span><br><span class="line">                    loss_weight=<span class="number">1.0</span>),</span><br><span class="line">                loss_bbox=dict(type=<span class="string">'SmoothL1Loss'</span>, beta=<span class="number">1.0</span>, loss_weight=<span class="number">1.0</span>))</span><br><span class="line">        ]))</span><br><span class="line">train_cfg = dict(</span><br><span class="line">    rpn=dict(</span><br><span class="line">        assigner=dict(</span><br><span class="line">            type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">            pos_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">            neg_iou_thr=<span class="number">0.3</span>,</span><br><span class="line">            min_pos_iou=<span class="number">0.3</span>,</span><br><span class="line">            match_low_quality=<span class="literal">True</span>,</span><br><span class="line">            ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">        sampler=dict(</span><br><span class="line">            type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">            num=<span class="number">256</span>,</span><br><span class="line">            pos_fraction=<span class="number">0.5</span>,</span><br><span class="line">            neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">            add_gt_as_proposals=<span class="literal">False</span>),</span><br><span class="line">        allowed_border=<span class="number">0</span>,</span><br><span class="line">        pos_weight=<span class="number">-1</span>,</span><br><span class="line">        debug=<span class="literal">False</span>),</span><br><span class="line">    rpn_proposal=dict(</span><br><span class="line">        nms_across_levels=<span class="literal">False</span>,</span><br><span class="line">        nms_pre=<span class="number">2000</span>,</span><br><span class="line">        nms_post=<span class="number">2000</span>,</span><br><span class="line">        max_num=<span class="number">2000</span>,</span><br><span class="line">        nms_thr=<span class="number">0.7</span>,</span><br><span class="line">        min_bbox_size=<span class="number">0</span>),</span><br><span class="line">    <span class="comment"># 注意，这里有3个RCNN的模块,对应开头的那个RCNN的stage数量</span></span><br><span class="line">    rcnn=[</span><br><span class="line">        dict(</span><br><span class="line">            assigner=dict(</span><br><span class="line">                type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.5</span>,</span><br><span class="line">                match_low_quality=<span class="literal">False</span>,</span><br><span class="line">                ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">            sampler=dict(</span><br><span class="line">                type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">                num=<span class="number">512</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">                neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">            pos_weight=<span class="number">-1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>),</span><br><span class="line">        dict(</span><br><span class="line">            assigner=dict(</span><br><span class="line">                type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.6</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.6</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.6</span>,</span><br><span class="line">                match_low_quality=<span class="literal">False</span>,</span><br><span class="line">                ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">            sampler=dict(</span><br><span class="line">                type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">                num=<span class="number">512</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">                neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">            pos_weight=<span class="number">-1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>),</span><br><span class="line">        dict(</span><br><span class="line">            assigner=dict(</span><br><span class="line">                type=<span class="string">'MaxIoUAssigner'</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.7</span>,</span><br><span class="line">                match_low_quality=<span class="literal">False</span>,</span><br><span class="line">                ignore_iof_thr=<span class="number">-1</span>),</span><br><span class="line">            sampler=dict(</span><br><span class="line">                type=<span class="string">'RandomSampler'</span>,</span><br><span class="line">                num=<span class="number">512</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">                neg_pos_ub=<span class="number">-1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">            pos_weight=<span class="number">-1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>)</span><br><span class="line">    ])</span><br><span class="line">test_cfg = dict(</span><br><span class="line">    rpn=dict(</span><br><span class="line">        nms_across_levels=<span class="literal">False</span>,</span><br><span class="line">        nms_pre=<span class="number">1000</span>,</span><br><span class="line">        nms_post=<span class="number">1000</span>,</span><br><span class="line">        max_num=<span class="number">1000</span>,</span><br><span class="line">        nms_thr=<span class="number">0.7</span>,</span><br><span class="line">        min_bbox_size=<span class="number">0</span>),</span><br><span class="line">    rcnn=dict(</span><br><span class="line">        score_thr=<span class="number">0.05</span>,</span><br><span class="line">        nms=dict(type=<span class="string">'nms'</span>, iou_threshold=<span class="number">0.5</span>),</span><br><span class="line">        max_per_img=<span class="number">100</span>))</span><br><span class="line">img_norm_cfg = dict(</span><br><span class="line">    mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>], std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>], to_rgb=<span class="literal">True</span>)</span><br><span class="line">dataset_type = <span class="string">'CocoDataset'</span>                </span><br><span class="line"><span class="comment"># 数据集根目录</span></span><br><span class="line">data_root = <span class="string">'/home/shawn/MyDataset/'</span>    </span><br><span class="line"></span><br><span class="line">train_pipeline = [</span><br><span class="line">    dict(type=<span class="string">'LoadImageFromFile'</span>),</span><br><span class="line">    dict(type=<span class="string">'LoadAnnotations'</span>, with_bbox=<span class="literal">True</span>),</span><br><span class="line">    dict(type=<span class="string">'Resize'</span>, img_scale=(<span class="number">1333</span>, <span class="number">800</span>), keep_ratio=<span class="literal">True</span>),</span><br><span class="line">    dict(type=<span class="string">'RandomFlip'</span>, flip_ratio=<span class="number">0.5</span>),</span><br><span class="line">    dict(</span><br><span class="line">        type=<span class="string">'Normalize'</span>,</span><br><span class="line">        mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>],</span><br><span class="line">        std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>],</span><br><span class="line">        to_rgb=<span class="literal">True</span>),</span><br><span class="line">    dict(type=<span class="string">'Pad'</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">    dict(type=<span class="string">'DefaultFormatBundle'</span>),</span><br><span class="line">    dict(type=<span class="string">'Collect'</span>, keys=[<span class="string">'img'</span>, <span class="string">'gt_bboxes'</span>, <span class="string">'gt_labels'</span>])</span><br><span class="line">]</span><br><span class="line">test_pipeline = [</span><br><span class="line">    dict(type=<span class="string">'LoadImageFromFile'</span>),</span><br><span class="line">    dict(</span><br><span class="line">        type=<span class="string">'MultiScaleFlipAug'</span>,</span><br><span class="line">        img_scale=(<span class="number">1333</span>, <span class="number">800</span>),</span><br><span class="line">        flip=<span class="literal">False</span>,</span><br><span class="line">        transforms=[</span><br><span class="line">            dict(type=<span class="string">'Resize'</span>, keep_ratio=<span class="literal">True</span>),</span><br><span class="line">            dict(type=<span class="string">'RandomFlip'</span>),</span><br><span class="line">            dict(</span><br><span class="line">                type=<span class="string">'Normalize'</span>,</span><br><span class="line">                mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>],</span><br><span class="line">                std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>],</span><br><span class="line">                to_rgb=<span class="literal">True</span>),</span><br><span class="line">            dict(type=<span class="string">'Pad'</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">            dict(type=<span class="string">'ImageToTensor'</span>, keys=[<span class="string">'img'</span>]),</span><br><span class="line">            dict(type=<span class="string">'Collect'</span>, keys=[<span class="string">'img'</span>])</span><br><span class="line">        ])</span><br><span class="line">]</span><br><span class="line">data = dict(</span><br><span class="line">    samples_per_gpu=<span class="number">2</span>,</span><br><span class="line">    workers_per_gpu=<span class="number">2</span>,</span><br><span class="line">    train=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/train.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/train/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=train_pipeline),</span><br><span class="line">    val=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/train.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/train/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=test_pipeline),</span><br><span class="line">    test=dict(</span><br><span class="line">        type=<span class="string">'CocoDataset'</span>,</span><br><span class="line">        ann_file=data_root + <span class="string">'annotations/train.json'</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">'images/train/'</span>,</span><br><span class="line">        classes=(<span class="string">'polyp'</span>, ),</span><br><span class="line">        pipeline=test_pipeline))</span><br><span class="line">evaluation = dict(interval=<span class="number">1</span>, metric=<span class="string">'bbox'</span>)</span><br><span class="line">optimizer = dict(type=<span class="string">'SGD'</span>, lr=<span class="number">0.02</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0001</span>)</span><br><span class="line">optimizer_config = dict(grad_clip=<span class="literal">None</span>)</span><br><span class="line">lr_config = dict(</span><br><span class="line">    policy=<span class="string">'step'</span>,</span><br><span class="line">    warmup=<span class="string">'linear'</span>,</span><br><span class="line">    warmup_iters=<span class="number">500</span>,</span><br><span class="line">    warmup_ratio=<span class="number">0.001</span>,</span><br><span class="line">    step=[<span class="number">16</span>, <span class="number">22</span>])</span><br><span class="line">total_epochs = <span class="number">24</span></span><br><span class="line">checkpoint_config = dict(interval=<span class="number">12</span>)</span><br><span class="line">log_config = dict(</span><br><span class="line">    interval=<span class="number">5</span>,</span><br><span class="line">    hooks=[</span><br><span class="line">        dict(type=<span class="string">'TextLoggerHook'</span>),</span><br><span class="line">        dict(type=<span class="string">'TensorboardLoggerHook'</span>)</span><br><span class="line">    ])</span><br><span class="line">dist_params = dict(backend=<span class="string">'nccl'</span>)</span><br><span class="line">log_level = <span class="string">'INFO'</span></span><br><span class="line">load_from = <span class="literal">None</span></span><br><span class="line">resume_from = <span class="literal">None</span></span><br><span class="line">workflow = [(<span class="string">'train'</span>, <span class="number">1</span>)]</span><br><span class="line">work_dir = <span class="string">'work_dir/cascade_rcnn_r50_fpn_2x.py'</span></span><br></pre></td></tr></table></figure>
<h3 id="5、服务器运行以及可视化">5、服务器运行以及可视化</h3>
<p><strong>参数修改</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#训练自己的COCO数据集，需要自己修改的地方有num_classes、data_root、classes（全部都要）</span></span><br><span class="line"><span class="comment">#若显存较小可修改img_scale=(1333, 800)为img_scale=(800, 500)</span></span><br><span class="line"><span class="comment">#如果要设置不同epoch,修改lr_config下的step以及total_epochs</span></span><br><span class="line"><span class="comment">#特征提取层model下的pretrained以及depth</span></span><br></pre></td></tr></table></figure>
<p><strong>服务器运行</strong>（举例）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务器运行命令，--gpu-ids哪块GPU运行，运行前nvidia-smi查看哪块gpu空闲</span></span><br><span class="line">python tools/train.py configs/cascade_rcnn_r50_fpn_2x.py --gpu-ids <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后台运行cascade_r101.txt是日志输出文件</span></span><br><span class="line">nohup python tools/train.py configs/cascade_rcnn_r101_fpn_2x.py --gpu-ids <span class="number">1</span> &gt; cascade_r101.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure>
<p><strong>tensorboard可视化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务器在根目录运行</span></span><br><span class="line">tensorboard --logdir=work_dir</span><br><span class="line"><span class="comment">#windows cmd运行</span></span><br><span class="line">ssh -L <span class="number">16006</span>:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6006</span> &#123;xx@ip地址&#125;</span><br><span class="line"><span class="comment">#本地运行</span></span><br><span class="line">http://localhost:<span class="number">16006</span>/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch神经网络简单入门</title>
    <url>/posts/561aebde.html</url>
    <content><![CDATA[<h2 id="一、框架说明">一、框架说明</h2>
<p>Pytorch具体的APi操作详见<a href="https://pytorch.org/docs/stable/torch.html" target="_blank" rel="noopener">Pytorch官方Api文档</a>，torchvision具体Api操作详见<a href="https://pytorch.org/vision/stable/index.html" target="_blank" rel="noopener">torchvision官方Api</a>，下面介绍一下常用的包</p>
<ul>
<li><code>torch</code>：张量的常见运算。如创建、索引、连接、转置、加减乘除、切片等</li>
<li><code>torch.nn</code>: 包含搭建神经网络层的模块（Modules）和一系列loss函数。如全连接、卷积、BN批处理、dropout、CrossEntryLoss、MSELoss等</li>
<li><code>torch.nn.functional</code>:常用的激活函数relu、leaky_relu、sigmoid等</li>
<li><code>torch.autograd</code>:提供Tensor所有操作的自动求导方法</li>
<li><code>torch.cuda</code>：提供对CUDA张量类型的支持，可以让模型使用gpu运行</li>
<li><code>torch.optim</code>:各种参数优化方法，例如SGD、AdaGrad、Adam、RMSProp等</li>
<li><code>torch.utils.data</code>:用于加载数据</li>
<li><code>torch.nn.init</code>:可以用它更改nn.Module的默认参数初始化方式</li>
<li><code>torchvision.datasets</code>:常用数据集。MNIST、COCO、CIFAR10、Imagenet等</li>
<li><code>torchvision.modules</code>:常用模型。AlexNet、VGG、ResNet、DenseNet等</li>
<li><code>torchvision.transforms</code>:图片相关处理。裁剪、尺寸缩放、归一化等</li>
<li><code>torchvision.utils</code>:将给定的Tensor保存成image文件</li>
</ul>
<a id="more"></a>
<h2 id="二、GPU相关">二、GPU相关</h2>
<p>运行需要成功安装CUDA和CUDNN，同时要保证显卡驱动以及CUDA、CUDNN版本相匹配。对于CUDA的安装网上有很多教程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#True表示可以进行gpu加速</span></span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"><span class="comment">#打印gpu数量</span></span><br><span class="line">torch.cuda.device_count()</span><br><span class="line"><span class="comment">#显示gpu名字，序号从0开始，例如我的是GeForce GTX 1050</span></span><br><span class="line">torch.cuda.get_device_name(<span class="number">0</span>) </span><br><span class="line"><span class="comment">#输出当前GPU序号，从0开始</span></span><br><span class="line">torch.cuda.current_device()</span><br></pre></td></tr></table></figure>
<p>在程序中可以如以下操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果机器不存在gpu就使用cpu，存在就使用0号gpu，序号可以按自己需求修改</span></span><br><span class="line">device = torch.device(<span class="string">'cuda:0'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span>)</span><br><span class="line"><span class="comment">#还需要将模型（神经网络）与数据转移到相应的设备上，model代表模型，data代表张量</span></span><br><span class="line">model = model.to(device)</span><br><span class="line"><span class="comment">#model = model.cuda()</span></span><br><span class="line">data = data.to(device)</span><br><span class="line"><span class="comment">#data = data.cuda()</span></span><br></pre></td></tr></table></figure>
<h2 id="三、前置知识学习">三、前置知识学习</h2>
<p>Pytorch的一些入门常用操作，以及Numpy的入门常用操作。Numpy可以看<a href="https://www.runoob.com/numpy/numpy-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></p>
<blockquote>
<p>深度学习入门可以浏览：</p>
<p><a href="https://apachecn.gitee.io/ailearning/#/README" target="_blank" rel="noopener">https://apachecn.gitee.io/ailearning/#/README</a></p>
<p><a href="https://tangshusen.me/Dive-into-DL-PyTorch/#/" target="_blank" rel="noopener">https://tangshusen.me/Dive-into-DL-PyTorch/#/</a></p>
</blockquote>
<p>对于网络模型的优化，可以加入<code>Dropout和BN批量归一化</code></p>
<h2 id="四、搭建第一个神经网络-回归">四、搭建第一个神经网络(回归)</h2>
<p><strong>第一步生成数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># reproducible</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)   </span><br><span class="line"><span class="comment">#这里linspace函数是从-1到1均分成100份，unsqueeze表示在第1轴增加一个维度，原本是一维，现在变成(100,1)维度,即100个数据1个特征。同理squeeze表示减少一个维度</span></span><br><span class="line">x = torch.unsqueeze(torch.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">100</span>),dim=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#增加随机噪声</span></span><br><span class="line">y = pow(x,<span class="number">2</span>) + torch.randn(x.size())*<span class="number">0.1</span></span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210507205531917.png" alt=""></p>
<p><strong>第二步，建立神经网络，这里定义了一个隐藏层，并使用ReLu激活函数。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继承 torch 的 Module</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n_feature,n_hidden,n_outpit)</span>:</span></span><br><span class="line">        <span class="comment"># 继承 __init__ 功能，必须要有，定义网络的时候进行初始化</span></span><br><span class="line">        super(Net,self).__init__()</span><br><span class="line">        self.hidden=torch.nn.Linear(n_feature,n_hidden)</span><br><span class="line">        self.output=torch.nn.Linear(n_hidden,n_outpit)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这同时也是 Module 中的 forward 功能，会自动进行前向计算</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        x=F.relu(self.hidden(x))</span><br><span class="line">        x=self.output(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># to(device)选择在'cpu'或'cuda'上运行</span></span><br><span class="line">net = Net(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#net = Net(1,10,1).to(device)</span></span><br><span class="line"><span class="comment">#打印一下网络信息</span></span><br><span class="line">print(net)</span><br></pre></td></tr></table></figure>
<p><strong>第三步选择损失函数和优化器</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#回归常用MSE，而分类常用Cross Entropy</span></span><br><span class="line">loss = torch.nn.MSELoss()</span><br><span class="line"><span class="comment">#pytorch根据当前当属更新参数值，学习率在这里取0.5</span></span><br><span class="line">optimizer = torch.optim.SGD(net.parameters,lr=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#查看参数值</span></span><br><span class="line"><span class="comment">#list(net.parameters())[0]</span></span><br><span class="line"><span class="comment">#list(net.parameters())[0]</span></span><br></pre></td></tr></table></figure>
<p><strong>第四步模型的训练及其结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">epochs = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(epochs):</span><br><span class="line">    <span class="comment">#训练给模型的数据，net(x)即net.forward(x)</span></span><br><span class="line">    prediction = net(x)</span><br><span class="line">    <span class="comment">#计算损失函数</span></span><br><span class="line">    loss = loss_fn(prediction,y)</span><br><span class="line">    <span class="comment">#优化器梯度清理，方便下一次梯度下降</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment">#反向传播求导</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment">#优化器更新神经网络参数加到 net 的 parameters 上</span></span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">10</span>==<span class="number">0</span>:</span><br><span class="line">        plt.cla()</span><br><span class="line">        plt.scatter(x.data.numpy(),y.data.numpy())</span><br><span class="line">        plt.plot(x.data.numpy(),prediction.data.numpy())</span><br><span class="line">        plt.text(<span class="number">0.5</span>, <span class="number">0</span>, <span class="string">'Loss=%.4f'</span> % loss, fontdict=&#123;<span class="string">'size'</span>: <span class="number">16</span>, <span class="string">'color'</span>:  <span class="string">'red'</span>&#125;)</span><br><span class="line">        plt.pause(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210507223610151.png" alt=""></p>
<p><strong>第五步模型的保存和加载</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#保存整个模型</span></span><br><span class="line">torch.save(net,<span class="string">"mynet.pkl"</span>)</span><br><span class="line">net=torch.load(<span class="string">"mynet.pkl"</span>)</span><br><span class="line"><span class="comment">#保存模型参数，占用内存小，速度快</span></span><br><span class="line">torch.save(net.state_dict(),<span class="string">"mynet.pkl"</span>)</span><br><span class="line">net.load_state_dict(<span class="string">"mynet.pkl"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="五、CNN卷积神经网络实现MNIST数据集">五、CNN卷积神经网络实现MNIST数据集</h2>
<blockquote>
<p>手写数字集识别的可视化网站：</p>
<p><a href="https://www.cs.ryerson.ca/~aharley/vis/conv/" target="_blank" rel="noopener">https://www.cs.ryerson.ca/~aharley/vis/conv/</a></p>
</blockquote>
<p><strong>首先导入第三方库</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="comment">#设置随机种子以便复现</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><strong>训练集和测试集的获取，若本机有cuda环境，也可以运行cuda注释代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">EPOCH=<span class="number">1</span></span><br><span class="line">BATCH_SIZE=<span class="number">32</span></span><br><span class="line">LR=<span class="number">0.001</span></span><br><span class="line"><span class="comment">#如果已经下载好改为False</span></span><br><span class="line">DOWNLOAD_MINIST= <span class="literal">False</span></span><br><span class="line"><span class="comment">#获取手写数字训练集</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    <span class="comment"># 保存地点</span></span><br><span class="line">    root=<span class="string">"./minist/"</span>,</span><br><span class="line">    <span class="comment"># 是否是训练集</span></span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成torch.FloatTensor (C,H,W), 训练的时候 normalize 成 [0.0, 1.0]区间</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    <span class="comment"># 是否下载</span></span><br><span class="line">    download=DOWNLOAD_MINIST)</span><br><span class="line"><span class="comment"># 可视化查看一下数据图片</span></span><br><span class="line">train,label = train_data[<span class="number">0</span>]</span><br><span class="line">plt.imshow(train.squeeze())</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.MNIST(</span><br><span class="line">    <span class="comment"># 保存地点</span></span><br><span class="line">    root=<span class="string">"./minist/"</span>,</span><br><span class="line">    <span class="comment"># 是否是训练集</span></span><br><span class="line">    train=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 批训练(32,1,28,28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 由原来的(60000,28,28)变为(60000,1,28,28)</span></span><br><span class="line">test_x = torch.unsqueeze(test_data.data, dim=<span class="number">1</span>).type(torch.FloatTensor)[:<span class="number">2000</span>]/<span class="number">255.</span></span><br><span class="line">test_y = test_data.targets[:<span class="number">2000</span>]</span><br><span class="line"><span class="comment"># 若存在cuda环境，即可使用注释代码</span></span><br><span class="line"><span class="comment"># test_x = test_x.cuda()</span></span><br><span class="line"><span class="comment"># test_y = test_y.cuda()</span></span><br></pre></td></tr></table></figure>
<p><strong>CNN网络配置</strong>，输出大小为<code>[(n - k + 2p) / s] + 1</code>，n代表输入大小，k为核大小，p为填充，s为步幅</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CNN,self).__init__()</span><br><span class="line">        <span class="comment">#输入形状为(1,28,28)，输出形状为(16,14,14)</span></span><br><span class="line">        self.conv1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">1</span>,   <span class="comment"># 输入通道</span></span><br><span class="line">                      out_channels=<span class="number">16</span>, <span class="comment"># 输出通道</span></span><br><span class="line">                      kernel_size=<span class="number">5</span>,   <span class="comment"># 卷积核大小</span></span><br><span class="line">                      stride=<span class="number">1</span>,        <span class="comment"># 步幅</span></span><br><span class="line">                      padding=<span class="number">2</span>),      <span class="comment"># 填充</span></span><br><span class="line">            <span class="comment"># 此时输出形状为(16,28,28)</span></span><br><span class="line">            nn.ReLU(),                 <span class="comment"># 激活函数</span></span><br><span class="line">            <span class="comment"># 最大池化，核大小为2，此时输出形状(16,14,14)</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>)</span><br><span class="line">        )</span><br><span class="line">        self.conv2 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">16</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>), <span class="comment"># 输出形状(32,14,14)</span></span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>)         <span class="comment">#输出形状(32,7,7)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#全连接网络，输出10个类别</span></span><br><span class="line">        self.out = nn.Linear(<span class="number">32</span>*<span class="number">7</span>*<span class="number">7</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        <span class="comment"># 将卷积层展平，才能输入全连接网络</span></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line">        output = self.out(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>
<p><strong>训练与测试</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cnn = CNN()</span><br><span class="line"><span class="comment"># 若存在cuda环境，即可使用注释代码</span></span><br><span class="line"><span class="comment"># cnn = cnn.cuda()</span></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">optimizer = torch.optim.Adam(cnn.parameters(),lr=LR)</span><br><span class="line"><span class="comment"># 损失函数，分类问题</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(EPOCH):</span><br><span class="line">    <span class="comment"># 迭代运行</span></span><br><span class="line">    <span class="keyword">for</span> step, (x, y) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        <span class="comment"># x = x.cuda()</span></span><br><span class="line">        <span class="comment"># y = y.cuda()</span></span><br><span class="line">        output = cnn(x)</span><br><span class="line">        loss = loss_fn(output, y)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span>(step % <span class="number">50</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># 可以单独进行模型的测试</span></span><br><span class="line">            test_output = cnn(test_x)</span><br><span class="line">            <span class="comment"># 1代表索引列，因为刚好匹配到0-9，获取概率高的</span></span><br><span class="line">            pre_y = torch.max(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.squeeze()</span><br><span class="line">            <span class="comment"># pre_y = torch.max(test_output, 1)[1].cuda().data.squeeze()</span></span><br><span class="line">            <span class="comment"># 获取准确率</span></span><br><span class="line">            accurary = float((pre_y == test_y).sum()) / float(test_y.size(<span class="number">0</span>))</span><br><span class="line">            print(<span class="string">'Epoch: '</span>,epoch, <span class="string">'| train loss: %.4f'</span> % loss.data, <span class="string">'| test accurary: %.2f'</span> % accurary)</span><br><span class="line"><span class="comment"># 最后可以模型保存</span></span><br></pre></td></tr></table></figure>
<h2 id="六、RNN循环神经网络实现MNIST数据集">六、RNN循环神经网络实现MNIST数据集</h2>
<p>之前的操作与CNN类似，RNN循环神经网络部分如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LSTM</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size=<span class="number">28</span>, hidden_size=<span class="number">64</span>, num_layers=<span class="number">1</span>, output_size=<span class="number">10</span>)</span>:</span></span><br><span class="line">       super(LSTM, self).__init__()</span><br><span class="line">       <span class="comment"># 使用LSTM比RNN效果好</span></span><br><span class="line">       self.rnn = nn.LSTM(</span><br><span class="line">           <span class="comment"># 输入数据特征数，这里28个28维度的数据输入</span></span><br><span class="line">           input_size = input_size,</span><br><span class="line">           <span class="comment"># 隐藏层特征数    </span></span><br><span class="line">           hidden_size = hidden_size,</span><br><span class="line">           <span class="comment"># LSTM层数</span></span><br><span class="line">           num_layers = num_layers,</span><br><span class="line">           <span class="comment"># 如果是第一次输入，需要将batch_size与seq_length这两个维度调换</span></span><br><span class="line">           batch_first = <span class="literal">True</span></span><br><span class="line">       )</span><br><span class="line">       <span class="comment"># 输出10个类别</span></span><br><span class="line">       self.output = nn.Linear(hidden_size,output_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="comment"># x shape (batch, time_step, input_size)</span></span><br><span class="line">        <span class="comment"># r_out shape (batch, time_step, output_size)</span></span><br><span class="line">        <span class="comment"># h_n shape (n_layers, batch, hidden_size)   LSTM 有两个 hidden states, h_n 是分线, h_c 是主线</span></span><br><span class="line">        <span class="comment"># h_c shape (n_layers, batch, hidden_size)</span></span><br><span class="line">        r_out,(h_n, h_c) = self.rnn(x,<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 选取最后一个时间点的 r_out 输出</span></span><br><span class="line">        output = self.output(r_out[:,<span class="number">-1</span>,:])</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">lstm = LSTM()</span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">optimizer = torch.optim.Adam(lstm.parameters(),lr=LR)</span><br><span class="line"><span class="comment"># 损失函数，分类问题</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(EPOCH):</span><br><span class="line">    <span class="comment"># 迭代运行</span></span><br><span class="line">    <span class="keyword">for</span> step, (x, y) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">         <span class="comment"># 输入输入需要变换形状</span></span><br><span class="line">        output = lstm(x.view(<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">        loss = loss_fn(output, y)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span>(step % <span class="number">50</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># 可以单独进行模型的测试</span></span><br><span class="line">            test_output = lstm(test_x.view(<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">            <span class="comment"># 1代表索引列，因为刚好匹配到0-9，获取概率高的</span></span><br><span class="line">            pre_y = torch.max(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.squeeze()</span><br><span class="line">            <span class="comment"># 获取准确率</span></span><br><span class="line">            accurary = float((pre_y == test_y).sum()) / float(test_y.size(<span class="number">0</span>))</span><br><span class="line">            print(<span class="string">'Epoch: '</span>,epoch, <span class="string">'| train loss: %.4f'</span> % loss.data, <span class="string">'| test accurary: %.2f'</span> % accurary)</span><br><span class="line"><span class="comment"># 最后可以模型保存</span></span><br></pre></td></tr></table></figure>
<h2 id="七、AutoEncoder自编码">七、AutoEncoder自编码</h2>
<p><strong>首先获取数据集</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="comment">#设置随机种子以便复现</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">EPOCH=<span class="number">1</span></span><br><span class="line">BATCH_SIZE=<span class="number">32</span></span><br><span class="line">LR=<span class="number">0.001</span></span><br><span class="line"><span class="comment">#如果已经下载好改为False</span></span><br><span class="line">DOWNLOAD_MINIST= <span class="literal">False</span></span><br><span class="line"><span class="comment">#获取手写数字训练集</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    <span class="comment"># 保存地点</span></span><br><span class="line">    root=<span class="string">"./minist/"</span>,</span><br><span class="line">    <span class="comment"># 是否是训练集</span></span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成torch.FloatTensor (C,H,W), 训练的时候 normalize 成 [0.0, 1.0]区间</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    <span class="comment"># 是否下载</span></span><br><span class="line">    download=DOWNLOAD_MINIST)</span><br><span class="line"><span class="comment"># 批训练(32,1,28,28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><strong>网络的设置与训练，AutoEncoder是先将图片压缩后还原，用还原后的图片与原图片进行评估并梯度下降</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># AutoEncoder 形式很简单, 分别是 encoder  和 decoder , 压缩和解压, 压缩后得到压缩的特征值, 再从压缩的特征值解压成原图片</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoEncoder</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(AutoEncoder, self).__init__()</span><br><span class="line">        <span class="comment"># 压缩</span></span><br><span class="line">        self.encoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">128</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">12</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">12</span>, <span class="number">3</span>),   <span class="comment"># 压缩成3个特征, 进行 3D 图像可视化</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 解压</span></span><br><span class="line">        self.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">3</span>, <span class="number">12</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">12</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">128</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">28</span>*<span class="number">28</span>),</span><br><span class="line">            nn.Sigmoid(),       <span class="comment"># 激励函数让输出值在 (0, 1)</span></span><br><span class="line">        )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        encoded = self.encoder(x)</span><br><span class="line">        decoded = self.decoder(encoded)</span><br><span class="line">        <span class="keyword">return</span> encoded, decoded</span><br><span class="line"></span><br><span class="line">autoencoder = AutoEncoder()</span><br><span class="line">optimizer = torch.optim.Adam(autoencoder.parameters(),lr=LR)</span><br><span class="line">loss_fn = nn.MSELoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (x, y) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        train_x = x.view(<span class="number">-1</span>,<span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">        train_y = x.view(<span class="number">-1</span>,<span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">        encoded, decoded = autoencoder(train_x)</span><br><span class="line">        loss = loss_fn(decoded, train_y)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span>(step % <span class="number">50</span> == <span class="number">0</span>):</span><br><span class="line">            print(<span class="string">'Epoch: '</span>,epoch, <span class="string">'| train loss: %.4f'</span> % loss.data)</span><br></pre></td></tr></table></figure>
<p><strong>3D展示图，可以进行旋转观看</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要观看的数据</span></span><br><span class="line">view_data = train_data.data[:<span class="number">200</span>].view(<span class="number">-1</span>, <span class="number">28</span>*<span class="number">28</span>).type(torch.FloatTensor)/<span class="number">255.</span></span><br><span class="line">encoded_data, _ = autoencoder(view_data)    <span class="comment"># 提取压缩的特征值</span></span><br><span class="line">fig = plt.figure(<span class="number">2</span>)</span><br><span class="line">ax = Axes3D(fig)    <span class="comment"># 3D 图</span></span><br><span class="line"><span class="comment"># x, y, z 的数据值</span></span><br><span class="line">X = encoded_data.data[:, <span class="number">0</span>].numpy()</span><br><span class="line">Y = encoded_data.data[:, <span class="number">1</span>].numpy()</span><br><span class="line">Z = encoded_data.data[:, <span class="number">2</span>].numpy()</span><br><span class="line">values = train_data.targets[:<span class="number">200</span>].numpy()  <span class="comment"># 标签值</span></span><br><span class="line"><span class="keyword">for</span> x, y, z, s <span class="keyword">in</span> zip(X, Y, Z, values):</span><br><span class="line">    c = cm.rainbow(int(<span class="number">255</span>*s/<span class="number">9</span>))    <span class="comment"># 上色</span></span><br><span class="line">    ax.text(x, y, z, s, backgroundcolor=c)  <span class="comment"># 标位子</span></span><br><span class="line">ax.set_xlim(X.min(), X.max())</span><br><span class="line">ax.set_ylim(Y.min(), Y.max())</span><br><span class="line">ax.set_zlim(Z.min(), Z.max())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210515213727565.png" alt=""></p>
<h2 id="八、GAN生成对抗网络">八、GAN生成对抗网络</h2>
<p>Generator 作为生成器努力生成以假乱真的图片, Discriminator作为判别器，努力判别生成图片为假数据，两者在训练中一起成长，最终训练出可以以假乱真的生成器。这里使用了MNIST作为数据集，生成器是生成数字，判别器验证输入是否为数字，使用了GPU加速训练，这里网络用了简单模型，可以自行修改为卷积网络</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="comment"># 随机种子方便再现</span></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)</span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置超参数</span></span><br><span class="line">EPOCH = <span class="number">1</span></span><br><span class="line">BATCH_SIZE = <span class="number">32</span></span><br><span class="line">LR_G = <span class="number">0.0001</span>           <span class="comment"># 生成器学习率</span></span><br><span class="line">LR_D = <span class="number">0.0001</span>           <span class="comment"># 判别器学习率</span></span><br><span class="line"><span class="comment">#如果已经下载好改为False</span></span><br><span class="line">DOWNLOAD_MINIST= <span class="literal">False</span></span><br><span class="line"><span class="comment"># GPU加速</span></span><br><span class="line">device = torch.device(<span class="string">'cuda:0'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span>)</span><br><span class="line"><span class="comment">#获取手写数字训练集</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    <span class="comment"># 保存地点</span></span><br><span class="line">    root=<span class="string">"./minist/"</span>,</span><br><span class="line">    <span class="comment"># 是否是训练集</span></span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成torch.FloatTensor (C,H,W), 训练的时候 normalize 成 [0.0, 1.0]区间</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    <span class="comment"># 是否下载</span></span><br><span class="line">    download=DOWNLOAD_MINIST)</span><br><span class="line"><span class="comment"># 批训练(32,1,28,28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">generator</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size)</span>:</span></span><br><span class="line">        super(generator,self).__init__()</span><br><span class="line">        self.gen = nn.Sequential(</span><br><span class="line">            nn.Linear(input_size,<span class="number">256</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">256</span>,<span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>,<span class="number">784</span>),</span><br><span class="line">            nn.Tanh()</span><br><span class="line">        )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        output = self.gen(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"><span class="comment"># 判别器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">discriminator</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(discriminator,self).__init__()</span><br><span class="line">        self.dis = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">784</span>,<span class="number">512</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>),</span><br><span class="line">            nn.Linear(<span class="number">512</span>,<span class="number">256</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>),</span><br><span class="line">            nn.Linear(<span class="number">256</span>,<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid()</span><br><span class="line">        )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        output = self.dis(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">G = generator(<span class="number">28</span>*<span class="number">28</span>).to(device)</span><br><span class="line">D = discriminator().to(device)</span><br><span class="line"></span><br><span class="line">criterion = nn.BCELoss()</span><br><span class="line">g_optimizer = torch.optim.Adam(G.parameters(), lr=LR_G)</span><br><span class="line">d_optimizer = torch.optim.Adam(D.parameters(), lr=LR_D)</span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (x, _) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        <span class="comment"># 获取每一次迭代数据的批量值</span></span><br><span class="line">        x_num = x.size(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 训练判别器</span></span><br><span class="line">        train_x = x.view(x_num, <span class="number">-1</span>).to(device)</span><br><span class="line">        <span class="comment"># 真实标签值</span></span><br><span class="line">        real_label = torch.ones(x_num).to(device)</span><br><span class="line">        <span class="comment"># 噪声标签值</span></span><br><span class="line">        fake_label = torch.zeros(x_num).to(device)</span><br><span class="line">        real_out = D(train_x)</span><br><span class="line">        d_loss_real = criterion(real_out, real_label)</span><br><span class="line">        <span class="comment"># 噪声数值</span></span><br><span class="line">        z = torch.randn(x_num,<span class="number">28</span>*<span class="number">28</span>).to(device)</span><br><span class="line">        fake_x = G(z)</span><br><span class="line">        fake_out = D(fake_x)</span><br><span class="line">        d_loss_fake = criterion(fake_out, fake_label)</span><br><span class="line">        d_loss = d_loss_real + d_loss_fake</span><br><span class="line">        d_optimizer.zero_grad()</span><br><span class="line">        d_loss.backward()</span><br><span class="line">        d_optimizer.step()</span><br><span class="line">        <span class="comment"># 训练生成器</span></span><br><span class="line">        z = torch.randn(x_num,<span class="number">28</span>*<span class="number">28</span>).to(device)</span><br><span class="line">        fake_x = G(z)</span><br><span class="line">        fake_out = D(fake_x)</span><br><span class="line">        g_loss = criterion(fake_out, real_label)</span><br><span class="line">        g_optimizer.zero_grad()</span><br><span class="line">        g_loss.backward()</span><br><span class="line">        g_optimizer.step()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(step % <span class="number">50</span> == <span class="number">0</span>):</span><br><span class="line">            print(<span class="string">'Epoch: '</span>,epoch, <span class="string">'| train d_loss: %.4f'</span> % d_loss.data,<span class="string">'| train g_loss: %.4f'</span> % g_loss.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图展示</span></span><br><span class="line">z = torch.randn(x_num,<span class="number">28</span>*<span class="number">28</span>).to(device)</span><br><span class="line">x = z</span><br><span class="line">img = x.view(<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>)[<span class="number">3</span>].squeeze()</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.imshow(img.data.cpu().numpy())</span><br><span class="line">plt.show()</span><br><span class="line">x = G(z)</span><br><span class="line">img = x.view(<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>)[<span class="number">3</span>].squeeze()</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.imshow(img.data.cpu().numpy())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>一下左图是生成的随机噪声，右图是随机噪声经过生成器后的图片</p>
<p><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210519210954854.png" alt=""><img src="https://gitee.com/LXT2017/Picbed/raw/blogimg/noteimg/image-20210519211005641.png" alt=""></p>
<h2 id="九、DQN强化学习">九、DQN强化学习</h2>
<p>通过Q-Learning和神经网络结合，通过反馈可以使机器学得的效果越来越好，下面是简单的demo(有点小难，我还没理解)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">BATCH_SIZE = <span class="number">32</span></span><br><span class="line">LR = <span class="number">0.01</span></span><br><span class="line">EPSILON = <span class="number">0.9</span>  <span class="comment"># 最优选择动作百分比</span></span><br><span class="line">GAMMA = <span class="number">0.9</span>  <span class="comment"># 奖励递减参数</span></span><br><span class="line">TARGET_REPLACE_ITER = <span class="number">100</span>  <span class="comment"># Q 现实网络的更新频率</span></span><br><span class="line">MEMORY_CAPACITY = <span class="number">2000</span>  <span class="comment"># 记忆库大小</span></span><br><span class="line">env = gym.make(<span class="string">"CartPole-v0"</span>)  <span class="comment"># 立杆子游戏</span></span><br><span class="line">env = env.unwrapped</span><br><span class="line">N_ACTIONS = env.action_space.n  <span class="comment"># 杆子能做的动作</span></span><br><span class="line">N_STATES = env.observation_space.shape[<span class="number">0</span>]  <span class="comment"># 杆子能获取的环境信息数</span></span><br><span class="line">ENV_A_SHAPE = <span class="number">0</span> <span class="keyword">if</span> isinstance(env.action_space.sample(),</span><br><span class="line">                              int) <span class="keyword">else</span> env.action_space.sample().shape  <span class="comment"># to confirm the shape</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造DON（Deep Q Network)强化学习神经网络 现实网络 (Target Net) 估计网络 (Eval Net)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.fc1 = nn.Linear(N_STATES, <span class="number">10</span>)</span><br><span class="line">        self.fc1.weight.data.normal_(<span class="number">0</span>, <span class="number">0.1</span>)  <span class="comment"># initialization(初始化）</span></span><br><span class="line">        self.out = nn.Linear(<span class="number">10</span>, N_ACTIONS)</span><br><span class="line">        self.out.weight.data.normal_(<span class="number">0</span>, <span class="number">0.1</span>)  <span class="comment"># initialization(初始化）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        action_value = self.out(x)</span><br><span class="line">        <span class="keyword">return</span> action_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造DQN体系</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DQN</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 建立 target net 和 eval net 还有 memory</span></span><br><span class="line">        self.eval_net, self.target_net = Net(), Net()</span><br><span class="line">        self.learn_step_counter = <span class="number">0</span>  <span class="comment"># 用于 target 更新计时</span></span><br><span class="line">        self.memory_counter = <span class="number">0</span>  <span class="comment"># 记忆库记数</span></span><br><span class="line">        self.memory = np.zeros((MEMORY_CAPACITY, N_STATES * <span class="number">2</span> + <span class="number">2</span>))  <span class="comment"># 初始化记忆库</span></span><br><span class="line">        self.optimizer = torch.optim.Adam(self.eval_net.parameters(), lr=LR)</span><br><span class="line">        self.lose_func = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_action</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># 根据环境观测值选择动作的机制</span></span><br><span class="line">        x = torch.unsqueeze(torch.FloatTensor(x), <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 这里只输入一个 sample</span></span><br><span class="line">        <span class="keyword">if</span> np.random.uniform() &lt; EPSILON:  <span class="comment"># 选最优动作</span></span><br><span class="line">            actions_value = self.eval_net.forward(x)</span><br><span class="line">            action = torch.max(actions_value, <span class="number">1</span>)[<span class="number">1</span>].data.numpy()</span><br><span class="line">            action = action[<span class="number">0</span>] <span class="keyword">if</span> ENV_A_SHAPE == <span class="number">0</span> <span class="keyword">else</span> action.reshape(ENV_A_SHAPE)  <span class="comment"># return the argmax index</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            action = np.random.randint(<span class="number">0</span>, N_ACTIONS)</span><br><span class="line">            action = action <span class="keyword">if</span> ENV_A_SHAPE == <span class="number">0</span> <span class="keyword">else</span> action.reshape(ENV_A_SHAPE)</span><br><span class="line">        <span class="keyword">return</span> action</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_transition</span><span class="params">(self, s, a, r, s_)</span>:</span></span><br><span class="line">        <span class="comment"># 存储记忆</span></span><br><span class="line">        transition = np.hstack((s, [a, r], s_))</span><br><span class="line">        <span class="comment"># 如果记忆库满了, 就覆盖老数据</span></span><br><span class="line">        index = self.memory_counter % MEMORY_CAPACITY</span><br><span class="line">        self.memory[index, :] = transition</span><br><span class="line">        self.memory_counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># target 网络更新 学习记忆库中的记忆</span></span><br><span class="line">        <span class="keyword">if</span> self.learn_step_counter % TARGET_REPLACE_ITER == <span class="number">0</span>:</span><br><span class="line">            self.target_net.load_state_dict(self.eval_net.state_dict())</span><br><span class="line">        self.learn_step_counter += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 抽取记忆库中的批数据</span></span><br><span class="line">        sample_index = np.random.choice(MEMORY_CAPACITY, BATCH_SIZE)</span><br><span class="line">        b_memory = self.memory[sample_index, :]</span><br><span class="line">        b_s = torch.FloatTensor(b_memory[:, :N_STATES])</span><br><span class="line">        b_a = torch.LongTensor(b_memory[:, N_STATES:N_STATES + <span class="number">1</span>].astype(int))</span><br><span class="line">        b_r = torch.FloatTensor(b_memory[:, N_STATES + <span class="number">1</span>:N_STATES + <span class="number">2</span>])</span><br><span class="line">        b_s_ = torch.FloatTensor(b_memory[:, -N_STATES:])</span><br><span class="line">        <span class="comment"># 针对做过的动作b_a, 来选 q_eval 的值, (q_eval 原本有所有动作的值)</span></span><br><span class="line">        q_eval = self.eval_net(b_s).gather(<span class="number">1</span>, b_a)  <span class="comment"># shape (batch, 1)</span></span><br><span class="line">        q_next = self.target_net(b_s_).detach()  <span class="comment"># q_next 不进行反向传递误差, 所以 detach</span></span><br><span class="line">        q_target = b_r + GAMMA * q_next.max(<span class="number">1</span>)[<span class="number">0</span>]  <span class="comment"># shape (batch, 1)</span></span><br><span class="line">        loss = self.lose_func(q_eval, q_target)</span><br><span class="line">        <span class="comment"># 计算, 更新 eval net</span></span><br><span class="line">        self.optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        self.optimizer.step()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练 按照 Qlearning 的形式进行 off-policy 的更新. 我们进行回合制更新, 一个回合完了, 进入下一回合. 一直到他们将杆子立起来很久.</span></span><br><span class="line">dqn = DQN()</span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> range(<span class="number">400</span>):</span><br><span class="line">    s = env.reset()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        env.render()  <span class="comment"># 显示实验动画</span></span><br><span class="line">        a = dqn.choose_action(s)</span><br><span class="line">        <span class="comment"># 选动作, 得到环境反馈</span></span><br><span class="line">        s_, r, done, info = env.step(a)</span><br><span class="line">        <span class="comment"># 修改 reward, 使 DQN 快速学习</span></span><br><span class="line">        x, x_dot, theta, theta_dot = s_</span><br><span class="line">        r1 = (env.x_threshold - abs(x)) / env.x_threshold - <span class="number">0.8</span></span><br><span class="line">        r2 = (env.theta_threshold_radians - abs(theta)) / env.theta_threshold_radians - <span class="number">0.5</span></span><br><span class="line">        r = r1 + r2</span><br><span class="line">        <span class="comment"># 存记忆</span></span><br><span class="line">        dqn.store_transition(s, a, r, s_)</span><br><span class="line">        <span class="keyword">if</span> dqn.memory_counter &gt; MEMORY_CAPACITY:</span><br><span class="line">            dqn.learn()</span><br><span class="line">        <span class="keyword">if</span> done:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        s = s_</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql基础</title>
    <url>/posts/8a2dddd9.html</url>
    <content><![CDATA[<h3 id="一、数据库基本知识">一、数据库基本知识</h3>
<h4 id="1、数据库基本介绍">1、数据库基本介绍</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地进入可不输入-h命令,-u和-p后面没有空格！</span></span><br><span class="line">mysql [-h 服务器主机地址] -u用户名 -p密码</span><br><span class="line"><span class="comment"># 修改数据库密码</span></span><br><span class="line">mysqladmin -u用户名 -p密码 password 新密码;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>; </span><br><span class="line"><span class="comment"># 打开某个数据库</span></span><br><span class="line"><span class="keyword">use</span> dbname； </span><br><span class="line"><span class="comment"># 显示表mysql数据库中user表的列信息</span></span><br><span class="line"><span class="keyword">describe</span> <span class="keyword">user</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名;</span><br><span class="line"><span class="comment"># 删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] 数据库名;</span><br><span class="line"><span class="comment"># 显示数据库中所有的表</span></span><br><span class="line"><span class="keyword">show</span> 数据库名;</span><br><span class="line"><span class="comment"># 选择数据库</span></span><br><span class="line"><span class="keyword">use</span> 数据库名; </span><br><span class="line"></span><br><span class="line">exit; 退出Mysql</span><br><span class="line">? 命令关键词 : 寻求帮助</span><br><span class="line"><span class="comment">-- 表示注释</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="2、结构化查询语句分类">2、结构化查询语句分类</h4>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">解释</th>
<th style="text-align:center">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DDL(数据定义语言)</td>
<td style="text-align:center">定义和管理数据对象，如数据库，数据表等</td>
<td style="text-align:center">CREATE、DROP、ALTER</td>
</tr>
<tr>
<td style="text-align:center">DML(数据操作语言)</td>
<td style="text-align:center">用于操作数据库对象中所包含的数据</td>
<td style="text-align:center">INSERT、UPDATE、DELETE</td>
</tr>
<tr>
<td style="text-align:center">DQL(数据查询语言)</td>
<td style="text-align:center">用于查询数据库数据</td>
<td style="text-align:center">SELECT</td>
</tr>
<tr>
<td style="text-align:center">DCL(数据控制语言)</td>
<td style="text-align:center">用于管理数据库的语言，包括管理权限及数据更改</td>
<td style="text-align:center">GRANT、commit、rollback</td>
</tr>
</tbody>
</table>
<h4 id="3、数据类型和范围大小">3、数据类型和范围大小</h4>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">长度(取值范围)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">tinyint</td>
<td style="text-align:center">十分小的数据</td>
<td style="text-align:center">1字节</td>
</tr>
<tr>
<td style="text-align:center">smallint</td>
<td style="text-align:center">较小的数据</td>
<td style="text-align:center">2字节</td>
</tr>
<tr>
<td style="text-align:center">mediumint</td>
<td style="text-align:center">中等大小的数据</td>
<td style="text-align:center">3字节</td>
</tr>
<tr>
<td style="text-align:center">==int==</td>
<td style="text-align:center">标准整数(常用)</td>
<td style="text-align:center">4字节</td>
</tr>
<tr>
<td style="text-align:center">bigint</td>
<td style="text-align:center">较大的的整数</td>
<td style="text-align:center">8字节</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">单精度浮点数</td>
<td style="text-align:center">4字节</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">双精度浮点数</td>
<td style="text-align:center">8字节</td>
</tr>
<tr>
<td style="text-align:center">==decimal(m,d)==</td>
<td style="text-align:center">字符串形式的浮点数，涉及钱时使用</td>
<td style="text-align:center">m字节</td>
</tr>
<tr>
<td style="text-align:center">char(m)</td>
<td style="text-align:center">固定长度字符串，检索快但浪费空间，0&lt;=m&lt;=255</td>
<td style="text-align:center">m字符</td>
</tr>
<tr>
<td style="text-align:center">==varchar(m)==</td>
<td style="text-align:center">可变字符串，0&lt;=m&lt;=65535(常用)</td>
<td style="text-align:center">变长数</td>
</tr>
<tr>
<td style="text-align:center">tinytext</td>
<td style="text-align:center">微型文本串</td>
<td style="text-align:center">2^8-1</td>
</tr>
<tr>
<td style="text-align:center">==text==</td>
<td style="text-align:center">文本串</td>
<td style="text-align:center">2^16-1</td>
</tr>
<tr>
<td style="text-align:center">==DATETIME==</td>
<td style="text-align:center">时间格式，YYYY-MM-DD HH:mm:ss</td>
<td style="text-align:center">1000-01-01 00:00:00~9999-12-31 23:59:59</td>
</tr>
<tr>
<td style="text-align:center">==TIMESTAMP==</td>
<td style="text-align:center">时间戳，从1970开始的毫秒数</td>
<td style="text-align:center">197010101000000~2037年</td>
</tr>
</tbody>
</table>
<h4 id="4、创建数据表">4、创建数据表</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] <span class="string">`表名`</span>(</span><br><span class="line">   <span class="string">'字段名1'</span> 列类型 [属性][索引][注释],</span><br><span class="line">   <span class="string">'字段名2'</span> 列类型 [属性][索引][注释],</span><br><span class="line">  <span class="comment">#...</span></span><br><span class="line">   <span class="string">'字段名n'</span> 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure>
<h4 id="5、数据表字段属性">5、数据表字段属性</h4>
<p><strong>UnSigned</strong></p>
<ul>
<li>
<p>无符号的</p>
</li>
<li>
<p>声明该数据列不允许负数</p>
</li>
</ul>
<p><strong>ZEROFILL</strong></p>
<ul>
<li>0填充的</li>
<li>不足位数的用0来填充 , 如int(3),5则为005</li>
</ul>
<p><strong>Auto_Increment</strong></p>
<ul>
<li>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</li>
<li>通常用于设置主键 , 且为整数类型</li>
<li>可定义起始值和步长
<ul>
<li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li>
<li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li>
</ul>
</li>
</ul>
<p><strong>NULL 和 NOT NULL</strong></p>
<ul>
<li>默认为NULL , 即没有插入该列的数值</li>
<li>如果设置为NOT NULL , 则该列必须有值</li>
</ul>
<p><strong>DEFAULT</strong></p>
<ul>
<li>默认的，用于设置默认值</li>
<li>例如,性别字段,默认为&quot;男&quot; , 否则为 “女” ; 若无指定该列的值 , 则默认值为&quot;男&quot;的值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*用户表*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户编号'</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line"><span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line"><span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line"><span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生日'</span>,</span><br><span class="line"><span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line"><span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">primary <span class="keyword">key</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据表的定义</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="comment">-- 显示表结构</span></span><br><span class="line">DESC user;  <span class="comment">-- 设置严格检查模式(不能容错了)SET sql_mode='STRICT_TRANS_TABLES';</span></span><br></pre></td></tr></table></figure>
<p>对于Mysql的引擎，现在一般使用InnoDB，而MySql的一些默认设置都在<code>my.ini</code>文件中设置</p>
<ul>
<li>适用 MyISAM : 节约空间及相应速度</li>
<li>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</li>
</ul>
<h4 id="6、修改与删除数据库">6、修改与删除数据库</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名 <span class="keyword">RENAME</span> <span class="keyword">AS</span> 新表名</span><br><span class="line"><span class="comment"># 添加字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span>字段名 列属性[属性]</span><br><span class="line"><span class="comment"># 修改字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 列类型[属性]</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CHANGE</span> 旧字段名 新字段名 列属性[属性]</span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名</span><br><span class="line"><span class="comment"># 删除数据表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 表名</span><br></pre></td></tr></table></figure>
<p>==注：==Mysql仅在windows下大小写不敏感！</p>
<h3 id="二、MySql数据管理">二、MySql数据管理</h3>
<h4 id="1、外键">1、外键</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主表已经在第一章写明</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`usertype`</span> (</span><br><span class="line"><span class="string">`type`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户类型'</span>,</span><br><span class="line"><span class="string">`userid`</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="string">`FK_userid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`userid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建外键方式二 : 创建子表完毕后,修改子表添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`usertype`</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`FK_userid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`userid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>);</span><br></pre></td></tr></table></figure>
<p>再删除表时，要先删除有外键的表，再删除主表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> usertype <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> FK_gradeid;</span><br><span class="line"><span class="comment">-- 发现执行完上面的,索引还在,所以还要删除索引</span></span><br><span class="line"><span class="comment">-- 注:这个索引是建立外键的时候默认生成的</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> usertype <span class="keyword">DROP</span> <span class="keyword">INDEX</span> FK_gradeid;</span><br></pre></td></tr></table></figure>
<h4 id="2、DML数据操作语言">2、DML数据操作语言</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名[(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>,...)] <span class="keyword">VALUES</span>(<span class="string">'值1'</span>,<span class="string">'值2'</span>,<span class="string">'值3'</span>)</span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> column_name=<span class="keyword">value</span> [,column_name2=value2,...] [WHEREcondition];</span><br><span class="line"><span class="comment"># condition为筛选条件 , 如不指定则删除该表的所有列数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> condition];</span><br><span class="line"><span class="comment"># TRUNCATE用于完全清空表数据,但表结构,索引,约束等不变;</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] table_name;</span><br></pre></td></tr></table></figure>
<p><code>TRUNCATE</code>和<code>DELETE</code>异同：</p>
<p><strong>相同</strong> : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p>
<p><strong>不同</strong> :</p>
<ul>
<li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li>
</ul>
<ul>
<li>使用TRUNCATE TABLE不会对事务有影响</li>
</ul>
<h4 id="3、DQL数据查询语言">3、DQL数据查询语言</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意 : [ ] 括号代表可选的 , &#123; &#125;括号代表必选得，*指查询所有，不推荐</span></span><br><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;* | table.* | [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">  [<span class="keyword">left</span> | <span class="keyword">right</span> | <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">  [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">  [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">  [<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,]<span class="keyword">row_count</span> | row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line">   <span class="comment">-- 指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>As</code>字句作为别名，查询指定字段，<code>DISTINCT</code>去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'用户'</span>,<span class="keyword">id</span>) <span class="keyword">AS</span> 新用户名 <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sex <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @@auto_increment_increment; <span class="comment">-- 查询自增步长</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>(); <span class="comment">-- 查询版本号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>*<span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果; <span class="comment">-- 表达式</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>where</code>条件语句：<code>AND、OR、NOT</code></li>
<li>模糊查询:比较操作符</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">操作符名称</th>
<th style="text-align:center">语法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IS NULL</td>
<td style="text-align:center">a IS NULL</td>
<td style="text-align:center">若操作符为NULL，则结果为真</td>
</tr>
<tr>
<td style="text-align:center">IS NOT NULL</td>
<td style="text-align:center">a IS NOT NULL</td>
<td style="text-align:center">若操作符不为NULL，则结果为真</td>
</tr>
<tr>
<td style="text-align:center">BETWEEN</td>
<td style="text-align:center">a BETWEEN b AND c</td>
<td style="text-align:center">若 a 范围在 b 与 c 之间，则结果为真</td>
</tr>
<tr>
<td style="text-align:center">LIKE</td>
<td style="text-align:center">a LIKE b</td>
<td style="text-align:center">SQL 模式匹配，若a匹配b，则结果为真</td>
</tr>
<tr>
<td style="text-align:center">IN</td>
<td style="text-align:center">a IN (a1，a2，a3，…)</td>
<td style="text-align:center">SQL 模式匹配，若a匹配b，则结果为真</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="comment">-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)</span></span><br><span class="line"><span class="comment">-- 查询姓刘用户的姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'刘%'</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>连接查询:<code>join</code>对比</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7963c5409eeac83b1134262da55d7a38.png" alt="sql-join"></p>
<ul>
<li>排序和分页、子查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="string">`user`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> birthday <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h3 id="三、MySql函数">三、MySql函数</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">-- ================ 内置函数 ================</span></span><br><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line">abs(x)            <span class="comment">-- 绝对值 abs(-10.9) = 10</span></span><br><span class="line">format(x, d)    <span class="comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span><br><span class="line">ceil(x)            <span class="comment">-- 向上取整 ceil(10.1) = 11</span></span><br><span class="line">floor(x)        <span class="comment">-- 向下取整 floor (10.1) = 10</span></span><br><span class="line">round(x)        <span class="comment">-- 四舍五入去整</span></span><br><span class="line">mod(m, n)        <span class="comment">-- m%n m mod n 求余 10%3=1</span></span><br><span class="line">pi()            <span class="comment">-- 获得圆周率</span></span><br><span class="line">pow(m, n)        <span class="comment">-- m^n</span></span><br><span class="line">sqrt(x)            <span class="comment">-- 算术平方根</span></span><br><span class="line">rand()            <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">truncate</span>(x, d)    <span class="comment">-- 截取d位小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line"><span class="keyword">now</span>(), <span class="keyword">current_timestamp</span>();     <span class="comment">-- 当前日期时间</span></span><br><span class="line">current_date();                    <span class="comment">-- 当前日期</span></span><br><span class="line">current_time();                    <span class="comment">-- 当前时间</span></span><br><span class="line">date('yyyy-mm-dd hh:ii:ss');    <span class="comment">-- 获取日期部分</span></span><br><span class="line">time('yyyy-mm-dd hh:ii:ss');    <span class="comment">-- 获取时间部分</span></span><br><span class="line">date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    <span class="comment">-- 格式化时间</span></span><br><span class="line">unix_timestamp();                <span class="comment">-- 获得unix时间戳</span></span><br><span class="line">from_unixtime();                <span class="comment">-- 从时间戳获得时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line">length(string)            <span class="comment">-- string长度，字节</span></span><br><span class="line">char_length(string)        <span class="comment">-- string的字符个数</span></span><br><span class="line">substring(str, position [,length])        <span class="comment">-- 从str的position开始,取length个字符</span></span><br><span class="line"><span class="keyword">replace</span>(<span class="keyword">str</span> ,search_str ,replace_str)    <span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line"><span class="keyword">instr</span>(<span class="keyword">string</span> ,<span class="keyword">substring</span>)    <span class="comment">-- 返回substring首次在string中出现的位置</span></span><br><span class="line"><span class="keyword">concat</span>(<span class="keyword">string</span> [,...])    <span class="comment">-- 连接字串</span></span><br><span class="line"><span class="keyword">charset</span>(<span class="keyword">str</span>)            <span class="comment">-- 返回字串字符集</span></span><br><span class="line"><span class="keyword">lcase</span>(<span class="keyword">string</span>)            <span class="comment">-- 转换成小写</span></span><br><span class="line"><span class="keyword">left</span>(<span class="keyword">string</span>, <span class="keyword">length</span>)    <span class="comment">-- 从string2中的左边起取length个字符</span></span><br><span class="line"><span class="keyword">load_file</span>(file_name)    <span class="comment">-- 从文件读取内容</span></span><br><span class="line"><span class="keyword">locate</span>(<span class="keyword">substring</span>, <span class="keyword">string</span> [,start_position])    <span class="comment">-- 同instr,但可指定开始位置</span></span><br><span class="line"><span class="keyword">lpad</span>(<span class="keyword">string</span>, <span class="keyword">length</span>, <span class="keyword">pad</span>)    <span class="comment">-- 重复用pad加在string开头,直到字串长度为length</span></span><br><span class="line"><span class="keyword">ltrim</span>(<span class="keyword">string</span>)            <span class="comment">-- 去除前端空格</span></span><br><span class="line"><span class="keyword">repeat</span>(<span class="keyword">string</span>, <span class="keyword">count</span>)    <span class="comment">-- 重复count次</span></span><br><span class="line">rpad(<span class="keyword">string</span>, <span class="keyword">length</span>, <span class="keyword">pad</span>)    <span class="comment">--在str后用pad补充,直到长度为length</span></span><br><span class="line"><span class="keyword">rtrim</span>(<span class="keyword">string</span>)            <span class="comment">-- 去除后端空格</span></span><br><span class="line"><span class="keyword">strcmp</span>(string1 ,string2)    <span class="comment">-- 逐字符比较两字串大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="keyword">count</span>()</span><br><span class="line"><span class="keyword">sum</span>();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其他常用函数</span></span><br><span class="line">md5();</span><br><span class="line">default();</span><br></pre></td></tr></table></figure>
<p>针对<code>count()</code>函数来说，更推荐使用<code>count(1)</code>而不是<code>count(*)</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。</span></span><br><span class="line"><span class="comment">-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</span></span><br><span class="line"><span class="comment">-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</span></span><br><span class="line"><span class="comment">-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">下面它们之间的一些对比：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1）在表没有主键时，count(1)比count(*)快</span></span><br><span class="line"><span class="comment">2）有主键时，主键作为计算条件，count(主键)效率最高；</span></span><br><span class="line"><span class="comment">3）若表格只有一个字段，则count(*)效率较高。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="四、事务">四、事务</h3>
<p>事务四大特性：<strong>ACID</strong></p>
<p><strong>原子性(Atomic)</strong></p>
<ul>
<li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
</ul>
<p><strong>一致性(Consist)</strong></p>
<ul>
<li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li>
</ul>
<p><strong>隔离性(Isolated)</strong></p>
<ul>
<li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li>
</ul>
<p><strong>持久性(Durable)</strong></p>
<ul>
<li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用set语句来改变自动提交模式</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>;   <span class="comment">/*关闭*/</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>;   <span class="comment">/*开启*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意:</span></span><br><span class="line"><span class="comment">--- 1.MySQL中默认是自动提交</span></span><br><span class="line"><span class="comment">--- 2.使用事务时应先关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开始一个事务,标记事务的起始点</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交一个事务给数据库</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将事务回滚,数据回到本次事务的初始状态</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还原MySQL数据库的自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit =<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 删除保存点</span></span><br></pre></td></tr></table></figure>
<h3 id="五、索引">五、索引</h3>
<h4 id="1、索引概述">1、索引概述</h4>
<p><strong>索引的作用</strong></p>
<ul>
<li>提高查询速度</li>
<li>确保数据的唯一性</li>
<li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li>
<li>使用分组和排序子句进行数据</li>
</ul>
<p><strong>索引分类</strong></p>
<ul>
<li>主键索引 (Primary Key)</li>
<li>唯一索引 (Unique)</li>
<li>常规索引 (Index)</li>
<li>全文索引 (FullText)</li>
</ul>
<h4 id="2、主键索引">2、主键索引</h4>
<p>主键 : 某一个属性组能唯一标识一条记录</p>
<p>特点 :</p>
<ul>
<li>最常见的索引类型</li>
<li>确保数据记录的唯一性</li>
<li>确定特定数据记录在数据库中的位置</li>
</ul>
<h4 id="3、唯一索引">3、唯一索引</h4>
<p>作用 : 避免同一个表中某数据列中的值重复</p>
<p>与主键索引的区别</p>
<ul>
<li>主键索引只能有一个</li>
<li>唯一索引可能有多个</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 举例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Grade`</span>(</span><br><span class="line">  <span class="string">`GradeID`</span> <span class="built_in">INT</span>(<span class="number">11</span>) AUTO_INCREMENT PRIMARYKEY,</span><br><span class="line">  <span class="string">`GradeName`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">   <span class="comment">-- 或 UNIQUE KEY `GradeID` (`GradeID`)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="4、常规索引">4、常规索引</h4>
<p>作用 : 快速定位特定数据</p>
<p>注意 :</p>
<ul>
<li>index 和 key 关键字都可以设置常规索引</li>
<li>应加在查询找条件的字段</li>
<li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`result`</span>(</span><br><span class="line">   <span class="comment">-- 省略一些代码</span></span><br><span class="line">  <span class="keyword">INDEX</span>/<span class="keyword">KEY</span> <span class="string">`ind`</span> (<span class="string">`studentNo`</span>,<span class="string">`subjectNo`</span>) <span class="comment">-- 创建表时添加</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 创建后添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`result`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> <span class="string">`ind`</span>(<span class="string">`studentNo`</span>,<span class="string">`subjectNo`</span>);</span><br></pre></td></tr></table></figure>
<h4 id="5、全文索引">5、全文索引</h4>
<p>作用 : 快速定位特定数据</p>
<p>注意 :</p>
<ul>
<li>只能用于MyISAM类型的数据表</li>
<li>只能用于CHAR , VARCHAR , TEXT数据列类型</li>
<li>适合大型数据集</li>
</ul>
<h4 id="6、索引测试">6、索引测试</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 新建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`app_user`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户昵称'</span>,</span><br><span class="line"><span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>,</span><br><span class="line"><span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'性别（0:男；1：女）'</span>,</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line"><span class="string">`age`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line"><span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'app用户表'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入100w数据</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mock_data;</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i &lt; num DO</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(<span class="string">`name`</span>, <span class="string">`email`</span>, <span class="string">`phone`</span>, <span class="string">`gender`</span>, <span class="string">`password`</span>, <span class="string">`age`</span>)</span><br><span class="line">   <span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">'用户'</span>, i), <span class="string">'24736743@qq.com'</span>, <span class="keyword">CONCAT</span>(<span class="string">'18'</span>, <span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*(<span class="number">999999999</span><span class="number">-100000000</span>)+<span class="number">100000000</span>)),<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">2</span>),<span class="keyword">UUID</span>(), <span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">100</span>));</span><br><span class="line">  <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">RETURN i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SELECT</span> mock_data();</span><br></pre></td></tr></table></figure>
<p><strong>索引效率测试</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- CMD命令行内的语句结束符可以为 ";", "\G", "\g"，仅影响显示结果。</span></span><br><span class="line"><span class="comment">-- 无索引</span></span><br><span class="line"><span class="comment">-- 查看耗时，本地我用了6+s</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'用户9999'</span>; </span><br><span class="line"><span class="comment">-- 查询信息，使用EXPLAIN关键字</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'用户9999'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有索引时</span></span><br><span class="line"><span class="comment">-- 先创建索引，需要花一段时间</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_app_user_name <span class="keyword">ON</span> app_user(<span class="keyword">name</span>);</span><br><span class="line"><span class="comment">-- 测试发现，只查了一行，速度极快</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>
<p>==注==</p>
<ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表建议不要加索引</li>
<li>索引一般应加在查找条件的字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类</span></span><br><span class="line">hash类型的索引：查询单条快，范围查询慢</span><br><span class="line">btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不同的存储引擎支持的索引类型也不一样</span></span><br><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</span><br></pre></td></tr></table></figure>
<h3 id="六、权限管理">六、权限管理</h3>
<h4 id="1、用户管理">1、用户管理</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 用户和权限管理 */</span></span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加用户 CREATE USER shawn IDENTIFIED BY 'shawn'</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] 密码(字符串)</span><br><span class="line">  - 必须拥有mysql数据库的全局<span class="keyword">CREATE</span> <span class="keyword">USER</span>权限，或拥有<span class="keyword">INSERT</span>权限。</span><br><span class="line">  - 只能创建用户，不能赋予权限。</span><br><span class="line">  - 用户名，注意引号：如 <span class="string">'user_name'</span>@<span class="string">'192.168.1.1'</span></span><br><span class="line">  - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">  - 要在纯文本中指定密码，需忽略<span class="keyword">PASSWORD</span>关键词。要把密码指定为由<span class="keyword">PASSWORD</span>()函数返回的混编值，需包含关键字<span class="keyword">PASSWORD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名用户 RENAME USER shawn TO shawn1</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> old_user <span class="keyword">TO</span> new_user</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="comment">-- alter user'shawn'@'%' IDENTIFIED BY 'shawn'; </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span><span class="string">'用户名'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'新密码'</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户 DROP USER shawn</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分配权限/添加用户</span></span><br><span class="line"><span class="comment">-- 默认是没有GRANT权限的</span></span><br><span class="line"><span class="comment">-- GRANT all privileges ON *.* TO shawn</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">TO</span> 用户名 [<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] <span class="string">'password'</span>]</span><br><span class="line">  - <span class="keyword">all</span> <span class="keyword">privileges</span> 表示所有权限</span><br><span class="line">  - *.* 表示所有库的所有表</span><br><span class="line">  - 库名.表名 表示某库下面的某表</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看权限   SHOW GRANTS FOR shawn;</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 用户名</span><br><span class="line">   <span class="comment">-- 查看当前用户权限</span></span><br><span class="line">  <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span>; 或 <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="keyword">CURRENT_USER</span>; 或 <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="keyword">CURRENT_USER</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤消权限</span></span><br><span class="line"><span class="comment">-- REVOKE all privileges ON *.* FROM shawn;</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">FROM</span> 用户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span>, <span class="keyword">GRANT</span> <span class="keyword">OPTION</span> <span class="keyword">FROM</span> 用户名    <span class="comment">-- 撤销所有权限</span></span><br></pre></td></tr></table></figure>
<p><strong>权限解释</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 权限列表</span></span><br><span class="line">ALL [PRIVILEGES]    <span class="comment">-- 设置除GRANT OPTION之外的所有简单权限</span></span><br><span class="line"><span class="keyword">ALTER</span>    <span class="comment">-- 允许使用ALTER TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> ROUTINE    <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span>    <span class="comment">-- 允许使用CREATE TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> ROUTINE    <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLES</span>        <span class="comment">-- 允许使用CREATE TEMPORARY TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>        <span class="comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>        <span class="comment">-- 允许使用CREATE VIEW</span></span><br><span class="line"><span class="keyword">DELETE</span>    <span class="comment">-- 允许使用DELETE</span></span><br><span class="line"><span class="keyword">DROP</span>    <span class="comment">-- 允许使用DROP TABLE</span></span><br><span class="line"><span class="keyword">EXECUTE</span>        <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line"><span class="keyword">FILE</span>    <span class="comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span><br><span class="line"><span class="keyword">INDEX</span>     <span class="comment">-- 允许使用CREATE INDEX和DROP INDEX</span></span><br><span class="line"><span class="keyword">INSERT</span>    <span class="comment">-- 允许使用INSERT</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span>        <span class="comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span><br><span class="line">PROCESS     <span class="comment">-- 允许使用SHOW FULL PROCESSLIST</span></span><br><span class="line"><span class="keyword">REFERENCES</span>    <span class="comment">-- 未被实施</span></span><br><span class="line">RELOAD    <span class="comment">-- 允许使用FLUSH</span></span><br><span class="line"><span class="keyword">REPLICATION</span> <span class="keyword">CLIENT</span>    <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line"><span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span>    <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line"><span class="keyword">SELECT</span>    <span class="comment">-- 允许使用SELECT</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>    <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VIEW</span>    <span class="comment">-- 允许使用SHOW CREATE VIEW</span></span><br><span class="line"><span class="keyword">SHUTDOWN</span>    <span class="comment">-- 允许使用mysqladmin shutdown</span></span><br><span class="line">SUPER    <span class="comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span><br><span class="line"><span class="keyword">UPDATE</span>    <span class="comment">-- 允许使用UPDATE</span></span><br><span class="line"><span class="keyword">USAGE</span>    <span class="comment">-- “无权限”的同义词</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">OPTION</span>    <span class="comment">-- 允许授予权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表维护 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析和存储表的关键字分布</span></span><br><span class="line"><span class="keyword">ANALYZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> 表名 ...</span><br><span class="line"><span class="comment">-- 检查一个或多个表是否有错误</span></span><br><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [<span class="keyword">option</span>] ...</span><br><span class="line"><span class="keyword">option</span> = &#123;<span class="keyword">QUICK</span> | <span class="keyword">FAST</span> | <span class="keyword">MEDIUM</span> | <span class="keyword">EXTENDED</span> | <span class="keyword">CHANGED</span>&#125;</span><br><span class="line"><span class="comment">-- 整理数据文件的碎片</span></span><br><span class="line"><span class="keyword">OPTIMIZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>
<h4 id="2、MySql备份">2、MySql备份</h4>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 导出</span></span><br><span class="line">1. 导出一张表 <span class="comment">-- mysqldump -uroot -p123456 school student &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">2. 导出多张表 <span class="comment">-- mysqldump -uroot -p123456 school student result &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span><br><span class="line">3. 导出所有表 <span class="comment">-- mysqldump -uroot -p123456 school &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">4. 导出一个库 <span class="comment">-- mysqldump -uroot -p123456 -B school &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line"></span><br><span class="line">可以-w携带备份条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line">1. 在登录mysql的情况下：<span class="comment">-- source D:/a.sql</span></span><br><span class="line">　　source 备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>＜img＞标签src缓存问题</title>
    <url>/posts/d39ecf00.html</url>
    <content><![CDATA[<h4 id="问题描述：">问题描述：</h4>
<p>最近在使用vue做目标检测算法可视化的时候发现了一个问题，我在前端传入原始图片到后端，经过后端算法检测后生成检测图片，前端vue直接调用该图片路径。本来想着输入不同图片，后端会不断覆盖result.jpg，最终前端也会实时变化，但是最终结果出现了意外，如图后连输入图不管如何变化，结果图都是同一张图片。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//html部分</span></span><br><span class="line">&lt;el-image <span class="class"><span class="keyword">class</span></span>=<span class="string">"originImg"</span> :src=<span class="string">"resulturl"</span>/&gt;</span><br><span class="line"><span class="comment">//js部分</span></span><br><span class="line"><span class="keyword">this</span>.resulturl=<span class="string">"http://localhost:5000/static/images/result.jpg"</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210430142255885.png" alt="在这里插入图片描述"></p>
<h4 id="问题原因">问题原因</h4>
<p>因为src后面的请求路径不变，所以浏览器就认为是同一个图片，就不会重新发送请求，导致获得的一直是第一张缓存图片。</p>
<blockquote>
<p>浏览器缓存知识：<a href="https://www.cnblogs.com/chengxs/p/10396066.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxs/p/10396066.html</a></p>
</blockquote>
<h4 id="解决方法">解决方法</h4>
<p>因为浏览器缓存的img是根据scr属性的，只要告诉浏览器这个图片和原来的缓存图片不一样浏览器就会重新进行请求了，即在请求图片后面添加<code>&quot;?tempid=&quot;+Math.random()</code>字符串。比如我的，成功解决。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.resulturl=<span class="string">"http://localhost:5000/static/images/result.jpg?tempid="</span>+<span class="built_in">Math</span>.random();</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH原理与使用</title>
    <url>/posts/ec679095.html</url>
    <content><![CDATA[<h2 id="一、SSH介绍">一、SSH介绍</h2>
<p>SSH是Secure Shell Protocol的简写，用于加密两台计算机之间的通信，并且支持各种身份验证机制。SSH先对联机数据包通过加密技术进行加密处理，加密后在进行数据传输。确保了传递的数据安全。</p>
<a id="more"></a>
<ul>
<li>SSH是安全的加密协议，用于远程连接linux服务器。</li>
<li>SSH默认端口是22，安全协议版本SSHv2，除了2之外还有SSHv1（有漏洞）。</li>
<li>SSH服务端主要包含两个服务功能SSH远程连接和SFTP服务。</li>
<li>Linux SSH客户端包含ssh远程连接命令，以及远程拷贝scp命令等。</li>
</ul>
<p>而SSH 的软件架构是服务器-客户端模式（Server - Client）。在这个架构中，SSH 软件分成两个部分：向服务器发出请求的部分，称为客户端（client），OpenSSH 的实现为 ssh；接收客户端发出的请求的部分，称为服务器（server），OpenSSH 的实现为 sshd。</p>
<h2 id="二、SSH登录">二、SSH登录</h2>
<h3 id="1、基本用法">1、基本用法</h3>
<p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># user指的是你远程主机的名字，host指的是ip或者局域网的主机名</span></span><br><span class="line">ssh user@host</span><br><span class="line"><span class="comment"># 如果本地用户名与远程用户名一致，登录时可以省略用户名。</span></span><br><span class="line">ssh host</span><br><span class="line"><span class="comment">#SSH的默认端口是22，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口，注意端口开放。</span></span><br><span class="line">ssh -p 2222 user@hostSSH</span><br></pre></td></tr></table></figure>
<h3 id="2、口令登录">2、口令登录</h3>
<p>SSH之所以能够保证安全，原因在于它采用了公钥加密。整个过程是这样的：</p>
<ol>
<li>远程主机收到用户的登录请求，把自己的公钥发给用户。</li>
<li>用户使用这个公钥，将登录密码加密后，发送回来。</li>
<li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li>
</ol>
<p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/1739730?fr=aladdin" target="_blank" rel="noopener">&quot;中间人攻击&quot;</a>（Man-in-the-middle attack）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure>
<p>第一次登录对方主机，系统会出现一个警告提示，意思是无法确认远程主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？经过用户的考虑后接受，之后进行口令的输入，如果密码正确，就可以登录了。当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p>
<h3 id="3、公钥登录">3、公钥登录</h3>
<p>使用密码登录，每次都必须输入密码，非常麻烦。SSH还提供了公钥登录，可以省去输入密码的步骤。</p>
<p>所谓&quot;公钥登录&quot;，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>
<p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#程序会询问一系列问题，然后生成密钥，默认rsa算法</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment">#通常做法是使用-t参数，指定密钥的加密算法</span></span><br><span class="line">ssh-keygen -t dsa</span><br></pre></td></tr></table></figure>
<p>执行<code>ssh-keygen</code>命令以后，会出现第一个问题，询问密钥保存的文件名，默认是<code>~/.ssh/id_rsa</code>文件，这个是私钥的文件名，对应的公钥文件<code>~/.ssh/id_rsa.pub</code>是自动生成的。用户的密钥一般都放在主目录的<code>.ssh</code>目录里面。</p>
<p>生成密钥以后，公钥必须上传到服务器，才能使用公钥登录。</p>
<p><strong>手动上传公钥</strong></p>
<p>OpenSSH 规定，用户公钥保存在服务器的<code>~/.ssh/authorized_keys</code>文件。你要以哪个用户的身份登录到服务器，密钥就必须保存在该用户主目录的<code>~/.ssh/authorized_keys</code>文件。只要把公钥添加到这个文件之中，就相当于公钥上传到服务器了。每个公钥占据一行。如果该文件不存在，可以手动创建。</p>
<p><strong><code>ssh-copy-id</code>命令：自动上传公钥</strong></p>
<p>OpenSSH 自带一个<code>ssh-copy-id</code>命令，可以自动将公钥拷贝到远程服务器的<code>~/.ssh/authorized_keys</code>文件。如果<code>~/.ssh/authorized_keys</code>文件不存在，<code>ssh-copy-id</code>命令会自动创建该文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要把工作目录切换到~/.ssh/下</span></span><br><span class="line">ssh-copy-id -i id_rsa user@host</span><br></pre></td></tr></table></figure>
<p>上面命令中，<code>-i</code>参数用来指定公钥文件，<code>user</code>是所要登录的账户名，<code>host</code>是服务器地址。如果省略用户名，默认为当前的本机用户名。执行完该命令，公钥就会拷贝到服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SSH 就会自动采用密钥登录，不再提示输入密码。</span></span><br><span class="line">ssh user@host</span><br></pre></td></tr></table></figure>
<p>从此ssh登录，为了安全性就不需要密码登录了，具体方法就是打开服务器 sshd 的配置文件<code>/etc/ssh/sshd_config</code>，将<code>PasswordAuthentication</code>这一项设为<code>no</code>，最后重启sshd。</p>
<h2 id="三、SSH端口转发">三、SSH端口转发</h2>
<h3 id="1、动态转发">1、动态转发</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -D <span class="built_in">local</span>-port tunnel-host [-N]</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">ssh -D 8080 user@host</span><br></pre></td></tr></table></figure>
<p>上面命令中，<code>-D</code>表示动态转发，<code>local-port</code>是本地端口，<code>tunnel-host</code>是 SSH 服务器，<code>-N</code>表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。</p>
<p>SSH会建立一个socket，去监听本地的端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果某个本地端口原来是一个不加密端口，现在将变成一个加密端口。</p>
<h3 id="2、本地转发">2、本地转发</h3>
<p>本地转发（local forwarding）指的是，SSH 服务器作为中介的跳板机，建立本地计算机与特定目标网站之间的加密连接。本地转发是在本地计算机的 SSH 客户端建立的转发规则。</p>
<p>它会指定一个本地端口（local-port），所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host），然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L <span class="built_in">local</span>-port:target-host:target-port tunnel-host [-N] [-f]</span><br></pre></td></tr></table></figure>
<p>上面命令中，<code>-L</code>参数表示本地转发，<code>local-port</code>是本地端口，<code>target-host</code>是你想要访问的目标服务器，<code>target-port</code>是目标服务器的端口，<code>tunnel-host</code>是 SSH 跳板机。<code>-N</code>参数表示不在 SSH 跳板机执行远程命令，让 SSH 只充当隧道。另外还有一个<code>-f</code>参数表示 SSH 连接在后台运行。</p>
<p>举例来说，现在有一台 SSH 跳板机<code>root@10.16.22.123</code>，我们可以通过本地访问<code>http://localhost:16006</code>即可访问到跳板机的<code>127.0.0.1:6006</code>端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本机运行</span></span><br><span class="line">ssh -L 16006:127.0.0.1:6006 root@10.16.22.123</span><br></pre></td></tr></table></figure>
<h3 id="3、远程端口转发">3、远程端口转发</h3>
<p>远程端口指的是在远程 SSH 服务器建立的转发规则。</p>
<p>这种场景比较特殊，主要针对内网的情况。本地计算机在外网，SSH 跳板机和目标服务器都在内网，而且本地计算机无法访问内网之中的 SSH 跳板机，但是 SSH 跳板机可以访问本机计算机。</p>
<p>由于本机无法访问内网 SSH 跳板机，就无法从外网发起 SSH 隧道，建立端口转发。必须反过来，从 SSH 跳板机发起隧道，建立端口转发，这时就形成了远程端口转发。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -R <span class="built_in">local</span>-port:target-host:target-port <span class="built_in">local</span> [-N] [-f]</span><br></pre></td></tr></table></figure>
<p>上面的命令，首先需要注意，不是在本机执行的，而是在 SSH 跳板机执行的，从跳板机去连接本地计算机。<code>-R</code>参数表示远程端口转发，<code>local-port</code>是本地计算机的端口，<code>target-host</code>和<code>target-port</code>是目标服务器(内网机器)及其端口，<code>local</code>是本地计算机。</p>
<p>举例来说，目标服务器在内网但可以访问外网，而跳板机不能直接访问内网，这时候就需要用远程端口转发，即可以直接使用跳板机访问内网</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#内网机器运行，将内网服务器的22端口转发到跳板机的2222端口</span></span><br><span class="line">ssh -R 2222:localhost:22 root@114.215.200.71 -N -f</span><br><span class="line"><span class="comment">#在跳板机进行登录，即可访问内网目标服务器，注意端口开放，以及用户名的修改，localhost不变，其中若因为网络问题断线，可以下载autossh</span></span><br><span class="line">ssh shawn@localhost -p 2222</span><br></pre></td></tr></table></figure>
<h2 id="四、SSH其他命令">四、SSH其他命令</h2>
<h3 id="1、scp命令">1、scp命令</h3>
<p><code>scp</code>是 SSH 提供的一个客户端程序，用来在两台主机之间加密传送文件（即复制文件）。<code>scp</code>主要用于以下三种复制操作：</p>
<ul>
<li>本地复制到远程。</li>
<li>远程复制到本地。</li>
<li>两个远程系统之间的复制。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">scp <span class="built_in">source</span> destination</span><br><span class="line"><span class="comment">#上传design.tar.gz到服务器/shawn目录下,也可以反过来</span></span><br><span class="line">scp design.tar.gz root@114.215.200.70:/shawn</span><br><span class="line"><span class="comment">#上传目录</span></span><br><span class="line">scp -r 目录 用户名@ip:服务器绝对路径目录</span><br></pre></td></tr></table></figure>
<h3 id="2、sftp-命令">2、sftp 命令</h3>
<p><code>sftp</code>是 SSH 提供的一个客户端应用程序，主要用来安全地访问 FTP。因为 FTP 是不加密协议，很不安全，<code>sftp</code>就相当于将 FTP 放入了 SSH。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接</span></span><br><span class="line">sftp username@hostname</span><br><span class="line"><span class="comment"># 本地文件传输到远程主机。</span></span><br><span class="line">put localfile</span><br><span class="line"><span class="comment"># 远程文件传输到本地。</span></span><br><span class="line">get remotefile</span><br></pre></td></tr></table></figure>
<h3 id="3、rsync-命令">3、rsync 命令</h3>
<p>rsync 是一个常用的 Linux 应用程序，用于文件同步。</p>
<hr>
<p>参考文章:</p>
<p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a></p>
<p><a href="https://wangdoc.com/ssh/port-forwarding.html" target="_blank" rel="noopener">https://wangdoc.com/ssh/port-forwarding.html</a></p>
<p><a href="https://abcdabcd987.com/ssh/" target="_blank" rel="noopener">https://abcdabcd987.com/ssh/</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程几种实现方式</title>
    <url>/posts/d5b482ca.html</url>
    <content><![CDATA[<h4 id="1、继承Thread类">1、继承Thread类</h4>
<blockquote>
<p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//4.创建Thread类的子类对象</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//5.开启线程</span></span><br><span class="line">        mt.setName(<span class="string">"多线程"</span>);</span><br><span class="line">        mt.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()  + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.继承Thread</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过匿名类创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//重写run方法,将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"thread"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、实现Runnable接口">2、实现Runnable接口</h4>
<blockquote>
<p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p>
<p><code>public void run()</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//4,创建Runnable的子类对象</span></span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//5,将其当作参数传递给Thread的构造函数</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(mr,<span class="string">"myrunnable"</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()  + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1,定义一个类实现Runnable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内部匿名类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//1,将Runnable的子类对象传递给Thread的构造方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//2,重写run方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//3,将要执行的代码写在run方法中</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//4,开启线程</span></span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、通过-Callable-和-Future-创建线程">3、通过 Callable 和 Future 创建线程</h4>
<ol>
<li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li>
<li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>
<li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li>
<li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MyCallable mc = <span class="keyword">new</span> MyCallable(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;Integer&gt; f = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">        <span class="keyword">new</span> Thread(f).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(f.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="comment">//实现从1加到100并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCallable</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= number; x++) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、创建线程的三种方法对比">4、创建线程的三种方法对比</h4>
<ol>
<li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li>
<li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li>
</ol>
<h4 id="5、线程池">5、线程池</h4>
<p>Java中创建和销毁一个线程是比较昂贵的操作，需要系统调用。频繁创建和销毁线程会影响系统性能。于是线程池应运而生。其好处是可以抛出异常和有返回值。</p>
<ul>
<li>创建线程池对象</li>
<li>创建Runnable实例</li>
<li>提交Runnable实例</li>
<li>关闭线程池</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提交Runnable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以执行Runnable对象或者Callable对象代表的线程</span></span><br><span class="line">        pool.submit(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        pool.submit(<span class="keyword">new</span> MyRunnable());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1,定义一个类实现Runnable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.将要执行的代码写在run方法中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提交Callable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以执行Runnable对象或者Callable对象代表的线程</span></span><br><span class="line">        Future&lt;Integer&gt; f1 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">100</span>));</span><br><span class="line">        Future&lt;Integer&gt; f2 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// V get()</span></span><br><span class="line">        Integer i1 = f1.get();</span><br><span class="line">        Integer i2 = f2.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="comment">//实现从1加到100并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCallable</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= number; x++) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考文章：</p>
<p><a href="https://www.runoob.com/java/java-multithreading.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-multithreading.html</a></p>
<p><a href="https://blog.csdn.net/qq_40298054/article/details/87870297" target="_blank" rel="noopener">https://blog.csdn.net/qq_40298054/article/details/87870297</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令操作</title>
    <url>/posts/2940781e.html</url>
    <content><![CDATA[<h3 id="1、文件目录操作">1、文件目录操作</h3>
<p><strong>ls命令</strong></p>
<p>所有ls可以进行组合使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -a <span class="comment">#列出目录所有文件，包含以.开始的隐藏文件</span></span><br><span class="line">ls -A <span class="comment">#列出除.及..的其它文件</span></span><br><span class="line">ls -r <span class="comment">#反序排列</span></span><br><span class="line">ls -t <span class="comment">#以文件修改时间排序</span></span><br><span class="line">ls -S <span class="comment">#以文件大小排序</span></span><br><span class="line">ls -h <span class="comment">#以易读大小显示</span></span><br><span class="line">ls -l <span class="comment">#除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列出当前目录中以“l"开头的目录的详细内容</span></span><br><span class="line">ls -l l*</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>cd命令</strong></p>
<p>切换目录，其中 ./指当前目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入根目录</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="comment">#进去当前账户home目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<p><strong>pwd命令</strong></p>
<p>查看当前工作目录路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示当前目录</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment">#显示当前软连接的实际目录</span></span><br><span class="line"><span class="built_in">pwd</span> -P</span><br></pre></td></tr></table></figure>
<p><strong>mkdir 命令</strong></p>
<p>创建文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在当前目录下创建目录</span></span><br><span class="line">mkdir <span class="built_in">test</span></span><br><span class="line"><span class="comment">#在/tmp下创建建目录(不存在就创建)</span></span><br><span class="line">mkdir -p /tmp/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><strong>rmdir命令</strong></p>
<p>删除文件夹，递归删除多个目录需要添加<code>-P</code>，另外只能删除空目录</p>
<p><strong>mv命令</strong></p>
<p>移动或修改文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重命名，不同路径代表移动文件</span></span><br><span class="line">mv test.txt test.json</span><br><span class="line"><span class="comment">#将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</span></span><br><span class="line">mv -i log1.txt log2.txt</span><br><span class="line"><span class="comment">#将本级所有文件移动到上一级</span></span><br><span class="line">mv * ../</span><br></pre></td></tr></table></figure>
<p><strong>cp命令</strong></p>
<p>复制文件或目录到新的路径，和mv操作类似</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-i <span class="comment">#提示</span></span><br><span class="line">-r <span class="comment">#复制目录及目录内所有项目</span></span><br><span class="line">-a <span class="comment">#复制的文件与原文件时间一样</span></span><br><span class="line">-p <span class="comment">#连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</span></span><br></pre></td></tr></table></figure>
<p><strong>rm命令</strong></p>
<p>删除文件或目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-f  <span class="comment">#忽略不存在的文件，不会出现警告，强制删除！</span></span><br><span class="line">-r  <span class="comment">#递归删除目录！</span></span><br><span class="line">-i  <span class="comment">#提示，删除询问是否删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除任何 .log 文件，删除前逐一询问确认</span></span><br><span class="line">rm -i *.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p><strong>ln命令</strong></p>
<blockquote>
<p>硬链接：A—B，假设B是A的硬链接，那么他们两个指向了同一个文件！允许一个文件拥有多个路径，用户可以通过这种机制建立硬链接到一些重要文件上，防止误删！<br>
软链接： 类似Window下的快捷方式，删除的源文件，快捷方式也访问不了！</p>
</blockquote>
<ul>
<li>-b 删除，覆盖以前建立的链接</li>
<li>-d 允许超级用户制作目录的硬链接</li>
<li>-f 强制执行</li>
<li>-i 交互模式，文件存在则提示用户是否覆盖</li>
<li>-n 把符号链接视为一般目录</li>
<li>-s 软链接(符号链接)</li>
<li>-v 显示详细的处理过程</li>
</ul>
<p><code> ln [参数][源文件或目录][目标文件或目录]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建软连接</span></span><br><span class="line">ln -s test1.log link2013</span><br></pre></td></tr></table></figure>
<p><strong>tar命令</strong></p>
<p>文件打包与解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件打包</span></span><br><span class="line">tar -zcvf 打包名 文件</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">tar -zcvf design.tar.gz design/</span><br><span class="line"><span class="comment">#文件解压</span></span><br><span class="line">tar -zxvf 文件名</span><br></pre></td></tr></table></figure>
<p><strong>scp命令</strong></p>
<p>Linux远程拷贝文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">scp 文件名 用户名@ip:服务器绝对路径目录</span><br><span class="line"><span class="comment">#上传design.tar.gz到服务器/shawn目录下</span></span><br><span class="line">scp design.tar.gz root@114.215.200.70:/shawn</span><br><span class="line"><span class="comment">#上传目录</span></span><br><span class="line">scp -r 目录 用户名@ip:服务器绝对路径目录</span><br></pre></td></tr></table></figure>
<p>echo命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若不存在就创建，存在就覆盖，使用&gt;&gt;为追加</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello world'</span> &gt; hw.text</span><br></pre></td></tr></table></figure>
<p><strong>find命令</strong></p>
<p><code>find 目录 参数</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find [目录] -name <span class="string">"*.c"</span></span><br></pre></td></tr></table></figure>
<p><strong>touch命令</strong></p>
<p>创建新文件，也可以使用vim/vi创建</p>
<h3 id="2、文件基本属性">2、文件基本属性</h3>
<p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。在Linux中我们可以使用 <code>ll</code> 或者 <code>ls –l </code>命令来显示一个文件的属性以及文件所属的用户和组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lrwxrwxrwx.   1 root root    7 5月  11 2019 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   5 root root 4096 11月 14 14:11 boot</span><br><span class="line">drwxr-xr-x    7 root root   73 1月   2 11:29 data</span><br></pre></td></tr></table></figure>
<p>在Linux中第一个字符代表这个文件是目录、文件或者链接文件等等。</p>
<ul>
<li>==当为【d】则是目录==</li>
<li>==当为【-】则是文件==</li>
<li>==若是【l】则标识为链接文档（link file）==</li>
<li>若是【b】则表示为装置文件里面的可供储存的接口设备（可随机存取装置）</li>
<li>若是【c】则表示为装置文件里面的串行端口设备，例如键盘、鼠标（一次性读取装置）。</li>
</ul>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/06/363003_1227493859FdXT.png" alt="363003_1227493859FdXT"></p>
<p>从左至右用0-9这些数字来表示。<br>
第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。<br>
其中：</p>
<ul>
<li>第1、4、7位表示读权限，如果用&quot;r&quot;字符表示，则有读权限，如果用&quot;-&quot;字符表示，则没有读权限；</li>
<li>第2、5、8位表示写权限，如果用&quot;w&quot;字符表示，则有写权限，如果用&quot;-&quot;字符表示没有写权限；</li>
<li>第3、6、9位表示可执行权限，如果用&quot;x&quot;字符表示，则有执行权限，如果用&quot;-&quot;字符表示，则没有执行权限。</li>
</ul>
<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>
<p><strong>chgrp命令</strong></p>
<p>更改文件属组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-R表示递归更改文件属组，就是在更改某个文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</span></span><br><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>
<p><strong>chown命令</strong></p>
<p>更改文件的属主，也可以同时更改文件的属组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown [-R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名:属组名 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#将install.log的拥有者与属组改回root</span></span><br><span class="line">chown root:root install.log</span><br></pre></td></tr></table></figure>
<p><strong>chmod命令(重要)</strong></p>
<p>更改文件9个属性</p>
<p>Linux文件属性由两种设置方法，一种是数字，一种是符号。Linux文件的基本权限就有9个，分别是owner、group、others三种分别各有自己的read、write、execute权限。其中</p>
<ul>
<li>r:4</li>
<li>w:2</li>
<li>x:1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将test目录下所有文件启动所有权限</span></span><br><span class="line">chmod -R 777 <span class="built_in">test</span></span><br><span class="line"><span class="comment">#给文件增加执行权限</span></span><br><span class="line">chown +x <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h3 id="3、文件内容查看">3、文件内容查看</h3>
<p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li>cat 由第一行开始显示文件内容</li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl  显示的时候，顺道输出行号！</li>
<li>more 一页一页的显示文件内容</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
</ul>
<p>可以使用*man [命令]*来查看各个命令的使用文档</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 文件</span><br><span class="line">nl [-bnw] 文件</span><br><span class="line">head [-n number] 文件 </span><br><span class="line"><span class="comment">#对于文本处理工具还有sed和awk两个强大的工具</span></span><br></pre></td></tr></table></figure>
<h3 id="4、磁盘管理">4、磁盘管理</h3>
<p><strong>df命令</strong></p>
<p>检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p><code>df [-ahikHTm] [目录或文件名]</code></p>
<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<p><strong>du命令</strong></p>
<p><code>du [-ahskm] 文件或目录名称</code></p>
<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>
<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询目录大小</span></span><br><span class="line">du -sh design/</span><br></pre></td></tr></table></figure>
<h3 id="5、账户管理">5、账户管理</h3>
<p><strong>useradd命令</strong></p>
<p>添加用户</p>
<ul>
<li>-m： 自动创建这个用户的主目录 /home/shawn</li>
<li>-G : 给用户分配组！</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建用户，主目录 /home/shawn，本质往/etc/passwd写入了信息</span></span><br><span class="line">useradd -m shawn</span><br></pre></td></tr></table></figure>
<p><strong>userdel命令</strong></p>
<p>删除用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加上-r即删除时将目录空间一并删除</span></span><br><span class="line">userdel [-r] shawn</span><br></pre></td></tr></table></figure>
<p><strong>usermod命令</strong></p>
<p>修改账户信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改主目录</span></span><br><span class="line">usermod -d /home/shawn22 shawn</span><br></pre></td></tr></table></figure>
<p><strong>passwd命令</strong></p>
<p>用户口令的管理，用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>
<p><code>passwd 选项 用户名</code></p>
<p>可使用的选项：</p>
<ul>
<li>-l 锁定口令，即禁用账号。</li>
<li>-u 口令解锁。</li>
<li>-d 使账号无口令。</li>
<li>-f 强迫用户下次登录时修改口令。</li>
</ul>
<blockquote>
<p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>
</blockquote>
<h3 id="6、进程管理">6、进程管理</h3>
<ul>
<li>在Linux中，每一个程序都是有自己的一个进程，每一个进程都有一个id号</li>
<li>每一个进程呢，都会有一个父进程！</li>
<li>进程可以有两种存在方式：前台/后台运行</li>
<li>一般的话服务都是后台运行的，基本的程序都是前台运行的！</li>
</ul>
<p><strong>ps命令</strong></p>
<p>查看系统当前正在执行的各种进程信息</p>
<p><code>ps -xx</code></p>
<p>命令参数：</p>
<ul>
<li>a  显示所有进程</li>
<li>-a 显示同一终端下的所有程序</li>
<li>-A 显示所有进程</li>
<li>c  显示进程的真实名称</li>
<li>-N 反向选择</li>
<li>-e 等于“-A”</li>
<li>e  显示环境变量</li>
<li>f  显示程序间的关系</li>
<li>-H 显示树状结构</li>
<li>r  显示当前终端的进程</li>
<li>T  显示当前终端的所有程序</li>
<li>u  指定用户的所有进程</li>
<li>-au 显示较详细的资讯</li>
<li>-aux 显示所有包含其他使用者的行程</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -aux 查看所有的进程</span></span><br><span class="line">ps -aux|grep mysql </span><br><span class="line"><span class="comment"># |  在Linux这个叫做管道符    A|B 相当于前面的操作结果通过管道当做后面命令的输入</span></span><br><span class="line"><span class="comment"># grep 查找文件中符合条件的字符串！</span></span><br><span class="line"><span class="comment"># 看父进程我们一般可以通过目录树结构来查看！</span></span><br><span class="line">ps -ef|grep mysql </span><br><span class="line"><span class="comment">#进程树，-p显示父id， -u显示用户组</span></span><br><span class="line">pstree -pu</span><br></pre></td></tr></table></figure>
<p><strong>kill命令</strong></p>
<p>杀死进程，结束任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#表示强制结束该进程,进程id可通过ps查看</span></span><br><span class="line"><span class="built_in">kill</span> -9 进程的id</span><br><span class="line"><span class="comment">#正常停止一个进程</span></span><br><span class="line"><span class="built_in">kill</span> -15 进程的id</span><br><span class="line"><span class="comment">#杀死所有相关的进程</span></span><br><span class="line">killall 进程名字</span><br></pre></td></tr></table></figure>
<p><strong>nohup命令(后台)</strong></p>
<p>后台执行程序(no hang up不挂起)</p>
<p><code>nohup command &gt; myout.file 2&gt;&amp;1 &amp;</code></p>
<ul>
<li>command&gt;out.file是将command的输出重定向到out.file文件，即输出内容不打印到屏幕上，而是输出到out.file文件中</li>
<li>2&gt;&amp;1 也就表示将错误重定向到标准输出上</li>
<li>&amp; 放在命令到结尾，表示后台运行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动python程序并将输出输出到python.txt文件中，后台</span></span><br><span class="line">nohup python tools/train.py&gt; python.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<ul>
<li>ctrl + z 可以将一个正在前台执行的命令放到后台，并且处于暂停状态。</li>
<li>Ctrl+c 终止前台命令。</li>
<li>jobs 查看当前有多少在后台运行的命令。jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识。</li>
</ul>
<hr>
<p>对于shell的学习，可以参考：<a href="https://book.apeland.cn/details/274/" target="_blank" rel="noopener">https://book.apeland.cn/details/274/</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合ElasticSearch7.x</title>
    <url>/posts/803c8798.html</url>
    <content><![CDATA[<h2 id="一、简介和下载">一、简介和下载</h2>
<h4 id="1、windows-es下载安装">1、windows es下载安装</h4>
<blockquote>
<p>**Elasticsearch(ES)**是一个基于<a href="https://zh.wikipedia.org/wiki/Lucene" target="_blank" rel="noopener">Lucene</a>库的<a href="https://zh.wikipedia.org/wiki/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E" target="_blank" rel="noopener">搜索引擎</a>。它提供了一个分布式、支持多租户的<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E6%96%87%E6%AA%A2%E7%B4%A2" target="_blank" rel="noopener">全文搜索</a>引擎，具有<a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a> Web接口和无模式<a href="https://zh.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">JSON</a>文档。Elasticsearch是用<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener">Java</a>开发的，并在<a href="https://zh.wikipedia.org/wiki/Apache%E8%AE%B8%E5%8F%AF%E8%AF%81" target="_blank" rel="noopener">Apache许可证</a>下作为开源软件发布。Elasticsearch可以用于搜索各种文档。它提供可扩展的搜索，具有接近实时的搜索，并支持多租户。</p>
</blockquote>
<p><a href="https://elasticsearch.cn/download/" target="_blank" rel="noopener">Elasticsearch下载地址</a></p>
<a id="more"></a>
<p>这里我选择了7.10.2，并使用迅雷下载，速度还可以</p>
<p>解压后目录结构</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">bin</span> <span class="comment">#启动文件</span></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line">	<span class="string">log4j2</span> <span class="comment">#日志配置文件</span></span><br><span class="line">	<span class="string">jvm.options</span> <span class="comment">#java虚拟机相关配置</span></span><br><span class="line">	<span class="string">elasticsearch.yml</span> <span class="comment">#elasticsearch的配置文件 默认9200端口</span></span><br><span class="line"><span class="string">lib</span> <span class="comment">#相关jar包</span></span><br><span class="line"><span class="string">logs</span> <span class="comment">#日志</span></span><br><span class="line"><span class="string">modules</span> <span class="comment">#功能模块</span></span><br><span class="line"><span class="string">plugins</span> <span class="comment">#插件</span></span><br></pre></td></tr></table></figure>
<p>进入bin目录双击<code>elasticsearch.bat</code>，然后访问<code>http://127.0.0.1:9200/</code>,成功出现以下json信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"SHAWN"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span>: <span class="string">"jsUcSDzlQ_W7ikv3MOWrBw"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: &#123;</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"7.10.2"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span>: <span class="string">"zip"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span>: <span class="string">"747e1cc71def077253878a59143c1f785afa92b9"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span>: <span class="string">"2021-01-13T00:42:12.435326Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span>: <span class="string">"8.7.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span>: <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span>: <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、可视化插件">2、可视化插件</h4>
<ol>
<li>github地址：<a href="https://github.com/mobz/elasticsearch-head%EF%BC%8C%E6%8C%89%E6%93%8D%E4%BD%9C%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%EF%BC%9B%E8%8B%A5%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head，按操作运行项目；若出现跨域问题进行配置</a></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: "*"</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>google商店搜索ElasticSearch Head，安装插件</li>
</ol>
<h4 id="3、Kibana-下载与安装">3、Kibana 下载与安装</h4>
<blockquote>
<p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。<br>
Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。<br>
Logstash 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。<br>
Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好Web 界面，可以帮助汇总、分析和搜索重要数据日志。</p>
</blockquote>
<p><a href="https://elasticsearch.cn/download/" target="_blank" rel="noopener">Kibana 下载地址</a></p>
<p>注意要和ES版本一致</p>
<p>解压打开<code>bin/kibana.bat</code>浏览器<code>http://localhost:5601/</code></p>
<p>汉化，在<code>config/kibana.yml</code>下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">i18n.locale: "zh-CN"</span><br></pre></td></tr></table></figure>
<h2 id="二、核心概念">二、核心概念</h2>
<ol>
<li>索引</li>
<li>字段类型(mapping)</li>
<li>文档(documents)（倒排索引）</li>
</ol>
<h2 id="三、IK分词器">三、IK分词器</h2>
<blockquote>
<p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，比<br>
如果要使用中文，建议使用ik分词器！</p>
</blockquote>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">下载安装地址</a></p>
<p>下载完成后放入es plugins中（注意版本匹配），之后重启es</p>
<p><code>ik_smart</code>最少切分，<code>ik_max_word</code>最细粒度划分，穷尽词库可能</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在Kibana 控制台进行访问</span></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"中国共产党"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"中国共产党"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ik分词器增加自己目录</p>
</blockquote>
<p>在插件目录下<code>config/IKAnalyzer.cfg.xml</code>进行配置</p>
<h2 id="四、ES基础测试">四、ES基础测试</h2>
<h4 id="1-创建一个索引">1.创建一个索引</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># put /索引名/~类型名~/文档id</span><br><span class="line">PUT /test1/type1/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"shawn"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="string">"18"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串类型<br>
text、keyword</li>
<li>数值类型<br>
long，integer，short，byte，double，float，half float，scaled float</li>
<li>日期类型<br>
date</li>
<li>te布尔值类型<br>
boolean</li>
<li>二进制类型<br>
binary</li>
</ul>
<h4 id="2-映射，默认是-doc">2.映射，默认是_doc</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /test2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>:&#123;</span><br><span class="line">      <span class="attr">"name"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"address"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"age"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-更新-有值就更新">3.更新(有值就更新)</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /test1/type1/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"shawn"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="string">"20"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、简单查询">4、简单查询</h4>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /test1/_search?q=name:shawn</span><br></pre></td></tr></table></figure>
<h4 id="5、复杂操作搜索">5、复杂操作搜索</h4>
<p>select（排序，分页，高亮，模糊查询，精准查询！）,里面可以有很多查询操作，和mysql类似</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET test1/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>:&#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"shawn"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"age"</span>: <span class="string">"18"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_source"</span>: [<span class="string">"name"</span>,<span class="string">"age"</span>],</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre_tags"</span>:<span class="string">"&lt;p class='key' style='color:red'&gt;"</span>,</span><br><span class="line">	<span class="attr">"post_tags"</span>:<span class="string">"&lt;/p&gt;"</span>,</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>text</code>类型可以被分词 <code>keyword</code>不能被分词</p>
<ul>
<li>匹配</li>
<li>按照条件匹配</li>
<li>精确匹配</li>
<li>区间范围匹配</li>
<li>匹配字段过滤</li>
<li>多条件查询</li>
<li>高亮查询</li>
</ul>
<h2 id="五、springboot整合es">五、springboot整合es</h2>
<h4 id="1、引入maven依赖">1、引入maven依赖</h4>
<p>我的springboot版本是<code>2.4.2</code>，es版本是7.10.2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;7.10.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;7.10.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.70&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2、创建配置文件">2、创建配置文件</h4>
<p>创建<code>config/ElasticSearchConfig.java</code>配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();</span><br><span class="line">        COMMON_OPTIONS = builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"127.0.0.1"</span>, <span class="number">9200</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、创建实体类">3、创建实体类</h4>
<p>创建<code>pojo/User.java</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、测试文件">4、测试文件</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试索引的创建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建索引请求</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="comment">// 客户端执行请求</span></span><br><span class="line">        CreateIndexResponse createIndexResponse =</span><br><span class="line">                client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(createIndexResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testExistIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> exists = client.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(delete.isAcknowledged());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加文档</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"shawn"</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">// 创建请求</span></span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="comment">// 规则</span></span><br><span class="line">        request.id(<span class="string">"1"</span>);</span><br><span class="line">        request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">        request.timeout(<span class="string">"1s"</span>);</span><br><span class="line">        <span class="comment">// 将微码数据放入请求 json</span></span><br><span class="line">        request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">        <span class="comment">// 客户端发送请求</span></span><br><span class="line">        IndexResponse index = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(index.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文档</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testIsExists</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="comment">// 不获取返回的source上下文</span></span><br><span class="line">        getRequest.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">boolean</span> exists = client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"shawn_index"</span>,<span class="string">"1"</span>);</span><br><span class="line">        GetResponse documentFields = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 打印文档</span></span><br><span class="line">        System.out.println(documentFields.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"shawn_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">        request.timeout(<span class="string">"1s"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"shawn22"</span>,<span class="number">22</span>);</span><br><span class="line">        request.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line">        UpdateResponse update = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 打印文档</span></span><br><span class="line">        System.out.println(update.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"shawn_index"</span>,<span class="string">"1"</span>);</span><br><span class="line">        DeleteResponse delete = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 打印文档</span></span><br><span class="line">        System.out.println(delete.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特殊的，真的项目一般都会批量插入数据！</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        BulkRequest bulkRequest=<span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">"10s"</span>);</span><br><span class="line">        ArrayList&lt;User&gt; userlist=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userlist.add(<span class="keyword">new</span> User(<span class="string">"shawn1"</span>,<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//批处理请求</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; userlist.size();i++)&#123;</span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                <span class="keyword">new</span> IndexRequest(<span class="string">"shawn_index"</span>)</span><br><span class="line">                        .id(<span class="string">""</span>+(i+<span class="number">1</span>))</span><br><span class="line">                        .source(JSON.toJSONString(userlist.get(i)),XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line">        BulkResponse bulk = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(bulk.hasFailures());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 构建搜索条件</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"shawn_index"</span>);</span><br><span class="line">        <span class="comment">// 查询条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">// 匹配所有</span></span><br><span class="line">        <span class="comment">// QueryBuilders.matchAllQuery();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// termquery精确匹配</span></span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"name"</span>, <span class="string">"shawn1"</span>);</span><br><span class="line">        searchSourceBuilder.query(termQueryBuilder);</span><br><span class="line">        searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        searchSourceBuilder.from(<span class="number">1</span>);</span><br><span class="line">        searchSourceBuilder.size(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// // 高亮</span></span><br><span class="line">        <span class="comment">// HighlightBuilder highlightBuilder = new HighlightBuilder();</span></span><br><span class="line">        <span class="comment">// highlightBuilder.field("name");</span></span><br><span class="line">        <span class="comment">// // 关闭多个高亮匹配</span></span><br><span class="line">        <span class="comment">// highlightBuilder.requireFieldMatch(false);</span></span><br><span class="line">        <span class="comment">// highlightBuilder.preTags("&lt;span style='color:red'&gt;");</span></span><br><span class="line">        <span class="comment">// highlightBuilder.postTags("&lt;/span&gt;");</span></span><br><span class="line">        <span class="comment">// searchSourceBuilder.highlighter(highlightBuilder);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行搜索</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 解析结果</span></span><br><span class="line">        System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">        System.out.println(<span class="string">"========================="</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// // 如果高亮了需要解析高亮字段</span></span><br><span class="line">        <span class="comment">// ArrayList&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// for (SearchHit hit : searchResponse.getHits()) &#123;</span></span><br><span class="line">        <span class="comment">//     // 解析高亮</span></span><br><span class="line">        <span class="comment">//     Map&lt;String, HighlightField&gt; highlightFieldMap = hit.getHighlightFields();</span></span><br><span class="line">        <span class="comment">//     HighlightField highlightField = highlightFieldMap.get("name");</span></span><br><span class="line">        <span class="comment">//     Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span></span><br><span class="line">        <span class="comment">//     // 替换原来的</span></span><br><span class="line">        <span class="comment">//     if(highlightField!=null)&#123;</span></span><br><span class="line">        <span class="comment">//         Text[] fragments = highlightField.fragments();</span></span><br><span class="line">        <span class="comment">//         String n_highlightField = "";</span></span><br><span class="line">        <span class="comment">//         for (Text text : fragments) &#123;</span></span><br><span class="line">        <span class="comment">//             n_highlightField += text;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         sourceAsMap.put("name",n_highlightField);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     list.add(sourceAsMap);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot日志总结</title>
    <url>/posts/ece49569.html</url>
    <content><![CDATA[<p>在开发中，我们经常使用 <code>System.out.println()</code> 来打印一些信息，但是这样不好，因为大量的使用 <code>System.out</code> 会增加资源的消耗，而且部署在Linux上时只能通过日志来查看输出。我们实际项目中使用的是 <code>slf4j</code> 的 <code>logback</code> 来输出日志,<code>slf4j+logback</code>也是springboot的默认日志框架，当然<code>logback</code>也可以换成性能更好的<code>log4j2</code>框架。</p>
<a id="more"></a>
<h2 id="1-slf4j-介绍">1. slf4j 介绍</h2>
<blockquote>
<p>SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。</p>
</blockquote>
<p>slf4j要求我们只需要按统一的方式写记录日志的代码，而无需关心日志是通过哪个日志系统，以什么风格输出的。因为它们取决于部署项目时绑定的日志系统。</p>
<p>首先需要添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--	&lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面的springboot依赖已经包含上面的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>日志的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Test<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//logger.info("test");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有一种方法通过注解方式，需要安装好Lombok插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// log.info("test");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-application-yml-中对日志的配置">2. application.yml 中对日志的配置</h2>
<p><code>application.yml</code> 文件是 Spring Boot 中唯一一个需要配置的文件，一开始创建工程的时候是 <code>application.properties</code> 文件(*注：同一优先级位置同时有 <code>application.properties </code>和 <code>application.yml </code>，那么 <code>application.yml</code> 里的属性会覆盖 <code>application.properties </code>里的属性)</p>
<p>这里我们对 <code>application.yml </code>文件中对日志的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  config: classpath:logback.xml </span><br><span class="line">  level:</span><br><span class="line">    com.test: trace</span><br></pre></td></tr></table></figure>
<p><code>logging.config</code> 是用来指定项目启动的时候，读取哪个配置文件，这里指定的是日志配置文件是根路径下的 <code>logback.xml</code> 文件，关于日志的相关配置信息，都放在 <code>logback.xml</code> 文件中了。<code>logging.level</code> 是用来指定具体的 mapper 中日志的输出级别，上面的配置表示 <code>com.test</code> 包下的所有日志输出级别为 trace，会打印出所以debug以上信息。在生产环境上，将这个日志级别再设置成 error 级别即可。当然在 application.yml 中还可以显示定义其他例如<code>logging.pattern.console</code>等配置信息。</p>
<p>常用的日志级别按照从高到低依次为：ERROR、WARN、INFO、DEBUG。</p>
<p><em>对于classpath路径，src 路径下的文件 在编译后都会放到 WEB-INF/classes 路径下。默认classpath 就是指这里。用maven构建 项目时，resources 目录就是默认的classpath</em></p>
<h2 id="3-logback-xml-配置文件解析">3. logback.xml 配置文件解析</h2>
<p>在上面 <code>application.yml</code> 文件中，我们指定了日志配置文件 <code>logback.xml</code>，<code>logback.xml</code> 文件中主要用来做日志的相关配置。在 <code>logback.xml</code> 中，我们可以定义日志输出的格式、路径、控制台输出格式、文件大小、保存时长等等。下面来分析一下：</p>
<h3 id="3-1-定义日志输出格式和存储路径">3.1 定义日志输出格式和存储路径</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"%date&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_PATH"</span> <span class="attr">value</span>=<span class="string">"D:/logs/demo.%d&#123;yyyy-MM-dd&#125;.%i.log"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">日志输出格式:</span><br><span class="line">%d表示日期时间，</span><br><span class="line">%thread表示线程名，</span><br><span class="line">%-5level :级别从左显示5个字符宽度</span><br><span class="line">%logger&#123;50&#125;表示logger名字最长50个字符,否则按照句点分割。</span><br><span class="line">%msg:日志消息，</span><br><span class="line">%n是换行符</span><br><span class="line"></span><br><span class="line">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure>
<p>对于“FILE_PATH” 文件路径，日志都会存储在该路径下。<code>%i</code> 表示第 i 个文件，当日志文件达到指定大小时，会将日志生成到新的文件里，这里的 i 就是文件索引，日志文件允许的大小可以设置。这里需要注意的是，不管是 windows 系统还是 Linux 系统，日志存储的路径必须要是绝对路径。</p>
<p>如果想在控制台换成彩色打印输出，可以在<code>&lt;configuration&gt;</code>里添加如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 彩色日志配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;green&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;)&#123;red&#125; %clr($&#123;PID:-&#125;)&#123;magenta&#125; %clr(---)&#123;blue&#125; %clr([%30.30t])&#123;yellow&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;blue&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-定义控制台输出">3.2 定义控制台输出</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照上面配置的LOG_PATTERN来打印日志，若彩色打印，将pattern中名字换成彩色日志格式即可--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>&lt;appender&gt;</code> 节点设置个控制台输出（<code>class=&quot;ch.qos.logback.core.ConsoleAppender&quot;</code>）的配置，定义为 “CONSOLE”。使用上面定义好的输出格式（LOG_PATTERN）来输出，使用 <code>${}</code> 引用进来即可。</p>
<h3 id="3-3-定义日志文件的相关参数">3.3 定义日志文件的相关参数</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 按照上面配置的FILE_PATH路径来保存日志 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;FILE_PATH&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 日志保存30天 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 单个日志文件的最大，超过则新建日志文件存储 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>30MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 按照上面配置的LOG_PATTERN来打印日志 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>&lt;appender&gt;</code> 定义一个名为 “FILE” 的文件配置，主要是配置日志文件保存的时间、单个日志文件存储的大小、以及文件保存的路径和日志的输出格式。</p>
<h3 id="3-4-定义日志输出级别">3.4 定义日志输出级别</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.test"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--在这里可以配置多种文件输出，只需要配置好相应的appender--&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>有了上面那些定义后，最后我们使用 <code>&lt;logger&gt;</code> 来定义一下项目中默认的日志输出级别，这里定义级别为 INFO，然后针对 INFO 级别的日志，使用 <code>&lt;root&gt;</code> 引用上面定义好的控制台日志输出和日志文件的参数。这样 logback.xml 文件中的配置就设置完了。</p>
<h2 id="4-Springboot默认日志logback切换为log4j2">4.Springboot默认日志logback切换为log4j2</h2>
<h3 id="1、引入log4j2依赖，去除固有依赖">1、引入log4j2依赖，去除固有依赖</h3>
<p>首先 ，引入log4j2的starter，将logback.xml改为log4j2的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后需要排除spring自带的日志框架logback依赖，如果项目中只引入了web的starter，则可以在web starter中排除掉logging</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果项目中引入的不止web starter，此时我们需要在spring-boot-starter中排除logging的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、配置log4j2-xml文件">2、配置<code>log4j2.xml</code>文件</h3>
<p>若自定义文件名，则需要在<code>application.yml</code>进行修改，配置文件也logback也有区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  config: classpath:log4j2_dev.xml</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">monitorInterval</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里相当于配置变量，后面在 &lt;Appenders&gt;  标签引入 用$&#123;&#125;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 控制台彩色日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_CONSOLE"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight&#123;%-5level&#125; [%t] %highlight&#123;%c&#123;1.&#125;.%M(%L)&#125;: %msg%n"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"logs"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志输出模式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &#123;%-5level&#125; [%t] &#123;%c&#123;1.&#125;.%M(%L)&#125;: %msg%n"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志输出文件名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_PATH"</span> <span class="attr">value</span>=<span class="string">"lamp.%d&#123;yyyy-MM-dd&#125;.%i.log"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_CONSOLE&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--生成文件的文件名，当天生成日志 log.log ，保存其他天日志为log-%d&#123;yyyy-MM-dd&#125;.log--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/log.log"</span> <span class="attr">filePattern</span>=<span class="string">"$&#123;LOG_HOME&#125;/$&#123;FILE_PATH&#125;"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--$&#123;FILE&#125; 引入&lt;Property&gt; 标签的文件格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;LOG_FILE&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--基于时间的触发策略。该策略主要是完成周期性的log文件封存工作。有两个参数：</span></span><br><span class="line"><span class="comment">               interval，integer型，指定两次封存动作之间的时间间隔,modulate，boolean型，说明是否对封存时间进行调制。--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置每天打包日志一次--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">modulate</span>=<span class="string">"true"</span> <span class="attr">interval</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"20 MB"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--要访问的目录的最大级别数。值为0表示仅访问起始文件,2表示能访问一下两级目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Delete</span> <span class="attr">basePath</span>=<span class="string">"$&#123;LOG_HOME&#125;"</span> <span class="attr">maxDepth</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">IfFileName</span> <span class="attr">glob</span>=<span class="string">"$&#123;LOG_HOME&#125;/*.log"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--删除超过十天文件--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">IfLastModified</span> <span class="attr">age</span>=<span class="string">"30d"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">IfFileName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Delete</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生产环境下，将此级别配置为适合的级别，以免日志文件太多或影响程序性能 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里指代生效的日志级别和 输出的内容，这里代表生效的是 debug ，</span></span><br><span class="line"><span class="comment">        文件和控制台都会输出，如果是在环境留下file就可以了，file和CONSOLE 来自于 &lt;Appenders&gt; 配置的标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在这里可以配置多种文件输出，只需要配置好相应的appender--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3、控制台显示颜色">3、控制台显示颜色</h3>
<p>在Log4j 2.10以前的版本，pattern中配置%highlight属性是可以正常打印彩色日志的。<br>
但是是更新到2.10版本以后，控制台中就无法显示彩色日志了，各种级别的日志混杂在一起，难以阅读。Log4j2默认关闭了Jansi（一个支持输出ANSI颜色的类库）。</p>
<p><strong>操作</strong></p>
<p>IDEA中，点击右上角-&gt;Edit Configurations，在VM options中添加<code>-Dlog4j.skipJansi=false</code></p>
<hr>
<p>参考：</p>
<p><a href="https://blog.csdn.net/java821643/article/details/88753898" target="_blank" rel="noopener">https://blog.csdn.net/java821643/article/details/88753898</a></p>
<p><a href="http://logback.qos.ch/manual/index.html" target="_blank" rel="noopener">http://logback.qos.ch/manual/index.html</a></p>
<p><a href="https://blog.csdn.net/weixin_39370859/article/details/105039787" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39370859/article/details/105039787</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot异步、邮件、定时任务</title>
    <url>/posts/87f335be.html</url>
    <content><![CDATA[<h2 id="一、异步任务">一、异步任务</h2>
<p>首先在service服务类上添加注解<code>@Async</code>，然后在Application启动类上添加<code>@EnableAsync</code>注解即可</p>
<a id="more"></a>
<h2 id="二、邮件任务">二、邮件任务</h2>
<h3 id="1、引入maven依赖">1、引入maven依赖</h3>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2、配置yml文件">2、配置yml文件</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">your</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">your</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="comment">#开启加密验证</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail.smtl.ssl.enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意开通<code>POP3/SMTP服务</code>，以QQ邮箱为例，<code>首页-&gt;设置-&gt;账户</code>找到<code>POP3/SMTP服务</code>并开启，开启后会获得一个password，而username就填你的邮箱地址</p>
<p><img src="https://img-blog.csdnimg.cn/20210315192806333.png" alt="在这里插入图片描述"></p>
<h3 id="3、编写发送邮件服务类">3、编写发送邮件服务类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LearnApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSenderImpl javaMailSender;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//简单邮件</span></span><br><span class="line">        SimpleMailMessage mailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">//邮件主题</span></span><br><span class="line">        mailMessage.setSubject(<span class="string">"hello shawn"</span>);</span><br><span class="line">        <span class="comment">//正文</span></span><br><span class="line">        mailMessage.setText(<span class="string">"很高兴认识你"</span>);</span><br><span class="line">        <span class="comment">//接受者的邮箱地址</span></span><br><span class="line">        mailMessage.setTo(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line">        <span class="comment">//发送者的邮箱地址</span></span><br><span class="line">        mailMessage.setFrom(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        javaMailSender.send(mailMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException, ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//复杂邮件</span></span><br><span class="line">        MimeMessage mailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">//组装</span></span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mailMessage,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//邮件主题</span></span><br><span class="line">        helper.setSubject(<span class="string">"hello shawn"</span>);</span><br><span class="line">        <span class="comment">//正文，可以支持html解析</span></span><br><span class="line">        helper.setText(<span class="string">"&lt;p style='color:red'&gt;很高兴认识你&lt;p&gt;"</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//附件</span></span><br><span class="line">        helper.addAttachment(<span class="string">"1.jpg"</span>,<span class="keyword">new</span> File(<span class="string">"C:\\Users\\Shawn\\Desktop\\1.jpg"</span>));</span><br><span class="line">		 <span class="comment">//接受者的邮箱地址</span></span><br><span class="line">        helper.setTo(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line">         <span class="comment">//发送者的邮箱地址</span></span><br><span class="line">        helper.setFrom(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        javaMailSender.send(mailMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、定时任务">三、定时任务</h2>
<p>首先在主启动类上添加<code>@EnableScheduling</code>，之后在服务类上添加<code>@Scheduled(cron=&quot;xxx&quot;)</code>，例如<code>@Scheduled(cron=&quot;0 * * * * 0-7&quot;)</code>，cron顺序分别为<code>秒，分，时，日，月，周几</code></p>
<p><a href="https://crontab.guru/" target="_blank" rel="noopener">cron在线生成网站</a></p>
<p><strong>常用表达式例子</strong></p>
<p><strong>0 0 2 1 * ? *</strong>  表示在每月的1日的凌晨2点调整任务</p>
<p><strong>0 15 10 ? * MON-FRI</strong>  表示周一到周五每天上午10:15执行作业</p>
<p><strong>0 15 10 ? 6L 2002-2006</strong>  表示2002-2006年的每个月的最后一个星期五上午10:15执行作</p>
<p><strong>0 0 10,14,16 * * ?</strong>  每天上午10点，下午2点，4点</p>
<p><strong>0 0/30 9-17 * * ?</strong>  朝九晚五工作时间内每半小时</p>
<p><strong>0 0 12 ? * WED</strong>   表示每个星期三中午12点</p>
<p><strong>0 0 12 * * ?</strong>  每天中午12点触发</p>
<p><strong>0 15 10 ? * *</strong>   每天上午10:15触发</p>
<p><strong>0 15 10 * * ?</strong>   每天上午10:15触发</p>
<p><strong>0 15 10 * * ? *</strong>   每天上午10:15触发<br>
<strong>0 15 10 * * ? 2005</strong>   2005年的每天上午10:15触发<br>
<strong>0 * 14 * * ?</strong>   在每天下午2点到下午2:59期间的每1分钟触发<br>
<strong>0 0/5 14 * * ?</strong>   在每天下午2点到下午2:55期间的每5分钟触发<br>
<strong>0 0/5 14,18 * * ?</strong>   在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发<br>
<strong>0 0-5 14 * * ?</strong>   在每天下午2点到下午2:05期间的每1分钟触发<br>
<strong>0 10,44 14 ? 3 WED</strong>   每年三月的星期三的下午2:10和2:44触发<br>
<strong>0 15 10 ? * MON-FRI</strong>   周一至周五的上午10:15触发<br>
<strong>0 15 10 15 * ?</strong>   每月15日上午10:15触发<br>
<strong>0 15 10 L * ?</strong>   每月最后一日的上午10:15触发<br>
<strong>0 15 10 ? * 6L</strong>   每月的最后一个星期五上午10:15触发<br>
<strong>0 15 10 ? * 6L 2002-2005</strong>  2002年至2005年的每月的最后一个星期五上午10:15触发<br>
<strong>0 15 10 ? * 6#3</strong>  每月的第三个星期五上午10:15触发</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>任务</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>spring整合POI及EasyExcel</title>
    <url>/posts/d48f4301.html</url>
    <content><![CDATA[<h3 id="1、POI与EasyExcel介绍">1、POI与EasyExcel介绍</h3>
<p>Apache POI官网: <a href="https://poi.apache.org/" target="_blank" rel="noopener">https://poi.apache.org/</a></p>
<blockquote>
<p>Apache POI 简介是用Java编写的免费开源的跨平台的 Java API，Apache POI提供API给Java程式对Microsoft Office（Excel、WORD、PowerPoint、Visio等）格式档案读和写的功能。</p>
</blockquote>
<a id="more"></a>
<p>基本功能**(原生)</p>
<ol>
<li>HSSF – 提供读写Microsoft Excel各式档案的功能。(03版本)</li>
<li>XSSF – 提供读写Microsoft Excel OOXML各式档案的功能。(07版本)</li>
<li>HWPF – 提供读写Microsoft Word各式档案的功能。</li>
<li>HSLF – 提供读写Microsof PowerPoint格式档案的功能。</li>
<li>HDGF – 提供读写Microsoft Visio格式档案的功能。</li>
</ol>
<p>Easy Excel官方文档：<a href="https://www.yuque.com/easyexcel/doc/easyexcel" target="_blank" rel="noopener">https://www.yuque.com/easyexcel/doc/easyexcel</a></p>
<blockquote>
<p>Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，能够原本一个3M的excel用POI sax依然需要100M左右内存降低到几M，并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。在上层做了模型转换的封装，让使用者更加简单方便</p>
</blockquote>
<h3 id="2、POI-Excel操作">2、POI-Excel操作</h3>
<p><strong>导入maven依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--xls(03)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--xlsx(07)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日期格式化工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>==注:== 03版本和07版本存在兼容性问题，03版本最多支持65535行</p>
<p><strong>POI-Excel写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelWriteTest</span> </span>&#123;</span><br><span class="line">    String path = <span class="string">"./"</span>;</span><br><span class="line">    <span class="comment">// 基本写</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建一个工作簿(03版本）</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">//07版本</span></span><br><span class="line">        <span class="comment">// Workbook workbook = new XSSFWorkbook();</span></span><br><span class="line">        <span class="comment">// 2、创建一个工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet(<span class="string">"shawn科技"</span>);</span><br><span class="line">        <span class="comment">// 3、创建一行</span></span><br><span class="line">        Row row1 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 4、创建一个单元格（1,1）</span></span><br><span class="line">        Cell cell11 = row1.createCell(<span class="number">0</span>);</span><br><span class="line">        cell11.setCellValue(<span class="string">"今日新增访客"</span>);</span><br><span class="line">        <span class="comment">// （1,2）</span></span><br><span class="line">        Cell cell12 = row1.createCell(<span class="number">1</span>);</span><br><span class="line">        cell12.setCellValue(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 第二行</span></span><br><span class="line">        Row row2 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        Cell cell21 = row2.createCell(<span class="number">0</span>);</span><br><span class="line">        cell21.setCellValue(<span class="string">"统计时间"</span>);</span><br><span class="line">        <span class="comment">// (2,2)</span></span><br><span class="line">        Cell cell22 = row2.createCell(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 注意是joda的DateTime</span></span><br><span class="line">        String s = <span class="keyword">new</span> DateTime().toString(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        cell22.setCellValue(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成一张表（IO流，03版本）</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(path+<span class="string">"shanw科技.xls"</span>);</span><br><span class="line">        <span class="comment">// 07版本</span></span><br><span class="line">        <span class="comment">// FileOutputStream fileOutputStream = new FileOutputStream(path+"shanw科技.xlsx");</span></span><br><span class="line">        workbook.write(fileOutputStream);</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        System.out.println(<span class="string">"版本生成完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//大数据写</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWriteBigData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 时间</span></span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建一个工作簿(03版本）</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">// 07版本</span></span><br><span class="line">        <span class="comment">// Workbook workbook = new XSSFWorkbook();</span></span><br><span class="line">        <span class="comment">// 07版本加速，会产生临时文件</span></span><br><span class="line">        <span class="comment">// Workbook workbook = new SXSSFWorkbook();</span></span><br><span class="line">        <span class="comment">// 2、创建一个工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet(<span class="string">"shawn科技"</span>);</span><br><span class="line">        <span class="comment">// 写入数据，07版本没有限制，但是会比较慢</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">0</span>; rowNum &lt; <span class="number">65536</span>; rowNum++)&#123;</span><br><span class="line">            Row row = sheet.createRow(rowNum);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>; cellNum &lt; <span class="number">10</span>; cellNum++)&#123;</span><br><span class="line">                Cell cell = row.createCell(cellNum);</span><br><span class="line">                cell.setCellValue(cellNum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成一张表（IO流，03版本）</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(path+<span class="string">"shawn科技.xls"</span>);</span><br><span class="line">        <span class="comment">// 07版本</span></span><br><span class="line">        <span class="comment">// FileOutputStream fileOutputStream = new FileOutputStream(path+"shanw科技.xlsx");</span></span><br><span class="line">        workbook.write(fileOutputStream);</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">// 如果开启了SXSSFWorkbook，清除临时文件</span></span><br><span class="line">        <span class="comment">// ((SXSSFWorkbook)workbook).dispose();</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"时间为"</span>+(<span class="keyword">double</span>)(end-begin)/<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>POI-Excel读</strong></p>
<p>其中表格<code>会员消费商品明细表.xls</code>内容如下</p>
<table>
<thead>
<tr>
<th>卡号</th>
<th>持卡人</th>
<th>手机号</th>
<th>消费日期</th>
<th>小票号</th>
<th>商品编号</th>
</tr>
</thead>
<tbody>
<tr>
<td>100088</td>
<td>shawn</td>
<td>12333333333</td>
<td>2021/2/22</td>
<td>0000201510200146</td>
<td>PV700012</td>
</tr>
<tr>
<td>100089</td>
<td>shawn22</td>
<td>12333333333</td>
<td>2021/2/22</td>
<td>0000201510200146</td>
<td>PV700006</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelReadTest</span> </span>&#123;</span><br><span class="line">    String path = <span class="string">"./"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本读操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文件流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(path + <span class="string">"shawn科技.xls"</span>);</span><br><span class="line">        <span class="comment">// 创建工作簿03版本，07版本相对应变化</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(fileInputStream);</span><br><span class="line">        Sheet sheetAt = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        Row row = sheetAt.getRow(<span class="number">0</span>);</span><br><span class="line">        Cell cell = row.getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//类型注意</span></span><br><span class="line">        <span class="comment">// cell.getNumericCellValue();</span></span><br><span class="line">        System.out.println(cell.getStringCellValue());</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取内容</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCellType</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文件流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(path + <span class="string">"会员消费商品明细表.xls"</span>);</span><br><span class="line">        <span class="comment">// 创建工作簿03版本，07版本相对应变化</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(fileInputStream);</span><br><span class="line">        <span class="comment">//获取标题，假设这个文件标题都在第一行</span></span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        Row rowTitle = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (rowTitle != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 重要</span></span><br><span class="line">            <span class="keyword">int</span> physicalNumberOfCells = rowTitle.getPhysicalNumberOfCells();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>; cellNum &lt; physicalNumberOfCells; cellNum++) &#123;</span><br><span class="line">                Cell cell = rowTitle.getCell(cellNum);</span><br><span class="line">                <span class="keyword">if</span> (cell != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String stringCellValue = cell.getStringCellValue();</span><br><span class="line">                    System.out.print(stringCellValue + <span class="string">"|"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取表中内容，可以封装成工具类使用，03版本和07有区别</span></span><br><span class="line">        <span class="keyword">int</span> physicalNumberOfRows = sheet.getPhysicalNumberOfRows();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">1</span>; rowNum &lt; physicalNumberOfRows; rowNum++) &#123;</span><br><span class="line">            Row rowData = sheet.getRow(rowNum);</span><br><span class="line">            <span class="keyword">if</span> (rowData != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//读取列</span></span><br><span class="line">                <span class="keyword">int</span> cellCount = rowTitle.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>; cellNum &lt; cellCount; cellNum++) &#123;</span><br><span class="line">                    System.out.print(<span class="string">"【"</span> + (rowNum + <span class="number">1</span>) + <span class="string">"-"</span> + (cellNum + <span class="number">1</span>) + <span class="string">"】"</span>);</span><br><span class="line"></span><br><span class="line">                    Cell cell = rowData.getCell(cellNum);</span><br><span class="line">                    <span class="keyword">if</span> (cell != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        CellType cellType = cell.getCellType();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//判断单元格数据类型</span></span><br><span class="line">                        String cellValue = <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">switch</span> (cellType) &#123;</span><br><span class="line">                            <span class="keyword">case</span> STRING:<span class="comment">//字符串</span></span><br><span class="line">                                System.out.print(<span class="string">"【STRING】"</span>);</span><br><span class="line">                                cellValue = cell.getStringCellValue();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">case</span> BOOLEAN:<span class="comment">//布尔</span></span><br><span class="line">                                System.out.print(<span class="string">"【BOOLEAN】"</span>);</span><br><span class="line">                                cellValue = String.valueOf(cell.getBooleanCellValue());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">case</span> BLANK:<span class="comment">//空</span></span><br><span class="line">                                System.out.print(<span class="string">"【BLANK】"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">case</span> NUMERIC:</span><br><span class="line">                                System.out.print(<span class="string">"【NUMERIC】"</span>);</span><br><span class="line">                                <span class="comment">//cellValue = String.valueOf(cell.getNumericCellValue());</span></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;<span class="comment">//日期</span></span><br><span class="line">                                    System.out.print(<span class="string">"【日期】"</span>);</span><br><span class="line">                                    Date date = cell.getDateCellValue();</span><br><span class="line">                                    cellValue = <span class="keyword">new</span> DateTime(date).toString(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="comment">// 不是日期格式，则防止当数字过长时以科学计数法显示</span></span><br><span class="line">                                    System.out.print(<span class="string">"【转换成字符串】"</span>);</span><br><span class="line">                                    cell.setCellType(CellType.STRING);</span><br><span class="line">                                    cellValue = cell.toString();</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">case</span> ERROR:</span><br><span class="line">                                System.out.print(<span class="string">"【数据类型错误】"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        System.out.println(cellValue);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 公式，了解</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFormula</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(path + <span class="string">"计算公式.xls"</span>);</span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook(is);</span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 读取第五行第一列</span></span><br><span class="line">        Row row = sheet.getRow(<span class="number">4</span>);</span><br><span class="line">        Cell cell = row.getCell(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//公式计算器</span></span><br><span class="line">        FormulaEvaluator formulaEvaluator = <span class="keyword">new</span> HSSFFormulaEvaluator((HSSFWorkbook) workbook);</span><br><span class="line">        <span class="comment">// 输出单元内容</span></span><br><span class="line">        CellType cellType = cell.getCellType();</span><br><span class="line">        <span class="keyword">switch</span> (cellType) &#123;</span><br><span class="line">            <span class="keyword">case</span> FORMULA:<span class="comment">//公式</span></span><br><span class="line">                <span class="comment">//得到公式</span></span><br><span class="line">                String formula = cell.getCellFormula();</span><br><span class="line">                System.out.println(formula);</span><br><span class="line">                CellValue evaluate = formulaEvaluator.evaluate(cell);</span><br><span class="line">                <span class="comment">//String cellValue = String.valueOf(evaluate.getNumberValue());</span></span><br><span class="line">                String cellValue = evaluate.formatAsString();</span><br><span class="line">                System.out.println(cellValue);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、EasyExcel操作">3、EasyExcel操作</h3>
<p>Easy Excel官方文档：<a href="https://www.yuque.com/easyexcel/doc/easyexcel" target="_blank" rel="noopener">https://www.yuque.com/easyexcel/doc/easyexcel</a></p>
<p>导入maven依赖，注意里面已经存在<code>poi</code>和<code>poi-ooxml</code>依赖，需要注释刚才我们自己加上去的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>读写都在文档中已详细写明</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习笔记</title>
    <url>/posts/5177b49d.html</url>
    <content><![CDATA[<h2 id="一、简介">一、简介</h2>
<h3 id="MyBatis是什么">MyBatis是什么</h3>
<ul>
<li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的<strong>持久层框架</strong>。</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li>
<li>MyBatis 可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（ Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li>
</ul>
<blockquote>
<p><a href="https://mybatis.org/mybatis-3/index.html" target="_blank" rel="noopener">Mabits官方文档</a></p>
</blockquote>
<a id="more"></a>
<h2 id="二、Mybatis配置">二、Mybatis配置</h2>
<h3 id="1-数据准备">1.数据准备</h3>
<p>在MySQL数据库创建一数据库实例<code>learnmybatis</code>，在其创建一张表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">	last_name <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">	gender <span class="built_in">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	email <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>创建对应的JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String lastName;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">	<span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//getter and setter and toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>pom.xml中引入依赖，注意引入最新版</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>MyBatis 的配置文件包含了影响 MyBatis 行为甚深的设置（ settings）和属性（ properties）信息。文档的顶层结构如下：</p>
<ul>
<li>configuration 配置
<ul>
<li>properties 属性</li>
<li>settings 设置</li>
<li>typeAliases 类型命名</li>
<li>typeHandlers 类型处理器</li>
<li>objectFactory 对象工厂</li>
<li>plugins 插件</li>
<li>environments 环境
<ul>
<li>environment 环境变量
<ul>
<li>transactionManager 事务管理器</li>
<li>dataSource 数据源</li>
</ul>
</li>
</ul>
</li>
<li>databaseIdProvider 数据库厂商标识</li>
<li>mappers 映射器</li>
</ul>
</li>
</ul>
<p><a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">官方文档</a></p>
<h3 id="2-Mybatis全局配置">2.Mybatis全局配置</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/learnmybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里填写resource下的路径--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"c01/EmployeeMapper.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-全局配置文件-properties外部引入">3.全局配置文件-properties外部引入</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		1、mybatis可以使用properties来引入外部properties配置文件的内容；</span></span><br><span class="line"><span class="comment">		resource：引入类路径下的资源</span></span><br><span class="line"><span class="comment">		url：引入网络路径或者磁盘路径下的资源</span></span><br><span class="line"><span class="comment">	  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span> =<span class="string">"dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在resource下中创建dbconfig.properties文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;learnmybatis?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure>
<h3 id="4-配置文件常用配置">4.配置文件常用配置</h3>
<ul>
<li><strong>settings-运行时行为设置</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		2、settings包含很多重要的设置项</span></span><br><span class="line"><span class="comment">		setting:用来设置每一个设置项</span></span><br><span class="line"><span class="comment">			name：设置项名</span></span><br><span class="line"><span class="comment">			value：设置项取值</span></span><br><span class="line"><span class="comment">		这里设置驼峰命名法</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">更多设置</a></p>
<p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">类型处理器</a></p>
<ul>
<li><strong>typeAliases-别名</strong></li>
</ul>
<p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。可以在xml配置<code>&lt;typeAliases&gt;</code>，也可以在类上加注解<code>@Alias</code>不过为了好排查，一般都写全类名。</p>
<ul>
<li><strong>enviroments-运行环境</strong>
<ul>
<li>id：指定当前环境的唯一标识</li>
<li>transactionManager、和dataSource都必须有</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<h2 id="三、Mybatis-常用操作">三、Mybatis 常用操作</h2>
<h3 id="1-基础操作">1.基础操作</h3>
<ul>
<li>cache –命名空间的二级缓存配置</li>
<li>cache-ref – 其他命名空间缓存配置的引用。</li>
<li>resultMap – 自定义结果集映射</li>
<li>parameterMap – <strong>已废弃</strong>！老式风格的参数映射</li>
<li>sql –抽取可重用语句块。</li>
<li>insert – 映射插入语句</li>
<li>update – 映射更新语句</li>
<li>delete – 映射删除语句</li>
<li>select – 映射查询语句</li>
</ul>
<p><code>EmployeeMapper.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">    <span class="comment">//也可以通过注解方式</span></span><br><span class="line">    <span class="comment">//@Select("select * from employee where id = #&#123;id&#125;")</span></span><br><span class="line">    <span class="comment">// @Results(&#123;</span></span><br><span class="line">    <span class="comment">//         @Result(id=true,column="id",property="id")</span></span><br><span class="line">    <span class="comment">// )&#125;</span></span><br><span class="line">    <span class="comment">// public Employee getEmpById(Integer id);</span></span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>EmployeeMapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里修改自己的mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">		select * from employee where id = #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- public void addEmp(Employee employee); </span></span><br><span class="line"><span class="comment">    插入自增返回主键 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmp"</span> <span class="attr">parameterType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line">		insert into employee(last_name,email,gender) </span><br><span class="line">		values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- public void updateEmp(Employee employee);  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">		update employee </span><br><span class="line">		set last_name=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;</span><br><span class="line">		where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- public void deleteEmpById(Integer id); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteEmpById"</span>&gt;</span></span><br><span class="line">		delete from employee where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>parameterType：参数类型，可以省略，</li>
<li>获取自增主键的值：
<ul>
<li>mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；</li>
<li>useGeneratedKeys=“true”；使用自增主键获取主键值策略</li>
<li>keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性</li>
</ul>
</li>
</ul>
<h3 id="2-映射文件-参数处理">2.映射文件-参数处理</h3>
<p>4种映射文件，多个参数会被封装成 一个map</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 多个参数，不能直写id或lastName，否则抛出 org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [1, 0, param1, param2]--&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdAndLastName"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> 		select * from tbl_employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdAndLastName2"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> 		select * from employee where id = #&#123;0&#125; and last_name=#&#123;1&#125;</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdAndLastName3"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> 		select * from employee where id = #&#123;param1&#125; and last_name=#&#123;param2&#125;</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdAndLastName4"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line"> 		select * from employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdAndLastName</span><span class="params">(Integer id, String name)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdAndLastName2</span><span class="params">(Integer id, String name)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdAndLastName3</span><span class="params">(Integer id, String name)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdAndLastName4</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"lastName"</span>)</span>String name)</span>;</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p><strong>参数处理#{}与${}取值区别</strong></p>
<ul>
<li><code>#{}</code> : 是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入</li>
<li><code>${}</code> : 取出的值<strong>直接拼装</strong>在sql语句中；会有安全问题；</li>
</ul>
<h3 id="3-Mybatis-高级操作-一对多、多对一">3.Mybatis 高级操作(一对多、多对一)</h3>
<p><strong>select-记录封装map</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//多条记录封装一个map：Map&lt;Integer,Employee&gt;:键是这条记录的主键，值是记录封装后的javaBean</span></span><br><span class="line">	<span class="comment">//@MapKey:告诉mybatis封装这个map的时候使用哪个属性作为map的key</span></span><br><span class="line">	<span class="meta">@MapKey</span>(<span class="string">"lastName"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Employee&gt; <span class="title">getEmpByLastNameLikeReturnMap</span><span class="params">(String lastName)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//返回一条记录的map；key就是列名，值就是对应的值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getEmpByIdReturnMap</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p><strong>select-resultMap-自定义结果映射规则</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--自定义某个javaBean的封装规则</span></span><br><span class="line"><span class="comment">	type：自定义规则的Java类型</span></span><br><span class="line"><span class="comment">	id:唯一id方便引用</span></span><br><span class="line"><span class="comment">	  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MySimpleEmp"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--指定主键列的封装规则</span></span><br><span class="line"><span class="comment">		id定义主键会底层有优化；</span></span><br><span class="line"><span class="comment">		column：指定哪一列</span></span><br><span class="line"><span class="comment">		property：指定对应的javaBean属性</span></span><br><span class="line"><span class="comment">		  --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 定义普通列封装规则 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- resultMap:自定义结果集映射规则；  --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- public Employee getEmpById(Integer id); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdWithResultMap"</span>  <span class="attr">resultMap</span>=<span class="string">"MySimpleEmp"</span>&gt;</span></span><br><span class="line">		select * from employee where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>select-resultMap-关联查询</strong></p>
<p>新建2个实体类，并创建好数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String departmentName;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Employee&gt; emps;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//getter and setter and toString()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">private</span> Department department;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	<span class="comment">//add department's getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mapper.xml文件（多对一）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 联合查询：级联属性封装结果集--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyDifEmp"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"department_id"</span> <span class="attr">property</span>=<span class="string">"department.id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"department_name"</span> <span class="attr">property</span>=<span class="string">"department.departmentName"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--  association可以指定联合的javaBean对象 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyDifEmp2"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--  association可以指定联合的javaBean对象</span></span><br><span class="line"><span class="comment">		property="dept"：指定哪个属性是联合的对象</span></span><br><span class="line"><span class="comment">		javaType:指定这个属性对象的类型[不能省略]</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"department"</span> <span class="attr">javaType</span>=<span class="string">"com.lun.c01.helloworld.bean.Department"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"department_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"department_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	<span class="comment">&lt;!--  public Employee getEmpAndDept(Integer id);--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpAndDept"</span> <span class="attr">resultMap</span>=<span class="string">"MyDifEmp"</span>&gt;</span></span><br><span class="line">		SELECT</span><br><span class="line">			e.id id,e.last_name last_name,e.gender gender,</span><br><span class="line">			e.department_id department_id, d.department_name department_name </span><br><span class="line">		FROM employee e, department d</span><br><span class="line">		WHERE e.department_id=d.id AND e.id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p><strong>select-resultMap-关联查询-association分步查询</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- association分步查询  --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 使用association进行分步查询：</span></span><br><span class="line"><span class="comment">		1、先按照员工id查询员工信息</span></span><br><span class="line"><span class="comment">		2、根据查询员工信息中的department_id值去部门表查出部门信息</span></span><br><span class="line"><span class="comment">		3、部门设置到员工中；</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--  id  last_name  email   gender    d_id   --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyEmpByStep"</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">	 	<span class="comment">&lt;!-- association定义关联对象的封装规则</span></span><br><span class="line"><span class="comment">	 		select:表明当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment">	 		column:指定将哪一列的值传给这个方法</span></span><br><span class="line"><span class="comment">	 		</span></span><br><span class="line"><span class="comment">	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性</span></span><br><span class="line"><span class="comment">	 	 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"department"</span> </span></span><br><span class="line"><span class="tag">	 		<span class="attr">select</span>=<span class="string">"com.lun.c03.mapper.dao.DepartmentMapper.getDeptById"</span></span></span><br><span class="line"><span class="tag">	 		<span class="attr">column</span>=<span class="string">"department_id"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--  public Employee getEmpByIdStep(Integer id);--&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByIdStep"</span> <span class="attr">resultMap</span>=<span class="string">"MyEmpByStep"</span>&gt;</span></span><br><span class="line">	 	select * from employee where id=#&#123;id&#125;</span><br><span class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>延迟加载</strong></p>
<p>我们每次查询Employee对象的时候，都将一起查询出来。部门信息在我们使用的时候再去查询；分段查询的基础之上加上两个配置：</p>
<p>在全局配置文件中配置，实现<strong>懒加载</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">		<span class="comment">&lt;!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题  --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>select-resultMap-关联查询-collection定义关联集合封装规则</strong></p>
<p>一对多</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.DepartmentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	public class Department &#123;</span></span><br><span class="line"><span class="comment">			private Integer id;</span></span><br><span class="line"><span class="comment">			private String departmentName;</span></span><br><span class="line"><span class="comment">			private List&lt;Employee&gt; emps;</span></span><br><span class="line"><span class="comment">	  did  dept_name  ||  eid  last_name  email   gender  </span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	 </span><br><span class="line">	<span class="comment">&lt;!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Department"</span> <span class="attr">id</span>=<span class="string">"MyDept"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"department_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			collection定义关联集合类型的属性的封装规则 </span></span><br><span class="line"><span class="comment">			ofType:指定集合里面元素的类型</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> <span class="attr">ofType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 定义这个集合中元素的封装规则 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"eid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- collection：分段查询 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Department"</span> <span class="attr">id</span>=<span class="string">"MyDeptStep"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"department_name"</span> <span class="attr">property</span>=<span class="string">"departmentName"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--多列传值column="&#123;key1=column1,key2=column2&#125;"--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> </span></span><br><span class="line"><span class="tag">			<span class="attr">select</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper.getEmpsByDeptId"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	<span class="comment">&lt;!-- public Department getDeptByIdPlus(Integer id); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptByIdPlus"</span> <span class="attr">resultMap</span>=<span class="string">"MyDept"</span>&gt;</span></span><br><span class="line">		SELECT d.id did,d.department_name department_name,</span><br><span class="line">				e.id eid,e.last_name last_name,</span><br><span class="line">				e.email email,e.gender gender</span><br><span class="line">		FROM department d LEFT JOIN employee e ON d.id=e.department_id</span><br><span class="line">		WHERE d.id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p>select-resultMap-discriminator鉴别器**</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c03.mapper.dao.EmployeeMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- =======================鉴别器============================ --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;discriminator javaType=""&gt;&lt;/discriminator&gt;</span></span><br><span class="line"><span class="comment">		鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为</span></span><br><span class="line"><span class="comment">		封装Employee：</span></span><br><span class="line"><span class="comment">			如果查出的是女生：就把部门信息查询出来，否则不查询；</span></span><br><span class="line"><span class="comment">			如果是男生，把last_name这一列的值赋值给email;</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span> <span class="attr">id</span>=<span class="string">"MyEmpDis"</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">	 	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	 		column：指定判定的列名</span></span><br><span class="line"><span class="comment">	 		javaType：列值对应的java类型  --&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">"string"</span> <span class="attr">column</span>=<span class="string">"gender"</span>&gt;</span></span><br><span class="line">	 		<span class="comment">&lt;!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap--&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">	 			<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"department"</span> </span></span><br><span class="line"><span class="tag">			 		<span class="attr">select</span>=<span class="string">"com.lun.c03.mapper.dao.DepartmentMapper.getDeptById"</span></span></span><br><span class="line"><span class="tag">			 		<span class="attr">column</span>=<span class="string">"department_id"</span> <span class="attr">fetchType</span>=<span class="string">"eager"</span> &gt;</span></span><br><span class="line">		 		<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">	 		<span class="comment">&lt;!--男生 ;如果是男生，把last_name这一列的值赋值给email; --&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">		 		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">			 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">			 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">			 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">&lt;!--  public Employee getEmpByIdStep(Integer id);--&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsWithDiscriminator"</span> <span class="attr">resultMap</span>=<span class="string">"MyEmpDis"</span>&gt;</span></span><br><span class="line">	 	select * from employee limit 10</span><br><span class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-动态sql">4.动态sql</h3>
<p>MyBatis采用功能强大的基于 OGNL 的表达式来简化操作。</p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<p>严格来说，在XML中只有”&lt;”和”&amp;”是非法的，需要转义，其中转义字符</p>
<table>
<thead>
<tr>
<th style="text-align:center"><code>&amp;lt;</code></th>
<th style="text-align:center">&lt;</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&amp;gt;</code></td>
<td style="text-align:center">&gt;</td>
</tr>
<tr>
<td style="text-align:center"><code>&amp;amp;</code></td>
<td style="text-align:center">&amp;</td>
</tr>
<tr>
<td style="text-align:center"><code>&amp;apos;</code></td>
<td style="text-align:center">’</td>
</tr>
<tr>
<td style="text-align:center"><code>&amp;quot;</code></td>
<td style="text-align:center">&quot;</td>
</tr>
</tbody>
</table>
<p><strong>if判断</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c04.dynamicsql.DynamicSQLMapper"</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 --&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsByConditionIf(Employee employee); --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionIf"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">	 	select * from employee where</span><br><span class="line">	 	<span class="comment">&lt;!-- test：判断表达式（OGNL）</span></span><br><span class="line"><span class="comment">	 	OGNL参照PPT或者官方文档。</span></span><br><span class="line"><span class="comment">	 	  	 c:if  test</span></span><br><span class="line"><span class="comment">	 	从参数中取值进行判断</span></span><br><span class="line"><span class="comment">	 	遇见特殊符号应该去写转义字符：</span></span><br><span class="line"><span class="comment">	 	&amp;&amp;：</span></span><br><span class="line"><span class="comment">	 	--&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">	 		id=#&#123;id&#125;</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">	 		and last_name like #&#123;lastName&#125;</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">	 		and email=#&#123;email&#125;</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">	 	<span class="comment">&lt;!-- ognl会进行字符串与数字的转换判断  "0"==0 --&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">	 	 	and gender=#&#123;gender&#125;</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		查询的时候如果某些条件没带可能sql拼装会有问题</span></span><br><span class="line"><span class="comment">		1. 给where后面加上1=1，以后的条件都and xxx。</span></span><br><span class="line"><span class="comment">		2. mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼		装的sql，多出来的and或者or去掉（where只会去掉第一个多出来的and或者or，但最后一个		 多出来的and或者or则**不会去掉**）。</span></span><br><span class="line"><span class="comment">			--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionIfWithWhere"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">	 	select * from employee</span><br><span class="line">	 	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">		 		id=#&#123;id&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">		 		and last_name like #&#123;lastName&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">		 		and email=#&#123;email&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">		 	<span class="comment">&lt;!-- ognl会进行字符串与数字的转换判断  "0"==0 --&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">		 	 	and gender=#&#123;gender&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--public void updateEmp(Employee employee);  --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">	 	<span class="comment">&lt;!-- Set标签的使用 --&gt;</span></span><br><span class="line">	 	update employee </span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line">				last_name=#&#123;lastName&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></span><br><span class="line">				email=#&#123;email&#125;,</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender!=null"</span>&gt;</span></span><br><span class="line">				gender=#&#123;gender&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">		where id=#&#123;id&#125; </span><br><span class="line">	<span class="comment">&lt;!-- 		</span></span><br><span class="line"><span class="comment">		Trim：更新拼串</span></span><br><span class="line"><span class="comment">		update tbl_employee </span></span><br><span class="line"><span class="comment">		&lt;trim prefix="set" suffixOverrides=","&gt;</span></span><br><span class="line"><span class="comment">			&lt;if test="lastName!=null"&gt;</span></span><br><span class="line"><span class="comment">				last_name=#&#123;lastName&#125;,</span></span><br><span class="line"><span class="comment">			&lt;/if&gt;</span></span><br><span class="line"><span class="comment">			&lt;if test="email!=null"&gt;</span></span><br><span class="line"><span class="comment">				email=#&#123;email&#125;,</span></span><br><span class="line"><span class="comment">			&lt;/if&gt;</span></span><br><span class="line"><span class="comment">			&lt;if test="gender!=null"&gt;</span></span><br><span class="line"><span class="comment">				gender=#&#123;gender&#125;</span></span><br><span class="line"><span class="comment">			&lt;/if&gt;</span></span><br><span class="line"><span class="comment">		&lt;/trim&gt;</span></span><br><span class="line"><span class="comment">		where id=#&#123;id&#125;  --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>trim-自定义字符串截取</strong></p>
<p>后面多出的and或者or where标签不能解决</p>
<ul>
<li>prefix=&quot;&quot;:前缀：trim标签体中是整个字符串拼串后的结果。
<ul>
<li>prefix给拼串后的整个字符串加一个前缀</li>
</ul>
</li>
<li>prefixOverrides=&quot;&quot;:
<ul>
<li>前缀覆盖： 去掉整个字符串前面多余的字符</li>
</ul>
</li>
<li>suffix=&quot;&quot;:后缀
<ul>
<li>suffix给拼串后的整个字符串加一个后缀</li>
</ul>
</li>
<li>suffixOverrides=&quot;&quot;
<ul>
<li>后缀覆盖：去掉整个字符串后面多余的字符</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c04.dynamicsql.DynamicSQLMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">&lt;!--public List&lt;Employee&gt; getEmpsByConditionTrim(Employee employee);  --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionTrim"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">	 	select * from employee</span><br><span class="line">	 	<span class="comment">&lt;!-- 自定义字符串的截取规则 --&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">		 		id=#&#123;id&#125; and</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">		 		last_name like #&#123;lastName&#125; and</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email!=null and email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>"</span>&gt;</span></span><br><span class="line">		 		email=#&#123;email&#125; and</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">		 	<span class="comment">&lt;!-- ognl会进行字符串与数字的转换判断  "0"==0 --&gt;</span></span><br><span class="line">		 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender==0 or gender==1"</span>&gt;</span></span><br><span class="line">		 	 	gender=#&#123;gender&#125;</span><br><span class="line">		 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		 <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p><strong>choose-分支选择</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.c04.dynamicsql.DynamicSQLMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsByConditionChoose(Employee employee); --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">	 	select * from employee </span><br><span class="line">	 	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">	 		<span class="comment">&lt;!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 --&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">	 			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">	 				id=#&#123;id&#125;</span><br><span class="line">	 			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">	 			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName!=null"</span>&gt;</span></span><br><span class="line">	 				last_name like #&#123;lastName&#125;</span><br><span class="line">	 			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">	 			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"email!=null"</span>&gt;</span></span><br><span class="line">	 				email = #&#123;email&#125;</span><br><span class="line">	 			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">	 			<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">	 				gender = 0</span><br><span class="line">	 			<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">	 		<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>foreach-遍历集合</strong></p>
<ul>
<li>collection：指定要遍历的集合：
<ul>
<li>list类型的参数会特殊处理封装在map中，map的key就叫list</li>
</ul>
</li>
<li>item：将当前遍历出的元素赋值给指定的变量</li>
<li>separator:每个元素之间的分隔符</li>
<li>open：遍历出所有结果拼接一个开始的字符</li>
<li>close:遍历出所有结果拼接一个结束的字符</li>
<li>index:索引。遍历list的时候是index就是索引，item就是当前值
<ul>
<li>遍历map的时候index表示的就是map的key，item就是map的值</li>
</ul>
</li>
<li><code>#{变量名}</code>就能取出变量的值也就是当前遍历出的元素</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--public List&lt;Employee&gt; getEmpsByConditionForeach(List&lt;Integer&gt; ids);  --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpsByConditionForeach"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.c01.helloworld.bean.Employee"</span>&gt;</span></span><br><span class="line">	 	select * from employee</span><br><span class="line">	 	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"item_id"</span> <span class="attr">separator</span>=<span class="string">","</span></span></span><br><span class="line"><span class="tag">	 		<span class="attr">open</span>=<span class="string">"where id in("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">	 		#&#123;item_id&#125;</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 批量保存 --&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--public void addEmps(@Param("emps")List&lt;Employee&gt; emps);  --&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span>&gt;</span></span><br><span class="line">	 	insert into employee(last_name,email,gender,department_id) </span><br><span class="line">		values</span><br><span class="line">		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">			(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.department.id&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">insert</span>&gt;</span><span class="comment">&lt;!--   --&gt;</span></span><br><span class="line">	 </span><br><span class="line">	 <span class="comment">&lt;!-- 这种方式需要数据库连接属性allowMultiQueries=true；</span></span><br><span class="line"><span class="comment">	 	这种分号分隔多个sql可以用于其他的批量操作（删除，修改） --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps2"</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line">	 		insert into employee(last_name,email,gender,department_id)</span><br><span class="line">	 		values(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.department.id&#125;)</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>sql-抽取可重用的sql片段</strong></p>
<p>抽取可重用的sql片段。方便后面引用：</p>
<ol>
<li>sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用</li>
<li>include来引用已经抽取的sql：</li>
<li>include还可以自定义一些property，sql标签内部就能使用自定义的属性
<ul>
<li>include-property：取值的正确方式${prop},</li>
<li>不能使用<code>#{}</code>，而使用<code>${}</code></li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">	select</span><br><span class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t2"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">	from some_table t1</span><br><span class="line">		cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">		employee_id,last_name,email</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">		last_name,email,gender,d_id</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmps"</span>&gt;</span></span><br><span class="line">	insert into tbl_employee(</span><br><span class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColumn"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span><span class="comment">&lt;!-- 使用地方 --&gt;</span></span><br><span class="line">	) </span><br><span class="line">	values</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"emps"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">		(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="四、缓存">四、缓存</h2>
<p><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache" target="_blank" rel="noopener">MyBatis官方文档</a></p>
<p>MyBatis 包含一个非常强大的查询缓存特性，它可以非常方便地配置和定制。缓存可以极大的提升查询效率。</p>
<p>MyBatis系统中默认定义了两级缓存，一级缓存和二级缓存。</p>
<ol>
<li>默认情况下，只有一级缓存（ SqlSession级别的缓存，也称为本地缓存）开启。</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高扩展性。 MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
<li>对于Mabtis查询，查询过程默认是二级缓存-&gt;一级缓存-&gt;数据库</li>
</ol>
<h2 id="五、其他">五、其他</h2>
<p><code>pagehelper插件</code></p>
<p><code>Mabatis逆向工程</code></p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus学习笔记</title>
    <url>/posts/9b26b051.html</url>
    <content><![CDATA[<h2 id="一、简介">一、简介</h2>
<blockquote>
<p>Mybatis-plus官网：<a href="https://mp.baomidou.com/" target="_blank" rel="noopener">https://mp.baomidou.com/</a></p>
</blockquote>
<p>MyBatis-Plus（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生，它具有以下特性</p>
<a id="more"></a>
<ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<h2 id="二、快速入门">二、快速入门</h2>
<p>首先在数据库创建ssmdemo数据库，运行sql语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">id</span>, <span class="keyword">name</span>, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>);</span><br><span class="line"><span class="comment">-- 真实开发中，version（乐观锁）、deleted（逻辑删除）、gmt_create、gmt_modified</span></span><br></pre></td></tr></table></figure>
<p>创建springboot项目，引入依赖文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus 是自己开发，并非官方的！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在resource资源路径下<code>application.yml</code>中配置，其中配置日志为了显示具体mabatis日志输出</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql 5 驱动不同 com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># mysql 8 驱动不同com.mysql.cj.jdbc.Driver、需要增加时区的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssmdemo?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<p>创建po实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建mapper类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 所有的CRUD操作都已经编写完成了</span></span><br><span class="line">    <span class="comment">// 你不需要像以前的配置一大堆文件了！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>在主启动类上扫描我们的mapper包下的所有接口(十分重要)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.mybatis.demo.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后在测试类中测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 继承了BaseMapper，所有的方法都来自己父类</span></span><br><span class="line">    <span class="comment">// 我们也可以编写自己的扩展方法！</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 参数是一个 Wrapper ，条件构造器，这里我们先不用 null</span></span><br><span class="line">    <span class="comment">// 查询全部用户</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"test"</span>);</span><br><span class="line">        user.setAge(<span class="number">3</span>);</span><br><span class="line">        user.setEmail(<span class="string">"24736743@qq.com"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = userMapper.insert(user); <span class="comment">// 帮我们自动生成id</span></span><br><span class="line">        System.out.println(result); <span class="comment">// 受影响的行数</span></span><br><span class="line">        System.out.println(user); <span class="comment">// 发现，id会自动回填</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 测试更新</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">// 通过条件自动拼接动态sql</span></span><br><span class="line">        user.setId(<span class="number">5L</span>);</span><br><span class="line">        user.setName(<span class="string">"123456"</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="comment">// 注意：updateById 但是参数是一个 对象！</span></span><br><span class="line">        <span class="keyword">int</span> i = userMapper.updateById(user);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、CRUD扩展">三、CRUD扩展</h2>
<h3 id="1、主键生成策略">1、主键生成策略</h3>
<p>实体类字段上 <code>@TableId(type = IdType.xxx)</code>，其中IdTyoe的枚举类型如下</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>AUTO</td>
<td>数据库ID自增</td>
</tr>
<tr>
<td>NONE</td>
<td>无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td>
</tr>
<tr>
<td>INPUT</td>
<td>insert前自行set主键值</td>
</tr>
<tr>
<td>ASSIGN_ID</td>
<td>分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td>
</tr>
<tr>
<td>ASSIGN_UUID</td>
<td>分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td>
</tr>
</tbody>
</table>
<p><strong>雪花算法：</strong><br>
snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。可以保证几乎全球唯一！</p>
<p><strong>主键自增</strong></p>
<ol>
<li>实体类字段上 <code>@TableId(type = IdType.AUTO)</code></li>
<li>数据库字段一定要是自增！</li>
</ol>
<h3 id="2、自动填充">2、自动填充</h3>
<p>创建时间、修改时间！这些个操作一遍都是自动化完成的，我们不希望手动更新！</p>
<ul>
<li>
<h4 id="数据库级别（工作中不允许修改数据库）"><strong>数据库级别</strong>（工作中不允许修改数据库）</h4>
</li>
</ul>
<ol>
<li>首先在MySql数据库中添加两个字段<code>create_time</code>和<code>update_time</code>，同时设置默认值为<code>根据当前时间戳更新</code></li>
<li>在实体类User插入两个字段</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<h4 id="代码级别">代码级别</h4>
</li>
</ul>
<ol>
<li>删除数据库datetime的默认值</li>
<li>实体类字段属性上增加注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字段添加填充内容</span></span><br><span class="line"><span class="meta">@TableField</span>(fill = FieldFill.INSERT)</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写处理器来处理这个注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start insert fill....."</span>);</span><br><span class="line">        <span class="comment">// setFieldValByName(String fieldName, Object fieldVal, MetaObject,metaObject</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"createTime"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start update fill....."</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、乐观锁">3、乐观锁</h3>
<blockquote>
<p>乐观锁 : 故名思意十分乐观，它总是认为不会出现问题，无论干什么不去上锁！如果出现了问题，再次更新值测试<br>
悲观锁：故名思意十分悲观，它总是认为总是出现问题，无论干什么都会上锁！再去操作！</p>
</blockquote>
<p>乐观锁实现方式</p>
<ul>
<li>取出记录时，获取当前version</li>
<li>更新时，带上这个version</li>
<li>执行更新时， set version = newVersion where version = oldVersion</li>
<li>如果version不对，就更新失败</li>
</ul>
<p>操作步骤</p>
<ol>
<li>给数据库增加version字段</li>
<li>在User实体类增加对应的字段</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span> <span class="comment">//乐观锁Version注解</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>注册组件</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扫描我们的 mapper 文件夹</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.mybatis.demo.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试乐观锁成功！</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 1、查询用户信息</span></span><br><span class="line">User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line"><span class="comment">// 2、修改用户信息</span></span><br><span class="line">user.setName(<span class="string">"test"</span>);</span><br><span class="line">user.setEmail(<span class="string">"zzzzz@163.com"</span>);</span><br><span class="line"><span class="comment">// 3、执行更新操作</span></span><br><span class="line">userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、普通查询操作">4、普通查询操作</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试批量查询！</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByBatchId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按条件查询之一使用map操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByBatchIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 自定义要查询</span></span><br><span class="line">    map.put(<span class="string">"name"</span>,<span class="string">"1234567"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="number">3</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、分页查询">5、分页查询</h3>
<ol>
<li>配置拦截器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扫描我们的 mapper 文件夹</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.mybatis.demo.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration -&gt; configuration.setUseDeprecatedExecutor(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>测试类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 参数一：当前页</span></span><br><span class="line">    <span class="comment">// 参数二：页面大小</span></span><br><span class="line">    <span class="comment">// 使用了分页插件之后，所有的分页操作也变得简单的！</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(page.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、逻辑删除">6、逻辑删除</h3>
<ol>
<li>首先在数据库中插入字段<code>deleted</code>，代表逻辑删除字段，设置默认为0</li>
<li>在User实体类添加属性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span> <span class="comment">//逻辑删除</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>配置<code>application.yml</code></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>测试</li>
</ol>
<p>配置好之后使用delete操作不会物理删除，而是进行逻辑删除，同时查询时自动过滤已被逻辑删除的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="7、条件生成器">7、条件生成器</h3>
<blockquote>
<p>详情请查看https://mp.baomidou.com/guide/wrapper.html</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询name不为空的用户，并且邮箱不为空的用户，年龄大于等于12</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper</span><br><span class="line">    .isNotNull(<span class="string">"name"</span>)</span><br><span class="line">    .isNotNull(<span class="string">"email"</span>)</span><br><span class="line">    .ge(<span class="string">"age"</span>,<span class="number">12</span>);</span><br><span class="line">    userMapper.selectList(wrapper).forEach(System.out::println); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8、逆向工程">8、逆向工程</h3>
<p>在<code>pom.xml</code>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编写代码生成器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 模块名 */</span></span><br><span class="line">        String moduleName = <span class="string">"bean"</span>;</span><br><span class="line">        <span class="comment">/** 基本包名 */</span></span><br><span class="line">        String basePackage = <span class="string">"com.zstu"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 作者 */</span></span><br><span class="line">        String authorName = <span class="string">"shawn"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 要生成的表名 */</span></span><br><span class="line">        String[] tables = &#123;<span class="string">"tb_student"</span>,<span class="string">"tb_label"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** table前缀 */</span></span><br><span class="line">        String prefix = <span class="string">"tb_"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 代码生成路径 */</span></span><br><span class="line">        String codePath = System.getProperty(<span class="string">"user.dir"</span>) + <span class="string">"/bean/src/main/java"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取代码生成器对象</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">//代码生成路径</span></span><br><span class="line">        gc.setOutputDir(codePath);</span><br><span class="line">        <span class="comment">//作者信息</span></span><br><span class="line">        gc.setAuthor(authorName);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//生成ID类型</span></span><br><span class="line">        gc.setIdType(IdType.AUTO);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setFileOverride(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//去掉Servce前缀</span></span><br><span class="line">        gc.setMapperName(<span class="string">"%sMapper"</span>);</span><br><span class="line">        gc.setXmlName(<span class="string">"%sMapper"</span>);</span><br><span class="line">        gc.setServiceName(<span class="string">"%sService"</span>);</span><br><span class="line">        gc.setServiceImplName(<span class="string">"%sServiceImpl"</span>);</span><br><span class="line">        gc.setEntityName(<span class="string">"%sEntity"</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/intelligent_lamp?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8"</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        <span class="comment">//设置模块名</span></span><br><span class="line">        <span class="comment">//没有第0步时此代码必写</span></span><br><span class="line">        pc.setModuleName(moduleName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、设置工程名</span></span><br><span class="line">        pc.setParent(basePackage);</span><br><span class="line">        <span class="comment">//设置包名</span></span><br><span class="line">        pc.setEntity(<span class="string">"entity"</span>);</span><br><span class="line">        pc.setMapper(<span class="string">"mapper"</span>);</span><br><span class="line">        pc.setService(<span class="string">"service"</span>);</span><br><span class="line">        pc.setController(<span class="string">"controller"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">//去除前缀</span></span><br><span class="line">        strategy.setTablePrefix(prefix);</span><br><span class="line">        <span class="comment">//数据库表名优先映射,配置</span></span><br><span class="line">        strategy.setInclude(tables);</span><br><span class="line">        <span class="comment">//下划线转驼峰命名的策略</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//数据库命名规则</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//自动生成lombok注解</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//自动添加控制结构</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//自动添加逻辑删除策略</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">"deleted"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7、设置自动填充策略</span></span><br><span class="line">        TableFill gmtCreatereate = <span class="keyword">new</span> TableFill(<span class="string">"create_time"</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="comment">//设置自动更新时间策略</span></span><br><span class="line">        TableFill gmtModifiedodified = <span class="keyword">new</span> TableFill(<span class="string">"update_time"</span>, FieldFill.UPDATE);</span><br><span class="line">        <span class="comment">//获取自动填充对象</span></span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加填充策略</span></span><br><span class="line">        tableFills.add(gmtCreatereate);</span><br><span class="line">        tableFills.add(gmtModifiedodified);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8、设置乐观锁策略</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">"version"</span>);</span><br><span class="line">        <span class="comment">//设置Restful风格</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置连接请求 http://localhost:8080/hello_id_2</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="9、其他">9、其他</h4>
<p>Sql性能分析</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基于OwnCloud搭建私有云盘</title>
    <url>/posts/11c723bd.html</url>
    <content><![CDATA[<h1>一、正常方式搭建OwnCloud</h1>
<p><a href="https://blog.csdn.net/Mr_Seng/article/details/105938578?biz_id=102&amp;utm_term=centos%E6%90%AD%E5%BB%BA%E7%BD%91%E7%9B%98&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-8-105938578&amp;spm=1018.2118.3001.4449" target="_blank" rel="noopener">centos 7搭建owncloud个人私有网盘</a><br>
<a href="https://blog.csdn.net/Huang6899587/article/details/84671034?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.add_param_isCf" target="_blank" rel="noopener">基于宝塔面板和nextcloud搭建自己的网盘</a></p>
<a id="more"></a>
<h1>二、基于Docker容器快速搭建</h1>
<p>这里默认已经下载安装好并成功启动了docker，并成功进行了配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拉取docker镜像</span></span><br><span class="line">docker pull owncloud</span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="comment">#创建文件存储路径，自定义但要记住该路径,下面是我个人路径</span></span><br><span class="line">mkdir /lxt/data/mysql</span><br><span class="line">mkdir /lxt/data/mysql/owncloud</span><br><span class="line">mkdir /lxt/data/owncloud</span><br><span class="line"><span class="comment">#设置权限</span></span><br><span class="line">chmod 770 /lxt/data</span><br></pre></td></tr></table></figure>
<p>分别运行以下两句代码，启动容器，注意要修改自己的个人路径，另外如果端口冲突可以自行设置端口号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动数据库</span></span><br><span class="line">docker run --name mysql-owncloud  -v /lxt/data/mysql/owncloud:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=password  -e MYSQL_DATABASE=owncloud  -e MYSQL_USER=owncloud  -e MYSQL_PASSWORD=password  -d -p 3307:3306 --restart unless-stopped mysql</span><br><span class="line"><span class="comment">#启动owncloud</span></span><br><span class="line">docker run --name=owncloud --link=mysql-owncloud:mysql-owncloud -v /var/data/owncloud:/var/www/html/data -p 80:80 -d --restart unless-stopped owncloud</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20201114134654202.png#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看启动的docker容器</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>最后注意开放相应的端口号，这里我开放了8000端口，最后访问<code>ip:端口</code>即可<br>
<img src="https://img-blog.csdnimg.cn/20201114135043686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<hr>
<p>参考文章<br>
<a href="https://blog.csdn.net/lionwerson/article/details/81775650?utm_medium=distribute.pc_relevant.none-task-blog-utm_term-2&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">https://blog.csdn.net/lionwerson/article/details/81775650?utm_medium=distribute.pc_relevant.none-task-blog-utm_term-2&amp;spm=1001.2101.3001.4242</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ownCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli脚手架三种搭建方式</title>
    <url>/posts/1c69613d.html</url>
    <content><![CDATA[<h3 id="1、基于2-x的旧模板">1、基于2.x的旧模板</h3>
<p> 默认已经安装好了<code>Node</code>和<code>Webpack</code><br>
1、全局安装vue-cli</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-cli -g</span><br></pre></td></tr></table></figure>
<p>查看版本输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure>
<p>2、vue-cli来创建一个基于 webpack 模板的新项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#my_project是项目名</span></span><br><span class="line">vue init webpack my_project</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>之后需要填写项目的一些基本配置，下面是我的配置<br>
<img src="https://img-blog.csdnimg.cn/20200430170320574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
3、运行vue-cli项目<br>
 进入项目，输入<code>npm run dev</code>之后项目就跑起来了，可以进入<code>localhost:8080</code>查看效果</p>
<h3 id="2、基于交互式命令创建新版vue项目">2、基于交互式命令创建新版vue项目</h3>
<p>1、安装新版脚手架<br>
 首先需要更新vue-cli脚手架，需要重新卸载安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#卸载旧版</span></span><br><span class="line">npm uninstall vue-cli -g</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装新版脚手架</span></span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<p><em>注：如何在安装新版的脚手架后要创建旧版项目，可以运行<code>npm install -g @vue/cli-init</code>后面操作就和安装旧版本一样了</em><br>
2、创建项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意这里不能用中文项目名</span></span><br><span class="line">vue create project1</span><br></pre></td></tr></table></figure>
<p>其中空格表示选中，回车确定，其配置项如下，这里我总的配置项，新建项目时会一个个选项进行询问。<br>
<img src="https://img-blog.csdnimg.cn/20200430171747210.png" alt="在这里插入图片描述"><br>
3、运行项目<br>
进入项目后<code>npm run serve</code>启动项目</p>
<h3 id="3、基于图形化界面创建新版vue项目">3、基于图形化界面创建新版vue项目</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在cmd窗口运行命令，进入图形化界面</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure>
<p>选择创建项目，后面的配置项和命令行类似，这里不多阐述了。<br>
<img src="https://img-blog.csdnimg.cn/20200430172209100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20200430172311886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
3、运行项目<br>
 创建好项目后选择任务，在这里serve是我们开发期间打包和运行，build是成品发布运行，我们选择serve，点击运行即可成功启动项目<br>
<img src="https://img-blog.csdnimg.cn/20200430172608398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合JWT实现前后端Token验证</title>
    <url>/posts/5cd97de5.html</url>
    <content><![CDATA[<h2 id="一、JWT介绍">一、JWT介绍</h2>
<h3 id="1、JWT简介">1、JWT简介</h3>
<blockquote>
<p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://link.jianshu.com?t=https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">(RFC 7519</a>).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>
<p>官网：<a href="https://jwt.io/introduction/" target="_blank" rel="noopener">https://jwt.io/introduction/</a></p>
</blockquote>
<a id="more"></a>
<h3 id="2、JWT认证和session认证的区别">2、JWT认证和session认证的区别</h3>
<h4 id="session认证">session认证</h4>
<p>http协议是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发送的请求，所以为了让我们的应用能识别是哪个用户发出的，我们只能在服务器存储一份用户登陆的信息，这份登陆信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用个就能识别请求来自哪个用户了，这就是传统的基于sessino认证。</p>
<h4 id="JWT认证">JWT认证</h4>
<p>基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或会话信息。这也就意味着JWT认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p>
<h3 id="3、JWT认证过程">3、JWT认证过程</h3>
<p><img src="https://img-blog.csdnimg.cn/20210127183348127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol>
<li>用户使用账号和密码发出post请求；</li>
<li>服务器使用私钥创建一个jwt；</li>
<li>服务器返回这个jwt给浏览器；</li>
<li>浏览器将该jwt串在请求头中像服务器发送请求；</li>
<li>服务器验证该jwt；</li>
<li>返回响应的资源给浏览器</li>
</ol>
<h3 id="4、JWT结构">4、JWT结构</h3>
<p>JWT是由三段信息构成的，将这三段信息文本用<code>.</code>连接一起就构成了JWT字符串。就像这样:<code>xxxxx.yyyyy.zzzzz</code>。JWT包含了三部分：<br>
<strong>Header</strong> 头部(标题包含了令牌的元数据，并且包含签名和/或加密算法的类型)<br>
<strong>Payload</strong> 负载 (类似于飞机上承载的物品)<br>
<strong>Signature</strong> 签名/签证</p>
<h2 id="二、springboot和JWT整合">二、springboot和JWT整合</h2>
<p><strong>在<code>pom.xml</code>中添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--注意版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>创建<code>annotation</code>自定义注解包，在包下创建<code>PassToken</code>和<code>UserLoginToken</code>两个注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法上有该注解就放行</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PassToken &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示需要token验证</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserLoginToken &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>配置拦截器，实现一个拦截器就需要实现<code>HandlerInterceptor</code>接口</strong></p>
<p><code>HandlerInterceptor</code>接口主要定义了三个方法<br>
<strong>1.<code>boolean preHandle ()</code>：</strong><br>
预处理回调方法,实现处理器的预处理，第三个参数为响应的处理器,自定义<code>Controller</code>,返回值为<code>true</code>表示继续流程（如调用下一个拦截器或处理器）或者接着执行<br>
<code>postHandle()</code>和<code>afterCompletion()</code>；<code>false</code>表示流程中断，不会继续调用其他的拦截器或处理器，中断执行。</p>
<p><strong>2.<code>void postHandle()</code>：</strong><br>
后处理回调方法，实现处理器的后处理（<code>DispatcherServlet</code>进行视图返回渲染之前进行调用），此时我们可以通过<code>modelAndView</code>（模型和视图对象）对模型数据进行处理或对视图进行处理，<code>modelAndView</code>也可能为<code>null</code>。</p>
<p><strong>3.<code>void afterCompletion()</code>:</strong><br>
整个请求处理完毕回调方法,该方法也是需要当前对应的<code>Interceptor</code>的<code>preHandle()</code>的返回值为true时才会执行，也就是在<code>DispatcherServlet</code>渲染了对应的视图之后执行。用于进行资源清理。整个请求处理完毕回调方法。如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于<code>try-catch-finally</code>中的<code>finally</code>，但仅调用处理器执行链中</p>
<p><strong>代码主要流程:</strong></p>
<p><strong>1.从 <code>http</code> 请求头中取出 <code>token</code>，<br>
2.判断是否映射到方法<br>
3.检查是否有<code>passtoken</code>注释，有则跳过认证<br>
4.检查有没有需要用户登录的注解，有则需要取出并验证<br>
5.认证通过则可以访问，不通过会报相关错误信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MyInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 从 http 请求头中取出 token</span></span><br><span class="line">        String token = httpServletRequest.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        <span class="comment">// 如果不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span>(!(object <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HandlerMethod handlerMethod=(HandlerMethod)object;</span><br><span class="line">        Method method=handlerMethod.getMethod();</span><br><span class="line">        <span class="comment">//检查是否有passtoken注释，有则跳过认证</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(PassToken<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            PassToken passToken = method.getAnnotation(PassToken<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (passToken.required()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查有没有需要用户权限的注解</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(UserLoginToken<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            UserLoginToken userLoginToken = method.getAnnotation(UserLoginToken<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (userLoginToken.required()) &#123;</span><br><span class="line">                <span class="comment">// 执行认证</span></span><br><span class="line">                <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"无token，请重新登录"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取 token 中的 user id</span></span><br><span class="line">                String userId;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    userId = JWT.decode(token).getAudience().get(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JWTDecodeException j) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"401"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这里根据userId从数据库查找user</span></span><br><span class="line">                User user = userService.findUserById(userId);</span><br><span class="line">                <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户不存在，请重新登录"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 验证 token</span></span><br><span class="line">                JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(user.getPwd())).build();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jwtVerifier.verify(token);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"401"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// logger.info("执行完方法之后进执行(Controller方法调用之后)，但是此时还没进行视图渲染");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// logger.info("整个请求都处理完咯，DispatcherServlet也渲染了对应的视图咯，此时我可以做一些清理的工作了");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中我的User类(已简化)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后还要配置拦截器，顺便把跨域配置给解决了，这里的WebMvcConfigurer可以扩展其他自定义功能，详情可查看<a href="https://docs.spring.io/spring-boot/docs/2.5.0-SNAPSHOT/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration" target="_blank" rel="noopener">spring官网</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String[] ORIGINS = <span class="keyword">new</span> String[] &#123; <span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span> &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     解决跨域问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//新版springboot将.allowedOrigins替换成.allowedOriginPatterns即可</span></span><br><span class="line">      registry.addMapping(<span class="string">"/**"</span>).allowedOrigins(<span class="string">"*"</span>).allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">      .allowedMethods(ORIGINS).maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现WebMvcConfigurer不会导致静态资源被拦截</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor())</span><br><span class="line">                <span class="comment">// 拦截所有url</span></span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>创建<code>TokenService</code>类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  String <span class="title">getToken</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        Date start = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//一小时有效时间</span></span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis() + <span class="number">60</span>* <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        Date end = <span class="keyword">new</span> Date(currentTime);</span><br><span class="line">        String token = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        token = JWT.create().withAudience(String.valueOf(user.getUserId())).withIssuedAt(start).withExpiresAt(end).sign(Algorithm.HMAC256(user.getPwd()));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>最终只需要在登录的时候调用<code>TokenService.getToken(user)</code>即可获得token，返回给前端，下次请求其他接口在header带上token即可</strong></p>
<hr>
<p>参考：</p>
<p><a href="https://github.com/jwtk/jjwt" target="_blank" rel="noopener">https://github.com/jwtk/jjwt</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/91420328" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/91420328</a></p>
<p><a href="https://www.jianshu.com/p/e88d3f8151db" target="_blank" rel="noopener">https://www.jianshu.com/p/e88d3f8151db</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自定义starter</title>
    <url>/posts/dd4c9c1d.html</url>
    <content><![CDATA[<h2 id="一、starter简介">一、starter简介</h2>
<h4 id="1、SpringBoot-starter机制">1、SpringBoot starter机制</h4>
<p>SpringBoot中的starter是一种非常重要的机制，能够抛弃以前繁杂的配置，将其统一集成进starter，应用者只需要在maven中引入starter依赖，SpringBoot就能自动扫描到要加载的信息并启动相应的默认配置。starter让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。SpringBoot会自动通过classpath路径下的类发现需要的Bean，并注册进IOC容器。SpringBoot提供了针对日常企业应用研发各种场景的spring-boot-starter依赖模块。所有这些依赖模块都遵循着约定成俗的默认配置，并允许我们调整这些配置，即遵循“约定大于配置”的理念。</p>
<a id="more"></a>
<h4 id="2、为什么要自定义starter">2、为什么要自定义starter</h4>
<p>在我们的日常开发工作中，经常会有一些独立于业务之外的配置模块，我们经常将其放到一个特定的包下，然后如果另一个工程需要复用这块功能的时候，需要将代码硬拷贝到另一个工程，重新集成一遍，麻烦至极。如果我们将这些可独立于业务代码之外的功配置模块封装成一个个starter，复用的时候只需要将其在pom中引用依赖即可。</p>
<h4 id="3、自定义starter命名规范">3、自定义starter命名规范</h4>
<p>官方命名：</p>
<ul>
<li>
<p>前缀：spring-boot-starter-xxx</p>
</li>
<li>
<p>比如：spring-boot-starter-web…</p>
</li>
</ul>
<p>自定义命名：</p>
<ul>
<li>xxx-spring-boot-starter</li>
<li>比如：mybatis-spring-boot-starter</li>
</ul>
<h2 id="二、starter实现">二、starter实现</h2>
<h4 id="1、新建工程">1、新建工程</h4>
<p>这里我命名为<code>shawn-spring-boot-starter</code><br>
<img src="https://img-blog.csdnimg.cn/20210128160453197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="2、添加pom-xml依赖">2、添加pom.xml依赖</h4>
<p>这里需要注意spring版本，太高可能会导致install失败</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.shawn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shawn-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;shawn-spring-boot-starter&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<h4 id="3、定义一个实体类映射配置信息">3、定义一个实体类映射配置信息</h4>
<p><code>@ConfigurationProperties(prefix = &quot;shawn.hello&quot;) </code>它可以把相同前缀的配置信息通过配置项名称映射成实体类，可以直接在yml文件进行配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前缀 shawn.hello</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"shawn.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShawnProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、编写自己的服务">4、编写自己的服务</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShawnService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ShawnProperties ShawnProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShawnProperties <span class="title">getShawnProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ShawnProperties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShawnProperties</span><span class="params">(ShawnProperties ShawnProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ShawnProperties = ShawnProperties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ShawnProperties.getPrefix() + name + ShawnProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5、定义配置类">5、定义配置类</h4>
<p>这里，我们将ShawnService类定义为一个Bean，交给Ioc容器。<br>
<code>@Configuration</code> 配置注解<br>
<code>@EnableConfigurationProperties </code>。该注解是用来开启对<code>@ConfigurationProperties</code> 注解配置Bean的支持。当然了，也可以在 <code>@ConfigurationProperties</code> 注解的类上添加 <code>@Configuration</code> 或者  <code>@Component </code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ShawnProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ShawnServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ShawnProperties shawnProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShawnService <span class="title">shawnService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShawnService service = <span class="keyword">new</span> ShawnService();</span><br><span class="line">        service.setShawnProperties(shawnProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6、在resources编写一个自己的-META-INF-spring-factories">6、在<code>resources</code>编写一个自己的 <code>META-INF\spring.factories</code></h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.shawn.ShawnServiceAutoConfiguration</span><br></pre></td></tr></table></figure>
<h4 id="7、打包到Maven仓库">7、打包到Maven仓库</h4>
<p><img src="https://img-blog.csdnimg.cn/20210128183428374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="三、测试starter">三、测试starter</h2>
<h4 id="1、新建项目，引入依赖">1、新建项目，引入依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shawn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shawn-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2、编写测试类">2、编写测试类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShawnCOntroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ShawnService shawnService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shawnService.sayHello(<span class="string">"shawn"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、配置">3、配置</h4>
<p>在<code>application.yml</code>中进行配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">shawn:</span></span><br><span class="line">  <span class="attr">hello:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">prefix</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">suffix</span></span><br></pre></td></tr></table></figure>
<h4 id="4、测试">4、测试</h4>
<p>成功打印<br>
<img src="https://img-blog.csdnimg.cn/20210128185155637.png" alt="在这里插入图片描述"></p>
<hr>
<p>参考:<br>
<a href="https://www.cnblogs.com/hellokuangshen/p/12486631.html" target="_blank" rel="noopener">https://www.cnblogs.com/hellokuangshen/p/12486631.html</a><br>
<a href="https://www.cnblogs.com/hello-shf/p/10864977.html" target="_blank" rel="noopener">https://www.cnblogs.com/hello-shf/p/10864977.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>github实用的几款chrome插件</title>
    <url>/posts/d7585d3e.html</url>
    <content><![CDATA[<h2 id="谷歌上网助手">谷歌上网助手</h2>
<p>在chrome浏览器上安装插件，最方便的是在chrome网上应用商店进行搜索下载，这里强烈推荐<strong>谷歌上网助手</strong>，可以进行学术性的科学上网。</p>
<a id="more"></a>
<p><a href="http://googlehelper.net/" target="_blank" rel="noopener">谷歌上网助手下载地址</a><br>
打开浏览器的扩展程序，直接将下载的crx拖进去就行了，打开插件之后就可以进行<a href="https://chrome.google.com/webstore/category/extensions" target="_blank" rel="noopener">应用商店</a>的访问了。<br>
<img src="https://img-blog.csdnimg.cn/20201128211605953.gif" alt="在这里插入图片描述"></p>
<h2 id="1、Octotree-GitHub-code-tree">1、Octotree - GitHub code tree</h2>
<p><img src="https://img-blog.csdnimg.cn/20201128212348459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
😃它会在github左边会生成一个 <code>Octotree</code> 按钮，登录后鼠标滑动代码文件树，这样就可以快速定位文件和查看文件了。类似的还有<code>Sourcegraph</code>插件<br>
<img src="https://img-blog.csdnimg.cn/20201128212757505.gif" alt="在这里插入图片描述"></p>
<h2 id="2、Enhanced-GitHub">2、Enhanced GitHub</h2>
<p>😊之前从github上下载文件都需要整个工程clone，下载了该插件后可以进行单个文件的下载<br>
<img src="https://img-blog.csdnimg.cn/20201128214504261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20201128214653377.gif" alt="在这里插入图片描述"></p>
<h2 id="3、GitZip">3、GitZip</h2>
<p>😆多个文件一起下载，或者单独下载一个文件夹<br>
<img src="https://img-blog.csdnimg.cn/20201128215001164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20201128214949675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4、GitHub加速">4、GitHub加速</h2>
<p>😁<code>GitHub加速</code>插件能提高中国开发者访问 <code>GitHub</code> 的速度，提升<code>clone Git </code>仓库的速度，提升下载<code>release</code>包的下载速度。<br>
<img src="https://img-blog.csdnimg.cn/20201128215348199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="5、Isometric-Contributions">5、Isometric Contributions</h2>
<p>😄更炫酷的3D立体方式渲染 GitHub 贡献图。<br>
<img src="https://img-blog.csdnimg.cn/2020112821563210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20201128215705248.gif" alt="在这里插入图片描述"></p>
<h2 id="6、Awesome-Autocomplete-for-GitHub">6、Awesome Autocomplete for GitHub</h2>
<p>😍更快地、准确的github搜索插件<br>
<img src="https://img-blog.csdnimg.cn/20201128220119232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/2020112822333144.gif" alt="在这里插入图片描述"></p>
<h2 id="7、File-Icons-for-GitHub-and-GitLab">7、File Icons for GitHub and GitLab</h2>
<p>😚一个Chrome扩展，为GitHub、GitLab、gitea和gogs提供不同的文件类型图标。<br>
<img src="https://img-blog.csdnimg.cn/20201128220746676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20201128220928252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
最后github相关的插件都可以去尝试<br>
<img src="https://img-blog.csdnimg.cn/20201128222017952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p>参考文章：<br>
<a href="https://blog.csdn.net/xinzhifu1/article/details/109309805" target="_blank" rel="noopener">https://blog.csdn.net/xinzhifu1/article/details/109309805</a><br>
<a href="https://blog.csdn.net/Mrs_chens/article/details/104500188" target="_blank" rel="noopener">https://blog.csdn.net/Mrs_chens/article/details/104500188</a></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware15安装MacOS10.15</title>
    <url>/posts/cb79a5e7.html</url>
    <content><![CDATA[<h3 id="1、MAC-OS安装">1、MAC OS安装</h3>
<p>具体安装流程下面这篇博客已经十分详细的描述了<br>
<a href="https://blog.csdn.net/SuperAE86/article/details/104653595?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" target="_blank" rel="noopener">VM15pro安装MacOS10.15.1系统(超详细，可用)</a></p>
<blockquote>
<p>MacOS和unlocker云盘资料，防止失联<br>
链接：<a href="https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1XXAIM8HtvtgYN-r5E4MzIQ</a><br>
提取码：l1dd</p>
</blockquote>
<a id="more"></a>
<h3 id="2、修改虚拟机的Mac分辨率">2、修改虚拟机的Mac分辨率?</h3>
<p>使用VM安装好Mac后你会发现界面很小，就算全屏也不能真正的全屏，这就是因为分辨率的关系<br>
解决方法如下：<br>
<strong>安装VMware Tools</strong><br>
<img src="https://img-blog.csdnimg.cn/20201124210742361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
如果点击后发现正在使用CD/DVD，则需要推出你正在使用的CD/DVD（操作方法右键选择推出xxx）<br>
<img src="https://img-blog.csdnimg.cn/20201124210711300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
安装好之后需要给软件安装权限，否则后面的命令会显示<code>Unable to find the service</code>，如果出现，根据<strong>系统偏好设置——&gt;安全性与隐私——&gt;通用</strong>，解锁，点击允许<img src="https://img-blog.csdnimg.cn/20201124211105852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
重启之后VMware Tools则安装完毕<br>
打开Mac终端并输入<br>
<code>sudo /Library/Application\ Support/VMware\ Tools/vmware-resolutionSet 1920 1080 </code><br>
后面的两个数字可以根据需求修改，最后重启即可</p>
]]></content>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA好用的几款插件</title>
    <url>/posts/5f51afa8.html</url>
    <content><![CDATA[<h4 id="1、CodeGlance">1、CodeGlance</h4>
<p>代码迷你缩放图插件，可以快速拖动代码，和VScode一样<br>
<img src="https://img-blog.csdnimg.cn/20201106233342873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="2、Codota">2、Codota</h4>
<p>代码提示工具，扫描你的代码后，根据你的敲击完美提示。<br>
Codota基于数百万个开源Java程序和您的上下文来完成代码行，从而帮助您以更少的错误更快地进行编码。</p>
<p><img src="https://img-blog.csdnimg.cn/20201106234011347.png#pic_center" alt="在这里插入图片描述"></p>
<a id="more"></a>
<h4 id="3、Alibaba-Java-Coding-Guidelines">3、Alibaba Java Coding Guidelines</h4>
<p>阿里巴巴的编码规约检查插件，检查你的编码习惯，让你更规范</p>
<h4 id="4、Alibaba-Cloud-Toolkit">4、Alibaba Cloud Toolkit</h4>
<p>快速部署到服务器<br>
<img src="https://img-blog.csdnimg.cn/20201106233606633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p>
<h4 id="5、GenerateAllSetter">5、GenerateAllSetter</h4>
<p>快速生成get set</p>
<h4 id="6、Lombok">6、Lombok</h4>
<p>简化long冗余的javabean代码，提高执行效率。只需加上注解 什么get set 什么toString 等等方法都不需要写。<br>
简单使用详见<a href="https://blog.csdn.net/lemon_TT/article/details/109249154" target="_blank" rel="noopener">Lombok常用注解</a></p>
<h4 id="7、JUnitGenerator">7、JUnitGenerator</h4>
<p>自动生成测试代码。<br>
<img src="https://img-blog.csdnimg.cn/20201106233606469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p>
<h4 id="8、EasyCode">8、EasyCode</h4>
<p>Easycode是idea的一个插件，可以直接对数据的表生成entity，controller，service，dao，mapper，无需任何编码，简单而强大。<br>
<img src="https://img-blog.csdnimg.cn/20201106233606598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p>
<h4 id="9、Chinese-Simplified">9、Chinese (Simplified)</h4>
<p>汉化插件，看不懂英文必备</p>
<h4 id="10、Free-MyBatis-plugin">10、Free MyBatis plugin</h4>
<p>free-idea-mybatis是一款增强idea对mybatis支持的插件（和EasyCode功能有重复），主要功能如下：</p>
<ul>
<li>生成mapper xml文件</li>
<li>快速从代码跳转到mapper及从mapper返回代码</li>
<li>mybatis自动补全及语法错误提示</li>
<li>集成mybatis generator gui界面<br>
<img src="https://img-blog.csdnimg.cn/20201106233606676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></li>
</ul>
<h4 id="11、MyBatis-Log-Plugin">11、MyBatis Log Plugin</h4>
<p>这款插件是直接将Mybatis执行的sql脚本显示出来，把 mybatis 输出的sql日志还原成完整的sql语句。即将日志输出的sql语句中的问号 ? 替换成真正的参数值（收费）。</p>
<p><a href="https://github.com/Link-Kou/intellij-mybaitslog" target="_blank" rel="noopener">github官网</a></p>
<h4 id="12、MyBatisCodeHelperPro">12、MyBatisCodeHelperPro</h4>
<p>支持mapper互跳，方法自动生成，代码自动生成。(和Free MyBatis plugin功能有些重复,，但是收费)</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1vrxBM8ujm79jabo2D2w8mQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1vrxBM8ujm79jabo2D2w8mQ</a><br>
提取码：jxo8</p>
<p>收费两项可以使用本地安装，注意版本对应，具体可查询百度</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201106233606606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p>
<h4 id="13、RestfulTool">13、RestfulTool</h4>
<ul>
<li>提供了一个 Services tree 的显示窗口</li>
<li>双击 URL 直接跳转到对应的方法定义</li>
<li>一个简单的 http 请求工具</li>
<li>支持 Spring 体系 (Spring MVC / Spring Boot)</li>
<li>支持 JAX-RS</li>
<li>支持 <code>Navigate -&gt; Request Service</code> 搜索 Mapping (Ctrl + Alt + /)<br>
<img src="https://img-blog.csdnimg.cn/20201106233606636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></li>
</ul>
<h4 id="14、Translation">14、Translation</h4>
<p>翻译插件<br>
<img src="https://img-blog.csdnimg.cn/20201106233606515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p>
<h4 id="15、WakaTime">15、WakaTime</h4>
<p>这是一款 IDE 插件，支持市场上大部分IDE，可以统计你使用 IDE 每个项目的时长以及代码数，一周一统计，它会将你每周的每个项目的工作时长统计好之后发到你的邮箱。<br>
<a href="https://wakatime.com/" target="_blank" rel="noopener">后台地址</a></p>
<h4 id="16、Easy-Javadoc">16、Easy Javadoc</h4>
<p>Easy Javadoc是IntelliJ IDEA的插件，能帮助java开发者自动生成javadoc文档注释<br>
使用：将光标放置到想要生成注释的类、方法或者属性上，然后按下快捷键ctrl \或者command \，即可生成注释，你的方法名起的越贴切，注释越得体。</p>
<hr>
<p>参考文章:<br>
<a href="https://mp.weixin.qq.com/s/KXEPNl1Peu4n-XkdC4vFwA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/KXEPNl1Peu4n-XkdC4vFwA</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IDETools</tag>
      </tags>
  </entry>
  <entry>
    <title>Android组件点击事件三种实现方法</title>
    <url>/posts/49a72762.html</url>
    <content><![CDATA[<h2 id="一、准备工作">一、准备工作</h2>
<h3 id="1、工作目录">1、工作目录</h3>
<p>首先创建空项目<br>
<img src="https://img-blog.csdnimg.cn/20201028225647376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<a id="more"></a>
<h3 id="2、布局文件（activity-main-xml）">2、布局文件（activity_main.xml）</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_click"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"点击我"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="二、三种实现方式">二、三种实现方式</h2>
<h3 id="1、在与事件绑定时定义事件监听器">1、在与事件绑定时定义事件监听器</h3>
<p>该方法是当通过调用组件的setXXXListener()方法设置监听器时，定义只能当前的组件使用的事件监听器，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Button btnClick = findViewById(R.id.btn_click);</span><br><span class="line">        <span class="comment">//使用findViewById方法对控件进行获取</span></span><br><span class="line">        <span class="comment">//R.id.btn_click对应布局中添加的id属性</span></span><br><span class="line">        btnClick.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//里面写点击后想要实现的效果</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                        <span class="string">"按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="comment">//这里是弹出一个消息---"按钮被点击"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、当前Activity类实现监听器接口">2、当前Activity类实现监听器接口</h3>
<p>该方法使当前Activity类实现相应的监听器接口，完成监听器中的抽象方法，组件绑定监听器时，监听器对象为Activity对象（常用）。代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> android.os.Bundle;</span><br><span class="line">        <span class="keyword">import</span> android.view.View;</span><br><span class="line">        <span class="keyword">import</span> android.widget.Button;</span><br><span class="line">        <span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Button btnClick = findViewById(R.id.btn_click);<span class="comment">//控件的获取</span></span><br><span class="line">        btnClick.setOnClickListener(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//需要传入接口实现类的实例。</span></span><br><span class="line">        <span class="comment">//此时接口实现类的实例为MainActivity</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_click:</span><br><span class="line">                <span class="comment">//里面写点击后想要实现的效果</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                        <span class="string">"按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="comment">//这里是弹出一个消息---"按钮被点击"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、XML布局文件中设置回调方法">3、XML布局文件中设置回调方法</h3>
<p>该方法是在XML布局文件中设置回调方法，在Java代码中实现该方法即可。但此方法不是一个通用的方法，但对按钮等常用组件的点击事件处理确实很方便。具体步骤如下：<br>
1、<code>activity_main.xml </code>布局文件中添加<code>onclick </code>属性，设定回调方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_click"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"点击我"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"Click"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、在<code>MainActivity</code>中添加<code>Click</code>方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button btnClick = findViewById(R.id.btn_click);<span class="comment">//控件的获取</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">Click</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_click:<span class="comment">//此处是对布局中设置的id直接进行判断，</span></span><br><span class="line">                <span class="comment">// 不需要对控件进行获取（findviewByID）</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考文章：<br>
<a href="https://www.cnblogs.com/xqz0618/p/click3.html" target="_blank" rel="noopener">https://www.cnblogs.com/xqz0618/p/click3.html</a></p>
]]></content>
      <tags>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok常用注解</title>
    <url>/posts/a283ce74.html</url>
    <content><![CDATA[<h2 id="1、Lombok简介">1、Lombok简介</h2>
<p>Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法。</p>
<blockquote>
<p>官方地址：<a href="https://projectlombok.org/" target="_blank" rel="noopener">https://projectlombok.org/</a><br>
github地址：<a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok</a></p>
</blockquote>
<a id="more"></a>
<h2 id="2、Maven引入">2、Maven引入</h2>
<p>除了引入maven，还需要安装Lombok插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3、注解介绍">3、注解介绍</h2>
<p><img src="https://img-blog.csdnimg.cn/20201023202423444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>
<p><code>@Getter /@Setter</code><br>
作用在字段上，会自动生成字段的Getter；作用在类上，会自动生成该类所有非静态字段的Getter，还能控制Getter的访问级别</p>
</li>
<li>
<p><code>@ToString</code><br>
类注解，自动生成类的toString方法，可以做一些定制，比如不使用某个字段，不调用Getters等</p>
</li>
<li>
<p><code>@EqualsAndHashCode</code><br>
自动生成 equals(Object other) 和 hashcode() 方法，包括所有非静态变量和非 transient 的变量，如果某些变量不想要加进判断，可以透过 exclude 排除，也可以使用 of 指定某些字段</p>
</li>
<li>
<p><code>@NoArgsConstructor, @AllArgsConstructor, @RequiredArgsConstructor</code><br>
@NoArgsConstructor 类注解，自动生成一个无参构造函数。<br>
@AllArgsConstructor 类注解，生成一个初始化所有字段的构造函数(在加上 @AllArgsConstructor 时，一定要补上 @NoArgsConstrcutor)<br>
@RequiredArgsConstructor : 生成一个包含 “特定参数” 的构造器，特定参数指的是那些有加上 final 修饰词的变量们.</p>
</li>
<li>
<p><code>@Data</code><br>
相当于同时应用了@Getter、@Setter、@ToString、@EqualsAndHashCode、@RequiredArgsConstructor。如果已经定义了一个构造方法，就不会再自动生成构造方法了。</p>
</li>
<li>
<p><code>@Value</code><br>
和@Data类似，但是用于不可变类型。生成的类和所有字段都设置为final，所有字段都为private，自动生成Getter但是没有Setter，会生成初始化所有字段的构造函数。相当于同时应用了final @ToString、 @EqualsAndHashCode、 @AllArgsConstructor 、@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)和 @Getter</p>
</li>
<li>
<p><code>@Builder</code><br>
自动生成流式 set 值写法，从此之后再也不用写一堆 setter 了。注意，虽然只要加上 @Builder 注解，我们就能够用流式写法快速设定对象的值，但是 setter 还是必须要写不能省略的，因为 Spring 或是其他框架有很多地方都会用到对象的 getter/setter 对他们取值/赋值。<br>
所以通常是 @Data 和 @Builder 会一起用在同个类上，既方便我们流式写代码，也方便框架做事</p>
</li>
<li>
<p><code>@NotNull</code><br>
作用在方法参数上的注解，用于自动生成空值参数检查。</p>
</li>
<li>
<p><code>@Slf4j</code><br>
自动生成该类的 log 静态常量，要打日志就可以直接打，不用再手动 new log 静态常量了</p>
</li>
</ul>
<hr>
<p>实际开发中一般常用到的:<br>
@Data<br>
@NoArgsConstructor<br>
@AllArgsConstructor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>         <span class="comment">// 生成 getter/setter/equals/canEqual/hashCode/toString        </span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>     <span class="comment">// 为类提供一个无参的构造方法 </span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>    <span class="comment">// 为类提供一个全参的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> weigh;</span><br><span class="line">    <span class="keyword">int</span> high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要链式调用，增加注解<code>@Accessor(chain = true)</code>后即可链式。同时注意Lombok可能会产生一定问题</p>
<hr>
<p>参考文章：<br>
<a href="https://www.cnblogs.com/ooo0/p/12448096.html" target="_blank" rel="noopener">https://www.cnblogs.com/ooo0/p/12448096.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现生成和解析二维码</title>
    <url>/posts/d5aff0bc.html</url>
    <content><![CDATA[<h2 id="1、建立项目">1、建立项目</h2>
<p>首先需要创建一个普通的 Maven 项目，在这里我用的是 google 提供的 jar包，pom.xml 文件配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javaboy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>QRCode<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加 google 提供的二维码依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果maven没有反应，建议刷新一下或者更换maven源（我用的就是阿里云源）</p>
</blockquote>
<a id="more"></a>
<h2 id="2、创建工具类">2、创建工具类</h2>
<p>这里需要创建两个工具类<code>BufferedImageLuminanceSource</code>和<code>QRCodeUtil</code>类。项目结构如下，我创建的是springboot的jar包，当然其他的也都可以的。<br>
<img src="https://img-blog.csdnimg.cn/2020101822193848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>工具类1 (BufferedImageLuminanceSource)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.qrcode.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.LuminanceSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedImageLuminanceSource</span> <span class="keyword">extends</span> <span class="title">LuminanceSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BufferedImage image;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> top;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedImageLuminanceSource</span><span class="params">(BufferedImage image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(image, <span class="number">0</span>, <span class="number">0</span>, image.getWidth(), image.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedImageLuminanceSource</span><span class="params">(BufferedImage image, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(width, height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sourceWidth = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> sourceHeight = image.getHeight();</span><br><span class="line">        <span class="keyword">if</span> (left + width &gt; sourceWidth || top + height &gt; sourceHeight) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Crop rectangle does not fit within image data."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = top; y &lt; top + height; y++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = left; x &lt; left + width; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((image.getRGB(x, y) &amp; <span class="number">0xFF000000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    image.setRGB(x, y, <span class="number">0xFFFFFFFF</span>); <span class="comment">// = white</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.image = <span class="keyword">new</span> BufferedImage(sourceWidth, sourceHeight, BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        <span class="keyword">this</span>.image.getGraphics().drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.top = top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getRow(<span class="keyword">int</span> y, <span class="keyword">byte</span>[] row) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span> || y &gt;= getHeight()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Requested row is outside the image: "</span> + y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">if</span> (row == <span class="keyword">null</span> || row.length &lt; width) &#123;</span><br><span class="line">            row = <span class="keyword">new</span> <span class="keyword">byte</span>[width];</span><br><span class="line">        &#125;</span><br><span class="line">        image.getRaster().getDataElements(left, top + y, width, <span class="number">1</span>, row);</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getMatrix() &#123;</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = getHeight();</span><br><span class="line">        <span class="keyword">int</span> area = width * height;</span><br><span class="line">        <span class="keyword">byte</span>[] matrix = <span class="keyword">new</span> <span class="keyword">byte</span>[area];</span><br><span class="line">        image.getRaster().getDataElements(left, top, width, height, matrix);</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCropSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuminanceSource <span class="title">crop</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedImageLuminanceSource(image, <span class="keyword">this</span>.left + left, <span class="keyword">this</span>.top + top, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRotateSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuminanceSource <span class="title">rotateCounterClockwise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sourceWidth = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> sourceHeight = image.getHeight();</span><br><span class="line">        AffineTransform transform = <span class="keyword">new</span> AffineTransform(<span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, sourceWidth);</span><br><span class="line">        BufferedImage rotatedImage = <span class="keyword">new</span> BufferedImage(sourceHeight, sourceWidth, BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        Graphics2D g = rotatedImage.createGraphics();</span><br><span class="line">        g.drawImage(image, transform, <span class="keyword">null</span>);</span><br><span class="line">        g.dispose();</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedImageLuminanceSource(rotatedImage, top, sourceWidth - (left + width), getHeight(), width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>工具类2 (QRCodeUtil)<br>
这里面可以修改一些参数，例如二维码的尺寸，宽高等等。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.qrcode.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.*;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.HybridBinarizer;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.RoundRectangle2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QRCodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARSET = <span class="string">"utf-8"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FORMAT_NAME = <span class="string">"JPG"</span>;</span><br><span class="line">    <span class="comment">// 二维码尺寸</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QRCODE_SIZE = <span class="number">300</span>;</span><br><span class="line">    <span class="comment">// LOGO宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WIDTH = <span class="number">60</span>;</span><br><span class="line">    <span class="comment">// LOGO高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HEIGHT = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BufferedImage <span class="title">createImage</span><span class="params">(String content, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Hashtable hints = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">        BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, QRCODE_SIZE, QRCODE_SIZE,</span><br><span class="line">                hints);</span><br><span class="line">        <span class="keyword">int</span> width = bitMatrix.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = bitMatrix.getHeight();</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">                image.setRGB(x, y, bitMatrix.get(x, y) ? <span class="number">0xFF000000</span> : <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (imgPath == <span class="keyword">null</span> || <span class="string">""</span>.equals(imgPath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入图片</span></span><br><span class="line">        QRCodeUtil.insertImage(image, imgPath, needCompress);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertImage</span><span class="params">(BufferedImage source, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(imgPath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            System.err.println(<span class="string">""</span> + imgPath + <span class="string">" 该文件不存在！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Image src = ImageIO.read(<span class="keyword">new</span> File(imgPath));</span><br><span class="line">        <span class="keyword">int</span> width = src.getWidth(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">int</span> height = src.getHeight(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (needCompress) &#123; <span class="comment">// 压缩LOGO</span></span><br><span class="line">            <span class="keyword">if</span> (width &gt; WIDTH) &#123;</span><br><span class="line">                width = WIDTH;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (height &gt; HEIGHT) &#123;</span><br><span class="line">                height = HEIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">            Image image = src.getScaledInstance(width, height, Image.SCALE_SMOOTH);</span><br><span class="line">            BufferedImage tag = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            Graphics g = tag.getGraphics();</span><br><span class="line">            g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>); <span class="comment">// 绘制缩小后的图</span></span><br><span class="line">            g.dispose();</span><br><span class="line">            src = image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入LOGO</span></span><br><span class="line">        Graphics2D graph = source.createGraphics();</span><br><span class="line">        <span class="keyword">int</span> x = (QRCODE_SIZE - width) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (QRCODE_SIZE - height) / <span class="number">2</span>;</span><br><span class="line">        graph.drawImage(src, x, y, width, height, <span class="keyword">null</span>);</span><br><span class="line">        Shape shape = <span class="keyword">new</span> RoundRectangle2D.Float(x, y, width, width, <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">        graph.setStroke(<span class="keyword">new</span> BasicStroke(<span class="number">3f</span>));</span><br><span class="line">        graph.draw(shape);</span><br><span class="line">        graph.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, String destPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        mkdirs(destPath);</span><br><span class="line">        <span class="comment">// String file = new Random().nextInt(99999999)+".jpg";</span></span><br><span class="line">        <span class="comment">// ImageIO.write(image, FORMAT_NAME, new File(destPath+"/"+file));</span></span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, <span class="keyword">new</span> File(destPath));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">encode</span><span class="params">(String content, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mkdirs</span><span class="params">(String destPath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(destPath);</span><br><span class="line">        <span class="comment">// 当文件夹不存在时，mkdirs会自动创建多层目录，区别于mkdir．(mkdir如果父目录不存在则会抛出异常)</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, String destPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, imgPath, destPath, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 被注释的方法</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * public static void encode(String content, String destPath, boolean</span></span><br><span class="line"><span class="comment">     * needCompress) throws Exception &#123; QRCodeUtil.encode(content, null, destPath,</span></span><br><span class="line"><span class="comment">     * needCompress); &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String destPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, <span class="keyword">null</span>, destPath, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, OutputStream output, <span class="keyword">boolean</span> needCompress)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, OutputStream output)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, <span class="keyword">null</span>, output, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image;</span><br><span class="line">        image = ImageIO.read(file);</span><br><span class="line">        <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedImageLuminanceSource source = <span class="keyword">new</span> BufferedImageLuminanceSource(image);</span><br><span class="line">        BinaryBitmap bitmap = <span class="keyword">new</span> BinaryBitmap(<span class="keyword">new</span> HybridBinarizer(source));</span><br><span class="line">        Result result;</span><br><span class="line">        Hashtable hints = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        hints.put(DecodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        result = <span class="keyword">new</span> MultiFormatReader().decode(bitmap, hints);</span><br><span class="line">        String resultStr = result.getText();</span><br><span class="line">        <span class="keyword">return</span> resultStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QRCodeUtil.decode(<span class="keyword">new</span> File(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、创建启动类">3、创建启动类</h2>
<p>这一步就是调用方法，一般大家使用这种功能都是为了实现业务，例如常见的扫描二维码跳转链接（页面），扫描二维码出现文字等等。有些二维码中间还带有 Logo 这种图片，将需要嵌入二维码的图片路径准备好就没有问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.qrcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.csdn.qrcode.util.QRCodeUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QrcodeApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 存放在二维码中的内容</span></span><br><span class="line">        <span class="comment">// 二维码中的内容可以是文字，可以是链接等</span></span><br><span class="line">        String text = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">        <span class="comment">// 嵌入二维码的图片路径</span></span><br><span class="line">        <span class="comment">// String imgPath = "C:\\Users\\Administrator\\Pictures\\img\\dog.jpg";</span></span><br><span class="line">        String imgPath = <span class="string">"picture/lemon.jpg"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成的二维码的路径及名称</span></span><br><span class="line">        String destPath = <span class="string">"picture/"</span> + System.currentTimeMillis() + <span class="string">".jpg"</span>;</span><br><span class="line">        <span class="comment">//生成不带logo的二维码</span></span><br><span class="line">        <span class="comment">// QRCodeUtil.encode(text, null, destPath, true);</span></span><br><span class="line">        <span class="comment">//生成带logo的二维码</span></span><br><span class="line">        QRCodeUtil.encode(text, imgPath, destPath, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 解析二维码</span></span><br><span class="line">        String str = QRCodeUtil.decode(destPath);</span><br><span class="line">        <span class="comment">// 打印出解析出的内容</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:<br>
<img src="https://img-blog.csdnimg.cn/20201018222534856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<hr>
<p>参考文章：<br>
<a href="https://gitee.com/jian_bo_bai/QRCode" target="_blank" rel="noopener">https://gitee.com/jian_bo_bai/QRCode</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 日期时间类整理</title>
    <url>/posts/1af375c2.html</url>
    <content><![CDATA[<blockquote>
<p>当我们开始使⽤Java操作⽇期和时间的时候，会有⼀些棘⼿。你也许会通过 System.currentTimeMillis() 来返回1970年1⽉1⽇到今天的毫秒数。或者使⽤ Date类来操作⽇期；当遇到加减⽉份、天数的时候 你⼜需要⽤到Calendar类； 当需要格式化⽇期的时候需要使⽤java.text.DateFormat类。</p>
</blockquote>
<a id="more"></a>
<h1>一、Date类型存在的问题</h1>
<ul>
<li>
<p>结构定义混乱</p>
<ul>
<li>java.util Date包含日期时间</li>
<li>java.sql Date包含日期</li>
<li>java.text 时间格式化</li>
</ul>
</li>
<li>
<p>API不易用</p>
</li>
<li>
<p>非线程安全</p>
<ul>
<li>可变，SimpleDateFormate</li>
</ul>
</li>
<li>
<p>国际化</p>
<ul>
<li>Calendar TimeZone</li>
</ul>
<p><code>Date</code>如果不格式化，打印出的日期可读性差</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tue Sep <span class="number">10</span> <span class="number">09</span>:<span class="number">34</span>:<span class="number">04</span> CST <span class="number">2020</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1>二、Java8新的日期时间类</h1>
<h2 id="1、LocalDate">1、LocalDate</h2>
<p>只会获取年月日</p>
<ul>
<li>创建<code>LocalDate</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前年月日  </span></span><br><span class="line">LocalDate localDate = LocalDate.now();  </span><br><span class="line"><span class="comment">//构造指定的年月日  </span></span><br><span class="line">LocalDate localDate1 = LocalDate.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>获取年、月、日、星期几</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取年</span></span><br><span class="line"><span class="keyword">int</span> year = localDate.getYear();  </span><br><span class="line"><span class="keyword">int</span> year1 = localDate.get(ChronoField.YEAR);  </span><br><span class="line"><span class="comment">//获取月份</span></span><br><span class="line">Month month = localDate.getMonth();  </span><br><span class="line"><span class="keyword">int</span> month1 = localDate.get(ChronoField.MONTH_OF_YEAR);  </span><br><span class="line"><span class="comment">//获取天</span></span><br><span class="line"><span class="keyword">int</span> day = localDate.getDayOfMonth();  </span><br><span class="line"><span class="keyword">int</span> day1 = localDate.get(ChronoField.DAY_OF_MONTH);  </span><br><span class="line"><span class="comment">//获取星期几</span></span><br><span class="line">DayOfWeek dayOfWeek = localDate.getDayOfWeek();  </span><br><span class="line"><span class="keyword">int</span> dayOfWeek1 = localDate.get(ChronoField.DAY_OF_WEEK);</span><br></pre></td></tr></table></figure>
<h2 id="2、LocalTime">2、LocalTime</h2>
<p>只会获取几点几分几秒</p>
<ul>
<li>创建<code>LocalTime</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.of(<span class="number">13</span>, <span class="number">51</span>, <span class="number">10</span>);  </span><br><span class="line">LocalTime localTime1 = LocalTime.now();</span><br></pre></td></tr></table></figure>
<ul>
<li>获取时分秒</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取小时  </span></span><br><span class="line"><span class="keyword">int</span> hour = localTime.getHour();  </span><br><span class="line"><span class="keyword">int</span> hour1 = localTime.get(ChronoField.HOUR_OF_DAY);  </span><br><span class="line"><span class="comment">//获取分  </span></span><br><span class="line"><span class="keyword">int</span> minute = localTime.getMinute();  </span><br><span class="line"><span class="keyword">int</span> minute1 = localTime.get(ChronoField.MINUTE_OF_HOUR);  </span><br><span class="line"><span class="comment">//获取秒  </span></span><br><span class="line"><span class="keyword">int</span> second = localTime.getSecond();  </span><br><span class="line"><span class="keyword">int</span> second1 = localTime.get(ChronoField.SECOND_OF_MINUTE);</span><br></pre></td></tr></table></figure>
<h2 id="3、LocalDateTime">3、LocalDateTime</h2>
<p>获取年月日时分秒，等于LocalDate+LocalTime</p>
<ul>
<li>创建<code>LocalDateTime</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.now();  </span><br><span class="line">LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2020</span>, Month.SEPTEMBER, <span class="number">10</span>, <span class="number">14</span>, <span class="number">46</span>, <span class="number">56</span>);  </span><br><span class="line">LocalDateTime localDateTime2 = LocalDateTime.of(localDate, localTime);  </span><br><span class="line">LocalDateTime localDateTime3 = localDate.atTime(localTime);  </span><br><span class="line">LocalDateTime localDateTime4 = localTime.atDate(localDate);</span><br></pre></td></tr></table></figure>
<ul>
<li>获取<code>LocalDate</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate localDate2 = localDateTime.toLocalDate();</span><br></pre></td></tr></table></figure>
<ul>
<li>获取<code>LocalTime</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalTime localTime2 = localDateTime.toLocalTime();</span><br></pre></td></tr></table></figure>
<h2 id="4、Instant">4、Instant</h2>
<p>获取秒数</p>
<ul>
<li>创建<code>Instant</code>对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant instant = Instant.now();</span><br></pre></td></tr></table></figure>
<ul>
<li>获取秒数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> currentSecond = instant.getEpochSecond();</span><br></pre></td></tr></table></figure>
<ul>
<li>获取毫秒数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> currentMilli = instant.toEpochMilli();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果只是为了获取秒数或者毫秒数，使用<code>System.currentTimeMillis()</code>来得更为方便</p>
</blockquote>
<h1>三、日期时间的修改与计算</h1>
<p><strong><code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>、<code>Instant</code>为</strong>不可变对象**，修改这些对象对象会**返回一个副本****</p>
<h2 id="1、时间修改">1、时间修改</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2020</span>, Month.SEPTEMBER, <span class="number">10</span>,  </span><br><span class="line">              <span class="number">14</span>, <span class="number">46</span>, <span class="number">56</span>);  </span><br><span class="line"><span class="comment">//增加一年  </span></span><br><span class="line">localDateTime = localDateTime.plusYears(<span class="number">1</span>);  </span><br><span class="line">localDateTime = localDateTime.plus(<span class="number">1</span>, ChronoUnit.YEARS);  </span><br><span class="line"><span class="comment">//减少一个月  </span></span><br><span class="line">localDateTime = localDateTime.minusMonths(<span class="number">1</span>);  </span><br><span class="line">localDateTime = localDateTime.minus(<span class="number">1</span>, ChronoUnit.MONTHS);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用with进行修改</span></span><br><span class="line"><span class="comment">//修改年为2020</span></span><br><span class="line">localDateTime = localDateTime.withYear(<span class="number">2020</span>);  </span><br><span class="line"><span class="comment">//修改为2022  </span></span><br><span class="line">localDateTime = localDateTime.with(ChronoField.YEAR, <span class="number">2022</span>);</span><br></pre></td></tr></table></figure>
<p>另外比如有些时候想知道这个月的最后一天是几号、下个周末是几号，通过提供的时间和日期API可以很快得到答案，比如通过<code>firstDayOfYear()</code>返回了当前日期的第一天日期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();  </span><br><span class="line">LocalDate localDate1 = localDate.with(firstDayOfYear());</span><br></pre></td></tr></table></figure>
<h2 id="2、格式化日期-常用">2、格式化日期(常用)</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">10</span>);  </span><br><span class="line">String s1 = localDate.format(DateTimeFormatter.BASIC_ISO_DATE);  </span><br><span class="line">String s2 = localDate.format(DateTimeFormatter.ISO_LOCAL_DATE);  </span><br><span class="line"><span class="comment">//自定义格式化  </span></span><br><span class="line">DateTimeFormatter dateTimeFormatter =   DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy"</span>);  </span><br><span class="line">String s3 = localDate.format(dateTimeFormatter);</span><br></pre></td></tr></table></figure>
<p><code>DateTimeFormatter</code>默认提供了多种格式化方式，如果默认提供的不能满足要求，可以通过<code>DateTimeFormatter</code>的<code>ofPattern</code>方法创建自定义格式化方式</p>
<h4 id="解析时间">解析时间</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate localDate1 = LocalDate.parse(<span class="string">"20201010"</span>, DateTimeFormatter.BASIC_ISO_DATE);  </span><br><span class="line">LocalDate localDate2 = LocalDate.parse(<span class="string">"2020-10-10"</span>, DateTimeFormatter.ISO_LOCAL_DATE);</span><br></pre></td></tr></table></figure>
<p>和<code>SimpleDateFormat</code>相比，<code>DateTimeFormatter</code>是线程安全的</p>
<h1>四、LocalDateTime在SpringBoot中的应用</h1>
<h2 id="1、将LocalDateTime字段以时间戳的方式返回给前端-添加日期转化类">1、将LocalDateTime字段以时间戳的方式返回给前端 添加日期转化类</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDateTimeConverter</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">LocalDateTime</span>&gt; </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(LocalDateTime value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">    gen.writeNumber(value.toInstant(ZoneOffset.of(<span class="string">"+8"</span>)).toEpochMilli());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并在<code>LocalDateTime </code> 字段上添加<code>@JsonSerialize(using = LocalDateTimeConverter.class) </code> 注解，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using = LocalDateTimeConverter<span class="class">.<span class="keyword">class</span>)  </span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">LocalDateTime</span> <span class="title">gmtModified</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="2、将LocalDateTime字段以指定格式化日期的方式返回给前端">2、将LocalDateTime字段以指定格式化日期的方式返回给前端</h2>
<p>在<code>LocalDateTime </code>字段上添加<code>@JsonFormat(shape=JsonFormat.Shape.STRING, pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;) </code>注解即可，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(shape=JsonFormat.Shape.STRING, pattern=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)  </span><br><span class="line"><span class="keyword">protected</span> LocalDateTime gmtModified;</span><br></pre></td></tr></table></figure>
<h2 id="3、对前端传入的日期进行格式化">3、对前端传入的日期进行格式化</h2>
<p>在<code>LocalDateTime</code>字段上添加<code>@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) </code>注解即可，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)  </span><br><span class="line"><span class="keyword">protected</span> LocalDateTime gmtModified;</span><br></pre></td></tr></table></figure>
<h2 id="4、前后端日期时间转化问题">4、前后端日期时间转化问题</h2>
<ul>
<li><strong>方式一</strong></li>
</ul>
<p>在实体类上加<code>@DatetimeFormat</code>与<code>@JsonFormat</code>注解</p>
<p><code>@DatetimeFormat</code>将前台日期字符串转换成Date格式 <code>@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</code></p>
<p><code>@JsonFormat</code>将服务器端Date日期转换成指定字符串格式<code> @JsonFormat(pattern=&quot;yyyy-MM-dd&quot;,timezone=&quot;GMT+8&quot;)</code></p>
<p><strong>两个需要同时加，否则会有时区的问题</strong></p>
<ul>
<li><strong>方式二</strong></li>
</ul>
<p>在applicition.properties中添加如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#时间戳统一转换</span><br><span class="line">spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</span><br><span class="line">spring.jackson.time-zone=GMT+8</span><br></pre></td></tr></table></figure>
<p>或者在application.yml中添加如下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#时间戳统一转换</span><br><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: GMT+<span class="number">8</span></span><br></pre></td></tr></table></figure>
<hr>
<p>参考文章：</p>
<p><a href="https://www.cnblogs.com/w-essay/p/11453943.html" target="_blank" rel="noopener">https://www.cnblogs.com/w-essay/p/11453943.html</a></p>
<p><a href="https://mp.weixin.qq.com/s/7LzRjG_uGjXq5yIwiSnV2w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/7LzRjG_uGjXq5yIwiSnV2w</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java8时间类</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令清单</title>
    <url>/posts/2163f62e.html</url>
    <content><![CDATA[<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br>
<img src="https://img-blog.csdnimg.cn/20201016212956605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<hr>
<a id="more"></a>
<h2 id="一、新建代码库">一、新建代码库</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>
<h2 id="二、配置">二、配置</h2>
<p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>
<h2 id="三、增加-删除文件">三、增加/删除文件</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h2 id="四、代码提交">四、代码提交</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h2 id="五、分支">五、分支</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure>
<h2 id="六、标签">六、标签</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>
<h2 id="七、查看信息">七、查看信息</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>
<h2 id="八、远程同步">八、远程同步</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>
<h2 id="九、撤销">九、撤销</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<h2 id="十、其他">十、其他</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>
<hr>
<p>参考转载：<br>
<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a><br>
<a href="https://gitee.com/all-about-git" target="_blank" rel="noopener">https://gitee.com/all-about-git</a></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio入门配置</title>
    <url>/posts/50ca3841.html</url>
    <content><![CDATA[<h1>一、JDK的下载与安装配置</h1>
<h2 id="1、下载合适版本并安装JDK-记住自己的安装路径">1、下载合适版本并安装JDK(记住自己的安装路径)</h2>
<p>下载路径：<br>
<a href="1%E3%80%81%09%E4%B8%8B%E8%BD%BD%E5%90%88%E9%80%82%E7%89%88%E6%9C%AC%E5%B9%B6%E5%AE%89%E8%A3%85JDK%28%E8%AE%B0%E4%BD%8F%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%29%20%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%EF%BC%9A%20https://www.oracle.com/java/technologies/javase-jdk13-downloads.html">JDK13下载网址</a><br>
下载完成后进行解压安装，这里不提倡安装在c盘<br>
另外如果发现安装好后没有jre文件夹，则需要自己生成jre文件，在目标路径下（自己安装的JDK路径中运行cmd）运行命令行即可。<br>
<code>	bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</code></p>
<a id="more"></a>
<h2 id="2、系统环境配置">2、系统环境配置</h2>
<ul>
<li>
<p>在“系统变量”新建一个变量名为JAVA13_HOME的变量，变量值为你本地JDK的安装目录，当然这里的变量名可以根据自己需求修改。<br>
<img src="https://img-blog.csdnimg.cn/20201013201858433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</li>
<li>
<p>同样的再新建一个Path变量，Path大小写随意，变量的值为<code>%JAVA13_HOME%\bin</code>，当然直接用路径也可以。<br>
<img src="https://img-blog.csdnimg.cn/20201013202001642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</li>
<li>
<p>最后一步新建一个CLASSPATH变量，这里设置CLASSPATH的值是<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; </code>搞定。注意前面的.<br>
<img src="https://img-blog.csdnimg.cn/20201013202231575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</li>
<li>
<p>打开cmd命令行，运行<code>java -version</code>可以查看是否配置成功</p>
</li>
</ul>
<h1>二、Android Studio下载安装</h1>
<p><a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">Android Studio 4.0 下载地址</a><br>
下载完成后进行软件和SDK的安装（这里傻瓜式安装，不过注意安装路径不要出现中文，另外建议不要安装在系统盘）</p>
<ul>
<li>Android studio程序安装完毕，但是还需要继续对其进行配置；启动Android studio，出现下图,首次安装Android studio的情况下，选择不导入之前版本的配置即选择第二项，然后点击ok<br>
<img src="https://img-blog.csdnimg.cn/20201013203438389.jpg#pic_center" alt="在这里插入图片描述"></li>
<li>首次安装Android studio需要下载SDK，这里点击cancel，之后根据自己需求进行安装下载SDK.<br>
<img src="https://img-blog.csdnimg.cn/20201013203441592.jpg#pic_center" alt="在这里插入图片描述"></li>
</ul>
<h1>三、第一个Demo工程</h1>
<h2 id="1、工程创建">1、工程创建</h2>
<ul>
<li>打开软件，选择Empty Activity工程，选择next<br>
<img src="https://img-blog.csdnimg.cn/20201013203852237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
<li>根据自己需求选择项目名、语言和安装路径等，选择完成后点击finish<br>
<img src="https://img-blog.csdnimg.cn/20201013203930157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
第一次建立工程有点慢，是因为从网上下载gradle构建工具，由于从国外站点下载，比较慢，一般情况需要挂梯子，最后等待左下角出现 Gradle bulid successfuly 就说明构建完成了</li>
</ul>
<hr>
<p>如果无法下载可以有两种方法，第一种进行换源，这里就不多介绍了，第二种就是进行手动下载，这里介绍第二种方法。<br>
1、找到对应的版本号，我这里是6.1.1版本，然后去<a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">Gradle下载地址</a>下载对于版本的压缩包，<br>
<img src="https://img-blog.csdnimg.cn/20201013204641699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">2、打开电脑C盘，进入用户文件，找到<code>.gradle</code>文件夹，如图路径一层层打开，找到如图位置，删除下载失败的文件，将手动下载的压缩包放入，重启Android Studio即可。<br>
<img src="https://img-blog.csdnimg.cn/20201013205302816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<hr>
<h2 id="2、虚拟机创建和启动">2、虚拟机创建和启动</h2>
<ul>
<li>选择合适的虚拟机进行创建，推荐使用默认的<br>
<img src="https://img-blog.csdnimg.cn/20201013205425981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
<li>如果需要修改使用JDK的可以进行修改（android内置有jre），这里我使用了自己下载的JDK<br>
<img src="https://img-blog.csdnimg.cn/2020101321000439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20201013210141639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
<li>启动项目，即可成功显示<br>
<img src="https://img-blog.csdnimg.cn/20201013205729125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
</ul>
<h1>四、项目简单介绍</h1>
<h2 id="1、目录结构介绍">1、目录结构介绍</h2>
<p><img src="https://img-blog.csdnimg.cn/20201013210215919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.idea <span class="comment">//系统自动生成的关于AS的配置目录（版权，jar包等）</span></span><br><span class="line">gradle <span class="comment">//Gradle目录（项目构建工具）</span></span><br><span class="line">app <span class="comment">//AS创建工程中的一个Module</span></span><br><span class="line">External Libraries <span class="comment">//依赖文件（版本号，SDK等）</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20201013210318735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">build：<span class="comment">//构建目录，系统自动生成的编译目录</span></span><br><span class="line">libs：<span class="comment">//依赖包存放目录</span></span><br><span class="line">src：<span class="comment">//源码，资源目录</span></span><br><span class="line">androidTest: <span class="comment">//系统自动生成的用于测试的目录</span></span><br><span class="line">main：<span class="comment">//主目录 </span></span><br><span class="line">java：<span class="comment">//Java代码目录</span></span><br><span class="line">res：<span class="comment">//资源文件</span></span><br><span class="line">drawable： <span class="comment">//存放各种位图文件（png，jpg等）</span></span><br><span class="line">layout：<span class="comment">//App布局文件 </span></span><br><span class="line">values：<span class="comment">//储存一些引用文件（可以定义尺寸，字符串，样式，颜色等等）</span></span><br><span class="line">AndroidManifest.xml：<span class="comment">//App基本信息（Android配置文件） </span></span><br><span class="line">.gitgnore: <span class="comment">//项目空间的同步忽略文件</span></span><br><span class="line">build.gradle：<span class="comment">//Module的Gradle编译文件</span></span><br></pre></td></tr></table></figure>
<h2 id="2、安卓生命周期">2、安卓生命周期</h2>
<p><img src="https://img-blog.csdnimg.cn/20201013210519202.gif#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>打开程序，执行顺序为onCreate、onStart、onResume</li>
<li>按下back键，执行顺序为onPause、onStop、onDestory；</li>
<li>再启动HelloWorld，执行顺序为onRestart、onStart、onResume；</li>
<li>按下home键，执行顺序为onPause、onStop；</li>
</ul>
<hr>
<p>参考文章<br>
<a href="https://blog.csdn.net/qq_43078852/article/details/104381548" target="_blank" rel="noopener">https://blog.csdn.net/qq_43078852/article/details/104381548</a><br>
<a href="https://www.jianshu.com/p/8d1d765a1a6c" target="_blank" rel="noopener">https://www.jianshu.com/p/8d1d765a1a6c</a></p>
]]></content>
      <tags>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot后端接口规范</title>
    <url>/posts/557d179e.html</url>
    <content><![CDATA[<h1>一、前言</h1>
<p> 一个后端接口大致分为四个部分组成：接口地址（url）、接口请求方式（get、post等）、请求数据（request）、响应数据（response）。虽然说后端接口的编写并没有统一规范要求，而且如何构建这几个部分每个公司要求都不同，没有什么“一定是最好的”标准，但其中最重要的关键点就是看是否规范。</p>
<a id="more"></a>
<h1>二、环境说明</h1>
<p> 因为讲解的重点是后端接口，所以需要导入一个spring-boot-starter-web包，而lombok作用是简化类，前端显示则使用了knife4j，具体使用在<a href="https://blog.csdn.net/lemon_TT/article/details/108158631" target="_blank" rel="noopener">Spring Boot整合knife4j实现Api文档</a>已写明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--新版框架没有自动引入需要手动引入--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在引用时请在maven中央仓库搜索最新版本号--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1>三、参数校验</h1>
<p> 一个接口一般对参数（请求数据）都会进行安全校验，参数校验的重要性自然不必多说，那么如何对参数进行校验就有讲究了。一般来说有三种常见的校验方式，我们使用了最简洁的第三种方法</p>
<ul>
<li>业务层校验</li>
<li>Validator + BindResult校验</li>
<li><strong>Validator + 自动抛出异常</strong></li>
</ul>
<p> 业务层校验无需多说，即手动在java的Service层进行数据校验判断。不过这样太繁琐了，光校验代码就会有很多。<br>
 而使用Validator+ BindingResult已经是非常方便实用的参数校验方式了，在实际开发中也有很多项目就是这么做的，不过这样还是不太方便，因为你每写一个接口都要添加一个BindingResult参数，然后再提取错误信息返回给前端（简单看一下）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@PostMapping</span>(<span class="string">"/addUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@RequestBody @Valid User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果有参数校验失败，会将错误信息封装成对象组装在BindingResult里</span></span><br><span class="line">        <span class="keyword">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> error.getDefaultMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> validationService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Validator-自动抛出异常（使用）">Validator + 自动抛出异常（使用）</h2>
<p> 首先Validator可以非常方便的制定校验规则，并自动帮你完成校验。首先在入参里需要校验的字段加上注解,每个注解对应不同的校验规则，并可制定校验失败后的信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户id不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户账号不能为空"</span>)</span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>, max = <span class="number">11</span>, message = <span class="string">"账号长度必须是6-11个字符"</span>)</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户密码不能为空"</span>)</span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>, max = <span class="number">11</span>, message = <span class="string">"密码长度必须是6-16个字符"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"用户邮箱不能为空"</span>)</span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 校验规则和错误提示信息配置完毕后，接下来只需要在接口仅需要在校验的参数上加上@Valid注解(去掉BindingResult后会自动引发异常，异常发生了自然而然就不会执行业务逻辑)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValidationService validationService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/addUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@RequestBody @Valid User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> validationService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 现在我们进行测试，打开knife4j文档地址，当输入的请求数据为空时，Validator会将所有的报错信息全部进行返回，所以需要与全局异常处理一起使用。<br>
<img src="https://img-blog.csdnimg.cn/20200830203443712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h1>四、全局异常处理</h1>
<p> 参数校验失败会自动引发异常，我们当然不可能再去手动捕捉异常进行处理。但我们又不想手动捕捉这个异常，又要对这个异常进行处理，那正好使用SpringBoot全局异常处理来达到一劳永逸的效果！</p>
<h2 id="基本使用">基本使用</h2>
<p>首先，我们需要新建一个类，在这个类上加上<code>@ControllerAdvice</code>或<code>@RestControllerAdvice</code>注解，这个类就配置成全局处理类了。（这个根据你的Controller层用的是<code>@Controller</code>还是<code>@RestController</code>来决定） 然后在类中新建方法，在方法上加上<code>@ExceptionHandler</code>注解并指定你想处理的异常类型，接着在方法内编写对该异常的操作逻辑，就完成了对该异常的全局处理！我们现在就来演示一下对参数校验失败抛出的<code>MethodArgumentNotValidException</code>全局处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">BAD_REQUEST</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">MethodArgumentNotValidExceptionHandler</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 然后提取错误提示信息进行返回</span></span><br><span class="line">        <span class="keyword">return</span> objectError.getDefaultMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 我们再次进行测试，这次返回的就是我们制定的错误提示信息！我们通过全局异常处理优雅的实现了我们想要的功能！以后我们再想写接口参数校验，就只需要在入参的成员变量上加上Validator校验规则注解，然后在参数上加上@Valid注解即可完成校验，校验失败会自动返回错误提示信息，无需任何其他代码！<br>
<img src="https://img-blog.csdnimg.cn/20200830204830239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="自定义异常">自定义异常</h2>
<p> 在很多情况下，我们需要手动抛出异常，比如在业务层当有些条件并不符合业务逻辑，而使用自定义异常有诸多优点：</p>
<ul>
<li>自定义异常可以携带更多的信息，不像这样只能携带一个字符串。</li>
<li>项目开发中经常是很多人负责不同的模块，使用自定义异常可以统一了对外异常展示的方式。</li>
<li>自定义异常语义更加清晰明了，一看就知道是项目中手动抛出的异常。<br>
 我们现在就来开始写一个自定义异常：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span> <span class="comment">//只要getter方法，无需setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APIException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APIException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1001</span>, <span class="string">"接口错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APIException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1001</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APIException</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 然后在刚才的全局异常类中加入如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义的全局异常</span></span><br><span class="line">   <span class="meta">@ExceptionHandler</span>(APIException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">   <span class="title">public</span> <span class="title">String</span> <span class="title">APIExceptionHandler</span>(<span class="title">APIException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> e.getMsg();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p> 这样就对异常的处理就比较规范了，当然还可以添加对Exception的处理，这样无论发生什么异常我们都能屏蔽掉然后响应数据给前端，不过建议最后项目上线时这样做，能够屏蔽掉错误信息暴露给前端，在开发中为了方便调试还是不要这样做。另外，当我们抛出自定义异常的时候全局异常处理只响应了异常中的错误信息msg给前端，并没有将错误代码code返回。这还需要配合数据统一响应。</p>
<h1>五、数据统一响应</h1>
<p> 统一数据响应是我们自己自定义一个响应体类，无论后台是运行正常还是发生异常，响应给前端的数据格式是不变的！这里我包括了响应信息代码code和响应信息说明msg，首先可以设置一个枚举规范响应体中的响应码和响应信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResultCode &#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">"操作成功"</span>),</span><br><span class="line">    FAILED(<span class="number">1001</span>, <span class="string">"响应失败"</span>),</span><br><span class="line">    VALIDATE_FAILED(<span class="number">1002</span>, <span class="string">"参数校验失败"</span>),</span><br><span class="line">    ERROR(<span class="number">5000</span>, <span class="string">"未知错误"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    ResultCode(<span class="keyword">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 自定义响应体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码，比如1000代表响应成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应信息，用来说明响应情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应的具体数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultVO</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(ResultCode.SUCCESS, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultVO</span><span class="params">(ResultCode resultCode, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="keyword">this</span>.msg = resultCode.getMsg();</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 最后需要修改全局异常处理类的返回类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(APIException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResultVO</span>&lt;<span class="title">String</span>&gt; <span class="title">APIExceptionHandler</span>(<span class="title">APIException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 注意哦，这里传递的响应码枚举</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultVO&lt;&gt;(ResultCode.FAILED, e.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResultVO</span>&lt;<span class="title">String</span>&gt; <span class="title">MethodArgumentNotValidExceptionHandler</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 注意哦，这里传递的响应码枚举</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultVO&lt;&gt;(ResultCode.VALIDATE_FAILED, objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 最后在controller层进行接口信息数据的返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setAccount(<span class="string">"12345678"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"12345678"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"123@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultVO&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p> 经过测试，这样响应码和响应信息只能是枚举规定的那几个，就真正做到了响应数据格式、响应码和响应信息规范化、统一化！<br>
<img src="https://img-blog.csdnimg.cn/20200830211916735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h1>六、全局处理响应数据(可选择)</h1>
<p> 接口返回统一响应体 + 异常也返回统一响应体，其实这样已经很好了，但还是有可以优化的地方。要知道一个项目下来定义的接口搞个几百个太正常不过了，要是每一个接口返回数据时都要用响应体来包装一下好像有点麻烦，有没有办法省去这个包装过程呢？当然是有的，还是要用到全局处理。但是为了扩展性，就是允许绕过数据统一响应（这样就可以提供多方使用），我们可以自定义注解，利用注解来选择是否进行全局响应包装。<br>
 首先创建自定义注解，作用相当于全局处理类开关：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;) <span class="comment">// 表明该注解只能放在方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotResponseBody &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 其次创建一个类并加上注解使其成为全局处理类。然后继承<code>ResponseBodyAdvice</code>接口重写其中的方法，即可对我们的controller进行增强操作，具体看代码和注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span>(basePackages = &#123;<span class="string">"com.scdn.demo1.controller"</span>&#125;) <span class="comment">// 注意哦，这里要加上需要扫描的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseControllerAdvice</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 如果接口返回的类型本身就是ResultVO那就没有必要进行额外的操作，返回false</span></span><br><span class="line">        <span class="comment">// 如果方法上加了我们的自定义注解也没有必要进行额外的操作</span></span><br><span class="line">        <span class="keyword">return</span> !(returnType.getParameterType().equals(ResultVO<span class="class">.<span class="keyword">class</span>) || <span class="title">returnType</span>.<span class="title">hasMethodAnnotation</span>(<span class="title">NotResponseBody</span>.<span class="title">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object data, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String类型不能直接包装，所以要进行些特别的处理</span></span><br><span class="line">        <span class="keyword">if</span> (returnType.getGenericParameterType().equals(String<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将数据包装在ResultVO里后，再转换为json字符串响应给前端</span></span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsString(<span class="keyword">new</span> ResultVO&lt;&gt;(data));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"返回String类型错误"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将原本的数据包装在ResultVO里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultVO&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 重写的这两个方法是用来在<code>controller</code>将数据进行返回前进行增强操作，<code>supports</code>方法要返回为true才会执行<code>beforeBodyWrite</code>方法，所以如果有些情况不需要进行增强操作可以在<code>supports</code>方法里进行判断。对返回数据进行真正的操作还是在<code>beforeBodyWrite</code>方法中，我们可以直接在该方法里包装数据，这样就不需要每个接口都进行数据包装了，省去了很多麻烦。此时controller只需这样写就行了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line"><span class="comment">//@NotResponseBody  //是否绕过数据统一响应开关</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setAccount(<span class="string">"12345678"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"12345678"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"123@qq.com"</span>);</span><br><span class="line">    <span class="comment">// 注意哦，这里是直接返回的User类型，并没有用ResultVO进行包装</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>七、总结</h1>
<p>自此整个后端接口基本体系就构建完毕了</p>
<ul>
<li>通过Validator + 自动抛出异常来完成了方便的参数校验</li>
<li>通过全局异常处理 + 自定义异常完成了异常操作的规范</li>
<li>通过数据统一响应完成了响应数据的规范</li>
<li>多个方面组装非常优雅的完成了后端接口的协调，让开发人员有更多的经历注重业务逻辑代码，轻松构建后端接口</li>
</ul>
<hr>
<p><a href="https://github.com/RudeCrab/rude-java/blob/master/project-practice/validation-and-exception-handler/validation-and-exception-handler.md" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合knife4j实现Api文档</title>
    <url>/posts/db133795.html</url>
    <content><![CDATA[<h1>一、简介</h1>
<blockquote>
<p> knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是swagger-bootstrap-ui,取名kni4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍!<br>
　knife4j的前身是swagger-bootstrap-ui，为了契合微服务的架构发展,由于原来swagger-bootstrap-ui采用的是后端Java代码+前端Ui混合打包的方式,在微服务架构下显的很臃肿,因此项目正式更名为knife4j</p>
</blockquote>
<p><a href="https://doc.xiaominfo.com/knife4j/" target="_blank" rel="noopener">knife4j官方文档</a><br>
<a href="https://gitee.com/xiaoym/knife4j" target="_blank" rel="noopener">码云仓库地址</a></p>
<a id="more"></a>
<h1>二、项目搭建</h1>
<h2 id="1、maven引入">1、maven引入</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在引用时请在maven中央仓库搜索最新版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter" target="_blank" rel="noopener">knife4j仓库地址</a></p>
<h2 id="2、创建Swagger配置文件">2、创建Swagger配置文件</h2>
<p>首先创建<code>application-dev.yml</code>和<code>application-prod.yml</code>开发和生产环境，最后在<code>application.yml</code>中配置当前环境，这样就可以在生产环境中关闭在线接口文档了。另外也可以使用注解<code>@Profile</code>设置环境</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.csdn.demo1.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@EnableKnife</span>4j</span><br><span class="line"><span class="meta">@Import</span>(BeanValidatorPluginsConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果要设置多个用户组，只需要在定义一个Docket并打上@Bean返回即可</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要显示的在线接口文档环境</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">"dev"</span>,<span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">//通过environment.acceptsProfiles判断是否处于当前自己设定的环境中</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">            	<span class="comment">//是否在浏览器显示,如果一直要显示开启，就选择true</span></span><br><span class="line">                .enable(flag)</span><br><span class="line">             	<span class="comment">//.enable(true)</span></span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">"1.0版本"</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径(项目路径也行)</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.csdn.demo1.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"接口说明"</span>)</span><br><span class="line">                .description(<span class="string">"DEMO服务接口说明"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://localhost:8888/"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200822223403412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h1>三、knife项目使用</h1>
<h2 id="1、常用注解介绍">1、常用注解介绍</h2>
<h4 id="Api">@Api()</h4>
<p>作用在类上，用来标注该类具体实现内容。<br>
<em>参数：</em><br>
<strong>tags：类标签，一般用来写类的名称或作用。（常用）<br>
description：可描述描述该类作用。</strong></p>
<hr>
<h4 id="ApiOperation">@ApiOperation()</h4>
<p>用于方法的说明<br>
<em>参数：</em><br>
<strong>value ：方法说明（常用）<br>
notes ：注释说明<br>
httpMethod ： 说明这个方法被请求的方式<br>
response ：方法的返回值的类型</strong></p>
<hr>
<h4 id="ApiOperationSupport">@ApiOperationSupport()</h4>
<p>（knife4j增加特性）用于接口方法排序，作者信息描述等。<br>
<em>参数：</em><br>
<strong>order：排序<br>
author：作者信息</strong></p>
<hr>
<h4 id="ApiImplicitParam">@ApiImplicitParam()</h4>
<p>对单个参数的说明<br>
<em>参数：</em><br>
<strong>name ：参数名。<br>
value ： 参数的具体意义，作用。（常用）<br>
required ： 参数是否必填。 （常用）<br>
dataType ：参数的数据类型。 （常用）<br>
paramType ：查询参数类型，这里有几种形式：<br>
类型　　　　　作用<br>
path 　　　以地址的形式提交数据<br>
query  　　直接跟参数完成自动映射赋值<br>
body　　　以流的形式提交 仅支持POST<br>
header　　参数在request headers 里边提交<br>
form　　　以form表单的形式提交 仅支持POST</strong></p>
<hr>
<h4 id="ApiModel">@ApiModel()</h4>
<p>用于描述一个数据模型的信息，即我们常用的实体、VO类、DTO类等描述<br>
<em>参数：</em><br>
<strong>value ： 数据模型名称。（常用）<br>
description:具体描述<br>
parent：父类</strong></p>
<hr>
<h4 id="ApiModelProperty">@ApiModelProperty()</h4>
<p>用于描述数据模型的属性信息<br>
<em>参数：</em><br>
<strong>value：字段说明 （常用）<br>
name：重写属性名字<br>
dataType：重写属性类型<br>
required：是否必填 （常用）<br>
example：举例说明 （常用）<br>
hidden：隐藏</strong></p>
<hr>
<h4 id="ApiIgnore">@ApiIgnore</h4>
<p>自动生成接口说明时忽略</p>
<h2 id="2、项目中的简单使用">2、项目中的简单使用</h2>
<p> 在项目启动中我还遇到了<code>javax/validation/constraints/Min</code>报错，原因是我使用了最新的springboot框架版本，新版本没有自动引入 validation对应的包，所以要想使用校验功能要手动引入包。在pom.xml引入依赖即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 启动项目后，访问<code>http://localhost:8080/doc.html</code>即可(ip和端口根据实际需求来)。根据接口的不同需求，结合官方文档，可以写出自己需要的个性化需求。下面是我自己测试的demo<br>
<a href="https://doc.xiaominfo.com/knife4j/" target="_blank" rel="noopener">官方文档参考</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200823214211723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20200823214335383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<hr>
<p><a href="https://blog.csdn.net/tuoyun6647/article/details/106021012" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue打包部署出现白屏</title>
    <url>/posts/1e9a5ba7.html</url>
    <content><![CDATA[<h4 id="1、问题描述">1、问题描述</h4>
<p> 我们用vue项目在本地跑的时候一切正常，当时我们用<code>npm run build</code>命令打包并部署服务器后，发现Index展示的是白屏，控制台显示资源都能正确访问到<img src="https://img-blog.csdnimg.cn/20200704175746282.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<a id="more"></a>
<h4 id="2、原因">2、原因</h4>
<p> 出现这个问题的原因就是Vue路由模式的设置问题，首先简单介绍一下Vue的两种路由模式：<strong>hash模式和history模式</strong><br>
 这两个模式最直观的区别就是在url中 hash 模式带了一个很丑的 # 而history是没有#的，在一般开发环境下，这两个模式都是可以正常使用的，但是打包编译的时候这两个模式有些地方需要进行修改才能防止打包后的页面变成空白。</p>
<hr>
<p>PS:页面空白另一种可能是文件引用路径不对，在vue.config.js里修改，之后重新打包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	...</span><br><span class="line">    publicPath: <span class="string">'./'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="3、解决方法">3、解决方法</h4>
<ol>
<li>路由模式设置为hash<br>
 打开<code>router/index.js</code>，设置mode为hash后打包部署</li>
</ol>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">'hash'</span>,</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>路由模式设置为history<br>
 使用这个模式，在开发阶段一切都是正常的，但是需要打包部署时，需要在<code>router/index.js</code>中添加base属性。<a href="http://xn--nginxwww-8t1mv2in3id8aiz1avsc6xnwjy9tljymujbbygo7fg11ix8b.test.com/vue/app/%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%EF%BC%8C%E5%B0%B1%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9C%A8%E6%B7%BB%E5%8A%A0" target="_blank" rel="noopener">假如打包的目录文件是放在nginx服务器www.test.com/vue/app/目录下的，就必须要在添加</a><strong>base:’/vue/app/’</strong>，两边**/**都不能缺少</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">'history'</span>,</span><br><span class="line">    base: <span class="string">'/vue/app/'</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux上使用docker运行酷Q机器人</title>
    <url>/posts/18a55fe7.html</url>
    <content><![CDATA[<p> 我们知道酷Q机器人是运行在windows上的，配合图灵机器人的API可以实现QQ或者微信的自动对话，但是如果想让机器人不间断24小时运行，那就需要使用云服务了，并且需要使用docker作为运行的容器来运行酷Q机器人。</p>
<h3 id="1、安装和运行docker">1、安装和运行docker</h3>
<p>这里我用了Centos的linux操作系统，使用其他Linux的也大同小异，不过这里的操作都需要root权限，没有的话需要<code>sudo su</code>获得root权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载docker</span></span><br><span class="line">yum install docker</span><br><span class="line"><span class="comment">#运行docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2、下载酷Q镜像">2、下载酷Q镜像</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull coolq/wine-coolq</span><br></pre></td></tr></table></figure>
<p>这里的镜像是从docker中央仓库获取，也是别人已经打包好的镜像，我们直接拿来用就行了<br>
<img src="https://img-blog.csdnimg.cn/20200522193608772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
使用<code>docker images</code>可以查看拉取的镜像<br>
<img src="https://img-blog.csdnimg.cn/20200522193655630.png" alt="在这里插入图片描述"></p>
<h3 id="3、后台运行酷Q容器">3、后台运行酷Q容器</h3>
<p>创建一个用于存放（映射）coolq数据的目录，用于持久化存放coolq（酷Q应用）的数据。这里我在根目录下创建cooqldata文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /coolqdata</span><br></pre></td></tr></table></figure>
<p>后台运行<br>
docker run --name=coolq -d -p 8765:9000 -v /coolqdata:/home/user/coolq -e VNC_PASSWD=12345678 -e COOLQ_ACCOUNT=1000000 coolq/wine-coolq</p>
<h6 id="其中部分参数根据自己的需求替换：">其中部分参数根据自己的需求替换：</h6>
<p>远程监听端口<br>
8765(9000映射成8765，前面的端口号可以自定义)<br>
数据存放位置<br>
/coolqdata（容器内的/home/user/coolq路径 映射到本机的/coolqdata）<br>
远程访问密码<br>
12345678（只能设8位）<br>
机器人 QQ 帐号<br>
1000000</p>
<p>==最后开放设置的端口号==</p>
<h4 id="4、登录VNC进行机器人的设置">4、登录VNC进行机器人的设置</h4>
<p>打开浏览器，在浏览器输入服务器ip+端口号即可进行访问，按要求进行机器人的登录设置，可以登录http://www.tuling123.com/ 获取机器人对话的API接口并放入到酷Q中，这里如果需要复制可使用旁边的工具</p>
<p><img src="https://img-blog.csdnimg.cn/20200522195848627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p>参考文章:<a href="https://www.cnblogs.com/tielemao/p/8462263.html" target="_blank" rel="noopener">Linux通过docker安装运行酷Q–用QQ骰子君进行跑团</a>.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos启动Ipv4地址进行远程连接和Yum换源</title>
    <url>/posts/2a55c286.html</url>
    <content><![CDATA[<h3 id="启动Ipv4地址">启动Ipv4地址</h3>
<p> 好多时候，在虚拟机中安装完后，进去centos中，使用<code>ifconfig</code>发现没有此命令，可使用<code>ip a</code>查看IP，但是有时你会发现没有显示ipv4的地址，这样我们也无法进行远程连接，这个问题原因是安装centos的时候没有启用默认的网卡<br>
解决办法:<br>
CentOS配置网卡开机自动获取IP地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts</span><br><span class="line"><span class="comment">#注意这是我的网卡配置，具体机器需要ls查看一下</span></span><br><span class="line">vim ifcfg-ens33</span><br></pre></td></tr></table></figure>
<p>进入配置后将 <code>ONBOOT=”no”</code> 改为 <code>ONBOOT=”yes”</code><br>
保存后执行<code>systemctl restart network</code></p>
<a id="more"></a>
<h3 id="Centos-Yum换源">Centos Yum换源</h3>
<h6 id="1-备份">1. 备份</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<h5 id="2-下载新的-CentOS-Base-repo-到-etc-yum-repos-d">2. 下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/</h5>
<p><strong>CentOS 6</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure>
<p><strong>CentOS 7</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>
<p><strong>CentOS 8</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>
<h5 id="3-运行-yum-makecache-生成缓存">3. 运行 <code>yum makecache</code> 生成缓存</h5>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装Anaconda实现远程Jupyter登陆</title>
    <url>/posts/191c082b.html</url>
    <content><![CDATA[<h3 id="1、下载Anaconda">1、下载Anaconda</h3>
<blockquote>
<p>官方下载: <a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">https://www.anaconda.com/download/</a><br>
清华镜像下载: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=N&amp;O=D" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=N&amp;O=D</a></p>
</blockquote>
<p> centos在线下载最新版Anaconda</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2020.02-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2、Anaconda安装">2、Anaconda安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash Anaconda3-2020.02-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<p> 在安装的过程中间可能会有些询问，比如是否指定新的安装位置等，我这里都选择了默认安装了。</p>
<h3 id="3、加载配置">3、加载配置</h3>
<p> 安装完成后，anaconda会自动初始化，初始化过程中会在 <code>~/.bashrc </code>文件中写入一些内容，因此我们需要重新加载该文件使anaconda生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p> 成功执行后可以发现命令提示符前面加了一个(base)，这就说明成功安装了anaconda<br>
<img src="https://img-blog.csdnimg.cn/20200507203600596.png" alt="Alt"><br>
 这里要注意的是，<code>~/.bashrc</code>初始化的时候，anaconda是默认执行<br>
<code>conda  activate base</code>命令的，如果想变回原来的终端，只需要执行<code>conda deactivate</code>命令。如果想要永久消除，<code>vim  ~/.bashrc</code>进入文件在最后加上<code>conda deactivate</code>，保存退出就可<br>
<img src="https://img-blog.csdnimg.cn/2020050720562438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 另外，如果需要另外安装库，则只需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install xxx</span><br></pre></td></tr></table></figure>
<h3 id="4、配置jupyter-notebook">4、配置jupyter notebook</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入conda base环境，后面操作都需要在base环境下</span></span><br><span class="line">conda activate base</span><br><span class="line"><span class="comment">#生成jupyter的配置文件</span></span><br><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200507210502610.png" alt="alt"><br>
 在设置远程登陆配置前，首先需要生成秘钥</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入python交互环境</span></span><br><span class="line">ipython</span><br><span class="line"><span class="comment">#导入依赖</span></span><br><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line"><span class="comment">#生成秘钥，生成的秘钥要复制</span></span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200507215931671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
 进入配置文件并编辑<code>vim /root/.jupyter/jupyter_notebook_config.py</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在空白区域进行插入</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">'*'</span> <span class="comment">#允许访问此服务器的 IP，星号表示任意 IP</span></span><br><span class="line">c.NotebookApp.password = u<span class="string">'sha1:fdd89498b287:bbb896de44a315f88c0e699db0798ebc2c098686'</span> <span class="comment"># 之前生成的密码 hash 字串</span></span><br><span class="line">c.NotebookApp.open_browser = False <span class="comment"># 运行时不打开本机浏览器</span></span><br><span class="line">c.NotebookApp.port = 9999 <span class="comment"># 端口随意设置，注意确保云服务器此端口要开放。</span></span><br><span class="line">c.NotebookApp.enable_mathjax = True <span class="comment"># 启用 MathJax</span></span><br><span class="line">c.NotebookApp.allow_root = True</span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">'/root/JupyterNotebook'</span> <span class="comment">#工作目录，保存代码项目文件。</span></span><br></pre></td></tr></table></figure>
<p> 保存后退出，并创建工作目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /root/JupyterNotebook</span><br></pre></td></tr></table></figure>
<p> 另外要注意云服务器端口的开放。</p>
<h3 id="5、jupyter后台运行">5、jupyter后台运行</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#后台运行</span></span><br><span class="line">nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure>
<p>成功后可以打开浏览器即可远程登陆使用啦<br>
<img src="https://img-blog.csdnimg.cn/20200507220815404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>服务器Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现Synology NAS的关机</title>
    <url>/posts/461ef441.html</url>
    <content><![CDATA[<h4 id="一、问题描述">一、问题描述</h4>
<p> 因为需要使用编程进行NAS的关机，而且这个程序不能在NAS内部运行，因此想到了使用远程连接来进行NAS的关机操作。因为NAS是一种定制的LINUX系统，因此可以利用Python使用SSH来远程连接，并使用命令行关机指令<code>shutdown -h now</code>实现远程关机。</p>
<a id="more"></a>
<h4 id="二、实验步骤">二、实验步骤</h4>
<h5 id="1、启用NAS的SSH功能">1、启用NAS的SSH功能</h5>
<p>1、打开控制面板选择高级模式<br>
<img src="https://img-blog.csdnimg.cn/20200429112924953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
2、进入终端机和SNMP<br>
<img src="https://img-blog.csdnimg.cn/2020042911293858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
3、选择启用SSH功能<br>
<img src="https://img-blog.csdnimg.cn/20200429112942903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="2、Python实现远程关机">2、Python实现远程关机</h5>
<p>1、安装paramiko模块<br>
 paramiko是用python语言写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。跟常用软件xshell 、xftp功能一样，但是可以连接多台服务器，进行复杂的操作。<br>
 在这里我使用了Jupyter，因此使用了anaconda安装方法。打开<code>Anaconda Prompt (anaconda)</code>终端，输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install paramiko</span><br></pre></td></tr></table></figure>
<p>2、执行Python程序<br>
 这里使用了SSHClient基于用户名和密码的 sshclient 方式登录。其中hostname填写NAS的ip地址，password填写自己设置的密码，command是需要执行的命令。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个sshclient对象</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"><span class="comment"># 允许将信任的主机自动加入到host_allow 列表，此方法必须放在connect方法的前面</span></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"><span class="comment"># 调用connect方法连接服务器</span></span><br><span class="line"><span class="comment"># 需要管理员账号</span></span><br><span class="line">ssh.connect(hostname=<span class="string">'192.168.1.104'</span>, port=<span class="number">22</span>, username=<span class="string">'root'</span>, password=<span class="string">'123456'</span>)</span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="comment"># 关机命令</span></span><br><span class="line">command=<span class="string">"shutdown -h now"</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line"><span class="comment"># 结果放到stdout中，如果有错误将放到stderr中</span></span><br><span class="line">print(stdout.read().decode())</span><br><span class="line">print(<span class="string">'执行完毕'</span>)</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure>
<hr>
<p>其他登录方式参考<br>
<a href="https://blog.csdn.net/appke846/article/details/80514024" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>java设计模式----代理模式</title>
    <url>/posts/31773db5.html</url>
    <content><![CDATA[<h3 id="一、代理模式介绍">一、代理模式介绍</h3>
<p> 代理模式(Proxy Pattern)，是23种设计模式之一，它关心的主要是过程，而不是结果。代理模式主要提供了对目标对象的间接访问方式，即通过代理对象来访问目标对象，这样可以在目标对象实现的基础上，==增强额外的功能操作，即扩展目标对象的功能==，<em>SpringAop</em>便是一个很好的例子。而被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。代理模式的简单示意图如下。<br>
<img src="https://img-blog.csdnimg.cn/2020041418500189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="代理模式示意图"><br>
 代理模式主要有三种实现方式 <strong>静态代理</strong>、<strong>动态代理</strong>(JDK代理、接口代理)和<strong>Cglib代理</strong>(不需要实现接口)。</p>
<a id="more"></a>
<h3 id="二、三种代理模式的简单介绍">二、三种代理模式的简单介绍</h3>
<h4 id="1、静态代理">1、静态代理</h4>
<h6 id="1、介绍">1、介绍</h6>
<p> 静态代理UML类图如下图，StudentDaoProxy类是代理类，通过聚合的方式代理StudentDao类，同时StudentDao类和代理类都实现IStudentDao接口类。<br>
 静态代理的优点是能够较为简单快速的在不修改目标对象的前提下，对目标对象功能进行扩展；而缺点就是不够灵活，如果接口新增方法，那么需要维护类的成本太大。<img src="https://img-blog.csdnimg.cn/2020041419041627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="静态代理"></p>
<h6 id="2、代码实现">2、代码实现</h6>
<p>①新建IStudentDao接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>②被代理的学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"正在读书中。。。。。"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>③创建代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoProxy</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 被代理类聚合到代理类</span></span><br><span class="line">	<span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">StudentDaoProxy</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 通过构造器传入聚合对象，也可以通过set方法传入</span></span><br><span class="line">		<span class="keyword">this</span>.studentDao=studentDao;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 增强方法，这里可以写其他复杂业务</span></span><br><span class="line">		System.out.println(<span class="string">"打开书本。。。。。"</span>);</span><br><span class="line">		<span class="comment">//被代理类原方法</span></span><br><span class="line">		studentDao.read();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>④用户测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		StudentDao studentDao = <span class="keyword">new</span> StudentDao();</span><br><span class="line">		StudentDaoProxy studentDaoProxy = <span class="keyword">new</span> StudentDaoProxy(studentDao);</span><br><span class="line">		<span class="comment">// 使用代理方法</span></span><br><span class="line">		studentDaoProxy.read();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开书本。。。。。</span><br><span class="line">正在读书中。。。。。</span><br></pre></td></tr></table></figure>
<h4 id="2、动态代理">2、动态代理</h4>
<h6 id="1、介绍-v2">1、介绍</h6>
<p> 动态代理对象不需要实现接口，但是目标对象还是需要实现接口。而代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象，相比于静态代理灵活的多，所以也叫JDK代理或接口代理。其UML类图如下<br>
<img src="https://img-blog.csdnimg.cn/20200414195831770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="动态代理"></p>
<h6 id="2、代码实现-v2">2、代码实现</h6>
<p>①新建IStudentDao接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>②被代理的学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"正在读书中。。。。。"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>③创建代理类<br>
这里相比静态代理有点小修改，JDK代理需要使用<code>newProxyInstance</code>方法，其完整写法是<code>static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandlerh)</code>，该方法在<code>java.lang.reflect.Proxy</code>包内，通过反射机制实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 被代理类聚合到代理类</span></span><br><span class="line">	<span class="keyword">private</span> Object target;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object studentDao)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 通过构造器传入聚合对象，也可以通过set方法传入</span></span><br><span class="line">		<span class="keyword">this</span>.target=studentDao;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//给目标对象 生成一个代理对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="comment">//说明</span></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 *  public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">	                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">	                                          InvocationHandler h)	                                          </span></span><br><span class="line"><span class="comment">	            //1. ClassLoader loader ： 指定当前目标对象使用的类加载器, 获取加载器的方法固定</span></span><br><span class="line"><span class="comment">	            //2. Class&lt;?&gt;[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型</span></span><br><span class="line"><span class="comment">	            //3. InvocationHandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法, 会把当前执行的目标对象方法作为参数传入</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), </span><br><span class="line">					target.getClass().getInterfaces(), </span><br><span class="line">					<span class="keyword">new</span> MyInvocationHandler()); </span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		 <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span>  <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">				<span class="comment">// 自定义业务逻辑</span></span><br><span class="line">				System.out.println(<span class="string">"JDK代理开始~~"</span>);</span><br><span class="line">				<span class="comment">//反射机制调用目标对象的方法</span></span><br><span class="line">				Object returnVal = method.invoke(target, args);</span><br><span class="line">				System.out.println(<span class="string">"JDK代理提交"</span>);</span><br><span class="line">				<span class="keyword">return</span> returnVal;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>④用户测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		StudentDao studentDao = <span class="keyword">new</span> StudentDao();</span><br><span class="line">		ProxyFactory studentDaoProxy = <span class="keyword">new</span> ProxyFactory(studentDao);</span><br><span class="line">		<span class="comment">// 使用代理方法,注意这里一定要用接口接收</span></span><br><span class="line">		IStudentDao studentDao2 = (IStudentDao) studentDaoProxy.getProxyInstance();</span><br><span class="line">		studentDao2.read();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JDK代理开始~~</span><br><span class="line">正在读书中。。。。。</span><br><span class="line">JDK代理提交</span><br></pre></td></tr></table></figure>
<h4 id="3、Cglib代理">3、Cglib代理</h4>
<h6 id="1、介绍-v3">1、介绍</h6>
<ul>
<li>动态代理或静态代理都要求实现一个接口，但是对于Cglib并不需要实现任何接口。</li>
<li>Cglib代理也叫作子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展，所以也可称为动态代理。</li>
<li>Cglib是一个强大的高性能的代码生成包，它可以在运行期扩展java类与实现java接口。它广泛的被许多AOP框架使用，例如SpringAOP，实现方法拦截。</li>
<li>在AOP编程中如何选择代理模式：<br>
1.目标对象需要实现接口，用JDK代理<br>
2.目标对象不需要实现接口，用Cglib代理</li>
<li>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类<br>
<img src="https://img-blog.csdnimg.cn/20200414200122604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="cglib代理"></li>
</ul>
<h6 id="2、代码实现-v3">2、代码实现</h6>
<p>使用Cglib时代理的类不能为final/static，否则不会被拦截，同时需要引入cglib相关jar包<br>
链接：<a href="https://pan.baidu.com/s/1ydin81D5ueuIm2cbSXSnIw" target="_blank" rel="noopener">https://pan.baidu.com/s/1ydin81D5ueuIm2cbSXSnIw</a><br>
提取码：b5au</p>
<p>①被代理的学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"正在读书中。。。。。"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>②创建代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//维护一个目标对象</span></span><br><span class="line">		<span class="keyword">private</span> Object target;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//构造器，传入一个被代理的对象</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.target = target;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//返回一个代理对象:  是 target 对象的代理对象</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="comment">//1. 创建一个工具类</span></span><br><span class="line">			Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">			<span class="comment">//2. 设置父类</span></span><br><span class="line">			enhancer.setSuperclass(target.getClass());</span><br><span class="line">			<span class="comment">//3. 设置回调函数</span></span><br><span class="line">			enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">			<span class="comment">//4. 创建子类对象，即代理对象</span></span><br><span class="line">			<span class="keyword">return</span> enhancer.create();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">		<span class="comment">//重写  intercept 方法，会调用目标对象的方法</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object arg0, Method method, Object[] args, MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			System.out.println(<span class="string">"Cglib代理模式 ~~ 开始"</span>);</span><br><span class="line">			Object returnVal = method.invoke(target, args);</span><br><span class="line">			System.out.println(<span class="string">"Cglib代理模式 ~~ 提交"</span>);</span><br><span class="line">			<span class="keyword">return</span> returnVal;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>③用户测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		StudentDao studentDao = <span class="keyword">new</span> StudentDao();</span><br><span class="line">		ProxyFactory studentDaoProxy = <span class="keyword">new</span> ProxyFactory(studentDao);</span><br><span class="line">		StudentDao studentDao2 = (StudentDao)studentDaoProxy.getProxyInstance();</span><br><span class="line">		studentDao2.read();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cglib代理模式 ~~ 开始</span><br><span class="line">正在读书中。。。。。</span><br><span class="line">Cglib代理模式 ~~ 提交</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker制作自己的镜像--ubuntu16.04构建Python和Paddlepaddle</title>
    <url>/posts/e1b007ae.html</url>
    <content><![CDATA[<h3 id="1、拉取ubuntu16-04纯净镜像">1、拉取ubuntu16.04纯净镜像</h3>
<p>首先进入虚拟机管理员，将ubuntu16基础镜像从中心仓库拉下来，输入命令<code>docker pull ubuntu:16.04</code>,<br>
docker就会自动下载ubuntu16的镜像了<br>
<img src="https://img-blog.csdnimg.cn/20200410202138280.png" alt="在这里插入图片描述"><br>
用<code>docker images</code> 查看下载好的镜像<br>
<img src="https://img-blog.csdnimg.cn/20200410202204654.png" alt="在这里插入图片描述"><br>
因为需要制作自己的容器，因此先下载好python3.7的tar包，这里我们选择编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在线下载python3.7，如果嫌慢可以先下载好直接拖进来</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200410202353342.png" alt="在这里插入图片描述"></p>
<a id="more"></a>
<h3 id="2、ubuntu16-04容器内安装Python3-7和Paddlepaddle">2、ubuntu16.04容器内安装Python3.7和Paddlepaddle</h3>
<p><code>docker run -it -v $PWD:/home/root123 ubuntu:16.04 /bin/bash</code>输入命令进入并运行容器，可以看见成功进入ubuntu容器了<br>
<img src="https://img-blog.csdnimg.cn/20200410202325422.png" alt="在这里插入图片描述"><br>
在这里有可能自带的apt源还是国外的，而且没有vi/vim可编辑软件，所以这里用了echo直接更新源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse"</span> &gt;&gt;/etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse"</span> &gt;&gt;/etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse"</span> &gt;&gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>之后进行必要的组件升级安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line"></span><br><span class="line">apt install vim	<span class="comment">#安装vim</span></span><br><span class="line"></span><br><span class="line">apt install gcc</span><br><span class="line"></span><br><span class="line"><span class="comment">###pythin必须的基础包</span></span><br><span class="line">apt-get install zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat1-dev</span><br><span class="line"></span><br><span class="line">apt-get install liblzma-dev libffi-dev libc6-dev</span><br></pre></td></tr></table></figure>
<p>完成后进入与主机挂载的目录下，可以看见主机目录的文件成功映射到了虚拟机内<br>
<img src="https://img-blog.csdnimg.cn/20200410202407936.png" alt="在这里插入图片描述"><br>
解压<code>tar -zxvf Python-3.7.0.tgz</code>，完成后进入Python-3.7.0目录，后面就需要依次进行编译安装了，这步可能时间会有点长</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下命令分开执行</span></span><br><span class="line">./configure --with-ssl --prefix=/usr/<span class="built_in">local</span>/python3 --<span class="built_in">enable</span>-optimizations</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>之后进行链接，依次输入一下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/python3.7 /usr/bin/python3</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3.7 /usr/bin/pip3</span><br></pre></td></tr></table></figure>
<p>到此为止Python就安装完了，验证一下发现很成功<br>
<img src="https://img-blog.csdnimg.cn/20200410202416990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
接下来就进行Paddlepaddle的安装，这里因为安装了pip，因此使用pip安装，输入以下命令</p>
<p>当然也可以用其他方式安装，<a href="https://www.paddlepaddle.org.cn/install/quick" target="_blank" rel="noopener">其他安装方式</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure>
<p>安装完成后，验证一下是否成功安装。</p>
<p>先进入<code>python3</code>，然后输入<code>import paddle.fluid</code>，在输入<code>paddle.fluid.install_check.run_check()</code>，如果出现 <code>Your Paddle Fluid is installed successfully!</code>，说明已成功安装。<br>
<img src="https://img-blog.csdnimg.cn/20200410202427737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3、制作自己的镜像">3、制作自己的镜像</h3>
<p>退出容器后，我们需要构建自己的镜像,可以看到，我们成功的构建了属于我们自己的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment">#-m后是说明文字 -a是作者 容器id 后面是镜像名字</span></span><br><span class="line">docker commit -m <span class="string">"add vim&amp;source"</span> -a <span class="string">"author"</span> 1db56d541f2c python:1.0</span><br><span class="line"><span class="comment">#完成后输入一下即可看见新的镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200410202434190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlbW9uX1RU,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
最后可将容器保存为文件，存放于当前目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o python.tar python3.7:1.0</span><br></pre></td></tr></table></figure>
<p>而从外部装载时则需要输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load -input python.tar</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Synology安装并实现在linux和win下使用ISCSI存储</title>
    <url>/posts/63c06a7a.html</url>
    <content><![CDATA[<h3 id="1、虚拟机安装Synology需要准备的工具">1、虚拟机安装Synology需要准备的工具</h3>
<ul>
<li>
<p>Synology Assistant</p>
</li>
<li>
<p>DSM_DS3615xs_5967.pat</p>
</li>
<li>
<p>XPEnoboot_DS3615xs_5.2-5967.1.iso</p>
</li>
</ul>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1vU0WDlJV_pxTTt0d02KLKg" target="_blank" rel="noopener">https://pan.baidu.com/s/1vU0WDlJV_pxTTt0d02KLKg</a>  提取码：0sy9<br>
或者https://download.csdn.net/download/lemon_TT/14945706</p>
</blockquote>
<p>注意DSM和XPEnoboot的版本要一致，如上都是DS3615xs_5967</p>
<p>XPEnoboot_DS3615xs_5.1-5967.1.iso用于引导镜像</p>
<p>DSM是系统文件</p>
<p>Synology Assistant是客户端管理工具</p>
<a id="more"></a>
<h3 id="2、-Synology的安装">2、 Synology的安装</h3>
<h5 id="打开虚拟机新建，选择自定义">打开虚拟机新建，选择自定义</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GW1XUe.png" alt="GW1XUe.png"></p>
<h5 id="因为考虑兼容问题，这里选择12的版本">因为考虑兼容问题，这里选择12的版本</h5>
<p><a href="https://imgchr.com/i/GW1Tjx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GW1Tjx.png" alt="GW1Tjx.png"></a><br>
<a href="https://imgchr.com/i/GW1og1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GW1og1.png" alt="GW1og1.png"></a><br>
<a href="https://imgchr.com/i/GW1I3R" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GW1I3R.png" alt="GW1I3R.png"></a><br>
<a href="https://imgchr.com/i/GW15C9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GW15C9.png" alt="GW15C9.png"></a></p>
<h5 id="网络选择桥接模式，为了让局域网内其他主机能够顺利进行访问">网络选择桥接模式，为了让局域网内其他主机能够顺利进行访问</h5>
<p><a href="https://imgchr.com/i/GW1fN4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GW1fN4.png" alt="GW1fN4.png"></a><br>
<a href="https://imgchr.com/i/GW1Hu6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GW1Hu6.md.png" alt="GW1Hu6.md.png"></a><br>
<a href="https://imgchr.com/i/GW1qHO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/08/GW1qHO.md.png" alt="GW1qHO.md.png"></a></p>
<h5 id="因为本次需要搭建一个raid6，因此至少需要4个硬盘。在这里我们先创建好">因为本次需要搭建一个raid6，因此至少需要4个硬盘。在这里我们先创建好</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GW1OED.png" alt="GW1OED.png"></p>
<h5 id="如何需要修改电源固件选项，需要把CD-ROM设置为优先启动，保存后选择install">如何需要修改电源固件选项，需要把CD-ROM设置为优先启动，保存后选择install</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GW8smV.png" alt="GW8smV.png"><br>
<img src="https://s1.ax1x.com/2020/04/08/GW8DO0.png" alt="GW8DO0.png"></p>
<p><img src="https://s1.ax1x.com/2020/04/08/GW86TU.png" alt="GW86TU.png"></p>
<hr>
<h4 id="到目前为止，就可以进行NAS的安装了，打开群晖助手进行扫描，如果没有报错，也可以进行安装，但是如果报错了没找到，没关系，我们还有另一种网页进行安装，下面让我来详细介绍一下。">到目前为止，就可以进行NAS的安装了，打开群晖助手进行扫描，如果没有报错，也可以进行安装，但是如果报错了没找到，没关系，我们还有另一种网页进行安装，下面让我来详细介绍一下。</h4>
<h5 id="首先打开浏览器输入以下网址http-find-synology-com-浏览器就会自动搜索了">首先打开浏览器输入以下网址<code>http://find.synology.com/</code>浏览器就会自动搜索了</h5>
<h5 id="选择联机">选择联机</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWtl4S.png" alt="GWtl4S.png"></p>
<h5 id="在此之后选择手动安装，如何将pat文件加进来后选择立即安装">在此之后选择手动安装，如何将pat文件加进来后选择立即安装</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWtmnI.png" alt="GWtmnI.png"></p>
<h5 id="选择确定后需要等待急几分钟">选择确定后需要等待急几分钟</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWtE1H.png" alt="GWtE1H.png"></p>
<h5 id="完成后创建用户名和密码">完成后创建用户名和密码</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWNpvj.png" alt="GWNpvj.png"></p>
<h5 id="中间的更新选项可以自由选择，而账户创建选择跳过，之后成功进入NAS界面了">中间的更新选项可以自由选择，而账户创建选择跳过，之后成功进入NAS界面了</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWNE5T.png" alt="GWNE5T.png"></p>
<h3 id="3、iSCSI存储的构建">3、iSCSI存储的构建</h3>
<h5 id="打开存储空间管理员选项，可以看见有4个空硬盘">打开存储空间管理员选项，可以看见有4个空硬盘</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWUX9S.png" alt="GWUX9S.png"></p>
<h5 id="选择iSCSI-LUN，选择新增">选择iSCSI LUN，选择新增</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWUvcQ.png" alt="GWUvcQ.png"></p>
<h5 id="直接默认选项下一步，raid类型选择RAID6">直接默认选项下一步，raid类型选择RAID6</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWagDs.png" alt="GWagDs.png"></p>
<h5 id="如果设计隐私，可以启用CHAP进行密码保护">如果设计隐私，可以启用CHAP进行密码保护</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWayvQ.png" alt="GWayvQ.png"><br>
<img src="https://s1.ax1x.com/2020/04/08/GWar8S.png" alt="GWar8S.png"><br>
<img src="https://s1.ax1x.com/2020/04/08/GWaDC8.png" alt="GWaDC8.png"></p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWagDs.png" alt="GWagDs.png"><br>
<img src="https://s1.ax1x.com/2020/04/08/GWayvQ.png" alt="GWayvQ.png"><br>
<img src="https://s1.ax1x.com/2020/04/08/GWar8S.png" alt="GWar8S.png"></p>
<h5 id="成功后显示如下信息就大功告辞了，这里因为有奇偶校验盘，所以会有容量损失。">成功后显示如下信息就大功告辞了，这里因为有奇偶校验盘，所以会有容量损失。</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWaDC8.png" alt="GWaDC8.png"></p>
<h3 id="4、在windows上使用iSCSI存储">4、在windows上使用iSCSI存储</h3>
<h5 id="在windows控制面板中的管理工具，打开iSCSI发起程序">在windows控制面板中的管理工具，打开iSCSI发起程序</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GW2qqf.png" alt="GW2qqf.png"></p>
<h5 id="在发现里输入NAS的ip地址，程序就会自动搜寻">在发现里输入NAS的ip地址，程序就会自动搜寻</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GW2bsP.png" alt="GW2bsP.png"></p>
<h5 id="可以看到程序已经成功发现目标，选择连接即可连接到iSCSI-LUN">可以看到程序已经成功发现目标，选择连接即可连接到iSCSI LUN</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GW2HMt.png" alt="GW2HMt.png"></p>
<h5 id="打开磁盘管理，这里为了兼容我们选择MBR">打开磁盘管理，这里为了兼容我们选择MBR</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWWZ0f.png" alt="GWWZ0f.png"></p>
<h5 id="然后可以发现多了一个空磁盘，选择新建卷，格式化后就形成了一个新的磁盘，打开我的电脑即可访问新的磁盘，和内置磁盘一模一样。">然后可以发现多了一个空磁盘，选择新建卷，格式化后就形成了一个新的磁盘，打开我的电脑即可访问新的磁盘，和内置磁盘一模一样。</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWWVnP.png" alt="GWWVnP.png"><br>
<img src="https://s1.ax1x.com/2020/04/08/GWWAXt.png" alt="GWWAXt.png"></p>
<h3 id="5、在ESXi下使用iSCSI-存储">5、在ESXi下使用iSCSI 存储</h3>
<p>首先需要断开windows的连接，这里默认已经启动好了ESXi虚拟机，打开exsi浏览器控制面板。</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GW5dVx.png" alt="GW5dVx.png"></p>
<h5 id="选择配置iSCSI，在动态目标里填上NAS的ip地址，保存后退出再进来可以发现静态目标已经自动生成。">选择配置iSCSI，在动态目标里填上NAS的ip地址，保存后退出再进来可以发现静态目标已经自动生成。</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GW4kc9.png" alt="GW4kc9.png"><br>
<img src="https://s1.ax1x.com/2020/04/08/GW49tU.png" alt="GW49tU.png"></p>
<h5 id="在设备里可以成功找到我们安装好的为定义的空磁盘">在设备里可以成功找到我们安装好的为定义的空磁盘</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWIAdx.png" alt="GWIAdx.png"></p>
<h5 id="如何右键删除分区表后再重新进入选择新建数据存储">如何右键删除分区表后再重新进入选择新建数据存储</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWo2UP.png" alt="GWo2UP.png"></p>
<h5 id="默认下一步">默认下一步</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWo5vQ.png" alt="GWo5vQ.png"><br>
<img src="https://s1.ax1x.com/2020/04/08/GWoh8S.png" alt="GWoh8S.png"></p>
<h5 id="最终可以看见成功创建好了分区，之后就可以直接在该文件存储上存储数据了">最终可以看见成功创建好了分区，之后就可以直接在该文件存储上存储数据了</h5>
<p><img src="https://s1.ax1x.com/2020/04/08/GWT3Pf.png" alt="GWT3Pf.png"></p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>NAS、SAN、ISCSI存储简单理解</title>
    <url>/posts/2.927e+166.html</url>
    <content><![CDATA[<h3 id="NAS">NAS</h3>
<p> NAS是Network-Attached Storage的简称。中文一般称为“网络附加存储”，或者“网络连接存储”。我们可以把NAS理解为通过网络提供存储的设备（请特别注意，不需要光纤交换机，普通的局域网交换机即可）。</p>
<p>NAS是一种基于IP的高性能文件共享和存储专用设备。</p>
<ul>
<li>可使NAS客户端通过IP网络共享文件</li>
<li>采用针对文件I/O而优化的专用操作系统</li>
<li>使UNIX和Windows用户都能共享数据</li>
</ul>
<p> 通俗来讲：NAS可以是一个独立的存储系统，从与普通的应用服务器对比也可以看出，NAS是直接独立的存储，我们就称为<strong>NAS存储系统</strong>。一般来说，我们也可以用NAS搭建家庭共享存储设备，可以实现视频、照片等在多终端的同时共享。</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWAFfS.png" alt="GWAFfS.png"></p>
<a id="more"></a>
<h3 id="SAN">SAN</h3>
<p> SAN全称Storage Area Network and SAN Protocols，中文名存储区域网络，SAN是一种高速网络，提供在计算机与存储系统之间的数据传输。存储设备是指一台或多台用以存储计算机数据的磁盘设备，通常指磁盘阵列。其采用网状通道（Fibre Channel，简称FC）技术，通过FC交换机连接存储阵列和服务器主机，建立专用于数据存储的区域网络。SAN存储由于其基础是一个专用网络，因此扩展性很强，不管是在一个SAN系统中增加一定的存储空间还是增加几台使用存储空间的服务器都非常方便。</p>
<p>但注意的是，SAN和NAS并不是相互冲突的，是可以共存于一个系统网络中的，但NAS通过一个公共的接口实现空间的管理和资源共享，SAN仅仅是为服务器存储数据提供一个专门的快速后方通道</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWE1Et.png" alt="GWE1Et.png"></p>
<h3 id="iSCSI存储">iSCSI存储</h3>
<p> 使用专门的存储区域网成本很高，而利用普通的数据网来传输ISCSI数据实现和SAN相似的功能可以大大的降低成本，同时提高系统的灵活性。SCSI就是这样一种技术，它利用普通的TCP/IP网来传输本来用存储区域网来传输的SCSI数据块。</p>
<p> ISCSI网络存储的兴起原因：使用专门的光纤介质组建的SAN模式的存储区域网成本很高，而利用普通的数据网来传输ISCSI数据实现和SAN相似的功能可以大大的降低成本，同时提高系统的灵活性。</p>
<p><img src="https://s1.ax1x.com/2020/04/08/GWZtmj.png" alt="GWZtmj.png"></p>
<h3 id="DAS"><strong>DAS</strong></h3>
<p> 一种直接与主机系统相连接的存储设备，如作为服务器的计算机内部硬件驱动。</p>
<h6 id=""></h6>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot2整合WebSocket入门实战</title>
    <url>/posts/f56bb91e.html</url>
    <content><![CDATA[<h3 id="一、问题描述">一、问题描述</h3>
<p>最近刚好有一个需要，就是需要服务端推送消息到客户端，解决方案第一个想到的便是前端轮询服务器，查询服务器是否有请求。对于这种方法，优点是简单，但缺点也十分明显，那就是十分耗费服务器资源。因此在这里介绍了第二种方法，使用webSocket。</p>
<h3 id="二、websocket与http-区别">二、websocket与http 区别</h3>
<p>http协议是用在应用层的协议，他是基于tcp协议的，http协议建立链接也必须要有三次握手才能发送信息。http链接分为短链接，长链接，短链接是每次请求都要三次握手才能发送自己的信息。即每一个request对应一个response。长链接是在一定的期限内保持链接。保持TCP连接不断开。客户端与服务器通信，必须要有客户端发起然后服务器返回结果。客户端是主动的，服务器是被动的。<br>
WebSocket是HTML5中的协议， 他是为了解决客户端发起多个http请求到服务器资源浏览器必须要经过长时间的轮训问题而生的，他实现了多路复用，他是全双工通信。在webSocket协议下客服端和浏览器可以同时发送信息。服务器也可以主动推送消息给客户端。</p>
<p><a href="https://imgchr.com/i/G2Em9g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/07/G2Em9g.md.png" alt="G2Em9g.md.png"></a></p>
<a id="more"></a>
<h3 id="三、springboot整合WebSocket">三、springboot整合WebSocket</h3>
<h5 id="1、maven依赖">1、maven依赖</h5>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h5 id="2、配置WebSocketConfig">2、配置WebSocketConfig</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//如果使用了springboot启动项目，则需要bean注入，而如果使用了外置tomcat容器，则并不要bean注入，否侧会报错</span></span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3、设置WebSocketServer（重点）">3、设置WebSocketServer（重点）</h5>
<p>直接<code>@ServerEndpoint(&quot;/wsserver/{userId}&quot;)</code> 、<code>@Component</code>启用即可，然后在里面实现<code>@OnOpen</code>开启连接，<code>@onClose</code>关闭连接，<code>@onMessage</code>接收消息等方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/wsserver/&#123;userId&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(WebSocketServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">/**静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String,WebSocketServer&gt; webSocketMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**与某个客户端的连接会话，需要通过它来给客户端发送数据*/</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="comment">/**接收userId*/</span></span><br><span class="line">    <span class="keyword">private</span> String userId=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法*/</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session,@PathParam(<span class="string">"userId"</span>)</span> String userId) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        <span class="keyword">this</span>.userId=userId;</span><br><span class="line">        <span class="keyword">if</span>(webSocketMap.containsKey(userId))&#123;</span><br><span class="line">            webSocketMap.remove(userId);</span><br><span class="line">            webSocketMap.put(userId,<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">//加入set中</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            webSocketMap.put(userId,<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">//加入set中</span></span><br><span class="line">            addOnlineCount();</span><br><span class="line">            <span class="comment">//在线数加1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"用户连接:"</span>+userId+<span class="string">",当前在线人数为:"</span> + getOnlineCount());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendMessage(<span class="string">"连接成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"用户:"</span>+userId+<span class="string">",网络异常!!!!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(webSocketMap.containsKey(userId))&#123;</span><br><span class="line">            webSocketMap.remove(userId);</span><br><span class="line">            <span class="comment">//从set中删除</span></span><br><span class="line">            subOnlineCount();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"用户退出:"</span>+userId+<span class="string">",当前在线人数为:"</span> + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *需要有</span></span><br><span class="line"><span class="comment">     * &#123;</span></span><br><span class="line"><span class="comment">     *     xxx:xxx,</span></span><br><span class="line"><span class="comment">     *     "toUserId","xx"</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息*/</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">            logger.info(<span class="string">"用户消息:"</span>+userId+<span class="string">",报文:"</span>+message);</span><br><span class="line">            <span class="comment">//可以群发消息</span></span><br><span class="line">            <span class="comment">//消息保存到数据库、redis</span></span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotBlank(message))&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//解析发送的报文</span></span><br><span class="line">                    JSONObject jsonObject = JSON.parseObject(message);</span><br><span class="line">                    <span class="comment">//追加发送人(防止串改)</span></span><br><span class="line">                    jsonObject.put(<span class="string">"fromUserId"</span>,<span class="keyword">this</span>.userId);</span><br><span class="line">                    String toUserId=jsonObject.getString(<span class="string">"toUserId"</span>);</span><br><span class="line">                    <span class="comment">//传送给对应toUserId用户的websocket</span></span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.isNotBlank(toUserId)&amp;&amp;webSocketMap.containsKey(toUserId))&#123;</span><br><span class="line">                        webSocketMap.get(toUserId).sendMessage(jsonObject.toJSONString());</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        logger.error(<span class="string">"请求的userId:"</span>+toUserId+<span class="string">"不在该服务器上"</span>);</span><br><span class="line">                        <span class="comment">//否则不在这个服务器上，发送到mysql或者redis</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"用户错误:"</span>+<span class="keyword">this</span>.userId+<span class="string">",原因:"</span>+error.getMessage());</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现服务器主动推送</span></span><br><span class="line"><span class="comment">     * 这里需要</span></span><br><span class="line"><span class="comment">     * &#123;xxx:xxx&#125;格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.session);</span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送自定义消息</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String message,@PathParam(<span class="string">"userId"</span>)</span> String userId) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"发送消息到:"</span>+userId+<span class="string">"，报文:"</span>+message);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(userId)&amp;&amp;webSocketMap.containsKey(userId))&#123;</span><br><span class="line">            webSocketMap.get(userId).sendMessage(message);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            logger.error(<span class="string">"用户"</span>+userId+<span class="string">",不在线！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果项目使用了nginx反向代理，则需要在nginx的配置文件的<code>location/</code>位置处添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line"><span class="comment"># 超时时间设置为两小时</span></span><br><span class="line">proxy_read_timeout 7200s;</span><br></pre></td></tr></table></figure>
<h5 id="4、前端页面调用">4、前端页面调用</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test My WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Test<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"send()"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeWebSocket()"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> websocket = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//连接WebSocket节点 </span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//这里的userid自己修改就可以模拟开多个界面</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//这里的地址写上你websocket的服务地址</span></span></span><br><span class="line"><span class="actionscript">        websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8888/wsserver/1"</span>);</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Not support websocket'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//连接发生错误的回调方法</span></span></span><br><span class="line"><span class="actionscript">    websocket.onerror = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        setMessageInnerHTML(<span class="string">"error"</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="comment">//连接成功建立的回调方法</span></span></span><br><span class="line"><span class="actionscript">    websocket.onopen = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            setMessageInnerHTML(<span class="string">"open"</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//接收到消息的回调方法</span></span></span><br><span class="line"><span class="actionscript">    websocket.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line">        setMessageInnerHTML(event.data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//连接关闭的回调方法</span></span></span><br><span class="line"><span class="actionscript">    websocket.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        setMessageInnerHTML(<span class="string">"close"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        websocket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//将消息显示在网页上</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">setMessageInnerHTML</span><span class="params">(innerHTML)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>).innerHTML += innerHTML + <span class="string">'&lt;br/&gt;'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//关闭连接</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">closeWebSocket</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        websocket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).value;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(message);</span></span><br><span class="line">        websocket.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="5、运行结果">5、运行结果</h5>
<p>在这里我开了两个界面，userId分别是1和2，这里我在1发送了如下json串，这会经过服务器自动转发到仍然在线的2。同时我们可以查看到服务端可以统计当前在线人数，还打印出了转发的报文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;msg&quot;: &quot;wda&quot;,</span><br><span class="line">	&quot;toUserId&quot;: &quot;2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/G2VoLR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/07/G2VoLR.md.png" alt="G2VoLR.md.png"></a><br>
<a href="https://imgchr.com/i/G2VIy9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/07/G2VIy9.md.png" alt="G2VIy9.md.png"></a></p>
<p>简单的实战到此为止，再次基础上可以修改很多功能啦~</p>
<p><br><br><br></p>
<p><a href="https://blog.csdn.net/huiyunfei/article/details/90719351?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2" target="_blank" rel="noopener">参考博客</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot集成RabbitMQ简单入门实践</title>
    <url>/posts/538a1b2.html</url>
    <content><![CDATA[<h3 id="一、RabbitMQ核心概念">一、RabbitMQ核心概念</h3>
<p>RabbitMQ是一个由erlang开发的AMQP(Advanved Message Queue Protocol)的开源实现。所有 MQ 产品从模型抽象上来说都是一样的过程：</p>
<blockquote>
<p>消费者（consumer）订阅某个队列。生产者（producer）创建消息，然后发布到队列（queue）中，最后将消息发送到监听的消费者。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f2c700887fa3dfe1fae01a0dbe6ecf63.png" alt=""></p>
<h5 id="1、Message">1、Message</h5>
<p>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key(路由键)、priority(相对于其他消息的优先权)、delivery-mode(指出该消息可能需要持久性存储)等。</p>
<h5 id="2、Publisher">2、Publisher</h5>
<p>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</p>
<a id="more"></a>
<h5 id="3、Exchange">3、Exchange</h5>
<p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</p>
<p>Exchange有4种类型:direct(默认)，fanout, topic, 和headers，不同类型的Exchange转发消息的策略有所区别。</p>
<h5 id="4、Queue">4、Queue</h5>
<p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。</p>
<h5 id="5、Binding">5、Binding</h5>
<p>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。Exchange 和Queue的绑定可以是多对多的关系。</p>
<h5 id="6、Connection">6、Connection</h5>
<p>网络连接，比如一个TCP连接。</p>
<h5 id="7、Channel">7、Channel</h5>
<p>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条TCP连接。</p>
<h5 id="8、Consumer">8、Consumer</h5>
<p>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</p>
<h5 id="9、Virtual-Host">9、Virtual Host</h5>
<p>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定， RabbitMQ 默认的 vhost 是 / 。</p>
<h5 id="10、Broker">10、Broker</h5>
<p>表示消息队列服务器实体<br>
<img src="https://img-blog.csdnimg.cn/img_convert/372d6ee73ac9f85bfbea86a0421b4906.png" alt="GZ9M79.png"></p>
<h3 id="二、AMQP的消息路由">二、AMQP的消息路由</h3>
<ol>
<li>
<p>AMQP 中消息的路由过程和 Java 开发者熟悉的 JMS 存在一些差别，AMQP 中增加了 Exchange 和 Binding 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。<br>
<img src="https://img-blog.csdn.net/20181022154515317?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NDc5MDQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<h4 id="Exchange-类型"><strong>Exchange 类型</strong></h4>
<p>Exchange分发消息时根据类型的不同分发策略有区别，目前共四种类型：direct、fanout、topic、headers 。headers 匹配 AMQP 消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接看另外三种类型：</p>
<h4 id="1、direct">1、direct</h4>
<p><img src="https://img-blog.csdn.net/20181022154545524?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NDc5MDQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<p>direct 交换器</p>
<p>消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发 routing key 标记为“dog”的消息，不会转发“dog.puppy”，也不会转发“dog.guard”等等。它是完全匹配、单播的模式。</p>
<h4 id="2、fanout">2、fanout</h4>
<p><img src="https://img-blog.csdn.net/20181022154613161?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NDc5MDQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<p>fanout 交换器</p>
<p>每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。fanout 类型转发消息是最快的。</p>
<h4 id="3、topic">3、topic</h4>
<p><img src="https://img-blog.csdn.net/20181022154644143?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NDc5MDQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<p>topic 交换器</p>
<p>topic 交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样也会识别两个通配符：符号“#”和符号“</p>
<p>”。#匹配0个或多个单词，</p>
<p>匹配不多不少一个单词。</p>
</li>
</ol>
<h3 id="三、RabbitMQ的安装">三、RabbitMQ的安装</h3>
<p>Windows和Linux的普通安装我在这就不阐述了，网上一搜有很多方法，但要注意的是erl版本和RabbitMQ版本的对应关系，具体见<a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">官网版本对应</a></p>
<p>在这里我提供了一种简单的安装方法，这里的安装环境是centos7.6，docker安装，直接几分钟就可以安装好了。默认你已经安装好了docker</p>
<blockquote>
<p>1、打开远程服务器，记得下载这个带web管理的</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.查看下载的镜像</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.运行镜像，这里注意防火墙的开放</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.输入网址：<a href="http://IP:15672/" target="_blank" rel="noopener">http://IP:15672/</a> 账号密码：guest/guest，即可进入web管理界面</p>
</blockquote>
<h3 id="四、springboot集成简单实践-点对点">四、springboot集成简单实践(点对点)</h3>
<h5 id="1、打开管理界面，点击进入Exchanges，选择新建一个，这里我设置名字为exchange-direct，并且选择类型为direct-表示点对点。而如果要广播模式，就选择fanout模式，并且绑定的队列不需要设置路由键，这样只要有生产者生产，所有监听的消费者都能收到。">1、打开管理界面，点击进入Exchanges，选择新建一个，这里我设置名字为exchange.direct，并且选择类型为direct,表示点对点。而如果要广播模式，就选择fanout模式，并且绑定的队列不需要设置路由键，这样只要有生产者生产，所有监听的消费者都能收到。</h5>
<p><img src="https://img-blog.csdnimg.cn/img_convert/58afb5845b1749c97694b90911235eda.png" alt="GZkGLT.png"></p>
<h5 id="2、点击Queues，新建一个队列，这里我新建了login的队列">2、点击Queues，新建一个队列，这里我新建了login的队列</h5>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5e3c0de2e5e49c14a7443cc9b7118db4.png" alt="GZk8yV.md.png"></p>
<h5 id="3、返回刚才的Exchange交换器，点击进入我们刚才创建的exchange-direct，来对login队列进行绑定，这里路由键也设置为login">3、返回刚才的Exchange交换器，点击进入我们刚才创建的exchange.direct，来对login队列进行绑定，这里路由键也设置为login</h5>
<p><img src="https://img-blog.csdnimg.cn/img_convert/deed23c94bbfbfe9f072d28d0cf8bbd7.png" alt="GZkYeU.png"></p>
<h5 id="4、springboot项目引入maven依赖">4、springboot项目引入maven依赖</h5>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h5 id="5、配置yml">5、配置yml</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: <span class="number">5672</span></span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br></pre></td></tr></table></figure>
<h5 id="6、config">6、config</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义MessageConverter：将数据自动转为josn发送出去</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAMQPConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="6、利用RabbitTemplate消息发送处理组件">6、利用RabbitTemplate消息发送处理组件</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对象被默认序列化</span></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"helloword"</span>);</span><br><span class="line">        map.put(<span class="string">"data"</span>, Arrays.asList(<span class="string">"jkdsnj"</span>,<span class="number">123</span>,<span class="keyword">true</span>));</span><br><span class="line">       rabbitTemplate.convertAndSend(<span class="string">"exchange.direct"</span>,<span class="string">"login"</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="comment">//这是监听，一有生产者生产，这里立刻能收到消息</span></span><br><span class="line">        Object o = rabbitTemplate.receiveAndConvert(<span class="string">"login"</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>另外消费者还可以通过注解实现，在方法前加入RabbitListener，并写出队列，即可自动监听，同时注意需要在启动类上加@EnableRabbit</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"login"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Map map)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Rabbit"</span> + map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>好了，到现在为止，一个简单的点对点消息队列已经集成完毕，根据这个可以根据需要加入到项目中，具体也可见参考文章</p>
<br/>
<hr>
<h4 id="参考文章">参考文章</h4>
<p><a href="https://blog.csdn.net/qq_29479041/article/details/83273735" target="_blank" rel="noopener">https://blog.csdn.net/qq_29479041/article/details/83273735</a></p>
<p><a href="https://www.jianshu.com/p/bd41f1a1e53d" target="_blank" rel="noopener">https://www.jianshu.com/p/bd41f1a1e53d</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装zookeeper和Web UI</title>
    <url>/posts/f2395be.html</url>
    <content><![CDATA[<h2 id="一、zookeeper的安装">一、zookeeper的安装</h2>
<h4 id="1、zookeeper介绍">1、zookeeper介绍</h4>
<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>
<p>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>
<p>ZooKeeper包含一个简单的原语集， [1] 提供Java和C的接口。官网：<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org</a></p>
<h4 id="2、安装环境">2、安装环境</h4>
<p>Centos7.6 、JDK1.8</p>
<a id="more"></a>
<h4 id="3、安装过程">3、安装过程</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.6.2-bin.tar.gz</span><br></pre></td></tr></table></figure>
<p>进入conf文件夹<code>cd  apache-zookeeper-3.6.2-bin/conf</code>将配置文件复制，这一步很关键，另外整个文件名可以修改一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>
<p>然后在根目录新建/data，并且配置zoo.cfg其中两项如下(这是我自己定义的路径)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dataDir=/data/zookeeper/data</span><br><span class="line">dataLogDir=/data/zookeeper/logs</span><br></pre></td></tr></table></figure>
<p>另外zookeeper是默认占用8080端口的，如果开了tomcat就会报错，所以我在配置文件里添加了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">admin.serverPort=11223</span><br></pre></td></tr></table></figure>
<p>然后修改环境变量 <code>vim /etc/profile</code> ，完成后<code>source /etc/profile</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里的ZOOKEEPER_HOME指的是你刚刚解压的目录</span></span><br><span class="line"><span class="comment">#这里因为源文件名字太长，我已经更名mv apache-zookeeper-3.6.2-bin.tar.gz zookeeper</span></span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/root/zookeeper/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ZOOKEEPER_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>另外这里贴出zoo.cfg的一些配置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line"><span class="comment"># tickTime：CS通信心跳数</span></span><br><span class="line"><span class="comment"># Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。tickTime以毫秒为单位。</span></span><br><span class="line">tickTime=2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line"><span class="comment"># initLimit：LF初始通信时限</span></span><br><span class="line"><span class="comment"># 集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。</span></span><br><span class="line">initLimit=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line"><span class="comment"># syncLimit：LF同步通信时限</span></span><br><span class="line"><span class="comment"># 集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量）。</span></span><br><span class="line">syncLimit=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line"><span class="comment"># dataDir：数据文件目录</span></span><br><span class="line"><span class="comment"># Zookeeper保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。</span></span><br><span class="line">dataDir=/data/soft/zookeeper-3.4.12/data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dataLogDir：日志文件目录</span></span><br><span class="line"><span class="comment"># Zookeeper保存日志文件的目录。</span></span><br><span class="line">dataLogDir=/data/soft/zookeeper-3.4.12/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line"><span class="comment"># clientPort：客户端连接端口</span></span><br><span class="line"><span class="comment"># 客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</span></span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line"><span class="comment"># the maximum number of client connections.</span></span><br><span class="line"><span class="comment"># increase this if you need to handle more clients</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the </span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器名称与地址：集群信息（服务器编号，服务器地址，LF通信端口，选举端口）</span></span><br><span class="line"><span class="comment"># 这个配置项的书写格式比较特殊，规则如下：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server.N=YYY:A:B  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中N表示服务器编号，YYY表示服务器的IP地址，A为LF通信端口，表示该服务器与集群中的leader交换的信息的端口。B为选举端口，表示选举新leader时服务器间相互通信的端口（当leader挂掉时，其余服务器会相互通信，选择出新的leader）。一般来说，集群中每个服务器的A端口都是一样，每个服务器的B端口也是一样。但是当所采用的为伪集群时，IP地址都一样，只能时A端口和B端口不一样。</span></span><br></pre></td></tr></table></figure>
<h4 id="4、zookeeper的常用命令">4、zookeeper的常用命令</h4>
<p>进入zookeeper的bin目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">启动命令：./zkServer.sh start</span><br><span class="line"></span><br><span class="line">停止命令：./zkServer.sh stop　　</span><br><span class="line"></span><br><span class="line">重启命令：./zkServer.sh restart</span><br><span class="line"></span><br><span class="line">状态查看命令：./zkServer.sh status</span><br></pre></td></tr></table></figure>
<h4 id="5、开放端口号">5、开放端口号</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=2181/tcp</span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">systemctl restart firewalld</span><br><span class="line"><span class="comment">#查看开放端口</span></span><br><span class="line">netstat -ntl</span><br></pre></td></tr></table></figure>
<h2 id="二、Web-UI可视化的安装">二、Web-UI可视化的安装</h2>
<h4 id="1、Maven的安装">1、Maven的安装</h4>
<p>这里需要git和maven，git的话服务器很多就有自带，就不多阐述了，这里来说一下maven的安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz</span><br><span class="line">tar -zxvf apache-maven-3.3.9-bin.tar.gz</span><br><span class="line">mv apache-maven-3.3.9 /usr/<span class="built_in">local</span>/maven3</span><br></pre></td></tr></table></figure>
<h4 id="2、添加环境变量">2、添加环境变量</h4>
<p>和上面添加一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> M2_HOME=/usr/<span class="built_in">local</span>/maven3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$M2_HOME</span>/bin</span><br></pre></td></tr></table></figure>
<p>如果输入<code>mvn -v</code>有结果的话，就说明安装成功了</p>
<h4 id="3、生成zkui的jar包">3、生成zkui的jar包</h4>
<p>首先下载源码包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/ilanni/zkui.git</span><br></pre></td></tr></table></figure>
<p>进入zkui目录后进行编译，构建和打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>
<p>成功后会生成target文件夹，里面的<code>zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</code>就是我们需要的文件</p>
<h4 id="4、启动jar包">4、启动jar包</h4>
<p>将目录下的config.cfg文件移动到target目录下，然后启动jar包，默认用户名admin，密码manager，端口9090(注意端口的开放)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cpzk config.cfg target/config.cfg</span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line">java -jar zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure>
<h2 id="三、Dubbo-Admin可视化安装">三、Dubbo-Admin可视化安装</h2>
<h4 id="1、下载dubbo-admin">1、下载dubbo-admin</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/dubbo-admin.git</span><br></pre></td></tr></table></figure>
<h4 id="2、设置端口">2、设置端口</h4>
<p>在<code>dubbo-admin\dubbo-admin-server\src\main\resources\application.properties</code>中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 添加一行</span></span><br><span class="line">server.port=8099</span><br></pre></td></tr></table></figure>
<h4 id="3、忽略test">3、忽略test</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#### 在root的pom.xml里面</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.21.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">#### 改为如下</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.21.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4、打包">4、打包</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 在IDEA里面的右边点开Maven点击dubbo-admin（root）</span></span><br><span class="line"><span class="comment">#### 先后执行如下2个命令</span></span><br><span class="line">clean</span><br><span class="line">install</span><br></pre></td></tr></table></figure>
<h4 id="5、部署">5、部署</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 完成后dubbo-admin\dubbo-admin-distribution\target会有个dubbo-admin-0.1.jar</span></span><br><span class="line"><span class="comment">#### 可以部署到本机或者linux上</span></span><br><span class="line"> </span><br><span class="line">请确保zookeeper已经启动</span><br><span class="line">java -jar dubbo-admin-0.1.jar</span><br><span class="line">或者后台运行</span><br><span class="line">nohup java -jar dubbo-admin-0.1.jar  &gt; dubbo-admin.log  2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<p><a href="https://www.cnblogs.com/h--d/p/10269869.html" target="_blank" rel="noopener">参考文章一</a></p>
<p><a href="https://www.cnblogs.com/smail-bao/p/7794636.html" target="_blank" rel="noopener">参考文章二</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>java通过IP解析地理位置</title>
    <url>/posts/3b99ced5.html</url>
    <content><![CDATA[<h2 id="一、问题描述">一、问题描述</h2>
<p>最近在做一个外包项目，这里要求如果定位高延迟怎么办，另外为了能够加附近的人为好友方便，所以想到了利用用户的IP进行粗略的地理位置定位。因为在写的时候遇到了一些坑，所以在这里特别记录一下，方便以后翻阅。</p>
<a id="more"></a>
<h2 id="二、获取访问者ip">二、获取访问者ip</h2>
<h5 id="1、获取ip的java工具类">1、获取ip的java工具类</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(IpUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddr</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String ipAddress = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ipAddress = request.getHeader(<span class="string">"x-forwarded-for"</span>);</span><br><span class="line">            <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ipAddress == <span class="keyword">null</span> || ipAddress.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getRemoteAddr();</span><br><span class="line">                <span class="keyword">if</span> (ipAddress.equals(<span class="string">"127.0.0.1"</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 根据网卡取本机配置的IP</span></span><br><span class="line">                    InetAddress inet = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        inet = InetAddress.getLocalHost();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                        logger.error(<span class="string">"获取用户的主机发生异常"</span>,e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ipAddress = inet.getHostAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span></span><br><span class="line">            <span class="keyword">if</span> (ipAddress != <span class="keyword">null</span> &amp;&amp; ipAddress.length() &gt; <span class="number">15</span>) &#123; <span class="comment">// "***.***.***.***".length()</span></span><br><span class="line">                <span class="comment">// = 15</span></span><br><span class="line">                <span class="keyword">if</span> (ipAddress.indexOf(<span class="string">","</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    ipAddress = ipAddress.substring(<span class="number">0</span>, ipAddress.indexOf(<span class="string">","</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ipAddress=<span class="string">""</span>;</span><br><span class="line">            logger.error(<span class="string">"获取用户的ip地址发生异常"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//ipAddress = this.getRequest().getRemoteAddr();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ipAddress;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2、获取当前的用户的HttpServletRequest">2、获取当前的用户的HttpServletRequest</h5>
<p>一种方法就是利用Controller层的Api接口传进来，但是这样做并不是特别好，所以这里利用了Spring，该方法直接可以在Service获得当前的 HttpServletRequest，但是要注意的是，如果又开了一个线程的话，会报空指针异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br></pre></td></tr></table></figure>
<h5 id="3、nginx配置">3、nginx配置</h5>
<p>当项目没有额外配置nginx已经其他服务时，当前代码已经可以获得访问者的ip，但是如果配置了例如nginx，name当部署到服务器上时，总是会返回服务器的ip地址，在这里我掉坑了好久，解决方法是进行nginx的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">       // 配置此处用于获取客户端的真实IP</span><br><span class="line">       proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">   	proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">   	proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">   	proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">   	proxy_pass http://localhost:8080;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、利用IP解析地理位置">三、利用IP解析地理位置</h2>
<p>在这里其实有很多种方法了，可以利用百度的API，但是有额度限制，在这里我用的是126的API接口</p>
<p><code>http://ip.ws.126.net/ipquery?ip=IP</code></p>
<p>因为126接口无法解析成JSON格式，所以只能自己写代码进行String的拆解。首先进行接口的访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RestTemplate restTemplate=<span class="keyword">new</span> RestTemplate();</span><br><span class="line">       Map&lt;String,String&gt; params=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       params.put(<span class="string">"ip"</span>,ip);  <span class="comment">//</span></span><br><span class="line">       ResponseEntity&lt;String&gt; responseEntity=restTemplate.getForEntity(<span class="string">"http://ip.ws.126.net/ipquery?ip=&#123;ip&#125;"</span>,String<span class="class">.<span class="keyword">class</span>,<span class="title">params</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 字符串解析</span></span><br><span class="line">       String resultStr = responseEntity.getBody().trim();</span><br><span class="line">       <span class="keyword">int</span> provinceNum = resultStr.indexOf(<span class="string">"lo"</span>) +<span class="number">4</span> ;</span><br><span class="line">       <span class="keyword">int</span> cityNum = resultStr.indexOf(<span class="string">"lc"</span>)  +<span class="number">4</span>;</span><br><span class="line">       String province = resultStr.trim().substring(provinceNum,provinceNum+<span class="number">3</span>);</span><br><span class="line">       String city = resultStr.trim().substring(cityNum,cityNum+<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<br/>
<p><a href="https://blog.csdn.net/weixin_42686556/article/details/81948418?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IP解析</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04下docker的入门学习</title>
    <url>/posts/9188f990.html</url>
    <content><![CDATA[<h2 id="一、虚拟机">一、虚拟机</h2>
<p>这里我使用的是VMWare 15的虚拟机软件，Linux版本使用了ubuntu16.04 TLE版本，建议去阿里云下载ubuntu的镜像，启动后默认就可以了，之后所有的操作都以最高权限操作，输入<code>sudo su</code>进行切换。不过这里需要注意的是刚开始系统的apt源是国外的，所以使用<code>apt update</code>时会报错，所以需要在设置里先修改到国内源。后面也可以进入<code>/etc/apt/source.list</code>下进行国内源的添加，这些网上有很多，这里就不阐述了。</p>
<a id="more"></a>
<h2 id="二、docker-的安装">二、docker 的安装</h2>
<h5 id="1、更新apt库">1、更新apt库</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<h5 id="2、以下安装使得允许apt通过HTTPS使用存储库">2、以下安装使得允许apt通过HTTPS使用存储库</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>
<h5 id="3、添加阿里GPG秘钥">3、添加阿里GPG秘钥</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<!-- more-->
<h5 id="4、添加阿里docker源">4、添加阿里docker源</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure>
<h5 id="5、更新apt源">5、更新apt源</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<h5 id="6、安装">6、安装</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y docker-ce</span><br></pre></td></tr></table></figure>
<h5 id="7、查看版本">7、查看版本</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure>
<p>如果成功安装就会显示docker的版本号，另外，为了加快docker镜像的拉取，我们也需要修改docker源</p>
<h5 id="8、更换docker源">8、更换docker源</h5>
<p>以下是国内可用的镜像源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Docker 官方中国区：https://registry.docker-cn.com</span><br><span class="line">网易：http://hub-mirror.c.163.com</span><br><span class="line">中国科技大学：https://docker.mirrors.ustc.edu.cn</span><br><span class="line">阿里云：https://y0qd3iq.mirror.aliyuncs.com</span><br></pre></td></tr></table></figure>
<p>增加Docker的镜像源配置文件 /etc/docker/daemon.json，如果没有配置过镜像该文件默认是不存的，在其中增加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://y0qd3iq.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中的URL就是指定的镜像源，可以将其设置为上面说的四个镜像源中的任何一个。</p>
<p>然后重启Docker服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure>
<p>然后通过以下命令查看配置是否生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info|grep Mirrors -A 1</span><br></pre></td></tr></table></figure>
<p>可以看到如下的输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line"> https://y0qd3iq.mirror.aliyuncs.com/</span><br></pre></td></tr></table></figure>
<p>就表示镜像配置成功，然后再执行docker pull操作，就会很快了。可以使用 <code>docker run hello-world</code> 来验证是否成功</p>
<h2 id="三、docker常用命令">三、docker常用命令</h2>
<h5 id="1、查看docker-当前版本">1、查看docker 当前版本</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>
<h5 id="2、启动与停止">2、启动与停止</h5>
<p>安装完成Docker后，默认已经启动了docker服务，如需手动控制docker服务的启停，可执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">sudo service docker start</span><br><span class="line"><span class="comment"># 停止docker</span></span><br><span class="line">sudo service docker stop</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>
<h5 id="3、查看所有镜像">3、查看所有镜像</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker image ls</span><br><span class="line">sudo docker image ls --all</span><br></pre></td></tr></table></figure>
<ul>
<li>REPOSITORY：镜像所在的仓库名称</li>
<li>TAG：镜像标签</li>
<li>IMAGEID：镜像ID</li>
<li>CREATED：镜像的创建日期(不是获取该镜像的日期)</li>
<li>SIZE：镜像大小</li>
</ul>
<h5 id="4、拉取镜像">4、拉取镜像</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker image pull 镜像名称:版本号 <span class="comment"># 不指定版本默认为最新版</span></span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">sudo docker image pull library/hello-world</span><br></pre></td></tr></table></figure>
<h5 id="5、删除镜像">5、删除镜像</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker image rm 镜像名称/镜像ID</span><br></pre></td></tr></table></figure>
<h5 id="6、创建容器-必须现有镜像，才能创建运行容器">6、创建容器(必须现有镜像，才能创建运行容器)</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run [option] 镜像名 [向启动容器中传入的命令] <span class="comment"># 创建容器</span></span><br></pre></td></tr></table></figure>
<p>常用可选参数说明：</p>
<ul>
<li>-i 表示以“交互模式”运行容器</li>
<li>-t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即 分配一个伪终端。</li>
<li>–name 为创建的容器命名</li>
<li>-v 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使 用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。</li>
<li>-d 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。</li>
<li>-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射</li>
<li>-e 为容器设置环境变量</li>
<li>–network=host 表示将主机的网络环境映射到容器中，容器的网络与主机相同</li>
<li>-it 创建一个伪终端交互界面，name指定容器名称</li>
</ul>
<h5 id="7、查看所有容器">7、查看所有容器</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker container ls <span class="comment">#查看所有正在运行的容器</span></span><br><span class="line">sodu docker ps</span><br><span class="line">sudo docker container ls --all <span class="comment"># 查看所有已创建的容器</span></span><br><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure>
<p>查看容器</p>
<ul>
<li>container id 容器id</li>
<li>image 镜像名称</li>
<li>command 创建后运行的命令</li>
<li>created 创建时间</li>
<li>status 关闭时间</li>
<li>ports 绑定的端口</li>
<li>names 容器名称</li>
</ul>
<h5 id="8、创建一个守护式容器">8、创建一个守护式容器</h5>
<p>如果对于一个需要长期运行的容器来说，我们可以创建一个守护式容器。在容器内部exit退出时，容器也不会停止。即正常来说，进入交互伪终端后输入exit容器也会对应关闭，但是加了-d 内部使用exit也不会结束运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run -dit --name&#x3D;ubuntu2 ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<h5 id="9、运行已经开启的容器">9、运行已经开启的容器</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker container <span class="built_in">exec</span> -it &lt;容器名/id&gt; &lt;运行后使用的第一个命令&gt;</span><br><span class="line"><span class="comment"># 运行使用的第一个命令一般默认为 /bin/bash 否则无法进入交互界面</span></span><br></pre></td></tr></table></figure>
<h5 id="10、停止与启动容器">10、停止与启动容器</h5>
<p>Container 可以省略</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止一个已经在运行的容器</span></span><br><span class="line">sudo docker container stop 容器名或容器id</span><br><span class="line"><span class="comment"># 启动一个已经停止的容器</span></span><br><span class="line">sudo docker container start 容器名或容器id</span><br><span class="line"><span class="comment"># kill掉一个已经在运行的容器</span></span><br><span class="line">sudo docker container <span class="built_in">kill</span> 容器名</span><br></pre></td></tr></table></figure>
<h5 id="11、删除容器">11、删除容器</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker container rm 容器名或容器id</span><br></pre></td></tr></table></figure>
<h2 id="四、入门（创建自己的docker）">四、入门（创建自己的docker）</h2>
<h5 id="1、建立一个C文件，如下：">1、建立一个C文件，如下：</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">void <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Hello World, this is my first docker image!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2、编译">2、编译</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc demo.c -o demo -static</span><br></pre></td></tr></table></figure>
<p>生成可执行文件demo <strong>一定要静态编译，否则会找不到对应的库，报错</strong></p>
<h5 id="3、编辑一个Dockerfile">3、编辑一个Dockerfile</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line"></span><br><span class="line">ADD demo /</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"/demo"</span>]</span><br></pre></td></tr></table></figure>
<p>然后把demo和Dockerfile都放在一个目录下</p>
<h5 id="4、进行docker的生成">4、进行docker的生成</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker build -t hello:0.1 .</span><br></pre></td></tr></table></figure>
<p>hello:0.1是名称和Tag，后面的　.　表示当前目录</p>
<h5 id="5、运行">5、运行</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello:0.1</span><br></pre></td></tr></table></figure>
<h2 id="五、举例（基于ubuntu创建python3-8镜像）">五、举例（基于ubuntu创建python3.8镜像）</h2>
<h5 id="1、下载ubuntu16-04基础镜像">1、下载ubuntu16.04基础镜像</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:16.04</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20201114131659809.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="2、运行容器">2、运行容器</h5>
<p>这里i是指进入交互环境，t指进入终端 ， v指的是容器内路径映射到宿主机的某一路径 ，此时PWD我的当前目录已经挂载到容器的/home/root123目录下了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v <span class="variable">$PWD</span>:/home/root123 ubuntu:16.04 /bin/bash</span><br></pre></td></tr></table></figure>
<h5 id="3、安装基本组件">3、安装基本组件</h5>
<p>在这里有可能自带的apt源还是国外的，而且没有vi/vim可编辑软件，所以这里用了echo直接更新源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"deb http://mirrors.163.com/debian/ jessie main non-free contrib"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.163.com/debian/ jessie main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>在这里可能存在源的问题(我在这里卡了好久，哭)，可以进入/etc/apt/sources.list进行源的更换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>之后依次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line"></span><br><span class="line">apt install vim	<span class="comment">#安装vim</span></span><br><span class="line"></span><br><span class="line">apt install gcc</span><br></pre></td></tr></table></figure>
<p>安装python要的基础包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat1-dev</span><br><span class="line"></span><br><span class="line">apt-get install liblzma-dev libffi-dev libc6-dev</span><br></pre></td></tr></table></figure>
<p>解压python源码包，可以去官网上下载，这里进行编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-3.8.1.tgz</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure -–with-ssl --prefix=/usr/<span class="built_in">local</span>/python3 --<span class="built_in">enable</span>-optimizations</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>进行链接，相当于windows的快捷方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/python3.8 /usr/bin/python3</span><br><span class="line"></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3.8 /usr/bin/pip3</span><br></pre></td></tr></table></figure>
<h5 id="4、定制我们的容器镜像">4、定制我们的容器镜像</h5>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker container ls -a   <span class="comment">#查看所有容器</span></span><br></pre></td></tr></table></figure>
<p>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p>
<p>OPTIONS说明：</p>
<p>-a :提交的镜像作者；</p>
<p>-c :使用Dockerfile指令来创建镜像；</p>
<p>-m :提交时的说明文字；</p>
<p>-p :在commit时，将容器暂停。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker commit -m <span class="string">"add vim&amp;source"</span> -a <span class="string">"author"</span> <span class="number">1</span>db56d541f2c python:<span class="number">1.0</span></span><br><span class="line"><span class="comment">#完成后输入一下即可看见新的镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20201114131730155.png#pic_center" alt="在这里插入图片描述"></p>
<h5 id="5、保存image和container容器">5、保存image和container容器</h5>
<p>image保存为文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker save -o python.tar python:<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>image装载</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker load -input python.tar</span><br></pre></td></tr></table></figure>
<p>容器导出：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker export -o python-export.tar c70bf6d6ca45 <span class="comment">#这是容器的id</span></span><br></pre></td></tr></table></figure>
<p>容器导入：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker import python-export.tar python:v1.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h6 id="注意：save和load是一对，export和import是一对">注意：save和load是一对，export和import是一对</h6>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用idea搭建springboot initializer服务器</title>
    <url>/posts/55d4cd20.html</url>
    <content><![CDATA[<h3 id="问题描述">问题描述</h3>
<p>最近我在搭建springboot项目时，连接公司网线时发现idea一直新建不了项目，浏览器访问<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io</a>也访问不了，但是自己手机热点是可以正常访问的，猜想是被拦截了，所以为了方便，参考网上教程，我打算在自己的服务器上搭建服务，在这里我的服务器是Centos7.6</p>
<a id="more"></a>
<h3 id="搭建过程">搭建过程</h3>
<p>首先下载项目，终端执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;spring-io&#x2F;initializr.git</span><br></pre></td></tr></table></figure>
<p>如果没有git ，那么需要先进行安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install git</span><br></pre></td></tr></table></figure>
<p>另外项目依赖maven，所以要首先确保计算机上安装有maven环境。如果没有maven，则执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;maven&#x2F;maven-3&#x2F;3.5.4&#x2F;binaries&#x2F;apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;mvn mvn &#x2F;root&#x2F;apache-maven-3.5.4&#x2F;bin&#x2F;mvn 1000</span><br></pre></td></tr></table></figure>
<p>然后进入下载的文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd initializr</span><br></pre></td></tr></table></figure>
<p>执行构建命令，这一块可能会很慢，反正我花了好久</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mvnw clean install</span><br></pre></td></tr></table></figure>
<p>之后进入initializr-service文件夹，并执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd initializr-service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;mvnw package</span><br></pre></td></tr></table></figure>
<p>构建成功后会在initializr-service文件夹中生成一个target文件夹，进入target文件夹，在这里我指定了端口号为8082，当然自己可以根据需要修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd target</span><br><span class="line">nohup java -jar initializr-service.jar --server.port&#x3D;8082</span><br></pre></td></tr></table></figure>
<hr>
<p>最后在进行springboot初始化时选择custom，然后把你的<code>http://ip:port</code>输入就可。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot集群体系架构入门</title>
    <url>/posts/895833a0.html</url>
    <content><![CDATA[<p><a href="https://zaomianbao.com/blog/2018/08/22/10" target="_blank" rel="noopener">springboot体系结构</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机安装多个centos7进行集群</title>
    <url>/posts/a9664e3.html</url>
    <content><![CDATA[<h4 id="1-虚拟机镜像的选择">1 虚拟机镜像的选择</h4>
<p>做项目时需要考虑高并发场景，最先想到的就是搭建一个集群进行负载均衡，本来想直接在服务器上进行试验，后来发现要多台服务器而且集群貌似需要在内网段进行，所以选择了虚拟机进行集群。因为电脑内存有限，所以选择了centos7最小镜像进行搭建，minimal版本的ios镜像，这是我选择的镜像下载地址<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">Centos7下载</a></p>
<p>我这里使用了virtualBox作为我的虚拟机软件，因为它相比VM消耗的资源更少，安装过程就不详细展述了，这里要注意的是网络的选择，需要选择两个网卡：</p>
<p>NAT—用来连接外网，下载软件(该镜像是没有任何东西的)</p>
<p>Host-Only—用来和主机进行通信</p>
<a id="more"></a>
<h4 id="2-虚拟机的配置">2 虚拟机的配置</h4>
<p>centos minimal系统安装好后默认是不启动网络的，无法访问外网，并且centos7 默认不支持ipconfig命令，通过 “ip addr”进行网盘信息查询，可以看到两个网卡分别变成了enp0s3和enp0s8。</p>
<p>在这里注意一下，登录的用户名是root。</p>
<ul>
<li>
<p>开启网络访问</p>
<p>配置方式为将/etc/sysconfig/network-scripts/ifcfg-enp0s3文件以及ifcfg-enp0s8的ONBOOT=no 改为 ONBOOT=yes。</p>
<p>输入以下命令之后就可以上网了，而且可以直接用SSH连接(先查看本地地址，然后使用finalshell进行连接)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装ifconfig功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装其余常用工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc gcc-c++ vim make gdb wget</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重命名enp0s3为eth0</p>
<p>对/etc/default/grub文件进行编辑，并在GRUB_CMDLINE_LINUX的最后，加上 net.ifnames=0 biosdevname=0 的参数,然后依次执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/sysconfig/network-scripts/ifcfg-enp0s3 /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure>
<p>最后reboot进行重启</p>
</li>
</ul>
<h4 id="3-设置tomcat开机自启">3 设置tomcat开机自启</h4>
<p>怎么安装tomcat以及jdk在这里就不展述了，网上有很多教程，在这里我罗列一种开机自启tomcat的方法，我的</p>
<p>tomcat目录为<code>/root/down/apache-tomcat-8.5.45</code></p>
<p>JDK目录为<code>/root/down/jdk1.8.0_221/</code></p>
<p>1、为Tomcat添加启动参数</p>
<p>catalina.sh在执行的时候会调用同级路径下的setenv.sh来设置额外的环境变量，因此在<code>/root/down/apache-tomcat-8.5.45/bin</code>路径下创建setenv.sh文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#JAVA_HOME </span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/down/jdk1.8.0_221/</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=/root/down/apache-tomcat-8.5.45</span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=/root/down/apache-tomcat-8.5.45</span><br><span class="line"><span class="comment"># 设置Tomcat的PID文件</span></span><br><span class="line">CATALINA_PID=<span class="string">"<span class="variable">$CATALINA_BASE</span>/tomcat.pid"</span></span><br><span class="line"><span class="comment"># 添加JVM选项</span></span><br><span class="line">JAVA_OPTS=<span class="string">"-server -XX:PermSize=256M -XX:MaxPermSize=1024m -Xms512M -Xmx1024M -XX:MaxNewSize=256m"</span></span><br></pre></td></tr></table></figure>
<p>2、在/usr/lib/systemd/system路径下添加tomcat.service文件，内容如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=tomcat</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=<span class="regexp">/root/down</span><span class="regexp">/apache-tomcat-8.5.45/tomcat</span>.pid</span><br><span class="line">ExecStart=<span class="regexp">/root/down</span><span class="regexp">/apache-tomcat-8.5.45/bin</span><span class="regexp">/startup.sh</span></span><br><span class="line"><span class="regexp">ExecReload=/bin</span><span class="regexp">/kill -s HUP $MAINPID</span></span><br><span class="line"><span class="regexp">ExecStop=/bin</span><span class="regexp">/kill -s QUIT $MAINPID</span></span><br><span class="line"><span class="regexp">PrivateTmp=true</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">[Install]</span></span><br><span class="line"><span class="regexp">WantedBy=multi-user.target</span></span><br></pre></td></tr></table></figure>
<p>3、把tomcat加入开机自启动<br>
<code>systemctl enable tomcat.service</code></p>
<p>4、重启服务器<br>
<code>reboot</code></p>
<p>5、再次连接后，查看服务状态<br>
<code>systemctl status tomcat.service</code></p>
<p>在这里有个坑，就是浏览器访问时会一直转圈，我估计是机器性能的缘故</p>
<p>安装上文的参考文章进行多个虚拟机的搭建，然后配置好jdk和tomcat，在这里要注意的是防火墙的使用，虚拟机的话可以直接关闭防火墙</p>
<hr>
<p>1、firewalld的基本使用<br>
启动： systemctl start firewalld</p>
<p>查看状态： systemctl status firewalld / firewall-cmd --state 这个命令也可以，只是信息会简单点</p>
<p>停止： systemctl disable firewalld</p>
<p>禁用： systemctl stop firewalld</p>
<p>怎么开启一个端口</p>
<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent  （--permanent永久生效，没有此参数重启后失效）</span><br></pre></td></tr></table></figure>
<p>添加端口外部访问权限（这样外部才能访问）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=8080/tcp</span><br></pre></td></tr></table></figure>
<p>重新载入，添加端口后重新载入才能起作用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p>这些之后，端口是开启成功的，如果没有成功，重启系统试试。</p>
<p>查看端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br></pre></td></tr></table></figure>
<p>删除端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>
<p>查看firewall是否运行,下面两个命令都可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure>
<p>查看当前开了哪些端口</p>
<p>其实一个服务对应一个端口，每个服务对应/usr/lib/firewalld/services下面一个xml文件。</p>
<p>查看开启了哪些服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-services</span><br></pre></td></tr></table></figure>
<p>查看开启了哪些端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>
<p>查看还有哪些服务可以打开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --get-services</span><br></pre></td></tr></table></figure>
<p>查看所有打开的端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>
<p>更新防火墙规则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="参考文章"><a href="https://blog.csdn.net/su83362368/article/details/78502545" target="_blank" rel="noopener">参考文章</a></h3>
]]></content>
      <tags>
        <tag>Centos集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的入门与配置</title>
    <url>/posts/45652.html</url>
    <content><![CDATA[<h2 id="1Nginx简介">1	Nginx简介</h2>
<p>Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。在学习Nginx前，首先要明确Nginx的一些特点，包括</p>
<ul>
<li>反向代理</li>
<li>负载均衡</li>
<li>动静分离</li>
</ul>
<p><img src="https://pic1.zhimg.com/v2-e1826bab1d07df8e97d61aa809b94a10_r.jpg" alt=""></p>
<p>上图基本上说明了当下流行的技术架构。</p>
<a id="more"></a>
<h3 id="1-1-反向代理">1.1 反向代理</h3>
<p>再讲反向代理之前首先要知道什么叫正向代理，正向代理相当于当你要访问一个资源时，你需要一个代理服务器进行资源访问</p>
<p><img src="https://pic4.zhimg.com/80/v2-c8ac111c267ae0745f984e326ef0c47f_hd.jpg" alt=""></p>
<p>反向代理，客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器的地址，隐藏了真实服务器的ip</p>
<p><img src="https://pic2.zhimg.com/80/v2-4787a512240b238ebf928cd0651e1d99_hd.jpg" alt=""></p>
<h3 id="1-2-负载均衡">1.2 负载均衡</h3>
<p>简单来说，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡</p>
<h3 id="1-3-动静分离">1.3 动静分离</h3>
<p>这个也很好理解，就是讲动态资源和静态资源相互分离，把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p>
<h2 id="2-Nginx的安装">2 Nginx的安装</h2>
<p>进入官网下载http://nginx.org/ ,这里自行替换版本</p>
<p><code>pcre-8.37.tar.gz</code>    <code>openssl-1.0.1t.tar.gz</code>   <code>zlib-1.2.8.tar.gz</code>   <code>nginx-1.11.1.tar.gz</code></p>
<p>第一步，安装pcre<br>
wget <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</a></p>
<p>下载完成后输入命令进行解压</p>
<p><code>tar -xvf pcre-8.37.tar.gz </code></p>
<p>在这里有些系统会自带，所以不安装也没事</p>
<p>./configure 完成后，回到 pcre 目录下执行<code>make</code>，</p>
<p>再执行<code>make install </code><br>
第二步，安装openssl<br>
第三步，安装zlib<br>
<code>yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</code></p>
<p>最后安装Nginx</p>
<p><code>wget  http://nginx.org/download/nginx-1.16.1.tar.gz   </code></p>
<p>之后进行和上述一样的操作就行了。</p>
<br/>
<br/>
<p><font color=red>需要注意的是端口的开放</font></p>
<p>查看开放的端口号 firewall-cmd --list-all</p>
<p>设置开放的端口号<br>
firewall-cmd --add-service=http --permanent<br>
sudo firewall-cmd --add-port=80/tcp --permanent<br>
重启防火墙<br>
firewall-cmd --reload</p>
<hr>
<p>当然Nginx安装如果不想这么麻烦，可以直接在宝塔面板进行快速安装(傻瓜式安装，不过我装了有点问题，折腾了好久还是选择了安装包安装)</p>
<h2 id="3-Nginx常用命令">3 Nginx常用命令</h2>
<p><code>查看版本号</code></p>
<p>./nginx -v</p>
<p><code>启动</code></p>
<p>在/usr/local/nginx/sbin 目录下执行 ./nginx</p>
<p><code>关闭</code></p>
<p>在/usr/local/nginx/sbin 目录下执行 ./nginx -s  stop</p>
<p><code>重新加载</code></p>
<p>在/usr/local/nginx/sbin 目录下执行 ./nginx -s  reload</p>
<h2 id="4-Nginx特点详细说明">4 Nginx特点详细说明</h2>
<h3 id="4-1-反向代理">4.1 反向代理</h3>
<p>首先准备两台tomcat服务器，修改端口号(有三处需要修改，文件位置在conf/server.xml)，一个修改成8081，另一个8082，然后分别在Webapp中创建文件夹edu和udp并在目录下创建a.html，里面随便可以写任何东西。然后修改nginx的配置文件(文件位置在/usr/local/nginx/conf/nginx.conf) server部分如下，浏览器输入</p>
<p><code>服务器ip/udp/a.html</code> 后就会自动访问，并不需要输入端口号。</p>
<p>若一个Nginx服务器需要代理多个应用，则需要创建多个server。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">location ~ /edu/ &#123;</span><br><span class="line">proxy_pass   http://127.0.0.1:8081;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /udp/ &#123;</span><br><span class="line">proxy_pass   http://127.0.0.1:8082;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>location指令语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location [ &#x3D; | ~ |~* |^~] uri&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1、= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</p>
<p>2、~：用于表示 uri 包含正则表达式，并且区分大小写。</p>
<p>3、~*：用于表示 uri 包含正则表达式，并且不区分大小写。</p>
<p>4、^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</p>
<p><font color=red>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识。</font></p>
<h3 id="4-2-负载均衡">4.2 负载均衡</h3>
<p>负载均衡指的是当访问相同路径的资源，nginx按照设置好的分配策略，自动进行某一个tomcat的访问，比如我直接输入</p>
<p><code>服务器ip/edu/a.html</code></p>
<p>我服务器中有两台tomcat并且同时有路径/edu/a.html，当访问时会按照固定分配策略选择一台tomcat进行服务，若其中一台挂了，另一台还可以正常工作。</p>
<p>我的nginx一部分配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">#负载均衡</span></span><br><span class="line">   upstream myserver &#123;</span><br><span class="line">    <span class="comment">#ip_hash</span></span><br><span class="line">server	服务器ip:8081 weight=5;</span><br><span class="line">server	服务器ip:8082 weight=10;</span><br><span class="line"><span class="comment">#fair  </span></span><br><span class="line">   &#125;</span><br><span class="line">...</span><br><span class="line">   server &#123;</span><br><span class="line">	<span class="comment">#listen       80;        #端口</span></span><br><span class="line">       server_name  _;   <span class="comment">#服务名</span></span><br><span class="line"></span><br><span class="line">       charset utf-8,gbk;</span><br><span class="line">       root    /data/download;  <span class="comment">#显示的根索引目录</span></span><br><span class="line">       autoindex on;             <span class="comment">#开启索引功能</span></span><br><span class="line">       <span class="comment">#autoindex_exact_size off; # 关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb）</span></span><br><span class="line">       <span class="comment">#autoindex_localtime on;   # 显示本机时间而非 GMT 时间</span></span><br><span class="line">   <span class="comment">#负载均衡</span></span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass   http://myserver;</span><br><span class="line">           root	html;</span><br><span class="line">           index	index.html	index.html;</span><br><span class="line">       &#125;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而分配策略有以下几点</p>
<p>1、轮询（默认）<br>
每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。<br>
2、weight<br>
weightweight weightweight代表权 代表权 ,重默认为 重默认为 重默认为 1, 权重越高被分配的客户端多 权重越高被分配的客户端多 权重越高被分配的客户端多 权重越高被分配的客户端多 权重越高被分配的客户端多 权重越高被分配的客户端多<br>
指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况</p>
<p>3、ip_hash<br>
每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p>
<p>4、fair（第三方）<br>
按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>
<h3 id="4-3-动静分离">4.3 动静分离</h3>
<p>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。</p>
<p>我在我的文件夹data下分别创建了www和image文件夹，里面分别存放了图片和一个html，当浏览器访问时就会自动寻找对应的静态资源（expires参数也可配置）,部分配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	...</span><br><span class="line">		<span class="comment">#负载均衡</span></span><br><span class="line">		location / &#123;</span><br><span class="line">            proxy_pass   http://myserver;</span><br><span class="line">            root	html;</span><br><span class="line">            index	index.html	index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#动静分离</span></span><br><span class="line">		location /www/&#123;</span><br><span class="line">            root	/contest/data/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /image/&#123;</span><br><span class="line">            root	/contest/data/;</span><br><span class="line">            <span class="comment">#列出当前文件夹文件</span></span><br><span class="line">            autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-nginx其他情况">4.4 nginx其他情况</h3>
<p>使用Nginx做代理的时候，有时需要把请求原封不动的转发给下一个服务。</p>
<p>比如，<a href="http://xn--shawn-6u8oj48c.com/test/a/b.html" target="_blank" rel="noopener">访问shawn.com/test/a/b.html</a>, 要求转发到localhost:8088/test/a/b.html</p>
<p>简单配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream one &#123;</span><br><span class="line">  server localhost:8088 weight=5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen              80;</span><br><span class="line">    server_name         shawn.com;</span><br><span class="line">    access_log  <span class="string">"pipe:rollback /data/log/nginx/access.log interval=1d baknum=7 maxsize=1G"</span>  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header  X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即，设置<code>proxy_pass</code>即可。请求只会替换域名。</p>
<p>但很多时候，我们需要根据url的前缀转发到不同的服务。</p>
<p>比如</p>
<p><a href="http://shawn.com/user/profile.html%E8%BD%AC%E5%8F%91%E5%88%B0" target="_blank" rel="noopener">shawn.com/user/profile.html转发到</a> <strong>用户服务</strong>localhost:8089/profile.html</p>
<p><a href="http://shawn.com/order/details.html%E8%BD%AC%E5%8F%91%E5%88%B0" target="_blank" rel="noopener">shawn.com/order/details.html转发到</a> <strong>订单服务</strong> localhost:8090/details.html</p>
<p>即，url的前缀对下游的服务是不需要的，除非下游服务添加context-path, 但很多时候我们并不喜欢加这个。如果Nginx转发的时候，把这个前缀去掉就好了。</p>
<p><strong>一个种方案是proxy_pass后面加根路径<code>/</code>.</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen              80;</span><br><span class="line">    server_name         shawn.com;</span><br><span class="line">    access_log  <span class="string">"pipe:rollback /data/log/nginx/access.log interval=1d baknum=7 maxsize=1G"</span>  main;</span><br><span class="line"></span><br><span class="line">    location ^~/user/ &#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header  X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://user/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~/order/ &#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header  X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://order/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>^~/user/</code>表示匹配前缀是<code>user</code>的请求，proxy_pass的结尾有<code>/</code>， 则会把<code>/user/*</code>后面的路径直接拼接到后面，即移除user.</p>
<p><strong>另一种方案是使用<code>rewrite</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream user &#123;</span><br><span class="line">  server localhost:8089 weight=5;</span><br><span class="line">&#125;</span><br><span class="line">upstream order &#123;</span><br><span class="line">  server localhost:8090 weight=5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen              80;</span><br><span class="line">    server_name         abc.com;</span><br><span class="line">    access_log  <span class="string">"pipe:rollback /data/log/nginx/access.log interval=1d baknum=7 maxsize=1G"</span>  main;</span><br><span class="line"></span><br><span class="line">    location ^~/user/ &#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header  X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        rewrite ^/user/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">        proxy_pass http://user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~/order/ &#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header  X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header  X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        rewrite ^/order/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">        proxy_pass http://order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到proxy_pass结尾没有<code>/</code>， <code>rewrite</code>重写了url。</p>
<p><strong>alias与root的区别</strong></p>
<blockquote>
<p>root 实际访问文件路径会拼接URL中的路径<br>
alias 实际访问文件路径不会拼接URL中的路径</p>
</blockquote>
<p><strong>last 和 break关键字的区别</strong></p>
<blockquote>
<p>只用到了break，即匹配到此处后不会继续跳。</p>
</blockquote>
<p><strong>permanent 和 redirect关键字的区别</strong></p>
<blockquote>
<p>rewrite … permanent 永久性重定向，请求日志中的状态码为301</p>
<p>rewrite … redirect 临时重定向，请求日志中的状态码为302</p>
</blockquote>
<h2 id="5-Nginx配置高可用集群">5 Nginx配置高可用集群</h2>
<p><a href="https://imgchr.com/i/lfxtfO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/10/lfxtfO.jpg" alt="lfxtfO.jpg"></a></p>
<p>原理如上，相信大家的水平应该都能看懂，在配置时需要一些准备工作</p>
<ol>
<li>两台服务器</li>
<li>两台服务器都需要安装好Nginx</li>
<li>两台服务器需要安装keepalived</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装命令</span></span><br><span class="line">yum install keepalived -y</span><br><span class="line"><span class="comment">#检查是否安装好</span></span><br><span class="line">rpm -q -a keepalived</span><br></pre></td></tr></table></figure>
<p>安装安成后在/etc/keepalived下有配置文件，原理详看<a href="https://baike.baidu.com/item/Keepalived/10346758?fr=aladdin" target="_blank" rel="noopener">keepalived原理</a></p>
<h5 id="主从配置-还有双主模式自行学习">主从配置(还有双主模式自行学习)</h5>
<p><img src="https://s2.ax1x.com/2020/01/10/lfx1mR.jpg" alt="lfx1mR.jpg"></p>
<p>1、修改keepalived配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">#在/etc/hosts中修改</span></span><br><span class="line">   router_id LVS_DEVEL    <span class="comment">#主机名字</span></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测脚本和权重参数</span></span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line">	script <span class="string">"/usr/local/src/nginx_check.sh"</span></span><br><span class="line">	interval 2   <span class="comment">#检测间隔</span></span><br><span class="line">	weight -2	<span class="comment">#权重</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#虚拟IP配置</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER       <span class="comment">#备份改成BACKUP</span></span><br><span class="line">    interface eth0			<span class="comment">#网卡  ifconfig可以查看</span></span><br><span class="line">    virtual_router_id 51    <span class="comment">#主备机必须相同</span></span><br><span class="line">    priority 100      <span class="comment">#优先级 主机较大，备份机较小</span></span><br><span class="line">    advert_int 1		<span class="comment">#心跳包间隔</span></span><br><span class="line">    authentication &#123;     <span class="comment">#校验方式</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;		<span class="comment">#可以绑定多个虚拟ip</span></span><br><span class="line">       在这里添加虚拟ip地址</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、在/usr/local/src添加检测脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=`ps -C nginx –no-header |wc -l` </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">	/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">	sleep 2</span><br><span class="line">	<span class="keyword">if</span> [ `ps -C nginx --no-header |wc -l` -eq 0 	];<span class="keyword">then</span></span><br><span class="line">		killall keepalived</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>3、启动两台服务器的nginx和keepalived，其中备份机的keepalived配置需要简单修改，根据注释应该能看懂了。</p>
<p><font color=red>注意：keepalived一般是在内网段进行，要公网服务器进行的话，需要至少三个公网ip</font>（现阶段没这么多资金于是就没试验了），还有如果是虚拟机进行试验的话防火墙需要注意</p>
<h2 id="6-Nginx的原理">6 Nginx的原理</h2>
<p><img src="https://s2.ax1x.com/2020/01/10/lfxJk6.jpg" alt="lfxJk6.jpg"></p>
<p>多个worker可以进行热部署，而且提高了服务的可靠性，另外worker数一般和cpu核心数相等，这样能最大限度发挥性能。对于连接数worker_connection，访问静态资源占用2个(请求和返回)，动态资源占用4个(另外再加上tomcat的请求)。</p>
<p><br/>参考：</p>
<p><a href="https://www.cnblogs.com/woshimrf/p/nginx-config-location.html" target="_blank" rel="noopener">https://www.cnblogs.com/woshimrf/p/nginx-config-location.html</a></p>
<p><a href="http://www.gulixueyuan.com/my/course/332" target="_blank" rel="noopener">尚硅谷nginx学习视频</a></p>
<br/>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>高并发</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>githubPage和hexo进行个人博客搭建</title>
    <url>/posts/1f66eb4d.html</url>
    <content><![CDATA[<p>参考如下</p>
<h4 id="博客搭建"><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">博客搭建</a></h4>
<h4 id="博客搭建-v2"><a href="https://blog.csdn.net/qq_37513473/article/details/88617281" target="_blank" rel="noopener">博客搭建</a></h4>
<h4 id="博客美化"><a href="http://xxty.fun/2019/08/14/hexo%E5%8D%9A%E5%AE%A2%EF%BC%9Ayilia%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">博客美化</a></h4>
<hr>
<p>另外因为yilia默认的文章搜索是按照/年/月/日/文章 来进行搜索的，这种搜索方式不利于被检索到，而且当题目是中文的时候，中文会变成很长的编码，看起来也很不爽，在网上找了很久，最终采用<code>hexo-abbrlink</code>这个插件，下面简单说一下安装步骤，因为网上说的还是有些坑</p>
<br/>
<a id="more"></a>
<p>首先安装插件，在根目录下安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>然后配置根目录的_config.yml，找到以下文件并修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">permalink: post/:abbrlink.html     <span class="comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></span><br><span class="line">abbrlink:  </span><br><span class="line">	alg: crc32  <span class="comment"># 算法：crc16(default) and crc32  </span></span><br><span class="line">	rep: hex    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>在这里我要说一说注意冒号，不写的话就不会进行匹配了，还有如果不想把文章都发到根目录下，也就是像我一样有个posts文件夹的话，首先要进行文件目录的创建，即</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page posts</span><br></pre></td></tr></table></figure>
<p>然后删除index.md文件，最后进行清除和构建，每篇文章就会自动构建一个abbrlink，这样就可以按照                <code>你的域名/posts/xxx.html</code>进行访问了</p>
<p>另外这篇美化hexo的很不错</p>
<p><a href="http://yansheng836.coding.me/article/e9d1b881.html" target="_blank" rel="noopener">高级yilia美化</a></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>hexo的搭建和美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
